/* Generated by Cython 3.1.2 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "yt/utilities/lib/tsearch.h"
        ],
        "extra_compile_args": [
            "-std=c++14"
        ],
        "include_dirs": [
            "yt/utilities/lib/"
        ],
        "language": "c++",
        "libraries": [
            "EWAH_LIBS"
        ],
        "name": "yt.geometry.particle_oct_container",
        "sources": [
            "yt/geometry/particle_oct_container.pyx"
        ]
    },
    "module_name": "yt.geometry.particle_oct_container"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
/* InitLimitedAPI */
#if defined(Py_LIMITED_API) && !defined(CYTHON_LIMITED_API)
  #define CYTHON_LIMITED_API 1
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x03080000
    #error Cython requires Python 3.8+.
#else
#define __PYX_ABI_VERSION "3_1_2"
#define CYTHON_HEX_VERSION 0x030102F0
#define CYTHON_FUTURE_DIVISION 0
/* CModulePreamble */
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 1
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 1
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PYPY_VERSION_NUM >= 0x07030C00)
  #endif
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_NUM >= 0x07031100)
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND (__PYX_LIMITED_VERSION_HEX >= 0x030A0000)
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #ifdef Py_GIL_DISABLED
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 1
  #else
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #endif
  #if PY_VERSION_HEX < 0x030A0000
    #undef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #elif !defined(CYTHON_USE_TYPE_SLOTS)
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLIST_INTERNALS)
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #elif !defined(CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS)
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL 0
  #elif !defined(CYTHON_FAST_GIL)
    #define CYTHON_FAST_GIL (PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_SYS_MONITORING
    #define CYTHON_USE_SYS_MONITORING (PY_VERSION_HEX >= 0x030d00B1)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5 && !CYTHON_USE_MODULE_STATE)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS (!CYTHON_COMPILING_IN_CPYTHON_FREETHREADING)
  #endif
#endif
#ifndef CYTHON_FAST_PYCCALL
#define CYTHON_FAST_PYCCALL  CYTHON_FAST_PYCALL
#endif
#ifndef CYTHON_VECTORCALL
#if CYTHON_COMPILING_IN_LIMITED_API
#define CYTHON_VECTORCALL  (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
#else
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON && !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifndef Py_UNREACHABLE
  #define Py_UNREACHABLE()  assert(0); abort()
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

/* CppInitCode */
#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

/* PythonCompatibility */
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#define __Pyx_BUILTIN_MODULE_NAME "builtins"
#define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    #ifndef CO_OPTIMIZED
    static int CO_OPTIMIZED;
    #endif
    #ifndef CO_NEWLOCALS
    static int CO_NEWLOCALS;
    #endif
    #ifndef CO_VARARGS
    static int CO_VARARGS;
    #endif
    #ifndef CO_VARKEYWORDS
    static int CO_VARKEYWORDS;
    #endif
    #ifndef CO_ASYNC_GENERATOR
    static int CO_ASYNC_GENERATOR;
    #endif
    #ifndef CO_GENERATOR
    static int CO_GENERATOR;
    #endif
    #ifndef CO_COROUTINE
    static int CO_COROUTINE;
    #endif
#else
    #ifndef CO_COROUTINE
      #define CO_COROUTINE 0x80
    #endif
    #ifndef CO_ASYNC_GENERATOR
      #define CO_ASYNC_GENERATOR 0x200
    #endif
#endif
static int __Pyx_init_co_variables(void);
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#ifndef METH_FASTCALL
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void (*cfunc)(void)) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x03090000
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_GRAAL
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) _PyFrame_SetLineNumber((frame), (lineno))
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#endif
#if CYTHON_USE_MODULE_STATE
static CYTHON_INLINE void *__Pyx__PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#define __Pyx_PyModule_GetState(o) (__pyx_mstatetype *)__Pyx__PyModule_GetState(o)
#else
#define __Pyx_PyModule_GetState(op) ((void)op,__pyx_mstate_global)
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE((PyObject *) obj), name, func_ctype)
#define __Pyx_PyObject_TryGetSlot(obj, name, func_ctype) __Pyx_PyType_TryGetSlot(Py_TYPE(obj), name, func_ctype)
#define __Pyx_PyObject_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#define __Pyx_PyObject_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype) __Pyx_PyType_GetSlot(type, name, func_ctype)
  #define __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype) (((type)->sub) ? ((type)->sub->name) : NULL)
  #define __Pyx_PyType_TryGetSubSlot(type, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype)
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype)\
    ((__PYX_LIMITED_VERSION_HEX >= 0x030A0000 ||\
     (PyType_GetFlags(type) & Py_TPFLAGS_HEAPTYPE) || __Pyx_get_runtime_version() >= 0x030A0000) ?\
     __Pyx_PyType_GetSlot(type, name, func_ctype) : NULL)
  #define __Pyx_PyType_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSlot(obj, name, func_ctype)
  #define __Pyx_PyType_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSlot(obj, name, func_ctype)
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif !CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
#endif
#define __Pyx_PyObject_GetIterNextFunc(iterator)  __Pyx_PyObject_GetSlot(iterator, tp_iternext, iternextfunc)
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#else
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains)
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyList_GetItemRef(o, i) (likely((i) >= 0) ? PySequence_GetItem(o, i) : (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
  #else
    #define __Pyx_PyList_GetItemRef(o, i) PySequence_ITEM(o, i)
  #endif
#elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #else
    #define __Pyx_PyList_GetItemRef(o, i) __Pyx_XNewRef(PyList_GetItem(o, i))
  #endif
#else
  #define __Pyx_PyList_GetItemRef(o, i) __Pyx_NewRef(PyList_GET_ITEM(o, i))
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyDict_GetItemRef(dict, key, result) PyDict_GetItemRef(dict, key, result)
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyObject_GetItem(dict, key);
  if (*result == NULL) {
    if (PyErr_ExceptionMatches(PyExc_KeyError)) {
      PyErr_Clear();
      return 0;
    }
    return -1;
  }
  return 1;
}
#else
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyDict_GetItemWithError(dict, key);
  if (*result == NULL) {
    return PyErr_Occurred() ? -1 : 0;
  }
  Py_INCREF(*result);
  return 1;
}
#endif
#if defined(CYTHON_DEBUG_VISIT_CONST) && CYTHON_DEBUG_VISIT_CONST
  #define __Pyx_VISIT_CONST(obj)  Py_VISIT(obj)
#else
  #define __Pyx_VISIT_CONST(obj)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GET_ITEM(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GET_ITEM(o, i)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GetItem(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GetItem(o, i)
#endif
#if CYTHON_ASSUME_SAFE_SIZE
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GET_LENGTH(o)
#else
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GetLength(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_InternFromString)
  #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
#endif
#define __Pyx_PyLong_FromHash_t PyLong_FromSsize_t
#define __Pyx_PyLong_AsHash_t   __Pyx_PyIndex_AsSsize_t
#if __PYX_LIMITED_VERSION_HEX >= 0x030A0000
    #define __Pyx_PySendResult PySendResult
#else
    typedef enum {
        PYGEN_RETURN = 0,
        PYGEN_ERROR = -1,
        PYGEN_NEXT = 1,
    } __Pyx_PySendResult;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX < 0x030A00A3
  typedef __Pyx_PySendResult (*__Pyx_pyiter_sendfunc)(PyObject *iter, PyObject *value, PyObject **result);
#else
  #define __Pyx_pyiter_sendfunc sendfunc
#endif
#if !CYTHON_USE_AM_SEND
#define __PYX_HAS_PY_AM_SEND 0
#elif __PYX_LIMITED_VERSION_HEX >= 0x030A0000
#define __PYX_HAS_PY_AM_SEND 1
#else
#define __PYX_HAS_PY_AM_SEND 2  // our own backported implementation
#endif
#if __PYX_HAS_PY_AM_SEND < 2
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
        __Pyx_pyiter_sendfunc am_send;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_SlotTpAsAsync(s) ((PyAsyncMethods*)(s))
#endif
#if CYTHON_USE_AM_SEND && PY_VERSION_HEX < 0x030A00F0
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (1UL << 21)
#else
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (0)
#endif
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyInterpreterState_Get() PyInterpreterState_Get()
#else
#define __Pyx_PyInterpreterState_Get() PyThreadState_Get()->interp
#endif
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030A0000
#ifdef __cplusplus
extern "C"
#endif
PyAPI_FUNC(void *) PyMem_Calloc(size_t nelem, size_t elsize);
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_init_co_variable(PyObject *inspect, const char* name, int *write_to) {
    int value;
    PyObject *py_value = PyObject_GetAttrString(inspect, name);
    if (!py_value) return 0;
    value = (int) PyLong_AsLong(py_value);
    Py_DECREF(py_value);
    *write_to = value;
    return value != -1 || !PyErr_Occurred();
}
static int __Pyx_init_co_variables(void) {
    PyObject *inspect;
    int result;
    inspect = PyImport_ImportModule("inspect");
    result =
#if !defined(CO_OPTIMIZED)
        __Pyx_init_co_variable(inspect, "CO_OPTIMIZED", &CO_OPTIMIZED) &&
#endif
#if !defined(CO_NEWLOCALS)
        __Pyx_init_co_variable(inspect, "CO_NEWLOCALS", &CO_NEWLOCALS) &&
#endif
#if !defined(CO_VARARGS)
        __Pyx_init_co_variable(inspect, "CO_VARARGS", &CO_VARARGS) &&
#endif
#if !defined(CO_VARKEYWORDS)
        __Pyx_init_co_variable(inspect, "CO_VARKEYWORDS", &CO_VARKEYWORDS) &&
#endif
#if !defined(CO_ASYNC_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_ASYNC_GENERATOR", &CO_ASYNC_GENERATOR) &&
#endif
#if !defined(CO_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_GENERATOR", &CO_GENERATOR) &&
#endif
#if !defined(CO_COROUTINE)
        __Pyx_init_co_variable(inspect, "CO_COROUTINE", &CO_COROUTINE) &&
#endif
        1;
    Py_DECREF(inspect);
    return result ? 0 : -1;
}
#else
static int __Pyx_init_co_variables(void) {
    return 0;  // It's a limited API-only feature
}
#endif

/* MathInitCode */
#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #ifndef _USE_MATH_DEFINES
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#ifndef CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#define CYTHON_CLINE_IN_TRACEBACK_RUNTIME 0
#endif
#ifndef CYTHON_CLINE_IN_TRACEBACK
#define CYTHON_CLINE_IN_TRACEBACK CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#endif
#if CYTHON_CLINE_IN_TRACEBACK
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; __pyx_clineno = __LINE__; (void) __pyx_clineno; }
#else
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; (void) __pyx_clineno; }
#endif
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__yt__geometry__particle_oct_container
#define __PYX_HAVE_API__yt__geometry__particle_oct_container
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <map>
#include <string.h>
#include <string_view>
#include <string>
#include <vector>
#include <ostream>
#include <istream>
#include <sstream>
#include "ewah.h"
#include "boolarray.h"
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#include <math.h>
#include <stdlib.h>
#include <float.h>
#include "tsearch.h"
#include <set>
#include "pythread.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AS_STRING(s)
#else
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AsString(s)
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
static CYTHON_INLINE PyObject *__Pyx_NewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_NewRef)
    return Py_NewRef(obj);
#else
    Py_INCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_XNewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_XNewRef)
    return Py_XNewRef(obj);
#else
    Py_XINCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b);
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __Pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AS_DOUBLE(x)
#else
#define __Pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AsDouble(x)
#endif
#define __Pyx_PyFloat_AsFloat(x) ((float) __Pyx_PyFloat_AsDouble(x))
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#elif __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeASCII(c_str, size, NULL)
#else
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
/* PretendToInitialize */
#ifdef __cplusplus
#if __cplusplus > 201103L
#include <type_traits>
#endif
template <typename T>
static void __Pyx_pretend_to_initialize(T* ptr) {
#if __cplusplus > 201103L
    if ((std::is_trivially_default_constructible<T>::value))
#endif
        *ptr = T();
    (void)ptr;
}
#else
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
#endif


#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * const __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER)) || ((defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_COMPLEX__) && !defined(_MSC_VER))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char* const __pyx_f[] = {
  "yt/geometry/particle_oct_container.pyx",
  "<stringsource>",
  "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd",
  "yt/utilities/lib/fp_utils.pxd",
  "yt/utilities/lib/geometry_utils.pxd",
  "cpython/type.pxd",
  "yt/geometry/selection_routines.pxd",
  "yt/utilities/lib/allocation_container.pxd",
  "yt/geometry/oct_container.pxd",
  "yt/geometry/oct_visitors.pxd",
  "ewah_bool_utils/ewah_bool_wrap.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __pyx_atomic_int_type int
#define __pyx_nonatomic_int_type int
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__))
    #include <stdatomic.h>
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)))
    #include <atomic>
#endif
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__) &&\
                       ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type atomic_int
    #define __pyx_atomic_ptr_type atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) atomic_fetch_add_explicit(value, 1, memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) atomic_fetch_add_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) atomic_fetch_sub_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) atomic_load(value)
    #define __pyx_atomic_store(value, new_value) atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) atomic_load_explicit(value, memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) atomic_load_explicit(value, memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C atomics"
    #endif
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)) &&\
                    ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type std::atomic_int
    #define __pyx_atomic_ptr_type std::atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) std::atomic_fetch_sub_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) std::atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) std::atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) std::atomic_load(value)
    #define __pyx_atomic_store(value, new_value) std::atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) std::atomic_load_explicit(value, std::memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) std::atomic_load_explicit(value, std::memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) std::atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C++ atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C++ atomics"
    #endif
#elif CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_ptr_type void*
    #define __pyx_atomic_incr_relaxed(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) __sync_fetch_and_sub(value, 1)
    #define __pyx_atomic_sub(value, arg) __sync_fetch_and_sub(value, arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = __sync_val_compare_and_swap(value, *expected, desired);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_store(value, new_value) __sync_lock_test_and_set(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_load_acquire(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) __sync_lock_test_and_set(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER)
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #define __pyx_atomic_ptr_type void*
    #undef __pyx_nonatomic_int_type
    #define __pyx_nonatomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd, _InterlockedExchange, _InterlockedCompareExchange, _InterlockedCompareExchangePointer, _InterlockedExchangePointer)
    #define __pyx_atomic_incr_relaxed(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) _InterlockedExchangeAdd(value, -1)
    #define __pyx_atomic_sub(value, arg) _InterlockedExchangeAdd(value, -arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = _InterlockedCompareExchange(value, desired, *expected);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) _InterlockedExchangeAdd(value, 0)
    #define __pyx_atomic_store(value, new_value) _InterlockedExchange(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) *(void * volatile *)value
    #define __pyx_atomic_pointer_load_acquire(value) _InterlockedCompareExchangePointer(value, 0, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) _InterlockedExchangePointer(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_relaxed(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_acq_rel(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* BufferFormatStructs.proto */
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  const struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  const __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  const __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* CriticalSections.proto */
#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __Pyx_PyCriticalSection void*
#define __Pyx_PyCriticalSection2 void*
#define __Pyx_PyCriticalSection_Begin1(cs, arg) (void)cs
#define __Pyx_PyCriticalSection_Begin2(cs, arg1, arg2) (void)cs
#define __Pyx_PyCriticalSection_End1(cs)
#define __Pyx_PyCriticalSection_End2(cs)
#else
#define __Pyx_PyCriticalSection PyCriticalSection
#define __Pyx_PyCriticalSection2 PyCriticalSection2
#define __Pyx_PyCriticalSection_Begin1 PyCriticalSection_Begin
#define __Pyx_PyCriticalSection_Begin2 PyCriticalSection2_Begin
#define __Pyx_PyCriticalSection_End1 PyCriticalSection_End
#define __Pyx_PyCriticalSection_End2 PyCriticalSection2_End
#endif
#if PY_VERSION_HEX < 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_BEGIN_CRITICAL_SECTION(o) {
#define __Pyx_END_CRITICAL_SECTION() }
#else
#define __Pyx_BEGIN_CRITICAL_SECTION Py_BEGIN_CRITICAL_SECTION
#define __Pyx_END_CRITICAL_SECTION Py_END_CRITICAL_SECTION
#endif

/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* #### Code section: numeric_typedefs ### */

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":730
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
*/
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":731
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
*/
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":732
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
*/
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":733
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
*/
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":737
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
*/
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":738
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
*/
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":739
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
*/
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":740
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
*/
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":744
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
*/
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":745
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
*/
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":754
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
*/
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":755
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
*/
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":757
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
*/
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":758
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
*/
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":760
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
*/
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":761
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
*/
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":763
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
*/
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":764
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
*/
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":765
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
*/
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "ewah_bool_utils/ewah_bool_array.pxd":94
 * cimport numpy as np
 * 
 * ctypedef np.uint32_t ewah_word_type             # <<<<<<<<<<<<<<
 * ctypedef EWAHBoolArray[ewah_word_type] ewah_bool_array
 * ctypedef EWAHBoolArraySetBitForwardIterator[ewah_word_type] ewah_bool_iterator
*/
typedef __pyx_t_5numpy_uint32_t __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_word_type;

/* "ewah_bool_utils/ewah_bool_wrap.pxd":13
 * )
 * 
 * ctypedef bint bitarrtype             # <<<<<<<<<<<<<<
 * ctypedef pair[np.uint64_t, np.uint64_t] ind_pair
 * 
*/
typedef int __pyx_t_15ewah_bool_utils_14ewah_bool_wrap_bitarrtype;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject;
struct __pyx_obj_2yt_8geometry_18selection_routines_AlwaysSelector;
struct __pyx_obj_2yt_8geometry_18selection_routines_OctreeSubsetSelector;
struct __pyx_obj_2yt_8geometry_18selection_routines_BooleanSelector;
struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool;
struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool;
struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer;
struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer;
struct __pyx_obj_2yt_8geometry_13oct_container_RAMSESOctreeContainer;
struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor;
struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalCells;
struct __pyx_obj_2yt_8geometry_12oct_visitors_MarkOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_ICoordsOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_IResOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_FCoordsOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_FWidthOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayI64;
struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayF64;
struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8;
struct __pyx_obj_2yt_8geometry_12oct_visitors_IdentifyOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd;
struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesO;
struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesR;
struct __pyx_obj_2yt_8geometry_12oct_visitors_CountByDomain;
struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreOctree;
struct __pyx_obj_2yt_8geometry_12oct_visitors_LoadOctree;
struct __pyx_obj_2yt_8geometry_12oct_visitors_MortonIndexOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreIndex;
struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor;
struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor;
struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellVisitor;
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks;
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection;
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed;
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet;
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector;
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet;
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector;
struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer;
struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap;
struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector;
struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer;
struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":767
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
*/
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":768
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
*/
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":769
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
*/
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":771
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
*/
typedef npy_cdouble __pyx_t_5numpy_complex_t;

/* "ewah_bool_utils/ewah_bool_array.pxd":95
 * 
 * ctypedef np.uint32_t ewah_word_type
 * ctypedef EWAHBoolArray[ewah_word_type] ewah_bool_array             # <<<<<<<<<<<<<<
 * ctypedef EWAHBoolArraySetBitForwardIterator[ewah_word_type] ewah_bool_iterator
 * ctypedef vector[size_t] bitset_array
*/
typedef ewah::EWAHBoolArray<__pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_word_type>  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array;

/* "ewah_bool_utils/ewah_bool_array.pxd":96
 * ctypedef np.uint32_t ewah_word_type
 * ctypedef EWAHBoolArray[ewah_word_type] ewah_bool_array
 * ctypedef EWAHBoolArraySetBitForwardIterator[ewah_word_type] ewah_bool_iterator             # <<<<<<<<<<<<<<
 * ctypedef vector[size_t] bitset_array
 * ctypedef cmap[np.uint64_t, ewah_bool_array] ewah_map
*/
typedef ewah::EWAHBoolArraySetBitForwardIterator<__pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_word_type>  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_iterator;

/* "ewah_bool_utils/ewah_bool_array.pxd":97
 * ctypedef EWAHBoolArray[ewah_word_type] ewah_bool_array
 * ctypedef EWAHBoolArraySetBitForwardIterator[ewah_word_type] ewah_bool_iterator
 * ctypedef vector[size_t] bitset_array             # <<<<<<<<<<<<<<
 * ctypedef cmap[np.uint64_t, ewah_bool_array] ewah_map
 * ctypedef stringstream sstream
*/
typedef std::vector<size_t>  __pyx_t_15ewah_bool_utils_15ewah_bool_array_bitset_array;

/* "ewah_bool_utils/ewah_bool_array.pxd":98
 * ctypedef EWAHBoolArraySetBitForwardIterator[ewah_word_type] ewah_bool_iterator
 * ctypedef vector[size_t] bitset_array
 * ctypedef cmap[np.uint64_t, ewah_bool_array] ewah_map             # <<<<<<<<<<<<<<
 * ctypedef stringstream sstream
 * ctypedef BoolArray[ewah_word_type] bool_array
*/
typedef std::map<__pyx_t_5numpy_uint64_t,__pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array>  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_map;

/* "ewah_bool_utils/ewah_bool_array.pxd":99
 * ctypedef vector[size_t] bitset_array
 * ctypedef cmap[np.uint64_t, ewah_bool_array] ewah_map
 * ctypedef stringstream sstream             # <<<<<<<<<<<<<<
 * ctypedef BoolArray[ewah_word_type] bool_array
*/
typedef std::stringstream __pyx_t_15ewah_bool_utils_15ewah_bool_array_sstream;

/* "ewah_bool_utils/ewah_bool_array.pxd":100
 * ctypedef cmap[np.uint64_t, ewah_bool_array] ewah_map
 * ctypedef stringstream sstream
 * ctypedef BoolArray[ewah_word_type] bool_array             # <<<<<<<<<<<<<<
*/
typedef ewah::BoolArray<__pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_word_type>  __pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array;
struct __pyx_t_2yt_8geometry_13grid_visitors_GridTreeNode;
struct __pyx_t_2yt_8geometry_13grid_visitors_GridTreeNodePadded;
struct __pyx_t_2yt_8geometry_13grid_visitors_GridVisitorData;

/* "yt/geometry/grid_visitors.pxd":13
 * 
 * 
 * cdef struct GridTreeNode:             # <<<<<<<<<<<<<<
 *     np.int32_t num_children
 *     np.int32_t level
*/
struct __pyx_t_2yt_8geometry_13grid_visitors_GridTreeNode {
  __pyx_t_5numpy_int32_t num_children;
  __pyx_t_5numpy_int32_t level;
  __pyx_t_5numpy_int64_t index;
  __pyx_t_5numpy_float64_t left_edge[3];
  __pyx_t_5numpy_float64_t right_edge[3];
  struct __pyx_t_2yt_8geometry_13grid_visitors_GridTreeNode **children;
  __pyx_t_5numpy_int64_t start_index[3];
  __pyx_t_5numpy_int32_t dims[3];
  __pyx_t_5numpy_float64_t dds[3];
};

/* "yt/geometry/grid_visitors.pxd":24
 *     np.float64_t dds[3]
 * 
 * cdef struct GridTreeNodePadded:             # <<<<<<<<<<<<<<
 *     np.int32_t num_children
 *     np.int32_t level
*/
struct __pyx_t_2yt_8geometry_13grid_visitors_GridTreeNodePadded {
  __pyx_t_5numpy_int32_t num_children;
  __pyx_t_5numpy_int32_t level;
  __pyx_t_5numpy_int64_t index;
  __pyx_t_5numpy_float64_t left_edge_x;
  __pyx_t_5numpy_float64_t left_edge_y;
  __pyx_t_5numpy_float64_t left_edge_z;
  __pyx_t_5numpy_float64_t right_edge_x;
  __pyx_t_5numpy_float64_t right_edge_y;
  __pyx_t_5numpy_float64_t right_edge_z;
  __pyx_t_5numpy_int64_t children_pointers;
  __pyx_t_5numpy_int64_t start_index_x;
  __pyx_t_5numpy_int64_t start_index_y;
  __pyx_t_5numpy_int64_t start_index_z;
  __pyx_t_5numpy_int32_t dims_x;
  __pyx_t_5numpy_int32_t dims_y;
  __pyx_t_5numpy_int32_t dims_z;
  __pyx_t_5numpy_float64_t dds_x;
  __pyx_t_5numpy_float64_t dds_y;
  __pyx_t_5numpy_float64_t dds_z;
};

/* "yt/geometry/grid_visitors.pxd":45
 *     np.float64_t dds_z
 * 
 * cdef struct GridVisitorData:             # <<<<<<<<<<<<<<
 *     GridTreeNode *grid
 *     np.uint64_t index
*/
struct __pyx_t_2yt_8geometry_13grid_visitors_GridVisitorData {
  struct __pyx_t_2yt_8geometry_13grid_visitors_GridTreeNode *grid;
  __pyx_t_5numpy_uint64_t index;
  __pyx_t_5numpy_uint64_t global_index;
  __pyx_t_5numpy_int64_t pos[3];
  int n_tuples;
  int **child_tuples;
  void *array;
  int ref_factor;
};

/* "yt/geometry/grid_visitors.pxd":61
 * cdef np.uint8_t check_child_masked(GridVisitorData *data) nogil
 * 
 * ctypedef void grid_visitor_function(GridVisitorData *data,             # <<<<<<<<<<<<<<
 *                                          np.uint8_t selected) nogil
 * # This is similar in spirit to the way oct visitor functions work.  However,
*/
typedef void __pyx_t_2yt_8geometry_13grid_visitors_grid_visitor_function(struct __pyx_t_2yt_8geometry_13grid_visitors_GridVisitorData *, __pyx_t_5numpy_uint8_t);
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_recursively_visit_octs;
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_select_grid;
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_select_grid_edge;
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_visit_grid_cells;

/* "selection_routines.pxd":35
 *     cdef np.int64_t _hash
 * 
 *     cdef void recursively_visit_octs(self, Oct *root,             # <<<<<<<<<<<<<<
 *                         np.float64_t pos[3], np.float64_t dds[3],
 *                         int level,
*/
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_recursively_visit_octs {
  int __pyx_n;
  int visit_covered;
};

/* "selection_routines.pxd":43
 *                               np.float64_t spos[3], np.float64_t sdds[3],
 *                               OctVisitor visitor, int i, int j, int k)
 *     cdef int select_grid(self, np.float64_t left_edge[3],             # <<<<<<<<<<<<<<
 *                                np.float64_t right_edge[3],
 *                                np.int32_t level, Oct *o = ?) noexcept nogil
*/
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_select_grid {
  int __pyx_n;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *o;
};

/* "selection_routines.pxd":46
 *                                np.float64_t right_edge[3],
 *                                np.int32_t level, Oct *o = ?) noexcept nogil
 *     cdef int select_grid_edge(self, np.float64_t left_edge[3],             # <<<<<<<<<<<<<<
 *                                     np.float64_t right_edge[3],
 *                                     np.int32_t level, Oct *o = ?) noexcept nogil
*/
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_select_grid_edge {
  int __pyx_n;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *o;
};

/* "selection_routines.pxd":69
 *                                 np.ndarray[np.uint8_t, ndim=3] mask,
 *                                 int level)
 *     cdef void visit_grid_cells(self, GridVisitorData *data,             # <<<<<<<<<<<<<<
 *                     grid_visitor_function *func, np.uint8_t *cached_mask = ?)
 * 
*/
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_visit_grid_cells {
  int __pyx_n;
  __pyx_t_5numpy_uint8_t *cached_mask;
};
struct __pyx_t_2yt_9utilities_3lib_20allocation_container_AllocationContainer;
struct __pyx_opt_args_2yt_9utilities_3lib_20allocation_container_10ObjectPool_allocate_objs;

/* "yt/utilities/lib/allocation_container.pxd":13
 * 
 * 
 * cdef struct AllocationContainer:             # <<<<<<<<<<<<<<
 *     np.uint64_t n
 *     np.uint64_t n_assigned
*/
struct __pyx_t_2yt_9utilities_3lib_20allocation_container_AllocationContainer {
  __pyx_t_5numpy_uint64_t n;
  __pyx_t_5numpy_uint64_t n_assigned;
  __pyx_t_5numpy_uint64_t offset;
  __pyx_t_5numpy_int64_t con_id;
  void *my_objs;
};

/* "yt/utilities/lib/allocation_container.pxd":24
 *     cdef np.uint64_t n_con
 *     cdef AllocationContainer* containers
 *     cdef void allocate_objs(self, int n_objs, np.int64_t con_id = ?) except *             # <<<<<<<<<<<<<<
 *     cdef void setup_objs(self, void *obj, np.uint64_t count,
 *                          np.uint64_t offset, np.int64_t con_id)
*/
struct __pyx_opt_args_2yt_9utilities_3lib_20allocation_container_10ObjectPool_allocate_objs {
  int __pyx_n;
  __pyx_t_5numpy_int64_t con_id;
};
struct __pyx_t_2yt_8geometry_13oct_container_OctKey;
struct __pyx_t_2yt_8geometry_13oct_container_OctList;
struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer;
struct __pyx_opt_args_2yt_8geometry_13oct_container_15OctreeContainer_get;
struct __pyx_opt_args_2yt_8geometry_13oct_container_15OctreeContainer_visit_all_octs;

/* "oct_container.pxd":24
 * cdef int ORDER_MAX
 * 
 * cdef struct OctKey:             # <<<<<<<<<<<<<<
 *     np.int64_t key
 *     Oct *node
*/
struct __pyx_t_2yt_8geometry_13oct_container_OctKey {
  __pyx_t_5numpy_int64_t key;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *node;
  __pyx_t_5numpy_int64_t *indices;
  __pyx_t_5numpy_int64_t pcount;
};

/* "oct_container.pxd":31
 *     np.int64_t pcount
 * 
 * cdef struct OctList             # <<<<<<<<<<<<<<
 * 
 * cdef struct OctList:
*/
struct __pyx_t_2yt_8geometry_13oct_container_OctList {
  struct __pyx_t_2yt_8geometry_13oct_container_OctList *next;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *o;
};

/* "oct_container.pxd":39
 * # NOTE: This object *has* to be the same size as the AllocationContainer
 * # object.  There's an assert in the __cinit__ function.
 * cdef struct OctAllocationContainer:             # <<<<<<<<<<<<<<
 *     np.uint64_t n
 *     np.uint64_t n_assigned
*/
struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer {
  __pyx_t_5numpy_uint64_t n;
  __pyx_t_5numpy_uint64_t n_assigned;
  __pyx_t_5numpy_uint64_t offset;
  __pyx_t_5numpy_int64_t con_id;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *my_objs;
};

/* "oct_container.pxd":65
 *     cdef public np.int64_t nocts
 *     cdef public int num_domains
 *     cdef Oct *get(self, np.float64_t ppos[3], OctInfo *oinfo = ?,             # <<<<<<<<<<<<<<
 *                   int max_level = ?) nogil
 *     cdef int get_root(self, int ind[3], Oct **o) nogil
*/
struct __pyx_opt_args_2yt_8geometry_13oct_container_15OctreeContainer_get {
  int __pyx_n;
  struct __pyx_t_2yt_8geometry_12oct_visitors_OctInfo *oinfo;
  int max_level;
};

/* "oct_container.pxd":73
 *     # AllocationContainer.offset if such a thing exists.
 *     cdef np.int64_t get_domain_offset(self, int domain_id)
 *     cdef void visit_all_octs(self,             # <<<<<<<<<<<<<<
 *                         selection_routines.SelectorObject selector,
 *                         OctVisitor visitor,
*/
struct __pyx_opt_args_2yt_8geometry_13oct_container_15OctreeContainer_visit_all_octs {
  int __pyx_n;
  int vc;
  __pyx_t_5numpy_int64_t *indices;
};
struct __pyx_t_2yt_8geometry_12oct_visitors_Oct;
struct __pyx_t_2yt_8geometry_12oct_visitors_OctInfo;
struct __pyx_t_2yt_8geometry_12oct_visitors_OctPadded;

/* "oct_visitors.pxd":13
 * 
 * 
 * cdef struct Oct             # <<<<<<<<<<<<<<
 * cdef struct Oct:
 *     np.int64_t file_ind     # index with respect to the order in which it was
*/
struct __pyx_t_2yt_8geometry_12oct_visitors_Oct {
  __pyx_t_5numpy_int64_t file_ind;
  __pyx_t_5numpy_int64_t domain_ind;
  __pyx_t_5numpy_int64_t domain;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct **children;
};

/* "oct_visitors.pxd":21
 *     Oct **children          # Up to 8 long
 * 
 * cdef struct OctInfo:             # <<<<<<<<<<<<<<
 *     np.float64_t left_edge[3]
 *     np.float64_t dds[3]
*/
struct __pyx_t_2yt_8geometry_12oct_visitors_OctInfo {
  __pyx_t_5numpy_float64_t left_edge[3];
  __pyx_t_5numpy_float64_t dds[3];
  __pyx_t_5numpy_int64_t ipos[3];
  __pyx_t_5numpy_int32_t level;
};

/* "oct_visitors.pxd":27
 *     np.int32_t level
 * 
 * cdef struct OctPadded:             # <<<<<<<<<<<<<<
 *     np.int64_t file_ind
 *     np.int64_t domain_ind
*/
struct __pyx_t_2yt_8geometry_12oct_visitors_OctPadded {
  __pyx_t_5numpy_int64_t file_ind;
  __pyx_t_5numpy_int64_t domain_ind;
  __pyx_t_5numpy_int64_t domain;
  __pyx_t_5numpy_int64_t padding;
};
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__find_collisions;
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__find_collisions_coarse;
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__find_collisions_refined;
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__set;
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__get;
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__select_contaminated;
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__select_uncontaminated;
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__set;
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__get;
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__select_contaminated;
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__select_uncontaminated;
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__get_ghost_zones;
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_31BoolArrayCollectionUncompressed__set;
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_31BoolArrayCollectionUncompressed__get;

/* "ewah_bool_utils/ewah_bool_wrap.pxd":14
 * 
 * ctypedef bint bitarrtype
 * ctypedef pair[np.uint64_t, np.uint64_t] ind_pair             # <<<<<<<<<<<<<<
 * 
 * cdef class FileBitmasks:
*/
typedef std::pair<__pyx_t_5numpy_uint64_t,__pyx_t_5numpy_uint64_t>  __pyx_t_15ewah_bool_utils_14ewah_bool_wrap_ind_pair;

/* "ewah_bool_utils/ewah_bool_wrap.pxd":25
 *     cdef bint _iseq(self, FileBitmasks solf)
 *     cdef BoolArrayCollection _get_bitmask(self, np.uint32_t ifile)
 *     cdef tuple _find_collisions(self, BoolArrayCollection coll, bint verbose=*)             # <<<<<<<<<<<<<<
 *     cdef tuple _find_collisions_coarse(self, BoolArrayCollection coll, bint
 *                 verbose=*, file_list=*)
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__find_collisions {
  int __pyx_n;
  int verbose;
};

/* "ewah_bool_utils/ewah_bool_wrap.pxd":26
 *     cdef BoolArrayCollection _get_bitmask(self, np.uint32_t ifile)
 *     cdef tuple _find_collisions(self, BoolArrayCollection coll, bint verbose=*)
 *     cdef tuple _find_collisions_coarse(self, BoolArrayCollection coll, bint             # <<<<<<<<<<<<<<
 *                 verbose=*, file_list=*)
 *     cdef tuple _find_collisions_refined(self, BoolArrayCollection coll, bint verbose=*)
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__find_collisions_coarse {
  int __pyx_n;
  int verbose;
  PyObject *file_list;
};

/* "ewah_bool_utils/ewah_bool_wrap.pxd":28
 *     cdef tuple _find_collisions_coarse(self, BoolArrayCollection coll, bint
 *                 verbose=*, file_list=*)
 *     cdef tuple _find_collisions_refined(self, BoolArrayCollection coll, bint verbose=*)             # <<<<<<<<<<<<<<
 *     cdef void _set(self, np.uint32_t ifile, np.uint64_t i1, np.uint64_t i2=*)
 *     cdef void _set_coarse(self, np.uint32_t ifile, np.uint64_t i1)
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__find_collisions_refined {
  int __pyx_n;
  int verbose;
};

/* "ewah_bool_utils/ewah_bool_wrap.pxd":29
 *                 verbose=*, file_list=*)
 *     cdef tuple _find_collisions_refined(self, BoolArrayCollection coll, bint verbose=*)
 *     cdef void _set(self, np.uint32_t ifile, np.uint64_t i1, np.uint64_t i2=*)             # <<<<<<<<<<<<<<
 *     cdef void _set_coarse(self, np.uint32_t ifile, np.uint64_t i1)
 *     cdef void _set_refined(self, np.uint32_t ifile, np.uint64_t i1, np.uint64_t i2)
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__set {
  int __pyx_n;
  __pyx_t_5numpy_uint64_t i2;
};

/* "ewah_bool_utils/ewah_bool_wrap.pxd":39
 *     cdef void _set_map(self, np.uint32_t ifile, np.uint64_t i1, np.uint64_t i2)
 *     cdef void _set_refn(self, np.uint32_t ifile, np.uint64_t i1)
 *     cdef bint _get(self, np.uint32_t ifile, np.uint64_t i1, np.uint64_t i2=*)             # <<<<<<<<<<<<<<
 *     cdef bint _get_coarse(self, np.uint32_t ifile, np.uint64_t i1)
 *     cdef void _get_coarse_array(self, np.uint32_t ifile, np.uint64_t imax, np.uint8_t[:] arr) except *
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__get {
  int __pyx_n;
  __pyx_t_5numpy_uint64_t i2;
};

/* "ewah_bool_utils/ewah_bool_wrap.pxd":50
 *     cdef void _logicalxor(self, np.uint32_t ifile, BoolArrayCollection solf, BoolArrayCollection out)
 *     cdef void _logicaland(self, np.uint32_t ifile, BoolArrayCollection solf, BoolArrayCollection out)
 *     cdef void _select_contaminated(self, np.uint32_t ifile, BoolArrayCollection mask, np.uint8_t[:] out,             # <<<<<<<<<<<<<<
 *                np.uint8_t[:] secondary_files, BoolArrayCollection mask2=*)
 *     cdef void _select_uncontaminated(self, np.uint32_t ifile, BoolArrayCollection mask, np.uint8_t[:] out,
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__select_contaminated {
  int __pyx_n;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *mask2;
};

/* "ewah_bool_utils/ewah_bool_wrap.pxd":52
 *     cdef void _select_contaminated(self, np.uint32_t ifile, BoolArrayCollection mask, np.uint8_t[:] out,
 *                np.uint8_t[:] secondary_files, BoolArrayCollection mask2=*)
 *     cdef void _select_uncontaminated(self, np.uint32_t ifile, BoolArrayCollection mask, np.uint8_t[:] out,             # <<<<<<<<<<<<<<
 *                BoolArrayCollection mask2=*)
 *     cdef bytes _dumps(self, np.uint32_t ifile)
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__select_uncontaminated {
  int __pyx_n;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *mask2;
};

/* "ewah_bool_utils/ewah_bool_wrap.pxd":66
 *     cdef void _reset(self)
 *     cdef int _richcmp(self, BoolArrayCollection solf, int op) except -1
 *     cdef void _set(self, np.uint64_t i1, np.uint64_t i2=*)             # <<<<<<<<<<<<<<
 *     cdef void _set_coarse(self, np.uint64_t i1)
 *     cdef void _set_refined(self, np.uint64_t i1, np.uint64_t i2)
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__set {
  int __pyx_n;
  __pyx_t_5numpy_uint64_t i2;
};

/* "ewah_bool_utils/ewah_bool_wrap.pxd":73
 *     cdef void _set_map(self, np.uint64_t i1, np.uint64_t i2)
 *     cdef void _set_refn(self, np.uint64_t i1)
 *     cdef bint _get(self, np.uint64_t i1, np.uint64_t i2=*)             # <<<<<<<<<<<<<<
 *     cdef bint _get_coarse(self, np.uint64_t i1)
 *     cdef void _get_coarse_array(self, np.uint64_t imax, np.uint8_t[:] arr) except *
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__get {
  int __pyx_n;
  __pyx_t_5numpy_uint64_t i2;
};

/* "ewah_bool_utils/ewah_bool_wrap.pxd":87
 *     cdef void _logicalxor(self, BoolArrayCollection solf, BoolArrayCollection out)
 *     cdef void _logicaland(self, BoolArrayCollection solf, BoolArrayCollection out)
 *     cdef void _select_contaminated(self, BoolArrayCollection mask, np.uint8_t[:] out,             # <<<<<<<<<<<<<<
 *         BoolArrayCollection mask2=*)
 *     cdef void _select_uncontaminated(self, BoolArrayCollection mask, np.uint8_t[:] out,
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__select_contaminated {
  int __pyx_n;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *mask2;
};

/* "ewah_bool_utils/ewah_bool_wrap.pxd":89
 *     cdef void _select_contaminated(self, BoolArrayCollection mask, np.uint8_t[:] out,
 *         BoolArrayCollection mask2=*)
 *     cdef void _select_uncontaminated(self, BoolArrayCollection mask, np.uint8_t[:] out,             # <<<<<<<<<<<<<<
 *         BoolArrayCollection mask2=*)
 *     cdef void _get_ghost_zones(self, int ngz, int order1, int order2,
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__select_uncontaminated {
  int __pyx_n;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *mask2;
};

/* "ewah_bool_utils/ewah_bool_wrap.pxd":91
 *     cdef void _select_uncontaminated(self, BoolArrayCollection mask, np.uint8_t[:] out,
 *         BoolArrayCollection mask2=*)
 *     cdef void _get_ghost_zones(self, int ngz, int order1, int order2,             # <<<<<<<<<<<<<<
 *                                bint periodicity[3], BoolArrayCollection out_ewah,
 *                                bint coarse_ghosts=*)
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__get_ghost_zones {
  int __pyx_n;
  int coarse_ghosts;
};

/* "ewah_bool_utils/ewah_bool_wrap.pxd":105
 *     cdef bitarrtype* ewah_refn
 * 
 *     cdef void _set(self, np.uint64_t i1, np.uint64_t i2=*)             # <<<<<<<<<<<<<<
 *     cdef void _set_coarse(self, np.uint64_t i1)
 *     cdef void _set_refined(self, np.uint64_t i1, np.uint64_t i2)
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_31BoolArrayCollectionUncompressed__set {
  int __pyx_n;
  __pyx_t_5numpy_uint64_t i2;
};

/* "ewah_bool_utils/ewah_bool_wrap.pxd":114
 *     cdef void _set_map(self, np.uint64_t i1, np.uint64_t i2)
 *     cdef void _set_refn(self, np.uint64_t i1)
 *     cdef bint _get(self, np.uint64_t i1, np.uint64_t i2=*)             # <<<<<<<<<<<<<<
 *     cdef bint _get_coarse(self, np.uint64_t i1)
 *     cdef bint _isref(self, np.uint64_t i)
*/
struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_31BoolArrayCollectionUncompressed__get {
  int __pyx_n;
  __pyx_t_5numpy_uint64_t i2;
};
struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit;
struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_get_from_index;
struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_coarse;
struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_refined;

/* "yt/geometry/particle_oct_container.pyx":72
 * 
 * 
 * ctypedef cmap[np.uint64_t, bool_array] CoarseRefinedSets             # <<<<<<<<<<<<<<
 * 
 * cdef class ParticleOctreeContainer(OctreeContainer):
*/
typedef std::map<__pyx_t_5numpy_uint64_t,__pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array>  __pyx_t_2yt_8geometry_22particle_oct_container_CoarseRefinedSets;

/* "yt/geometry/particle_oct_container.pyx":308
 *         return level_counts
 * 
 *     cdef visit(self, Oct *o, np.int64_t *counts, level = 0):             # <<<<<<<<<<<<<<
 *         cdef int i, j, k
 *         counts[level] += 1
*/
struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit {
  int __pyx_n;
  PyObject *level;
};

/* "yt/geometry/particle_oct_container.pyx":322
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
 *     cdef Oct *get_from_index(self, np.uint64_t mi, np.uint8_t order = ORDER_MAX,             # <<<<<<<<<<<<<<
 *                              int max_level = 99):
 *         cdef Oct *cur
*/
struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_get_from_index {
  int __pyx_n;
  __pyx_t_5numpy_uint8_t order;
  int max_level;
};

/* "yt/geometry/particle_oct_container.pyx":1584
 *     @cython.cdivision(True)
 *     @cython.initializedcheck(False)
 *     cdef void add_coarse(self, np.uint64_t mi1, int bbox = 2):             # <<<<<<<<<<<<<<
 *         self.coarse_select_bool[mi1] = 1
 *         # Neighbors
*/
struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_coarse {
  int __pyx_n;
  int bbox;
};

/* "yt/geometry/particle_oct_container.pyx":1612
 *     @cython.cdivision(True)
 *     @cython.initializedcheck(False)
 *     cdef int add_refined(self, np.uint64_t mi1, np.uint64_t mi2, int bbox = 2) except -1:             # <<<<<<<<<<<<<<
 *         self.refined_select_bool[mi2] = 1
 *         # Neighbors
*/
struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_refined {
  int __pyx_n;
  int bbox;
};

/* "selection_routines.pxd":25
 * 
 * 
 * cdef class SelectorObject:             # <<<<<<<<<<<<<<
 *     cdef public np.int32_t min_level
 *     cdef public np.int32_t max_level
*/
struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject *__pyx_vtab;
  __pyx_t_5numpy_int32_t min_level;
  __pyx_t_5numpy_int32_t max_level;
  int overlap_cells;
  __pyx_t_5numpy_float64_t domain_width[3];
  __pyx_t_5numpy_float64_t domain_center[3];
  int periodicity[3];
  int _hash_initialized;
  __pyx_t_5numpy_int64_t _hash;
};


/* "selection_routines.pxd":77
 *         self, np.float64_t x1, np.float64_t x2, int d) nogil
 * 
 * cdef class AlwaysSelector(SelectorObject):             # <<<<<<<<<<<<<<
 *     pass
 * 
*/
struct __pyx_obj_2yt_8geometry_18selection_routines_AlwaysSelector {
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject __pyx_base;
};


/* "selection_routines.pxd":80
 *     pass
 * 
 * cdef class OctreeSubsetSelector(SelectorObject):             # <<<<<<<<<<<<<<
 *     cdef public SelectorObject base_selector
 *     cdef public np.int64_t domain_id
*/
struct __pyx_obj_2yt_8geometry_18selection_routines_OctreeSubsetSelector {
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject __pyx_base;
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *base_selector;
  __pyx_t_5numpy_int64_t domain_id;
};


/* "selection_routines.pxd":84
 *     cdef public np.int64_t domain_id
 * 
 * cdef class BooleanSelector(SelectorObject):             # <<<<<<<<<<<<<<
 *     cdef public SelectorObject sel1
 *     cdef public SelectorObject sel2
*/
struct __pyx_obj_2yt_8geometry_18selection_routines_BooleanSelector {
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject __pyx_base;
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *sel1;
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *sel2;
};


/* "yt/utilities/lib/allocation_container.pxd":20
 *     void *my_objs
 * 
 * cdef class ObjectPool:             # <<<<<<<<<<<<<<
 *     cdef public np.uint64_t itemsize
 *     cdef np.uint64_t n_con
*/
struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_9utilities_3lib_20allocation_container_ObjectPool *__pyx_vtab;
  __pyx_t_5numpy_uint64_t itemsize;
  __pyx_t_5numpy_uint64_t n_con;
  struct __pyx_t_2yt_9utilities_3lib_20allocation_container_AllocationContainer *containers;
};


/* "oct_container.pxd":46
 *     Oct *my_objs
 * 
 * cdef class OctObjectPool(ObjectPool):             # <<<<<<<<<<<<<<
 *     cdef inline OctAllocationContainer *get_cont(self, int i):
 *         return <OctAllocationContainer*> (&self.containers[i])
*/
struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool {
  struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool __pyx_base;
};


/* "oct_container.pxd":54
 * cdef void OctList_delete(OctList *list)
 * 
 * cdef class OctreeContainer:             # <<<<<<<<<<<<<<
 *     cdef public OctObjectPool domains
 *     cdef Oct ****root_mesh
*/
struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctreeContainer *__pyx_vtab;
  struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool *domains;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct ****root_mesh;
  int partial_coverage;
  int level_offset;
  int nn[3];
  __pyx_t_5numpy_uint8_t nz;
  __pyx_t_5numpy_float64_t DLE[3];
  __pyx_t_5numpy_float64_t DRE[3];
  __pyx_t_5numpy_int64_t nocts;
  int num_domains;
  PyObject *fill_style;
  int max_level;
};


/* "oct_container.pxd":85
 *     cdef public int max_level
 * 
 * cdef class SparseOctreeContainer(OctreeContainer):             # <<<<<<<<<<<<<<
 *     cdef OctKey *root_nodes
 *     cdef void *tree_root
*/
struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer {
  struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer __pyx_base;
  struct __pyx_t_2yt_8geometry_13oct_container_OctKey *root_nodes;
  void *tree_root;
  int num_root;
  int max_root;
};


/* "oct_container.pxd":93
 *     cdef np.int64_t ipos_to_key(self, int pos[3]) nogil
 * 
 * cdef class RAMSESOctreeContainer(SparseOctreeContainer):             # <<<<<<<<<<<<<<
 *     pass
 * 
*/
struct __pyx_obj_2yt_8geometry_13oct_container_RAMSESOctreeContainer {
  struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer __pyx_base;
};


/* "oct_visitors.pxd":33
 *     np.int64_t padding
 * 
 * cdef class OctVisitor:             # <<<<<<<<<<<<<<
 *     cdef np.uint64_t index
 *     cdef np.uint64_t last
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor *__pyx_vtab;
  __pyx_t_5numpy_uint64_t index;
  __pyx_t_5numpy_uint64_t last;
  __pyx_t_5numpy_int64_t global_index;
  __pyx_t_5numpy_int64_t pos[3];
  __pyx_t_5numpy_uint8_t ind[3];
  int dims;
  __pyx_t_5numpy_int32_t domain;
  __pyx_t_5numpy_int8_t level;
  __pyx_t_5numpy_int8_t nz;
  __pyx_t_5numpy_int32_t nzones;
};


/* "oct_visitors.pxd":59
 *         return (((self.ind[2]*d)+self.ind[1])*d+self.ind[0])
 * 
 * cdef class CountTotalOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     pass
 * 
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};


/* "oct_visitors.pxd":62
 *     pass
 * 
 * cdef class CountTotalCells(OctVisitor):             # <<<<<<<<<<<<<<
 *     pass
 * 
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalCells {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};


/* "oct_visitors.pxd":65
 *     pass
 * 
 * cdef class MarkOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     # Unused
 *     cdef np.uint8_t[:,:,:,:] mark
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_MarkOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice mark;
};


/* "oct_visitors.pxd":69
 *     cdef np.uint8_t[:,:,:,:] mark
 * 
 * cdef class MaskOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:,:,:,:] mask
 * 
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice mask;
};


/* "oct_visitors.pxd":72
 *     cdef np.uint8_t[:,:,:,:] mask
 * 
 * cdef class IndexOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] oct_index
 * 
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice oct_index;
};


/* "oct_visitors.pxd":75
 *     cdef np.int64_t[:] oct_index
 * 
 * cdef class MaskedIndexOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] oct_index
 *     cdef np.uint8_t[:] oct_mask
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice oct_index;
  __Pyx_memviewslice oct_mask;
};


/* "oct_visitors.pxd":79
 *     cdef np.uint8_t[:] oct_mask
 * 
 * cdef class IndexMaskMapOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] oct_index
 *     cdef np.uint8_t[:] oct_mask
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice oct_index;
  __Pyx_memviewslice oct_mask;
  __Pyx_memviewslice map_domain_ind;
  __pyx_t_5numpy_uint64_t map_index;
};


/* "oct_visitors.pxd":85
 *     cdef np.uint64_t map_index
 * 
 * cdef class ICoordsOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:,:] icoords
 * 
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_ICoordsOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice icoords;
};


/* "oct_visitors.pxd":88
 *     cdef np.int64_t[:,:] icoords
 * 
 * cdef class IResOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] ires
 * 
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_IResOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice ires;
};


/* "oct_visitors.pxd":91
 *     cdef np.int64_t[:] ires
 * 
 * cdef class FCoordsOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:,:] fcoords
 * 
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_FCoordsOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice fcoords;
};


/* "oct_visitors.pxd":94
 *     cdef np.float64_t[:,:] fcoords
 * 
 * cdef class FWidthOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:,:] fwidth
 * 
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_FWidthOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice fwidth;
};


/* "oct_visitors.pxd":97
 *     cdef np.float64_t[:,:] fwidth
 * 
 * cdef class CopyArrayI64(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:,:,:,:,:,:] source
 *     cdef np.int64_t[:,:] dest
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayI64 {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice source;
  __Pyx_memviewslice dest;
};


/* "oct_visitors.pxd":101
 *     cdef np.int64_t[:,:] dest
 * 
 * cdef class CopyArrayF64(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:,:,:,:,:] source
 *     cdef np.float64_t[:,:] dest
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayF64 {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice source;
  __Pyx_memviewslice dest;
};


/* "oct_visitors.pxd":105
 *     cdef np.float64_t[:,:] dest
 * 
 * cdef class CopyFileIndArrayI8(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t root
 *     cdef np.uint8_t[:] source
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8 {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __pyx_t_5numpy_int64_t root;
  __Pyx_memviewslice source;
  __Pyx_memviewslice dest;
};


/* "oct_visitors.pxd":110
 *     cdef np.uint8_t[:] dest
 * 
 * cdef class IdentifyOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] domain_mask
 * 
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_IdentifyOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice domain_mask;
};


/* "oct_visitors.pxd":113
 *     cdef np.uint8_t[:] domain_mask
 * 
 * cdef class AssignDomainInd(OctVisitor):             # <<<<<<<<<<<<<<
 *     pass
 * 
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};


/* "oct_visitors.pxd":116
 *     pass
 * 
 * cdef class FillFileIndicesO(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] levels
 *     cdef np.int64_t[:] file_inds
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesO {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice levels;
  __Pyx_memviewslice file_inds;
  __Pyx_memviewslice cell_inds;
};


/* "oct_visitors.pxd":121
 *     cdef np.uint8_t[:] cell_inds
 * 
 * cdef class FillFileIndicesR(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] levels
 *     cdef np.int64_t[:] file_inds
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesR {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice levels;
  __Pyx_memviewslice file_inds;
  __Pyx_memviewslice cell_inds;
};


/* "oct_visitors.pxd":126
 *     cdef np.uint8_t[:] cell_inds
 * 
 * cdef class CountByDomain(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] domain_counts
 * 
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_CountByDomain {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice domain_counts;
};


/* "oct_visitors.pxd":129
 *     cdef np.int64_t[:] domain_counts
 * 
 * cdef class StoreOctree(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] ref_mask
 * 
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreOctree {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice ref_mask;
};


/* "oct_visitors.pxd":132
 *     cdef np.uint8_t[:] ref_mask
 * 
 * cdef class LoadOctree(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] ref_mask
 *     cdef Oct* octs
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_LoadOctree {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice ref_mask;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *octs;
  __pyx_t_5numpy_uint64_t *nocts;
  __pyx_t_5numpy_uint64_t *nfinest;
  __pyx_t_5numpy_uint64_t max_level;
};


/* "oct_visitors.pxd":139
 *     cdef np.uint64_t max_level
 * 
 * cdef class MortonIndexOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] level_arr
 *     cdef np.uint64_t[:] morton_ind
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_MortonIndexOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice level_arr;
  __Pyx_memviewslice morton_ind;
};


/* "oct_visitors.pxd":150
 * 
 * 
 * cdef class StoreIndex(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:,:,:,:] cell_inds
 * 
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreIndex {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice cell_inds;
};


/* "oct_visitors.pxd":154
 * 
 * # cimport oct_container
 * cdef class BaseNeighbourVisitor(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef int idim      # 0,1,2 for x,y,z
 *     cdef int direction # +1 for +x, -1 for -x
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  int idim;
  int direction;
  __pyx_t_5numpy_uint8_t neigh_ind[3];
  int other_oct;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *neighbour;
  struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *octree;
  struct __pyx_t_2yt_8geometry_12oct_visitors_OctInfo oi;
  int n_ghost_zones;
};


/* "oct_visitors.pxd":170
 *         return (((self.neigh_ind[2]*d)+self.neigh_ind[1])*d+self.neigh_ind[0])
 * 
 * cdef class NeighbourCellIndexVisitor(BaseNeighbourVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[::1] cell_inds
 *     cdef np.int64_t[::1] domain_inds
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor __pyx_base;
  __Pyx_memviewslice cell_inds;
  __Pyx_memviewslice domain_inds;
};


/* "oct_visitors.pxd":174
 *     cdef np.int64_t[::1] domain_inds
 * 
 * cdef class NeighbourCellVisitor(BaseNeighbourVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[::1] levels
 *     cdef np.int64_t[::1] file_inds
*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellVisitor {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor __pyx_base;
  __Pyx_memviewslice levels;
  __Pyx_memviewslice file_inds;
  __Pyx_memviewslice cell_inds;
  __Pyx_memviewslice domains;
};


/* "ewah_bool_utils/ewah_bool_wrap.pxd":16
 * ctypedef pair[np.uint64_t, np.uint64_t] ind_pair
 * 
 * cdef class FileBitmasks:             # <<<<<<<<<<<<<<
 *     cdef np.uint32_t nfiles
 *     cdef ewah_map** ewah_coll
*/
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks {
  PyObject_HEAD
  struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *__pyx_vtab;
  __pyx_t_5numpy_uint32_t nfiles;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_map **ewah_coll;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array **ewah_keys;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array **ewah_refn;
};


/* "ewah_bool_utils/ewah_bool_wrap.pxd":58
 *     cdef bint _check(self)
 * 
 * cdef class BoolArrayCollection:             # <<<<<<<<<<<<<<
 *     cdef ewah_map* ewah_coll
 *     cdef ewah_bool_array* ewah_keys
*/
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection {
  PyObject_HEAD
  struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_vtab;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_map *ewah_coll;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array *ewah_keys;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array *ewah_refn;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array *ewah_coar;
};


/* "ewah_bool_utils/ewah_bool_wrap.pxd":98
 *     cdef bint _check(self)
 * 
 * cdef class BoolArrayCollectionUncompressed:             # <<<<<<<<<<<<<<
 *     cdef int nele1
 *     cdef int nele2
*/
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed {
  PyObject_HEAD
  struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_vtab;
  int nele1;
  int nele2;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_map *ewah_coll;
  __pyx_t_15ewah_bool_utils_14ewah_bool_wrap_bitarrtype *ewah_keys;
  __pyx_t_15ewah_bool_utils_14ewah_bool_wrap_bitarrtype *ewah_refn;
};


/* "ewah_bool_utils/ewah_bool_wrap.pxd":123
 *     cdef void _compress(self, BoolArrayCollection solf)
 * 
 * cdef class SparseUnorderedBitmaskSet:             # <<<<<<<<<<<<<<
 *     cdef cset[np.uint64_t] entries
 *     cdef void _set(self, np.uint64_t ind)
*/
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet {
  PyObject_HEAD
  struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet *__pyx_vtab;
  std::set<__pyx_t_5numpy_uint64_t>  entries;
};


/* "ewah_bool_utils/ewah_bool_wrap.pxd":132
 *     cdef to_array(self)
 * 
 * cdef class SparseUnorderedBitmaskVector:             # <<<<<<<<<<<<<<
 *     cdef int total
 *     cdef vector[np.uint64_t] entries
*/
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector {
  PyObject_HEAD
  struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector *__pyx_vtab;
  int total;
  std::vector<__pyx_t_5numpy_uint64_t>  entries;
};


/* "ewah_bool_utils/ewah_bool_wrap.pxd":144
 *     cdef void _prune(self)
 * 
 * cdef class SparseUnorderedRefinedBitmaskSet:             # <<<<<<<<<<<<<<
 *     cdef cset[ind_pair] entries
 *     cdef void _set(self, np.uint64_t ind1, np.uint64_t ind2)
*/
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet {
  PyObject_HEAD
  struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *__pyx_vtab;
  std::set<__pyx_t_15ewah_bool_utils_14ewah_bool_wrap_ind_pair>  entries;
};


/* "ewah_bool_utils/ewah_bool_wrap.pxd":153
 *     cdef to_array(self)
 * 
 * cdef class SparseUnorderedRefinedBitmaskVector:             # <<<<<<<<<<<<<<
 *     cdef int total
 *     cdef vector[ind_pair] entries
*/
struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector {
  PyObject_HEAD
  struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector *__pyx_vtab;
  int total;
  std::vector<__pyx_t_15ewah_bool_utils_14ewah_bool_wrap_ind_pair>  entries;
};


/* "yt/geometry/particle_oct_container.pyx":74
 * ctypedef cmap[np.uint64_t, bool_array] CoarseRefinedSets
 * 
 * cdef class ParticleOctreeContainer(OctreeContainer):             # <<<<<<<<<<<<<<
 *     cdef Oct** oct_list
 *     #The starting oct index of each domain
*/
struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer {
  struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer __pyx_base;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct **oct_list;
  __pyx_t_5numpy_int64_t *dom_offsets;
  int n_ref;
};


/* "yt/geometry/particle_oct_container.pyx":416
 * cdef np.uint64_t FLAG = ~(<np.uint64_t>0)
 * 
 * cdef class ParticleBitmap:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t left_edge[3]
 *     cdef np.float64_t right_edge[3]
*/
struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_vtab;
  __pyx_t_5numpy_float64_t left_edge[3];
  __pyx_t_5numpy_float64_t right_edge[3];
  __pyx_t_5numpy_uint8_t periodicity[3];
  __pyx_t_5numpy_float64_t dds[3];
  __pyx_t_5numpy_float64_t dds_mi1[3];
  __pyx_t_5numpy_float64_t dds_mi2[3];
  __pyx_t_5numpy_float64_t idds[3];
  __pyx_t_5numpy_int32_t dims[3];
  __pyx_t_5numpy_int64_t file_hash;
  __pyx_t_5numpy_uint64_t directional_max2[3];
  __pyx_t_5numpy_int64_t hash_value;
  __pyx_t_5numpy_uint64_t nfiles;
  __pyx_t_5numpy_int32_t index_order1;
  __pyx_t_5numpy_int32_t index_order2;
  PyObject *masks;
  PyObject *particle_counts;
  PyObject *counts;
  PyObject *max_count;
  PyObject *_last_selector;
  PyObject *_last_return_values;
  PyObject *_cached_octrees;
  PyObject *_last_octree_subset;
  PyObject *_last_oct_handler;
  PyObject *_prev_octree_subset;
  PyObject *_prev_oct_handler;
  __pyx_t_5numpy_uint32_t *file_markers;
  __pyx_t_5numpy_uint64_t n_file_markers;
  __pyx_t_5numpy_uint64_t file_marker_i;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *bitmasks;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *collisions;
  int _used_mi2;
};


/* "yt/geometry/particle_oct_container.pyx":1419
 *         return octree
 * 
 * cdef class ParticleBitmapSelector:             # <<<<<<<<<<<<<<
 *     cdef SelectorObject selector
 *     cdef ParticleBitmap bitmap
*/
struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_vtab;
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *selector;
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *bitmap;
  __pyx_t_5numpy_uint32_t ngz;
  __pyx_t_5numpy_float64_t DLE[3];
  __pyx_t_5numpy_float64_t DRE[3];
  int periodicity[3];
  __pyx_t_5numpy_uint32_t order1;
  __pyx_t_5numpy_uint32_t order2;
  __pyx_t_5numpy_uint64_t max_index1;
  __pyx_t_5numpy_uint64_t max_index2;
  __pyx_t_5numpy_uint64_t s1;
  __pyx_t_5numpy_uint64_t s2;
  void *pointers[11];
  __Pyx_memviewslice ind1_n;
  __Pyx_memviewslice ind2_n;
  __Pyx_memviewslice neighbors;
  __Pyx_memviewslice neighbor_list1;
  __Pyx_memviewslice neighbor_list2;
  __pyx_t_5numpy_uint32_t nfiles;
  __Pyx_memviewslice file_mask_p;
  __Pyx_memviewslice file_mask_g;
  __Pyx_memviewslice refined_select_bool;
  __Pyx_memviewslice refined_ghosts_bool;
  __Pyx_memviewslice coarse_select_bool;
  __Pyx_memviewslice coarse_ghosts_bool;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *refined_ghosts_list;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *select_ewah;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *ghosts_ewah;
};


/* "yt/geometry/particle_oct_container.pyx":1945
 *                         self.set_files_refined(mi1,mi2)
 * 
 * cdef class ParticleBitmapOctreeContainer(SparseOctreeContainer):             # <<<<<<<<<<<<<<
 *     cdef Oct** oct_list
 *     cdef public int n_ref
*/
struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer {
  struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer __pyx_base;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct **oct_list;
  int n_ref;
  int loaded;
  __pyx_t_5numpy_uint8_t *_ptr_index_base_roots;
  __pyx_t_5numpy_uint8_t *_ptr_index_base_octs;
  __pyx_t_5numpy_uint64_t *_ptr_octs_per_root;
  __Pyx_memviewslice _index_base_roots;
  __Pyx_memviewslice _index_base_octs;
  __Pyx_memviewslice _octs_per_root;
  int overlap_cells;
};


/* "yt/geometry/particle_oct_container.pyx":135
 *                         self.visit_clear(o.children[cind(i,j,k)])
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         #Get the next oct, will traverse domains
 *         #Note that oct containers can be sorted
*/
struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ {
  PyObject_HEAD
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o;
  int __pyx_v_oi;
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self;
  __pyx_t_5numpy_int64_t __pyx_t_0;
  __pyx_t_5numpy_int64_t __pyx_t_1;
  int __pyx_t_2;
};


/* "View.MemoryView":110
 * 
 * 
 * @cython.collection_type("sequence")             # <<<<<<<<<<<<<<
 * @cname("__pyx_array")
 * cdef class array:
*/
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":299
 * 
 * 
 * @cname('__pyx_MemviewEnum')             # <<<<<<<<<<<<<<
 * cdef class Enum(object):
 *     cdef object name
*/
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":334
 * 
 * 
 * @cname('__pyx_memoryview')             # <<<<<<<<<<<<<<
 * cdef class memoryview:
 * 
*/
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int_type acquisition_count;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo const *typeinfo;
};


/* "View.MemoryView":950
 * 
 * 
 * @cython.collection_type("sequence")             # <<<<<<<<<<<<<<
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):
*/
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "selection_routines.pxd":25
 * 
 * 
 * cdef class SelectorObject:             # <<<<<<<<<<<<<<
 *     cdef public np.int32_t min_level
 *     cdef public np.int32_t max_level
*/

struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject {
  void (*recursively_visit_octs)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int, struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *, struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_recursively_visit_octs *__pyx_optional_args);
  void (*visit_oct_cells)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *, int, int, int);
  int (*select_grid)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_int32_t, struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_select_grid *__pyx_optional_args);
  int (*select_grid_edge)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_int32_t, struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_select_grid_edge *__pyx_optional_args);
  int (*select_cell)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *);
  int (*select_point)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *);
  int (*select_sphere)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t);
  int (*select_bbox)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *);
  int (*select_bbox_edge)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *);
  int (*fill_mask_selector_regular_grid)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int *, PyArrayObject *, PyArrayObject *, int);
  int (*fill_mask_selector)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t **, int *, PyArrayObject *, PyArrayObject *, int);
  void (*visit_grid_cells)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, struct __pyx_t_2yt_8geometry_13grid_visitors_GridVisitorData *, __pyx_t_2yt_8geometry_13grid_visitors_grid_visitor_function *, struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_visit_grid_cells *__pyx_optional_args);
  __pyx_t_5numpy_float64_t (*periodic_difference)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, int);
};
static struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject *__pyx_vtabptr_2yt_8geometry_18selection_routines_SelectorObject;


/* "selection_routines.pxd":77
 *         self, np.float64_t x1, np.float64_t x2, int d) nogil
 * 
 * cdef class AlwaysSelector(SelectorObject):             # <<<<<<<<<<<<<<
 *     pass
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_AlwaysSelector {
  struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_AlwaysSelector *__pyx_vtabptr_2yt_8geometry_18selection_routines_AlwaysSelector;


/* "selection_routines.pxd":80
 *     pass
 * 
 * cdef class OctreeSubsetSelector(SelectorObject):             # <<<<<<<<<<<<<<
 *     cdef public SelectorObject base_selector
 *     cdef public np.int64_t domain_id
*/

struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_OctreeSubsetSelector {
  struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_OctreeSubsetSelector *__pyx_vtabptr_2yt_8geometry_18selection_routines_OctreeSubsetSelector;


/* "selection_routines.pxd":84
 *     cdef public np.int64_t domain_id
 * 
 * cdef class BooleanSelector(SelectorObject):             # <<<<<<<<<<<<<<
 *     cdef public SelectorObject sel1
 *     cdef public SelectorObject sel2
*/

struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_BooleanSelector {
  struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_BooleanSelector *__pyx_vtabptr_2yt_8geometry_18selection_routines_BooleanSelector;


/* "yt/utilities/lib/allocation_container.pxd":20
 *     void *my_objs
 * 
 * cdef class ObjectPool:             # <<<<<<<<<<<<<<
 *     cdef public np.uint64_t itemsize
 *     cdef np.uint64_t n_con
*/

struct __pyx_vtabstruct_2yt_9utilities_3lib_20allocation_container_ObjectPool {
  void (*allocate_objs)(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool *, int, struct __pyx_opt_args_2yt_9utilities_3lib_20allocation_container_10ObjectPool_allocate_objs *__pyx_optional_args);
  void (*setup_objs)(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool *, void *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_int64_t);
  void (*teardown_objs)(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool *, void *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_int64_t);
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_20allocation_container_ObjectPool *__pyx_vtabptr_2yt_9utilities_3lib_20allocation_container_ObjectPool;


/* "oct_container.pxd":46
 *     Oct *my_objs
 * 
 * cdef class OctObjectPool(ObjectPool):             # <<<<<<<<<<<<<<
 *     cdef inline OctAllocationContainer *get_cont(self, int i):
 *         return <OctAllocationContainer*> (&self.containers[i])
*/

struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctObjectPool {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_20allocation_container_ObjectPool __pyx_base;
  struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer *(*get_cont)(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool *, int);
};
static struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctObjectPool *__pyx_vtabptr_2yt_8geometry_13oct_container_OctObjectPool;
static CYTHON_INLINE struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer *__pyx_f_2yt_8geometry_13oct_container_13OctObjectPool_get_cont(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool *, int);


/* "oct_container.pxd":54
 * cdef void OctList_delete(OctList *list)
 * 
 * cdef class OctreeContainer:             # <<<<<<<<<<<<<<
 *     cdef public OctObjectPool domains
 *     cdef Oct ****root_mesh
*/

struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctreeContainer {
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*get)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, __pyx_t_5numpy_float64_t *, struct __pyx_opt_args_2yt_8geometry_13oct_container_15OctreeContainer_get *__pyx_optional_args);
  int (*get_root)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, int *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct **);
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct **(*neighbors)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_OctInfo *, __pyx_t_5numpy_int64_t *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, int *);
  __pyx_t_5numpy_int64_t (*get_domain_offset)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, int);
  void (*visit_all_octs)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *, struct __pyx_opt_args_2yt_8geometry_13oct_container_15OctreeContainer_visit_all_octs *__pyx_optional_args);
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*next_root)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, int, int *);
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*next_child)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, int, int *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *);
  void (*append_domain)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, __pyx_t_5numpy_int64_t);
};
static struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctreeContainer *__pyx_vtabptr_2yt_8geometry_13oct_container_OctreeContainer;


/* "oct_container.pxd":85
 *     cdef public int max_level
 * 
 * cdef class SparseOctreeContainer(OctreeContainer):             # <<<<<<<<<<<<<<
 *     cdef OctKey *root_nodes
 *     cdef void *tree_root
*/

struct __pyx_vtabstruct_2yt_8geometry_13oct_container_SparseOctreeContainer {
  struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctreeContainer __pyx_base;
  void (*key_to_ipos)(struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer *, __pyx_t_5numpy_int64_t, __pyx_t_5numpy_int64_t *);
  __pyx_t_5numpy_int64_t (*ipos_to_key)(struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer *, int *);
};
static struct __pyx_vtabstruct_2yt_8geometry_13oct_container_SparseOctreeContainer *__pyx_vtabptr_2yt_8geometry_13oct_container_SparseOctreeContainer;


/* "oct_container.pxd":93
 *     cdef np.int64_t ipos_to_key(self, int pos[3]) nogil
 * 
 * cdef class RAMSESOctreeContainer(SparseOctreeContainer):             # <<<<<<<<<<<<<<
 *     pass
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_13oct_container_RAMSESOctreeContainer {
  struct __pyx_vtabstruct_2yt_8geometry_13oct_container_SparseOctreeContainer __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_13oct_container_RAMSESOctreeContainer *__pyx_vtabptr_2yt_8geometry_13oct_container_RAMSESOctreeContainer;


/* "oct_visitors.pxd":33
 *     np.int64_t padding
 * 
 * cdef class OctVisitor:             # <<<<<<<<<<<<<<
 *     cdef np.uint64_t index
 *     cdef np.uint64_t last
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor {
  void (*visit)(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_uint8_t);
  int (*oind)(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *);
  int (*rind)(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *);
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor *__pyx_vtabptr_2yt_8geometry_12oct_visitors_OctVisitor;
static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_10OctVisitor_oind(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *);
static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_10OctVisitor_rind(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *);


/* "oct_visitors.pxd":59
 *         return (((self.ind[2]*d)+self.ind[1])*d+self.ind[0])
 * 
 * cdef class CountTotalOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     pass
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountTotalOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountTotalOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_CountTotalOcts;


/* "oct_visitors.pxd":62
 *     pass
 * 
 * cdef class CountTotalCells(OctVisitor):             # <<<<<<<<<<<<<<
 *     pass
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountTotalCells {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountTotalCells *__pyx_vtabptr_2yt_8geometry_12oct_visitors_CountTotalCells;


/* "oct_visitors.pxd":65
 *     pass
 * 
 * cdef class MarkOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     # Unused
 *     cdef np.uint8_t[:,:,:,:] mark
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MarkOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MarkOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_MarkOcts;


/* "oct_visitors.pxd":69
 *     cdef np.uint8_t[:,:,:,:] mark
 * 
 * cdef class MaskOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:,:,:,:] mask
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MaskOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MaskOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_MaskOcts;


/* "oct_visitors.pxd":72
 *     cdef np.uint8_t[:,:,:,:] mask
 * 
 * cdef class IndexOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] oct_index
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IndexOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IndexOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_IndexOcts;


/* "oct_visitors.pxd":75
 *     cdef np.int64_t[:] oct_index
 * 
 * cdef class MaskedIndexOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] oct_index
 *     cdef np.uint8_t[:] oct_mask
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MaskedIndexOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MaskedIndexOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_MaskedIndexOcts;


/* "oct_visitors.pxd":79
 *     cdef np.uint8_t[:] oct_mask
 * 
 * cdef class IndexMaskMapOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] oct_index
 *     cdef np.uint8_t[:] oct_mask
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IndexMaskMapOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IndexMaskMapOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_IndexMaskMapOcts;


/* "oct_visitors.pxd":85
 *     cdef np.uint64_t map_index
 * 
 * cdef class ICoordsOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:,:] icoords
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_ICoordsOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_ICoordsOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_ICoordsOcts;


/* "oct_visitors.pxd":88
 *     cdef np.int64_t[:,:] icoords
 * 
 * cdef class IResOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] ires
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IResOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IResOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_IResOcts;


/* "oct_visitors.pxd":91
 *     cdef np.int64_t[:] ires
 * 
 * cdef class FCoordsOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:,:] fcoords
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FCoordsOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FCoordsOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_FCoordsOcts;


/* "oct_visitors.pxd":94
 *     cdef np.float64_t[:,:] fcoords
 * 
 * cdef class FWidthOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:,:] fwidth
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FWidthOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FWidthOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_FWidthOcts;


/* "oct_visitors.pxd":97
 *     cdef np.float64_t[:,:] fwidth
 * 
 * cdef class CopyArrayI64(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:,:,:,:,:,:] source
 *     cdef np.int64_t[:,:] dest
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyArrayI64 {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyArrayI64 *__pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyArrayI64;


/* "oct_visitors.pxd":101
 *     cdef np.int64_t[:,:] dest
 * 
 * cdef class CopyArrayF64(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:,:,:,:,:] source
 *     cdef np.float64_t[:,:] dest
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyArrayF64 {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyArrayF64 *__pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyArrayF64;


/* "oct_visitors.pxd":105
 *     cdef np.float64_t[:,:] dest
 * 
 * cdef class CopyFileIndArrayI8(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t root
 *     cdef np.uint8_t[:] source
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8 {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8 *__pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8;


/* "oct_visitors.pxd":110
 *     cdef np.uint8_t[:] dest
 * 
 * cdef class IdentifyOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] domain_mask
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IdentifyOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IdentifyOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_IdentifyOcts;


/* "oct_visitors.pxd":113
 *     cdef np.uint8_t[:] domain_mask
 * 
 * cdef class AssignDomainInd(OctVisitor):             # <<<<<<<<<<<<<<
 *     pass
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_AssignDomainInd {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_AssignDomainInd *__pyx_vtabptr_2yt_8geometry_12oct_visitors_AssignDomainInd;


/* "oct_visitors.pxd":116
 *     pass
 * 
 * cdef class FillFileIndicesO(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] levels
 *     cdef np.int64_t[:] file_inds
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FillFileIndicesO {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FillFileIndicesO *__pyx_vtabptr_2yt_8geometry_12oct_visitors_FillFileIndicesO;


/* "oct_visitors.pxd":121
 *     cdef np.uint8_t[:] cell_inds
 * 
 * cdef class FillFileIndicesR(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] levels
 *     cdef np.int64_t[:] file_inds
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FillFileIndicesR {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FillFileIndicesR *__pyx_vtabptr_2yt_8geometry_12oct_visitors_FillFileIndicesR;


/* "oct_visitors.pxd":126
 *     cdef np.uint8_t[:] cell_inds
 * 
 * cdef class CountByDomain(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] domain_counts
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountByDomain {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountByDomain *__pyx_vtabptr_2yt_8geometry_12oct_visitors_CountByDomain;


/* "oct_visitors.pxd":129
 *     cdef np.int64_t[:] domain_counts
 * 
 * cdef class StoreOctree(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] ref_mask
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_StoreOctree {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_StoreOctree *__pyx_vtabptr_2yt_8geometry_12oct_visitors_StoreOctree;


/* "oct_visitors.pxd":132
 *     cdef np.uint8_t[:] ref_mask
 * 
 * cdef class LoadOctree(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] ref_mask
 *     cdef Oct* octs
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_LoadOctree {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_LoadOctree *__pyx_vtabptr_2yt_8geometry_12oct_visitors_LoadOctree;


/* "oct_visitors.pxd":139
 *     cdef np.uint64_t max_level
 * 
 * cdef class MortonIndexOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] level_arr
 *     cdef np.uint64_t[:] morton_ind
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MortonIndexOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MortonIndexOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_MortonIndexOcts;


/* "oct_visitors.pxd":150
 * 
 * 
 * cdef class StoreIndex(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:,:,:,:] cell_inds
 * 
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_StoreIndex {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_StoreIndex *__pyx_vtabptr_2yt_8geometry_12oct_visitors_StoreIndex;


/* "oct_visitors.pxd":154
 * 
 * # cimport oct_container
 * cdef class BaseNeighbourVisitor(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef int idim      # 0,1,2 for x,y,z
 *     cdef int direction # +1 for +x, -1 for -x
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  void (*set_neighbour_info)(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, int *);
  __pyx_t_5numpy_uint8_t (*neighbour_rind)(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor *);
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor *__pyx_vtabptr_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor;
static CYTHON_INLINE __pyx_t_5numpy_uint8_t __pyx_f_2yt_8geometry_12oct_visitors_20BaseNeighbourVisitor_neighbour_rind(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor *);


/* "oct_visitors.pxd":170
 *         return (((self.neigh_ind[2]*d)+self.neigh_ind[1])*d+self.neigh_ind[0])
 * 
 * cdef class NeighbourCellIndexVisitor(BaseNeighbourVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[::1] cell_inds
 *     cdef np.int64_t[::1] domain_inds
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor *__pyx_vtabptr_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor;


/* "oct_visitors.pxd":174
 *     cdef np.int64_t[::1] domain_inds
 * 
 * cdef class NeighbourCellVisitor(BaseNeighbourVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[::1] levels
 *     cdef np.int64_t[::1] file_inds
*/

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_NeighbourCellVisitor {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_NeighbourCellVisitor *__pyx_vtabptr_2yt_8geometry_12oct_visitors_NeighbourCellVisitor;


/* "ewah_bool_utils/ewah_bool_wrap.pxd":16
 * ctypedef pair[np.uint64_t, np.uint64_t] ind_pair
 * 
 * cdef class FileBitmasks:             # <<<<<<<<<<<<<<
 *     cdef np.uint32_t nfiles
 *     cdef ewah_map** ewah_coll
*/

struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks {
  void (*_reset)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *);
  int (*_iseq)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *);
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *(*_get_bitmask)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t);
  PyObject *(*_find_collisions)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__find_collisions *__pyx_optional_args);
  PyObject *(*_find_collisions_coarse)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__find_collisions_coarse *__pyx_optional_args);
  PyObject *(*_find_collisions_refined)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__find_collisions_refined *__pyx_optional_args);
  void (*_set)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, __pyx_t_5numpy_uint64_t, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__set *__pyx_optional_args);
  void (*_set_coarse)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, __pyx_t_5numpy_uint64_t);
  void (*_set_refined)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t);
  void (*_set_coarse_array)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, __Pyx_memviewslice);
  void (*_set_refined_array)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, __pyx_t_5numpy_uint64_t, __Pyx_memviewslice);
  void (*_set_refined_index_array)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, __pyx_t_5numpy_int64_t, PyArrayObject *, PyArrayObject *);
  void (*_set_map)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t);
  void (*_set_refn)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, __pyx_t_5numpy_uint64_t);
  int (*_get)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, __pyx_t_5numpy_uint64_t, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__get *__pyx_optional_args);
  int (*_get_coarse)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, __pyx_t_5numpy_uint64_t);
  void (*_get_coarse_array)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, __pyx_t_5numpy_uint64_t, __Pyx_memviewslice);
  int (*_isref)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, __pyx_t_5numpy_uint64_t);
  __pyx_t_5numpy_uint64_t (*_count_total)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t);
  __pyx_t_5numpy_uint64_t (*_count_refined)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t);
  __pyx_t_5numpy_uint64_t (*_count_coarse)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t);
  void (*_append)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  int (*_intersects)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  void (*_logicalxor)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  void (*_logicaland)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  void (*_select_contaminated)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __Pyx_memviewslice, __Pyx_memviewslice, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__select_contaminated *__pyx_optional_args);
  void (*_select_uncontaminated)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __Pyx_memviewslice, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__select_uncontaminated *__pyx_optional_args);
  PyObject *(*_dumps)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t);
  int (*_loads)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *, __pyx_t_5numpy_uint32_t, PyObject *);
  int (*_check)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *);
};
static struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks;


/* "ewah_bool_utils/ewah_bool_wrap.pxd":58
 *     cdef bint _check(self)
 * 
 * cdef class BoolArrayCollection:             # <<<<<<<<<<<<<<
 *     cdef ewah_map* ewah_coll
 *     cdef ewah_bool_array* ewah_keys
*/

struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection {
  void (*_reset)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  int (*_richcmp)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, int);
  void (*_set)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __pyx_t_5numpy_uint64_t, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__set *__pyx_optional_args);
  void (*_set_coarse)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __pyx_t_5numpy_uint64_t);
  void (*_set_refined)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t);
  void (*_set_coarse_array)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __Pyx_memviewslice);
  void (*_set_refined_array)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __pyx_t_5numpy_uint64_t, __Pyx_memviewslice);
  void (*_set_map)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t);
  void (*_set_refn)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __pyx_t_5numpy_uint64_t);
  int (*_get)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __pyx_t_5numpy_uint64_t, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__get *__pyx_optional_args);
  int (*_get_coarse)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __pyx_t_5numpy_uint64_t);
  void (*_get_coarse_array)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __pyx_t_5numpy_uint64_t, __Pyx_memviewslice);
  int (*_contains)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __pyx_t_5numpy_uint64_t);
  int (*_isref)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __pyx_t_5numpy_uint64_t);
  void (*_ewah_coarse)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  __pyx_t_5numpy_uint64_t (*_count_total)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  __pyx_t_5numpy_uint64_t (*_count_refined)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  __pyx_t_5numpy_uint64_t (*_count_coarse)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  void (*_append)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  void (*_logicalor)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  int (*_intersects)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  void (*_logicalxor)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  void (*_logicaland)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  void (*_select_contaminated)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __Pyx_memviewslice, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__select_contaminated *__pyx_optional_args);
  void (*_select_uncontaminated)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, __Pyx_memviewslice, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__select_uncontaminated *__pyx_optional_args);
  void (*_get_ghost_zones)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, int, int, int, int *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__get_ghost_zones *__pyx_optional_args);
  PyObject *(*_dumps)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  int (*_loads)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, PyObject *);
  int (*_check)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
};
static struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection;


/* "ewah_bool_utils/ewah_bool_wrap.pxd":98
 *     cdef bint _check(self)
 * 
 * cdef class BoolArrayCollectionUncompressed:             # <<<<<<<<<<<<<<
 *     cdef int nele1
 *     cdef int nele2
*/

struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed {
  void (*_set)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, __pyx_t_5numpy_uint64_t, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_31BoolArrayCollectionUncompressed__set *__pyx_optional_args);
  void (*_set_coarse)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, __pyx_t_5numpy_uint64_t);
  void (*_set_refined)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t);
  void (*_set_coarse_array)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, __Pyx_memviewslice);
  void (*_set_coarse_array_ptr)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, __pyx_t_5numpy_uint8_t *);
  void (*_set_refined_array)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, __pyx_t_5numpy_uint64_t, __Pyx_memviewslice);
  void (*_set_refined_array_ptr)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint8_t *);
  void (*_set_map)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t);
  void (*_set_refn)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, __pyx_t_5numpy_uint64_t);
  int (*_get)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, __pyx_t_5numpy_uint64_t, struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_31BoolArrayCollectionUncompressed__get *__pyx_optional_args);
  int (*_get_coarse)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, __pyx_t_5numpy_uint64_t);
  int (*_isref)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, __pyx_t_5numpy_uint64_t);
  __pyx_t_5numpy_uint64_t (*_count_total)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *);
  __pyx_t_5numpy_uint64_t (*_count_refined)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *);
  void (*_append)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *);
  int (*_intersects)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *);
  void (*_compress)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
};
static struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed;


/* "ewah_bool_utils/ewah_bool_wrap.pxd":123
 *     cdef void _compress(self, BoolArrayCollection solf)
 * 
 * cdef class SparseUnorderedBitmaskSet:             # <<<<<<<<<<<<<<
 *     cdef cset[np.uint64_t] entries
 *     cdef void _set(self, np.uint64_t ind)
*/

struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet {
  void (*_set)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet *, __pyx_t_5numpy_uint64_t);
  void (*_fill)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet *, __Pyx_memviewslice);
  void (*_fill_ewah)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  void (*_fill_bool)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *);
  void (*_reset)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet *);
  PyObject *(*to_array)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet *);
};
static struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet *__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet;


/* "ewah_bool_utils/ewah_bool_wrap.pxd":132
 *     cdef to_array(self)
 * 
 * cdef class SparseUnorderedBitmaskVector:             # <<<<<<<<<<<<<<
 *     cdef int total
 *     cdef vector[np.uint64_t] entries
*/

struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector {
  void (*_set)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector *, __pyx_t_5numpy_uint64_t);
  void (*_fill)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector *, __Pyx_memviewslice);
  void (*_fill_ewah)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  void (*_fill_bool)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *);
  void (*_reset)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector *);
  PyObject *(*to_array)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector *);
  void (*_remove_duplicates)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector *);
  void (*_prune)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector *);
};
static struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector *__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector;


/* "ewah_bool_utils/ewah_bool_wrap.pxd":144
 *     cdef void _prune(self)
 * 
 * cdef class SparseUnorderedRefinedBitmaskSet:             # <<<<<<<<<<<<<<
 *     cdef cset[ind_pair] entries
 *     cdef void _set(self, np.uint64_t ind1, np.uint64_t ind2)
*/

struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet {
  void (*_set)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t);
  void (*_fill)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *, __Pyx_memviewslice, __Pyx_memviewslice);
  void (*_fill_ewah)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  void (*_fill_bool)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *);
  void (*_reset)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *);
  PyObject *(*to_array)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *);
};
static struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet;


/* "ewah_bool_utils/ewah_bool_wrap.pxd":153
 *     cdef to_array(self)
 * 
 * cdef class SparseUnorderedRefinedBitmaskVector:             # <<<<<<<<<<<<<<
 *     cdef int total
 *     cdef vector[ind_pair] entries
*/

struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector {
  void (*_set)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t);
  void (*_fill)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector *, __Pyx_memviewslice, __Pyx_memviewslice);
  void (*_fill_ewah)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *);
  void (*_fill_bool)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *);
  void (*_reset)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector *);
  PyObject *(*to_array)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector *);
  void (*_remove_duplicates)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector *);
  void (*_prune)(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector *);
};
static struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector *__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector;


/* "yt/geometry/particle_oct_container.pyx":74
 * ctypedef cmap[np.uint64_t, bool_array] CoarseRefinedSets
 * 
 * cdef class ParticleOctreeContainer(OctreeContainer):             # <<<<<<<<<<<<<<
 *     cdef Oct** oct_list
 *     #The starting oct index of each domain
*/

struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer {
  struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctreeContainer __pyx_base;
  void (*visit_free)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *);
  void (*visit_clear)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *);
  PyObject *(*visit_assign)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_int64_t *, int, int *);
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*allocate_oct)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *);
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*refine_oct)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_uint64_t, int, __pyx_t_5numpy_uint8_t);
  void (*filter_particles)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_uint64_t *, __pyx_t_5numpy_int64_t, int, __pyx_t_5numpy_uint8_t);
  PyObject *(*visit)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_int64_t *, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit *__pyx_optional_args);
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*get_from_index)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, __pyx_t_5numpy_uint64_t, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_get_from_index *__pyx_optional_args);
};
static struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer;


/* "yt/geometry/particle_oct_container.pyx":416
 * cdef np.uint64_t FLAG = ~(<np.uint64_t>0)
 * 
 * cdef class ParticleBitmap:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t left_edge[3]
 *     cdef np.float64_t right_edge[3]
*/

struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap {
  void (*_update_mi2)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, __pyx_t_5numpy_uint64_t);
  void (*_ParticleBitmap__set_coarse_index_data_file)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, __pyx_t_5numpy_uint64_t);
  __pyx_t_5numpy_int64_t (*_ParticleBitmap__fill_refined_ranges)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_float64_t *, __pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array &);
  void (*_ParticleBitmap__set_refined_index_data_file)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_int64_t);
  void (*__pyx_fuse_0_ParticleBitmap__coarse_index_data_file)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t);
  void (*__pyx_fuse_1_ParticleBitmap__coarse_index_data_file)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t);
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *(*__pyx_fuse_0_ParticleBitmap__refined_index_data_file)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, PyArrayObject *, PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint8_t);
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *(*__pyx_fuse_1_ParticleBitmap__refined_index_data_file)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, PyArrayObject *, PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint8_t);
};
static struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleBitmap;


/* "yt/geometry/particle_oct_container.pyx":1419
 *         return octree
 * 
 * cdef class ParticleBitmapSelector:             # <<<<<<<<<<<<<<
 *     cdef SelectorObject selector
 *     cdef ParticleBitmap bitmap
*/

struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector {
  int (*is_refined)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t);
  int (*is_refined_files)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t);
  void (*add_coarse)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_coarse *__pyx_optional_args);
  void (*set_files_coarse)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t);
  int (*add_refined)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_refined *__pyx_optional_args);
  void (*set_files_refined)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t);
  void (*add_neighbors_coarse)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t);
  void (*set_files_neighbors_coarse)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t);
  void (*add_neighbors_refined)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t);
  void (*set_files_neighbors_refined)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t);
  void (*set_coarse_list)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *);
  void (*set_refined_list)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *);
  void (*set_coarse_bool)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *);
  void (*set_refined_bool)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *);
  void (*push_refined_bool)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t);
  void (*add_ghost_zones)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *);
  int (*fill_subcells_mi1)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t *);
  int (*fill_subcells_mi2)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t *);
  int (*recursive_morton_mask)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_int32_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t *);
  void (*recursive_morton_files)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_int32_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_uint64_t);
};
static struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector;


/* "yt/geometry/particle_oct_container.pyx":1945
 *                         self.set_files_refined(mi1,mi2)
 * 
 * cdef class ParticleBitmapOctreeContainer(SparseOctreeContainer):             # <<<<<<<<<<<<<<
 *     cdef Oct** oct_list
 *     cdef public int n_ref
*/

struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer {
  struct __pyx_vtabstruct_2yt_8geometry_13oct_container_SparseOctreeContainer __pyx_base;
  PyObject *(*visit_assign)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_int64_t *, int, int *, __pyx_t_5numpy_int64_t);
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*allocate_oct)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *);
  void (*_get_index_base_octs)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *, __Pyx_memviewslice, __Pyx_memviewslice);
  void (*visit_free)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, int);
  void (*recursive_add)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, PyArrayObject *, int, int *, int, int *);
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*refine_oct)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_uint64_t, int);
  void (*filter_particles)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_uint64_t *, __pyx_t_5numpy_int64_t, int);
};
static struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer;


/* "View.MemoryView":110
 * 
 * 
 * @cython.collection_type("sequence")             # <<<<<<<<<<<<<<
 * @cname("__pyx_array")
 * cdef class array:
*/

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":334
 * 
 * 
 * @cname('__pyx_memoryview')             # <<<<<<<<<<<<<<
 * cdef class memoryview:
 * 
*/

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
  PyObject *(*_get_base)(struct __pyx_memoryview_obj *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":950
 * 
 * 
 * @cython.collection_type("sequence")             # <<<<<<<<<<<<<<
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):
*/

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
#endif
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_PySequence_ITEM(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_NewRef(__Pyx_PyTuple_GET_ITEM(args, i))
#else
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_XNewRef(PyTuple_GetItem(args, i))
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_ArgRef_FASTCALL(args, i) __Pyx_NewRef(args[i])
    #define __Pyx_NumKwargs_FASTCALL(kwds) __Pyx_PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
#else
    #define __Pyx_ArgRef_FASTCALL __Pyx_ArgRef_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#if CYTHON_METH_FASTCALL || (CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(args + start, stop - start)
#else
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static CYTHON_INLINE int __Pyx_ParseKeywords(
    PyObject *kwds, PyObject *const *kwvalues, PyObject ** const argnames[],
    PyObject *kwds2, PyObject *values[],
    Py_ssize_t num_pos_args, Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs
);

/* CallCFunction.proto */
#define __Pyx_CallCFunction(cfunc, self, args)\
    ((PyCFunction)(void(*)(void))(cfunc)->func)(self, args)
#define __Pyx_CallCFunctionWithKeywords(cfunc, self, args, kwargs)\
    ((PyCFunctionWithKeywords)(void(*)(void))(cfunc)->func)(self, args, kwargs)
#define __Pyx_CallCFunctionFast(cfunc, self, args, nargs)\
    ((__Pyx_PyCFunctionFast)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs)
#define __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, nargs, kwnames)\
    ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs, kwnames)

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS
    __pyx_atomic_int_type initialized;
#endif
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
static CYTHON_INLINE int __Pyx_CachedCFunction_GetAndSetInitializing(__Pyx_CachedCFunction *cfunc) {
#if !CYTHON_ATOMICS
    return 1;
#else
    __pyx_nonatomic_int_type expected = 0;
    if (__pyx_atomic_int_cmp_exchange(&cfunc->initialized, &expected, 1)) {
        return 0;
    }
    return expected;
#endif
}
static CYTHON_INLINE void __Pyx_CachedCFunction_SetFinishedInitializing(__Pyx_CachedCFunction *cfunc) {
#if CYTHON_ATOMICS
    __pyx_atomic_store(&cfunc->initialized, 2);
#endif
}
#else
#define __Pyx_CachedCFunction_GetAndSetInitializing(cfunc) 2
#define __Pyx_CachedCFunction_SetFinishedInitializing(cfunc)
#endif

/* CallUnboundCMethod2.proto */
CYTHON_UNUSED
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectFastCallMethod.proto */
#if CYTHON_VECTORCALL && PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyObject_FastCallMethod(name, args, nargsf) PyObject_VectorcallMethod(name, args, nargsf, NULL)
#else
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf);
#endif

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, const char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* COrdinalToPyUnicode.proto */
static CYTHON_INLINE int __Pyx_CheckUnicodeValue(int value);
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromOrdinal_Padded(int value, Py_ssize_t width, char padding_char);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* IncludeStdlibH.proto */
#include <stdlib.h>

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject** values, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

CYTHON_UNUSED static int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* RejectKeywords.proto */
static void __Pyx_RejectKeywords(const char* function_name, PyObject *kwds);

/* DivInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t, int b_is_constant);

/* UnaryNegOverflows.proto */
#define __Pyx_UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_mstate_global->__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* AssertionsEnabled.proto */
#if CYTHON_COMPILING_IN_LIMITED_API  ||  (CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030C0000)
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  static int __Pyx_init_assertions_enabled(void) {
    PyObject *builtins, *debug, *debug_str;
    int flag;
    builtins = PyEval_GetBuiltins();
    if (!builtins) goto bad;
    debug_str = PyUnicode_FromStringAndSize("__debug__", 9);
    if (!debug_str) goto bad;
    debug = PyObject_GetItem(builtins, debug_str);
    Py_DECREF(debug_str);
    if (!debug) goto bad;
    flag = PyObject_IsTrue(debug);
    Py_DECREF(debug);
    if (flag == -1) goto bad;
    __pyx_assertions_enabled_flag = flag;
    return 0;
  bad:
    __pyx_assertions_enabled_flag = 1;
    return -1;
  }
#else
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (!Py_OptimizeFlag)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2) {
    return PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2);
}
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#ifdef PyExceptionInstance_Check
  #define __Pyx_PyBaseException_Check(obj) PyExceptionInstance_Check(obj)
#else
  #define __Pyx_PyBaseException_Check(obj) __Pyx_TypeCheck(obj, PyExc_BaseException)
#endif

CYTHON_UNUSED static int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PySequenceMultiply.proto */
#define __Pyx_PySequence_Multiply_Left(mul, seq)  __Pyx_PySequence_Multiply(seq, mul)
static CYTHON_INLINE PyObject* __Pyx_PySequence_Multiply(PyObject *seq, Py_ssize_t mul);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* PyObjectFormat.proto */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);
#else
#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* RaiseUnboundLocalError.proto */
static void __Pyx_RaiseUnboundLocalError(const char *varname);

/* DivInt[long].proto */
static CYTHON_INLINE long __Pyx_div_long(long, long, int b_is_constant);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_HasAttr(o, n)  PyObject_HasAttrWithError(o, n)
#else
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* StringJoin.proto */
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_size_t(size_t value, Py_ssize_t width, char padding_char, char format_char);

/* PyObject_Unicode.proto */
#define __Pyx_PyObject_Unicode(obj)\
    (likely(PyUnicode_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              const __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
  const __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* PyLongBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE PyObject* __Pyx_PyLong_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyLong_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyObjectVectorCallKwBuilder.proto */
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#if CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_Object_Vectorcall_CallFromBuilder PyObject_Vectorcall
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder _PyObject_Vectorcall
#endif
#define __Pyx_MakeVectorcallBuilderKwds(n) PyTuple_New(n)
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder __Pyx_PyObject_FastCallDict
#define __Pyx_MakeVectorcallBuilderKwds(n) __Pyx_PyDict_NewPresized(n)
#define __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n) PyDict_SetItem(builder, key, value)
#define __Pyx_VectorcallBuilder_AddArgStr(key, value, builder, args, n) PyDict_SetItemString(builder, key, value)
#endif

/* PyObjectVectorCallMethodKwBuilder.proto */
#if CYTHON_VECTORCALL && PY_VERSION_HEX >= 0x03090000
#define __Pyx_Object_VectorcallMethod_CallFromBuilder PyObject_VectorcallMethod
#else
static PyObject *__Pyx_Object_VectorcallMethod_CallFromBuilder(PyObject *name, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#endif

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

/* PyLongBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE PyObject* __Pyx_PyLong_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyLong_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyLongBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE PyObject* __Pyx_PyLong_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyLong_MultiplyObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceMultiply(op1, op2) : PyNumber_Multiply(op1, op2))
#endif

/* CallUnboundCMethod1.proto */
CYTHON_UNUSED
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_long(long value, Py_ssize_t width, char padding_char, char format_char);

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* object_ord.proto */
#define __Pyx_PyObject_Ord(c)\
    (likely(PyUnicode_Check(c)) ? (long)__Pyx_PyUnicode_AsPy_UCS4(c) : __Pyx__PyObject_Ord(c))
static long __Pyx__PyObject_Ord(PyObject* c);

/* memoryview_get_from_buffer.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_PyMemoryView_Get_itemsize(o) PyMemoryView_GET_BUFFER(o)->itemsize
#else
 // can't get format like this unfortunately. It's unicode via getattr
static Py_ssize_t __Pyx_PyMemoryView_Get_itemsize(PyObject *obj);
#endif

/* memoryview_get_from_buffer.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_PyMemoryView_Get_ndim(o) PyMemoryView_GET_BUFFER(o)->ndim
#else
 // can't get format like this unfortunately. It's unicode via getattr
static int __Pyx_PyMemoryView_Get_ndim(PyObject *obj);
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
static CYTHON_INLINE int __Pyx_unpack_tuple2(
    PyObject* tuple, PyObject** value1, PyObject** value2, int is_tuple, int has_known_size, int decref_tuple);
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00a2
    return PyList_Extend(L, v);
#elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* py_dict_values.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d);

/* CallUnboundCMethod0.proto */
CYTHON_UNUSED
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* ImportDottedModuleRelFirst.proto */
static PyObject *__Pyx_ImportDottedModuleRelFirst(PyObject *name, PyObject *parts_tuple);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* PyLongBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE PyObject* __Pyx_PyLong_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyLong_MultiplyCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceMultiply(op1, op2) : PyNumber_Multiply(op1, op2))
#endif

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallTypeTraverse.proto */
#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#define __Pyx_call_type_traverse(o, always_call, visit, arg) 0
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg);
#endif

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear);

/* DefaultPlacementNew.proto */
#include <new>
template<typename T>
void __Pyx_default_placement_construct(T* x) {
    new (static_cast<void*>(x)) T();
}

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_1_2
#define __PYX_HAVE_RT_ImportType_proto_3_1_2
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_1_2(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_1_2(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_1_2 {
   __Pyx_ImportType_CheckSize_Error_3_1_2 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_1_2 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_1_2 = 2
};
static PyTypeObject *__Pyx_ImportType_3_1_2(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_1_2 check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* LimitedApiGetTypeDict.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_GetTypeDict(PyTypeObject *tp);
#endif

/* SetItemOnTypeDict.proto */
static int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v);
#define __Pyx_SetItemOnTypeDict(tp, k, v) __Pyx__SetItemOnTypeDict((PyTypeObject*)tp, k, v)

/* FixUpExtensionType.proto */
static CYTHON_INLINE int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* MergeVTables.proto */
static int __Pyx_MergeVtables(PyTypeObject *type);

/* DelItemOnTypeDict.proto */
static int __Pyx__DelItemOnTypeDict(PyTypeObject *tp, PyObject *k);
#define __Pyx_DelItemOnTypeDict(tp, k) __Pyx__DelItemOnTypeDict((PyTypeObject*)tp, k)

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* ListPack.proto */
static PyObject *__Pyx_PyList_Pack(Py_ssize_t n, ...);

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases);

/* CommonTypesMetaclass.proto */
static int __pyx_CommonTypesMetaclass_init(PyObject *module);
#define __Pyx_CommonTypesMetaclass_USED

/* PyMethodNew.proto */
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ);

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL ||\
        (CYTHON_COMPILING_IN_LIMITED_API && CYTHON_METH_FASTCALL)
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    PyObject *defaults;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_mstate_global->__pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_mstate_global->__pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void));
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func,
                                                         PyTypeObject *defaults_type);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* FusedFunction.proto */
typedef struct {
    __pyx_CyFunctionObject func;
    PyObject *__signatures__;
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyMethodDef *ml;
#endif
} __pyx_FusedFunctionObject;
static PyObject *__pyx_FusedFunction_New(PyMethodDef *ml, int flags,
                                         PyObject *qualname, PyObject *closure,
                                         PyObject *module, PyObject *globals,
                                         PyObject *code);
static int __pyx_FusedFunction_clear(__pyx_FusedFunctionObject *self);
static int __pyx_FusedFunction_init(PyObject *module);
#define __Pyx_FusedFunction_USED

/* CLineInTraceback.proto */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#else
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#endif

/* CodeObjectCache.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject __Pyx_CachedCodeObjectType;
#else
typedef PyCodeObject __Pyx_CachedCodeObjectType;
#endif
typedef struct {
    __Pyx_CachedCodeObjectType* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_int_type accessor_count;
  #endif
};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(const __Pyx_TypeInfo *a, const __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                const __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_float(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_unsigned_char(PyObject *, int writable_flag);

/* PyUCS4InUnicode.proto */
static CYTHON_INLINE int __Pyx_UnicodeContainsUCS4(PyObject* unicode, Py_UCS4 character);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint64_t(PyObject *, int writable_flag);

/* Print.proto */
static int __Pyx_Print(PyObject*, PyObject *, int);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_5numpy_uint8_t(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_5numpy_uint8_t(const char *itemp, PyObject *obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_uint32_t(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_uint64_t(PyObject *, int writable_flag);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_5numpy_int64_t(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_5numpy_int64_t(const char *itemp, PyObject *obj);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_5numpy_uint64_t(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_5numpy_uint64_t(const char *itemp, PyObject *obj);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* MemviewSliceInit.proto */
#include <stdio.h>
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int_type *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int_type *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (&memview->acquisition_count)
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XCLEAR_MEMVIEW(slice, have_gil) __Pyx_XCLEAR_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XCLEAR_MEMVIEW(__Pyx_memviewslice *, int, int);

/* ImportNumPyArray.proto */
static PyObject* __Pyx_ImportNumPyArrayTypeIfAvailable(void);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE npy_uint8 __Pyx_PyLong_As_npy_uint8(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE npy_uint64 __Pyx_PyLong_As_npy_uint64(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE npy_int64 __Pyx_PyLong_As_npy_int64(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE npy_uint32 __Pyx_PyLong_As_npy_uint32(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_npy_int64(npy_int64 value);

/* CIntFromPy.proto */
static CYTHON_INLINE npy_int32 __Pyx_PyLong_As_npy_int32(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_npy_int32(npy_int32 value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_npy_uint64(npy_uint64 value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_Py_intptr_t(Py_intptr_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_npy_uint8(npy_uint8 value);

/* TypeInfoToFormat.proto */
struct __pyx_typeinfo_string {
    char string[3];
};
static struct __pyx_typeinfo_string __Pyx_TypeInfoToFormat(const __Pyx_TypeInfo *type);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_npy_uint32(npy_uint32 value);

/* PrintOne.proto */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyLong_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyLong_As_char(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyType_GetFullyQualifiedName PyType_GetFullyQualifiedName
#else
static __Pyx_TypeName __Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp);
#endif
#else  // !LIMITED_API
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetFullyQualifiedName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* IterNextPlain.proto */
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next_Plain(PyObject *iterator);
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
static PyObject *__Pyx_GetBuiltinNext_LimitedAPI(void);
#endif

/* ReturnWithStopIteration.proto */
static CYTHON_INLINE void __Pyx_ReturnWithStopIteration(PyObject* value, int async, int iternext);

/* CoroutineBase.proto */
struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct __pyx_CoroutineObject {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    __Pyx_pyiter_sendfunc yieldfrom_am_send;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
#if CYTHON_USE_SYS_MONITORING && (CYTHON_PROFILE || CYTHON_TRACE)
    PyMonitoringState __pyx_pymonitoring_state[__Pyx_MonitoringEventTypes_CyGen_count];
    uint64_t __pyx_pymonitoring_version;
#endif
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static __Pyx_PySendResult __Pyx_Coroutine_AmSend(PyObject *self, PyObject *value, PyObject **retval);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static __Pyx_PySendResult __Pyx_Coroutine_Close(PyObject *self, PyObject **retval);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);
static char __Pyx_Coroutine_test_and_set_is_running(__pyx_CoroutineObject *gen);
static void __Pyx_Coroutine_unset_is_running(__pyx_CoroutineObject *gen);
static char __Pyx_Coroutine_get_is_running(__pyx_CoroutineObject *gen);
static PyObject *__Pyx_Coroutine_get_is_running_getter(PyObject *gen, void *closure);
#if __PYX_HAS_PY_AM_SEND == 2
static void __Pyx_SetBackportTypeAmSend(PyTypeObject *type, __Pyx_PyAsyncMethodsStruct *static_amsend_methods, __Pyx_pyiter_sendfunc am_send);
#endif
static PyObject *__Pyx_Coroutine_fail_reduce_ex(PyObject *self, PyObject *arg);

/* Generator.proto */
#define __Pyx_Generator_USED
#define __Pyx_Generator_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_mstate_global->__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(PyObject *module);
static CYTHON_INLINE PyObject *__Pyx_Generator_GetInlinedResult(PyObject *self);

/* GetRuntimeVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr_3_1_2(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_1_2(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* MultiPhaseInitModuleState.proto */
#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
static PyObject *__Pyx_State_FindModule(void*);
static int __Pyx_State_AddModule(PyObject* module, void*);
static int __Pyx_State_RemoveModule(void*);
#elif CYTHON_USE_MODULE_STATE
#define __Pyx_State_FindModule PyState_FindModule
#define __Pyx_State_AddModule PyState_AddModule
#define __Pyx_State_RemoveModule PyState_RemoveModule
#endif

/* #### Code section: module_declarations ### */
/* CythonABIVersion.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
    #if CYTHON_METH_FASTCALL
        #define __PYX_FASTCALL_ABI_SUFFIX  "_fastcall"
    #else
        #define __PYX_FASTCALL_ABI_SUFFIX
    #endif
    #define __PYX_LIMITED_ABI_SUFFIX "limited" __PYX_FASTCALL_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#else
    #define __PYX_LIMITED_ABI_SUFFIX
#endif
#if __PYX_HAS_PY_AM_SEND == 1
    #define __PYX_AM_SEND_ABI_SUFFIX
#elif __PYX_HAS_PY_AM_SEND == 2
    #define __PYX_AM_SEND_ABI_SUFFIX "amsendbackport"
#else
    #define __PYX_AM_SEND_ABI_SUFFIX "noamsend"
#endif
#ifndef __PYX_MONITORING_ABI_SUFFIX
    #define __PYX_MONITORING_ABI_SUFFIX
#endif
#if CYTHON_USE_TP_FINALIZE
    #define __PYX_TP_FINALIZE_ABI_SUFFIX
#else
    #define __PYX_TP_FINALIZE_ABI_SUFFIX "nofinalize"
#endif
#if CYTHON_USE_FREELISTS || !defined(__Pyx_AsyncGen_USED)
    #define __PYX_FREELISTS_ABI_SUFFIX
#else
    #define __PYX_FREELISTS_ABI_SUFFIX "nofreelists"
#endif
#define CYTHON_ABI  __PYX_ABI_VERSION __PYX_LIMITED_ABI_SUFFIX __PYX_MONITORING_ABI_SUFFIX __PYX_TP_FINALIZE_ABI_SUFFIX __PYX_FREELISTS_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview__get_base(struct __pyx_memoryview_obj *__pyx_v_self); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice__get_base(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer *__pyx_f_2yt_8geometry_13oct_container_13OctObjectPool_get_cont(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool *__pyx_v_self, int __pyx_v_i); /* proto*/
static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_10OctVisitor_oind(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_10OctVisitor_rind(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *__pyx_v_self); /* proto*/
static CYTHON_INLINE __pyx_t_5numpy_uint8_t __pyx_f_2yt_8geometry_12oct_visitors_20BaseNeighbourVisitor_neighbour_rind(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor *__pyx_v_self); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit_free(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit_clear(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o); /* proto*/
static PyObject *__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit_assign(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_int64_t *__pyx_v_lpos, int __pyx_v_level, int *__pyx_v_max_level); /* proto*/
static __pyx_t_5numpy_int64_t __pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_get_domain_offset(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, CYTHON_UNUSED int __pyx_v_domain_id); /* proto*/
static struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_allocate_oct(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self); /* proto*/
static struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_refine_oct(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_uint64_t __pyx_v_index, int __pyx_v_level, __pyx_t_5numpy_uint8_t __pyx_v_order); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_filter_particles(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_uint64_t *__pyx_v_data, __pyx_t_5numpy_int64_t __pyx_v_p, int __pyx_v_level, __pyx_t_5numpy_uint8_t __pyx_v_order); /* proto*/
static PyObject *__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_int64_t *__pyx_v_counts, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit *__pyx_optional_args); /* proto*/
static struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_get_from_index(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_get_from_index *__pyx_optional_args); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__update_mi2(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_index_order2); /* proto*/
static void __pyx_fuse_0__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, __pyx_t_5numpy_uint64_t __pyx_v_file_id); /* proto*/
static void __pyx_fuse_1__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, __pyx_t_5numpy_uint64_t __pyx_v_file_id); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__set_coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_file_id); /* proto*/
static struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_fuse_0__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_in_collection, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, PyArrayObject *__pyx_v_mask, __pyx_t_5numpy_uint64_t __pyx_v_count_threshold, __pyx_t_5numpy_uint8_t __pyx_v_mask_threshold); /* proto*/
static struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_fuse_1__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_in_collection, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, PyArrayObject *__pyx_v_mask, __pyx_t_5numpy_uint64_t __pyx_v_count_threshold, __pyx_t_5numpy_uint8_t __pyx_v_mask_threshold); /* proto*/
static __pyx_t_5numpy_int64_t __pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__fill_refined_ranges(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_s_ppos, __pyx_t_5numpy_float64_t __pyx_v_radius, __pyx_t_5numpy_float64_t *__pyx_v_LE, CYTHON_UNUSED __pyx_t_5numpy_float64_t *__pyx_v_RE, __pyx_t_5numpy_float64_t *__pyx_v_dds1, __pyx_t_5numpy_uint64_t __pyx_v_xex, __pyx_t_5numpy_uint64_t __pyx_v_yex, __pyx_t_5numpy_uint64_t __pyx_v_zex, __pyx_t_5numpy_float64_t *__pyx_v_dds2, __pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array &__pyx_v_refined_set); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__set_refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_sub_mi1, PyArrayObject *__pyx_v_sub_mi2, __pyx_t_5numpy_uint64_t __pyx_v_file_id, __pyx_t_5numpy_int64_t __pyx_v_nsub_mi); /* proto*/
static int __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_is_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1); /* proto*/
static int __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_is_refined_files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_coarse(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_coarse *__pyx_optional_args); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_files_coarse(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1); /* proto*/
static int __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1, __pyx_t_5numpy_uint64_t __pyx_v_mi2, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_refined *__pyx_optional_args); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_files_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1, __pyx_t_5numpy_uint64_t __pyx_v_mi2); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_neighbors_coarse(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_files_neighbors_coarse(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_neighbors_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1, __pyx_t_5numpy_uint64_t __pyx_v_mi2); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_files_neighbors_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1, __pyx_t_5numpy_uint64_t __pyx_v_mi2); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_coarse_list(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_g); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_refined_list(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_g); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_coarse_bool(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_g); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_refined_bool(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_g); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_push_refined_bool(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_ghost_zones(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_g); /* proto*/
static int __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_fill_subcells_mi1(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_nlevel, __pyx_t_5numpy_uint64_t *__pyx_v_ind1); /* proto*/
static int __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_fill_subcells_mi2(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_nlevel, __pyx_t_5numpy_uint64_t __pyx_v_mi1, __pyx_t_5numpy_uint64_t *__pyx_v_ind2); /* proto*/
static int __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_recursive_morton_mask(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_int32_t __pyx_v_level, __pyx_t_5numpy_float64_t *__pyx_v_pos, __pyx_t_5numpy_float64_t *__pyx_v_dds, __pyx_t_5numpy_uint64_t __pyx_v_mi1, __pyx_t_5numpy_uint64_t *__pyx_v_cur_ind); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_recursive_morton_files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_int32_t __pyx_v_level, __pyx_t_5numpy_float64_t *__pyx_v_pos, __pyx_t_5numpy_float64_t *__pyx_v_dds, __pyx_t_5numpy_uint64_t __pyx_v_mi1); /* proto*/
static PyObject *__pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_visit_assign(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_int64_t *__pyx_v_lpos, int __pyx_v_level, int *__pyx_v_max_level, __pyx_t_5numpy_int64_t __pyx_v_index_root); /* proto*/
static struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_allocate_oct(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer__get_index_base_octs(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, __Pyx_memviewslice __pyx_v_ind, __Pyx_memviewslice __pyx_v_domain_ind); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_visit_free(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, int __pyx_v_free_this); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_recursive_add(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, PyArrayObject *__pyx_v_indices, int __pyx_v_level, int *__pyx_v_max_level, int __pyx_v_domain_id, int *__pyx_v_count); /* proto*/
static struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_refine_oct(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_uint64_t __pyx_v_index, int __pyx_v_level); /* proto*/
static void __pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_filter_particles(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_uint64_t *__pyx_v_data, __pyx_t_5numpy_int64_t __pyx_v_p, int __pyx_v_level); /* proto*/

/* Module declarations from "libc.stdint" */

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.utility" */

/* Module declarations from "libcpp.map" */

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.string_view" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "cython.view" */
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char const *, char *); /*proto*/

/* Module declarations from "cython.dataclasses" */

/* Module declarations from "cython" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "numpy" */

/* Module declarations from "numpy" */

/* Module declarations from "ewah_bool_utils.ewah_bool_array" */

/* Module declarations from "libc.math" */

/* Module declarations from "libc.stdlib" */

/* Module declarations from "cpython.exc" */

/* Module declarations from "yt.geometry" */

/* Module declarations from "yt.geometry.grid_visitors" */
static __pyx_t_5numpy_uint8_t (*__pyx_f_2yt_8geometry_13grid_visitors_check_child_masked)(struct __pyx_t_2yt_8geometry_13grid_visitors_GridVisitorData *); /*proto*/

/* Module declarations from "yt.utilities.lib.fp_utils" */
static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_imax(__pyx_t_5numpy_int64_t, __pyx_t_5numpy_int64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_imin(__pyx_t_5numpy_int64_t, __pyx_t_5numpy_int64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_i64min(__pyx_t_5numpy_int64_t, __pyx_t_5numpy_int64_t); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_2yt_9utilities_3lib_8fp_utils__ensure_code(PyObject *); /*proto*/

/* Module declarations from "libc.float" */

/* Module declarations from "yt.utilities.lib.geometry_utils" */
static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_ifrexp(__pyx_t_5numpy_float64_t, __pyx_t_5numpy_int64_t *); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_msdb(__pyx_t_5numpy_int64_t, __pyx_t_5numpy_int64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_xor_msb(__pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_64bits_by2(__pyx_t_5numpy_uint64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_compact_64bits_by2(__pyx_t_5numpy_uint64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t); /*proto*/
static CYTHON_INLINE void __pyx_f_2yt_9utilities_3lib_14geometry_utils_decode_morton_64bit(__pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t *); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton(__pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_int32_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_dds(__pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds(__pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_uint64_t *); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_relative_dds(__pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_uint64_t *); /*proto*/
static __pyx_t_5numpy_uint32_t (*__pyx_f_2yt_9utilities_3lib_14geometry_utils_morton_neighbors_coarse)(__pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, int *, __pyx_t_5numpy_uint32_t, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice); /*proto*/
static __pyx_t_5numpy_uint32_t (*__pyx_f_2yt_9utilities_3lib_14geometry_utils_morton_neighbors_refined)(__pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, int *, __pyx_t_5numpy_uint32_t, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice); /*proto*/

/* Module declarations from "yt.geometry.selection_routines" */

/* Module declarations from "yt.utilities.lib.allocation_container" */

/* Module declarations from "yt.geometry.oct_container" */
static int *__pyx_vp_2yt_8geometry_13oct_container_ORDER_MAX = 0;
#define __pyx_v_2yt_8geometry_13oct_container_ORDER_MAX (*__pyx_vp_2yt_8geometry_13oct_container_ORDER_MAX)

/* Module declarations from "yt.geometry.oct_visitors" */
static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_cind(int, int, int); /*proto*/

/* Module declarations from "yt.utilities.lib.fnv_hash" */
static __pyx_t_5numpy_int64_t (*__pyx_f_2yt_9utilities_3lib_8fnv_hash_c_fnv_hash)(__Pyx_memviewslice); /*proto*/

/* Module declarations from "libcpp.pair" */

/* Module declarations from "libcpp.set" */

/* Module declarations from "ewah_bool_utils.ewah_bool_wrap" */

/* Module declarations from "yt.geometry.particle_oct_container" */
static __pyx_t_5numpy_uint64_t __pyx_v_2yt_8geometry_22particle_oct_container_ONEBIT;
static __pyx_t_5numpy_uint64_t __pyx_v_2yt_8geometry_22particle_oct_container_FLAG;
static PyObject *__pyx_collections_abc_Sequence = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static void __pyx_f_2yt_8geometry_22particle_oct_container__mask_children(PyArrayObject *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_py___pyx_t_5numpy_float64_t(__pyx_t_5numpy_float64_t *, Py_ssize_t); /*proto*/
static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple___pyx_t_5numpy_float64_t(__pyx_t_5numpy_float64_t *, Py_ssize_t); /*proto*/
static PyObject *__pyx_convert_vector_to_py_size_t(std::vector<size_t>  const &); /*proto*/
static int __pyx_array_allocate_buffer(struct __pyx_array_obj *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char const *, char *); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo const *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static int assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, PyObject *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, PyObject *); /*proto*/
static int __pyx_memoryview_err_no_memory(void); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static PyObject *__pyx_format_from_typeinfo(__Pyx_TypeInfo const *); /*proto*/
/* #### Code section: typeinfo ### */
static const __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t = { "uint64_t", NULL, sizeof(__pyx_t_5numpy_uint64_t), { 0 }, 0, __PYX_IS_UNSIGNED(__pyx_t_5numpy_uint64_t) ? 'U' : 'I', __PYX_IS_UNSIGNED(__pyx_t_5numpy_uint64_t), 0 };
static const __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t = { "uint8_t", NULL, sizeof(__pyx_t_5numpy_uint8_t), { 0 }, 0, __PYX_IS_UNSIGNED(__pyx_t_5numpy_uint8_t) ? 'U' : 'I', __PYX_IS_UNSIGNED(__pyx_t_5numpy_uint8_t), 0 };
static const __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t = { "int64_t", NULL, sizeof(__pyx_t_5numpy_int64_t), { 0 }, 0, __PYX_IS_UNSIGNED(__pyx_t_5numpy_int64_t) ? 'U' : 'I', __PYX_IS_UNSIGNED(__pyx_t_5numpy_int64_t), 0 };
static const __Pyx_TypeInfo __Pyx_TypeInfo_float = { "float", NULL, sizeof(float), { 0 }, 0, 'R', 0, 0 };
static const __Pyx_TypeInfo __Pyx_TypeInfo_double = { "double", NULL, sizeof(double), { 0 }, 0, 'R', 0, 0 };
static const __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t = { "float64_t", NULL, sizeof(__pyx_t_5numpy_float64_t), { 0 }, 0, 'R', 0, 0 };
static const __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t = { "uint32_t", NULL, sizeof(__pyx_t_5numpy_uint32_t), { 0 }, 0, __PYX_IS_UNSIGNED(__pyx_t_5numpy_uint32_t) ? 'U' : 'I', __PYX_IS_UNSIGNED(__pyx_t_5numpy_uint32_t), 0 };
static const __Pyx_TypeInfo __Pyx_TypeInfo_object = { "Python object", NULL, sizeof(PyObject *), { 0 }, 0, 'O', 0, 0 };
static const __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t = { "int32_t", NULL, sizeof(__pyx_t_5numpy_int32_t), { 0 }, 0, __PYX_IS_UNSIGNED(__pyx_t_5numpy_int32_t) ? 'U' : 'I', __PYX_IS_UNSIGNED(__pyx_t_5numpy_int32_t), 0 };
static const __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t = { "float32_t", NULL, sizeof(__pyx_t_5numpy_float32_t), { 0 }, 0, 'R', 0, 0 };
static const __Pyx_TypeInfo __Pyx_TypeInfo_unsigned_char = { "unsigned char", NULL, sizeof(unsigned char), { 0 }, 0, __PYX_IS_UNSIGNED(unsigned char) ? 'U' : 'I', __PYX_IS_UNSIGNED(unsigned char), 0 };
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "yt.geometry.particle_oct_container"
extern int __pyx_module_is_main_yt__geometry__particle_oct_container;
int __pyx_module_is_main_yt__geometry__particle_oct_container = 0;

/* Implementation of "yt.geometry.particle_oct_container" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_OSError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin___import__;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = ": ";
static const char __pyx_k_A[] = "\200A";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_Q[] = "\200\001\330\004\n\210+\220Q";
static const char __pyx_k_T[] = "T{";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_o[] = "o";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_r[] = "r";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_05[] = "05";
static const char __pyx_k__2[] = ".";
static const char __pyx_k__3[] = ">";
static const char __pyx_k__4[] = "'";
static const char __pyx_k__5[] = ")";
static const char __pyx_k__6[] = "^";
static const char __pyx_k__7[] = "";
static const char __pyx_k__8[] = ":";
static const char __pyx_k__9[] = "}";
static const char __pyx_k_cc[] = "cc";
static const char __pyx_k_fp[] = "fp";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_mi[] = "mi";
static const char __pyx_k_nc[] = "nc";
static const char __pyx_k_nm[] = "nm";
static const char __pyx_k_no[] = "no";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_oi[] = "oi";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_pb[] = "pb";
static const char __pyx_k_rc[] = "rc";
static const char __pyx_k_u8[] = "u8";
static const char __pyx_k_A_2[] = "\200A\330\010\t";
static const char __pyx_k_A_I[] = "\200A\330\010\014\210I\220\\\240\021\240'\250\027\260\001";
static const char __pyx_k_DLE[] = "DLE";
static const char __pyx_k_DRE[] = "DRE";
static const char __pyx_k__10[] = "(";
static const char __pyx_k__11[] = ",";
static const char __pyx_k__15[] = "()";
static const char __pyx_k__16[] = "|";
static const char __pyx_k__18[] = "?";
static const char __pyx_k_abc[] = "abc";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_and[] = " and ";
static const char __pyx_k_arr[] = "arr";
static const char __pyx_k_beg[] = "beg";
static const char __pyx_k_cmi[] = "cmi";
static const char __pyx_k_cur[] = "cur";
static const char __pyx_k_dds[] = "dds";
static const char __pyx_k_end[] = "end";
static const char __pyx_k_fid[] = "fid";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_got[] = " (got ";
static const char __pyx_k_grp[] = "grp";
static const char __pyx_k_ind[] = "ind";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_mi1[] = "mi1";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_ngz[] = "ngz";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_out[] = "out";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_ver[] = "ver";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_A_t1[] = "\200A\330\010\017\210t\2201";
static const char __pyx_k_File[] = "File";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_coct[] = "coct";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_exit[] = "__exit__";
static const char __pyx_k_file[] = "file";
static const char __pyx_k_func[] = "__func__";
static const char __pyx_k_h5py[] = "h5py";
static const char __pyx_k_hsml[] = "hsml";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_kind[] = "kind";
static const char __pyx_k_log2[] = "log2";
static const char __pyx_k_lpos[] = "lpos";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mask[] = "mask";
static const char __pyx_k_mm_d[] = "mm_d";
static const char __pyx_k_mm_g[] = "mm_g";
static const char __pyx_k_mm_s[] = "mm_s";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_ndst[] = "ndst";
static const char __pyx_k_next[] = "next";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_ppos[] = "ppos";
static const char __pyx_k_root[] = "root";
static const char __pyx_k_rpos[] = "rpos";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_solf[] = "solf";
static const char __pyx_k_sort[] = "sort";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_void[] = "void";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_A_IWA[] = "\200A\330\010\014\210I\220W\230A";
static const char __pyx_k_A_t9L[] = "\200A\330\010\017\210t\2209\230L\250\001\250\027\260\001";
static const char __pyx_k_A_t9M[] = "\200A\340\010\017\210t\2209\230M\250\021\250!";
static const char __pyx_k_A_t_0[] = "\200A\360\010\000\t\020\210t\320\0230\260\001\260\021";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_at_0x[] = " at 0x";
static const char __pyx_k_attrs[] = "attrs";
static const char __pyx_k_bcoll[] = "bcoll";
static const char __pyx_k_check[] = "check";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_clear[] = "clear";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_cmask[] = "cmask";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_croot[] = "croot";
static const char __pyx_k_dmask[] = "dmask";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_enter[] = "__enter__";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_fmask[] = "fmask";
static const char __pyx_k_fname[] = "fname";
static const char __pyx_k_gmask[] = "gmask";
static const char __pyx_k_ifile[] = "ifile";
static const char __pyx_k_ind64[] = "ind64";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_int64[] = "int64";
static const char __pyx_k_level[] = "level";
static const char __pyx_k_mask2[] = "mask2";
static const char __pyx_k_mm_g0[] = "mm_g0";
static const char __pyx_k_mm_s0[] = "mm_s0";
static const char __pyx_k_n_ref[] = "n_ref";
static const char __pyx_k_nfile[] = "nfile_";
static const char __pyx_k_nroot[] = "nroot";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_pos32[] = "pos32";
static const char __pyx_k_pos64[] = "pos64";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_sbbox[] = "sbbox";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_uint8[] = "uint8";
static const char __pyx_k_units[] = "units";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_where[] = "where";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_A_t9G1[] = "\200A\330\010\017\210t\2209\230G\2401";
static const char __pyx_k_A_t_AU[] = "\200A\360\016\000\t\020\210t\320\023,\250A\250U\260&\270\001";
static const char __pyx_k_astype[] = "astype";
static const char __pyx_k_bitmap[] = "bitmap";
static const char __pyx_k_counts[] = "counts";
static const char __pyx_k_dfiles[] = "_dfiles";
static const char __pyx_k_double[] = "double";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_extend[] = "extend";
static const char __pyx_k_finish[] = "finish";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_gfiles[] = "gfiles";
static const char __pyx_k_gmask2[] = "gmask2";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_irflag[] = "irflag";
static const char __pyx_k_isfile[] = "isfile";
static const char __pyx_k_it_mi1[] = "it_mi1";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_little[] = "little";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_nfiles[] = "nfiles";
static const char __pyx_k_object[] = " object>";
static const char __pyx_k_octree[] = "octree";
static const char __pyx_k_order1[] = "order1";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_sfiles[] = "sfiles";
static const char __pyx_k_signed[] = "signed";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_uint32[] = "uint32";
static const char __pyx_k_uint64[] = "uint64";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_A_d_q_q[] = "\200A\340\010\016\210d\220)\230=\250\001\250\036\260q\330\010\017\210q";
static const char __pyx_k_A_t9L_2[] = "\200A\340\010\017\210t\2209\230L\250\001\250\021";
static const char __pyx_k_A_t9N_1[] = "\200A\340\010\017\210t\2209\230N\250!\2501";
static const char __pyx_k_OSError[] = "OSError";
static const char __pyx_k_argsort[] = "argsort";
static const char __pyx_k_arr_any[] = "arr_any";
static const char __pyx_k_arr_two[] = "arr_two";
static const char __pyx_k_bitsize[] = "bitsize";
static const char __pyx_k_cmask_g[] = "cmask_g";
static const char __pyx_k_cmask_s[] = "cmask_s";
static const char __pyx_k_cur_ind[] = "cur_ind";
static const char __pyx_k_dataset[] = "dataset";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_file_id[] = "file_id";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_get_DLE[] = "get_DLE";
static const char __pyx_k_get_DRE[] = "get_DRE";
static const char __pyx_k_in_coll[] = "_in_coll";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_mi_root[] = "mi_root";
static const char __pyx_k_nsub_mi[] = "nsub_mi";
static const char __pyx_k_sub_mi1[] = "sub_mi1";
static const char __pyx_k_sub_mi2[] = "sub_mi2";
static const char __pyx_k_tobytes[] = "tobytes";
static const char __pyx_k_verbose[] = "verbose";
static const char __pyx_k_visitor[] = "visitor";
static const char __pyx_k_7_Q_Qd_q[] = "\320\004(\250\001\330\010\013\2107\220#\220Q\330\014\025\220Q\220d\230!\330\010\027\320\027(\250\001\250\026\250q";
static const char __pyx_k_A_4_Qa_q[] = "\200A\360\n\000\t\024\2204\220~\240Q\240a\330\010\017\210q";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_File_03d[] = "File: %03d";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_Sequence[] = "Sequence";
static const char __pyx_k_add_note[] = "add_note";
static const char __pyx_k_arr_swap[] = "arr_swap";
static const char __pyx_k_arr_view[] = "arr_view";
static const char __pyx_k_defaults[] = "defaults";
static const char __pyx_k_file_idx[] = "file_idx";
static const char __pyx_k_finalize[] = "finalize";
static const char __pyx_k_get_pbar[] = "get_pbar";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_iter_end[] = "iter_end";
static const char __pyx_k_iter_set[] = "iter_set";
static const char __pyx_k_max_hsml[] = "max_hsml";
static const char __pyx_k_num_root[] = "num_root";
static const char __pyx_k_object_2[] = "object";
static const char __pyx_k_oct_mask[] = "oct_mask";
static const char __pyx_k_periodic[] = "periodic";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_register[] = "register";
static const char __pyx_k_selector[] = "selector";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_slct_arr[] = "slct_arr";
static const char __pyx_k_to_bytes[] = "to_bytes";
static const char __pyx_k_yt_funcs[] = "yt.funcs";
static const char __pyx_k_A_t9F_4_A[] = "\200A\330\010\017\210t\2209\230F\240!\2404\240}\260A";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_base_mask[] = "base_mask";
static const char __pyx_k_data_file[] = "data_file";
static const char __pyx_k_domain_id[] = "domain_id";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_ewah_base[] = "ewah_base";
static const char __pyx_k_ewah_slct[] = "ewah_slct";
static const char __pyx_k_file_hash[] = "file_hash";
static const char __pyx_k_file_list[] = "file_list";
static const char __pyx_k_fill_bool[] = "_fill_bool";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_left_edge[] = "left_edge";
static const char __pyx_k_masklevel[] = "masklevel";
static const char __pyx_k_max_level[] = "max_level";
static const char __pyx_k_nbitmasks[] = "nbitmasks";
static const char __pyx_k_num_zones[] = "num_zones";
static const char __pyx_k_overwrite[] = "overwrite";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_read_flag[] = "read_flag";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_A_t_1_12_1[] = "\200A\360\020\000\t\020\210t\320\0231\260\021\260)\2701\3302;\2701";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_arr_totref[] = "arr_totref";
static const char __pyx_k_arr_tottwo[] = "arr_tottwo";
static const char __pyx_k_collisions[] = "collisions";
static const char __pyx_k_data_files[] = "data_files";
static const char __pyx_k_domain_ind[] = "domain_ind";
static const char __pyx_k_file_idx_g[] = "file_idx_g";
static const char __pyx_k_file_idx_p[] = "file_idx_p";
static const char __pyx_k_file_masks[] = "file_masks";
static const char __pyx_k_fill_masks[] = "fill_masks";
static const char __pyx_k_find_files[] = "find_files";
static const char __pyx_k_index_root[] = "index_root";
static const char __pyx_k_io_handler[] = "io_handler";
static const char __pyx_k_mask2files[] = "mask2files";
static const char __pyx_k_morton_ind[] = "morton_ind";
static const char __pyx_k_nprev_octs[] = "nprev_octs";
static const char __pyx_k_print_info[] = "print_info";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_right_edge[] = "right_edge";
static const char __pyx_k_root_count[] = "root_count";
static const char __pyx_k_serial_BAC[] = "serial_BAC";
static const char __pyx_k_update_mi2[] = "update_mi2";
static const char __pyx_k_vec_totref[] = "vec_totref";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_addfile_idx[] = "addfile_idx";
static const char __pyx_k_base_pcount[] = "base_pcount";
static const char __pyx_k_code_length[] = "code_length";
static const char __pyx_k_count_total[] = "count_total";
static const char __pyx_k_exceeds_max[] = ") exceeds max (";
static const char __pyx_k_file_mask_g[] = "file_mask_g";
static const char __pyx_k_file_mask_p[] = "file_mask_p";
static const char __pyx_k_periodicity[] = "periodicity";
static const char __pyx_k_sfiles_view[] = "sfiles_view";
static const char __pyx_k_A_1Bha_r_q_1[] = "\200A\330\010\016\320\016!\240\024\240[\260\013\2701\270B\270h\300a\330\010\017\210r\220\026\220q\230\003\2301";
static const char __pyx_k_A_A_0_t1_1_q[] = "\200A\360\010\000\t*\320)<\270A\340\010\032\320\0320\260\001\260\031\270%\270t\3001\330\010\027\220{\240!\2401\330\010\017\210q";
static const char __pyx_k_A_E_Y_q_L_t1[] = "\200A\360\010\000'(\340\010\014\210E\220\024\220Y\320\036/\250q\260\004\260L\300\001\330\010\017\210t\2201";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_apply_domain[] = "apply_domain";
static const char __pyx_k_count_coarse[] = "count_coarse";
static const char __pyx_k_create_group[] = "create_group";
static const char __pyx_k_get_bitmasks[] = "get_bitmasks";
static const char __pyx_k_index_order1[] = "index_order1";
static const char __pyx_k_index_order2[] = "index_order2";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_iseq_bitmask[] = "iseq_bitmask";
static const char __pyx_k_level_counts[] = "level_counts";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_total_pcount[] = "total_pcount";
static const char __pyx_k_A_IU_4q_AWM_1[] = "\200A\340\010\014\210I\220U\230!\2304\230q\330\014\020\220\t\230\033\240A\240W\250M\270\022\2701";
static const char __pyx_k_MemoryView_of[] = "<MemoryView of ";
static const char __pyx_k_allocate_root[] = "allocate_root";
static const char __pyx_k_arguments_got[] = " arguments, got ";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_clear_fileind[] = "clear_fileind";
static const char __pyx_k_coarse_ghosts[] = "coarse_ghosts";
static const char __pyx_k_count_refined[] = "count_refined";
static const char __pyx_k_domain_counts[] = "domain_counts";
static const char __pyx_k_files_touched[] = "files_touched";
static const char __pyx_k_in_collection[] = "in_collection";
static const char __pyx_k_load_bitmasks[] = "load_bitmasks";
static const char __pyx_k_mask_to_files[] = "mask_to_files";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_save_bitmasks[] = "save_bitmasks";
static const char __pyx_k_selector2mask[] = "selector2mask";
static const char __pyx_k_selector_mask[] = "selector_mask";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_ParticleBitmap[] = "ParticleBitmap";
static const char __pyx_k_check_bitmasks[] = "check_bitmasks";
static const char __pyx_k_create_dataset[] = "create_dataset";
static const char __pyx_k_mask2filemasks[] = "mask2filemasks";
static const char __pyx_k_mask_threshold[] = "mask_threshold";
static const char __pyx_k_masks_to_files[] = "masks_to_files";
static const char __pyx_k_out_collection[] = "out_collection";
static const char __pyx_k_reset_bitmasks[] = "reset_bitmasks";
static const char __pyx_k_A_0_E_Y_7q_L_t1[] = "\200A\360\010\000/0\340\010\014\210E\220\024\220Y\320\0367\260q\270\004\270L\310\001\330\010\017\210t\2201";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_bitmask_version[] = "_bitmask_version";
static const char __pyx_k_collections_abc[] = "collections.abc";
static const char __pyx_k_count_threshold[] = "count_threshold";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_find_collisions[] = "find_collisions";
static const char __pyx_k_get_ghost_zones[] = "get_ghost_zones";
static const char __pyx_k_get_periodicity[] = "get_periodicity";
static const char __pyx_k_morton_selector[] = "morton_selector";
static const char __pyx_k_primary_indices[] = "primary_indices";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_total_particles[] = "total_particles";
static const char __pyx_k_allocate_domains[] = "allocate_domains";
static const char __pyx_k_construct_octree[] = "construct_octree";
static const char __pyx_k_convert_to_units[] = "convert_to_units";
static const char __pyx_k_domain_left_edge[] = "domain_left_edge";
static const char __pyx_k_max_index_order2[] = "max_index_order2";
static const char __pyx_k_A_A_E_Y_6at_QR_t1[] = "\200A\360\010\000.A\001\300\001\340\010\014\210E\220\024\220Y\320\0366\260a\260t\270=\310\t\320QR\330\010\017\210t\2201";
static const char __pyx_k_Expected_at_least[] = "Expected at least ";
static const char __pyx_k_No_root_found_for[] = "No root found for {},{},{}";
static const char __pyx_k_bitmask_version_2[] = "bitmask_version";
static const char __pyx_k_domain_dimensions[] = "domain_dimensions";
static const char __pyx_k_domain_right_edge[] = "domain_right_edge";
static const char __pyx_k_find_contaminated[] = "find_contaminated";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_recursively_count[] = "recursively_count";
static const char __pyx_k_yield_coordinates[] = "_yield_coordinates";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_bitmask_intersects[] = "_bitmask_intersects";
static const char __pyx_k_bitmask_logicaland[] = "_bitmask_logicaland";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_coarse_ghosts_list[] = "coarse_ghosts_list";
static const char __pyx_k_coarse_select_list[] = "coarse_select_list";
static const char __pyx_k_filemasks2addfiles[] = "filemasks2addfiles";
static const char __pyx_k_fused_sigindex_ref[] = "_fused_sigindex_ref";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_characteristic_size[] = "characteristic_size";
static const char __pyx_k_file_ownership_mask[] = "file_ownership_mask";
static const char __pyx_k_find_uncontaminated[] = "find_uncontaminated";
static const char __pyx_k_get_index_base_octs[] = "get_index_base_octs";
static const char __pyx_k_identify_data_files[] = "identify_data_files";
static const char __pyx_k_identify_file_masks[] = "identify_file_masks";
static const char __pyx_k_A_b_as_E_aq_q_T_1A_q[] = "\200A\360\006\000\t\017\210b\220\006\220a\220s\230&\240\001\330\010\014\210E\220\025\220a\220q\330\014\017\210q\220\005\220T\230\032\2401\240A\330\010\017\210q";
static const char __pyx_k_A_b_as_E_aq_q_T_AQ_q[] = "\200A\360\006\000\t\017\210b\220\006\220a\220s\230&\240\001\330\010\014\210E\220\025\220a\220q\330\014\017\210q\220\005\220T\230\033\240A\240Q\330\010\017\210q";
static const char __pyx_k_ParticleBitmap_check[] = "ParticleBitmap.check";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_A_A_M_A_q_A_7q_vQ_q_s[] = "\200A\360\030\000@\001A\001\330=>\330\010\014\210M\230\021\330\010\013\210>\230\023\230A\330\014\034\320\034/\250q\330\010,\250A\330\010\031\230\024\320\0357\260q\270\n\300%\300v\310Q\330.?\270q\330\010\017\210s\220!";
static const char __pyx_k_Invalid_shape_in_axis[] = "Invalid shape in axis ";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_A_c_Qaq_Cy_q_T_q_gQa_q[] = "\200A\360\n\000\t\027\220c\230\021\230+\240Q\240a\240q\330\010\014\210C\210y\230\t\240\021\240!\330\014\027\220q\230\005\230T\240\036\250q\260\006\260g\270Q\270a\330\010\017\210q";
static const char __pyx_k_A_r_Ql_A_b_avYb_q_s_4s[] = "\200A\330\010\037\230r\240\024\240Q\240l\260\"\260A\330\010\016\210b\220\006\220a\220v\230Y\240b\250\001\330\010\014\320\014!\240\021\240%\240q\330\010\017\210s\220!\2204\220s\230!";
static const char __pyx_k_Cannot_index_with_type[] = "Cannot index with type '";
static const char __pyx_k_Index_not_found_in_the[] = "Index not found in the ";
static const char __pyx_k_Loading_particle_index[] = "Loading particle index";
static const char __pyx_k_ParticleBitmapSelector[] = "ParticleBitmapSelector";
static const char __pyx_k_ParticleBitmap_get_DLE[] = "ParticleBitmap.get_DLE";
static const char __pyx_k_ParticleBitmap_get_DRE[] = "ParticleBitmap.get_DRE";
static const char __pyx_k_coarse_index_data_file[] = "_coarse_index_data_file";
static const char __pyx_k_find_collisions_coarse[] = "find_collisions_coarse";
static const char __pyx_k_is_negative_with_value[] = " is negative with value ";
static const char __pyx_k_ParticleBitmap_finalize[] = "ParticleBitmap.finalize";
static const char __pyx_k_ParticleOctreeContainer[] = "ParticleOctreeContainer";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_find_collisions_refined[] = "find_collisions_refined";
static const char __pyx_k_refined_index_data_file[] = "_refined_index_data_file";
static const char __pyx_k_A_F_G_a_a_0_6_Q_9A_t_9Ky[] = "\200A\360\006\000F\001G\001\330\010+\320+>\270a\330\010+\320+>\270a\360\006\000\t\033\320\0320\260\001\260\032\2706\300\024\300Q\330\010\027\220{\240!\2409\250A\330\010\017\210t\220?\240!\2409\250K\260y\300\001";
static const char __pyx_k_Dimension_d_is_not_direct[] = "Dimension %d is not direct";
static const char __pyx_k_ParticleBitmap_mask2files[] = "ParticleBitmap.mask2files";
static const char __pyx_k_ParticleBitmap_print_info[] = "ParticleBitmap.print_info";
static const char __pyx_k_ParticleBitmap_update_mi2[] = "ParticleBitmap.update_mi2";
static const char __pyx_k_max_hsml_not_found_in_the[] = "'max_hsml' not found in the ";
static const char __pyx_k_Index_out_of_bounds_axis_d[] = "Index out of bounds (axis %d)";
static const char __pyx_k_ParticleBitmap_count_total[] = "ParticleBitmap.count_total";
static const char __pyx_k_set_coarse_index_data_file[] = "_set_coarse_index_data_file";
static const char __pyx_k_No_matching_signature_found[] = "No matching signature found";
static const char __pyx_k_ParticleBitmap_count_coarse[] = "ParticleBitmap.count_coarse";
static const char __pyx_k_ParticleBitmap_get_bitmasks[] = "ParticleBitmap.get_bitmasks";
static const char __pyx_k_ParticleBitmap_iseq_bitmask[] = "ParticleBitmap.iseq_bitmask";
static const char __pyx_k_ParticleOctreeContainer_add[] = "ParticleOctreeContainer.add";
static const char __pyx_k_Step_may_not_be_zero_axis_d[] = "Step may not be zero (axis %d)";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_set_refined_index_data_file[] = "_set_refined_index_data_file";
static const char __pyx_k_Index_for_a_softening_region[] = "Index for a softening region (";
static const char __pyx_k_ParticleBitmap_count_refined[] = "ParticleBitmap.count_refined";
static const char __pyx_k_ParticleBitmap_load_bitmasks[] = "ParticleBitmap.load_bitmasks";
static const char __pyx_k_ParticleBitmap_mask_to_files[] = "ParticleBitmap.mask_to_files";
static const char __pyx_k_ParticleBitmap_save_bitmasks[] = "ParticleBitmap.save_bitmasks";
static const char __pyx_k_ParticleBitmap_selector2mask[] = "ParticleBitmap.selector2mask";
static const char __pyx_k_Total_of_s_s_collisions_3_5f[] = "Total of %s / %s collisions (% 3.5f%%)";
static const char __pyx_k_A_9_2_F_Bd_nTVVZZ_a_I_AWF_A_q[] = "\200A\360\n\0009:\330\0102\260\"\260F\270\"\270B\270d\300$\300n\320TV\320VZ\320Z[\330\010&\240a\330\010\014\210I\320\025,\250A\250W\260F\270*\300A\330\010\017\210q";
static const char __pyx_k_Child_was_already_initialized[] = "Child was already initialized...";
static const char __pyx_k_ParticleBitmapOctreeContainer[] = "ParticleBitmapOctreeContainer";
static const char __pyx_k_ParticleBitmap_check_bitmasks[] = "ParticleBitmap.check_bitmasks";
static const char __pyx_k_ParticleBitmap_mask2filemasks[] = "ParticleBitmap.mask2filemasks";
static const char __pyx_k_ParticleBitmap_masks_to_files[] = "ParticleBitmap.masks_to_files";
static const char __pyx_k_ParticleBitmap_reset_bitmasks[] = "ParticleBitmap.reset_bitmasks";
static const char __pyx_k_Smoothing_length_for_particle[] = "Smoothing length for particle ";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_4A_DA_5_1_5_1_k_LXY_d_B_9ARvUV[] = "\320\0044\260A\330.D\300A\330\010\013\2105\220\003\2201\330\014\023\2205\230\001\320\0311\260\025\260k\300\021\300*\310L\320XY\340\010*\320*>\270d\300!\330\010,\320,B\300!\3009\310A\310R\310v\320UV\330\010,\320,B\300!\3009\310A\310R\310t\320ST\340\010\023\2202\220V\2301\230D\240\010\250\001\360\006\000\t\020\210v\220Q\330\010\016\210h\220a\220s\230#\230X\240Q\240a\330\014\021\220\033\230A\230X\240Q\240a\330\014\020\220\004\220O\2401\240L\260\001\330\014\017\210r\220\023\220A\330\020\036\230a\230z\250\021\330\020\030\230\001\330\014\023\2201\330\014\030\230\001\230\030\240\021\240!\360\006\000\t\017\210b\220\006\220a\220t\2308\2409\250B\250a\340\010\036\320\036.\250a\250v\260Q\330\010\017\210}\230A\330\010\017\210|\2301\330\010\014\210O\2301\230J\240a\330\010\017\210q";
static const char __pyx_k_ParticleBitmap___reduce_cython[] = "ParticleBitmap.__reduce_cython__";
static const char __pyx_k_ParticleBitmap_find_collisions[] = "ParticleBitmap.find_collisions";
static const char __pyx_k_ParticleBitmap_get_ghost_zones[] = "ParticleBitmap.get_ghost_zones";
static const char __pyx_k_ParticleBitmap_primary_indices[] = "ParticleBitmap.primary_indices";
static const char __pyx_k_ParticleOctreeContainer___iter[] = "ParticleOctreeContainer.__iter__";
static const char __pyx_k_coarse_index_data_file_ndarray[] = "_coarse_index_data_file[ndarray,ndarray]";
static const char __pyx_k_q_Q_L_a_1D_Ja_E_at3aq_U_4s_1_E[] = "\320\004'\240q\360\n\000\t\036\230Q\330\010\014\210L\230\010\240\006\240a\240|\2601\260D\270\001\330\010\034\230J\240a\360\006\000\t\r\210E\220\025\220a\220t\2303\230a\230q\330\014\020\220\005\220U\230!\2304\230s\240!\2401\330\020\024\220E\230\025\230a\230t\2403\240a\240q\330\024\030\230\r\240Q\240d\250*\260A\260R\260q\270\002\270!\2704\270q\300\001\330&)\250\021\250!\330\010\017\210u\220C\220t\2301\330\010\014\210E\220\025\220a\220t\2301\330\014\020\220\t\230\021\230\"\230N\250!\330\014\020\220\t\230\021\230\"\230J\240a\330\010\014\210M\230\021";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_A_34_WF_1_T_Q_fA_O6_d_A_WAU_z_4[] = "\200A\360\010\00034\360\010\000\t\032\230\021\330\010\035\230W\240F\250!\2501\360\010\000\t\036\230T\240\021\360\014\000\t&\240Q\340\010\016\210f\220A\330\010\014\210O\2306\240\021\330\010\016\210d\220\"\220A\340\014\022\220!\330\014\025\220W\230A\230U\240%\240z\260\022\2604\260~\300Q\300a\330\014\023\2204\220r\230\024\230U\240&\250\004\250G\2601\260E\270\025\270j\310\002\310$\310n\320\\]\320]^\330\020\027\220q\340\014\037\230q\240\007\240q\330\014\020\220\005\220U\230!\2301\330\020\023\2201\220E\230\025\230a\230q\330\014\023\220;\230b\240\004\240K\250q\330\023\027\220|\2401\240E\250\023\250D\260\013\2701\270K\300q\330\020\036\230a\330\014\017\210{\230#\230T\240\021\330\020\026\220i\230q\320 <\270G\3001\300C\300q\310\003\3103\310a\310s\320RU\320UV\320VW\330\014\023\2204\220{\240!\240;\250a\360\010\000\r\021\220\014\230A\340\014\020\220\004\220B\220e\2302\230T\240\021\330\020\035\230Q\330\020\024\220J\230a\330\020\024\220N\240!\2406\250\027\260\001\260\024\260V\2704\270}\310A\310Q\330#$\240K\250{\270!\2701\330\020\024\220O\2401\240N\260-\270q\330\010\014\210M\230\021\330\010\017\210t\2207\230#\230R\230t\2401\240D\250\001";
static const char __pyx_k_A_E_at3aq_U_4s_1_E_at3aq_m1_2Qb[] = "\200A\360\006\000\t\r\210E\220\025\220a\220t\2303\230a\230q\330\014\020\220\005\220U\230!\2304\230s\240!\2401\330\020\024\220E\230\025\230a\230t\2403\240a\240q\330\024\032\230$\230m\2501\330\024\030\230\n\240!\2402\240Q\240b\250\001\250\025\250a";
static const char __pyx_k_A_Qa_d_Qj_v_E_at1_s_3b_1_Ja_Q_e[] = "\200A\340\010'\240~\260Q\260a\330\010\016\210d\220+\230Q\230j\250\007\250v\260\\\300\021\330\010\014\210E\220\025\220a\220t\2301\330\014\017\210s\220!\2203\220b\230\003\2301\330\014\020\220\t\230\021\230\"\230J\240a\330\010\r\210Q\320\016&\240e\250;\260a\260z\300\034\310Q";
static const char __pyx_k_A_b_Q_E_aq_q_T_Qa_q_T_Qc_4t1A_E[] = "\200A\360\010\000\t!\240\001\340\010\016\210b\220\r\230Q\360\006\000\t\r\210E\220\025\220a\220q\330\014\017\210q\220\005\220T\230\024\230Q\230a\330\014\017\210q\220\005\220T\230\024\230Q\230c\240\022\2404\240t\2501\250A\340\010\014\210E\220\025\220a\220t\2301\330\014\020\220\014\230A\230U\240+\250Q\250a\330\014\020\220\014\230A\230U\240+\250Q\250a\340\010\014\320\014#\2401\240G\2505\260\005\260Q\340\010\014\210E\220\025\220a\220t\2301\330\014\027\220q\230\005\230T\240\034\250Q\250a\330\014\017\210{\230!\2301\330\020\033\2301\230E\240\021\340\020\033\2301\230E\240\024\240\\\260\021\260!";
static const char __pyx_k_A_ha_Cq_A_IU_4q_t9Kq_aq_j_Q_Zxq[] = "\200A\360\014\000\t\027\220h\230a\340\010\024\220C\220q\230\004\230A\340\010\014\210I\220U\230!\2304\230q\330\014\023\320\023'\240t\2509\260K\270q\300\006\300a\300q\330\014\026\220j\240\001\240\024\240Q\340\010\025\220Z\230x\240q\330\010\021\220\032\2306\240\021\330\010\016\210g\220S\230\n\240$\240a\330\014\022\220+\230Q\230a\330\014\023\2206\230\021\330\014\023\2206\230\021\330\014\020\220\t\230\025\230a\230q\330\020\023\2204\220y\240\007\240q\250\007\250u\260C\260q\330\024\033\320\033A\300\024\300Y\310k\320YZ\320Z`\320`a\320ac\320cd\320de\330\024\033\230;\240a\240u\250A\330\024\033\230:\240Q\240e\2501\330\024\036\230a\330\024\033\230:\240Q\240k\260\021\330\014\022\220*\230M\250\021\330\014\022\220'\230\035\240a\330\014\030\230\001\230\021\360\006\000\t\017\320\0167\260s\270$\270d\300%\300q\310\005\310Q\310c\320QR\320RS";
static const char __pyx_k_Na_b_Q_E_aq_1E_q_T_Qa_q_T_Qc_4t[] = "\320\004N\310a\360\006\000\t!\240\001\340\010\016\210b\220\r\230Q\360\010\000\t\r\210E\220\025\220a\220q\330\014\023\2201\220E\230\021\330\014\017\210q\220\005\220T\230\024\230Q\230a\330\014\017\210q\220\005\220T\230\024\230Q\230c\240\022\2404\240t\2501\250A\330\010\013\2105\220\003\2201\330\014\023\320\023&\240a\360\010\000\t\021\220\r\230Q\230d\240%\240t\2501\330\010\020\220\r\230Q\230d\240%\240t\2501\360\006\000\t\r\210E\220\025\220a\220q\330\014\020\220\001\220\025\220d\230$\230a\230s\240\"\240D\250\007\250x\260q\270\002\270!\2701\330\010\020\220\004\220I\320\035.\250a\250u\260A\330\010\013\2106\220\023\220A\330\014\020\220\007\220u\230A\230]\250$\250a\330\020\025\220\\\240\021\240!\330\014\021\220\032\2301\230A\330\014\r\340\014\020\320\020&\240a\240w\250e\2605\270\005\270Q\340\010\014\320\014\034\230A\230W\240A\330\010\014\320\014\035\230Q\230g\240Q\330\010\014\320\014\035\230Q\230g\240Q\340\010\r\210Z\220q\230\001\330\010\r\210Z\220q\230\001";
static const char __pyx_k_Oct_container_tuned_for_Particl[] = "\nOct container tuned for Particles\n\n\n\n";
static const char __pyx_k_ParticleBitmapOctreeContainer_2[] = "ParticleBitmapOctreeContainer.__reduce_cython__";
static const char __pyx_k_ParticleBitmapOctreeContainer_3[] = "ParticleBitmapOctreeContainer.__setstate_cython__";
static const char __pyx_k_ParticleBitmapSelector___reduce[] = "ParticleBitmapSelector.__reduce_cython__";
static const char __pyx_k_ParticleBitmap_construct_octree[] = "ParticleBitmap.construct_octree";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_refined_index_data_file_ndarray[] = "_refined_index_data_file[ndarray,ndarray]";
static const char __pyx_k_A23_4_A_4q_E_aq_t81Cr_6a_a_4q_AT[] = "\200A\33023\360\030\000\t\014\2104\210{\230\"\230A\330\014\023\2204\220q\330\010(\250\001\330\010\014\210E\220\025\220a\220q\340\014\017\210t\2208\2301\230C\230r\320!6\260a\330\014\036\230a\230~\250^\2704\270q\300\004\300A\300T\310\030\320QR\320RU\320UW\320WX\330\010\027\220v\230Q\320\0360\260\001\330\010\014\210L\230\001\230\021\330\010\017\210t\2201";
static const char __pyx_k_A_1_E_aq_q_T_1A_q_T_AQ_m1_a_at4u[] = "\200A\360\014\000:;\360\032\000\t\034\2301\330\010\014\210E\220\025\220a\220q\330\014\017\210q\220\005\220T\230\032\2401\240A\330\014\017\210q\220\005\220T\230\033\240A\240Q\360\006\000\t\"\240\035\250m\2701\340\010\021\320\021.\250a\330\r\021\220\025\220a\220t\2304\230u\240A\240T\250\024\250U\260!\2601\330\r\021\220\032\2301\230D\240\004\240J\250a\250t\2604\260z\300\021\300!\330\r\021\220\033\230A\230T\240\024\240[\260\001\260\024\260T\270\033\300A\300Q\330\014\023\2201\330\010\016\210i\220u\230H\240A\330\010\016\320\016\036\230d\240!\330\010\016\320\016\037\230q\340\010!\240\021\330\010*\320*>\270m\3101\340\010\013\210:\220W\230A\330\014\030\320\030,\250I\260Q\340\014\030\230\001\330\010,\320,B\300!\3009\310A\310R\310v\320UV\330\010,\320,B\300!\3009\310A\310R\310t\320ST\340\010\023\2202\220V\2302\230R\230t\2404\240~\260R\260t\2701\330\010\016\210h\220a\220s\230#\230X\240Q\240a\330\014\021\220\033\230A\230X\240Q\240a\330\014\017\210z\230\023\230E\240\024\240Y\250a\250r\260\024\260Q\260d\270#\270Q\330\020\026\320\026(\250\001\250\031\260!\330\020\030\230\001\230\026\230q\340\020\030\230\001\230\026\230q\330\014\037\230q\240\004\240A\330\014\020\220\005\220U\230!\2301\330\020\023\2201\220E\230\025\230a\230q\330\014\022\220*\230A\230S\240\001\330\014\025\220Q\330\014\030\230\001\230\030\240\021\240!\330\010\017\210v\220S\230\001\330\010\013\210:\220S\230\001\330\014\023\2202\220T\230\021\230&\320 4\260C\260y\300\001\300\022\300=\320PQ\360\006\000\t\031\230\001\330\010\027\220q\330\010\014\210M\230\021\330\014\034\230C\230q\240\t\320)9\270\027\300\001\330\010\025\220R\220v\230Q\230n\250F\260!\330\010\027\220q\330\010'\240q\330\010\014\210M\230\021\340\014\020\220\007\220z\320!4\260A\260Q\330\020\030\230\010\240\001\330\020\032\230!\330\020\023\2203\220g\230S\240\002\240!\330\024\034\230A\330\024\036\230a\330\024\030\230\005\230U\240!\2403\240f\250A\250Q\330\030\034\230E\240\025\240a\240q\330\034 \240\001\240\025\240e\2501\250B\250a\330\030\035\230^\2501\250D\260\001""\260\024\260T\270\021\270$\270d\300!\3001\330,1\260\025\260a\330\030\"\240#\240T\250\021\250\"\250I\260Q\260d\270!\330\030\033\2308\2401\240I\250R\250q\330\034&\240a\320'7\260q\330\034,\250A\330\034\037\230x\240q\250\t\260\023\260A\330 /\250q\330\025\030\230\007\230s\240\"\240A\330\024\034\230A\330\024\036\230a\330\024\030\230\005\230U\240!\2403\240f\250A\250Q\330\030\034\230E\240\025\240a\240q\330\034 \240\001\240\025\240e\2501\250B\250a\330\030\035\230^\2501\250D\260\001\260\024\260T\270\021\270$\270d\300!\3001\330,1\260\025\260a\330\030\"\240#\240T\250\021\250\"\250I\260Q\260d\270!\330\030\033\2308\2401\240I\250R\250q\330\034&\240a\320'7\260q\330\034,\250A\330\034\037\230x\240q\250\t\260\023\260A\330 /\250q\340\024\032\230!\330\010\025\220Z\230r\240\021\330\010\022\220%\220q\330\010\016\210d\220!\220<\230t\2401\330\010\016\210i\220q\330\010\017\210q";
static const char __pyx_k_A_5P_q_7x_Oq_E_aq_q_XQa_6_A_q_4A[] = "\200A\360\010\0005P\001\310q\340\0107\260x\320?O\310q\360\006\000\t\r\210E\220\025\220a\220q\330\014\027\220q\230\005\230X\240Q\240a\330\010\013\2106\220\023\220A\330\014\024\320\024'\240q\330\014\025\320\025(\250\001\330\014\036\320\0364\260A\260Y\270e\3004\300q\330\014\033\230;\240a\240w\250a\330\010\020\320\020#\2401\330\010\r\320\r\036\230a\230u\240D\250\017\260t\2701\330\037,\250M\270\021\330\010\021\220\031\230$\230o\250Q\250g\260Q\330\010\016\320\016!\240\021\330\010\r\210[\230\001\230\027\240\001\330\010\017\210x\220q";
static const char __pyx_k_A_78_2_F_Bd_nTVVZZ_a_5RvQd_I_7_q[] = "\200A\360\n\00078\330\0102\260\"\260F\270\"\270B\270d\300$\300n\320TV\320VZ\320Z[\330\010&\240a\330\0105\260R\260v\270Q\270d\300(\310!\330\010)\250\021\330\010\014\210I\320\025*\250!\2507\260&\270\n\300-\310q\330\010\017\210u\220B\220f\230A\230W\240A\240R\240w\250a\250q";
static const char __pyx_k_A_A_0_6_Q_1_4_Qa_RvQa_2_T_e1Cq_A[] = "\200A\360\010\000\t*\320)<\270A\360\020\000\t\033\320\0320\260\001\260\032\2706\300\024\300Q\330\010\027\220{\240!\2401\340\010\023\2204\220~\240Q\240a\330\010\025\220R\220v\230Q\230a\320\0372\260#\260T\270\025\270e\3001\300C\300q\310\001\330\036$\240A\330\010\026\220c\230\021\230)\2401\240A\240Q\330\010\014\210D\220\005\220Z\230y\250\001\250\023\250A\250Y\260a\330\014\020\220\t\230\034\240Q\240n\260E\270\027\300\001\330\014\027\220q\230\005\230T\240\036\250q\260\006\260g\270Q\270a\330\010\017\210x\220w\230a\230{\250,\260a";
static const char __pyx_k_A_E_at3aq_U_4s_1_E_at3aq_AT_1Bar[] = "\200A\340\010\014\210E\220\025\220a\220t\2303\230a\230q\330\014\020\220\005\220U\230!\2304\230s\240!\2401\330\020\024\220E\230\025\230a\230t\2403\240a\240q\330\024\030\230\014\240A\240T\250\032\2601\260B\260a\260r\270\021\270!";
static const char __pyx_k_A_E_avV1E_E_at3aq_U_4s_1_E_at3aq[] = "\200A\360\010\000\t\r\210E\220\025\220a\220v\230V\2401\240E\250\021\330\010\014\210E\220\025\220a\220t\2303\230a\230q\330\014\020\220\005\220U\230!\2304\230s\240!\2401\330\020\024\220E\230\025\230a\230t\2403\240a\240q\330\024\027\220t\230:\240Q\240b\250\001\250\022\2501\250C\250s\260!\330\030\034\230F\240!\2404\240z\260\021\260\"\260A\260R\260q\270\004\270A\330\010\027\220q\330\010\014\210E\220\025\220a\220q\330\014\017\210v\220Q\220c\230\023\230C\230q\330\014\030\230\001\230\025\230f\240A\240Q\330\010\017\210q";
static const char __pyx_k_A_Q_b_at9F_IU_4q_7_Q_4_1G1_q_RvQ[] = "\200A\330\010!\240\024\240Q\360\006\000\t\027\220b\230\006\230a\230t\2409\250F\260!\340\010\014\210I\220U\230!\2304\230q\340\014\017\210{\230!\2307\240#\240Q\330\020\023\2204\220|\2401\240G\2501\330\024\037\230q\240\t\250\021\340\010\025\220R\220v\230Q\230l\250!\2502\250W\260A\260Q\330\010\017\210z\230\027\240\001\240\021";
static const char __pyx_k_A_Q_b_at9F_b_at9F_IU_4q_7_Q_4_1G[] = "\200A\330\010!\240\024\240Q\360\010\000\t\027\220b\230\006\230a\230t\2409\250F\260!\330\010\026\220b\230\006\230a\230t\2409\250F\260!\340\010\014\210I\220U\230!\2304\230q\340\014\017\210{\230!\2307\240#\240Q\330\020\023\2204\220|\2401\240G\2501\330\024\037\230q\240\t\250\021\330\024\037\230q\240\t\250\021\330\025\031\230\034\240Q\240g\250Q\330\024\037\230q\240\t\250\021\360\006\000\t\026\220R\220v\230Q\230l\250!\2502\250W\260A\260Q\330\010\025\220R\220v\230Q\230l\250!\2502\250W\260A\260Q\330\010\017\210z\230\027\240\001\240\033\250J\260g\270Q\270a";
static const char __pyx_k_A_Qa_Q_aq_O1Ja_Qb_Cwa_N_9K1DPQ_T[] = "\200A\340\010'\240~\260Q\260a\330\010\020\320\020!\240\024\240Q\340\010\036\320\036.\250a\250q\330\010\014\210O\2301\230J\240a\330\010\021\220\027\230\r\240Q\240b\250\001\250\027\260\004\260C\260w\270a\340\010\014\320\014$\240N\260&\270\001\3209K\3101\310D\320PQ\330\010\014\320\014 \240\r\250T\260\031\270$\270a\330\010%\240Q\340\010\014\210E\220\025\220a\220t\2301\330\014\020\320\020!\240\021\240,\250j\270\001\270\024\270_\310A\310W\320TX\320Xj\320jk\320kl\330\014\032\230$\230o\250Q\250a";
static const char __pyx_k_A_RvQa_2_T_e1Cq_A_D_Zy_AYa_QnE_q[] = "\200A\360\022\000\t\026\220R\220v\230Q\230a\320\0372\260#\260T\270\025\270e\3001\300C\300q\310\001\330\036$\240A\330\010\014\210D\220\005\220Z\230y\250\001\250\023\250A\250Y\260a\330\014\020\220\t\230\034\240Q\240n\260E\270\027\300\001\330\010\017\210q";
static const char __pyx_k_A_WF_1_4z_ARq_3fD_a_1_E_aq_A_G1A[] = "\200A\360\010\000 !\360\010\000\t\036\230W\240F\250!\2501\360\010\000\t\014\2104\210z\230\021\230\"\230A\230R\230q\240\003\2403\240f\250D\260\016\270a\330\010!\320!1\260\027\270\001\330\010\014\210E\220\025\220a\220q\360\006\000\r\025\220A\330\014\024\220G\2301\230A\330\014\017\210v\220S\230\001\360\006\000\021\022\340\014\020\220\005\220U\230!\2301\330\020\023\2201\220F\230&\240\005\240V\2502\250V\2601\260B\260c\270\022\2702\270U\300\"\300A\330\014\022\220$\220j\240\001\240\023\240A\240S\250\001\250\023\250A\250S\260\001\260\023\260A\260Q\330\014\017\210t\2203\220a\330\020\026\220a\360\010\000\r\024\2203\220j\240\002\240#\240R\240t\2501\330\020\023\2206\230\023\230G\2401\330\020\031\230\021\330\020\024\220E\230\025\230a\230q\330\024\027\220q\230\006\230f\240E\250\026\250r\260\026\260q\270\002\270#\270R\270r\300\025\300b\310\001\330\020\023\2203\220j\240\003\2405\250\001\330\023\026\220i\230q\240\004\240A\240S\250\001\250\023\250C\250q\260\003\2603\260a\260u\270C\270q\330\024\032\230$\230k\250\021\250%\250w\260g\270Q\330\024\030\320\030)\250\021\250%\250v\260S\270\007\270q\340\024\032\230#\230Y\240a\240t\2501\250C\250q\260\003\2603\260a\260s\270#\270Q\270a\360\010\000\r\020\210t\2207\230#\230Q\330\020\023\220<\230q\340\020\023\220=\240\001";
static const char __pyx_k_A_a_a_4r_gQa_awe81_b_AT_gQb_1_V1[] = "\200A\330\017\020\330\010\036\230a\360\006\000\t\037\230a\340\010\013\2104\210r\220\025\220g\230Q\230a\330\014\022\220!\330\r\021\220\025\220a\220w\230e\2408\2501\330\014\r\330\020\026\220b\230\001\230\023\230A\230T\240\021\330\023\024\330\020\026\220g\230Q\230b\320 ;\2701\340\014\022\220#\220V\2301\230A\330\014\r\330\020\033\2303\230f\240A\240Q\330\023\024\330\020\026\220g\230Q\230b\320 @\300\001\330\014\017\210t\2203\220d\230(\240$\240d\250#\250Q\330\020\034\230A\330\020\026\220a\330\014\017\210t\2203\220a\330\020\026\220g\230Q\230a\360\n\000\r\022\220\030\230\021\320\0324\260D\270\001\330\014\020\220\t\230\025\230a\230t\2401\330\020\022\220'\230\021\230%\230q\240\001\330\020\031\230\024\230Y\240g\250Q\250g\260S\270\001\270\022\270:\300X\310Q\310d\320RZ\320Z[\330\020\023\2207\230#\230Q\330\024 \240\001\330\014\016\210g\220Q\340\014\025\220T\230\033\240G\2501\250C\250q\260\r\270Q\270d\300(\310!\330\014\017\210w\220c\230\021\330\020\034\230A\360\006\000\t\014\210:\220S\230\001\330\014\020\220\016\230a\230w\240a\330\010\017\210{\230!";
static const char __pyx_k_A_awe81_b_AT_6_b_Qc_a_vQ_1_vQl_a[] = "\200A\330\017\020\360\006\000\016\022\220\025\220a\220w\230e\2408\2501\330\014\r\330\020\026\220b\230\001\230\023\230A\230T\240\021\330\020\023\2206\230\021\330\023\024\330\020\026\220b\230\r\240Q\240c\250\021\250$\250a\340\014\017\210v\220Q\320\026+\2501\330\014\017\210v\220Q\220l\240$\240a\330\014\017\210v\220Q\220n\240A\340\014\017\210v\220Q\220o\240T\250\021\330\014\017\210v\220Q\220o\240T\250\021\330\014\017\210v\220Q\320\026&\240d\250!\330\014\017\210v\220Q\320\026'\240t\2501\330\014\017\210v\220Q\320\026(\250\004\250A\330\014\017\210v\220Q\320\026(\250\004\250A\340\014\020\220\t\230\025\230a\230t\2401\330\020\035\230T\240\031\250'\260\021\260!\330\020\023\220?\240!\2402\240Z\250y\270\005\270R\270u\300A\300Q\330\014\031\230\024\230[\250\007\250q\330\014\017\210\230a\230~\250U\260\"\260E\270\021\270!";
static const char __pyx_k_All_dimensions_preceding_dimensi[] = "All dimensions preceding dimension %d must be indexed and not sliced";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Cannot_transpose_memoryview_with[] = "Cannot transpose memoryview with indirect dimensions";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Function_call_with_ambiguous_arg[] = "Function call with ambiguous argument types";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got ";
static const char __pyx_k_Note_that_Cython_is_deliberately[] = "Note that Cython is deliberately stricter than PEP-484 and rejects subclasses of builtin types. If you need to pass subclasses then set the 'annotation_typing' directive to False.";
static const char __pyx_k_Octree_does_not_have_roots_along[] = "Octree does not have roots along dimension {} in a power of 2 ";
static const char __pyx_k_Octree_must_have_the_same_number[] = "Octree must have the same number of roots in each dimension for this.";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis ";
static const char __pyx_k_ParticleBitmapOctreeContainer_ad[] = "ParticleBitmapOctreeContainer.add";
static const char __pyx_k_ParticleBitmapOctreeContainer_al[] = "ParticleBitmapOctreeContainer.allocate_domains";
static const char __pyx_k_ParticleBitmapOctreeContainer_fi[] = "ParticleBitmapOctreeContainer.finalize";
static const char __pyx_k_ParticleBitmapOctreeContainer_ge[] = "ParticleBitmapOctreeContainer.get_index_base_octs";
static const char __pyx_k_ParticleBitmapSelector___setstat[] = "ParticleBitmapSelector.__setstate_cython__";
static const char __pyx_k_ParticleBitmapSelector_fill_mask[] = "ParticleBitmapSelector.fill_masks";
static const char __pyx_k_ParticleBitmapSelector_find_file[] = "ParticleBitmapSelector.find_files";
static const char __pyx_k_ParticleBitmap___setstate_cython[] = "ParticleBitmap.__setstate_cython__";
static const char __pyx_k_ParticleBitmap__bitmask_intersec[] = "ParticleBitmap._bitmask_intersects";
static const char __pyx_k_ParticleBitmap__bitmask_logicala[] = "ParticleBitmap._bitmask_logicaland";
static const char __pyx_k_ParticleBitmap__coarse_index_dat[] = "ParticleBitmap._coarse_index_data_file[ndarray,ndarray]";
static const char __pyx_k_ParticleBitmap__refined_index_da[] = "ParticleBitmap._refined_index_data_file[ndarray,ndarray]";
static const char __pyx_k_ParticleBitmap__set_coarse_index[] = "ParticleBitmap._set_coarse_index_data_file";
static const char __pyx_k_ParticleBitmap__set_refined_inde[] = "ParticleBitmap._set_refined_index_data_file";
static const char __pyx_k_ParticleBitmap_file_ownership_ma[] = "ParticleBitmap.file_ownership_mask";
static const char __pyx_k_ParticleBitmap_filemasks2addfile[] = "ParticleBitmap.filemasks2addfiles";
static const char __pyx_k_ParticleBitmap_find_collisions_c[] = "ParticleBitmap.find_collisions_coarse";
static const char __pyx_k_ParticleBitmap_find_collisions_r[] = "ParticleBitmap.find_collisions_refined";
static const char __pyx_k_ParticleBitmap_find_contaminated[] = "ParticleBitmap.find_contaminated";
static const char __pyx_k_ParticleBitmap_find_uncontaminat[] = "ParticleBitmap.find_uncontaminated";
static const char __pyx_k_ParticleBitmap_identify_data_fil[] = "ParticleBitmap.identify_data_files";
static const char __pyx_k_ParticleBitmap_identify_file_mas[] = "ParticleBitmap.identify_file_masks";
static const char __pyx_k_ParticleOctreeContainer___reduce[] = "ParticleOctreeContainer.__reduce_cython__";
static const char __pyx_k_ParticleOctreeContainer___setsta[] = "ParticleOctreeContainer.__setstate_cython__";
static const char __pyx_k_ParticleOctreeContainer_allocate[] = "ParticleOctreeContainer.allocate_root";
static const char __pyx_k_ParticleOctreeContainer_apply_do[] = "ParticleOctreeContainer.apply_domain";
static const char __pyx_k_ParticleOctreeContainer_clear_fi[] = "ParticleOctreeContainer.clear_fileind";
static const char __pyx_k_ParticleOctreeContainer_domain_i[] = "ParticleOctreeContainer.domain_ind";
static const char __pyx_k_ParticleOctreeContainer_finalize[] = "ParticleOctreeContainer.finalize";
static const char __pyx_k_ParticleOctreeContainer_recursiv[] = "ParticleOctreeContainer.recursively_count";
static const char __pyx_k_The_file_format_of_the_index_has[] = "The file format of the index has changed since this file was created. It will be replaced with an updated version.";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension ";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self__ptr_octs_per_root_self_oct[] = "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling";
static const char __pyx_k_self_dom_offsets_self_oct_list_s[] = "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling";
static const char __pyx_k_self_file_markers_cannot_be_conv[] = "self.file_markers cannot be converted to a Python object for pickling";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_yt_geometry_particle_oct_contain[] = "yt.geometry.particle_oct_container";
static const char __pyx_k_ParticleBitmap__coarse_index_dat_2[] = "ParticleBitmap._coarse_index_data_file";
static const char __pyx_k_ParticleBitmap__refined_index_da_2[] = "ParticleBitmap._refined_index_data_file";
static const char __pyx_k_ParticleOctreeContainer_allocate_2[] = "ParticleOctreeContainer.allocate_domains";
static const char __pyx_k_yt_geometry_particle_oct_contain_2[] = "yt/geometry/particle_oct_container.pyx";
/* #### Code section: decls ### */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_allocate_root(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self); /* proto */
static void __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_2__dealloc__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_4clear_fileind(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_6__iter__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_9allocate_domains(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_domain_counts); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_11finalize(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, int __pyx_v_domain_id); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_13add(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, PyArrayObject *__pyx_v_indices, __pyx_t_5numpy_uint8_t __pyx_v_order); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_15recursively_count(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_17apply_domain(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, int __pyx_v_domain_id, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask, int __pyx_v_masklevel); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_19domain_ind(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, PyObject *__pyx_v_selector, int __pyx_v_domain_id, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask, int __pyx_v_masklevel); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5n_ref___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5n_ref_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_21__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_23__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap___init__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_left_edge, PyObject *__pyx_v_right_edge, PyObject *__pyx_v_periodicity, PyObject *__pyx_v_file_hash, PyObject *__pyx_v_nfiles, PyObject *__pyx_v_index_order1, PyObject *__pyx_v_index_order2); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_2_bitmask_logicaland(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_ifile, PyObject *__pyx_v_bcoll, PyObject *__pyx_v_out); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_4_bitmask_intersects(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_ifile, PyObject *__pyx_v_bcoll); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6update_mi2(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_float64_t __pyx_v_characteristic_size, __pyx_t_5numpy_uint64_t __pyx_v_max_index_order2); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8_coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults, PyObject *__pyx_v__fused_sigindex_ref); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_78_coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, __pyx_t_5numpy_uint64_t __pyx_v_file_id); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_80_coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, __pyx_t_5numpy_uint64_t __pyx_v_file_id); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10_set_coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_file_id); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12_refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults, PyObject *__pyx_v__fused_sigindex_ref); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_84_refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_in_collection, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, PyArrayObject *__pyx_v_mask, CYTHON_UNUSED PyArrayObject *__pyx_v_sub_mi1, CYTHON_UNUSED PyArrayObject *__pyx_v_sub_mi2, CYTHON_UNUSED __pyx_t_5numpy_uint64_t __pyx_v_file_id, CYTHON_UNUSED __pyx_t_5numpy_int64_t __pyx_v_nsub_mi, __pyx_t_5numpy_uint64_t __pyx_v_count_threshold, __pyx_t_5numpy_uint8_t __pyx_v_mask_threshold); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_86_refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_in_collection, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, PyArrayObject *__pyx_v_mask, CYTHON_UNUSED PyArrayObject *__pyx_v_sub_mi1, CYTHON_UNUSED PyArrayObject *__pyx_v_sub_mi2, CYTHON_UNUSED __pyx_t_5numpy_uint64_t __pyx_v_file_id, CYTHON_UNUSED __pyx_t_5numpy_int64_t __pyx_v_nsub_mi, __pyx_t_5numpy_uint64_t __pyx_v_count_threshold, __pyx_t_5numpy_uint8_t __pyx_v_mask_threshold); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_set_refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_sub_mi1, PyArrayObject *__pyx_v_sub_mi2, __pyx_t_5numpy_uint64_t __pyx_v_file_id, __pyx_t_5numpy_int64_t __pyx_v_nsub_mi); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_16find_collisions(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_18find_collisions_coarse(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_verbose, PyObject *__pyx_v_file_list); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_20find_uncontaminated(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_uint32_t __pyx_v_ifile, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask2); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_22find_contaminated(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_uint32_t __pyx_v_ifile, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask2); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_24find_collisions_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_verbose); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_26get_bitmasks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_28iseq_bitmask(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_solf); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_30save_bitmasks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_max_hsml); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_32check_bitmasks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_34reset_bitmasks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_36load_bitmasks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_38print_info(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_40count_coarse(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_ifile); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_42count_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_ifile); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_44count_total(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_ifile); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_46check(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_48primary_indices(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_50file_ownership_mask(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_fid); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_52finalize(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_54get_DLE(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_56get_DRE(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_58get_ghost_zones(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector, int __pyx_v_ngz, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_dmask, int __pyx_v_coarse_ghosts); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_60selector2mask(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_62mask2files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_cmask); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_64mask2filemasks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_cmask, PyArrayObject *__pyx_v_file_idx); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_66filemasks2addfiles(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_file_masks); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_68identify_file_masks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_70identify_data_files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector, int __pyx_v_ngz); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_72mask_to_files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_s); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_74masks_to_files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_g); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_76construct_octree(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_io_handler, PyObject *__pyx_v_data_files, PyObject *__pyx_v_num_zones, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_selector_mask, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_base_mask); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6nfiles___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6nfiles_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order1___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order1_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order2___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order2_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_used_mi2___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_used_mi2_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_90__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_92__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector___cinit__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, PyObject *__pyx_v_selector, PyObject *__pyx_v_bitmap, PyObject *__pyx_v_ngz); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_2fill_masks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_g); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_4find_files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, PyArrayObject *__pyx_v_file_mask_p, PyArrayObject *__pyx_v_file_mask_g); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer___init__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyObject *__pyx_v_domain_dimensions, PyObject *__pyx_v_domain_left_edge, PyObject *__pyx_v_domain_right_edge, int __pyx_v_num_root, PyObject *__pyx_v_num_zones); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_2allocate_domains(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyObject *__pyx_v_counts); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_4finalize(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_6get_index_base_octs(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, __Pyx_memviewslice __pyx_v_domain_ind); /* proto */
static void __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_8__dealloc__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_10add(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyArrayObject *__pyx_v_indices, CYTHON_UNUSED __pyx_t_5numpy_uint64_t __pyx_v_order1, int __pyx_v_domain_id); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5n_ref___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5n_ref_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_17_index_base_roots___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_17_index_base_roots_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_16_index_base_octs___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_16_index_base_octs_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13overlap_cells___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13overlap_cells_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleBitmap(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
/* SmallCodeConfig */
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  PyTypeObject *__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject;
  PyTypeObject *__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector;
  PyTypeObject *__pyx_ptype_2yt_8geometry_18selection_routines_OctreeSubsetSelector;
  PyTypeObject *__pyx_ptype_2yt_8geometry_18selection_routines_BooleanSelector;
  PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_20allocation_container_ObjectPool;
  PyTypeObject *__pyx_ptype_2yt_8geometry_13oct_container_OctObjectPool;
  PyTypeObject *__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer;
  PyTypeObject *__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer;
  PyTypeObject *__pyx_ptype_2yt_8geometry_13oct_container_RAMSESOctreeContainer;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_OctVisitor;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalOcts;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalCells;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_MarkOcts;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_MaskOcts;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_IndexOcts;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_MaskedIndexOcts;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_IndexMaskMapOcts;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_ICoordsOcts;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_IResOcts;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_FCoordsOcts;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_FWidthOcts;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayI64;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayF64;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_IdentifyOcts;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_AssignDomainInd;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesO;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesR;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_CountByDomain;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_StoreOctree;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_LoadOctree;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_MortonIndexOcts;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_StoreIndex;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor;
  PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellVisitor;
  PyTypeObject *__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks;
  PyTypeObject *__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection;
  PyTypeObject *__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed;
  PyTypeObject *__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet;
  PyTypeObject *__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector;
  PyTypeObject *__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet;
  PyTypeObject *__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector;
  PyObject *__pyx_type_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer;
  PyObject *__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmap;
  PyObject *__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector;
  PyObject *__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer;
  PyObject *__pyx_type_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__;
  PyObject *__pyx_type___pyx_array;
  PyObject *__pyx_type___pyx_MemviewEnum;
  PyObject *__pyx_type___pyx_memoryview;
  PyObject *__pyx_type___pyx_memoryviewslice;
  PyTypeObject *__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer;
  PyTypeObject *__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap;
  PyTypeObject *__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector;
  PyTypeObject *__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer;
  PyTypeObject *__pyx_ptype_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__;
  PyTypeObject *__pyx_array_type;
  PyTypeObject *__pyx_MemviewEnum_type;
  PyTypeObject *__pyx_memoryview_type;
  PyTypeObject *__pyx_memoryviewslice_type;
  __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get;
  __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_pop;
  __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_values;
  __Pyx_CachedCFunction __pyx_umethod_PyByteArray_Type__extend;
  __pyx_t_5numpy_uint8_t __pyx_k__12;
  __pyx_t_5numpy_uint8_t __pyx_k__13;
  PyObject *__pyx_k__14;
  PyObject *__pyx_k__17;
  PyObject *__pyx_slice[3];
  PyObject *__pyx_tuple[13];
  PyObject *__pyx_codeobj_tab[65];
  PyObject *__pyx_string_tab[510];
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_4;
  PyObject *__pyx_int_5;
  PyObject *__pyx_int_6;
  PyObject *__pyx_int_8;
  PyObject *__pyx_int_99;
  PyObject *__pyx_int_128;
  PyObject *__pyx_int_112105877;
  PyObject *__pyx_int_136983863;
  PyObject *__pyx_int_184977713;
  PyObject *__pyx_int_neg_1;
/* #### Code section: module_state_contents ### */

#if CYTHON_USE_FREELISTS
struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ *__pyx_freelist_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__[8];
int __pyx_freecount_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__;
#endif
/* CommonTypesMetaclass.module_state_decls */
PyTypeObject *__pyx_CommonTypesMetaclassType;

/* CachedMethodType.module_state_decls */
#if CYTHON_COMPILING_IN_LIMITED_API
PyObject *__Pyx_CachedMethodType;
#endif

/* CodeObjectCache.module_state_decls */
struct __Pyx_CodeObjectCache __pyx_code_cache;

/* Print.module_state_decls */
PyObject* __pyx_print;
PyObject* __pyx_print_kwargs;

/* ImportNumPyArray.module_state_decls */
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS
__pyx_atomic_ptr_type __pyx_numpy_ndarray;
#else
PyObject *__pyx_numpy_ndarray;
#endif

/* IterNextPlain.module_state_decls */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
PyObject *__Pyx_GetBuiltinNext_LimitedAPI_cache;
#endif

/* #### Code section: module_state_end ### */
} __pyx_mstatetype;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate_global (__Pyx_PyModule_GetState(__Pyx_State_FindModule(&__pyx_moduledef)))

#define __pyx_m (__Pyx_State_FindModule(&__pyx_moduledef))
#else
static __pyx_mstatetype __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstatetype * const __pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: constant_name_defines ### */
#define __pyx_kp_u_ __pyx_string_tab[0]
#define __pyx_kp_u_05 __pyx_string_tab[1]
#define __pyx_n_u_ASCII __pyx_string_tab[2]
#define __pyx_kp_u_All_dimensions_preceding_dimensi __pyx_string_tab[3]
#define __pyx_n_u_AssertionError __pyx_string_tab[4]
#define __pyx_kp_u_Buffer_view_does_not_expose_stri __pyx_string_tab[5]
#define __pyx_kp_u_Can_only_create_a_buffer_that_is __pyx_string_tab[6]
#define __pyx_kp_u_Cannot_assign_to_read_only_memor __pyx_string_tab[7]
#define __pyx_kp_u_Cannot_create_writable_memory_vi __pyx_string_tab[8]
#define __pyx_kp_u_Cannot_index_with_type __pyx_string_tab[9]
#define __pyx_kp_u_Cannot_transpose_memoryview_with __pyx_string_tab[10]
#define __pyx_kp_u_Child_was_already_initialized __pyx_string_tab[11]
#define __pyx_n_u_DLE __pyx_string_tab[12]
#define __pyx_n_u_DRE __pyx_string_tab[13]
#define __pyx_kp_u_Dimension_d_is_not_direct __pyx_string_tab[14]
#define __pyx_n_u_Ellipsis __pyx_string_tab[15]
#define __pyx_kp_u_Empty_shape_tuple_for_cython_arr __pyx_string_tab[16]
#define __pyx_kp_u_Expected_at_least __pyx_string_tab[17]
#define __pyx_n_u_File __pyx_string_tab[18]
#define __pyx_kp_u_File_03d __pyx_string_tab[19]
#define __pyx_kp_u_Function_call_with_ambiguous_arg __pyx_string_tab[20]
#define __pyx_n_u_ImportError __pyx_string_tab[21]
#define __pyx_kp_u_Incompatible_checksums_0x_x_vs_0 __pyx_string_tab[22]
#define __pyx_n_u_IndexError __pyx_string_tab[23]
#define __pyx_kp_u_Index_for_a_softening_region __pyx_string_tab[24]
#define __pyx_kp_u_Index_not_found_in_the __pyx_string_tab[25]
#define __pyx_kp_u_Index_out_of_bounds_axis_d __pyx_string_tab[26]
#define __pyx_kp_u_Indirect_dimensions_not_supporte __pyx_string_tab[27]
#define __pyx_kp_u_Invalid_mode_expected_c_or_fortr __pyx_string_tab[28]
#define __pyx_kp_u_Invalid_shape_in_axis __pyx_string_tab[29]
#define __pyx_n_u_KeyError __pyx_string_tab[30]
#define __pyx_kp_u_Loading_particle_index __pyx_string_tab[31]
#define __pyx_n_u_MemoryError __pyx_string_tab[32]
#define __pyx_kp_u_MemoryView_of __pyx_string_tab[33]
#define __pyx_kp_u_No_matching_signature_found __pyx_string_tab[34]
#define __pyx_kp_u_No_root_found_for __pyx_string_tab[35]
#define __pyx_kp_u_Note_that_Cython_is_deliberately __pyx_string_tab[36]
#define __pyx_n_b_O __pyx_string_tab[37]
#define __pyx_n_u_OSError __pyx_string_tab[38]
#define __pyx_kp_u_Octree_does_not_have_roots_along __pyx_string_tab[39]
#define __pyx_kp_u_Octree_must_have_the_same_number __pyx_string_tab[40]
#define __pyx_kp_u_Out_of_bounds_on_buffer_access_a __pyx_string_tab[41]
#define __pyx_n_u_ParticleBitmap __pyx_string_tab[42]
#define __pyx_n_u_ParticleBitmapOctreeContainer __pyx_string_tab[43]
#define __pyx_n_u_ParticleBitmapOctreeContainer_2 __pyx_string_tab[44]
#define __pyx_n_u_ParticleBitmapOctreeContainer_3 __pyx_string_tab[45]
#define __pyx_n_u_ParticleBitmapOctreeContainer_ad __pyx_string_tab[46]
#define __pyx_n_u_ParticleBitmapOctreeContainer_al __pyx_string_tab[47]
#define __pyx_n_u_ParticleBitmapOctreeContainer_fi __pyx_string_tab[48]
#define __pyx_n_u_ParticleBitmapOctreeContainer_ge __pyx_string_tab[49]
#define __pyx_n_u_ParticleBitmapSelector __pyx_string_tab[50]
#define __pyx_n_u_ParticleBitmapSelector___reduce __pyx_string_tab[51]
#define __pyx_n_u_ParticleBitmapSelector___setstat __pyx_string_tab[52]
#define __pyx_n_u_ParticleBitmapSelector_fill_mask __pyx_string_tab[53]
#define __pyx_n_u_ParticleBitmapSelector_find_file __pyx_string_tab[54]
#define __pyx_n_u_ParticleBitmap___reduce_cython __pyx_string_tab[55]
#define __pyx_n_u_ParticleBitmap___setstate_cython __pyx_string_tab[56]
#define __pyx_n_u_ParticleBitmap__bitmask_intersec __pyx_string_tab[57]
#define __pyx_n_u_ParticleBitmap__bitmask_logicala __pyx_string_tab[58]
#define __pyx_n_u_ParticleBitmap__coarse_index_dat __pyx_string_tab[59]
#define __pyx_n_u_ParticleBitmap__coarse_index_dat_2 __pyx_string_tab[60]
#define __pyx_n_u_ParticleBitmap__refined_index_da __pyx_string_tab[61]
#define __pyx_n_u_ParticleBitmap__refined_index_da_2 __pyx_string_tab[62]
#define __pyx_n_u_ParticleBitmap__set_coarse_index __pyx_string_tab[63]
#define __pyx_n_u_ParticleBitmap__set_refined_inde __pyx_string_tab[64]
#define __pyx_n_u_ParticleBitmap_check __pyx_string_tab[65]
#define __pyx_n_u_ParticleBitmap_check_bitmasks __pyx_string_tab[66]
#define __pyx_n_u_ParticleBitmap_construct_octree __pyx_string_tab[67]
#define __pyx_n_u_ParticleBitmap_count_coarse __pyx_string_tab[68]
#define __pyx_n_u_ParticleBitmap_count_refined __pyx_string_tab[69]
#define __pyx_n_u_ParticleBitmap_count_total __pyx_string_tab[70]
#define __pyx_n_u_ParticleBitmap_file_ownership_ma __pyx_string_tab[71]
#define __pyx_n_u_ParticleBitmap_filemasks2addfile __pyx_string_tab[72]
#define __pyx_n_u_ParticleBitmap_finalize __pyx_string_tab[73]
#define __pyx_n_u_ParticleBitmap_find_collisions __pyx_string_tab[74]
#define __pyx_n_u_ParticleBitmap_find_collisions_c __pyx_string_tab[75]
#define __pyx_n_u_ParticleBitmap_find_collisions_r __pyx_string_tab[76]
#define __pyx_n_u_ParticleBitmap_find_contaminated __pyx_string_tab[77]
#define __pyx_n_u_ParticleBitmap_find_uncontaminat __pyx_string_tab[78]
#define __pyx_n_u_ParticleBitmap_get_DLE __pyx_string_tab[79]
#define __pyx_n_u_ParticleBitmap_get_DRE __pyx_string_tab[80]
#define __pyx_n_u_ParticleBitmap_get_bitmasks __pyx_string_tab[81]
#define __pyx_n_u_ParticleBitmap_get_ghost_zones __pyx_string_tab[82]
#define __pyx_n_u_ParticleBitmap_identify_data_fil __pyx_string_tab[83]
#define __pyx_n_u_ParticleBitmap_identify_file_mas __pyx_string_tab[84]
#define __pyx_n_u_ParticleBitmap_iseq_bitmask __pyx_string_tab[85]
#define __pyx_n_u_ParticleBitmap_load_bitmasks __pyx_string_tab[86]
#define __pyx_n_u_ParticleBitmap_mask2filemasks __pyx_string_tab[87]
#define __pyx_n_u_ParticleBitmap_mask2files __pyx_string_tab[88]
#define __pyx_n_u_ParticleBitmap_mask_to_files __pyx_string_tab[89]
#define __pyx_n_u_ParticleBitmap_masks_to_files __pyx_string_tab[90]
#define __pyx_n_u_ParticleBitmap_primary_indices __pyx_string_tab[91]
#define __pyx_n_u_ParticleBitmap_print_info __pyx_string_tab[92]
#define __pyx_n_u_ParticleBitmap_reset_bitmasks __pyx_string_tab[93]
#define __pyx_n_u_ParticleBitmap_save_bitmasks __pyx_string_tab[94]
#define __pyx_n_u_ParticleBitmap_selector2mask __pyx_string_tab[95]
#define __pyx_n_u_ParticleBitmap_update_mi2 __pyx_string_tab[96]
#define __pyx_n_u_ParticleOctreeContainer __pyx_string_tab[97]
#define __pyx_n_u_ParticleOctreeContainer___iter __pyx_string_tab[98]
#define __pyx_n_u_ParticleOctreeContainer___reduce __pyx_string_tab[99]
#define __pyx_n_u_ParticleOctreeContainer___setsta __pyx_string_tab[100]
#define __pyx_n_u_ParticleOctreeContainer_add __pyx_string_tab[101]
#define __pyx_n_u_ParticleOctreeContainer_allocate __pyx_string_tab[102]
#define __pyx_n_u_ParticleOctreeContainer_allocate_2 __pyx_string_tab[103]
#define __pyx_n_u_ParticleOctreeContainer_apply_do __pyx_string_tab[104]
#define __pyx_n_u_ParticleOctreeContainer_clear_fi __pyx_string_tab[105]
#define __pyx_n_u_ParticleOctreeContainer_domain_i __pyx_string_tab[106]
#define __pyx_n_u_ParticleOctreeContainer_finalize __pyx_string_tab[107]
#define __pyx_n_u_ParticleOctreeContainer_recursiv __pyx_string_tab[108]
#define __pyx_n_u_PickleError __pyx_string_tab[109]
#define __pyx_n_u_RuntimeError __pyx_string_tab[110]
#define __pyx_n_u_Sequence __pyx_string_tab[111]
#define __pyx_kp_u_Smoothing_length_for_particle __pyx_string_tab[112]
#define __pyx_kp_u_Step_may_not_be_zero_axis_d __pyx_string_tab[113]
#define __pyx_kp_b_T __pyx_string_tab[114]
#define __pyx_kp_u_The_file_format_of_the_index_has __pyx_string_tab[115]
#define __pyx_kp_u_Total_of_s_s_collisions_3_5f __pyx_string_tab[116]
#define __pyx_n_u_TypeError __pyx_string_tab[117]
#define __pyx_kp_u_Unable_to_convert_item_to_object __pyx_string_tab[118]
#define __pyx_n_u_ValueError __pyx_string_tab[119]
#define __pyx_n_u_View_MemoryView __pyx_string_tab[120]
#define __pyx_kp_u__10 __pyx_string_tab[121]
#define __pyx_kp_u__11 __pyx_string_tab[122]
#define __pyx_kp_u__15 __pyx_string_tab[123]
#define __pyx_kp_u__16 __pyx_string_tab[124]
#define __pyx_kp_u__18 __pyx_string_tab[125]
#define __pyx_kp_u__2 __pyx_string_tab[126]
#define __pyx_kp_u__3 __pyx_string_tab[127]
#define __pyx_kp_u__4 __pyx_string_tab[128]
#define __pyx_kp_u__5 __pyx_string_tab[129]
#define __pyx_kp_b__6 __pyx_string_tab[130]
#define __pyx_kp_b__7 __pyx_string_tab[131]
#define __pyx_kp_b__8 __pyx_string_tab[132]
#define __pyx_kp_b__9 __pyx_string_tab[133]
#define __pyx_n_u_a __pyx_string_tab[134]
#define __pyx_n_u_abc __pyx_string_tab[135]
#define __pyx_n_u_add __pyx_string_tab[136]
#define __pyx_kp_u_add_note __pyx_string_tab[137]
#define __pyx_n_u_addfile_idx __pyx_string_tab[138]
#define __pyx_n_u_allocate_buffer __pyx_string_tab[139]
#define __pyx_n_u_allocate_domains __pyx_string_tab[140]
#define __pyx_n_u_allocate_root __pyx_string_tab[141]
#define __pyx_kp_u_and __pyx_string_tab[142]
#define __pyx_n_u_apply_domain __pyx_string_tab[143]
#define __pyx_n_u_args __pyx_string_tab[144]
#define __pyx_n_u_argsort __pyx_string_tab[145]
#define __pyx_kp_u_arguments_got __pyx_string_tab[146]
#define __pyx_n_u_arr __pyx_string_tab[147]
#define __pyx_n_u_arr_any __pyx_string_tab[148]
#define __pyx_n_u_arr_swap __pyx_string_tab[149]
#define __pyx_n_u_arr_totref __pyx_string_tab[150]
#define __pyx_n_u_arr_tottwo __pyx_string_tab[151]
#define __pyx_n_u_arr_two __pyx_string_tab[152]
#define __pyx_n_u_arr_view __pyx_string_tab[153]
#define __pyx_n_u_array __pyx_string_tab[154]
#define __pyx_n_u_astype __pyx_string_tab[155]
#define __pyx_n_u_asyncio_coroutines __pyx_string_tab[156]
#define __pyx_kp_u_at_0x __pyx_string_tab[157]
#define __pyx_n_u_attrs __pyx_string_tab[158]
#define __pyx_n_u_base __pyx_string_tab[159]
#define __pyx_n_u_base_mask __pyx_string_tab[160]
#define __pyx_n_u_base_pcount __pyx_string_tab[161]
#define __pyx_n_u_bcoll __pyx_string_tab[162]
#define __pyx_n_u_beg __pyx_string_tab[163]
#define __pyx_n_u_bitmap __pyx_string_tab[164]
#define __pyx_n_u_bitmask_intersects __pyx_string_tab[165]
#define __pyx_n_u_bitmask_logicaland __pyx_string_tab[166]
#define __pyx_n_u_bitmask_version __pyx_string_tab[167]
#define __pyx_n_u_bitmask_version_2 __pyx_string_tab[168]
#define __pyx_n_u_bitsize __pyx_string_tab[169]
#define __pyx_n_u_c __pyx_string_tab[170]
#define __pyx_n_u_cc __pyx_string_tab[171]
#define __pyx_n_u_characteristic_size __pyx_string_tab[172]
#define __pyx_n_u_check __pyx_string_tab[173]
#define __pyx_n_u_check_bitmasks __pyx_string_tab[174]
#define __pyx_n_u_class __pyx_string_tab[175]
#define __pyx_n_u_class_getitem __pyx_string_tab[176]
#define __pyx_n_u_clear __pyx_string_tab[177]
#define __pyx_n_u_clear_fileind __pyx_string_tab[178]
#define __pyx_n_u_cline_in_traceback __pyx_string_tab[179]
#define __pyx_n_u_close __pyx_string_tab[180]
#define __pyx_n_u_cmask __pyx_string_tab[181]
#define __pyx_n_u_cmask_g __pyx_string_tab[182]
#define __pyx_n_u_cmask_s __pyx_string_tab[183]
#define __pyx_n_u_cmi __pyx_string_tab[184]
#define __pyx_n_u_coarse_ghosts __pyx_string_tab[185]
#define __pyx_n_u_coarse_ghosts_list __pyx_string_tab[186]
#define __pyx_n_u_coarse_index_data_file __pyx_string_tab[187]
#define __pyx_n_u_coarse_index_data_file_ndarray __pyx_string_tab[188]
#define __pyx_n_u_coarse_select_list __pyx_string_tab[189]
#define __pyx_n_u_coct __pyx_string_tab[190]
#define __pyx_n_u_code_length __pyx_string_tab[191]
#define __pyx_kp_u_collections_abc __pyx_string_tab[192]
#define __pyx_n_u_collisions __pyx_string_tab[193]
#define __pyx_n_u_construct_octree __pyx_string_tab[194]
#define __pyx_kp_u_contiguous_and_direct __pyx_string_tab[195]
#define __pyx_kp_u_contiguous_and_indirect __pyx_string_tab[196]
#define __pyx_n_u_convert_to_units __pyx_string_tab[197]
#define __pyx_n_u_copy __pyx_string_tab[198]
#define __pyx_n_u_count __pyx_string_tab[199]
#define __pyx_n_u_count_coarse __pyx_string_tab[200]
#define __pyx_n_u_count_refined __pyx_string_tab[201]
#define __pyx_n_u_count_threshold __pyx_string_tab[202]
#define __pyx_n_u_count_total __pyx_string_tab[203]
#define __pyx_n_u_counts __pyx_string_tab[204]
#define __pyx_n_u_create_dataset __pyx_string_tab[205]
#define __pyx_n_u_create_group __pyx_string_tab[206]
#define __pyx_n_u_croot __pyx_string_tab[207]
#define __pyx_n_u_cur __pyx_string_tab[208]
#define __pyx_n_u_cur_ind __pyx_string_tab[209]
#define __pyx_n_u_d __pyx_string_tab[210]
#define __pyx_n_u_data __pyx_string_tab[211]
#define __pyx_n_u_data_file __pyx_string_tab[212]
#define __pyx_n_u_data_files __pyx_string_tab[213]
#define __pyx_n_u_dataset __pyx_string_tab[214]
#define __pyx_n_u_dds __pyx_string_tab[215]
#define __pyx_n_u_defaults __pyx_string_tab[216]
#define __pyx_n_u_dfiles __pyx_string_tab[217]
#define __pyx_n_u_dict __pyx_string_tab[218]
#define __pyx_kp_u_disable __pyx_string_tab[219]
#define __pyx_n_u_dmask __pyx_string_tab[220]
#define __pyx_n_u_domain_counts __pyx_string_tab[221]
#define __pyx_n_u_domain_dimensions __pyx_string_tab[222]
#define __pyx_n_u_domain_id __pyx_string_tab[223]
#define __pyx_n_u_domain_ind __pyx_string_tab[224]
#define __pyx_n_u_domain_left_edge __pyx_string_tab[225]
#define __pyx_n_u_domain_right_edge __pyx_string_tab[226]
#define __pyx_n_u_double __pyx_string_tab[227]
#define __pyx_n_u_dtype __pyx_string_tab[228]
#define __pyx_n_u_dtype_is_object __pyx_string_tab[229]
#define __pyx_n_u_empty __pyx_string_tab[230]
#define __pyx_kp_u_enable __pyx_string_tab[231]
#define __pyx_n_u_encode __pyx_string_tab[232]
#define __pyx_n_u_end __pyx_string_tab[233]
#define __pyx_n_u_enter __pyx_string_tab[234]
#define __pyx_n_u_enumerate __pyx_string_tab[235]
#define __pyx_n_u_error __pyx_string_tab[236]
#define __pyx_n_u_ewah_base __pyx_string_tab[237]
#define __pyx_n_u_ewah_slct __pyx_string_tab[238]
#define __pyx_kp_u_exceeds_max __pyx_string_tab[239]
#define __pyx_n_u_exit __pyx_string_tab[240]
#define __pyx_n_u_extend __pyx_string_tab[241]
#define __pyx_n_u_fid __pyx_string_tab[242]
#define __pyx_n_u_file __pyx_string_tab[243]
#define __pyx_n_u_file_hash __pyx_string_tab[244]
#define __pyx_n_u_file_id __pyx_string_tab[245]
#define __pyx_n_u_file_idx __pyx_string_tab[246]
#define __pyx_n_u_file_idx_g __pyx_string_tab[247]
#define __pyx_n_u_file_idx_p __pyx_string_tab[248]
#define __pyx_n_u_file_list __pyx_string_tab[249]
#define __pyx_n_u_file_mask_g __pyx_string_tab[250]
#define __pyx_n_u_file_mask_p __pyx_string_tab[251]
#define __pyx_n_u_file_masks __pyx_string_tab[252]
#define __pyx_n_u_file_ownership_mask __pyx_string_tab[253]
#define __pyx_n_u_filemasks2addfiles __pyx_string_tab[254]
#define __pyx_n_u_files_touched __pyx_string_tab[255]
#define __pyx_n_u_fill_bool __pyx_string_tab[256]
#define __pyx_n_u_fill_masks __pyx_string_tab[257]
#define __pyx_n_u_finalize __pyx_string_tab[258]
#define __pyx_n_u_find_collisions __pyx_string_tab[259]
#define __pyx_n_u_find_collisions_coarse __pyx_string_tab[260]
#define __pyx_n_u_find_collisions_refined __pyx_string_tab[261]
#define __pyx_n_u_find_contaminated __pyx_string_tab[262]
#define __pyx_n_u_find_files __pyx_string_tab[263]
#define __pyx_n_u_find_uncontaminated __pyx_string_tab[264]
#define __pyx_n_u_finish __pyx_string_tab[265]
#define __pyx_n_u_flags __pyx_string_tab[266]
#define __pyx_n_u_float __pyx_string_tab[267]
#define __pyx_n_u_float32 __pyx_string_tab[268]
#define __pyx_n_u_float64 __pyx_string_tab[269]
#define __pyx_n_u_fmask __pyx_string_tab[270]
#define __pyx_n_u_fname __pyx_string_tab[271]
#define __pyx_n_u_format __pyx_string_tab[272]
#define __pyx_n_u_fortran __pyx_string_tab[273]
#define __pyx_n_u_fp __pyx_string_tab[274]
#define __pyx_n_u_func __pyx_string_tab[275]
#define __pyx_n_u_fused_sigindex_ref __pyx_string_tab[276]
#define __pyx_kp_u_gc __pyx_string_tab[277]
#define __pyx_n_u_get __pyx_string_tab[278]
#define __pyx_n_u_get_DLE __pyx_string_tab[279]
#define __pyx_n_u_get_DRE __pyx_string_tab[280]
#define __pyx_n_u_get_bitmasks __pyx_string_tab[281]
#define __pyx_n_u_get_ghost_zones __pyx_string_tab[282]
#define __pyx_n_u_get_index_base_octs __pyx_string_tab[283]
#define __pyx_n_u_get_pbar __pyx_string_tab[284]
#define __pyx_n_u_get_periodicity __pyx_string_tab[285]
#define __pyx_n_u_getstate __pyx_string_tab[286]
#define __pyx_n_u_gfiles __pyx_string_tab[287]
#define __pyx_n_u_gmask __pyx_string_tab[288]
#define __pyx_n_u_gmask2 __pyx_string_tab[289]
#define __pyx_kp_u_got __pyx_string_tab[290]
#define __pyx_kp_u_got_differing_extents_in_dimensi __pyx_string_tab[291]
#define __pyx_n_u_grp __pyx_string_tab[292]
#define __pyx_n_u_h5py __pyx_string_tab[293]
#define __pyx_n_u_hsml __pyx_string_tab[294]
#define __pyx_n_u_i __pyx_string_tab[295]
#define __pyx_n_u_id __pyx_string_tab[296]
#define __pyx_n_u_identify_data_files __pyx_string_tab[297]
#define __pyx_n_u_identify_file_masks __pyx_string_tab[298]
#define __pyx_n_u_ifile __pyx_string_tab[299]
#define __pyx_n_u_import __pyx_string_tab[300]
#define __pyx_n_u_in_coll __pyx_string_tab[301]
#define __pyx_n_u_in_collection __pyx_string_tab[302]
#define __pyx_n_u_ind __pyx_string_tab[303]
#define __pyx_n_u_ind64 __pyx_string_tab[304]
#define __pyx_n_u_index __pyx_string_tab[305]
#define __pyx_n_u_index_order1 __pyx_string_tab[306]
#define __pyx_n_u_index_order2 __pyx_string_tab[307]
#define __pyx_n_u_index_root __pyx_string_tab[308]
#define __pyx_n_u_indices __pyx_string_tab[309]
#define __pyx_n_u_init __pyx_string_tab[310]
#define __pyx_n_u_initializing __pyx_string_tab[311]
#define __pyx_n_u_int32 __pyx_string_tab[312]
#define __pyx_n_u_int64 __pyx_string_tab[313]
#define __pyx_n_u_io_handler __pyx_string_tab[314]
#define __pyx_n_u_irflag __pyx_string_tab[315]
#define __pyx_n_u_is_coroutine __pyx_string_tab[316]
#define __pyx_kp_u_is_negative_with_value __pyx_string_tab[317]
#define __pyx_kp_u_isenabled __pyx_string_tab[318]
#define __pyx_n_u_iseq_bitmask __pyx_string_tab[319]
#define __pyx_n_u_isfile __pyx_string_tab[320]
#define __pyx_n_u_it_mi1 __pyx_string_tab[321]
#define __pyx_n_u_itemsize __pyx_string_tab[322]
#define __pyx_kp_u_itemsize_0_for_cython_array __pyx_string_tab[323]
#define __pyx_n_u_iter __pyx_string_tab[324]
#define __pyx_n_u_iter_end __pyx_string_tab[325]
#define __pyx_n_u_iter_set __pyx_string_tab[326]
#define __pyx_n_u_j __pyx_string_tab[327]
#define __pyx_n_u_join __pyx_string_tab[328]
#define __pyx_n_u_k __pyx_string_tab[329]
#define __pyx_n_u_kind __pyx_string_tab[330]
#define __pyx_n_u_kwargs __pyx_string_tab[331]
#define __pyx_n_u_left_edge __pyx_string_tab[332]
#define __pyx_n_u_level __pyx_string_tab[333]
#define __pyx_n_u_level_counts __pyx_string_tab[334]
#define __pyx_n_u_little __pyx_string_tab[335]
#define __pyx_n_u_load_bitmasks __pyx_string_tab[336]
#define __pyx_n_u_log2 __pyx_string_tab[337]
#define __pyx_n_u_lpos __pyx_string_tab[338]
#define __pyx_n_u_main __pyx_string_tab[339]
#define __pyx_n_u_mask __pyx_string_tab[340]
#define __pyx_n_u_mask2 __pyx_string_tab[341]
#define __pyx_n_u_mask2filemasks __pyx_string_tab[342]
#define __pyx_n_u_mask2files __pyx_string_tab[343]
#define __pyx_n_u_mask_threshold __pyx_string_tab[344]
#define __pyx_n_u_mask_to_files __pyx_string_tab[345]
#define __pyx_n_u_masklevel __pyx_string_tab[346]
#define __pyx_n_u_masks_to_files __pyx_string_tab[347]
#define __pyx_n_u_max __pyx_string_tab[348]
#define __pyx_n_u_max_hsml __pyx_string_tab[349]
#define __pyx_kp_u_max_hsml_not_found_in_the __pyx_string_tab[350]
#define __pyx_n_u_max_index_order2 __pyx_string_tab[351]
#define __pyx_n_u_max_level __pyx_string_tab[352]
#define __pyx_n_u_memview __pyx_string_tab[353]
#define __pyx_n_u_mi __pyx_string_tab[354]
#define __pyx_n_u_mi1 __pyx_string_tab[355]
#define __pyx_n_u_mi_root __pyx_string_tab[356]
#define __pyx_n_u_mm_d __pyx_string_tab[357]
#define __pyx_n_u_mm_g __pyx_string_tab[358]
#define __pyx_n_u_mm_g0 __pyx_string_tab[359]
#define __pyx_n_u_mm_s __pyx_string_tab[360]
#define __pyx_n_u_mm_s0 __pyx_string_tab[361]
#define __pyx_n_u_mode __pyx_string_tab[362]
#define __pyx_n_u_module __pyx_string_tab[363]
#define __pyx_n_u_morton_ind __pyx_string_tab[364]
#define __pyx_n_u_morton_selector __pyx_string_tab[365]
#define __pyx_n_u_n_ref __pyx_string_tab[366]
#define __pyx_n_u_name __pyx_string_tab[367]
#define __pyx_n_u_name_2 __pyx_string_tab[368]
#define __pyx_n_u_nbitmasks __pyx_string_tab[369]
#define __pyx_n_u_nc __pyx_string_tab[370]
#define __pyx_n_u_ndim __pyx_string_tab[371]
#define __pyx_n_u_ndst __pyx_string_tab[372]
#define __pyx_n_u_new __pyx_string_tab[373]
#define __pyx_n_u_next __pyx_string_tab[374]
#define __pyx_n_u_nfile __pyx_string_tab[375]
#define __pyx_n_u_nfiles __pyx_string_tab[376]
#define __pyx_n_u_ngz __pyx_string_tab[377]
#define __pyx_n_u_nm __pyx_string_tab[378]
#define __pyx_n_u_no __pyx_string_tab[379]
#define __pyx_kp_u_no_default___reduce___due_to_non __pyx_string_tab[380]
#define __pyx_n_u_np __pyx_string_tab[381]
#define __pyx_n_u_nprev_octs __pyx_string_tab[382]
#define __pyx_n_u_nroot __pyx_string_tab[383]
#define __pyx_n_u_nsub_mi __pyx_string_tab[384]
#define __pyx_n_u_num_root __pyx_string_tab[385]
#define __pyx_n_u_num_zones __pyx_string_tab[386]
#define __pyx_n_u_numpy __pyx_string_tab[387]
#define __pyx_kp_u_numpy_core_multiarray_failed_to __pyx_string_tab[388]
#define __pyx_kp_u_numpy_core_umath_failed_to_impor __pyx_string_tab[389]
#define __pyx_n_u_o __pyx_string_tab[390]
#define __pyx_n_u_obj __pyx_string_tab[391]
#define __pyx_kp_u_object __pyx_string_tab[392]
#define __pyx_n_u_object_2 __pyx_string_tab[393]
#define __pyx_n_u_oct_mask __pyx_string_tab[394]
#define __pyx_n_u_octree __pyx_string_tab[395]
#define __pyx_n_u_oi __pyx_string_tab[396]
#define __pyx_n_u_order __pyx_string_tab[397]
#define __pyx_n_u_order1 __pyx_string_tab[398]
#define __pyx_n_u_os __pyx_string_tab[399]
#define __pyx_n_u_out __pyx_string_tab[400]
#define __pyx_n_u_out_collection __pyx_string_tab[401]
#define __pyx_n_u_overwrite __pyx_string_tab[402]
#define __pyx_n_u_p __pyx_string_tab[403]
#define __pyx_n_u_pack __pyx_string_tab[404]
#define __pyx_n_u_path __pyx_string_tab[405]
#define __pyx_n_u_pb __pyx_string_tab[406]
#define __pyx_n_u_periodic __pyx_string_tab[407]
#define __pyx_n_u_periodicity __pyx_string_tab[408]
#define __pyx_n_u_pickle __pyx_string_tab[409]
#define __pyx_n_u_pop __pyx_string_tab[410]
#define __pyx_n_u_pos __pyx_string_tab[411]
#define __pyx_n_u_pos32 __pyx_string_tab[412]
#define __pyx_n_u_pos64 __pyx_string_tab[413]
#define __pyx_n_u_ppos __pyx_string_tab[414]
#define __pyx_n_u_primary_indices __pyx_string_tab[415]
#define __pyx_n_u_print __pyx_string_tab[416]
#define __pyx_n_u_print_info __pyx_string_tab[417]
#define __pyx_n_u_pyx_checksum __pyx_string_tab[418]
#define __pyx_n_u_pyx_state __pyx_string_tab[419]
#define __pyx_n_u_pyx_type __pyx_string_tab[420]
#define __pyx_n_u_pyx_unpickle_Enum __pyx_string_tab[421]
#define __pyx_n_u_pyx_vtable __pyx_string_tab[422]
#define __pyx_n_u_qualname __pyx_string_tab[423]
#define __pyx_n_u_r __pyx_string_tab[424]
#define __pyx_n_u_range __pyx_string_tab[425]
#define __pyx_n_u_rc __pyx_string_tab[426]
#define __pyx_n_u_read_flag __pyx_string_tab[427]
#define __pyx_n_u_recursively_count __pyx_string_tab[428]
#define __pyx_n_u_reduce __pyx_string_tab[429]
#define __pyx_n_u_reduce_cython __pyx_string_tab[430]
#define __pyx_n_u_reduce_ex __pyx_string_tab[431]
#define __pyx_n_u_refined_index_data_file __pyx_string_tab[432]
#define __pyx_n_u_refined_index_data_file_ndarray __pyx_string_tab[433]
#define __pyx_n_u_register __pyx_string_tab[434]
#define __pyx_n_u_reset_bitmasks __pyx_string_tab[435]
#define __pyx_n_u_right_edge __pyx_string_tab[436]
#define __pyx_n_u_root __pyx_string_tab[437]
#define __pyx_n_u_root_count __pyx_string_tab[438]
#define __pyx_n_u_rpos __pyx_string_tab[439]
#define __pyx_n_u_save_bitmasks __pyx_string_tab[440]
#define __pyx_n_u_sbbox __pyx_string_tab[441]
#define __pyx_n_u_selector __pyx_string_tab[442]
#define __pyx_n_u_selector2mask __pyx_string_tab[443]
#define __pyx_n_u_selector_mask __pyx_string_tab[444]
#define __pyx_n_u_self __pyx_string_tab[445]
#define __pyx_kp_u_self__ptr_octs_per_root_self_oct __pyx_string_tab[446]
#define __pyx_kp_u_self_dom_offsets_self_oct_list_s __pyx_string_tab[447]
#define __pyx_kp_u_self_file_markers_cannot_be_conv __pyx_string_tab[448]
#define __pyx_n_u_send __pyx_string_tab[449]
#define __pyx_n_u_serial_BAC __pyx_string_tab[450]
#define __pyx_n_u_set_coarse_index_data_file __pyx_string_tab[451]
#define __pyx_n_u_set_name __pyx_string_tab[452]
#define __pyx_n_u_set_refined_index_data_file __pyx_string_tab[453]
#define __pyx_n_u_setstate __pyx_string_tab[454]
#define __pyx_n_u_setstate_cython __pyx_string_tab[455]
#define __pyx_n_u_sfiles __pyx_string_tab[456]
#define __pyx_n_u_sfiles_view __pyx_string_tab[457]
#define __pyx_n_u_shape __pyx_string_tab[458]
#define __pyx_n_u_signed __pyx_string_tab[459]
#define __pyx_n_u_size __pyx_string_tab[460]
#define __pyx_n_u_slct_arr __pyx_string_tab[461]
#define __pyx_n_u_solf __pyx_string_tab[462]
#define __pyx_n_u_sort __pyx_string_tab[463]
#define __pyx_n_u_spec __pyx_string_tab[464]
#define __pyx_n_u_split __pyx_string_tab[465]
#define __pyx_n_u_start __pyx_string_tab[466]
#define __pyx_n_u_step __pyx_string_tab[467]
#define __pyx_n_u_stop __pyx_string_tab[468]
#define __pyx_kp_u_strided_and_direct __pyx_string_tab[469]
#define __pyx_kp_u_strided_and_direct_or_indirect __pyx_string_tab[470]
#define __pyx_kp_u_strided_and_indirect __pyx_string_tab[471]
#define __pyx_kp_u_stringsource __pyx_string_tab[472]
#define __pyx_n_u_strip __pyx_string_tab[473]
#define __pyx_n_u_struct __pyx_string_tab[474]
#define __pyx_n_u_sub_mi1 __pyx_string_tab[475]
#define __pyx_n_u_sub_mi2 __pyx_string_tab[476]
#define __pyx_n_u_sum __pyx_string_tab[477]
#define __pyx_n_u_super __pyx_string_tab[478]
#define __pyx_n_u_test __pyx_string_tab[479]
#define __pyx_n_u_throw __pyx_string_tab[480]
#define __pyx_n_u_to_bytes __pyx_string_tab[481]
#define __pyx_n_u_tobytes __pyx_string_tab[482]
#define __pyx_n_u_total_particles __pyx_string_tab[483]
#define __pyx_n_u_total_pcount __pyx_string_tab[484]
#define __pyx_n_u_u8 __pyx_string_tab[485]
#define __pyx_n_u_uint32 __pyx_string_tab[486]
#define __pyx_n_u_uint64 __pyx_string_tab[487]
#define __pyx_n_u_uint8 __pyx_string_tab[488]
#define __pyx_kp_u_unable_to_allocate_array_data __pyx_string_tab[489]
#define __pyx_kp_u_unable_to_allocate_shape_and_str __pyx_string_tab[490]
#define __pyx_n_u_units __pyx_string_tab[491]
#define __pyx_n_u_unpack __pyx_string_tab[492]
#define __pyx_n_u_update __pyx_string_tab[493]
#define __pyx_n_u_update_mi2 __pyx_string_tab[494]
#define __pyx_n_u_value __pyx_string_tab[495]
#define __pyx_n_u_values __pyx_string_tab[496]
#define __pyx_n_u_vec_totref __pyx_string_tab[497]
#define __pyx_n_u_ver __pyx_string_tab[498]
#define __pyx_n_u_verbose __pyx_string_tab[499]
#define __pyx_n_u_visitor __pyx_string_tab[500]
#define __pyx_n_u_void __pyx_string_tab[501]
#define __pyx_n_u_where __pyx_string_tab[502]
#define __pyx_n_u_x __pyx_string_tab[503]
#define __pyx_n_u_yield_coordinates __pyx_string_tab[504]
#define __pyx_n_u_yt_funcs __pyx_string_tab[505]
#define __pyx_n_u_yt_geometry_particle_oct_contain __pyx_string_tab[506]
#define __pyx_kp_u_yt_geometry_particle_oct_contain_2 __pyx_string_tab[507]
#define __pyx_n_u_zeros __pyx_string_tab[508]
#define __pyx_n_u_zip __pyx_string_tab[509]
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_clear(PyObject *m) {
  __pyx_mstatetype *clear_module_state = __Pyx_PyModule_GetState(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __Pyx_State_RemoveModule(NULL);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_18selection_routines_OctreeSubsetSelector);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_18selection_routines_BooleanSelector);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_9utilities_3lib_20allocation_container_ObjectPool);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_13oct_container_OctObjectPool);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_13oct_container_RAMSESOctreeContainer);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_OctVisitor);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalOcts);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalCells);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_MarkOcts);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_MaskOcts);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_IndexOcts);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_MaskedIndexOcts);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_IndexMaskMapOcts);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_ICoordsOcts);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_IResOcts);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_FCoordsOcts);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_FWidthOcts);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayI64);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayF64);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_IdentifyOcts);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_AssignDomainInd);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesO);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesR);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_CountByDomain);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_StoreOctree);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_LoadOctree);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_MortonIndexOcts);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_StoreIndex);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellVisitor);
  Py_CLEAR(clear_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks);
  Py_CLEAR(clear_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
  Py_CLEAR(clear_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed);
  Py_CLEAR(clear_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet);
  Py_CLEAR(clear_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector);
  Py_CLEAR(clear_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet);
  Py_CLEAR(clear_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer);
  Py_CLEAR(clear_module_state->__pyx_type_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap);
  Py_CLEAR(clear_module_state->__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmap);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector);
  Py_CLEAR(clear_module_state->__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer);
  Py_CLEAR(clear_module_state->__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer);
  Py_CLEAR(clear_module_state->__pyx_ptype_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__);
  Py_CLEAR(clear_module_state->__pyx_type_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__);
  Py_CLEAR(clear_module_state->__pyx_array_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_array);
  Py_CLEAR(clear_module_state->__pyx_MemviewEnum_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_MemviewEnum);
  Py_CLEAR(clear_module_state->__pyx_memoryview_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_memoryview);
  Py_CLEAR(clear_module_state->__pyx_memoryviewslice_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_memoryviewslice);
  Py_CLEAR(clear_module_state->__pyx_k__14);
  Py_CLEAR(clear_module_state->__pyx_k__17);
  for (int i=0; i<3; ++i) { Py_CLEAR(clear_module_state->__pyx_slice[i]); }
  for (int i=0; i<13; ++i) { Py_CLEAR(clear_module_state->__pyx_tuple[i]); }
  for (int i=0; i<65; ++i) { Py_CLEAR(clear_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<510; ++i) { Py_CLEAR(clear_module_state->__pyx_string_tab[i]); }
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_int_5);
  Py_CLEAR(clear_module_state->__pyx_int_6);
  Py_CLEAR(clear_module_state->__pyx_int_8);
  Py_CLEAR(clear_module_state->__pyx_int_99);
  Py_CLEAR(clear_module_state->__pyx_int_128);
  Py_CLEAR(clear_module_state->__pyx_int_112105877);
  Py_CLEAR(clear_module_state->__pyx_int_136983863);
  Py_CLEAR(clear_module_state->__pyx_int_184977713);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstatetype *traverse_module_state = __Pyx_PyModule_GetState(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_tuple);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_bytes);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_18selection_routines_OctreeSubsetSelector);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_18selection_routines_BooleanSelector);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_9utilities_3lib_20allocation_container_ObjectPool);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_13oct_container_OctObjectPool);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_13oct_container_RAMSESOctreeContainer);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_OctVisitor);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalOcts);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalCells);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_MarkOcts);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_MaskOcts);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_IndexOcts);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_MaskedIndexOcts);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_IndexMaskMapOcts);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_ICoordsOcts);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_IResOcts);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_FCoordsOcts);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_FWidthOcts);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayI64);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayF64);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_IdentifyOcts);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_AssignDomainInd);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesO);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesR);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_CountByDomain);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_StoreOctree);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_LoadOctree);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_MortonIndexOcts);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_StoreIndex);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellVisitor);
  Py_VISIT(traverse_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks);
  Py_VISIT(traverse_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
  Py_VISIT(traverse_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed);
  Py_VISIT(traverse_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet);
  Py_VISIT(traverse_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector);
  Py_VISIT(traverse_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet);
  Py_VISIT(traverse_module_state->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer);
  Py_VISIT(traverse_module_state->__pyx_type_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap);
  Py_VISIT(traverse_module_state->__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmap);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector);
  Py_VISIT(traverse_module_state->__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer);
  Py_VISIT(traverse_module_state->__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer);
  Py_VISIT(traverse_module_state->__pyx_ptype_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__);
  Py_VISIT(traverse_module_state->__pyx_type_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__);
  Py_VISIT(traverse_module_state->__pyx_array_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_array);
  Py_VISIT(traverse_module_state->__pyx_MemviewEnum_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_MemviewEnum);
  Py_VISIT(traverse_module_state->__pyx_memoryview_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_memoryview);
  Py_VISIT(traverse_module_state->__pyx_memoryviewslice_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_memoryviewslice);
  Py_VISIT(traverse_module_state->__pyx_k__14);
  Py_VISIT(traverse_module_state->__pyx_k__17);
  for (int i=0; i<3; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_slice[i]); }
  for (int i=0; i<13; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_tuple[i]); }
  for (int i=0; i<65; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<510; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_string_tab[i]); }
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_0);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_1);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_2);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_3);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_4);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_5);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_6);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_8);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_99);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_128);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_112105877);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_136983863);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_184977713);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_int_neg_1);
  return 0;
}
#endif
/* #### Code section: module_code ### */

/* "carray.to_py":113
 * 
 * 
 * @cname("__Pyx_carray_to_py___pyx_t_5numpy_float64_t")             # <<<<<<<<<<<<<<
 * cdef inline list __Pyx_carray_to_py___pyx_t_5numpy_float64_t(base_type *v, Py_ssize_t length):
 *     cdef size_t i
*/

static CYTHON_INLINE PyObject *__Pyx_carray_to_py___pyx_t_5numpy_float64_t(__pyx_t_5numpy_float64_t *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_l = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_py___pyx_t_5numpy_float64_t", 0);

  /* "carray.to_py":117
 *     cdef size_t i
 *     cdef object value
 *     l = PyList_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
*/
  __pyx_t_1 = PyList_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_l = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":118
 *     cdef object value
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
*/
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":119
 *     l = PyList_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         __Pyx_PyList_SET_ITEM(l, i, value)
*/
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":120
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         __Pyx_PyList_SET_ITEM(l, i, value)
 *     return l
*/
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":121
 *         value = v[i]
 *         Py_INCREF(value)
 *         __Pyx_PyList_SET_ITEM(l, i, value)             # <<<<<<<<<<<<<<
 *     return l
 * 
*/
    __pyx_t_5 = __Pyx_PyList_SET_ITEM(__pyx_v_l, __pyx_v_i, __pyx_v_value); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 121, __pyx_L1_error)
  }

  /* "carray.to_py":122
 *         Py_INCREF(value)
 *         __Pyx_PyList_SET_ITEM(l, i, value)
 *     return l             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_l);
  __pyx_r = __pyx_v_l;
  goto __pyx_L0;

  /* "carray.to_py":113
 * 
 * 
 * @cname("__Pyx_carray_to_py___pyx_t_5numpy_float64_t")             # <<<<<<<<<<<<<<
 * cdef inline list __Pyx_carray_to_py___pyx_t_5numpy_float64_t(base_type *v, Py_ssize_t length):
 *     cdef size_t i
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_py___pyx_t_5numpy_float64_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "carray.to_py":125
 * 
 * 
 * @cname("__Pyx_carray_to_tuple___pyx_t_5numpy_float64_t")             # <<<<<<<<<<<<<<
 * cdef inline tuple __Pyx_carray_to_tuple___pyx_t_5numpy_float64_t(base_type *v, Py_ssize_t length):
 *     cdef size_t i
*/

static CYTHON_INLINE PyObject *__Pyx_carray_to_tuple___pyx_t_5numpy_float64_t(__pyx_t_5numpy_float64_t *__pyx_v_v, Py_ssize_t __pyx_v_length) {
  size_t __pyx_v_i;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_carray_to_tuple___pyx_t_5numpy_float64_t", 0);

  /* "carray.to_py":129
 *     cdef size_t i
 *     cdef object value
 *     t = PyTuple_New(length)             # <<<<<<<<<<<<<<
 *     for i in range(<size_t>length):
 *         value = v[i]
*/
  __pyx_t_1 = PyTuple_New(__pyx_v_length); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_t = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "carray.to_py":130
 *     cdef object value
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):             # <<<<<<<<<<<<<<
 *         value = v[i]
 *         Py_INCREF(value)
*/
  __pyx_t_2 = ((size_t)__pyx_v_length);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "carray.to_py":131
 *     t = PyTuple_New(length)
 *     for i in range(<size_t>length):
 *         value = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(value)
 *         __Pyx_PyTuple_SET_ITEM(t, i, value)
*/
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "carray.to_py":132
 *     for i in range(<size_t>length):
 *         value = v[i]
 *         Py_INCREF(value)             # <<<<<<<<<<<<<<
 *         __Pyx_PyTuple_SET_ITEM(t, i, value)
 *     return t
*/
    Py_INCREF(__pyx_v_value);

    /* "carray.to_py":133
 *         value = v[i]
 *         Py_INCREF(value)
 *         __Pyx_PyTuple_SET_ITEM(t, i, value)             # <<<<<<<<<<<<<<
 *     return t
*/
    __pyx_t_5 = __Pyx_PyTuple_SET_ITEM(__pyx_v_t, __pyx_v_i, __pyx_v_value); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 133, __pyx_L1_error)
  }

  /* "carray.to_py":134
 *         Py_INCREF(value)
 *         __Pyx_PyTuple_SET_ITEM(t, i, value)
 *     return t             # <<<<<<<<<<<<<<
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_t);
  __pyx_r = __pyx_v_t;
  goto __pyx_L0;

  /* "carray.to_py":125
 * 
 * 
 * @cname("__Pyx_carray_to_tuple___pyx_t_5numpy_float64_t")             # <<<<<<<<<<<<<<
 * cdef inline tuple __Pyx_carray_to_tuple___pyx_t_5numpy_float64_t(base_type *v, Py_ssize_t length):
 *     cdef size_t i
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("carray.to_py.__Pyx_carray_to_tuple___pyx_t_5numpy_float64_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py_size_t")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py_size_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

static PyObject *__pyx_convert_vector_to_py_size_t(std::vector<size_t>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_size_t", 0);

  /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_size_t")
 * cdef object __pyx_convert_vector_to_py_size_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":79
 * cdef object __pyx_convert_vector_to_py_size_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
*/
    PyErr_NoMemory(); __PYX_ERR(1, 79, __pyx_L1_error)

    /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_size_t")
 * cdef object __pyx_convert_vector_to_py_size_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  }

  /* "vector.to_py":80
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
*/
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":82
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
*/
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":87
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
*/
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":88
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)
*/
    __pyx_t_2 = __Pyx_PyLong_FromSize_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":89
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
*/
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":90
 *         item = v[i]
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
*/
    __pyx_t_6 = __Pyx_PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 90, __pyx_L1_error)
  }

  /* "vector.to_py":92
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py_size_t")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py_size_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_size_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":129
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
*/

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_shape,&__pyx_mstate_global->__pyx_n_u_itemsize,&__pyx_mstate_global->__pyx_n_u_format,&__pyx_mstate_global->__pyx_n_u_mode,&__pyx_mstate_global->__pyx_n_u_allocate_buffer,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 129, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(1, 129, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(1, 129, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(1, 129, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(1, 129, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 129, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(1, 129, __pyx_L3_error)
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_n_u_c));
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, i); __PYX_ERR(1, 129, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(1, 129, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(1, 129, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(1, 129, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(1, 129, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 129, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_n_u_c));
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 129, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 130, __pyx_L3_error)
    } else {

      /* "View.MemoryView":130
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
*/
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, __pyx_nargs); __PYX_ERR(1, 129, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(1, 129, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(1, 129, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":129
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_dim;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11[5];
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":135
 *         cdef Py_ssize_t dim
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
*/
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 135, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 135, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":136
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
*/
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":138
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
*/
  __pyx_t_2 = (!(__pyx_v_self->ndim != 0));
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":139
 * 
 *         if not self.ndim:
 *             raise ValueError, "Empty shape tuple for cython.array"             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
*/
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_mstate_global->__pyx_kp_u_Empty_shape_tuple_for_cython_arr, 0, 0);
    __PYX_ERR(1, 139, __pyx_L1_error)

    /* "View.MemoryView":138
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
*/
  }

  /* "View.MemoryView":141
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
*/
  __pyx_t_2 = (__pyx_v_itemsize <= 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":142
 * 
 *         if itemsize <= 0:
 *             raise ValueError, "itemsize <= 0 for cython.array"             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
*/
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_mstate_global->__pyx_kp_u_itemsize_0_for_cython_array, 0, 0);
    __PYX_ERR(1, 142, __pyx_L1_error)

    /* "View.MemoryView":141
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
*/
  }

  /* "View.MemoryView":144
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
*/
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_3 = (!__pyx_t_2);
  if (__pyx_t_3) {

    /* "View.MemoryView":145
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
*/
    __pyx_t_5 = __pyx_v_format;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ASCII};
      __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_encode, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":144
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
*/
  }

  /* "View.MemoryView":146
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
*/
  __pyx_t_4 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_4);
  if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_4))) __PYX_ERR(1, 146, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":147
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
*/
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 147, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 147, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":150
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
*/
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":151
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
*/
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":153
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError, "unable to allocate shape and strides."
 * 
*/
  __pyx_t_3 = (!(__pyx_v_self->_shape != 0));
  if (unlikely(__pyx_t_3)) {

    /* "View.MemoryView":154
 * 
 *         if not self._shape:
 *             raise MemoryError, "unable to allocate shape and strides."             # <<<<<<<<<<<<<<
 * 
 * 
*/
    __Pyx_Raise(__pyx_builtin_MemoryError, __pyx_mstate_global->__pyx_kp_u_unable_to_allocate_shape_and_str, 0, 0);
    __PYX_ERR(1, 154, __pyx_L1_error)

    /* "View.MemoryView":153
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError, "unable to allocate shape and strides."
 * 
*/
  }

  /* "View.MemoryView":157
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
*/
  __pyx_t_8 = 0;
  __pyx_t_4 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 157, __pyx_L1_error)
      #endif
      if (__pyx_t_1 >= __pyx_temp) break;
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1));
    #else
    __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1);
    #endif
    ++__pyx_t_1;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 157, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":158
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 *             self._shape[idx] = dim
*/
    __pyx_t_3 = (__pyx_v_dim <= 0);
    if (unlikely(__pyx_t_3)) {

      /* "View.MemoryView":159
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
*/
      __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_idx, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_dim, 0, ' ', 'd'); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11[0] = __pyx_mstate_global->__pyx_kp_u_Invalid_shape_in_axis;
      __pyx_t_11[1] = __pyx_t_5;
      __pyx_t_11[2] = __pyx_mstate_global->__pyx_kp_u_;
      __pyx_t_11[3] = __pyx_t_10;
      __pyx_t_11[4] = __pyx_mstate_global->__pyx_kp_u__2;
      __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_11, 5, 22 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5) + 2 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10) + 1, 127);
      if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_t_12, 0, 0);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __PYX_ERR(1, 159, __pyx_L1_error)

      /* "View.MemoryView":158
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 *             self._shape[idx] = dim
*/
    }

    /* "View.MemoryView":160
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
*/
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":157
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
*/
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "View.MemoryView":163
 * 
 *         cdef char order
 *         if mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
*/
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_mstate_global->__pyx_n_u_c, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 163, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "View.MemoryView":164
 *         cdef char order
 *         if mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         elif mode == 'fortran':
*/
    __pyx_v_order = 'C';

    /* "View.MemoryView":165
 *         if mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         elif mode == 'fortran':
 *             order = b'F'
*/
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_mstate_global->__pyx_n_u_c;

    /* "View.MemoryView":163
 * 
 *         cdef char order
 *         if mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
*/
    goto __pyx_L11;
  }

  /* "View.MemoryView":166
 *             order = b'C'
 *             self.mode = u'c'
 *         elif mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
*/
  __pyx_t_3 = (__Pyx_PyUnicode_Equals(__pyx_v_mode, __pyx_mstate_global->__pyx_n_u_fortran, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 166, __pyx_L1_error)
  if (likely(__pyx_t_3)) {

    /* "View.MemoryView":167
 *             self.mode = u'c'
 *         elif mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         else:
*/
    __pyx_v_order = 'F';

    /* "View.MemoryView":168
 *         elif mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError, f"Invalid mode, expected 'c' or 'fortran', got {mode}"
*/
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_mstate_global->__pyx_n_u_fortran;

    /* "View.MemoryView":166
 *             order = b'C'
 *             self.mode = u'c'
 *         elif mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
*/
    goto __pyx_L11;
  }

  /* "View.MemoryView":170
 *             self.mode = u'fortran'
 *         else:
 *             raise ValueError, f"Invalid mode, expected 'c' or 'fortran', got {mode}"             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides, itemsize, self.ndim, order)
*/
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_mode, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_kp_u_Invalid_mode_expected_c_or_fortr, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_t_12, 0, 0);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __PYX_ERR(1, 170, __pyx_L1_error)
  }
  __pyx_L11:;

  /* "View.MemoryView":172
 *             raise ValueError, f"Invalid mode, expected 'c' or 'fortran', got {mode}"
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides, itemsize, self.ndim, order)             # <<<<<<<<<<<<<<
 * 
 *         self.free_data = allocate_buffer
*/
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":174
 *         self.len = fill_contig_strides_array(self._shape, self._strides, itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 * 
*/
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":175
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 * 
 *         if allocate_buffer:
*/
  __pyx_t_12 = PyObject_RichCompare(__pyx_v_format, __pyx_mstate_global->__pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 175, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 175, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_3;

  /* "View.MemoryView":177
 *         self.dtype_is_object = format == b'O'
 * 
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 *             _allocate_buffer(self)
 * 
*/
  if (__pyx_v_allocate_buffer) {

    /* "View.MemoryView":178
 * 
 *         if allocate_buffer:
 *             _allocate_buffer(self)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
*/
    __pyx_t_8 = __pyx_array_allocate_buffer(__pyx_v_self); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(1, 178, __pyx_L1_error)

    /* "View.MemoryView":177
 *         self.dtype_is_object = format == b'O'
 * 
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 *             _allocate_buffer(self)
 * 
*/
  }

  /* "View.MemoryView":129
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":180
 *             _allocate_buffer(self)
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
*/

/* Python wrapper */
CYTHON_UNUSED static int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
CYTHON_UNUSED static int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (unlikely(__pyx_v_info == NULL)) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":182
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":
*/
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":183
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):             # <<<<<<<<<<<<<<
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
*/
  __pyx_t_1 = ((__pyx_v_flags & ((PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS) | PyBUF_ANY_CONTIGUOUS)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":184
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":
*/
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_mstate_global->__pyx_n_u_c, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 184, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":185
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
*/
      __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

      /* "View.MemoryView":184
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":
*/
      goto __pyx_L4;
    }

    /* "View.MemoryView":186
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):
*/
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_mstate_global->__pyx_n_u_fortran, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 186, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":187
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *             if not (flags & bufmode):
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
*/
      __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

      /* "View.MemoryView":186
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):
*/
    }
    __pyx_L4:;

    /* "View.MemoryView":188
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data
*/
    __pyx_t_1 = (!((__pyx_v_flags & __pyx_v_bufmode) != 0));
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":189
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
*/
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_mstate_global->__pyx_kp_u_Can_only_create_a_buffer_that_is, 0, 0);
      __PYX_ERR(1, 189, __pyx_L1_error)

      /* "View.MemoryView":188
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data
*/
    }

    /* "View.MemoryView":183
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):             # <<<<<<<<<<<<<<
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
*/
  }

  /* "View.MemoryView":190
 *             if not (flags & bufmode):
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 * 
*/
  __pyx_t_2 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_2;

  /* "View.MemoryView":191
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
*/
  __pyx_t_3 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_3;

  /* "View.MemoryView":193
 *         info.len = self.len
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.ndim = self.ndim
 *             info.shape = self._shape
*/
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":194
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *             info.shape = self._shape
 *             info.strides = self._strides
*/
    __pyx_t_4 = __pyx_v_self->ndim;
    __pyx_v_info->ndim = __pyx_t_4;

    /* "View.MemoryView":195
 *         if flags & PyBUF_STRIDES:
 *             info.ndim = self.ndim
 *             info.shape = self._shape             # <<<<<<<<<<<<<<
 *             info.strides = self._strides
 *         else:
*/
    __pyx_t_5 = __pyx_v_self->_shape;
    __pyx_v_info->shape = __pyx_t_5;

    /* "View.MemoryView":196
 *             info.ndim = self.ndim
 *             info.shape = self._shape
 *             info.strides = self._strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.ndim = 1
*/
    __pyx_t_5 = __pyx_v_self->_strides;
    __pyx_v_info->strides = __pyx_t_5;

    /* "View.MemoryView":193
 *         info.len = self.len
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.ndim = self.ndim
 *             info.shape = self._shape
*/
    goto __pyx_L6;
  }

  /* "View.MemoryView":198
 *             info.strides = self._strides
 *         else:
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.shape = &self.len if flags & PyBUF_ND else NULL
 *             info.strides = NULL
*/
  /*else*/ {
    __pyx_v_info->ndim = 1;

    /* "View.MemoryView":199
 *         else:
 *             info.ndim = 1
 *             info.shape = &self.len if flags & PyBUF_ND else NULL             # <<<<<<<<<<<<<<
 *             info.strides = NULL
 * 
*/
    __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
    if (__pyx_t_1) {
      __pyx_t_5 = (&__pyx_v_self->len);
    } else {
      __pyx_t_5 = NULL;
    }
    __pyx_v_info->shape = __pyx_t_5;

    /* "View.MemoryView":200
 *             info.ndim = 1
 *             info.shape = &self.len if flags & PyBUF_ND else NULL
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.suboffsets = NULL
*/
    __pyx_v_info->strides = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":202
 *             info.strides = NULL
 * 
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
*/
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":203
 * 
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL
*/
  __pyx_t_3 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "View.MemoryView":204
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL
 *         info.obj = self
*/
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":205
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
*/
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {
    __pyx_t_2 = __pyx_v_self->format;
  } else {
    __pyx_t_2 = NULL;
  }
  __pyx_v_info->format = __pyx_t_2;

  /* "View.MemoryView":206
 *         info.readonly = 0
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
*/
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":180
 *             _allocate_buffer(self)
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":208
 *         info.obj = self
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
*/

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_t_1;
  int __pyx_t_2;

  /* "View.MemoryView":209
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
*/
  __pyx_t_1 = (__pyx_v_self->callback_free_data != NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":210
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:
*/
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":209
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":211
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
*/
  if (__pyx_v_self->free_data) {
  } else {
    __pyx_t_1 = __pyx_v_self->free_data;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->data != NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":212
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)
*/
    if (__pyx_v_self->dtype_is_object) {

      /* "View.MemoryView":213
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)             # <<<<<<<<<<<<<<
 *             free(self.data)
 *         PyObject_Free(self._shape)
*/
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":212
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)
*/
    }

    /* "View.MemoryView":214
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
*/
    free(__pyx_v_self->data);

    /* "View.MemoryView":211
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
*/
  }
  __pyx_L3:;

  /* "View.MemoryView":215
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
*/
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":208
 *         info.obj = self
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
*/

  /* function exit code */
}

/* "View.MemoryView":217
 *         PyObject_Free(self._shape)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def memview(self):
 *         return self.get_memview()
*/

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":219
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":217
 *         PyObject_Free(self._shape)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def memview(self):
 *         return self.get_memview()
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":221
 *         return self.get_memview()
 * 
 *     @cname('get_memview')             # <<<<<<<<<<<<<<
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
*/

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":223
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
*/
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":224
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_memoryview_type);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_memoryview_type); 
  __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (4-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 224, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":221
 *         return self.get_memview()
 * 
 *     @cname('get_memview')             # <<<<<<<<<<<<<<
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":226
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
*/

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;

  /* "View.MemoryView":227
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
*/
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":226
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":229
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":230
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":229
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":232
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
*/

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":233
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":232
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":235
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
*/

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":236
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0))) __PYX_ERR(1, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":235
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":245
 *         pass
 * 
 * @cname("__pyx_array_allocate_buffer")             # <<<<<<<<<<<<<<
 * cdef int _allocate_buffer(array self) except -1:
 * 
*/

static int __pyx_array_allocate_buffer(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_i;
  PyObject **__pyx_v_p;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":252
 *     cdef PyObject **p
 * 
 *     self.free_data = True             # <<<<<<<<<<<<<<
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:
*/
  __pyx_v_self->free_data = 1;

  /* "View.MemoryView":253
 * 
 *     self.free_data = True
 *     self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *     if not self.data:
 *         raise MemoryError, "unable to allocate array data."
*/
  __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

  /* "View.MemoryView":254
 *     self.free_data = True
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:             # <<<<<<<<<<<<<<
 *         raise MemoryError, "unable to allocate array data."
 * 
*/
  __pyx_t_1 = (!(__pyx_v_self->data != 0));
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":255
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:
 *         raise MemoryError, "unable to allocate array data."             # <<<<<<<<<<<<<<
 * 
 *     if self.dtype_is_object:
*/
    __Pyx_Raise(__pyx_builtin_MemoryError, __pyx_mstate_global->__pyx_kp_u_unable_to_allocate_array_data, 0, 0);
    __PYX_ERR(1, 255, __pyx_L1_error)

    /* "View.MemoryView":254
 *     self.free_data = True
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:             # <<<<<<<<<<<<<<
 *         raise MemoryError, "unable to allocate array data."
 * 
*/
  }

  /* "View.MemoryView":257
 *         raise MemoryError, "unable to allocate array data."
 * 
 *     if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):
*/
  if (__pyx_v_self->dtype_is_object) {

    /* "View.MemoryView":258
 * 
 *     if self.dtype_is_object:
 *         p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *         for i in range(self.len // self.itemsize):
 *             p[i] = Py_None
*/
    __pyx_v_p = ((PyObject **)__pyx_v_self->data);

    /* "View.MemoryView":259
 *     if self.dtype_is_object:
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):             # <<<<<<<<<<<<<<
 *             p[i] = Py_None
 *             Py_INCREF(Py_None)
*/
    if (unlikely(__pyx_v_self->itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 259, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_self->itemsize == (Py_ssize_t)-1)  && unlikely(__Pyx_UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(1, 259, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_self->itemsize, 0);
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":260
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):
 *             p[i] = Py_None             # <<<<<<<<<<<<<<
 *             Py_INCREF(Py_None)
 *     return 0
*/
      (__pyx_v_p[__pyx_v_i]) = Py_None;

      /* "View.MemoryView":261
 *         for i in range(self.len // self.itemsize):
 *             p[i] = Py_None
 *             Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 *     return 0
 * 
*/
      Py_INCREF(Py_None);
    }

    /* "View.MemoryView":257
 *         raise MemoryError, "unable to allocate array data."
 * 
 *     if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):
*/
  }

  /* "View.MemoryView":262
 *             p[i] = Py_None
 *             Py_INCREF(Py_None)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":245
 *         pass
 * 
 * @cname("__pyx_array_allocate_buffer")             # <<<<<<<<<<<<<<
 * cdef int _allocate_buffer(array self) except -1:
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._allocate_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":265
 * 
 * 
 * @cname("__pyx_array_new")             # <<<<<<<<<<<<<<
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format, const char *c_mode, char *buf):
 *     cdef array result
*/

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char const *__pyx_v_c_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  PyObject *__pyx_v_mode = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":268
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format, const char *c_mode, char *buf):
 *     cdef array result
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.             # <<<<<<<<<<<<<<
 * 
 *     if buf is NULL:
*/
  __pyx_t_2 = ((__pyx_v_c_mode[0]) == 'f');
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_fortran);
    __pyx_t_1 = __pyx_mstate_global->__pyx_n_u_fortran;
  } else {
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_c);
    __pyx_t_1 = __pyx_mstate_global->__pyx_n_u_c;
  }
  __pyx_v_mode = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":270
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 * 
 *     if buf is NULL:             # <<<<<<<<<<<<<<
 *         result = array.__new__(array, shape, itemsize, format, mode)
 *     else:
*/
  __pyx_t_2 = (__pyx_v_buf == NULL);
  if (__pyx_t_2) {

    /* "View.MemoryView":271
 * 
 *     if buf is NULL:
 *         result = array.__new__(array, shape, itemsize, format, mode)             # <<<<<<<<<<<<<<
 *     else:
 *         result = array.__new__(array, shape, itemsize, format, mode, allocate_buffer=False)
*/
    __pyx_t_1 = PyLong_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_shape) != (0)) __PYX_ERR(1, 271, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1) != (0)) __PYX_ERR(1, 271, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3) != (0)) __PYX_ERR(1, 271, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_mode);
    __Pyx_GIVEREF(__pyx_v_mode);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_mode) != (0)) __PYX_ERR(1, 271, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_tp_new_array(((PyTypeObject *)__pyx_mstate_global->__pyx_array_type), __pyx_t_4, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 271, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":270
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 * 
 *     if buf is NULL:             # <<<<<<<<<<<<<<
 *         result = array.__new__(array, shape, itemsize, format, mode)
 *     else:
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":273
 *         result = array.__new__(array, shape, itemsize, format, mode)
 *     else:
 *         result = array.__new__(array, shape, itemsize, format, mode, allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
*/
  /*else*/ {
    __pyx_t_3 = PyLong_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_shape) != (0)) __PYX_ERR(1, 273, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3) != (0)) __PYX_ERR(1, 273, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4) != (0)) __PYX_ERR(1, 273, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_mode);
    __Pyx_GIVEREF(__pyx_v_mode);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_mode) != (0)) __PYX_ERR(1, 273, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_allocate_buffer, Py_False) < 0) __PYX_ERR(1, 273, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_tp_new_array(((PyTypeObject *)__pyx_mstate_global->__pyx_array_type), __pyx_t_1, __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 273, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":274
 *     else:
 *         result = array.__new__(array, shape, itemsize, format, mode, allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
*/
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":276
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":265
 * 
 * 
 * @cname("__pyx_array_new")             # <<<<<<<<<<<<<<
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format, const char *c_mode, char *buf):
 *     cdef array result
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_mode);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":302
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
*/

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_name,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 302, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 302, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__init__", 0) < 0) __PYX_ERR(1, 302, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, i); __PYX_ERR(1, 302, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 302, __pyx_L3_error)
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 302, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":303
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
*/
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":302
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
*/

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":304
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
*/

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":305
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":304
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
*/

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
*/
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name) != (0)) __PYX_ERR(1, 5, __pyx_L1_error);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
*/
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
*/
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
*/
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict) != (0)) __PYX_ERR(1, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
*/
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
*/
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
*/
  /*else*/ {
    __pyx_t_2 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_2;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 *     else:
*/
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_pyx_unpickle_Enum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self)))) != (0)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_int_136983863);
    __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_136983863);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_mstate_global->__pyx_int_136983863) != (0)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None) != (0)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3) != (0)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1) != (0)) __PYX_ERR(1, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state) != (0)) __PYX_ERR(1, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 *     else:
*/
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self)))) != (0)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_int_136983863);
    __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_136983863);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_mstate_global->__pyx_int_136983863) != (0)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state) != (0)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4) != (0)) __PYX_ERR(1, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1) != (0)) __PYX_ERR(1, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
*/

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 16, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 16, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 16, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 16, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 16, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
*/
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":347
 *     cdef const __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
*/

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_obj,&__pyx_mstate_global->__pyx_n_u_flags,&__pyx_mstate_global->__pyx_n_u_dtype_is_object,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 347, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(1, 347, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(1, 347, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 347, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(1, 347, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, i); __PYX_ERR(1, 347, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(1, 347, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(1, 347, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 347, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 347, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 347, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, __pyx_nargs); __PYX_ERR(1, 347, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_intptr_t __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":348
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
*/
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":349
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             PyObject_GetBuffer(obj, &self.view, flags)
*/
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":350
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             PyObject_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
*/
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_mstate_global->__pyx_memoryview_type));
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_obj != Py_None);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":351
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             PyObject_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
*/
    __pyx_t_3 = PyObject_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 351, __pyx_L1_error)

    /* "View.MemoryView":352
 *         if type(self) is memoryview or obj is not None:
 *             PyObject_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
*/
    __pyx_t_1 = (((PyObject *)__pyx_v_self->view.obj) == NULL);
    if (__pyx_t_1) {

      /* "View.MemoryView":353
 *             PyObject_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
*/
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":354
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
*/
      Py_INCREF(Py_None);

      /* "View.MemoryView":352
 *         if type(self) is memoryview or obj is not None:
 *             PyObject_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
*/
    }

    /* "View.MemoryView":350
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             PyObject_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
*/
  }

  /* "View.MemoryView":356
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if (__pyx_memoryview_thread_locks_used < 8 and
*/
  __pyx_t_1 = (!__PYX_CYTHON_ATOMICS_ENABLED());
  if (__pyx_t_1) {

    /* "View.MemoryView":358
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if (__pyx_memoryview_thread_locks_used < 8 and             # <<<<<<<<<<<<<<
 * 
 *                     not __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING()):
*/
    __pyx_t_2 = (__pyx_memoryview_thread_locks_used < 8);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L9_bool_binop_done;
    }

    /* "View.MemoryView":360
 *             if (__pyx_memoryview_thread_locks_used < 8 and
 * 
 *                     not __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING()):             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
*/
    __pyx_t_2 = (!__PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING());
    __pyx_t_1 = __pyx_t_2;
    __pyx_L9_bool_binop_done:;

    /* "View.MemoryView":358
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if (__pyx_memoryview_thread_locks_used < 8 and             # <<<<<<<<<<<<<<
 * 
 *                     not __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING()):
*/
    if (__pyx_t_1) {

      /* "View.MemoryView":361
 * 
 *                     not __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING()):
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
*/
      __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

      /* "View.MemoryView":362
 *                     not __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING()):
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
*/
      __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

      /* "View.MemoryView":358
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if (__pyx_memoryview_thread_locks_used < 8 and             # <<<<<<<<<<<<<<
 * 
 *                     not __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING()):
*/
    }

    /* "View.MemoryView":363
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
*/
    __pyx_t_1 = (__pyx_v_self->lock == NULL);
    if (__pyx_t_1) {

      /* "View.MemoryView":364
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *                 if self.lock is NULL:
 *                     raise MemoryError
*/
      __pyx_v_self->lock = PyThread_allocate_lock();

      /* "View.MemoryView":365
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
*/
      __pyx_t_1 = (__pyx_v_self->lock == NULL);
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":366
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 *                     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
*/
        PyErr_NoMemory(); __PYX_ERR(1, 366, __pyx_L1_error)

        /* "View.MemoryView":365
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
*/
      }

      /* "View.MemoryView":363
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
*/
    }

    /* "View.MemoryView":356
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if (__pyx_memoryview_thread_locks_used < 8 and
*/
  }

  /* "View.MemoryView":368
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
*/
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":369
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
*/
    __pyx_t_2 = ((__pyx_v_self->view.format[0]) == 'O');
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_self->view.format[1]) == '\x00');
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":368
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
*/
    goto __pyx_L13;
  }

  /* "View.MemoryView":371
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         assert <Py_intptr_t><void*>(&self.acquisition_count) % sizeof(__pyx_atomic_int_type) == 0
*/
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L13:;

  /* "View.MemoryView":373
 *             self.dtype_is_object = dtype_is_object
 * 
 *         assert <Py_intptr_t><void*>(&self.acquisition_count) % sizeof(__pyx_atomic_int_type) == 0             # <<<<<<<<<<<<<<
 *         self.typeinfo = NULL
 * 
*/
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_4 = ((Py_intptr_t)((void *)(&__pyx_v_self->acquisition_count)));
    __pyx_t_5 = (sizeof(__pyx_atomic_int_type));
    if (unlikely(__pyx_t_5 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 373, __pyx_L1_error)
    }
    __pyx_t_1 = ((__pyx_t_4 % __pyx_t_5) == 0);
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(1, 373, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(1, 373, __pyx_L1_error)
  #endif

  /* "View.MemoryView":374
 * 
 *         assert <Py_intptr_t><void*>(&self.acquisition_count) % sizeof(__pyx_atomic_int_type) == 0
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
*/
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":347
 *     cdef const __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":376
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             PyBuffer_Release(&self.view)
*/

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyThread_type_lock __pyx_t_5;
  PyThread_type_lock __pyx_t_6;

  /* "View.MemoryView":377
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
*/
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  if (__pyx_t_1) {

    /* "View.MemoryView":378
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             PyBuffer_Release(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
*/
    PyBuffer_Release((&__pyx_v_self->view));

    /* "View.MemoryView":377
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             PyBuffer_Release(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":379
 *         if self.obj is not None:
 *             PyBuffer_Release(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
*/
  __pyx_t_1 = (((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None);
  if (__pyx_t_1) {

    /* "View.MemoryView":381
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
*/
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":382
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
*/
    Py_DECREF(Py_None);

    /* "View.MemoryView":379
 *         if self.obj is not None:
 *             PyBuffer_Release(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
*/
  }
  __pyx_L3:;

  /* "View.MemoryView":386
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(0 if __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() else __pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
*/
  __pyx_t_1 = (__pyx_v_self->lock != NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":387
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(0 if __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() else __pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
*/
    __pyx_t_1 = __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING();
    if (__pyx_t_1) {
      __pyx_t_2 = 0;
    } else {
      __pyx_t_2 = __pyx_memoryview_thread_locks_used;
    }
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":388
 *         if self.lock != NULL:
 *             for i in range(0 if __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() else __pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
*/
      __pyx_t_1 = ((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock);
      if (__pyx_t_1) {

        /* "View.MemoryView":389
 *             for i in range(0 if __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() else __pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
*/
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":390
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
*/
        __pyx_t_1 = (__pyx_v_i != __pyx_memoryview_thread_locks_used);
        if (__pyx_t_1) {

          /* "View.MemoryView":392
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
*/
          __pyx_t_5 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":391
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
*/
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_5;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_6;

          /* "View.MemoryView":390
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
*/
        }

        /* "View.MemoryView":393
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
*/
        goto __pyx_L6_break;

        /* "View.MemoryView":388
 *         if self.lock != NULL:
 *             for i in range(0 if __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() else __pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
*/
      }
    }
    /*else*/ {

      /* "View.MemoryView":395
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
*/
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":386
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(0 if __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() else __pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
*/
  }

  /* "View.MemoryView":376
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             PyBuffer_Release(&self.view)
*/

  /* function exit code */
}

/* "View.MemoryView":397
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
*/

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":399
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
*/
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":401
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
*/
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 401, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 401, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_3);
        ++__pyx_t_3;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 401, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3));
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3);
        #endif
        ++__pyx_t_3;
      }
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 401, __pyx_L1_error)
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(1, 401, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":402
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
*/
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 402, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)0))) __PYX_ERR(1, 402, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":401
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
*/
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":404
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":397
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":407
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
*/

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":408
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
*/
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  if (__pyx_t_1) {

    /* "View.MemoryView":409
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":408
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
*/
  }

  /* "View.MemoryView":411
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
*/
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PyTuple_GET_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 411, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 411, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_indices = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "View.MemoryView":414
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
*/
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 414, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":415
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":414
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
*/
  }

  /* "View.MemoryView":417
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
*/
  /*else*/ {
    __pyx_t_5 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_5 == ((char *)0))) __PYX_ERR(1, 417, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_5;

    /* "View.MemoryView":418
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":407
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":420
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError, "Cannot assign to read-only memoryview"
*/

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":421
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError, "Cannot assign to read-only memoryview"
 * 
*/
  if (unlikely(__pyx_v_self->view.readonly)) {

    /* "View.MemoryView":422
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError, "Cannot assign to read-only memoryview"             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
*/
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_Cannot_assign_to_read_only_memor, 0, 0);
    __PYX_ERR(1, 422, __pyx_L1_error)

    /* "View.MemoryView":421
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError, "Cannot assign to read-only memoryview"
 * 
*/
  }

  /* "View.MemoryView":424
 *             raise TypeError, "Cannot assign to read-only memoryview"
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
*/
  __pyx_t_1 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PyTuple_GET_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 424, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 424, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":426
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj is not None:
*/
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 426, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":427
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj is not None:
 *                 self.setitem_slice_assignment(self[index], obj)
*/
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_obj = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "View.MemoryView":428
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj is not None:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
*/
    __pyx_t_4 = (__pyx_v_obj != Py_None);
    if (__pyx_t_4) {

      /* "View.MemoryView":429
 *             obj = self.is_slice(value)
 *             if obj is not None:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
*/
      __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_1, __pyx_v_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":428
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj is not None:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
*/
      goto __pyx_L5;
    }

    /* "View.MemoryView":431
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
*/
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_mstate_global->__pyx_memoryview_type))))) __PYX_ERR(1, 431, __pyx_L1_error)
      __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_3), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":426
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj is not None:
*/
    goto __pyx_L4;
  }

  /* "View.MemoryView":433
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
*/
  /*else*/ {
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":420
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError, "Cannot assign to read-only memoryview"
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":435
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
*/

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":436
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
*/
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_mstate_global->__pyx_memoryview_type); 
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "View.MemoryView":437
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
*/
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":438
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
*/
        __pyx_t_7 = NULL;
        __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_memoryview_type);
        __pyx_t_8 = ((PyObject *)__pyx_mstate_global->__pyx_memoryview_type); 
        __pyx_t_9 = __Pyx_PyLong_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 438, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_9);

        /* "View.MemoryView":439
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
*/
        __pyx_t_10 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 439, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = 1;
        {
          PyObject *__pyx_callargs[4] = {__pyx_t_7, __pyx_v_obj, __pyx_t_9, __pyx_t_10};
          __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_11, (4-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 438, __pyx_L4_error)
          __Pyx_GOTREF((PyObject *)__pyx_t_6);
        }
        __Pyx_DECREF_SET(__pyx_v_obj, ((PyObject *)__pyx_t_6));
        __pyx_t_6 = 0;

        /* "View.MemoryView":437
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
*/
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "View.MemoryView":440
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
*/
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_12) {
        __Pyx_ErrRestore(0,0,0);

        /* "View.MemoryView":441
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
*/
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;

      /* "View.MemoryView":437
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
*/
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":436
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
*/
  }

  /* "View.MemoryView":443
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":435
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":445
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
*/

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  __Pyx_memviewslice __pyx_v_msrc;
  __Pyx_memviewslice __pyx_v_mdst;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":448
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 *         cdef __Pyx_memviewslice msrc = get_slice_from_memview(src, &src_slice)[0]             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mdst = get_slice_from_memview(dst, &dst_slice)[0]
 * 
*/
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_mstate_global->__pyx_memoryview_type))))) __PYX_ERR(1, 448, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)0))) __PYX_ERR(1, 448, __pyx_L1_error)
  __pyx_v_msrc = (__pyx_t_1[0]);

  /* "View.MemoryView":449
 *         cdef __Pyx_memviewslice src_slice
 *         cdef __Pyx_memviewslice msrc = get_slice_from_memview(src, &src_slice)[0]
 *         cdef __Pyx_memviewslice mdst = get_slice_from_memview(dst, &dst_slice)[0]             # <<<<<<<<<<<<<<
 * 
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)
*/
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_mstate_global->__pyx_memoryview_type))))) __PYX_ERR(1, 449, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)0))) __PYX_ERR(1, 449, __pyx_L1_error)
  __pyx_v_mdst = (__pyx_t_1[0]);

  /* "View.MemoryView":451
 *         cdef __Pyx_memviewslice mdst = get_slice_from_memview(dst, &dst_slice)[0]
 * 
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
*/
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_mstate_global->__pyx_n_u_ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyLong_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_mstate_global->__pyx_n_u_ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyLong_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_memoryview_copy_contents(__pyx_v_msrc, __pyx_v_mdst, __pyx_t_3, __pyx_t_4, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 451, __pyx_L1_error)

  /* "View.MemoryView":445
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":453
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
*/

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":455
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
*/
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":460
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
*/
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)0))) __PYX_ERR(1, 460, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":462
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
*/
  __pyx_t_2 = (((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array)));
  if (__pyx_t_2) {

    /* "View.MemoryView":463
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
*/
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":464
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
*/
    __pyx_t_2 = (__pyx_v_tmp == NULL);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":465
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
*/
      PyErr_NoMemory(); __PYX_ERR(1, 465, __pyx_L1_error)

      /* "View.MemoryView":464
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
*/
    }

    /* "View.MemoryView":466
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
*/
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":462
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":468
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
*/
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":470
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
*/
  /*try:*/ {

    /* "View.MemoryView":471
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
*/
    if (__pyx_v_self->dtype_is_object) {

      /* "View.MemoryView":472
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
*/
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":471
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
*/
      goto __pyx_L8;
    }

    /* "View.MemoryView":474
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
*/
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 474, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":478
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
*/
    __pyx_t_2 = (__pyx_v_self->view.suboffsets != NULL);
    if (__pyx_t_2) {

      /* "View.MemoryView":479
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
*/
      __pyx_t_4 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 479, __pyx_L6_error)

      /* "View.MemoryView":478
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
*/
    }

    /* "View.MemoryView":480
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
*/
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":483
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
*/
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
       __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ( unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_XGIVEREF(__pyx_t_12);
      __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":453
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":485
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
*/

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":486
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)0))) __PYX_ERR(1, 486, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":487
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
*/
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":485
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":489
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
*/

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":492
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
*/
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_struct, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":495
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
*/
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":496
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":497
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError, "Unable to convert item to object"
*/
      __pyx_t_5 = __pyx_v_struct;
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 497, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = 0;
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_unpack, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 497, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":496
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
*/
    }

    /* "View.MemoryView":501
 *             raise ValueError, "Unable to convert item to object"
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
*/
    /*else:*/ {
      __pyx_t_8 = __Pyx_ssize_strlen(__pyx_v_self->view.format); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 501, __pyx_L5_except_error)
      __pyx_t_9 = (__pyx_t_8 == 1);
      if (__pyx_t_9) {

        /* "View.MemoryView":502
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
*/
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 502, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":501
 *             raise ValueError, "Unable to convert item to object"
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
*/
      }

      /* "View.MemoryView":503
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
*/
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "View.MemoryView":498
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Unable to convert item to object"
 *         else:
*/
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_6, &__pyx_t_5);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_mstate_global->__pyx_n_u_error); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 498, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_10);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_6, __pyx_t_5);
    __pyx_t_1 = 0; __pyx_t_6 = 0; __pyx_t_5 = 0;
    if (__pyx_t_11) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_1) < 0) __PYX_ERR(1, 498, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_1);

      /* "View.MemoryView":499
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError, "Unable to convert item to object"             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
*/
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_mstate_global->__pyx_kp_u_Unable_to_convert_item_to_object, 0, 0);
      __PYX_ERR(1, 499, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "View.MemoryView":496
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
*/
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":489
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":505
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
*/

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  char *__pyx_t_10;
  Py_ssize_t __pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":508
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
*/
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_struct, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":513
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
*/
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  if (__pyx_t_2) {

    /* "View.MemoryView":514
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
*/
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_mstate_global->__pyx_n_u_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3) != (0)) __PYX_ERR(1, 514, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_3))) __PYX_ERR(1, 514, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":513
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":516
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
*/
  /*else*/ {
    __pyx_t_5 = __pyx_v_struct;
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_pack, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_3))) __PYX_ERR(1, 516, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":518
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
*/
  __pyx_t_7 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(1, 518, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_8 = __pyx_v_bytesvalue;
  __pyx_t_10 = __Pyx_PyBytes_AsWritableString(__pyx_t_8); if (unlikely(__pyx_t_10 == ((char *)NULL))) __PYX_ERR(1, 518, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyBytes_GET_SIZE(__pyx_t_8); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(1, 518, __pyx_L1_error)
  __pyx_t_12 = (__pyx_t_10 + __pyx_t_11);
  for (__pyx_t_13 = __pyx_t_10; __pyx_t_13 < __pyx_t_12; __pyx_t_13++) {
    __pyx_t_9 = __pyx_t_13;
    __pyx_v_c = (__pyx_t_9[0]);

    /* "View.MemoryView":519
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
*/
    __pyx_v_i = __pyx_t_7;

    /* "View.MemoryView":518
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
*/
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":519
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
*/
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "View.MemoryView":505
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":521
 *             itemp[i] = c
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
*/

/* Python wrapper */
CYTHON_UNUSED static int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
CYTHON_UNUSED static int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  char *__pyx_t_4;
  void *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (unlikely(__pyx_v_info == NULL)) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":523
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
*/
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":524
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
*/
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_mstate_global->__pyx_kp_u_Cannot_create_writable_memory_vi, 0, 0);
    __PYX_ERR(1, 524, __pyx_L1_error)

    /* "View.MemoryView":523
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
*/
  }

  /* "View.MemoryView":526
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
*/
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":527
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
*/
    __pyx_t_3 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_3;

    /* "View.MemoryView":526
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
*/
    goto __pyx_L6;
  }

  /* "View.MemoryView":529
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
*/
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":531
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
*/
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":532
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
*/
    __pyx_t_3 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_3;

    /* "View.MemoryView":531
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
*/
    goto __pyx_L7;
  }

  /* "View.MemoryView":534
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
*/
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":536
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
*/
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":537
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
*/
    __pyx_t_3 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_3;

    /* "View.MemoryView":536
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
*/
    goto __pyx_L8;
  }

  /* "View.MemoryView":539
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
*/
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":541
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
*/
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":542
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
*/
    __pyx_t_4 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":541
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
*/
    goto __pyx_L9;
  }

  /* "View.MemoryView":544
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
*/
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":546
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
*/
  __pyx_t_5 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_5;

  /* "View.MemoryView":547
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
*/
  __pyx_t_6 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":548
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
*/
  __pyx_t_7 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_7;

  /* "View.MemoryView":549
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
*/
  __pyx_t_7 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_7;

  /* "View.MemoryView":550
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
*/
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":551
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":521
 *             itemp[i] = c
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":554
 * 
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
*/

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":556
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
*/
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_memoryviewslice_type))))) __PYX_ERR(1, 556, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":557
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
*/
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(1, 557, __pyx_L1_error)

  /* "View.MemoryView":558
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":554
 * 
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":560
 *         return result
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def base(self):
 *         return self._get_base()
*/

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":562
 *     @property
 *     def base(self):
 *         return self._get_base()             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_base(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->_get_base(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":560
 *         return result
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def base(self):
 *         return self._get_base()
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":564
 *         return self._get_base()
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
*/

static PyObject *__pyx_memoryview__get_base(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_base", 0);

  /* "View.MemoryView":565
 * 
 *     cdef _get_base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":564
 *         return self._get_base()
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":567
 *         return self.obj
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
*/

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_7genexpr__pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":569
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
*/
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
      __pyx_t_2 = __pyx_t_4;
      __pyx_7genexpr__pyx_v_length = (__pyx_t_2[0]);
      __pyx_t_5 = PyLong_FromSsize_t(__pyx_7genexpr__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 569, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":567
 *         return self.obj
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":571
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def strides(self):
 *         if self.view.strides == NULL:
*/

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_8genexpr1__pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":573
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError, "Buffer view does not expose strides"
*/
  __pyx_t_1 = (__pyx_v_self->view.strides == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":575
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError, "Buffer view does not expose strides"             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
*/
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_mstate_global->__pyx_kp_u_Buffer_view_does_not_expose_stri, 0, 0);
    __PYX_ERR(1, 575, __pyx_L1_error)

    /* "View.MemoryView":573
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError, "Buffer view does not expose strides"
*/
  }

  /* "View.MemoryView":577
 *             raise ValueError, "Buffer view does not expose strides"
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
*/
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_8genexpr1__pyx_v_stride = (__pyx_t_3[0]);
      __pyx_t_6 = PyLong_FromSsize_t(__pyx_8genexpr1__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 577, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  } /* exit inner scope */
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":571
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def strides(self):
 *         if self.view.strides == NULL:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":579
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
*/

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_8genexpr2__pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":581
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
*/
  __pyx_t_1 = (__pyx_v_self->view.suboffsets == NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":582
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PySequence_Multiply(__pyx_mstate_global->__pyx_tuple[0], __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":581
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
*/
  }

  /* "View.MemoryView":584
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
*/
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.suboffsets; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_8genexpr2__pyx_v_suboffset = (__pyx_t_3[0]);
      __pyx_t_6 = PyLong_FromSsize_t(__pyx_8genexpr2__pyx_v_suboffset); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 584, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  } /* exit inner scope */
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":579
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":586
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ndim(self):
 *         return self.view.ndim
*/

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":588
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":586
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ndim(self):
 *         return self.view.ndim
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":590
 *         return self.view.ndim
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def itemsize(self):
 *         return self.view.itemsize
*/

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":592
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":590
 *         return self.view.ndim
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def itemsize(self):
 *         return self.view.itemsize
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":594
 *         return self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nbytes(self):
 *         return self.size * self.view.itemsize
*/

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":596
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyLong_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":594
 *         return self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nbytes(self):
 *         return self.size * self.view.itemsize
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":598
 *         return self.size * self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def size(self):
 *         if self._size is None:
*/

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":600
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
*/
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  if (__pyx_t_1) {

    /* "View.MemoryView":601
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
*/
    __Pyx_INCREF(__pyx_mstate_global->__pyx_int_1);
    __pyx_v_result = __pyx_mstate_global->__pyx_int_1;

    /* "View.MemoryView":603
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
*/
    __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
      __pyx_t_2 = __pyx_t_4;
      __pyx_t_5 = PyLong_FromSsize_t((__pyx_t_2[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 603, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "View.MemoryView":604
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
*/
      __pyx_t_5 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_5);
      __pyx_t_5 = 0;
    }

    /* "View.MemoryView":606
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
*/
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":600
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
*/
  }

  /* "View.MemoryView":608
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":598
 *         return self.size * self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def size(self):
 *         if self._size is None:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":610
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
*/

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":611
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
*/
  __pyx_t_1 = (__pyx_v_self->view.ndim >= 1);
  if (__pyx_t_1) {

    /* "View.MemoryView":612
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
*/
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":611
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
*/
  }

  /* "View.MemoryView":614
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
*/
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":610
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":616
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
*/

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4[5];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":617
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_1), __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":618
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
*/
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_Format(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_x); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4[0] = __pyx_mstate_global->__pyx_kp_u_MemoryView_of;
  __pyx_t_4[1] = __pyx_t_2;
  __pyx_t_4[2] = __pyx_mstate_global->__pyx_kp_u_at_0x;
  __pyx_t_4[3] = __pyx_t_3;
  __pyx_t_4[4] = __pyx_mstate_global->__pyx_kp_u__3;

  /* "View.MemoryView":617
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
*/
  __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_4, 5, 15 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2) + 6 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3) + 1, 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3));
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":616
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":620
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3[3];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":621
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_t_1), __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3[0] = __pyx_mstate_global->__pyx_kp_u_MemoryView_of;
  __pyx_t_3[1] = __pyx_t_2;
  __pyx_t_3[2] = __pyx_mstate_global->__pyx_kp_u_object;
  __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, 15 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2) + 8, 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2));
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":620
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":624
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
*/

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("is_c_contig", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("is_c_contig", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":627
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
*/
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)0))) __PYX_ERR(1, 627, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":628
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":624
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":630
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
*/

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("is_f_contig", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("is_f_contig", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":633
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
*/
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)0))) __PYX_ERR(1, 633, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":634
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":630
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":636
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
*/

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("copy", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("copy", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":638
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
*/
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":640
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
*/
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":641
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
*/
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char const *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 641, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":646
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":636
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":648
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
*/

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("copy_fortran", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("copy_fortran", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":650
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
*/
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":652
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
*/
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":653
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
*/
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char const *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 653, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":658
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":648
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":661
 * 
 * 
 * @cname('__pyx_memoryview_new')             # <<<<<<<<<<<<<<
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, const __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
*/

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo const *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":663
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, const __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_memoryview_type);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_memoryview_type); 
  __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[4] = {__pyx_t_2, __pyx_v_o, __pyx_t_4, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (4-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 663, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":664
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, const __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
*/
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":665
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":661
 * 
 * 
 * @cname('__pyx_memoryview_new')             # <<<<<<<<<<<<<<
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, const __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":667
 *     return result
 * 
 * @cname('__pyx_memoryview_check')             # <<<<<<<<<<<<<<
 * cdef inline bint memoryview_check(object o) noexcept:
 *     return isinstance(o, memoryview)
*/

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":669
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o) noexcept:
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
*/
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_mstate_global->__pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":667
 *     return result
 * 
 * @cname('__pyx_memoryview_check')             # <<<<<<<<<<<<<<
 * cdef inline bint memoryview_check(object o) noexcept:
 *     return isinstance(o, memoryview)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":671
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
*/

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6[3];
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":677
 *     """
 *     cdef Py_ssize_t idx
 *     tup = <tuple>index if isinstance(index, tuple) else (index,)             # <<<<<<<<<<<<<<
 * 
 *     result = [slice(None)] * ndim
*/
  __pyx_t_2 = PyTuple_Check(__pyx_v_index); 
  if (__pyx_t_2) {
    __Pyx_INCREF(((PyObject*)__pyx_v_index));
    __pyx_t_1 = __pyx_v_index;
  } else {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index) != (0)) __PYX_ERR(1, 677, __pyx_L1_error);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_v_tup = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":679
 *     tup = <tuple>index if isinstance(index, tuple) else (index,)
 * 
 *     result = [slice(None)] * ndim             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
*/
  __pyx_t_1 = PyList_New(1 * ((__pyx_v_ndim<0) ? 0:__pyx_v_ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_ndim; __pyx_temp++) {
      __Pyx_INCREF(__pyx_mstate_global->__pyx_slice[0]);
      __Pyx_GIVEREF(__pyx_mstate_global->__pyx_slice[0]);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, __pyx_temp, __pyx_mstate_global->__pyx_slice[0]) != (0)) __PYX_ERR(1, 679, __pyx_L1_error);
    }
  }
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":680
 * 
 *     result = [slice(None)] * ndim
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     idx = 0
*/
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":681
 *     result = [slice(None)] * ndim
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     idx = 0
 *     for item in tup:
*/
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":682
 *     have_slices = False
 *     seen_ellipsis = False
 *     idx = 0             # <<<<<<<<<<<<<<
 *     for item in tup:
 *         if item is Ellipsis:
*/
  __pyx_v_idx = 0;

  /* "View.MemoryView":683
 *     seen_ellipsis = False
 *     idx = 0
 *     for item in tup:             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
*/
  if (unlikely(__pyx_v_tup == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 683, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 683, __pyx_L1_error)
      #endif
      if (__pyx_t_4 >= __pyx_temp) break;
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4));
    #else
    __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_4);
    #endif
    ++__pyx_t_4;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":684
 *     idx = 0
 *     for item in tup:
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)
*/
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    if (__pyx_t_2) {

      /* "View.MemoryView":685
 *     for item in tup:
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True
*/
      __pyx_t_2 = (!__pyx_v_seen_ellipsis);
      if (__pyx_t_2) {

        /* "View.MemoryView":686
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             have_slices = True
*/
        if (unlikely(__pyx_v_tup == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
          __PYX_ERR(1, 686, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(__pyx_v_tup); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 686, __pyx_L1_error)
        __pyx_v_idx = (__pyx_v_idx + (__pyx_v_ndim - __pyx_t_5));

        /* "View.MemoryView":687
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
*/
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":685
 *     for item in tup:
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True
*/
      }

      /* "View.MemoryView":688
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if isinstance(item, slice):
*/
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":684
 *     idx = 0
 *     for item in tup:
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)
*/
      goto __pyx_L5;
    }

    /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if isinstance(item, slice):             # <<<<<<<<<<<<<<
 *                 have_slices = True
 *             elif not PyIndex_Check(item):
*/
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      if (__pyx_t_2) {

        /* "View.MemoryView":691
 *         else:
 *             if isinstance(item, slice):
 *                 have_slices = True             # <<<<<<<<<<<<<<
 *             elif not PyIndex_Check(item):
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
*/
        __pyx_v_have_slices = 1;

        /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if isinstance(item, slice):             # <<<<<<<<<<<<<<
 *                 have_slices = True
 *             elif not PyIndex_Check(item):
*/
        goto __pyx_L7;
      }

      /* "View.MemoryView":692
 *             if isinstance(item, slice):
 *                 have_slices = True
 *             elif not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item
*/
      __pyx_t_2 = (!(PyIndex_Check(__pyx_v_item) != 0));
      if (unlikely(__pyx_t_2)) {

        /* "View.MemoryView":693
 *                 have_slices = True
 *             elif not PyIndex_Check(item):
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"             # <<<<<<<<<<<<<<
 *             result[idx] = item
 *         idx += 1
*/
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_item)), __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 693, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_6[0] = __pyx_mstate_global->__pyx_kp_u_Cannot_index_with_type;
        __pyx_t_6[1] = __pyx_t_3;
        __pyx_t_6[2] = __pyx_mstate_global->__pyx_kp_u__4;
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_6, 3, 24 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3) + 1, 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3));
        if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 693, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_builtin_TypeError, __pyx_t_7, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(1, 693, __pyx_L1_error)

        /* "View.MemoryView":692
 *             if isinstance(item, slice):
 *                 have_slices = True
 *             elif not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item
*/
      }
      __pyx_L7:;

      /* "View.MemoryView":694
 *             elif not PyIndex_Check(item):
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item             # <<<<<<<<<<<<<<
 *         idx += 1
 * 
*/
      if (unlikely((__Pyx_SetItemInt(__pyx_v_result, __pyx_v_idx, __pyx_v_item, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1) < 0))) __PYX_ERR(1, 694, __pyx_L1_error)
    }
    __pyx_L5:;

    /* "View.MemoryView":695
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item
 *         idx += 1             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - idx
*/
    __pyx_v_idx = (__pyx_v_idx + 1);

    /* "View.MemoryView":683
 *     seen_ellipsis = False
 *     idx = 0
 *     for item in tup:             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
*/
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":697
 *         idx += 1
 * 
 *     nslices = ndim - idx             # <<<<<<<<<<<<<<
 *     return have_slices or nslices, tuple(result)
 * 
*/
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_v_idx);

  /* "View.MemoryView":698
 * 
 *     nslices = ndim - idx
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:
*/
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_7 = PyLong_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_L9_bool_binop_done:;
  __pyx_t_7 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1) != (0)) __PYX_ERR(1, 698, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7) != (0)) __PYX_ERR(1, 698, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_r = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":671
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
*/

static int assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  int __pyx_r;
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":701
 * 
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError, "Indirect dimensions not supported"
*/
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":702
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Indirect dimensions not supported"
 *     return 0  # return type just used as an error flag
*/
    __pyx_t_4 = (__pyx_v_suboffset >= 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError, "Indirect dimensions not supported"             # <<<<<<<<<<<<<<
 *     return 0  # return type just used as an error flag
 * 
*/
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_mstate_global->__pyx_kp_u_Indirect_dimensions_not_supporte, 0, 0);
      __PYX_ERR(1, 703, __pyx_L1_error)

      /* "View.MemoryView":702
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Indirect dimensions not supported"
 *     return 0  # return type just used as an error flag
*/
    }
  }

  /* "View.MemoryView":704
 *         if suboffset >= 0:
 *             raise ValueError, "Indirect dimensions not supported"
 *     return 0  # return type just used as an error flag             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":710
 * 
 * 
 * @cname('__pyx_memview_slice')             # <<<<<<<<<<<<<<
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
*/

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  Py_ssize_t __pyx_v_cindex;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_3;
  char *__pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":712
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
*/
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":719
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
*/
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":723
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
*/
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (__pyx_v_memview->view.ndim > 0);
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(1, 723, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(1, 723, __pyx_L1_error)
  #endif

  /* "View.MemoryView":725
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
*/
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_mstate_global->__pyx_memoryviewslice_type); 
  if (__pyx_t_1) {

    /* "View.MemoryView":726
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
*/
    __pyx_t_2 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_memoryviewslice_type))))) __PYX_ERR(1, 726, __pyx_L1_error)
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":727
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
*/
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":725
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":729
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
*/
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":730
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
*/
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":736
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
*/
  __pyx_t_3 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_3;

  /* "View.MemoryView":737
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_t_4 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_4;

  /* "View.MemoryView":742
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step, cindex
*/
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":743
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step, cindex
 *     cdef bint have_start, have_stop, have_step
*/
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":747
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             cindex = index
*/
  __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_2 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 747, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 747, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        __pyx_t_8 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_6);
        ++__pyx_t_6;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(1, 747, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6));
        #else
        __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_6);
        #endif
        ++__pyx_t_6;
      }
      if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 747, __pyx_L1_error)
    } else {
      __pyx_t_8 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(1, 747, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_v_dim = __pyx_t_5;
    __pyx_t_5 = (__pyx_t_5 + 1);

    /* "View.MemoryView":748
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             cindex = index
 *             slice_memviewslice(
*/
    __pyx_t_1 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":749
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             cindex = index             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
*/
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 749, __pyx_L1_error)
      __pyx_v_cindex = __pyx_t_9;

      /* "View.MemoryView":750
 *         if PyIndex_Check(index):
 *             cindex = index
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
*/
      __pyx_t_10 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_cindex, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 750, __pyx_L1_error)

      /* "View.MemoryView":748
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             cindex = index
 *             slice_memviewslice(
*/
      goto __pyx_L6;
    }

    /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
*/
    __pyx_t_1 = (__pyx_v_index == Py_None);
    if (__pyx_t_1) {

      /* "View.MemoryView":757
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
*/
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":758
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
*/
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":759
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
*/
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":760
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
*/
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
*/
      goto __pyx_L6;
    }

    /* "View.MemoryView":762
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
*/
    /*else*/ {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_mstate_global->__pyx_n_u_start); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 762, __pyx_L1_error)
        __pyx_t_9 = __pyx_t_11;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_9 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_9;

      /* "View.MemoryView":763
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
*/
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_mstate_global->__pyx_n_u_stop); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 763, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 763, __pyx_L1_error)
        __pyx_t_9 = __pyx_t_11;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_9 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_9;

      /* "View.MemoryView":764
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
*/
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_mstate_global->__pyx_n_u_step); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 764, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 764, __pyx_L1_error)
        __pyx_t_9 = __pyx_t_11;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_9 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_9;

      /* "View.MemoryView":766
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
*/
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_mstate_global->__pyx_n_u_start); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = (__pyx_t_8 != Py_None);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":767
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
*/
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_mstate_global->__pyx_n_u_stop); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = (__pyx_t_8 != Py_None);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
*/
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_mstate_global->__pyx_n_u_step); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = (__pyx_t_8 != Py_None);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":770
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
*/
      __pyx_t_10 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(1, 770, __pyx_L1_error)

      /* "View.MemoryView":776
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
*/
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":747
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             cindex = index
*/
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
*/
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_mstate_global->__pyx_memoryviewslice_type); 
  if (__pyx_t_1) {

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
*/
    __Pyx_XDECREF((PyObject *)__pyx_r);

    /* "View.MemoryView":780
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
*/
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 780, __pyx_L1_error) }

    /* "View.MemoryView":781
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
*/
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 781, __pyx_L1_error) }

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
*/
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_memoryview_type))))) __PYX_ERR(1, 779, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
*/
  }

  /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
*/
  /*else*/ {
    __Pyx_XDECREF((PyObject *)__pyx_r);

    /* "View.MemoryView":785
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
*/
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
*/
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_memoryview_type))))) __PYX_ERR(1, 784, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":710
 * 
 * 
 * @cname('__pyx_memview_slice')             # <<<<<<<<<<<<<<
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":792
 * 
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')             # <<<<<<<<<<<<<<
 * cdef int slice_memviewslice(
 *         __Pyx_memviewslice *dst,
*/

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyGILState_STATE __pyx_gilstate_save;

  /* "View.MemoryView":813
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
*/
  __pyx_t_1 = (!__pyx_v_is_slice);
  if (__pyx_t_1) {

    /* "View.MemoryView":815
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
*/
    __pyx_t_1 = (__pyx_v_start < 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":816
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)
*/
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":815
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
*/
    }

    /* "View.MemoryView":817
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
*/
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = (!__pyx_t_1);
    if (__pyx_t_2) {

      /* "View.MemoryView":818
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
*/
      __pyx_t_3 = __pyx_memoryview_err_dim(PyExc_IndexError, __pyx_mstate_global->__pyx_kp_u_Index_out_of_bounds_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 818, __pyx_L1_error)

      /* "View.MemoryView":817
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
*/
    }

    /* "View.MemoryView":813
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":821
 *     else:
 * 
 *         if have_step:             # <<<<<<<<<<<<<<
 *             negative_step = step < 0
 *             if step == 0:
*/
  /*else*/ {
    __pyx_t_2 = (__pyx_v_have_step != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":822
 * 
 *         if have_step:
 *             negative_step = step < 0             # <<<<<<<<<<<<<<
 *             if step == 0:
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
*/
      __pyx_v_negative_step = (__pyx_v_step < 0);

      /* "View.MemoryView":823
 *         if have_step:
 *             negative_step = step < 0
 *             if step == 0:             # <<<<<<<<<<<<<<
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 *         else:
*/
      __pyx_t_2 = (__pyx_v_step == 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":824
 *             negative_step = step < 0
 *             if step == 0:
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             negative_step = False
*/
        __pyx_t_3 = __pyx_memoryview_err_dim(PyExc_ValueError, __pyx_mstate_global->__pyx_kp_u_Step_may_not_be_zero_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 824, __pyx_L1_error)

        /* "View.MemoryView":823
 *         if have_step:
 *             negative_step = step < 0
 *             if step == 0:             # <<<<<<<<<<<<<<
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 *         else:
*/
      }

      /* "View.MemoryView":821
 *     else:
 * 
 *         if have_step:             # <<<<<<<<<<<<<<
 *             negative_step = step < 0
 *             if step == 0:
*/
      goto __pyx_L6;
    }

    /* "View.MemoryView":826
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 *         else:
 *             negative_step = False             # <<<<<<<<<<<<<<
 *             step = 1
 * 
*/
    /*else*/ {
      __pyx_v_negative_step = 0;

      /* "View.MemoryView":827
 *         else:
 *             negative_step = False
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
*/
      __pyx_v_step = 1;
    }
    __pyx_L6:;

    /* "View.MemoryView":830
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
*/
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":831
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
*/
      __pyx_t_2 = (__pyx_v_start < 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":832
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
*/
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":833
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
*/
        __pyx_t_2 = (__pyx_v_start < 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":834
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
*/
          __pyx_v_start = 0;

          /* "View.MemoryView":833
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
*/
        }

        /* "View.MemoryView":831
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
*/
        goto __pyx_L9;
      }

      /* "View.MemoryView":835
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
*/
      __pyx_t_2 = (__pyx_v_start >= __pyx_v_shape);
      if (__pyx_t_2) {

        /* "View.MemoryView":836
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
*/
        if (__pyx_v_negative_step) {

          /* "View.MemoryView":837
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
*/
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":836
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
*/
          goto __pyx_L11;
        }

        /* "View.MemoryView":839
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
*/
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L11:;

        /* "View.MemoryView":835
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
*/
      }
      __pyx_L9:;

      /* "View.MemoryView":830
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
*/
      goto __pyx_L8;
    }

    /* "View.MemoryView":841
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
*/
    /*else*/ {
      if (__pyx_v_negative_step) {

        /* "View.MemoryView":842
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
*/
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":841
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
*/
        goto __pyx_L12;
      }

      /* "View.MemoryView":844
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
*/
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L12:;
    }
    __pyx_L8:;

    /* "View.MemoryView":846
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
*/
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":847
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
*/
      __pyx_t_2 = (__pyx_v_stop < 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":848
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
*/
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":849
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
*/
        __pyx_t_2 = (__pyx_v_stop < 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":850
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
*/
          __pyx_v_stop = 0;

          /* "View.MemoryView":849
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
*/
        }

        /* "View.MemoryView":847
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
*/
        goto __pyx_L14;
      }

      /* "View.MemoryView":851
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
*/
      __pyx_t_2 = (__pyx_v_stop > __pyx_v_shape);
      if (__pyx_t_2) {

        /* "View.MemoryView":852
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
*/
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":851
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
*/
      }
      __pyx_L14:;

      /* "View.MemoryView":846
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
*/
      goto __pyx_L13;
    }

    /* "View.MemoryView":854
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
*/
    /*else*/ {
      if (__pyx_v_negative_step) {

        /* "View.MemoryView":855
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
*/
        __pyx_v_stop = -1L;

        /* "View.MemoryView":854
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
*/
        goto __pyx_L16;
      }

      /* "View.MemoryView":857
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 * 
*/
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L16:;
    }
    __pyx_L13:;

    /* "View.MemoryView":861
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
*/
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":863
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
*/
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":864
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
*/
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":863
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
*/
    }

    /* "View.MemoryView":866
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
*/
    __pyx_t_2 = (__pyx_v_new_shape < 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":867
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
*/
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":866
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
*/
    }

    /* "View.MemoryView":870
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
*/
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":871
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
*/
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":872
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
*/
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":875
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
*/
  __pyx_t_2 = ((__pyx_v_suboffset_dim[0]) < 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":876
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
*/
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":875
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
*/
    goto __pyx_L19;
  }

  /* "View.MemoryView":878
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
*/
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L19:;

  /* "View.MemoryView":880
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
*/
  __pyx_t_2 = (__pyx_v_suboffset >= 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":881
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
*/
    __pyx_t_2 = (!__pyx_v_is_slice);
    if (__pyx_t_2) {

      /* "View.MemoryView":882
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
*/
      __pyx_t_2 = (__pyx_v_new_ndim == 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":883
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(PyExc_IndexError, "All dimensions preceding dimension %d "
*/
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":882
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
*/
        goto __pyx_L22;
      }

      /* "View.MemoryView":885
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(PyExc_IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
*/
      /*else*/ {

        /* "View.MemoryView":886
 *             else:
 *                 _err_dim(PyExc_IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
*/
        __pyx_t_3 = __pyx_memoryview_err_dim(PyExc_IndexError, __pyx_mstate_global->__pyx_kp_u_All_dimensions_preceding_dimensi, __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 885, __pyx_L1_error)
      }
      __pyx_L22:;

      /* "View.MemoryView":881
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
*/
      goto __pyx_L21;
    }

    /* "View.MemoryView":888
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
*/
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L21:;

    /* "View.MemoryView":880
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
*/
  }

  /* "View.MemoryView":890
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":792
 * 
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')             # <<<<<<<<<<<<<<
 * cdef int slice_memviewslice(
 *         __Pyx_memviewslice *dst,
*/

  /* function exit code */
  __pyx_L1_error:;
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":895
 * 
 * 
 * @cname('__pyx_pybuffer_index')             # <<<<<<<<<<<<<<
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
*/

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4[3];
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":898
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
*/
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":899
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
*/
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":902
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len // itemsize
 *         stride = itemsize
*/
  __pyx_t_2 = (__pyx_v_view->ndim == 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":903
 * 
 *     if view.ndim == 0:
 *         shape = view.len // itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
*/
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 903, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(__Pyx_UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(1, 903, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize, 0);

    /* "View.MemoryView":904
 *     if view.ndim == 0:
 *         shape = view.len // itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
*/
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":902
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len // itemsize
 *         stride = itemsize
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":906
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
*/
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":907
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
*/
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":908
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
*/
    __pyx_t_2 = (__pyx_v_view->suboffsets != NULL);
    if (__pyx_t_2) {

      /* "View.MemoryView":909
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
*/
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":908
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
*/
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":911
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
*/
  __pyx_t_2 = (__pyx_v_index < 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":912
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
*/
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":913
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
*/
    __pyx_t_2 = (__pyx_v_index < 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":914
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
*/
      __pyx_t_3 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_dim, 0, ' ', 'd'); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4[0] = __pyx_mstate_global->__pyx_kp_u_Out_of_bounds_on_buffer_access_a;
      __pyx_t_4[1] = __pyx_t_3;
      __pyx_t_4[2] = __pyx_mstate_global->__pyx_kp_u__5;
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, 37 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3) + 1, 127);
      if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_5, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 914, __pyx_L1_error)

      /* "View.MemoryView":913
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
*/
    }

    /* "View.MemoryView":911
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
*/
  }

  /* "View.MemoryView":916
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
*/
  __pyx_t_2 = (__pyx_v_index >= __pyx_v_shape);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":917
 * 
 *     if index >= shape:
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
*/
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_dim, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4[0] = __pyx_mstate_global->__pyx_kp_u_Out_of_bounds_on_buffer_access_a;
    __pyx_t_4[1] = __pyx_t_5;
    __pyx_t_4[2] = __pyx_mstate_global->__pyx_kp_u__5;
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, 37 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5) + 1, 127);
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 917, __pyx_L1_error)

    /* "View.MemoryView":916
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
*/
  }

  /* "View.MemoryView":919
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
*/
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":920
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
*/
  __pyx_t_2 = (__pyx_v_suboffset >= 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":921
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
*/
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":920
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
*/
  }

  /* "View.MemoryView":923
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":895
 * 
 * 
 * @cname('__pyx_pybuffer_index')             # <<<<<<<<<<<<<<
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":928
 * 
 * 
 * @cname('__pyx_memslice_transpose')             # <<<<<<<<<<<<<<
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) except -1 nogil:
 *     cdef int ndim = memslice.memview.view.ndim
*/

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyGILState_STATE __pyx_gilstate_save;

  /* "View.MemoryView":930
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) except -1 nogil:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
*/
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":932
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
*/
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":933
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":937
 * 
 *     cdef int i, j
 *     for i in range(ndim // 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
*/
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2, 1);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":938
 *     cdef int i, j
 *     for i in range(ndim // 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
*/
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":939
 *     for i in range(ndim // 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
*/
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":940
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
*/
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":942
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
*/
    __pyx_t_8 = ((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = ((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":943
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 0
*/
      __pyx_t_9 = __pyx_memoryview_err(PyExc_ValueError, __pyx_mstate_global->__pyx_kp_u_Cannot_transpose_memoryview_with); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 943, __pyx_L1_error)

      /* "View.MemoryView":942
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
*/
    }
  }

  /* "View.MemoryView":945
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":928
 * 
 * 
 * @cname('__pyx_memslice_transpose')             # <<<<<<<<<<<<<<
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) except -1 nogil:
 *     cdef int ndim = memslice.memview.view.ndim
*/

  /* function exit code */
  __pyx_L1_error:;
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":963
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
*/

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {

  /* "View.MemoryView":964
 * 
 *     def __dealloc__(self):
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
*/
  __PYX_XCLEAR_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":963
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
*/

  /* function exit code */
}

/* "View.MemoryView":966
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
*/

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":967
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
*/
  __pyx_t_1 = (__pyx_v_self->to_object_func != NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":968
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":967
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
*/
  }

  /* "View.MemoryView":970
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":966
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":972
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
*/

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":973
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
*/
  __pyx_t_1 = (__pyx_v_self->to_dtype_func != NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":974
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
*/
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 974, __pyx_L1_error)

    /* "View.MemoryView":973
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":976
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_base(self):
*/
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":972
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":978
 *             memoryview.assign_item_from_object(self, itemp, value)
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
*/

static PyObject *__pyx_memoryviewslice__get_base(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_base", 0);

  /* "View.MemoryView":979
 * 
 *     cdef _get_base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":978
 *             memoryview.assign_item_from_object(self, itemp, value)
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":998
 *     pass  # ignore failure, it's a minor issue
 * 
 * @cname('__pyx_memoryview_fromslice')             # <<<<<<<<<<<<<<
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,
 *                           int ndim,
*/

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo const *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
*/
  __pyx_t_1 = (((PyObject *)__pyx_v_memviewslice.memview) == Py_None);
  if (__pyx_t_1) {

    /* "View.MemoryView":1008
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
*/
  }

  /* "View.MemoryView":1013
 * 
 * 
 *     result = _memoryviewslice.__new__(_memoryviewslice, None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
*/
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None) != (0)) __PYX_ERR(1, 1013, __pyx_L1_error);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_int_0);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_mstate_global->__pyx_int_0) != (0)) __PYX_ERR(1, 1013, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2) != (0)) __PYX_ERR(1, 1013, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = ((PyObject *)__pyx_tp_new__memoryviewslice(((PyTypeObject *)__pyx_mstate_global->__pyx_memoryviewslice_type), __pyx_t_3, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1015
 *     result = _memoryviewslice.__new__(_memoryviewslice, None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
*/
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1016
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview)._get_base()
*/
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1018
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview)._get_base()             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
*/
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->__pyx_vtab)->_get_base(((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1019
 * 
 *     result.from_object = (<memoryview> memviewslice.memview)._get_base()
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
*/
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1021
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
*/
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1022
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
*/
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1023
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
*/
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1024
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
*/
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1025
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
*/
  Py_INCREF(Py_None);

  /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
*/
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1028
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
*/
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
*/
    goto __pyx_L4;
  }

  /* "View.MemoryView":1030
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
*/
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
*/
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1033
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1036
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
*/
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1037
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
*/
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
*/
    __pyx_t_1 = (__pyx_v_suboffset >= 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1039
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
*/
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1040
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
*/
      goto __pyx_L6_break;

      /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
*/
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1042
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
*/
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1043
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
*/
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyLong_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1044
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
*/
    __pyx_t_2 = PyLong_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1044, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1046
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
*/
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1047
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
*/
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1049
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":998
 *     pass  # ignore failure, it's a minor issue
 * 
 * @cname('__pyx_memoryview_fromslice')             # <<<<<<<<<<<<<<
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,
 *                           int ndim,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1051
 *     return result
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')             # <<<<<<<<<<<<<<
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,
 *                                                    __Pyx_memviewslice *mslice) except NULL:
*/

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
*/
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_mstate_global->__pyx_memoryviewslice_type); 
  if (__pyx_t_1) {

    /* "View.MemoryView":1056
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
*/
    __pyx_t_2 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_memoryviewslice_type))))) __PYX_ERR(1, 1056, __pyx_L1_error)
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1057
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
*/
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
*/
  }

  /* "View.MemoryView":1059
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
*/
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1060
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
*/
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1051
 *     return result
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')             # <<<<<<<<<<<<<<
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,
 *                                                    __Pyx_memviewslice *mslice) except NULL:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1062
 *         return mslice
 * 
 * @cname('__pyx_memoryview_slice_copy')             # <<<<<<<<<<<<<<
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst) noexcept:
 *     cdef int dim
*/

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;

  /* "View.MemoryView":1067
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
*/
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1068
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
*/
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1069
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
*/
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1071
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
*/
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1072
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
*/
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1074
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
*/
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1075
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
*/
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1076
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
*/
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1077
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
*/
    __pyx_t_6 = (__pyx_v_suboffsets != 0);
    if (__pyx_t_6) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1062
 *         return mslice
 * 
 * @cname('__pyx_memoryview_slice_copy')             # <<<<<<<<<<<<<<
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst) noexcept:
 *     cdef int dim
*/

  /* function exit code */
}

/* "View.MemoryView":1079
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 * @cname('__pyx_memoryview_copy_object')             # <<<<<<<<<<<<<<
 * cdef memoryview_copy(memoryview memview):
 *     "Create a new memoryview object"
*/

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1083
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
*/
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1084
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1079
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 * @cname('__pyx_memoryview_copy_object')             # <<<<<<<<<<<<<<
 * cdef memoryview_copy(memoryview memview):
 *     "Create a new memoryview object"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1086
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')             # <<<<<<<<<<<<<<
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):
 *     """
*/

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *(*__pyx_t_2)(char *);
  int (*__pyx_t_3)(char *, PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
*/
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_mstate_global->__pyx_memoryviewslice_type); 
  if (__pyx_t_1) {

    /* "View.MemoryView":1095
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
*/
    __pyx_t_2 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_2;

    /* "View.MemoryView":1096
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
*/
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_3;

    /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":1098
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
*/
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1099
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
*/
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1101
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
*/
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1103
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_t_4 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1086
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')             # <<<<<<<<<<<<<<
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):
 *     """
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) noexcept nogil:             # <<<<<<<<<<<<<<
 *     return -arg if arg < 0 else arg
 * 
*/

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;

  /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) noexcept nogil:
 *     return -arg if arg < 0 else arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
*/
  __pyx_t_2 = (__pyx_v_arg < 0);
  if (__pyx_t_2) {
    __pyx_t_1 = (-__pyx_v_arg);
  } else {
    __pyx_t_1 = __pyx_v_arg;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) noexcept nogil:             # <<<<<<<<<<<<<<
 *     return -arg if arg < 0 else arg
 * 
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1112
 *     return -arg if arg < 0 else arg
 * 
 * @cname('__pyx_get_best_slice_order')             # <<<<<<<<<<<<<<
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) noexcept nogil:
 *     """
*/

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1118
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
*/
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1119
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
*/
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1121
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
*/
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1122
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
*/
    __pyx_t_2 = ((__pyx_v_mslice->shape[__pyx_v_i]) > 1);
    if (__pyx_t_2) {

      /* "View.MemoryView":1123
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
*/
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1124
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
*/
      goto __pyx_L4_break;

      /* "View.MemoryView":1122
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
*/
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1126
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
*/
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1127
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
*/
    __pyx_t_2 = ((__pyx_v_mslice->shape[__pyx_v_i]) > 1);
    if (__pyx_t_2) {

      /* "View.MemoryView":1128
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
*/
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1129
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
*/
      goto __pyx_L7_break;

      /* "View.MemoryView":1127
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
*/
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1131
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
*/
  __pyx_t_2 = (abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride));
  if (__pyx_t_2) {

    /* "View.MemoryView":1132
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
*/
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1131
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
*/
  }

  /* "View.MemoryView":1134
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1112
 *     return -arg if arg < 0 else arg
 * 
 * @cname('__pyx_get_best_slice_order')             # <<<<<<<<<<<<<<
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) noexcept nogil:
 *     """
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1136
 *         return 'F'
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,
 *                                    char *dst_data, Py_ssize_t *dst_strides,
*/

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;

  /* "View.MemoryView":1144
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
*/
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1145
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
*/
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1146
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
*/
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1147
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
*/
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1149
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         if (src_stride > 0 and dst_stride > 0 and
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
*/
  __pyx_t_1 = (__pyx_v_ndim == 1);
  if (__pyx_t_1) {

    /* "View.MemoryView":1150
 * 
 *     if ndim == 1:
 *         if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
*/
    __pyx_t_2 = (__pyx_v_src_stride > 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_dst_stride > 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1151
 *     if ndim == 1:
 *         if (src_stride > 0 and dst_stride > 0 and
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
 *         else:
*/
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1150
 * 
 *     if ndim == 1:
 *         if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
*/
    if (__pyx_t_1) {

      /* "View.MemoryView":1152
 *         if (src_stride > 0 and dst_stride > 0 and
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 *             memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(dst_extent):
*/
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1150
 * 
 *     if ndim == 1:
 *         if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
*/
      goto __pyx_L4;
    }

    /* "View.MemoryView":1154
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
 *         else:
 *             for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                 memcpy(dst_data, src_data, itemsize)
 *                 src_data += src_stride
*/
    /*else*/ {
      __pyx_t_3 = __pyx_v_dst_extent;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "View.MemoryView":1155
 *         else:
 *             for i in range(dst_extent):
 *                 memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                 src_data += src_stride
 *                 dst_data += dst_stride
*/
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1156
 *             for i in range(dst_extent):
 *                 memcpy(dst_data, src_data, itemsize)
 *                 src_data += src_stride             # <<<<<<<<<<<<<<
 *                 dst_data += dst_stride
 *     else:
*/
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1157
 *                 memcpy(dst_data, src_data, itemsize)
 *                 src_data += src_stride
 *                 dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
*/
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1149
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         if (src_stride > 0 and dst_stride > 0 and
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":1159
 *                 dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
*/
  /*else*/ {
    __pyx_t_3 = __pyx_v_dst_extent;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":1160
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
*/
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1164
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
*/
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1165
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
*/
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1136
 *         return 'F'
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,
 *                                    char *dst_data, Py_ssize_t *dst_strides,
*/

  /* function exit code */
}

/* "View.MemoryView":1167
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) noexcept nogil:
*/

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1170
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) noexcept nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
*/
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1167
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) noexcept nogil:
*/

  /* function exit code */
}

/* "View.MemoryView":1173
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 * @cname('__pyx_memoryview_slice_get_size')             # <<<<<<<<<<<<<<
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) noexcept nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
*/

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1176
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) noexcept nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
*/
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1178
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
*/
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1179
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
*/
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1181
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
*/
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1173
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 * @cname('__pyx_memoryview_slice_get_size')             # <<<<<<<<<<<<<<
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) noexcept nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1183
 *     return size
 * 
 * @cname('__pyx_fill_contig_strides_array')             # <<<<<<<<<<<<<<
 * cdef Py_ssize_t fill_contig_strides_array(
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
*/

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1193
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
*/
  __pyx_t_1 = (__pyx_v_order == 'F');
  if (__pyx_t_1) {

    /* "View.MemoryView":1194
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
*/
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1195
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
*/
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1196
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
*/
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1193
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":1198
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
*/
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1199
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
*/
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1200
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
*/
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1202
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
*/
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1183
 *     return size
 * 
 * @cname('__pyx_fill_contig_strides_array')             # <<<<<<<<<<<<<<
 * cdef Py_ssize_t fill_contig_strides_array(
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1204
 *     return stride
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')             # <<<<<<<<<<<<<<
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,
 *                              __Pyx_memviewslice *tmpslice,
*/

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyGILState_STATE __pyx_gilstate_save;

  /* "View.MemoryView":1216
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
*/
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1217
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
*/
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1219
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err_no_memory()
*/
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1220
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err_no_memory()
 * 
*/
  __pyx_t_2 = (!(__pyx_v_result != 0));
  if (__pyx_t_2) {

    /* "View.MemoryView":1221
 *     result = malloc(size)
 *     if not result:
 *         _err_no_memory()             # <<<<<<<<<<<<<<
 * 
 * 
*/
    __pyx_t_3 = __pyx_memoryview_err_no_memory(); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 1221, __pyx_L1_error)

    /* "View.MemoryView":1220
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err_no_memory()
 * 
*/
  }

  /* "View.MemoryView":1224
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
*/
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1225
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
*/
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1226
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
*/
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1227
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
*/
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1228
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize, ndim, order)
*/
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1230
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize, ndim, order)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1233
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
*/
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1234
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
*/
    __pyx_t_2 = ((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1);
    if (__pyx_t_2) {

      /* "View.MemoryView":1235
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
*/
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1234
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
*/
    }
  }

  /* "View.MemoryView":1237
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
*/
  __pyx_t_2 = __pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim);
  if (__pyx_t_2) {

    /* "View.MemoryView":1238
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
*/
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1237
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
*/
    goto __pyx_L9;
  }

  /* "View.MemoryView":1240
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
*/
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1242
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1204
 *     return stride
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')             # <<<<<<<<<<<<<<
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,
 *                              __Pyx_memviewslice *tmpslice,
*/

  /* function exit code */
  __pyx_L1_error:;
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1246
 * 
 * 
 * @cname('__pyx_memoryview_err_extents')             # <<<<<<<<<<<<<<
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
*/

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4[7];
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1249
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError, f"got differing extents in dimension {i} (got {extent1} and {extent2})"             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
*/
  __pyx_t_1 = __Pyx_PyUnicode_From_int(__pyx_v_i, 0, ' ', 'd'); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_extent1, 0, ' ', 'd'); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_extent2, 0, ' ', 'd'); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4[0] = __pyx_mstate_global->__pyx_kp_u_got_differing_extents_in_dimensi;
  __pyx_t_4[1] = __pyx_t_1;
  __pyx_t_4[2] = __pyx_mstate_global->__pyx_kp_u_got;
  __pyx_t_4[3] = __pyx_t_2;
  __pyx_t_4[4] = __pyx_mstate_global->__pyx_kp_u_and;
  __pyx_t_4[5] = __pyx_t_3;
  __pyx_t_4[6] = __pyx_mstate_global->__pyx_kp_u__5;
  __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_4, 7, 35 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1) + 6 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2) + 5 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3) + 1, 127);
  if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_builtin_ValueError, __pyx_t_5, 0, 0);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __PYX_ERR(1, 1249, __pyx_L1_error)

  /* "View.MemoryView":1246
 * 
 * 
 * @cname('__pyx_memoryview_err_extents')             # <<<<<<<<<<<<<<
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  return __pyx_r;
}

/* "View.MemoryView":1251
 *     raise ValueError, f"got differing extents in dimension {i} (got {extent1} and {extent2})"
 * 
 * @cname('__pyx_memoryview_err_dim')             # <<<<<<<<<<<<<<
 * cdef int _err_dim(PyObject *error, str msg, int dim) except -1 with gil:
 *     raise <object>error, msg % dim
*/

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, PyObject *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_msg);

  /* "View.MemoryView":1253
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(PyObject *error, str msg, int dim) except -1 with gil:
 *     raise <object>error, msg % dim             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
*/
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyUnicode_FormatSafe(__pyx_v_msg, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(((PyObject *)__pyx_v_error), __pyx_t_2, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(1, 1253, __pyx_L1_error)

  /* "View.MemoryView":1251
 *     raise ValueError, f"got differing extents in dimension {i} (got {extent1} and {extent2})"
 * 
 * @cname('__pyx_memoryview_err_dim')             # <<<<<<<<<<<<<<
 * cdef int _err_dim(PyObject *error, str msg, int dim) except -1 with gil:
 *     raise <object>error, msg % dim
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_RefNannyFinishContext();
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  return __pyx_r;
}

/* "View.MemoryView":1255
 *     raise <object>error, msg % dim
 * 
 * @cname('__pyx_memoryview_err')             # <<<<<<<<<<<<<<
 * cdef int _err(PyObject *error, str msg) except -1 with gil:
 *     raise <object>error, msg
*/

static int __pyx_memoryview_err(PyObject *__pyx_v_error, PyObject *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_msg);

  /* "View.MemoryView":1257
 * @cname('__pyx_memoryview_err')
 * cdef int _err(PyObject *error, str msg) except -1 with gil:
 *     raise <object>error, msg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_no_memory')
*/
  __Pyx_Raise(((PyObject *)__pyx_v_error), __pyx_v_msg, 0, 0);
  __PYX_ERR(1, 1257, __pyx_L1_error)

  /* "View.MemoryView":1255
 *     raise <object>error, msg % dim
 * 
 * @cname('__pyx_memoryview_err')             # <<<<<<<<<<<<<<
 * cdef int _err(PyObject *error, str msg) except -1 with gil:
 *     raise <object>error, msg
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_RefNannyFinishContext();
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  return __pyx_r;
}

/* "View.MemoryView":1259
 *     raise <object>error, msg
 * 
 * @cname('__pyx_memoryview_err_no_memory')             # <<<<<<<<<<<<<<
 * cdef int _err_no_memory() except -1 with gil:
 *     raise MemoryError
*/

static int __pyx_memoryview_err_no_memory(void) {
  int __pyx_r;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

  /* "View.MemoryView":1261
 * @cname('__pyx_memoryview_err_no_memory')
 * cdef int _err_no_memory() except -1 with gil:
 *     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 * 
*/
  PyErr_NoMemory(); __PYX_ERR(1, 1261, __pyx_L1_error)

  /* "View.MemoryView":1259
 *     raise <object>error, msg
 * 
 * @cname('__pyx_memoryview_err_no_memory')             # <<<<<<<<<<<<<<
 * cdef int _err_no_memory() except -1 with gil:
 *     raise MemoryError
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._err_no_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  return __pyx_r;
}

/* "View.MemoryView":1264
 * 
 * 
 * @cname('__pyx_memoryview_copy_contents')             # <<<<<<<<<<<<<<
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,
 *                                   __Pyx_memviewslice dst,
*/

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyGILState_STATE __pyx_gilstate_save;

  /* "View.MemoryView":1273
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
*/
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1274
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
*/
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1276
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
*/
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1277
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
*/
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1278
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
*/
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1281
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
*/
  __pyx_t_2 = (__pyx_v_src_ndim < __pyx_v_dst_ndim);
  if (__pyx_t_2) {

    /* "View.MemoryView":1282
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
*/
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1281
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":1283
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
*/
  __pyx_t_2 = (__pyx_v_dst_ndim < __pyx_v_src_ndim);
  if (__pyx_t_2) {

    /* "View.MemoryView":1284
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
*/
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1283
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
*/
  }
  __pyx_L3:;

  /* "View.MemoryView":1286
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
*/
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  __pyx_t_2 = (__pyx_t_3 > __pyx_t_4);
  if (__pyx_t_2) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1288
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
*/
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1289
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
*/
    __pyx_t_2 = ((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i]));
    if (__pyx_t_2) {

      /* "View.MemoryView":1290
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
*/
      __pyx_t_2 = ((__pyx_v_src.shape[__pyx_v_i]) == 1);
      if (__pyx_t_2) {

        /* "View.MemoryView":1291
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
*/
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1292
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
*/
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1290
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
*/
        goto __pyx_L7;
      }

      /* "View.MemoryView":1294
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
*/
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1294, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1289
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
*/
    }

    /* "View.MemoryView":1296
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
*/
    __pyx_t_2 = ((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1297
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
*/
      __pyx_t_6 = __pyx_memoryview_err_dim(PyExc_ValueError, __pyx_mstate_global->__pyx_kp_u_Dimension_d_is_not_direct, __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1297, __pyx_L1_error)

      /* "View.MemoryView":1296
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
*/
    }
  }

  /* "View.MemoryView":1299
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
*/
  __pyx_t_2 = __pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);
  if (__pyx_t_2) {

    /* "View.MemoryView":1301
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
*/
    __pyx_t_2 = (!__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim));
    if (__pyx_t_2) {

      /* "View.MemoryView":1302
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
*/
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1301
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
*/
    }

    /* "View.MemoryView":1304
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
*/
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)0))) __PYX_ERR(1, 1304, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1305
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
*/
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1299
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
*/
  }

  /* "View.MemoryView":1307
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_t_2 = (!__pyx_v_broadcasting);
  if (__pyx_t_2) {

    /* "View.MemoryView":1310
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
*/
    __pyx_t_2 = __pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim);
    if (__pyx_t_2) {

      /* "View.MemoryView":1311
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
*/
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1310
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
*/
      goto __pyx_L12;
    }

    /* "View.MemoryView":1312
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
*/
    __pyx_t_2 = __pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim);
    if (__pyx_t_2) {

      /* "View.MemoryView":1313
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
*/
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1312
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
*/
    }
    __pyx_L12:;

    /* "View.MemoryView":1315
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
*/
    if (__pyx_v_direct_copy) {

      /* "View.MemoryView":1317
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
*/
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1318
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 *             free(tmpdata)
*/
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1319
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
*/
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1320
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
*/
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1321
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
*/
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1315
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
*/
    }

    /* "View.MemoryView":1307
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
*/
  }

  /* "View.MemoryView":1323
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  if (__pyx_t_2) {

    /* "View.MemoryView":1326
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
*/
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 1326, __pyx_L1_error)

    /* "View.MemoryView":1327
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)
*/
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 1327, __pyx_L1_error)

    /* "View.MemoryView":1323
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
*/
  }

  /* "View.MemoryView":1329
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)
*/
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1330
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 * 
*/
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1331
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
*/
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1333
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
*/
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1334
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
*/
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1264
 * 
 * 
 * @cname('__pyx_memoryview_copy_contents')             # <<<<<<<<<<<<<<
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,
 *                                   __Pyx_memviewslice dst,
*/

  /* function exit code */
  __pyx_L1_error:;
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1336
 *     return 0
 * 
 * @cname('__pyx_memoryview_broadcast_leading')             # <<<<<<<<<<<<<<
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,
 *                             int ndim,
*/

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1341
 *                             int ndim_other) noexcept nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
*/
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1343
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
*/
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1344
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
*/
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1345
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
*/
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1346
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
*/
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1348
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
*/
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1349
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
*/
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1350
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
*/
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1351
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
*/
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1336
 *     return 0
 * 
 * @cname('__pyx_memoryview_broadcast_leading')             # <<<<<<<<<<<<<<
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,
 *                             int ndim,
*/

  /* function exit code */
}

/* "View.MemoryView":1358
 * 
 * 
 * @cname('__pyx_memoryview_refcount_copying')             # <<<<<<<<<<<<<<
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) noexcept nogil:
 * 
*/

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {

  /* "View.MemoryView":1361
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) noexcept nogil:
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)
 * 
*/
  if (__pyx_v_dtype_is_object) {

    /* "View.MemoryView":1362
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
*/
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1361
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) noexcept nogil:
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)
 * 
*/
  }

  /* "View.MemoryView":1358
 * 
 * 
 * @cname('__pyx_memoryview_refcount_copying')             # <<<<<<<<<<<<<<
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) noexcept nogil:
 * 
*/

  /* function exit code */
}

/* "View.MemoryView":1364
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')             # <<<<<<<<<<<<<<
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,
 *                                              Py_ssize_t *strides, int ndim,
*/

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();

  /* "View.MemoryView":1368
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) noexcept with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
*/
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1364
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')             # <<<<<<<<<<<<<<
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,
 *                                              Py_ssize_t *strides, int ndim,
*/

  /* function exit code */
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
}

/* "View.MemoryView":1370
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')             # <<<<<<<<<<<<<<
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,
 *                                     Py_ssize_t *strides, int ndim, bint inc) noexcept:
*/

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1374
 *                                     Py_ssize_t *strides, int ndim, bint inc) noexcept:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(shape[0]):
*/
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1376
 *     cdef Py_ssize_t stride = strides[0]
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
*/
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1377
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
*/
    __pyx_t_4 = (__pyx_v_ndim == 1);
    if (__pyx_t_4) {

      /* "View.MemoryView":1378
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
*/
      if (__pyx_v_inc) {

        /* "View.MemoryView":1379
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
*/
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1378
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
*/
        goto __pyx_L6;
      }

      /* "View.MemoryView":1381
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1, ndim - 1, inc)
*/
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1377
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
*/
      goto __pyx_L5;
    }

    /* "View.MemoryView":1383
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1, ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += stride
*/
    /*else*/ {
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1385
 *             refcount_objects_in_slice(data, shape + 1, strides + 1, ndim - 1, inc)
 * 
 *         data += stride             # <<<<<<<<<<<<<<
 * 
 * 
*/
    __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
  }

  /* "View.MemoryView":1370
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')             # <<<<<<<<<<<<<<
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,
 *                                     Py_ssize_t *strides, int ndim, bint inc) noexcept:
*/

  /* function exit code */
}

/* "View.MemoryView":1390
 * 
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')             # <<<<<<<<<<<<<<
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,
 *                               size_t itemsize, void *item,
*/

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1394
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) noexcept nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, inc=False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim, itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, inc=True)
*/
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1395
 *                               bint dtype_is_object) noexcept nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, inc=False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim, itemsize, item)             # <<<<<<<<<<<<<<
 *     refcount_copying(dst, dtype_is_object, ndim, inc=True)
 * 
*/
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1396
 *     refcount_copying(dst, dtype_is_object, ndim, inc=False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim, itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, inc=True)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1390
 * 
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')             # <<<<<<<<<<<<<<
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,
 *                               size_t itemsize, void *item,
*/

  /* function exit code */
}

/* "View.MemoryView":1399
 * 
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')             # <<<<<<<<<<<<<<
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,
 *                               Py_ssize_t *strides, int ndim,
*/

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1404
 *                               size_t itemsize, void *item) noexcept nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
*/
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1405
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
*/
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1407
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
*/
  __pyx_t_1 = (__pyx_v_ndim == 1);
  if (__pyx_t_1) {

    /* "View.MemoryView":1408
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
*/
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1409
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
*/
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1410
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
*/
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1407
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
*/
    goto __pyx_L3;
  }

  /* "View.MemoryView":1412
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1, ndim - 1, itemsize, item)
 *             data += stride
*/
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1413
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1, ndim - 1, itemsize, item)             # <<<<<<<<<<<<<<
 *             data += stride
 * 
*/
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1414
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1, ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
*/
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1399
 * 
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')             # <<<<<<<<<<<<<<
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,
 *                               Py_ssize_t *strides, int ndim,
*/

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
*/

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_type,&__pyx_mstate_global->__pyx_n_u_pyx_checksum,&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 1, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(1, 1, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(1, 1, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 1, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__pyx_unpickle_Enum", 0) < 0) __PYX_ERR(1, 1, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, i); __PYX_ERR(1, 1, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 1, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(1, 1, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(1, 1, __pyx_L3_error)
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyLong_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
*/
  __pyx_t_1 = __Pyx_PyLong_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_mstate_global->__pyx_tuple[1], Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)
*/
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_PickleError);
    __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_mstate_global->__pyx_n_u_PickleError) != (0)) __PYX_ERR(1, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
*/
    __pyx_t_3 = __Pyx_PyLong_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyUnicode_Format(__pyx_mstate_global->__pyx_kp_u_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
*/
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
*/
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_MemviewEnum_type);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_new, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
*/
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
*/
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
*/
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
*/

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  size_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
*/
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
*/
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 > 1);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_mstate_global->__pyx_n_u_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
*/
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_mstate_global->__pyx_n_u_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __pyx_t_6;
    __Pyx_INCREF(__pyx_t_5);
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_update, __pyx_callargs+__pyx_t_8, (2-__pyx_t_8) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
*/
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "BufferFormatFromTypeInfo":1449
 * 
 * 
 * @cname('__pyx_format_from_typeinfo')             # <<<<<<<<<<<<<<
 * cdef bytes format_from_typeinfo(const __Pyx_TypeInfo *type):
 *     cdef const __Pyx_StructField *field
*/

static PyObject *__pyx_format_from_typeinfo(__Pyx_TypeInfo const *__pyx_v_type) {
  __Pyx_StructField const *__pyx_v_field;
  struct __pyx_typeinfo_string __pyx_v_fmt;
  PyObject *__pyx_v_part = 0;
  PyObject *__pyx_v_result = 0;
  PyObject *__pyx_v_alignment = NULL;
  PyObject *__pyx_v_parts = NULL;
  PyObject *__pyx_v_extents = NULL;
  Py_ssize_t __pyx_7genexpr__pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_StructField const *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10[3];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("format_from_typeinfo", 0);

  /* "BufferFormatFromTypeInfo":1456
 *     cdef Py_ssize_t i
 * 
 *     if type.typegroup == 'S':             # <<<<<<<<<<<<<<
 *         assert type.fields != NULL
 *         assert type.fields.type != NULL
*/
  __pyx_t_1 = (__pyx_v_type->typegroup == 'S');
  if (__pyx_t_1) {

    /* "BufferFormatFromTypeInfo":1457
 * 
 *     if type.typegroup == 'S':
 *         assert type.fields != NULL             # <<<<<<<<<<<<<<
 *         assert type.fields.type != NULL
 * 
*/
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      __pyx_t_1 = (__pyx_v_type->fields != NULL);
      if (unlikely(!__pyx_t_1)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
        __PYX_ERR(1, 1457, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(1, 1457, __pyx_L1_error)
    #endif

    /* "BufferFormatFromTypeInfo":1458
 *     if type.typegroup == 'S':
 *         assert type.fields != NULL
 *         assert type.fields.type != NULL             # <<<<<<<<<<<<<<
 * 
 *         if type.flags & __PYX_BUF_FLAGS_PACKED_STRUCT:
*/
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      __pyx_t_1 = (__pyx_v_type->fields->type != NULL);
      if (unlikely(!__pyx_t_1)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
        __PYX_ERR(1, 1458, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(1, 1458, __pyx_L1_error)
    #endif

    /* "BufferFormatFromTypeInfo":1460
 *         assert type.fields.type != NULL
 * 
 *         if type.flags & __PYX_BUF_FLAGS_PACKED_STRUCT:             # <<<<<<<<<<<<<<
 *             alignment = b'^'
 *         else:
*/
    __pyx_t_1 = ((__pyx_v_type->flags & __PYX_BUF_FLAGS_PACKED_STRUCT) != 0);
    if (__pyx_t_1) {

      /* "BufferFormatFromTypeInfo":1461
 * 
 *         if type.flags & __PYX_BUF_FLAGS_PACKED_STRUCT:
 *             alignment = b'^'             # <<<<<<<<<<<<<<
 *         else:
 *             alignment = b''
*/
      __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_b__6);
      __pyx_v_alignment = __pyx_mstate_global->__pyx_kp_b__6;

      /* "BufferFormatFromTypeInfo":1460
 *         assert type.fields.type != NULL
 * 
 *         if type.flags & __PYX_BUF_FLAGS_PACKED_STRUCT:             # <<<<<<<<<<<<<<
 *             alignment = b'^'
 *         else:
*/
      goto __pyx_L4;
    }

    /* "BufferFormatFromTypeInfo":1463
 *             alignment = b'^'
 *         else:
 *             alignment = b''             # <<<<<<<<<<<<<<
 * 
 *         parts = [b"T{"]
*/
    /*else*/ {
      __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_b__7);
      __pyx_v_alignment = __pyx_mstate_global->__pyx_kp_b__7;
    }
    __pyx_L4:;

    /* "BufferFormatFromTypeInfo":1465
 *             alignment = b''
 * 
 *         parts = [b"T{"]             # <<<<<<<<<<<<<<
 *         field = type.fields
 * 
*/
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_kp_b_T);
    __Pyx_GIVEREF(__pyx_mstate_global->__pyx_kp_b_T);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_2, 0, __pyx_mstate_global->__pyx_kp_b_T) != (0)) __PYX_ERR(1, 1465, __pyx_L1_error);
    __pyx_v_parts = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "BufferFormatFromTypeInfo":1466
 * 
 *         parts = [b"T{"]
 *         field = type.fields             # <<<<<<<<<<<<<<
 * 
 *         while field.type:
*/
    __pyx_t_3 = __pyx_v_type->fields;
    __pyx_v_field = __pyx_t_3;

    /* "BufferFormatFromTypeInfo":1468
 *         field = type.fields
 * 
 *         while field.type:             # <<<<<<<<<<<<<<
 *             part = format_from_typeinfo(field.type)
 *             parts.append(part + b':' + field.name + b':')
*/
    while (1) {
      __pyx_t_1 = (__pyx_v_field->type != 0);
      if (!__pyx_t_1) break;

      /* "BufferFormatFromTypeInfo":1469
 * 
 *         while field.type:
 *             part = format_from_typeinfo(field.type)             # <<<<<<<<<<<<<<
 *             parts.append(part + b':' + field.name + b':')
 *             field += 1
*/
      __pyx_t_2 = __pyx_format_from_typeinfo(__pyx_v_field->type); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1469, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XDECREF_SET(__pyx_v_part, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "BufferFormatFromTypeInfo":1470
 *         while field.type:
 *             part = format_from_typeinfo(field.type)
 *             parts.append(part + b':' + field.name + b':')             # <<<<<<<<<<<<<<
 *             field += 1
 * 
*/
      __pyx_t_2 = PyNumber_Add(__pyx_v_part, __pyx_mstate_global->__pyx_kp_b__8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_field->name); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_mstate_global->__pyx_kp_b__8); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1470, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_parts, __pyx_t_4); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1470, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "BufferFormatFromTypeInfo":1471
 *             part = format_from_typeinfo(field.type)
 *             parts.append(part + b':' + field.name + b':')
 *             field += 1             # <<<<<<<<<<<<<<
 * 
 *         result = alignment.join(parts) + b'}'
*/
      __pyx_v_field = (__pyx_v_field + 1);
    }

    /* "BufferFormatFromTypeInfo":1473
 *             field += 1
 * 
 *         result = alignment.join(parts) + b'}'             # <<<<<<<<<<<<<<
 *     else:
 *         fmt = __Pyx_TypeInfoToFormat(type)
*/
    __pyx_t_4 = __Pyx_PyBytes_Join(__pyx_v_alignment, __pyx_v_parts); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_mstate_global->__pyx_kp_b__9); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_5))) __PYX_ERR(1, 1473, __pyx_L1_error)
    __pyx_v_result = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "BufferFormatFromTypeInfo":1456
 *     cdef Py_ssize_t i
 * 
 *     if type.typegroup == 'S':             # <<<<<<<<<<<<<<
 *         assert type.fields != NULL
 *         assert type.fields.type != NULL
*/
    goto __pyx_L3;
  }

  /* "BufferFormatFromTypeInfo":1475
 *         result = alignment.join(parts) + b'}'
 *     else:
 *         fmt = __Pyx_TypeInfoToFormat(type)             # <<<<<<<<<<<<<<
 *         result = fmt.string
 *         if type.arraysize[0]:
*/
  /*else*/ {
    __pyx_v_fmt = __Pyx_TypeInfoToFormat(__pyx_v_type);

    /* "BufferFormatFromTypeInfo":1476
 *     else:
 *         fmt = __Pyx_TypeInfoToFormat(type)
 *         result = fmt.string             # <<<<<<<<<<<<<<
 *         if type.arraysize[0]:
 *             extents = [f"{type.arraysize[i]}" for i in range(type.ndim)]
*/
    __pyx_t_5 = __Pyx_PyObject_FromString(__pyx_v_fmt.string); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_result = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "BufferFormatFromTypeInfo":1477
 *         fmt = __Pyx_TypeInfoToFormat(type)
 *         result = fmt.string
 *         if type.arraysize[0]:             # <<<<<<<<<<<<<<
 *             extents = [f"{type.arraysize[i]}" for i in range(type.ndim)]
 *             result = f"({u','.join(extents)})".encode('ascii') + result
*/
    __pyx_t_1 = ((__pyx_v_type->arraysize[0]) != 0);
    if (__pyx_t_1) {

      /* "BufferFormatFromTypeInfo":1478
 *         result = fmt.string
 *         if type.arraysize[0]:
 *             extents = [f"{type.arraysize[i]}" for i in range(type.ndim)]             # <<<<<<<<<<<<<<
 *             result = f"({u','.join(extents)})".encode('ascii') + result
 * 
*/
      { /* enter inner scope */
        __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __pyx_v_type->ndim;
        __pyx_t_8 = __pyx_t_7;
        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
          __pyx_7genexpr__pyx_v_i = __pyx_t_9;
          __pyx_t_4 = __Pyx_PyUnicode_From_size_t((__pyx_v_type->arraysize[__pyx_7genexpr__pyx_v_i]), 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1478, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) __PYX_ERR(1, 1478, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
      } /* exit inner scope */
      __pyx_v_extents = ((PyObject*)__pyx_t_5);
      __pyx_t_5 = 0;

      /* "BufferFormatFromTypeInfo":1479
 *         if type.arraysize[0]:
 *             extents = [f"{type.arraysize[i]}" for i in range(type.ndim)]
 *             result = f"({u','.join(extents)})".encode('ascii') + result             # <<<<<<<<<<<<<<
 * 
 *     return result
*/
      __pyx_t_5 = PyUnicode_Join(__pyx_mstate_global->__pyx_kp_u__11, __pyx_v_extents); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1479, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10[0] = __pyx_mstate_global->__pyx_kp_u__10;
      __pyx_t_10[1] = __pyx_t_5;
      __pyx_t_10[2] = __pyx_mstate_global->__pyx_kp_u__5;
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_10, 3, 1 * 2 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5), 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5));
      if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1479, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyUnicode_AsASCIIString(((PyObject*)__pyx_t_4)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1479, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1479, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_result, ((PyObject*)__pyx_t_4));
      __pyx_t_4 = 0;

      /* "BufferFormatFromTypeInfo":1477
 *         fmt = __Pyx_TypeInfoToFormat(type)
 *         result = fmt.string
 *         if type.arraysize[0]:             # <<<<<<<<<<<<<<
 *             extents = [f"{type.arraysize[i]}" for i in range(type.ndim)]
 *             result = f"({u','.join(extents)})".encode('ascii') + result
*/
    }
  }
  __pyx_L3:;

  /* "BufferFormatFromTypeInfo":1481
 *             result = f"({u','.join(extents)})".encode('ascii') + result
 * 
 *     return result             # <<<<<<<<<<<<<<
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "BufferFormatFromTypeInfo":1449
 * 
 * 
 * @cname('__pyx_format_from_typeinfo')             # <<<<<<<<<<<<<<
 * cdef bytes format_from_typeinfo(const __Pyx_TypeInfo *type):
 *     cdef const __Pyx_StructField *field
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("BufferFormatFromTypeInfo.format_from_typeinfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_part);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_alignment);
  __Pyx_XDECREF(__pyx_v_parts);
  __Pyx_XDECREF(__pyx_v_extents);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":244
 *         # Instead, we use properties that map to the corresponding C-API functions.
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline PyObject* base(self) nogil:
 *             """Returns a borrowed reference to the object owning the data/memory.
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":248
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":244
 *         # Instead, we use properties that map to the corresponding C-API functions.
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline PyObject* base(self) nogil:
 *             """Returns a borrowed reference to the object owning the data/memory.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":250
 *             return PyArray_BASE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline dtype descr(self):
 *             """Returns an owned reference to the dtype of the array.
*/

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 0);

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":254
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":250
 *             return PyArray_BASE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline dtype descr(self):
 *             """Returns an owned reference to the dtype of the array.
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":256
 *             return <dtype>PyArray_DESCR(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int ndim(self) nogil:
 *             """Returns the number of dimensions in the array.
*/

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":260
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":256
 *             return <dtype>PyArray_DESCR(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline int ndim(self) nogil:
 *             """Returns the number of dimensions in the array.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":262
 *             return PyArray_NDIM(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp *shape(self) nogil:
 *             """Returns a pointer to the dimensions/shape of the array.
*/

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":268
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":262
 *             return PyArray_NDIM(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp *shape(self) nogil:
 *             """Returns a pointer to the dimensions/shape of the array.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":270
 *             return PyArray_DIMS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp *strides(self) nogil:
 *             """Returns a pointer to the strides of the array.
*/

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":275
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":270
 *             return PyArray_DIMS(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp *strides(self) nogil:
 *             """Returns a pointer to the strides of the array.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":277
 *             return PyArray_STRIDES(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp size(self) nogil:
 *             """Returns the total size (in number of elements) of the array.
*/

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":281
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
*/
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":277
 *             return PyArray_STRIDES(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline npy_intp size(self) nogil:
 *             """Returns the total size (in number of elements) of the array.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":283
 *             return PyArray_SIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline char* data(self) nogil:
 *             """The pointer to the data buffer as a char*.
*/

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":290
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef unsigned char      npy_bool
*/
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":283
 *             return PyArray_SIZE(self)
 * 
 *         @property             # <<<<<<<<<<<<<<
 *         cdef inline char* data(self) nogil:
 *             """The pointer to the data buffer as a char*.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":773
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":773
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":776
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":776
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":779
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":782
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":786
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":785
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":789
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
*/
  __pyx_t_1 = PyDataType_HASSUBARRAY(__pyx_v_d);
  if (__pyx_t_1) {

    /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":790
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":789
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
*/
  }

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":792
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_empty_tuple);
    __pyx_r = __pyx_mstate_global->__pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":788
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":968
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
*/

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":969
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
*/
  Py_INCREF(__pyx_v_base);

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":970
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
*/
  __pyx_t_1 = PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 970, __pyx_L1_error)

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":968
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":972
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
*/

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":973
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
*/
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":974
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
*/
  __pyx_t_1 = (__pyx_v_base == NULL);
  if (__pyx_t_1) {

    /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":975
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":974
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
*/
  }

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":976
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":972
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":980
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
*/

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":981
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":982
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
*/
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 982, __pyx_L3_error)

      /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":981
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
*/
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":983
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
*/
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(((PyTypeObject*)PyExc_Exception))));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 983, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":984
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
*/
      __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_builtin_ImportError);
      __pyx_t_10 = __pyx_builtin_ImportError; 
      __pyx_t_11 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_numpy_core_multiarray_failed_to};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 984, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 984, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":981
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
*/
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":980
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":986
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
*/

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":987
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":988
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
*/
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 988, __pyx_L3_error)

      /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":987
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":989
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
*/
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(((PyTypeObject*)PyExc_Exception))));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 989, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":990
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
*/
      __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_builtin_ImportError);
      __pyx_t_10 = __pyx_builtin_ImportError; 
      __pyx_t_11 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_numpy_core_umath_failed_to_impor};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 990, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 990, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":987
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":986
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":992
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
*/

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":993
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":994
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
*/
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 994, __pyx_L3_error)

      /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":993
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":995
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
*/
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(((PyTypeObject*)PyExc_Exception))));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 995, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":996
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
*/
      __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_builtin_ImportError);
      __pyx_t_10 = __pyx_builtin_ImportError; 
      __pyx_t_11 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u_numpy_core_umath_failed_to_impor};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 996, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_8);
      }
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 996, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":993
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
*/
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":992
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":999
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
*/

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1011
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":999
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1014
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
*/

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1026
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1014
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1029
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
*/

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1036
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1029
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1039
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
*/

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1043
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1039
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1046
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
*/

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1050
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
*/
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../../../../cita/modules/python/3.12.11/lib/python3.12/site-packages/numpy/__init__.cython-30.pxd":1046
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":13
 * 
 * 
 * cdef inline np.int64_t imax(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 > i1: return i0
 *     return i1
*/

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_imax(__pyx_t_5numpy_int64_t __pyx_v_i0, __pyx_t_5numpy_int64_t __pyx_v_i1) {
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":14
 * 
 * cdef inline np.int64_t imax(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 > i1: return i0             # <<<<<<<<<<<<<<
 *     return i1
 * 
*/
  __pyx_t_1 = (__pyx_v_i0 > __pyx_v_i1);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_i0;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":15
 * cdef inline np.int64_t imax(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 > i1: return i0
 *     return i1             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t fmax(np.float64_t f0, np.float64_t f1) noexcept nogil:
*/
  __pyx_r = __pyx_v_i1;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":13
 * 
 * 
 * cdef inline np.int64_t imax(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 > i1: return i0
 *     return i1
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":17
 *     return i1
 * 
 * cdef inline np.float64_t fmax(np.float64_t f0, np.float64_t f1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if f0 > f1: return f0
 *     return f1
*/

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_t_5numpy_float64_t __pyx_v_f0, __pyx_t_5numpy_float64_t __pyx_v_f1) {
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":18
 * 
 * cdef inline np.float64_t fmax(np.float64_t f0, np.float64_t f1) noexcept nogil:
 *     if f0 > f1: return f0             # <<<<<<<<<<<<<<
 *     return f1
 * 
*/
  __pyx_t_1 = (__pyx_v_f0 > __pyx_v_f1);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_f0;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":19
 * cdef inline np.float64_t fmax(np.float64_t f0, np.float64_t f1) noexcept nogil:
 *     if f0 > f1: return f0
 *     return f1             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.int64_t imin(np.int64_t i0, np.int64_t i1) noexcept nogil:
*/
  __pyx_r = __pyx_v_f1;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":17
 *     return i1
 * 
 * cdef inline np.float64_t fmax(np.float64_t f0, np.float64_t f1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if f0 > f1: return f0
 *     return f1
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":21
 *     return f1
 * 
 * cdef inline np.int64_t imin(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 < i1: return i0
 *     return i1
*/

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_imin(__pyx_t_5numpy_int64_t __pyx_v_i0, __pyx_t_5numpy_int64_t __pyx_v_i1) {
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":22
 * 
 * cdef inline np.int64_t imin(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 < i1: return i0             # <<<<<<<<<<<<<<
 *     return i1
 * 
*/
  __pyx_t_1 = (__pyx_v_i0 < __pyx_v_i1);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_i0;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":23
 * cdef inline np.int64_t imin(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 < i1: return i0
 *     return i1             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t fmin(np.float64_t f0, np.float64_t f1) noexcept nogil:
*/
  __pyx_r = __pyx_v_i1;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":21
 *     return f1
 * 
 * cdef inline np.int64_t imin(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 < i1: return i0
 *     return i1
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":25
 *     return i1
 * 
 * cdef inline np.float64_t fmin(np.float64_t f0, np.float64_t f1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if f0 < f1: return f0
 *     return f1
*/

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_t_5numpy_float64_t __pyx_v_f0, __pyx_t_5numpy_float64_t __pyx_v_f1) {
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":26
 * 
 * cdef inline np.float64_t fmin(np.float64_t f0, np.float64_t f1) noexcept nogil:
 *     if f0 < f1: return f0             # <<<<<<<<<<<<<<
 *     return f1
 * 
*/
  __pyx_t_1 = (__pyx_v_f0 < __pyx_v_f1);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_f0;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":27
 * cdef inline np.float64_t fmin(np.float64_t f0, np.float64_t f1) noexcept nogil:
 *     if f0 < f1: return f0
 *     return f1             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t fabs(np.float64_t f0) noexcept nogil:
*/
  __pyx_r = __pyx_v_f1;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":25
 *     return i1
 * 
 * cdef inline np.float64_t fmin(np.float64_t f0, np.float64_t f1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if f0 < f1: return f0
 *     return f1
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":29
 *     return f1
 * 
 * cdef inline np.float64_t fabs(np.float64_t f0) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if f0 < 0.0: return -f0
 *     return f0
*/

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_fabs(__pyx_t_5numpy_float64_t __pyx_v_f0) {
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":30
 * 
 * cdef inline np.float64_t fabs(np.float64_t f0) noexcept nogil:
 *     if f0 < 0.0: return -f0             # <<<<<<<<<<<<<<
 *     return f0
 * 
*/
  __pyx_t_1 = (__pyx_v_f0 < 0.0);
  if (__pyx_t_1) {
    __pyx_r = (-__pyx_v_f0);
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":31
 * cdef inline np.float64_t fabs(np.float64_t f0) noexcept nogil:
 *     if f0 < 0.0: return -f0
 *     return f0             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.int64_t iclip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:
*/
  __pyx_r = __pyx_v_f0;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":29
 *     return f1
 * 
 * cdef inline np.float64_t fabs(np.float64_t f0) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if f0 < 0.0: return -f0
 *     return f0
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":33
 *     return f0
 * 
 * cdef inline np.int64_t iclip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i < a: return a
 *     if i > b: return b
*/

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip(__pyx_t_5numpy_int64_t __pyx_v_i, __pyx_t_5numpy_int64_t __pyx_v_a, __pyx_t_5numpy_int64_t __pyx_v_b) {
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":34
 * 
 * cdef inline np.int64_t iclip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:
 *     if i < a: return a             # <<<<<<<<<<<<<<
 *     if i > b: return b
 *     return i
*/
  __pyx_t_1 = (__pyx_v_i < __pyx_v_a);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_a;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":35
 * cdef inline np.int64_t iclip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:
 *     if i < a: return a
 *     if i > b: return b             # <<<<<<<<<<<<<<
 *     return i
 * 
*/
  __pyx_t_1 = (__pyx_v_i > __pyx_v_b);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_b;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":36
 *     if i < a: return a
 *     if i > b: return b
 *     return i             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.int64_t i64clip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:
*/
  __pyx_r = __pyx_v_i;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":33
 *     return f0
 * 
 * cdef inline np.int64_t iclip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i < a: return a
 *     if i > b: return b
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":38
 *     return i
 * 
 * cdef inline np.int64_t i64clip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i < a: return a
 *     if i > b: return b
*/

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_i64clip(__pyx_t_5numpy_int64_t __pyx_v_i, __pyx_t_5numpy_int64_t __pyx_v_a, __pyx_t_5numpy_int64_t __pyx_v_b) {
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":39
 * 
 * cdef inline np.int64_t i64clip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:
 *     if i < a: return a             # <<<<<<<<<<<<<<
 *     if i > b: return b
 *     return i
*/
  __pyx_t_1 = (__pyx_v_i < __pyx_v_a);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_a;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":40
 * cdef inline np.int64_t i64clip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:
 *     if i < a: return a
 *     if i > b: return b             # <<<<<<<<<<<<<<
 *     return i
 * 
*/
  __pyx_t_1 = (__pyx_v_i > __pyx_v_b);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_b;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":41
 *     if i < a: return a
 *     if i > b: return b
 *     return i             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t fclip(np.float64_t f,
*/
  __pyx_r = __pyx_v_i;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":38
 *     return i
 * 
 * cdef inline np.int64_t i64clip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i < a: return a
 *     if i > b: return b
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":43
 *     return i
 * 
 * cdef inline np.float64_t fclip(np.float64_t f,             # <<<<<<<<<<<<<<
 *                       np.float64_t a, np.float64_t b) noexcept nogil:
 *     return fmin(fmax(f, a), b)
*/

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_fclip(__pyx_t_5numpy_float64_t __pyx_v_f, __pyx_t_5numpy_float64_t __pyx_v_a, __pyx_t_5numpy_float64_t __pyx_v_b) {
  __pyx_t_5numpy_float64_t __pyx_r;

  /* "yt/utilities/lib/fp_utils.pxd":45
 * cdef inline np.float64_t fclip(np.float64_t f,
 *                       np.float64_t a, np.float64_t b) noexcept nogil:
 *     return fmin(fmax(f, a), b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.int64_t i64max(np.int64_t i0, np.int64_t i1) noexcept nogil:
*/
  __pyx_r = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_f, __pyx_v_a), __pyx_v_b);
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":43
 *     return i
 * 
 * cdef inline np.float64_t fclip(np.float64_t f,             # <<<<<<<<<<<<<<
 *                       np.float64_t a, np.float64_t b) noexcept nogil:
 *     return fmin(fmax(f, a), b)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":47
 *     return fmin(fmax(f, a), b)
 * 
 * cdef inline np.int64_t i64max(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 > i1: return i0
 *     return i1
*/

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_i64max(__pyx_t_5numpy_int64_t __pyx_v_i0, __pyx_t_5numpy_int64_t __pyx_v_i1) {
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":48
 * 
 * cdef inline np.int64_t i64max(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 > i1: return i0             # <<<<<<<<<<<<<<
 *     return i1
 * 
*/
  __pyx_t_1 = (__pyx_v_i0 > __pyx_v_i1);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_i0;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":49
 * cdef inline np.int64_t i64max(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 > i1: return i0
 *     return i1             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.int64_t i64min(np.int64_t i0, np.int64_t i1) noexcept nogil:
*/
  __pyx_r = __pyx_v_i1;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":47
 *     return fmin(fmax(f, a), b)
 * 
 * cdef inline np.int64_t i64max(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 > i1: return i0
 *     return i1
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":51
 *     return i1
 * 
 * cdef inline np.int64_t i64min(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 < i1: return i0
 *     return i1
*/

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_i64min(__pyx_t_5numpy_int64_t __pyx_v_i0, __pyx_t_5numpy_int64_t __pyx_v_i1) {
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":52
 * 
 * cdef inline np.int64_t i64min(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 < i1: return i0             # <<<<<<<<<<<<<<
 *     return i1
 * 
*/
  __pyx_t_1 = (__pyx_v_i0 < __pyx_v_i1);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_i0;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":53
 * cdef inline np.int64_t i64min(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 < i1: return i0
 *     return i1             # <<<<<<<<<<<<<<
 * 
 * cdef inline _ensure_code(arr):
*/
  __pyx_r = __pyx_v_i1;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":51
 *     return i1
 * 
 * cdef inline np.int64_t i64min(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 < i1: return i0
 *     return i1
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":55
 *     return i1
 * 
 * cdef inline _ensure_code(arr):             # <<<<<<<<<<<<<<
 *     if hasattr(arr, "units"):
 *         if "code_length" == str(arr.units):
*/

static CYTHON_INLINE PyObject *__pyx_f_2yt_9utilities_3lib_8fp_utils__ensure_code(PyObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_ensure_code", 0);

  /* "yt/utilities/lib/fp_utils.pxd":56
 * 
 * cdef inline _ensure_code(arr):
 *     if hasattr(arr, "units"):             # <<<<<<<<<<<<<<
 *         if "code_length" == str(arr.units):
 *             return arr
*/
  __pyx_t_1 = __Pyx_HasAttr(__pyx_v_arr, __pyx_mstate_global->__pyx_n_u_units); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 56, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "yt/utilities/lib/fp_utils.pxd":57
 * cdef inline _ensure_code(arr):
 *     if hasattr(arr, "units"):
 *         if "code_length" == str(arr.units):             # <<<<<<<<<<<<<<
 *             return arr
 *         arr.convert_to_units("code_length")
*/
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_mstate_global->__pyx_n_u_units); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Unicode(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_mstate_global->__pyx_n_u_code_length, __pyx_t_3, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(3, 57, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "yt/utilities/lib/fp_utils.pxd":58
 *     if hasattr(arr, "units"):
 *         if "code_length" == str(arr.units):
 *             return arr             # <<<<<<<<<<<<<<
 *         arr.convert_to_units("code_length")
 *     return arr
*/
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_arr);
      __pyx_r = __pyx_v_arr;
      goto __pyx_L0;

      /* "yt/utilities/lib/fp_utils.pxd":57
 * cdef inline _ensure_code(arr):
 *     if hasattr(arr, "units"):
 *         if "code_length" == str(arr.units):             # <<<<<<<<<<<<<<
 *             return arr
 *         arr.convert_to_units("code_length")
*/
    }

    /* "yt/utilities/lib/fp_utils.pxd":59
 *         if "code_length" == str(arr.units):
 *             return arr
 *         arr.convert_to_units("code_length")             # <<<<<<<<<<<<<<
 *     return arr
 * 
*/
    __pyx_t_2 = __pyx_v_arr;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_4 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_n_u_code_length};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_convert_to_units, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 59, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "yt/utilities/lib/fp_utils.pxd":56
 * 
 * cdef inline _ensure_code(arr):
 *     if hasattr(arr, "units"):             # <<<<<<<<<<<<<<
 *         if "code_length" == str(arr.units):
 *             return arr
*/
  }

  /* "yt/utilities/lib/fp_utils.pxd":60
 *             return arr
 *         arr.convert_to_units("code_length")
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * ctypedef fused any_float:
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_arr);
  __pyx_r = __pyx_v_arr;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":55
 *     return i1
 * 
 * cdef inline _ensure_code(arr):             # <<<<<<<<<<<<<<
 *     if hasattr(arr, "units"):
 *         if "code_length" == str(arr.units):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("yt.utilities.lib.fp_utils._ensure_code", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":21
 * DEF ZSHIFT=0
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_ifrexp(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_int64_t *__pyx_v_e) {
  __pyx_t_5numpy_float64_t __pyx_v_m;
  int __pyx_v_e0;
  __pyx_t_5numpy_int64_t __pyx_r;

  /* "yt/utilities/lib/geometry_utils.pxd":26
 * cdef inline np.int64_t ifrexp(np.float64_t x, np.int64_t *e):
 *     cdef np.float64_t m
 *     cdef int e0 = 0             # <<<<<<<<<<<<<<
 *     m = frexp(x,&e0)
 *     e[0] = <np.int64_t>e0
*/
  __pyx_v_e0 = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":27
 *     cdef np.float64_t m
 *     cdef int e0 = 0
 *     m = frexp(x,&e0)             # <<<<<<<<<<<<<<
 *     e[0] = <np.int64_t>e0
 *     return <np.int64_t>ldexp(m,<int>DBL_MANT_DIG)
*/
  __pyx_v_m = frexp(__pyx_v_x, (&__pyx_v_e0));

  /* "yt/utilities/lib/geometry_utils.pxd":28
 *     cdef int e0 = 0
 *     m = frexp(x,&e0)
 *     e[0] = <np.int64_t>e0             # <<<<<<<<<<<<<<
 *     return <np.int64_t>ldexp(m,<int>DBL_MANT_DIG)
 * 
*/
  (__pyx_v_e[0]) = ((__pyx_t_5numpy_int64_t)__pyx_v_e0);

  /* "yt/utilities/lib/geometry_utils.pxd":29
 *     m = frexp(x,&e0)
 *     e[0] = <np.int64_t>e0
 *     return <np.int64_t>ldexp(m,<int>DBL_MANT_DIG)             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  __pyx_r = ((__pyx_t_5numpy_int64_t)ldexp(__pyx_v_m, ((int)DBL_MANT_DIG)));
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":21
 * DEF ZSHIFT=0
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":31
 *     return <np.int64_t>ldexp(m,<int>DBL_MANT_DIG)
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_msdb(__pyx_t_5numpy_int64_t __pyx_v_a, __pyx_t_5numpy_int64_t __pyx_v_b) {
  __pyx_t_5numpy_int64_t __pyx_v_c;
  __pyx_t_5numpy_int64_t __pyx_v_ndx;
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/geometry_utils.pxd":37
 *     """Get the most significant differing bit between a and b."""
 *     cdef np.int64_t c, ndx
 *     c = a ^ b             # <<<<<<<<<<<<<<
 *     ndx = 0
 *     while (0 < c):
*/
  __pyx_v_c = (__pyx_v_a ^ __pyx_v_b);

  /* "yt/utilities/lib/geometry_utils.pxd":38
 *     cdef np.int64_t c, ndx
 *     c = a ^ b
 *     ndx = 0             # <<<<<<<<<<<<<<
 *     while (0 < c):
 *         c = (c >> 1)
*/
  __pyx_v_ndx = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":39
 *     c = a ^ b
 *     ndx = 0
 *     while (0 < c):             # <<<<<<<<<<<<<<
 *         c = (c >> 1)
 *         ndx+=1
*/
  while (1) {
    __pyx_t_1 = (0 < __pyx_v_c);
    if (!__pyx_t_1) break;

    /* "yt/utilities/lib/geometry_utils.pxd":40
 *     ndx = 0
 *     while (0 < c):
 *         c = (c >> 1)             # <<<<<<<<<<<<<<
 *         ndx+=1
 *     return ndx
*/
    __pyx_v_c = (__pyx_v_c >> 1);

    /* "yt/utilities/lib/geometry_utils.pxd":41
 *     while (0 < c):
 *         c = (c >> 1)
 *         ndx+=1             # <<<<<<<<<<<<<<
 *     return ndx
 * 
*/
    __pyx_v_ndx = (__pyx_v_ndx + 1);
  }

  /* "yt/utilities/lib/geometry_utils.pxd":42
 *         c = (c >> 1)
 *         ndx+=1
 *     return ndx             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  __pyx_r = __pyx_v_ndx;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":31
 *     return <np.int64_t>ldexp(m,<int>DBL_MANT_DIG)
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":44
 *     return ndx
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_xor_msb(__pyx_t_5numpy_float64_t __pyx_v_a, __pyx_t_5numpy_float64_t __pyx_v_b) {
  __pyx_t_5numpy_int64_t __pyx_v_a_m;
  __pyx_t_5numpy_int64_t __pyx_v_a_e;
  __pyx_t_5numpy_int64_t __pyx_v_b_m;
  __pyx_t_5numpy_int64_t __pyx_v_b_e;
  __pyx_t_5numpy_int64_t __pyx_v_x;
  __pyx_t_5numpy_int64_t __pyx_v_y;
  __pyx_t_5numpy_int64_t __pyx_v_z;
  __pyx_t_5numpy_int64_t __pyx_r;
  __pyx_t_5numpy_int64_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":51
 *     # Get mantissa and exponents for each number
 *     cdef np.int64_t a_m, a_e, b_m, b_e, x, y, z
 *     b_e = 0             # <<<<<<<<<<<<<<
 *     a_e = 0
 *     a_m = ifrexp(a,&a_e)
*/
  __pyx_v_b_e = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":52
 *     cdef np.int64_t a_m, a_e, b_m, b_e, x, y, z
 *     b_e = 0
 *     a_e = 0             # <<<<<<<<<<<<<<
 *     a_m = ifrexp(a,&a_e)
 *     b_m = ifrexp(b,&b_e)
*/
  __pyx_v_a_e = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":53
 *     b_e = 0
 *     a_e = 0
 *     a_m = ifrexp(a,&a_e)             # <<<<<<<<<<<<<<
 *     b_m = ifrexp(b,&b_e)
 *     x = <np.int64_t> ((a_e+1)*DBL_MANT_DIG)
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_ifrexp(__pyx_v_a, (&__pyx_v_a_e)); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_int64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 53, __pyx_L1_error)
  __pyx_v_a_m = __pyx_t_1;

  /* "yt/utilities/lib/geometry_utils.pxd":54
 *     a_e = 0
 *     a_m = ifrexp(a,&a_e)
 *     b_m = ifrexp(b,&b_e)             # <<<<<<<<<<<<<<
 *     x = <np.int64_t> ((a_e+1)*DBL_MANT_DIG)
 *     y = <np.int64_t> ((b_e+1)*DBL_MANT_DIG)
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_ifrexp(__pyx_v_b, (&__pyx_v_b_e)); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_int64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 54, __pyx_L1_error)
  __pyx_v_b_m = __pyx_t_1;

  /* "yt/utilities/lib/geometry_utils.pxd":55
 *     a_m = ifrexp(a,&a_e)
 *     b_m = ifrexp(b,&b_e)
 *     x = <np.int64_t> ((a_e+1)*DBL_MANT_DIG)             # <<<<<<<<<<<<<<
 *     y = <np.int64_t> ((b_e+1)*DBL_MANT_DIG)
 *     # Compare mantissa if exponents equal
*/
  __pyx_v_x = ((__pyx_t_5numpy_int64_t)((__pyx_v_a_e + 1) * DBL_MANT_DIG));

  /* "yt/utilities/lib/geometry_utils.pxd":56
 *     b_m = ifrexp(b,&b_e)
 *     x = <np.int64_t> ((a_e+1)*DBL_MANT_DIG)
 *     y = <np.int64_t> ((b_e+1)*DBL_MANT_DIG)             # <<<<<<<<<<<<<<
 *     # Compare mantissa if exponents equal
 *     if x == y:
*/
  __pyx_v_y = ((__pyx_t_5numpy_int64_t)((__pyx_v_b_e + 1) * DBL_MANT_DIG));

  /* "yt/utilities/lib/geometry_utils.pxd":58
 *     y = <np.int64_t> ((b_e+1)*DBL_MANT_DIG)
 *     # Compare mantissa if exponents equal
 *     if x == y:             # <<<<<<<<<<<<<<
 *         if a_m == b_m: return 0
 *         z = msdb(a_m,b_m)
*/
  __pyx_t_2 = (__pyx_v_x == __pyx_v_y);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/geometry_utils.pxd":59
 *     # Compare mantissa if exponents equal
 *     if x == y:
 *         if a_m == b_m: return 0             # <<<<<<<<<<<<<<
 *         z = msdb(a_m,b_m)
 *         #if 1: return z
*/
    __pyx_t_2 = (__pyx_v_a_m == __pyx_v_b_m);
    if (__pyx_t_2) {
      __pyx_r = 0;
      goto __pyx_L0;
    }

    /* "yt/utilities/lib/geometry_utils.pxd":60
 *     if x == y:
 *         if a_m == b_m: return 0
 *         z = msdb(a_m,b_m)             # <<<<<<<<<<<<<<
 *         #if 1: return z
 *         x = x - z
*/
    __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_msdb(__pyx_v_a_m, __pyx_v_b_m); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_int64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 60, __pyx_L1_error)
    __pyx_v_z = __pyx_t_1;

    /* "yt/utilities/lib/geometry_utils.pxd":62
 *         z = msdb(a_m,b_m)
 *         #if 1: return z
 *         x = x - z             # <<<<<<<<<<<<<<
 *         return x-1 # required so that xor_msb(0.0,1.0)!=xor_msb(1.0,1.0)
 *     # Otherwise return largest exponent
*/
    __pyx_v_x = (__pyx_v_x - __pyx_v_z);

    /* "yt/utilities/lib/geometry_utils.pxd":63
 *         #if 1: return z
 *         x = x - z
 *         return x-1 # required so that xor_msb(0.0,1.0)!=xor_msb(1.0,1.0)             # <<<<<<<<<<<<<<
 *     # Otherwise return largest exponent
 *     if y < x:
*/
    __pyx_r = (__pyx_v_x - 1);
    goto __pyx_L0;

    /* "yt/utilities/lib/geometry_utils.pxd":58
 *     y = <np.int64_t> ((b_e+1)*DBL_MANT_DIG)
 *     # Compare mantissa if exponents equal
 *     if x == y:             # <<<<<<<<<<<<<<
 *         if a_m == b_m: return 0
 *         z = msdb(a_m,b_m)
*/
  }

  /* "yt/utilities/lib/geometry_utils.pxd":65
 *         return x-1 # required so that xor_msb(0.0,1.0)!=xor_msb(1.0,1.0)
 *     # Otherwise return largest exponent
 *     if y < x:             # <<<<<<<<<<<<<<
 *         return x
 *     else:
*/
  __pyx_t_2 = (__pyx_v_y < __pyx_v_x);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/geometry_utils.pxd":66
 *     # Otherwise return largest exponent
 *     if y < x:
 *         return x             # <<<<<<<<<<<<<<
 *     else:
 *         return y
*/
    __pyx_r = __pyx_v_x;
    goto __pyx_L0;

    /* "yt/utilities/lib/geometry_utils.pxd":65
 *         return x-1 # required so that xor_msb(0.0,1.0)!=xor_msb(1.0,1.0)
 *     # Otherwise return largest exponent
 *     if y < x:             # <<<<<<<<<<<<<<
 *         return x
 *     else:
*/
  }

  /* "yt/utilities/lib/geometry_utils.pxd":68
 *         return x
 *     else:
 *         return y             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  /*else*/ {
    __pyx_r = __pyx_v_y;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/geometry_utils.pxd":44
 *     return ndx
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.geometry_utils.xor_msb", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":70
 *         return y
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

static CYTHON_INLINE int __pyx_f_2yt_9utilities_3lib_14geometry_utils_compare_floats_morton(__pyx_t_5numpy_float64_t *__pyx_v_p, __pyx_t_5numpy_float64_t *__pyx_v_q) {
  int __pyx_v_j;
  int __pyx_v_out;
  int __pyx_v_dim;
  __pyx_t_5numpy_int64_t __pyx_v_x;
  __pyx_t_5numpy_int64_t __pyx_v_y;
  int __pyx_r;
  int __pyx_t_1;
  __pyx_t_5numpy_int64_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":76
 *     cdef int j, out, dim
 *     cdef np.int64_t x, y
 *     x = -9999999999             # <<<<<<<<<<<<<<
 *     y = 0
 *     dim = 0
*/
  __pyx_v_x = -9999999999LL;

  /* "yt/utilities/lib/geometry_utils.pxd":77
 *     cdef np.int64_t x, y
 *     x = -9999999999
 *     y = 0             # <<<<<<<<<<<<<<
 *     dim = 0
 *     for j in range(3):#[::-1]:
*/
  __pyx_v_y = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":78
 *     x = -9999999999
 *     y = 0
 *     dim = 0             # <<<<<<<<<<<<<<
 *     for j in range(3):#[::-1]:
 *         y = xor_msb(p[j],q[j])
*/
  __pyx_v_dim = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":79
 *     y = 0
 *     dim = 0
 *     for j in range(3):#[::-1]:             # <<<<<<<<<<<<<<
 *         y = xor_msb(p[j],q[j])
 *         if x < y:
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_j = __pyx_t_1;

    /* "yt/utilities/lib/geometry_utils.pxd":80
 *     dim = 0
 *     for j in range(3):#[::-1]:
 *         y = xor_msb(p[j],q[j])             # <<<<<<<<<<<<<<
 *         if x < y:
 *            x = y
*/
    __pyx_t_2 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_xor_msb((__pyx_v_p[__pyx_v_j]), (__pyx_v_q[__pyx_v_j])); if (unlikely(__pyx_t_2 == ((__pyx_t_5numpy_int64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 80, __pyx_L1_error)
    __pyx_v_y = __pyx_t_2;

    /* "yt/utilities/lib/geometry_utils.pxd":81
 *     for j in range(3):#[::-1]:
 *         y = xor_msb(p[j],q[j])
 *         if x < y:             # <<<<<<<<<<<<<<
 *            x = y
 *            dim = j
*/
    __pyx_t_3 = (__pyx_v_x < __pyx_v_y);
    if (__pyx_t_3) {

      /* "yt/utilities/lib/geometry_utils.pxd":82
 *         y = xor_msb(p[j],q[j])
 *         if x < y:
 *            x = y             # <<<<<<<<<<<<<<
 *            dim = j
 *     if p[dim] < q[dim]:
*/
      __pyx_v_x = __pyx_v_y;

      /* "yt/utilities/lib/geometry_utils.pxd":83
 *         if x < y:
 *            x = y
 *            dim = j             # <<<<<<<<<<<<<<
 *     if p[dim] < q[dim]:
 *         out = 1
*/
      __pyx_v_dim = __pyx_v_j;

      /* "yt/utilities/lib/geometry_utils.pxd":81
 *     for j in range(3):#[::-1]:
 *         y = xor_msb(p[j],q[j])
 *         if x < y:             # <<<<<<<<<<<<<<
 *            x = y
 *            dim = j
*/
    }
  }

  /* "yt/utilities/lib/geometry_utils.pxd":84
 *            x = y
 *            dim = j
 *     if p[dim] < q[dim]:             # <<<<<<<<<<<<<<
 *         out = 1
 *     else:
*/
  __pyx_t_3 = ((__pyx_v_p[__pyx_v_dim]) < (__pyx_v_q[__pyx_v_dim]));
  if (__pyx_t_3) {

    /* "yt/utilities/lib/geometry_utils.pxd":85
 *            dim = j
 *     if p[dim] < q[dim]:
 *         out = 1             # <<<<<<<<<<<<<<
 *     else:
 *         out = 0
*/
    __pyx_v_out = 1;

    /* "yt/utilities/lib/geometry_utils.pxd":84
 *            x = y
 *            dim = j
 *     if p[dim] < q[dim]:             # <<<<<<<<<<<<<<
 *         out = 1
 *     else:
*/
    goto __pyx_L6;
  }

  /* "yt/utilities/lib/geometry_utils.pxd":87
 *         out = 1
 *     else:
 *         out = 0             # <<<<<<<<<<<<<<
 *     return out
 * 
*/
  /*else*/ {
    __pyx_v_out = 0;
  }
  __pyx_L6:;

  /* "yt/utilities/lib/geometry_utils.pxd":88
 *     else:
 *         out = 0
 *     return out             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":70
 *         return y
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.geometry_utils.compare_floats_morton", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":90
 *     return out
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_euclidean_distance(__Pyx_memviewslice __pyx_v_p, __Pyx_memviewslice __pyx_v_q) {
  int __pyx_v_j;
  __pyx_t_5numpy_float64_t __pyx_v_d;
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":96
 *     cdef int j
 *     cdef np.float64_t d
 *     d = 0.0             # <<<<<<<<<<<<<<
 *     for j in range(3):
 *         d+=(p[j]-q[j])**2
*/
  __pyx_v_d = 0.0;

  /* "yt/utilities/lib/geometry_utils.pxd":97
 *     cdef np.float64_t d
 *     d = 0.0
 *     for j in range(3):             # <<<<<<<<<<<<<<
 *         d+=(p[j]-q[j])**2
 *     return sqrt(d)
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_j = __pyx_t_1;

    /* "yt/utilities/lib/geometry_utils.pxd":98
 *     d = 0.0
 *     for j in range(3):
 *         d+=(p[j]-q[j])**2             # <<<<<<<<<<<<<<
 *     return sqrt(d)
 * 
*/
    __pyx_t_2 = __pyx_v_j;
    __pyx_t_3 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_p.shape[0];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_p.shape[0])) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(4, 98, __pyx_L1_error)
    }
    __pyx_t_4 = __pyx_v_j;
    __pyx_t_3 = -1;
    if (__pyx_t_4 < 0) {
      __pyx_t_4 += __pyx_v_q.shape[0];
      if (unlikely(__pyx_t_4 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_4 >= __pyx_v_q.shape[0])) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(4, 98, __pyx_L1_error)
    }
    __pyx_v_d = (__pyx_v_d + pow(((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_p.data + __pyx_t_2 * __pyx_v_p.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_q.data + __pyx_t_4 * __pyx_v_q.strides[0]) )))), 2.0));
  }

  /* "yt/utilities/lib/geometry_utils.pxd":99
 *     for j in range(3):
 *         d+=(p[j]-q[j])**2
 *     return sqrt(d)             # <<<<<<<<<<<<<<
 * 
 * # Todo: allow radius reported independently in each dimension for rectangular domain
*/
  __pyx_r = sqrt(__pyx_v_d);
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":90
 *     return out
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.geometry_utils.euclidean_distance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":102
 * 
 * # Todo: allow radius reported independently in each dimension for rectangular domain
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_smallest_quadtree_box(__pyx_t_5numpy_float64_t *__pyx_v_p, __pyx_t_5numpy_float64_t *__pyx_v_q, __pyx_t_5numpy_int32_t __pyx_v_order, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_DRE, __pyx_t_5numpy_float64_t *__pyx_v_cx, __pyx_t_5numpy_float64_t *__pyx_v_cy, __pyx_t_5numpy_float64_t *__pyx_v_cz) {
  int __pyx_v_j;
  __pyx_t_5numpy_float64_t __pyx_v_c[3];
  __pyx_t_5numpy_uint64_t __pyx_v_pidx[3];
  __pyx_t_5numpy_uint64_t __pyx_v_pidx_next[3];
  __pyx_t_5numpy_uint64_t __pyx_v_qidx_next[3];
  __pyx_t_5numpy_float64_t __pyx_v_dds[3];
  __pyx_t_5numpy_float64_t __pyx_v_rad;
  int __pyx_v_lvl;
  int __pyx_v_done;
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "yt/utilities/lib/geometry_utils.pxd":112
 *     cdef np.uint64_t pidx[3]
 *     # cdef np.uint64_t qidx[3]
 *     for j in range(3):             # <<<<<<<<<<<<<<
 *         pidx[j] = 0
 *         # qidx[j] = 0
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_j = __pyx_t_1;

    /* "yt/utilities/lib/geometry_utils.pxd":113
 *     # cdef np.uint64_t qidx[3]
 *     for j in range(3):
 *         pidx[j] = 0             # <<<<<<<<<<<<<<
 *         # qidx[j] = 0
 *     cdef np.uint64_t pidx_next[3]
*/
    (__pyx_v_pidx[__pyx_v_j]) = 0;
  }

  /* "yt/utilities/lib/geometry_utils.pxd":119
 *     cdef np.float64_t dds[3]
 *     cdef np.float64_t rad
 *     cdef int lvl = 0             # <<<<<<<<<<<<<<
 *     cdef int done = 0
 *     while not done:
*/
  __pyx_v_lvl = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":120
 *     cdef np.float64_t rad
 *     cdef int lvl = 0
 *     cdef int done = 0             # <<<<<<<<<<<<<<
 *     while not done:
 *         if (lvl+1 >= order):
*/
  __pyx_v_done = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":121
 *     cdef int lvl = 0
 *     cdef int done = 0
 *     while not done:             # <<<<<<<<<<<<<<
 *         if (lvl+1 >= order):
 *             done = 1
*/
  while (1) {
    __pyx_t_2 = (!(__pyx_v_done != 0));
    if (!__pyx_t_2) break;

    /* "yt/utilities/lib/geometry_utils.pxd":122
 *     cdef int done = 0
 *     while not done:
 *         if (lvl+1 >= order):             # <<<<<<<<<<<<<<
 *             done = 1
 *         for j in range(3):
*/
    __pyx_t_2 = ((__pyx_v_lvl + 1) >= __pyx_v_order);
    if (__pyx_t_2) {

      /* "yt/utilities/lib/geometry_utils.pxd":123
 *     while not done:
 *         if (lvl+1 >= order):
 *             done = 1             # <<<<<<<<<<<<<<
 *         for j in range(3):
 *             dds[j] = (DRE[j] - DLE[j])/(1 << (<int> lvl+1))
*/
      __pyx_v_done = 1;

      /* "yt/utilities/lib/geometry_utils.pxd":122
 *     cdef int done = 0
 *     while not done:
 *         if (lvl+1 >= order):             # <<<<<<<<<<<<<<
 *             done = 1
 *         for j in range(3):
*/
    }

    /* "yt/utilities/lib/geometry_utils.pxd":124
 *         if (lvl+1 >= order):
 *             done = 1
 *         for j in range(3):             # <<<<<<<<<<<<<<
 *             dds[j] = (DRE[j] - DLE[j])/(1 << (<int> lvl+1))
 *             pidx_next[j] = <np.uint64_t>((p[j] - DLE[j])/dds[j])
*/
    for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
      __pyx_v_j = __pyx_t_1;

      /* "yt/utilities/lib/geometry_utils.pxd":125
 *             done = 1
 *         for j in range(3):
 *             dds[j] = (DRE[j] - DLE[j])/(1 << (<int> lvl+1))             # <<<<<<<<<<<<<<
 *             pidx_next[j] = <np.uint64_t>((p[j] - DLE[j])/dds[j])
 *             qidx_next[j] = <np.uint64_t>((q[j] - DLE[j])/dds[j])
*/
      (__pyx_v_dds[__pyx_v_j]) = (((__pyx_v_DRE[__pyx_v_j]) - (__pyx_v_DLE[__pyx_v_j])) / (1 << (((int)__pyx_v_lvl) + 1)));

      /* "yt/utilities/lib/geometry_utils.pxd":126
 *         for j in range(3):
 *             dds[j] = (DRE[j] - DLE[j])/(1 << (<int> lvl+1))
 *             pidx_next[j] = <np.uint64_t>((p[j] - DLE[j])/dds[j])             # <<<<<<<<<<<<<<
 *             qidx_next[j] = <np.uint64_t>((q[j] - DLE[j])/dds[j])
 *         for j in range(3):
*/
      (__pyx_v_pidx_next[__pyx_v_j]) = ((__pyx_t_5numpy_uint64_t)(((__pyx_v_p[__pyx_v_j]) - (__pyx_v_DLE[__pyx_v_j])) / (__pyx_v_dds[__pyx_v_j])));

      /* "yt/utilities/lib/geometry_utils.pxd":127
 *             dds[j] = (DRE[j] - DLE[j])/(1 << (<int> lvl+1))
 *             pidx_next[j] = <np.uint64_t>((p[j] - DLE[j])/dds[j])
 *             qidx_next[j] = <np.uint64_t>((q[j] - DLE[j])/dds[j])             # <<<<<<<<<<<<<<
 *         for j in range(3):
 *             if pidx_next[j]!=qidx_next[j]:
*/
      (__pyx_v_qidx_next[__pyx_v_j]) = ((__pyx_t_5numpy_uint64_t)(((__pyx_v_q[__pyx_v_j]) - (__pyx_v_DLE[__pyx_v_j])) / (__pyx_v_dds[__pyx_v_j])));
    }

    /* "yt/utilities/lib/geometry_utils.pxd":128
 *             pidx_next[j] = <np.uint64_t>((p[j] - DLE[j])/dds[j])
 *             qidx_next[j] = <np.uint64_t>((q[j] - DLE[j])/dds[j])
 *         for j in range(3):             # <<<<<<<<<<<<<<
 *             if pidx_next[j]!=qidx_next[j]:
 *                 done = 1
*/
    for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
      __pyx_v_j = __pyx_t_1;

      /* "yt/utilities/lib/geometry_utils.pxd":129
 *             qidx_next[j] = <np.uint64_t>((q[j] - DLE[j])/dds[j])
 *         for j in range(3):
 *             if pidx_next[j]!=qidx_next[j]:             # <<<<<<<<<<<<<<
 *                 done = 1
 *                 break
*/
      __pyx_t_2 = ((__pyx_v_pidx_next[__pyx_v_j]) != (__pyx_v_qidx_next[__pyx_v_j]));
      if (__pyx_t_2) {

        /* "yt/utilities/lib/geometry_utils.pxd":130
 *         for j in range(3):
 *             if pidx_next[j]!=qidx_next[j]:
 *                 done = 1             # <<<<<<<<<<<<<<
 *                 break
 *         if not done:
*/
        __pyx_v_done = 1;

        /* "yt/utilities/lib/geometry_utils.pxd":131
 *             if pidx_next[j]!=qidx_next[j]:
 *                 done = 1
 *                 break             # <<<<<<<<<<<<<<
 *         if not done:
 *             for j in range(3):
*/
        goto __pyx_L11_break;

        /* "yt/utilities/lib/geometry_utils.pxd":129
 *             qidx_next[j] = <np.uint64_t>((q[j] - DLE[j])/dds[j])
 *         for j in range(3):
 *             if pidx_next[j]!=qidx_next[j]:             # <<<<<<<<<<<<<<
 *                 done = 1
 *                 break
*/
      }
    }
    __pyx_L11_break:;

    /* "yt/utilities/lib/geometry_utils.pxd":132
 *                 done = 1
 *                 break
 *         if not done:             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 pidx[j] = pidx_next[j]
*/
    __pyx_t_2 = (!(__pyx_v_done != 0));
    if (__pyx_t_2) {

      /* "yt/utilities/lib/geometry_utils.pxd":133
 *                 break
 *         if not done:
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 pidx[j] = pidx_next[j]
 *                 # qidx[j] = qidx_next[j]
*/
      for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
        __pyx_v_j = __pyx_t_1;

        /* "yt/utilities/lib/geometry_utils.pxd":134
 *         if not done:
 *             for j in range(3):
 *                 pidx[j] = pidx_next[j]             # <<<<<<<<<<<<<<
 *                 # qidx[j] = qidx_next[j]
 *             lvl+=1
*/
        (__pyx_v_pidx[__pyx_v_j]) = (__pyx_v_pidx_next[__pyx_v_j]);
      }

      /* "yt/utilities/lib/geometry_utils.pxd":136
 *                 pidx[j] = pidx_next[j]
 *                 # qidx[j] = qidx_next[j]
 *             lvl+=1             # <<<<<<<<<<<<<<
 *     rad = 0.0
 *     for j in range(3):
*/
      __pyx_v_lvl = (__pyx_v_lvl + 1);

      /* "yt/utilities/lib/geometry_utils.pxd":132
 *                 done = 1
 *                 break
 *         if not done:             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 pidx[j] = pidx_next[j]
*/
    }
  }

  /* "yt/utilities/lib/geometry_utils.pxd":137
 *                 # qidx[j] = qidx_next[j]
 *             lvl+=1
 *     rad = 0.0             # <<<<<<<<<<<<<<
 *     for j in range(3):
 *         dds[j] = (DRE[j] - DLE[j])/(1 << lvl)
*/
  __pyx_v_rad = 0.0;

  /* "yt/utilities/lib/geometry_utils.pxd":138
 *             lvl+=1
 *     rad = 0.0
 *     for j in range(3):             # <<<<<<<<<<<<<<
 *         dds[j] = (DRE[j] - DLE[j])/(1 << lvl)
 *         c[j] = dds[j]*(<np.float64_t>pidx[j]+0.5)
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_j = __pyx_t_1;

    /* "yt/utilities/lib/geometry_utils.pxd":139
 *     rad = 0.0
 *     for j in range(3):
 *         dds[j] = (DRE[j] - DLE[j])/(1 << lvl)             # <<<<<<<<<<<<<<
 *         c[j] = dds[j]*(<np.float64_t>pidx[j]+0.5)
 *         rad+=((dds[j]/2.0)**2)
*/
    (__pyx_v_dds[__pyx_v_j]) = (((__pyx_v_DRE[__pyx_v_j]) - (__pyx_v_DLE[__pyx_v_j])) / (1 << __pyx_v_lvl));

    /* "yt/utilities/lib/geometry_utils.pxd":140
 *     for j in range(3):
 *         dds[j] = (DRE[j] - DLE[j])/(1 << lvl)
 *         c[j] = dds[j]*(<np.float64_t>pidx[j]+0.5)             # <<<<<<<<<<<<<<
 *         rad+=((dds[j]/2.0)**2)
 *     cx[0] = c[0]
*/
    (__pyx_v_c[__pyx_v_j]) = ((__pyx_v_dds[__pyx_v_j]) * (((__pyx_t_5numpy_float64_t)(__pyx_v_pidx[__pyx_v_j])) + 0.5));

    /* "yt/utilities/lib/geometry_utils.pxd":141
 *         dds[j] = (DRE[j] - DLE[j])/(1 << lvl)
 *         c[j] = dds[j]*(<np.float64_t>pidx[j]+0.5)
 *         rad+=((dds[j]/2.0)**2)             # <<<<<<<<<<<<<<
 *     cx[0] = c[0]
 *     cy[0] = c[1]
*/
    __pyx_v_rad = (__pyx_v_rad + pow(((__pyx_v_dds[__pyx_v_j]) / 2.0), 2.0));
  }

  /* "yt/utilities/lib/geometry_utils.pxd":142
 *         c[j] = dds[j]*(<np.float64_t>pidx[j]+0.5)
 *         rad+=((dds[j]/2.0)**2)
 *     cx[0] = c[0]             # <<<<<<<<<<<<<<
 *     cy[0] = c[1]
 *     cz[0] = c[2]
*/
  (__pyx_v_cx[0]) = (__pyx_v_c[0]);

  /* "yt/utilities/lib/geometry_utils.pxd":143
 *         rad+=((dds[j]/2.0)**2)
 *     cx[0] = c[0]
 *     cy[0] = c[1]             # <<<<<<<<<<<<<<
 *     cz[0] = c[2]
 *     return sqrt(rad)
*/
  (__pyx_v_cy[0]) = (__pyx_v_c[1]);

  /* "yt/utilities/lib/geometry_utils.pxd":144
 *     cx[0] = c[0]
 *     cy[0] = c[1]
 *     cz[0] = c[2]             # <<<<<<<<<<<<<<
 *     return sqrt(rad)
 * 
*/
  (__pyx_v_cz[0]) = (__pyx_v_c[2]);

  /* "yt/utilities/lib/geometry_utils.pxd":145
 *     cy[0] = c[1]
 *     cz[0] = c[2]
 *     return sqrt(rad)             # <<<<<<<<<<<<<<
 * 
 * #-----------------------------------------------------------------------------
*/
  __pyx_r = sqrt(__pyx_v_rad);
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":102
 * 
 * # Todo: allow radius reported independently in each dimension for rectangular domain
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":149
 * #-----------------------------------------------------------------------------
 * # 21 bits spread over 64 with 3 bits in between
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_64bits_by3(__pyx_t_5numpy_uint64_t __pyx_v_x) {
  __pyx_t_5numpy_uint64_t __pyx_r;

  /* "yt/utilities/lib/geometry_utils.pxd":153
 * @cython.wraparound(False)
 * cdef inline np.uint64_t spread_64bits_by3(np.uint64_t x):
 *     x=(x&(<np.uint64_t>0x00000000001FFFFF))             # <<<<<<<<<<<<<<
 *     x=(x|(x<<20))*(<np.uint64_t>0x000001FFC00003FF)
 * 
*/
  __pyx_v_x = (__pyx_v_x & ((__pyx_t_5numpy_uint64_t)0x00000000001FFFFF));

  /* "yt/utilities/lib/geometry_utils.pxd":154
 * cdef inline np.uint64_t spread_64bits_by3(np.uint64_t x):
 *     x=(x&(<np.uint64_t>0x00000000001FFFFF))
 *     x=(x|(x<<20))*(<np.uint64_t>0x000001FFC00003FF)             # <<<<<<<<<<<<<<
 * 
 * #-----------------------------------------------------------------------------
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 20)) * ((__pyx_t_5numpy_uint64_t)0x000001FFC00003FF));

  /* "yt/utilities/lib/geometry_utils.pxd":149
 * #-----------------------------------------------------------------------------
 * # 21 bits spread over 64 with 3 bits in between
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

  /* function exit code */
  __pyx_r = 0;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":158
 * #-----------------------------------------------------------------------------
 * # 21 bits spread over 64 with 2 bits in between
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_64bits_by2(__pyx_t_5numpy_uint64_t __pyx_v_x) {
  __pyx_t_5numpy_uint64_t __pyx_r;

  /* "yt/utilities/lib/geometry_utils.pxd":166
 *     # Select highest 21 bits (Required to be reversible to 21st bit)
 *     # x = ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---k jihg fedc ba98 7654 3210
 *     x=(x&(<np.uint64_t>0x00000000001FFFFF))             # <<<<<<<<<<<<<<
 *     # x = ---- ---- ---- ---- ---- ---k jihg fedc ba-- ---- ---- ---- ---- --98 7654 3210
 *     x=(x|(x<<20))&(<np.uint64_t>0x000001FFC00003FF)
*/
  __pyx_v_x = (__pyx_v_x & ((__pyx_t_5numpy_uint64_t)0x00000000001FFFFF));

  /* "yt/utilities/lib/geometry_utils.pxd":168
 *     x=(x&(<np.uint64_t>0x00000000001FFFFF))
 *     # x = ---- ---- ---- ---- ---- ---k jihg fedc ba-- ---- ---- ---- ---- --98 7654 3210
 *     x=(x|(x<<20))&(<np.uint64_t>0x000001FFC00003FF)             # <<<<<<<<<<<<<<
 *     # x = ---- ---- ---- -kji hgf- ---- ---- -edc ba-- ---- ---- 9876 5--- ---- ---4 3210
 *     x=(x|(x<<10))&(<np.uint64_t>0x0007E007C00F801F)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 20)) & ((__pyx_t_5numpy_uint64_t)0x000001FFC00003FF));

  /* "yt/utilities/lib/geometry_utils.pxd":170
 *     x=(x|(x<<20))&(<np.uint64_t>0x000001FFC00003FF)
 *     # x = ---- ---- ---- -kji hgf- ---- ---- -edc ba-- ---- ---- 9876 5--- ---- ---4 3210
 *     x=(x|(x<<10))&(<np.uint64_t>0x0007E007C00F801F)             # <<<<<<<<<<<<<<
 *     # x = ---- ---- -kji h--- -gf- ---- -edc ---- ba-- ---- 987- ---6 5--- ---4 32-- --10
 *     x=(x|(x<<4))&(<np.uint64_t>0x00786070C0E181C3)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 10)) & ((__pyx_t_5numpy_uint64_t)0x0007E007C00F801F));

  /* "yt/utilities/lib/geometry_utils.pxd":172
 *     x=(x|(x<<10))&(<np.uint64_t>0x0007E007C00F801F)
 *     # x = ---- ---- -kji h--- -gf- ---- -edc ---- ba-- ---- 987- ---6 5--- ---4 32-- --10
 *     x=(x|(x<<4))&(<np.uint64_t>0x00786070C0E181C3)             # <<<<<<<<<<<<<<
 *     # x = ---- ---k ji-- h--g --f- ---e d--c --b- -a-- --98 --7- -6-- 5--- -43- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x0199219243248649)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 4)) & ((__pyx_t_5numpy_uint64_t)0x00786070C0E181C3));

  /* "yt/utilities/lib/geometry_utils.pxd":174
 *     x=(x|(x<<4))&(<np.uint64_t>0x00786070C0E181C3)
 *     # x = ---- ---k ji-- h--g --f- ---e d--c --b- -a-- --98 --7- -6-- 5--- -43- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x0199219243248649)             # <<<<<<<<<<<<<<
 *     # x = ---- -kj- -i-- h--g --f- -e-- d--c --b- -a-- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x0649249249249249)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 2)) & ((__pyx_t_5numpy_uint64_t)0x0199219243248649));

  /* "yt/utilities/lib/geometry_utils.pxd":176
 *     x=(x|(x<<2))&(<np.uint64_t>0x0199219243248649)
 *     # x = ---- -kj- -i-- h--g --f- -e-- d--c --b- -a-- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x0649249249249249)             # <<<<<<<<<<<<<<
 *     # x = ---k --j- -i-- h--g --f- -e-- d--c --b- -a-- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x1249249249249249)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 2)) & ((__pyx_t_5numpy_uint64_t)0x0649249249249249));

  /* "yt/utilities/lib/geometry_utils.pxd":178
 *     x=(x|(x<<2))&(<np.uint64_t>0x0649249249249249)
 *     # x = ---k --j- -i-- h--g --f- -e-- d--c --b- -a-- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x1249249249249249)             # <<<<<<<<<<<<<<
 *     return x
 * 
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 2)) & ((__pyx_t_5numpy_uint64_t)0x1249249249249249));

  /* "yt/utilities/lib/geometry_utils.pxd":179
 *     # x = ---k --j- -i-- h--g --f- -e-- d--c --b- -a-- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x1249249249249249)
 *     return x             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  __pyx_r = __pyx_v_x;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":158
 * #-----------------------------------------------------------------------------
 * # 21 bits spread over 64 with 2 bits in between
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":181
 *     return x
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_compact_64bits_by2(__pyx_t_5numpy_uint64_t __pyx_v_x) {
  __pyx_t_5numpy_uint64_t __pyx_r;

  /* "yt/utilities/lib/geometry_utils.pxd":186
 * cdef inline np.uint64_t compact_64bits_by2(np.uint64_t x):
 *     # Reversed magic
 *     x=x&(<np.uint64_t>0x1249249249249249)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>2))&(<np.uint64_t>0x0649249249249249)
 *     x=(x|(x>>2))&(<np.uint64_t>0x0199219243248649)
*/
  __pyx_v_x = (__pyx_v_x & ((__pyx_t_5numpy_uint64_t)0x1249249249249249));

  /* "yt/utilities/lib/geometry_utils.pxd":187
 *     # Reversed magic
 *     x=x&(<np.uint64_t>0x1249249249249249)
 *     x=(x|(x>>2))&(<np.uint64_t>0x0649249249249249)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>2))&(<np.uint64_t>0x0199219243248649)
 *     x=(x|(x>>2))&(<np.uint64_t>0x00786070C0E181C3)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 2)) & ((__pyx_t_5numpy_uint64_t)0x0649249249249249));

  /* "yt/utilities/lib/geometry_utils.pxd":188
 *     x=x&(<np.uint64_t>0x1249249249249249)
 *     x=(x|(x>>2))&(<np.uint64_t>0x0649249249249249)
 *     x=(x|(x>>2))&(<np.uint64_t>0x0199219243248649)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>2))&(<np.uint64_t>0x00786070C0E181C3)
 *     x=(x|(x>>4))&(<np.uint64_t>0x0007E007C00F801F)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 2)) & ((__pyx_t_5numpy_uint64_t)0x0199219243248649));

  /* "yt/utilities/lib/geometry_utils.pxd":189
 *     x=(x|(x>>2))&(<np.uint64_t>0x0649249249249249)
 *     x=(x|(x>>2))&(<np.uint64_t>0x0199219243248649)
 *     x=(x|(x>>2))&(<np.uint64_t>0x00786070C0E181C3)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>4))&(<np.uint64_t>0x0007E007C00F801F)
 *     x=(x|(x>>10))&(<np.uint64_t>0x000001FFC00003FF)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 2)) & ((__pyx_t_5numpy_uint64_t)0x00786070C0E181C3));

  /* "yt/utilities/lib/geometry_utils.pxd":190
 *     x=(x|(x>>2))&(<np.uint64_t>0x0199219243248649)
 *     x=(x|(x>>2))&(<np.uint64_t>0x00786070C0E181C3)
 *     x=(x|(x>>4))&(<np.uint64_t>0x0007E007C00F801F)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>10))&(<np.uint64_t>0x000001FFC00003FF)
 *     x=(x|(x>>20))&(<np.uint64_t>0x00000000001FFFFF)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 4)) & ((__pyx_t_5numpy_uint64_t)0x0007E007C00F801F));

  /* "yt/utilities/lib/geometry_utils.pxd":191
 *     x=(x|(x>>2))&(<np.uint64_t>0x00786070C0E181C3)
 *     x=(x|(x>>4))&(<np.uint64_t>0x0007E007C00F801F)
 *     x=(x|(x>>10))&(<np.uint64_t>0x000001FFC00003FF)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>20))&(<np.uint64_t>0x00000000001FFFFF)
 *     return x
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 10)) & ((__pyx_t_5numpy_uint64_t)0x000001FFC00003FF));

  /* "yt/utilities/lib/geometry_utils.pxd":192
 *     x=(x|(x>>4))&(<np.uint64_t>0x0007E007C00F801F)
 *     x=(x|(x>>10))&(<np.uint64_t>0x000001FFC00003FF)
 *     x=(x|(x>>20))&(<np.uint64_t>0x00000000001FFFFF)             # <<<<<<<<<<<<<<
 *     return x
 * 
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 20)) & ((__pyx_t_5numpy_uint64_t)0x00000000001FFFFF));

  /* "yt/utilities/lib/geometry_utils.pxd":193
 *     x=(x|(x>>10))&(<np.uint64_t>0x000001FFC00003FF)
 *     x=(x|(x>>20))&(<np.uint64_t>0x00000000001FFFFF)
 *     return x             # <<<<<<<<<<<<<<
 * 
 * #-----------------------------------------------------------------------------
*/
  __pyx_r = __pyx_v_x;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":181
 *     return x
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":197
 * #-----------------------------------------------------------------------------
 * # 10 bits spread over 32 with 2 bits in between
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

static CYTHON_INLINE __pyx_t_5numpy_uint32_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_32bits_by2(__pyx_t_5numpy_uint32_t __pyx_v_x) {
  __pyx_t_5numpy_uint32_t __pyx_r;

  /* "yt/utilities/lib/geometry_utils.pxd":204
 *     # Select highest 10 bits (Required to be reversible to 10st bit)
 *     # x = ---- ---- ---- ---- ---- --98 7654 3210
 *     x=(x&(<np.uint32_t>0x000003FF))             # <<<<<<<<<<<<<<
 *     # x = ---- --98 ---- ---- ---- ---- 7654 3210
 *     x=(x|(x<<16))&(<np.uint32_t>0xFF0000FF)
*/
  __pyx_v_x = (__pyx_v_x & ((__pyx_t_5numpy_uint32_t)0x000003FF));

  /* "yt/utilities/lib/geometry_utils.pxd":206
 *     x=(x&(<np.uint32_t>0x000003FF))
 *     # x = ---- --98 ---- ---- ---- ---- 7654 3210
 *     x=(x|(x<<16))&(<np.uint32_t>0xFF0000FF)             # <<<<<<<<<<<<<<
 *     # x = ---- --98 ---- ---- 7654 ---- ---- 3210
 *     x=(x|(x<<8))&(<np.uint32_t>0x0300F00F)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 16)) & ((__pyx_t_5numpy_uint32_t)0xFF0000FF));

  /* "yt/utilities/lib/geometry_utils.pxd":208
 *     x=(x|(x<<16))&(<np.uint32_t>0xFF0000FF)
 *     # x = ---- --98 ---- ---- 7654 ---- ---- 3210
 *     x=(x|(x<<8))&(<np.uint32_t>0x0300F00F)             # <<<<<<<<<<<<<<
 *     # x = ---- --98 ---- 76-- --54 ---- 32-- --10
 *     x=(x|(x<<4))&(<np.uint32_t>0x030C30C3)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 8)) & ((__pyx_t_5numpy_uint32_t)0x0300F00F));

  /* "yt/utilities/lib/geometry_utils.pxd":210
 *     x=(x|(x<<8))&(<np.uint32_t>0x0300F00F)
 *     # x = ---- --98 ---- 76-- --54 ---- 32-- --10
 *     x=(x|(x<<4))&(<np.uint32_t>0x030C30C3)             # <<<<<<<<<<<<<<
 *     # x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint32_t>0x09249249)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 4)) & ((__pyx_t_5numpy_uint32_t)0x030C30C3));

  /* "yt/utilities/lib/geometry_utils.pxd":212
 *     x=(x|(x<<4))&(<np.uint32_t>0x030C30C3)
 *     # x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint32_t>0x09249249)             # <<<<<<<<<<<<<<
 *     return x
 * 
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 2)) & ((__pyx_t_5numpy_uint32_t)0x09249249));

  /* "yt/utilities/lib/geometry_utils.pxd":213
 *     # x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint32_t>0x09249249)
 *     return x             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  __pyx_r = __pyx_v_x;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":197
 * #-----------------------------------------------------------------------------
 * # 10 bits spread over 32 with 2 bits in between
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":215
 *     return x
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

static CYTHON_INLINE __pyx_t_5numpy_uint32_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_compact_32bits_by2(__pyx_t_5numpy_uint32_t __pyx_v_x) {
  __pyx_t_5numpy_uint32_t __pyx_r;

  /* "yt/utilities/lib/geometry_utils.pxd":220
 * cdef inline np.uint32_t compact_32bits_by2(np.uint32_t x):
 *     # Reversed magic
 *     x=x&(<np.uint32_t>0x09249249)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>2))&(<np.uint32_t>0x030C30C3)
 *     x=(x|(x>>4))&(<np.uint32_t>0x0300F00F)
*/
  __pyx_v_x = (__pyx_v_x & ((__pyx_t_5numpy_uint32_t)0x09249249));

  /* "yt/utilities/lib/geometry_utils.pxd":221
 *     # Reversed magic
 *     x=x&(<np.uint32_t>0x09249249)
 *     x=(x|(x>>2))&(<np.uint32_t>0x030C30C3)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>4))&(<np.uint32_t>0x0300F00F)
 *     x=(x|(x>>8))&(<np.uint32_t>0xFF0000FF)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 2)) & ((__pyx_t_5numpy_uint32_t)0x030C30C3));

  /* "yt/utilities/lib/geometry_utils.pxd":222
 *     x=x&(<np.uint32_t>0x09249249)
 *     x=(x|(x>>2))&(<np.uint32_t>0x030C30C3)
 *     x=(x|(x>>4))&(<np.uint32_t>0x0300F00F)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>8))&(<np.uint32_t>0xFF0000FF)
 *     x=(x|(x>>16))&(<np.uint32_t>0x000003FF)
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 4)) & ((__pyx_t_5numpy_uint32_t)0x0300F00F));

  /* "yt/utilities/lib/geometry_utils.pxd":223
 *     x=(x|(x>>2))&(<np.uint32_t>0x030C30C3)
 *     x=(x|(x>>4))&(<np.uint32_t>0x0300F00F)
 *     x=(x|(x>>8))&(<np.uint32_t>0xFF0000FF)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>16))&(<np.uint32_t>0x000003FF)
 *     return x
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 8)) & ((__pyx_t_5numpy_uint32_t)0xFF0000FF));

  /* "yt/utilities/lib/geometry_utils.pxd":224
 *     x=(x|(x>>4))&(<np.uint32_t>0x0300F00F)
 *     x=(x|(x>>8))&(<np.uint32_t>0xFF0000FF)
 *     x=(x|(x>>16))&(<np.uint32_t>0x000003FF)             # <<<<<<<<<<<<<<
 *     return x
 * 
*/
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 16)) & ((__pyx_t_5numpy_uint32_t)0x000003FF));

  /* "yt/utilities/lib/geometry_utils.pxd":225
 *     x=(x|(x>>8))&(<np.uint32_t>0xFF0000FF)
 *     x=(x|(x>>16))&(<np.uint32_t>0x000003FF)
 *     return x             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  __pyx_r = __pyx_v_x;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":215
 *     return x
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":227
 *     return x
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_masked_merge_64bit(__pyx_t_5numpy_uint64_t __pyx_v_a, __pyx_t_5numpy_uint64_t __pyx_v_b, __pyx_t_5numpy_uint64_t __pyx_v_mask) {
  __pyx_t_5numpy_uint64_t __pyx_r;

  /* "yt/utilities/lib/geometry_utils.pxd":232
 * cdef inline np.uint64_t masked_merge_64bit(np.uint64_t a, np.uint64_t b, np.uint64_t mask):
 *     # https://graphics.stanford.edu/~seander/bithacks.html#MaskedMerge
 *     return a ^ ((a ^ b) & mask)             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  __pyx_r = (__pyx_v_a ^ ((__pyx_v_a ^ __pyx_v_b) & __pyx_v_mask));
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":227
 *     return x
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":234
 *     return a ^ ((a ^ b) & mask)
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t encode_morton_64bit(np.uint64_t x_ind, np.uint64_t y_ind, np.uint64_t z_ind):
 *     cdef np.uint64_t mi
*/

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_t_5numpy_uint64_t __pyx_v_x_ind, __pyx_t_5numpy_uint64_t __pyx_v_y_ind, __pyx_t_5numpy_uint64_t __pyx_v_z_ind) {
  __pyx_t_5numpy_uint64_t __pyx_v_mi;
  __pyx_t_5numpy_uint64_t __pyx_r;
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":237
 * cdef inline np.uint64_t encode_morton_64bit(np.uint64_t x_ind, np.uint64_t y_ind, np.uint64_t z_ind):
 *     cdef np.uint64_t mi
 *     mi = 0             # <<<<<<<<<<<<<<
 *     mi |= spread_64bits_by2(z_ind)<<ZSHIFT
 *     mi |= spread_64bits_by2(y_ind)<<YSHIFT
*/
  __pyx_v_mi = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":238
 *     cdef np.uint64_t mi
 *     mi = 0
 *     mi |= spread_64bits_by2(z_ind)<<ZSHIFT             # <<<<<<<<<<<<<<
 *     mi |= spread_64bits_by2(y_ind)<<YSHIFT
 *     mi |= spread_64bits_by2(x_ind)<<XSHIFT
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_64bits_by2(__pyx_v_z_ind); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 238, __pyx_L1_error)
  __pyx_v_mi = (__pyx_v_mi | (__pyx_t_1 << 0));

  /* "yt/utilities/lib/geometry_utils.pxd":239
 *     mi = 0
 *     mi |= spread_64bits_by2(z_ind)<<ZSHIFT
 *     mi |= spread_64bits_by2(y_ind)<<YSHIFT             # <<<<<<<<<<<<<<
 *     mi |= spread_64bits_by2(x_ind)<<XSHIFT
 *     return mi
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_64bits_by2(__pyx_v_y_ind); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 239, __pyx_L1_error)
  __pyx_v_mi = (__pyx_v_mi | (__pyx_t_1 << 1));

  /* "yt/utilities/lib/geometry_utils.pxd":240
 *     mi |= spread_64bits_by2(z_ind)<<ZSHIFT
 *     mi |= spread_64bits_by2(y_ind)<<YSHIFT
 *     mi |= spread_64bits_by2(x_ind)<<XSHIFT             # <<<<<<<<<<<<<<
 *     return mi
 * 
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_64bits_by2(__pyx_v_x_ind); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 240, __pyx_L1_error)
  __pyx_v_mi = (__pyx_v_mi | (__pyx_t_1 << 2));

  /* "yt/utilities/lib/geometry_utils.pxd":241
 *     mi |= spread_64bits_by2(y_ind)<<YSHIFT
 *     mi |= spread_64bits_by2(x_ind)<<XSHIFT
 *     return mi             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  __pyx_r = __pyx_v_mi;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":234
 *     return a ^ ((a ^ b) & mask)
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t encode_morton_64bit(np.uint64_t x_ind, np.uint64_t y_ind, np.uint64_t z_ind):
 *     cdef np.uint64_t mi
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.geometry_utils.encode_morton_64bit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":243
 *     return mi
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline void decode_morton_64bit(np.uint64_t mi, np.uint64_t *p):
 *     p[0] = compact_64bits_by2(mi>>XSHIFT)
*/

static CYTHON_INLINE void __pyx_f_2yt_9utilities_3lib_14geometry_utils_decode_morton_64bit(__pyx_t_5numpy_uint64_t __pyx_v_mi, __pyx_t_5numpy_uint64_t *__pyx_v_p) {
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":245
 * @cython.cdivision(True)
 * cdef inline void decode_morton_64bit(np.uint64_t mi, np.uint64_t *p):
 *     p[0] = compact_64bits_by2(mi>>XSHIFT)             # <<<<<<<<<<<<<<
 *     p[1] = compact_64bits_by2(mi>>YSHIFT)
 *     p[2] = compact_64bits_by2(mi>>ZSHIFT)
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_compact_64bits_by2((__pyx_v_mi >> 2)); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 245, __pyx_L1_error)
  (__pyx_v_p[0]) = __pyx_t_1;

  /* "yt/utilities/lib/geometry_utils.pxd":246
 * cdef inline void decode_morton_64bit(np.uint64_t mi, np.uint64_t *p):
 *     p[0] = compact_64bits_by2(mi>>XSHIFT)
 *     p[1] = compact_64bits_by2(mi>>YSHIFT)             # <<<<<<<<<<<<<<
 *     p[2] = compact_64bits_by2(mi>>ZSHIFT)
 * 
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_compact_64bits_by2((__pyx_v_mi >> 1)); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 246, __pyx_L1_error)
  (__pyx_v_p[1]) = __pyx_t_1;

  /* "yt/utilities/lib/geometry_utils.pxd":247
 *     p[0] = compact_64bits_by2(mi>>XSHIFT)
 *     p[1] = compact_64bits_by2(mi>>YSHIFT)
 *     p[2] = compact_64bits_by2(mi>>ZSHIFT)             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_compact_64bits_by2((__pyx_v_mi >> 0)); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 247, __pyx_L1_error)
  (__pyx_v_p[2]) = __pyx_t_1;

  /* "yt/utilities/lib/geometry_utils.pxd":243
 *     return mi
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline void decode_morton_64bit(np.uint64_t mi, np.uint64_t *p):
 *     p[0] = compact_64bits_by2(mi>>XSHIFT)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.geometry_utils.decode_morton_64bit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/utilities/lib/geometry_utils.pxd":249
 *     p[2] = compact_64bits_by2(mi>>ZSHIFT)
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t bounded_morton(np.float64_t x, np.float64_t y, np.float64_t z,
 *                                np.float64_t *DLE, np.float64_t *DRE, np.int32_t order):
*/

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_y, __pyx_t_5numpy_float64_t __pyx_v_z, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_DRE, __pyx_t_5numpy_int32_t __pyx_v_order) {
  int __pyx_v_i;
  __pyx_t_5numpy_float64_t __pyx_v_dds[3];
  __pyx_t_5numpy_uint64_t __pyx_v_x_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_y_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_z_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_mi;
  __pyx_t_5numpy_uint64_t __pyx_r;
  int __pyx_t_1;
  __pyx_t_5numpy_uint64_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":256
 *     cdef np.uint64_t x_ind, y_ind, z_ind
 *     cdef np.uint64_t mi
 *     for i in range(3):             # <<<<<<<<<<<<<<
 *         dds[i] = (DRE[i] - DLE[i]) / (1 << order)
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/utilities/lib/geometry_utils.pxd":257
 *     cdef np.uint64_t mi
 *     for i in range(3):
 *         dds[i] = (DRE[i] - DLE[i]) / (1 << order)             # <<<<<<<<<<<<<<
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
*/
    (__pyx_v_dds[__pyx_v_i]) = (((__pyx_v_DRE[__pyx_v_i]) - (__pyx_v_DLE[__pyx_v_i])) / (1 << __pyx_v_order));
  }

  /* "yt/utilities/lib/geometry_utils.pxd":258
 *     for i in range(3):
 *         dds[i] = (DRE[i] - DLE[i]) / (1 << order)
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])             # <<<<<<<<<<<<<<
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
*/
  __pyx_v_x_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE[0])) / (__pyx_v_dds[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":259
 *         dds[i] = (DRE[i] - DLE[i]) / (1 << order)
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])             # <<<<<<<<<<<<<<
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)
*/
  __pyx_v_y_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE[1])) / (__pyx_v_dds[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":260
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])             # <<<<<<<<<<<<<<
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi
*/
  __pyx_v_z_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE[2])) / (__pyx_v_dds[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":261
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)             # <<<<<<<<<<<<<<
 *     return mi
 * 
*/
  __pyx_t_2 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_v_x_ind, __pyx_v_y_ind, __pyx_v_z_ind); if (unlikely(__pyx_t_2 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 261, __pyx_L1_error)
  __pyx_v_mi = __pyx_t_2;

  /* "yt/utilities/lib/geometry_utils.pxd":262
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  __pyx_r = __pyx_v_mi;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":249
 *     p[2] = compact_64bits_by2(mi>>ZSHIFT)
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t bounded_morton(np.float64_t x, np.float64_t y, np.float64_t z,
 *                                np.float64_t *DLE, np.float64_t *DRE, np.int32_t order):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.geometry_utils.bounded_morton", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":264
 *     return mi
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t bounded_morton_relative(np.float64_t x, np.float64_t y, np.float64_t z,
 *                                np.float64_t *DLE, np.float64_t *DRE,
*/

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_relative(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_y, __pyx_t_5numpy_float64_t __pyx_v_z, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_DRE, __pyx_t_5numpy_int32_t __pyx_v_order1, __pyx_t_5numpy_int32_t __pyx_v_order2) {
  int __pyx_v_i;
  __pyx_t_5numpy_float64_t __pyx_v_dds1[3];
  __pyx_t_5numpy_float64_t __pyx_v_dds2[3];
  __pyx_t_5numpy_float64_t __pyx_v_DLE2[3];
  __pyx_t_5numpy_uint64_t __pyx_v_x_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_y_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_z_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_mi2;
  __pyx_t_5numpy_uint64_t __pyx_r;
  int __pyx_t_1;
  __pyx_t_5numpy_uint64_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":274
 *     cdef np.uint64_t x_ind, y_ind, z_ind
 *     cdef np.uint64_t mi2
 *     for i in range(3):             # <<<<<<<<<<<<<<
 *         dds1[i] = (DRE[i] - DLE[i]) / (1 << order1)
 *         dds2[i] = dds1[i] / (1 << order2)
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/utilities/lib/geometry_utils.pxd":275
 *     cdef np.uint64_t mi2
 *     for i in range(3):
 *         dds1[i] = (DRE[i] - DLE[i]) / (1 << order1)             # <<<<<<<<<<<<<<
 *         dds2[i] = dds1[i] / (1 << order2)
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
*/
    (__pyx_v_dds1[__pyx_v_i]) = (((__pyx_v_DRE[__pyx_v_i]) - (__pyx_v_DLE[__pyx_v_i])) / (1 << __pyx_v_order1));

    /* "yt/utilities/lib/geometry_utils.pxd":276
 *     for i in range(3):
 *         dds1[i] = (DRE[i] - DLE[i]) / (1 << order1)
 *         dds2[i] = dds1[i] / (1 << order2)             # <<<<<<<<<<<<<<
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
*/
    (__pyx_v_dds2[__pyx_v_i]) = ((__pyx_v_dds1[__pyx_v_i]) / (1 << __pyx_v_order2));
  }

  /* "yt/utilities/lib/geometry_utils.pxd":277
 *         dds1[i] = (DRE[i] - DLE[i]) / (1 << order1)
 *         dds2[i] = dds1[i] / (1 << order2)
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]             # <<<<<<<<<<<<<<
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
*/
  (__pyx_v_DLE2[0]) = (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE[0])) / (__pyx_v_dds1[0])))) * (__pyx_v_dds1[0]));

  /* "yt/utilities/lib/geometry_utils.pxd":278
 *         dds2[i] = dds1[i] / (1 << order2)
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]             # <<<<<<<<<<<<<<
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
*/
  (__pyx_v_DLE2[1]) = (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE[1])) / (__pyx_v_dds1[1])))) * (__pyx_v_dds1[1]));

  /* "yt/utilities/lib/geometry_utils.pxd":279
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]             # <<<<<<<<<<<<<<
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
*/
  (__pyx_v_DLE2[2]) = (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE[2])) / (__pyx_v_dds1[2])))) * (__pyx_v_dds1[2]));

  /* "yt/utilities/lib/geometry_utils.pxd":280
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])             # <<<<<<<<<<<<<<
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
*/
  __pyx_v_x_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE2[0])) / (__pyx_v_dds2[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":281
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])             # <<<<<<<<<<<<<<
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)
*/
  __pyx_v_y_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE2[1])) / (__pyx_v_dds2[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":282
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])             # <<<<<<<<<<<<<<
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi2
*/
  __pyx_v_z_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE2[2])) / (__pyx_v_dds2[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":283
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)             # <<<<<<<<<<<<<<
 *     return mi2
 * 
*/
  __pyx_t_2 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_v_x_ind, __pyx_v_y_ind, __pyx_v_z_ind); if (unlikely(__pyx_t_2 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 283, __pyx_L1_error)
  __pyx_v_mi2 = __pyx_t_2;

  /* "yt/utilities/lib/geometry_utils.pxd":284
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi2             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_mi2;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":264
 *     return mi
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t bounded_morton_relative(np.float64_t x, np.float64_t y, np.float64_t z,
 *                                np.float64_t *DLE, np.float64_t *DRE,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.geometry_utils.bounded_morton_relative", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":288
 * 
 * # This doesn't seem to be much, if at all, faster...
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t bounded_morton_dds(np.float64_t x, np.float64_t y, np.float64_t z,
 *                                np.float64_t *DLE, np.float64_t *dds):
*/

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_dds(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_y, __pyx_t_5numpy_float64_t __pyx_v_z, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_dds) {
  __pyx_t_5numpy_uint64_t __pyx_v_x_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_y_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_z_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_mi;
  __pyx_t_5numpy_uint64_t __pyx_r;
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":293
 *     cdef np.uint64_t x_ind, y_ind, z_ind
 *     cdef np.uint64_t mi
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])             # <<<<<<<<<<<<<<
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
*/
  __pyx_v_x_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE[0])) / (__pyx_v_dds[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":294
 *     cdef np.uint64_t mi
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])             # <<<<<<<<<<<<<<
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)
*/
  __pyx_v_y_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE[1])) / (__pyx_v_dds[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":295
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])             # <<<<<<<<<<<<<<
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi
*/
  __pyx_v_z_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE[2])) / (__pyx_v_dds[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":296
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)             # <<<<<<<<<<<<<<
 *     return mi
 * 
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_v_x_ind, __pyx_v_y_ind, __pyx_v_z_ind); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 296, __pyx_L1_error)
  __pyx_v_mi = __pyx_t_1;

  /* "yt/utilities/lib/geometry_utils.pxd":297
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  __pyx_r = __pyx_v_mi;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":288
 * 
 * # This doesn't seem to be much, if at all, faster...
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t bounded_morton_dds(np.float64_t x, np.float64_t y, np.float64_t z,
 *                                np.float64_t *DLE, np.float64_t *dds):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.geometry_utils.bounded_morton_dds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":299
 *     return mi
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t bounded_morton_relative_dds(np.float64_t x, np.float64_t y, np.float64_t z,
 *                                np.float64_t *DLE, np.float64_t *dds1, np.float64_t *dds2):
*/

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_relative_dds(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_y, __pyx_t_5numpy_float64_t __pyx_v_z, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_dds1, __pyx_t_5numpy_float64_t *__pyx_v_dds2) {
  __pyx_t_5numpy_float64_t __pyx_v_DLE2[3];
  __pyx_t_5numpy_uint64_t __pyx_v_x_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_y_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_z_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_mi2;
  __pyx_t_5numpy_uint64_t __pyx_r;
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":305
 *     cdef np.uint64_t x_ind, y_ind, z_ind
 *     cdef np.uint64_t mi2
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]             # <<<<<<<<<<<<<<
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
*/
  (__pyx_v_DLE2[0]) = (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE[0])) / (__pyx_v_dds1[0])))) * (__pyx_v_dds1[0]));

  /* "yt/utilities/lib/geometry_utils.pxd":306
 *     cdef np.uint64_t mi2
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]             # <<<<<<<<<<<<<<
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
*/
  (__pyx_v_DLE2[1]) = (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE[1])) / (__pyx_v_dds1[1])))) * (__pyx_v_dds1[1]));

  /* "yt/utilities/lib/geometry_utils.pxd":307
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]             # <<<<<<<<<<<<<<
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
*/
  (__pyx_v_DLE2[2]) = (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE[2])) / (__pyx_v_dds1[2])))) * (__pyx_v_dds1[2]));

  /* "yt/utilities/lib/geometry_utils.pxd":308
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])             # <<<<<<<<<<<<<<
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
*/
  __pyx_v_x_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE2[0])) / (__pyx_v_dds2[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":309
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])             # <<<<<<<<<<<<<<
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)
*/
  __pyx_v_y_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE2[1])) / (__pyx_v_dds2[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":310
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])             # <<<<<<<<<<<<<<
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi2
*/
  __pyx_v_z_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE2[2])) / (__pyx_v_dds2[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":311
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)             # <<<<<<<<<<<<<<
 *     return mi2
 * 
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_v_x_ind, __pyx_v_y_ind, __pyx_v_z_ind); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 311, __pyx_L1_error)
  __pyx_v_mi2 = __pyx_t_1;

  /* "yt/utilities/lib/geometry_utils.pxd":312
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi2             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_mi2;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":299
 *     return mi
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t bounded_morton_relative_dds(np.float64_t x, np.float64_t y, np.float64_t z,
 *                                np.float64_t *DLE, np.float64_t *dds1, np.float64_t *dds2):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.geometry_utils.bounded_morton_relative_dds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":315
 * 
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t bounded_morton_split_dds(np.float64_t x, np.float64_t y, np.float64_t z,
 *                                np.float64_t *DLE, np.float64_t *dds, np.uint64_t *p):
*/

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_y, __pyx_t_5numpy_float64_t __pyx_v_z, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_dds, __pyx_t_5numpy_uint64_t *__pyx_v_p) {
  __pyx_t_5numpy_uint64_t __pyx_v_mi;
  __pyx_t_5numpy_uint64_t __pyx_r;
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":319
 *                                np.float64_t *DLE, np.float64_t *dds, np.uint64_t *p):
 *     cdef np.uint64_t mi
 *     p[0] = <np.uint64_t> ((x - DLE[0])/dds[0])             # <<<<<<<<<<<<<<
 *     p[1] = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     p[2] = <np.uint64_t> ((z - DLE[2])/dds[2])
*/
  (__pyx_v_p[0]) = ((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE[0])) / (__pyx_v_dds[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":320
 *     cdef np.uint64_t mi
 *     p[0] = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     p[1] = <np.uint64_t> ((y - DLE[1])/dds[1])             # <<<<<<<<<<<<<<
 *     p[2] = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(p[0], p[1], p[2])
*/
  (__pyx_v_p[1]) = ((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE[1])) / (__pyx_v_dds[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":321
 *     p[0] = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     p[1] = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     p[2] = <np.uint64_t> ((z - DLE[2])/dds[2])             # <<<<<<<<<<<<<<
 *     mi = encode_morton_64bit(p[0], p[1], p[2])
 *     return mi
*/
  (__pyx_v_p[2]) = ((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE[2])) / (__pyx_v_dds[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":322
 *     p[1] = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     p[2] = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(p[0], p[1], p[2])             # <<<<<<<<<<<<<<
 *     return mi
 * 
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit((__pyx_v_p[0]), (__pyx_v_p[1]), (__pyx_v_p[2])); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 322, __pyx_L1_error)
  __pyx_v_mi = __pyx_t_1;

  /* "yt/utilities/lib/geometry_utils.pxd":323
 *     p[2] = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(p[0], p[1], p[2])
 *     return mi             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
*/
  __pyx_r = __pyx_v_mi;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":315
 * 
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t bounded_morton_split_dds(np.float64_t x, np.float64_t y, np.float64_t z,
 *                                np.float64_t *DLE, np.float64_t *dds, np.uint64_t *p):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.geometry_utils.bounded_morton_split_dds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":325
 *     return mi
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t bounded_morton_split_relative_dds(np.float64_t x, np.float64_t y, np.float64_t z,
 *                                np.float64_t *DLE, np.float64_t *dds1, np.float64_t *dds2,
*/

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_relative_dds(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_y, __pyx_t_5numpy_float64_t __pyx_v_z, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_dds1, __pyx_t_5numpy_float64_t *__pyx_v_dds2, __pyx_t_5numpy_uint64_t *__pyx_v_p2) {
  __pyx_t_5numpy_float64_t __pyx_v_DLE2[3];
  __pyx_t_5numpy_uint64_t __pyx_v_mi2;
  __pyx_t_5numpy_uint64_t __pyx_r;
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":331
 *     cdef np.float64_t DLE2[3]
 *     cdef np.uint64_t mi2
 *     DLE2[0] = DLE[0] + <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]             # <<<<<<<<<<<<<<
 *     DLE2[1] = DLE[1] + <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = DLE[2] + <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
*/
  (__pyx_v_DLE2[0]) = ((__pyx_v_DLE[0]) + (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE[0])) / (__pyx_v_dds1[0])))) * (__pyx_v_dds1[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":332
 *     cdef np.uint64_t mi2
 *     DLE2[0] = DLE[0] + <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = DLE[1] + <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]             # <<<<<<<<<<<<<<
 *     DLE2[2] = DLE[2] + <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     p2[0] = <np.uint64_t> ((x - DLE2[0])/dds2[0])
*/
  (__pyx_v_DLE2[1]) = ((__pyx_v_DLE[1]) + (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE[1])) / (__pyx_v_dds1[1])))) * (__pyx_v_dds1[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":333
 *     DLE2[0] = DLE[0] + <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = DLE[1] + <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = DLE[2] + <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]             # <<<<<<<<<<<<<<
 *     p2[0] = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     p2[1] = <np.uint64_t> ((y - DLE2[1])/dds2[1])
*/
  (__pyx_v_DLE2[2]) = ((__pyx_v_DLE[2]) + (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE[2])) / (__pyx_v_dds1[2])))) * (__pyx_v_dds1[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":334
 *     DLE2[1] = DLE[1] + <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = DLE[2] + <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     p2[0] = <np.uint64_t> ((x - DLE2[0])/dds2[0])             # <<<<<<<<<<<<<<
 *     p2[1] = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     p2[2] = <np.uint64_t> ((z - DLE2[2])/dds2[2])
*/
  (__pyx_v_p2[0]) = ((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE2[0])) / (__pyx_v_dds2[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":335
 *     DLE2[2] = DLE[2] + <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     p2[0] = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     p2[1] = <np.uint64_t> ((y - DLE2[1])/dds2[1])             # <<<<<<<<<<<<<<
 *     p2[2] = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(p2[0], p2[1], p2[2])
*/
  (__pyx_v_p2[1]) = ((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE2[1])) / (__pyx_v_dds2[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":336
 *     p2[0] = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     p2[1] = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     p2[2] = <np.uint64_t> ((z - DLE2[2])/dds2[2])             # <<<<<<<<<<<<<<
 *     mi2 = encode_morton_64bit(p2[0], p2[1], p2[2])
 *     return mi2
*/
  (__pyx_v_p2[2]) = ((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE2[2])) / (__pyx_v_dds2[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":337
 *     p2[1] = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     p2[2] = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(p2[0], p2[1], p2[2])             # <<<<<<<<<<<<<<
 *     return mi2
 * 
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit((__pyx_v_p2[0]), (__pyx_v_p2[1]), (__pyx_v_p2[2])); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 337, __pyx_L1_error)
  __pyx_v_mi2 = __pyx_t_1;

  /* "yt/utilities/lib/geometry_utils.pxd":338
 *     p2[2] = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(p2[0], p2[1], p2[2])
 *     return mi2             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_r = __pyx_v_mi2;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":325
 *     return mi
 * 
 * @cython.cdivision(True)             # <<<<<<<<<<<<<<
 * cdef inline np.uint64_t bounded_morton_split_relative_dds(np.float64_t x, np.float64_t y, np.float64_t z,
 *                                np.float64_t *DLE, np.float64_t *dds1, np.float64_t *dds2,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.geometry_utils.bounded_morton_split_relative_dds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "selection_routines.pxd":88
 *     cdef public SelectorObject sel2
 * 
 * cdef inline np.float64_t _periodic_dist(np.float64_t x1, np.float64_t x2,             # <<<<<<<<<<<<<<
 *                                         np.float64_t dw, bint periodic) nogil:
 *     cdef np.float64_t rel = x1 - x2
*/

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_18selection_routines__periodic_dist(__pyx_t_5numpy_float64_t __pyx_v_x1, __pyx_t_5numpy_float64_t __pyx_v_x2, __pyx_t_5numpy_float64_t __pyx_v_dw, int __pyx_v_periodic) {
  __pyx_t_5numpy_float64_t __pyx_v_rel;
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;

  /* "selection_routines.pxd":90
 * cdef inline np.float64_t _periodic_dist(np.float64_t x1, np.float64_t x2,
 *                                         np.float64_t dw, bint periodic) nogil:
 *     cdef np.float64_t rel = x1 - x2             # <<<<<<<<<<<<<<
 *     if not periodic: return rel
 *     if rel > dw * 0.5:
*/
  __pyx_v_rel = (__pyx_v_x1 - __pyx_v_x2);

  /* "selection_routines.pxd":91
 *                                         np.float64_t dw, bint periodic) nogil:
 *     cdef np.float64_t rel = x1 - x2
 *     if not periodic: return rel             # <<<<<<<<<<<<<<
 *     if rel > dw * 0.5:
 *         rel -= dw
*/
  __pyx_t_1 = (!__pyx_v_periodic);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_rel;
    goto __pyx_L0;
  }

  /* "selection_routines.pxd":92
 *     cdef np.float64_t rel = x1 - x2
 *     if not periodic: return rel
 *     if rel > dw * 0.5:             # <<<<<<<<<<<<<<
 *         rel -= dw
 *     elif rel < -dw * 0.5:
*/
  __pyx_t_1 = (__pyx_v_rel > (__pyx_v_dw * 0.5));
  if (__pyx_t_1) {

    /* "selection_routines.pxd":93
 *     if not periodic: return rel
 *     if rel > dw * 0.5:
 *         rel -= dw             # <<<<<<<<<<<<<<
 *     elif rel < -dw * 0.5:
 *         rel += dw
*/
    __pyx_v_rel = (__pyx_v_rel - __pyx_v_dw);

    /* "selection_routines.pxd":92
 *     cdef np.float64_t rel = x1 - x2
 *     if not periodic: return rel
 *     if rel > dw * 0.5:             # <<<<<<<<<<<<<<
 *         rel -= dw
 *     elif rel < -dw * 0.5:
*/
    goto __pyx_L4;
  }

  /* "selection_routines.pxd":94
 *     if rel > dw * 0.5:
 *         rel -= dw
 *     elif rel < -dw * 0.5:             # <<<<<<<<<<<<<<
 *         rel += dw
 *     return rel
*/
  __pyx_t_1 = (__pyx_v_rel < ((-__pyx_v_dw) * 0.5));
  if (__pyx_t_1) {

    /* "selection_routines.pxd":95
 *         rel -= dw
 *     elif rel < -dw * 0.5:
 *         rel += dw             # <<<<<<<<<<<<<<
 *     return rel
*/
    __pyx_v_rel = (__pyx_v_rel + __pyx_v_dw);

    /* "selection_routines.pxd":94
 *     if rel > dw * 0.5:
 *         rel -= dw
 *     elif rel < -dw * 0.5:             # <<<<<<<<<<<<<<
 *         rel += dw
 *     return rel
*/
  }
  __pyx_L4:;

  /* "selection_routines.pxd":96
 *     elif rel < -dw * 0.5:
 *         rel += dw
 *     return rel             # <<<<<<<<<<<<<<
*/
  __pyx_r = __pyx_v_rel;
  goto __pyx_L0;

  /* "selection_routines.pxd":88
 *     cdef public SelectorObject sel2
 * 
 * cdef inline np.float64_t _periodic_dist(np.float64_t x1, np.float64_t x2,             # <<<<<<<<<<<<<<
 *                                         np.float64_t dw, bint periodic) nogil:
 *     cdef np.float64_t rel = x1 - x2
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "oct_container.pxd":47
 * 
 * cdef class OctObjectPool(ObjectPool):
 *     cdef inline OctAllocationContainer *get_cont(self, int i):             # <<<<<<<<<<<<<<
 *         return <OctAllocationContainer*> (&self.containers[i])
 * 
*/

static CYTHON_INLINE struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer *__pyx_f_2yt_8geometry_13oct_container_13OctObjectPool_get_cont(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool *__pyx_v_self, int __pyx_v_i) {
  struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer *__pyx_r;

  /* "oct_container.pxd":48
 * cdef class OctObjectPool(ObjectPool):
 *     cdef inline OctAllocationContainer *get_cont(self, int i):
 *         return <OctAllocationContainer*> (&self.containers[i])             # <<<<<<<<<<<<<<
 * 
 * cdef OctList *OctList_append(OctList *list, Oct *o)
*/
  __pyx_r = ((struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer *)(&(__pyx_v_self->__pyx_base.containers[__pyx_v_i])));
  goto __pyx_L0;

  /* "oct_container.pxd":47
 * 
 * cdef class OctObjectPool(ObjectPool):
 *     cdef inline OctAllocationContainer *get_cont(self, int i):             # <<<<<<<<<<<<<<
 *         return <OctAllocationContainer*> (&self.containers[i])
 * 
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "oct_visitors.pxd":51
 *     cdef void visit(self, Oct*, np.uint8_t selected)
 * 
 *     cdef inline int oind(self):             # <<<<<<<<<<<<<<
 *         cdef int d = self.nz
 *         return (((self.ind[0]*d)+self.ind[1])*d+self.ind[2])
*/

static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_10OctVisitor_oind(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *__pyx_v_self) {
  int __pyx_v_d;
  int __pyx_r;
  __pyx_t_5numpy_int8_t __pyx_t_1;

  /* "oct_visitors.pxd":52
 * 
 *     cdef inline int oind(self):
 *         cdef int d = self.nz             # <<<<<<<<<<<<<<
 *         return (((self.ind[0]*d)+self.ind[1])*d+self.ind[2])
 * 
*/
  __pyx_t_1 = __pyx_v_self->nz;
  __pyx_v_d = __pyx_t_1;

  /* "oct_visitors.pxd":53
 *     cdef inline int oind(self):
 *         cdef int d = self.nz
 *         return (((self.ind[0]*d)+self.ind[1])*d+self.ind[2])             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int rind(self):
*/
  __pyx_r = (((((__pyx_v_self->ind[0]) * __pyx_v_d) + (__pyx_v_self->ind[1])) * __pyx_v_d) + (__pyx_v_self->ind[2]));
  goto __pyx_L0;

  /* "oct_visitors.pxd":51
 *     cdef void visit(self, Oct*, np.uint8_t selected)
 * 
 *     cdef inline int oind(self):             # <<<<<<<<<<<<<<
 *         cdef int d = self.nz
 *         return (((self.ind[0]*d)+self.ind[1])*d+self.ind[2])
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "oct_visitors.pxd":55
 *         return (((self.ind[0]*d)+self.ind[1])*d+self.ind[2])
 * 
 *     cdef inline int rind(self):             # <<<<<<<<<<<<<<
 *         cdef int d = self.nz
 *         return (((self.ind[2]*d)+self.ind[1])*d+self.ind[0])
*/

static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_10OctVisitor_rind(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *__pyx_v_self) {
  int __pyx_v_d;
  int __pyx_r;
  __pyx_t_5numpy_int8_t __pyx_t_1;

  /* "oct_visitors.pxd":56
 * 
 *     cdef inline int rind(self):
 *         cdef int d = self.nz             # <<<<<<<<<<<<<<
 *         return (((self.ind[2]*d)+self.ind[1])*d+self.ind[0])
 * 
*/
  __pyx_t_1 = __pyx_v_self->nz;
  __pyx_v_d = __pyx_t_1;

  /* "oct_visitors.pxd":57
 *     cdef inline int rind(self):
 *         cdef int d = self.nz
 *         return (((self.ind[2]*d)+self.ind[1])*d+self.ind[0])             # <<<<<<<<<<<<<<
 * 
 * cdef class CountTotalOcts(OctVisitor):
*/
  __pyx_r = (((((__pyx_v_self->ind[2]) * __pyx_v_d) + (__pyx_v_self->ind[1])) * __pyx_v_d) + (__pyx_v_self->ind[0]));
  goto __pyx_L0;

  /* "oct_visitors.pxd":55
 *         return (((self.ind[0]*d)+self.ind[1])*d+self.ind[2])
 * 
 *     cdef inline int rind(self):             # <<<<<<<<<<<<<<
 *         cdef int d = self.nz
 *         return (((self.ind[2]*d)+self.ind[1])*d+self.ind[0])
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "oct_visitors.pxd":143
 *     cdef np.uint64_t[:] morton_ind
 * 
 * cdef inline int cind(int i, int j, int k) nogil:             # <<<<<<<<<<<<<<
 *     # THIS ONLY WORKS FOR CHILDREN.  It is not general for zones.
 *     return (((i*2)+j)*2+k)
*/

static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_cind(int __pyx_v_i, int __pyx_v_j, int __pyx_v_k) {
  int __pyx_r;

  /* "oct_visitors.pxd":145
 * cdef inline int cind(int i, int j, int k) nogil:
 *     # THIS ONLY WORKS FOR CHILDREN.  It is not general for zones.
 *     return (((i*2)+j)*2+k)             # <<<<<<<<<<<<<<
 * 
 * from .oct_container cimport OctreeContainer
*/
  __pyx_r = ((((__pyx_v_i * 2) + __pyx_v_j) * 2) + __pyx_v_k);
  goto __pyx_L0;

  /* "oct_visitors.pxd":143
 *     cdef np.uint64_t[:] morton_ind
 * 
 * cdef inline int cind(int i, int j, int k) nogil:             # <<<<<<<<<<<<<<
 *     # THIS ONLY WORKS FOR CHILDREN.  It is not general for zones.
 *     return (((i*2)+j)*2+k)
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "oct_visitors.pxd":166
 *     cdef void set_neighbour_info(self, Oct *o, int ishift[3])
 * 
 *     cdef inline np.uint8_t neighbour_rind(self):             # <<<<<<<<<<<<<<
 *         cdef int d = self.nz
 *         return (((self.neigh_ind[2]*d)+self.neigh_ind[1])*d+self.neigh_ind[0])
*/

static CYTHON_INLINE __pyx_t_5numpy_uint8_t __pyx_f_2yt_8geometry_12oct_visitors_20BaseNeighbourVisitor_neighbour_rind(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor *__pyx_v_self) {
  int __pyx_v_d;
  __pyx_t_5numpy_uint8_t __pyx_r;
  __pyx_t_5numpy_int8_t __pyx_t_1;

  /* "oct_visitors.pxd":167
 * 
 *     cdef inline np.uint8_t neighbour_rind(self):
 *         cdef int d = self.nz             # <<<<<<<<<<<<<<
 *         return (((self.neigh_ind[2]*d)+self.neigh_ind[1])*d+self.neigh_ind[0])
 * 
*/
  __pyx_t_1 = __pyx_v_self->__pyx_base.nz;
  __pyx_v_d = __pyx_t_1;

  /* "oct_visitors.pxd":168
 *     cdef inline np.uint8_t neighbour_rind(self):
 *         cdef int d = self.nz
 *         return (((self.neigh_ind[2]*d)+self.neigh_ind[1])*d+self.neigh_ind[0])             # <<<<<<<<<<<<<<
 * 
 * cdef class NeighbourCellIndexVisitor(BaseNeighbourVisitor):
*/
  __pyx_r = (((((__pyx_v_self->neigh_ind[2]) * __pyx_v_d) + (__pyx_v_self->neigh_ind[1])) * __pyx_v_d) + (__pyx_v_self->neigh_ind[0]));
  goto __pyx_L0;

  /* "oct_visitors.pxd":166
 *     cdef void set_neighbour_info(self, Oct *o, int ishift[3])
 * 
 *     cdef inline np.uint8_t neighbour_rind(self):             # <<<<<<<<<<<<<<
 *         cdef int d = self.nz
 *         return (((self.neigh_ind[2]*d)+self.neigh_ind[1])*d+self.neigh_ind[0])
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":81
 *     cdef public int n_ref
 * 
 *     def allocate_root(self):             # <<<<<<<<<<<<<<
 *         cdef int i, j, k
 *         cdef Oct *cur
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_1allocate_root(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_1allocate_root = {"allocate_root", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_1allocate_root, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_1allocate_root(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("allocate_root (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("allocate_root", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("allocate_root", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_allocate_root(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_allocate_root(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_cur;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("allocate_root", 0);

  /* "yt/geometry/particle_oct_container.pyx":84
 *         cdef int i, j, k
 *         cdef Oct *cur
 *         for i in range(self.nn[0]):             # <<<<<<<<<<<<<<
 *             for j in range(self.nn[1]):
 *                 for k in range(self.nn[2]):
*/
  __pyx_t_1 = (__pyx_v_self->__pyx_base.nn[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":85
 *         cdef Oct *cur
 *         for i in range(self.nn[0]):
 *             for j in range(self.nn[1]):             # <<<<<<<<<<<<<<
 *                 for k in range(self.nn[2]):
 *                     cur = self.allocate_oct()
*/
    __pyx_t_4 = (__pyx_v_self->__pyx_base.nn[1]);
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "yt/geometry/particle_oct_container.pyx":86
 *         for i in range(self.nn[0]):
 *             for j in range(self.nn[1]):
 *                 for k in range(self.nn[2]):             # <<<<<<<<<<<<<<
 *                     cur = self.allocate_oct()
 *                     self.root_mesh[i][j][k] = cur
*/
      __pyx_t_7 = (__pyx_v_self->__pyx_base.nn[2]);
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_k = __pyx_t_9;

        /* "yt/geometry/particle_oct_container.pyx":87
 *             for j in range(self.nn[1]):
 *                 for k in range(self.nn[2]):
 *                     cur = self.allocate_oct()             # <<<<<<<<<<<<<<
 *                     self.root_mesh[i][j][k] = cur
 * 
*/
        __pyx_t_10 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->allocate_oct(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 87, __pyx_L1_error)
        __pyx_v_cur = __pyx_t_10;

        /* "yt/geometry/particle_oct_container.pyx":88
 *                 for k in range(self.nn[2]):
 *                     cur = self.allocate_oct()
 *                     self.root_mesh[i][j][k] = cur             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
*/
        (((__pyx_v_self->__pyx_base.root_mesh[__pyx_v_i])[__pyx_v_j])[__pyx_v_k]) = __pyx_v_cur;
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":81
 *     cdef public int n_ref
 * 
 *     def allocate_root(self):             # <<<<<<<<<<<<<<
 *         cdef int i, j, k
 *         cdef Oct *cur
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.allocate_root", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":90
 *                     self.root_mesh[i][j][k] = cur
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         #Call the freemem ops on every ocy
 *         #of the root mesh recursively
*/

/* Python wrapper */
static void __pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_3__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_2__dealloc__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_2__dealloc__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":94
 *         #of the root mesh recursively
 *         cdef int i, j, k
 *         if self.root_mesh == NULL: return             # <<<<<<<<<<<<<<
 *         for i in range(self.nn[0]):
 *             if self.root_mesh[i] == NULL: continue
*/
  __pyx_t_1 = (__pyx_v_self->__pyx_base.root_mesh == NULL);
  if (__pyx_t_1) {
    goto __pyx_L0;
  }

  /* "yt/geometry/particle_oct_container.pyx":95
 *         cdef int i, j, k
 *         if self.root_mesh == NULL: return
 *         for i in range(self.nn[0]):             # <<<<<<<<<<<<<<
 *             if self.root_mesh[i] == NULL: continue
 *             for j in range(self.nn[1]):
*/
  __pyx_t_2 = (__pyx_v_self->__pyx_base.nn[0]);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "yt/geometry/particle_oct_container.pyx":96
 *         if self.root_mesh == NULL: return
 *         for i in range(self.nn[0]):
 *             if self.root_mesh[i] == NULL: continue             # <<<<<<<<<<<<<<
 *             for j in range(self.nn[1]):
 *                 if self.root_mesh[i][j] == NULL: continue
*/
    __pyx_t_1 = ((__pyx_v_self->__pyx_base.root_mesh[__pyx_v_i]) == NULL);
    if (__pyx_t_1) {
      goto __pyx_L4_continue;
    }

    /* "yt/geometry/particle_oct_container.pyx":97
 *         for i in range(self.nn[0]):
 *             if self.root_mesh[i] == NULL: continue
 *             for j in range(self.nn[1]):             # <<<<<<<<<<<<<<
 *                 if self.root_mesh[i][j] == NULL: continue
 *                 for k in range(self.nn[2]):
*/
    __pyx_t_5 = (__pyx_v_self->__pyx_base.nn[1]);
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
      __pyx_v_j = __pyx_t_7;

      /* "yt/geometry/particle_oct_container.pyx":98
 *             if self.root_mesh[i] == NULL: continue
 *             for j in range(self.nn[1]):
 *                 if self.root_mesh[i][j] == NULL: continue             # <<<<<<<<<<<<<<
 *                 for k in range(self.nn[2]):
 *                     if self.root_mesh[i][j][k] == NULL: continue
*/
      __pyx_t_1 = (((__pyx_v_self->__pyx_base.root_mesh[__pyx_v_i])[__pyx_v_j]) == NULL);
      if (__pyx_t_1) {
        goto __pyx_L7_continue;
      }

      /* "yt/geometry/particle_oct_container.pyx":99
 *             for j in range(self.nn[1]):
 *                 if self.root_mesh[i][j] == NULL: continue
 *                 for k in range(self.nn[2]):             # <<<<<<<<<<<<<<
 *                     if self.root_mesh[i][j][k] == NULL: continue
 *                     self.visit_free(self.root_mesh[i][j][k])
*/
      __pyx_t_8 = (__pyx_v_self->__pyx_base.nn[2]);
      __pyx_t_9 = __pyx_t_8;
      for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
        __pyx_v_k = __pyx_t_10;

        /* "yt/geometry/particle_oct_container.pyx":100
 *                 if self.root_mesh[i][j] == NULL: continue
 *                 for k in range(self.nn[2]):
 *                     if self.root_mesh[i][j][k] == NULL: continue             # <<<<<<<<<<<<<<
 *                     self.visit_free(self.root_mesh[i][j][k])
 *         free(self.oct_list)
*/
        __pyx_t_1 = ((((__pyx_v_self->__pyx_base.root_mesh[__pyx_v_i])[__pyx_v_j])[__pyx_v_k]) == NULL);
        if (__pyx_t_1) {
          goto __pyx_L10_continue;
        }

        /* "yt/geometry/particle_oct_container.pyx":101
 *                 for k in range(self.nn[2]):
 *                     if self.root_mesh[i][j][k] == NULL: continue
 *                     self.visit_free(self.root_mesh[i][j][k])             # <<<<<<<<<<<<<<
 *         free(self.oct_list)
 *         free(self.dom_offsets)
*/
        ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->visit_free(__pyx_v_self, (((__pyx_v_self->__pyx_base.root_mesh[__pyx_v_i])[__pyx_v_j])[__pyx_v_k])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L1_error)
        __pyx_L10_continue:;
      }
      __pyx_L7_continue:;
    }
    __pyx_L4_continue:;
  }

  /* "yt/geometry/particle_oct_container.pyx":102
 *                     if self.root_mesh[i][j][k] == NULL: continue
 *                     self.visit_free(self.root_mesh[i][j][k])
 *         free(self.oct_list)             # <<<<<<<<<<<<<<
 *         free(self.dom_offsets)
 * 
*/
  free(__pyx_v_self->oct_list);

  /* "yt/geometry/particle_oct_container.pyx":103
 *                     self.visit_free(self.root_mesh[i][j][k])
 *         free(self.oct_list)
 *         free(self.dom_offsets)             # <<<<<<<<<<<<<<
 * 
 *     cdef void visit_free(self, Oct *o):
*/
  free(__pyx_v_self->dom_offsets);

  /* "yt/geometry/particle_oct_container.pyx":90
 *                     self.root_mesh[i][j][k] = cur
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         #Call the freemem ops on every ocy
 *         #of the root mesh recursively
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("yt.geometry.particle_oct_container.ParticleOctreeContainer.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":105
 *         free(self.dom_offsets)
 * 
 *     cdef void visit_free(self, Oct *o):             # <<<<<<<<<<<<<<
 *         #Free the memory for this oct recursively
 *         cdef int i, j, k
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit_free(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":108
 *         #Free the memory for this oct recursively
 *         cdef int i, j, k
 *         for i in range(2):             # <<<<<<<<<<<<<<
 *             for j in range(2):
 *                 for k in range(2):
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 2; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":109
 *         cdef int i, j, k
 *         for i in range(2):
 *             for j in range(2):             # <<<<<<<<<<<<<<
 *                 for k in range(2):
 *                     if o.children != NULL \
*/
    for (__pyx_t_2 = 0; __pyx_t_2 < 2; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "yt/geometry/particle_oct_container.pyx":110
 *         for i in range(2):
 *             for j in range(2):
 *                 for k in range(2):             # <<<<<<<<<<<<<<
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:
*/
      for (__pyx_t_3 = 0; __pyx_t_3 < 2; __pyx_t_3+=1) {
        __pyx_v_k = __pyx_t_3;

        /* "yt/geometry/particle_oct_container.pyx":111
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_free(o.children[cind(i,j,k)])
*/
        __pyx_t_5 = (__pyx_v_o->children != NULL);
        if (__pyx_t_5) {
        } else {
          __pyx_t_4 = __pyx_t_5;
          goto __pyx_L10_bool_binop_done;
        }

        /* "yt/geometry/particle_oct_container.pyx":112
 *                 for k in range(2):
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:             # <<<<<<<<<<<<<<
 *                         self.visit_free(o.children[cind(i,j,k)])
 *         free(o.children)
*/
        __pyx_t_6 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L1_error)
        __pyx_t_5 = ((__pyx_v_o->children[__pyx_t_6]) != NULL);
        __pyx_t_4 = __pyx_t_5;
        __pyx_L10_bool_binop_done:;

        /* "yt/geometry/particle_oct_container.pyx":111
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_free(o.children[cind(i,j,k)])
*/
        if (__pyx_t_4) {

          /* "yt/geometry/particle_oct_container.pyx":113
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_free(o.children[cind(i,j,k)])             # <<<<<<<<<<<<<<
 *         free(o.children)
 *         free(o)
*/
          __pyx_t_6 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 113, __pyx_L1_error)
          ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->visit_free(__pyx_v_self, (__pyx_v_o->children[__pyx_t_6])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 113, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":111
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_free(o.children[cind(i,j,k)])
*/
        }
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":114
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_free(o.children[cind(i,j,k)])
 *         free(o.children)             # <<<<<<<<<<<<<<
 *         free(o)
 * 
*/
  free(__pyx_v_o->children);

  /* "yt/geometry/particle_oct_container.pyx":115
 *                         self.visit_free(o.children[cind(i,j,k)])
 *         free(o.children)
 *         free(o)             # <<<<<<<<<<<<<<
 * 
 *     def clear_fileind(self):
*/
  free(__pyx_v_o);

  /* "yt/geometry/particle_oct_container.pyx":105
 *         free(self.dom_offsets)
 * 
 *     cdef void visit_free(self, Oct *o):             # <<<<<<<<<<<<<<
 *         #Free the memory for this oct recursively
 *         cdef int i, j, k
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.visit_free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":117
 *         free(o)
 * 
 *     def clear_fileind(self):             # <<<<<<<<<<<<<<
 *         cdef int i, j, k
 *         for i in range(self.nn[0]):
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5clear_fileind(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5clear_fileind = {"clear_fileind", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5clear_fileind, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5clear_fileind(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clear_fileind (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("clear_fileind", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("clear_fileind", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_4clear_fileind(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_4clear_fileind(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clear_fileind", 0);

  /* "yt/geometry/particle_oct_container.pyx":119
 *     def clear_fileind(self):
 *         cdef int i, j, k
 *         for i in range(self.nn[0]):             # <<<<<<<<<<<<<<
 *             for j in range(self.nn[1]):
 *                 for k in range(self.nn[2]):
*/
  __pyx_t_1 = (__pyx_v_self->__pyx_base.nn[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":120
 *         cdef int i, j, k
 *         for i in range(self.nn[0]):
 *             for j in range(self.nn[1]):             # <<<<<<<<<<<<<<
 *                 for k in range(self.nn[2]):
 *                     self.visit_clear(self.root_mesh[i][j][k])
*/
    __pyx_t_4 = (__pyx_v_self->__pyx_base.nn[1]);
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "yt/geometry/particle_oct_container.pyx":121
 *         for i in range(self.nn[0]):
 *             for j in range(self.nn[1]):
 *                 for k in range(self.nn[2]):             # <<<<<<<<<<<<<<
 *                     self.visit_clear(self.root_mesh[i][j][k])
 * 
*/
      __pyx_t_7 = (__pyx_v_self->__pyx_base.nn[2]);
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_k = __pyx_t_9;

        /* "yt/geometry/particle_oct_container.pyx":122
 *             for j in range(self.nn[1]):
 *                 for k in range(self.nn[2]):
 *                     self.visit_clear(self.root_mesh[i][j][k])             # <<<<<<<<<<<<<<
 * 
 *     cdef void visit_clear(self, Oct *o):
*/
        ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->visit_clear(__pyx_v_self, (((__pyx_v_self->__pyx_base.root_mesh[__pyx_v_i])[__pyx_v_j])[__pyx_v_k])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 122, __pyx_L1_error)
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":117
 *         free(o)
 * 
 *     def clear_fileind(self):             # <<<<<<<<<<<<<<
 *         cdef int i, j, k
 *         for i in range(self.nn[0]):
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.clear_fileind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":124
 *                     self.visit_clear(self.root_mesh[i][j][k])
 * 
 *     cdef void visit_clear(self, Oct *o):             # <<<<<<<<<<<<<<
 *         #Free the memory for this oct recursively
 *         cdef int i, j, k
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit_clear(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":127
 *         #Free the memory for this oct recursively
 *         cdef int i, j, k
 *         o.file_ind = 0             # <<<<<<<<<<<<<<
 *         for i in range(2):
 *             for j in range(2):
*/
  __pyx_v_o->file_ind = 0;

  /* "yt/geometry/particle_oct_container.pyx":128
 *         cdef int i, j, k
 *         o.file_ind = 0
 *         for i in range(2):             # <<<<<<<<<<<<<<
 *             for j in range(2):
 *                 for k in range(2):
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 2; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":129
 *         o.file_ind = 0
 *         for i in range(2):
 *             for j in range(2):             # <<<<<<<<<<<<<<
 *                 for k in range(2):
 *                     if o.children != NULL \
*/
    for (__pyx_t_2 = 0; __pyx_t_2 < 2; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "yt/geometry/particle_oct_container.pyx":130
 *         for i in range(2):
 *             for j in range(2):
 *                 for k in range(2):             # <<<<<<<<<<<<<<
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:
*/
      for (__pyx_t_3 = 0; __pyx_t_3 < 2; __pyx_t_3+=1) {
        __pyx_v_k = __pyx_t_3;

        /* "yt/geometry/particle_oct_container.pyx":131
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_clear(o.children[cind(i,j,k)])
*/
        __pyx_t_5 = (__pyx_v_o->children != NULL);
        if (__pyx_t_5) {
        } else {
          __pyx_t_4 = __pyx_t_5;
          goto __pyx_L10_bool_binop_done;
        }

        /* "yt/geometry/particle_oct_container.pyx":132
 *                 for k in range(2):
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:             # <<<<<<<<<<<<<<
 *                         self.visit_clear(o.children[cind(i,j,k)])
 * 
*/
        __pyx_t_6 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 132, __pyx_L1_error)
        __pyx_t_5 = ((__pyx_v_o->children[__pyx_t_6]) != NULL);
        __pyx_t_4 = __pyx_t_5;
        __pyx_L10_bool_binop_done:;

        /* "yt/geometry/particle_oct_container.pyx":131
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_clear(o.children[cind(i,j,k)])
*/
        if (__pyx_t_4) {

          /* "yt/geometry/particle_oct_container.pyx":133
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_clear(o.children[cind(i,j,k)])             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
*/
          __pyx_t_6 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L1_error)
          ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->visit_clear(__pyx_v_self, (__pyx_v_o->children[__pyx_t_6])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":131
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_clear(o.children[cind(i,j,k)])
*/
        }
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":124
 *                     self.visit_clear(self.root_mesh[i][j][k])
 * 
 *     cdef void visit_clear(self, Oct *o):             # <<<<<<<<<<<<<<
 *         #Free the memory for this oct recursively
 *         cdef int i, j, k
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.visit_clear", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}
static PyObject *__pyx_gb_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_8generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "yt/geometry/particle_oct_container.pyx":135
 *                         self.visit_clear(o.children[cind(i,j,k)])
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         #Get the next oct, will traverse domains
 *         #Note that oct containers can be sorted
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_7__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_7__iter__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_6__iter__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_6__iter__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self) {
  struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ *)__pyx_tp_new_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__, __pyx_mstate_global->__pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 135, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_8generator, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[0]), (PyObject *) __pyx_cur_scope, __pyx_mstate_global->__pyx_n_u_iter, __pyx_mstate_global->__pyx_n_u_ParticleOctreeContainer___iter, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain); if (unlikely(!gen)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_8generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ *__pyx_cur_scope = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  __pyx_t_5numpy_int64_t __pyx_t_1;
  __pyx_t_5numpy_int64_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(__pyx_sent_value != Py_None)) {
    if (unlikely(__pyx_sent_value)) PyErr_SetString(PyExc_TypeError, "can't send non-None value to a just-started generator");
    __PYX_ERR(0, 135, __pyx_L1_error)
  }

  /* "yt/geometry/particle_oct_container.pyx":141
 *         cdef int oi
 *         cdef Oct *o
 *         for oi in range(self.nocts):             # <<<<<<<<<<<<<<
 *             o = self.oct_list[oi]
 *             yield (o.file_ind, o.domain_ind, o.domain)
*/
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->__pyx_base.nocts;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_oi = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":142
 *         cdef Oct *o
 *         for oi in range(self.nocts):
 *             o = self.oct_list[oi]             # <<<<<<<<<<<<<<
 *             yield (o.file_ind, o.domain_ind, o.domain)
 * 
*/
    __pyx_cur_scope->__pyx_v_o = (__pyx_cur_scope->__pyx_v_self->oct_list[__pyx_cur_scope->__pyx_v_oi]);

    /* "yt/geometry/particle_oct_container.pyx":143
 *         for oi in range(self.nocts):
 *             o = self.oct_list[oi]
 *             yield (o.file_ind, o.domain_ind, o.domain)             # <<<<<<<<<<<<<<
 * 
 *     def allocate_domains(self, domain_counts):
*/
    __pyx_t_4 = __Pyx_PyLong_From_npy_int64(__pyx_cur_scope->__pyx_v_o->file_ind); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyLong_From_npy_int64(__pyx_cur_scope->__pyx_v_o->domain_ind); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyLong_From_npy_int64(__pyx_cur_scope->__pyx_v_o->domain); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4) != (0)) __PYX_ERR(0, 143, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_5);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5) != (0)) __PYX_ERR(0, 143, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_6);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6) != (0)) __PYX_ERR(0, 143, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 143, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "yt/geometry/particle_oct_container.pyx":135
 *                         self.visit_clear(o.children[cind(i,j,k)])
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         #Get the next oct, will traverse domains
 *         #Note that oct containers can be sorted
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  if (__Pyx_PyErr_Occurred()) {
    __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  }
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":145
 *             yield (o.file_ind, o.domain_ind, o.domain)
 * 
 *     def allocate_domains(self, domain_counts):             # <<<<<<<<<<<<<<
 *         pass
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_10allocate_domains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_10allocate_domains = {"allocate_domains", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_10allocate_domains, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_10allocate_domains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_domain_counts = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("allocate_domains (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_domain_counts,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 145, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 145, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "allocate_domains", 0) < 0) __PYX_ERR(0, 145, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("allocate_domains", 1, 1, 1, i); __PYX_ERR(0, 145, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 145, __pyx_L3_error)
    }
    __pyx_v_domain_counts = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("allocate_domains", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 145, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.allocate_domains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_9allocate_domains(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self), __pyx_v_domain_counts);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_9allocate_domains(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_domain_counts) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("allocate_domains", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":148
 *         pass
 * 
 *     def finalize(self, int domain_id = 0):             # <<<<<<<<<<<<<<
 *         #This will sort the octs in the oct list
 *         #so that domains appear consecutively
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_12finalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_12finalize = {"finalize", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_12finalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_12finalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_domain_id;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_domain_id,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 148, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 148, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "finalize", 0) < 0) __PYX_ERR(0, 148, __pyx_L3_error)
    } else {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 148, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_domain_id = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_domain_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L3_error)
    } else {
      __pyx_v_domain_id = ((int)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("finalize", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 148, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.finalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_11finalize(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self), __pyx_v_domain_id);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_11finalize(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, int __pyx_v_domain_id) {
  int __pyx_v_max_level;
  __pyx_t_5numpy_int64_t __pyx_v_i;
  __pyx_t_5numpy_int64_t __pyx_v_lpos;
  int __pyx_v_j;
  int __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_5numpy_int64_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  __pyx_t_5numpy_int64_t __pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("finalize", 0);

  /* "yt/geometry/particle_oct_container.pyx":153
 *         #And then find the oct index/offset for
 *         #every domain
 *         cdef int max_level = 0             # <<<<<<<<<<<<<<
 *         self.oct_list = <Oct**> malloc(sizeof(Oct*)*self.nocts)
 *         cdef np.int64_t i = 0, lpos = 0
*/
  __pyx_v_max_level = 0;

  /* "yt/geometry/particle_oct_container.pyx":154
 *         #every domain
 *         cdef int max_level = 0
 *         self.oct_list = <Oct**> malloc(sizeof(Oct*)*self.nocts)             # <<<<<<<<<<<<<<
 *         cdef np.int64_t i = 0, lpos = 0
 *         # Note that we now assign them in the same order they will be visited
*/
  __pyx_v_self->oct_list = ((struct __pyx_t_2yt_8geometry_12oct_visitors_Oct **)malloc(((sizeof(struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *)) * __pyx_v_self->__pyx_base.nocts)));

  /* "yt/geometry/particle_oct_container.pyx":155
 *         cdef int max_level = 0
 *         self.oct_list = <Oct**> malloc(sizeof(Oct*)*self.nocts)
 *         cdef np.int64_t i = 0, lpos = 0             # <<<<<<<<<<<<<<
 *         # Note that we now assign them in the same order they will be visited
 *         # by recursive visitors.
*/
  __pyx_v_i = 0;
  __pyx_v_lpos = 0;

  /* "yt/geometry/particle_oct_container.pyx":158
 *         # Note that we now assign them in the same order they will be visited
 *         # by recursive visitors.
 *         for i in range(self.nn[0]):             # <<<<<<<<<<<<<<
 *             for j in range(self.nn[1]):
 *                 for k in range(self.nn[2]):
*/
  __pyx_t_1 = (__pyx_v_self->__pyx_base.nn[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":159
 *         # by recursive visitors.
 *         for i in range(self.nn[0]):
 *             for j in range(self.nn[1]):             # <<<<<<<<<<<<<<
 *                 for k in range(self.nn[2]):
 *                     self.visit_assign(self.root_mesh[i][j][k], &lpos,
*/
    __pyx_t_4 = (__pyx_v_self->__pyx_base.nn[1]);
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "yt/geometry/particle_oct_container.pyx":160
 *         for i in range(self.nn[0]):
 *             for j in range(self.nn[1]):
 *                 for k in range(self.nn[2]):             # <<<<<<<<<<<<<<
 *                     self.visit_assign(self.root_mesh[i][j][k], &lpos,
 *                                       0, &max_level)
*/
      __pyx_t_7 = (__pyx_v_self->__pyx_base.nn[2]);
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_k = __pyx_t_9;

        /* "yt/geometry/particle_oct_container.pyx":161
 *             for j in range(self.nn[1]):
 *                 for k in range(self.nn[2]):
 *                     self.visit_assign(self.root_mesh[i][j][k], &lpos,             # <<<<<<<<<<<<<<
 *                                       0, &max_level)
 *         assert(lpos == self.nocts)
*/
        __pyx_t_10 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->visit_assign(__pyx_v_self, (((__pyx_v_self->__pyx_base.root_mesh[__pyx_v_i])[__pyx_v_j])[__pyx_v_k]), (&__pyx_v_lpos), 0, (&__pyx_v_max_level)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 161, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":163
 *                     self.visit_assign(self.root_mesh[i][j][k], &lpos,
 *                                       0, &max_level)
 *         assert(lpos == self.nocts)             # <<<<<<<<<<<<<<
 *         for i in range(self.nocts):
 *             self.oct_list[i].domain_ind = i
*/
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_11 = (__pyx_v_lpos == __pyx_v_self->__pyx_base.nocts);
    if (unlikely(!__pyx_t_11)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 163, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 163, __pyx_L1_error)
  #endif

  /* "yt/geometry/particle_oct_container.pyx":164
 *                                       0, &max_level)
 *         assert(lpos == self.nocts)
 *         for i in range(self.nocts):             # <<<<<<<<<<<<<<
 *             self.oct_list[i].domain_ind = i
 *             self.oct_list[i].domain = domain_id
*/
  __pyx_t_3 = __pyx_v_self->__pyx_base.nocts;
  __pyx_t_12 = __pyx_t_3;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_i = __pyx_t_13;

    /* "yt/geometry/particle_oct_container.pyx":165
 *         assert(lpos == self.nocts)
 *         for i in range(self.nocts):
 *             self.oct_list[i].domain_ind = i             # <<<<<<<<<<<<<<
 *             self.oct_list[i].domain = domain_id
 *         self.max_level = max_level
*/
    (__pyx_v_self->oct_list[__pyx_v_i])->domain_ind = __pyx_v_i;

    /* "yt/geometry/particle_oct_container.pyx":166
 *         for i in range(self.nocts):
 *             self.oct_list[i].domain_ind = i
 *             self.oct_list[i].domain = domain_id             # <<<<<<<<<<<<<<
 *         self.max_level = max_level
 * 
*/
    (__pyx_v_self->oct_list[__pyx_v_i])->domain = __pyx_v_domain_id;
  }

  /* "yt/geometry/particle_oct_container.pyx":167
 *             self.oct_list[i].domain_ind = i
 *             self.oct_list[i].domain = domain_id
 *         self.max_level = max_level             # <<<<<<<<<<<<<<
 * 
 *     cdef visit_assign(self, Oct *o, np.int64_t *lpos, int level, int *max_level):
*/
  __pyx_v_self->__pyx_base.max_level = __pyx_v_max_level;

  /* "yt/geometry/particle_oct_container.pyx":148
 *         pass
 * 
 *     def finalize(self, int domain_id = 0):             # <<<<<<<<<<<<<<
 *         #This will sort the octs in the oct list
 *         #so that domains appear consecutively
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.finalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":169
 *         self.max_level = max_level
 * 
 *     cdef visit_assign(self, Oct *o, np.int64_t *lpos, int level, int *max_level):             # <<<<<<<<<<<<<<
 *         cdef int i, j, k
 *         self.oct_list[lpos[0]] = o
*/

static PyObject *__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit_assign(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_int64_t *__pyx_v_lpos, int __pyx_v_level, int *__pyx_v_max_level) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  long __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("visit_assign", 0);

  /* "yt/geometry/particle_oct_container.pyx":171
 *     cdef visit_assign(self, Oct *o, np.int64_t *lpos, int level, int *max_level):
 *         cdef int i, j, k
 *         self.oct_list[lpos[0]] = o             # <<<<<<<<<<<<<<
 *         lpos[0] += 1
 *         max_level[0] = imax(max_level[0], level)
*/
  (__pyx_v_self->oct_list[(__pyx_v_lpos[0])]) = __pyx_v_o;

  /* "yt/geometry/particle_oct_container.pyx":172
 *         cdef int i, j, k
 *         self.oct_list[lpos[0]] = o
 *         lpos[0] += 1             # <<<<<<<<<<<<<<
 *         max_level[0] = imax(max_level[0], level)
 *         for i in range(2):
*/
  __pyx_t_1 = 0;
  (__pyx_v_lpos[__pyx_t_1]) = ((__pyx_v_lpos[__pyx_t_1]) + 1);

  /* "yt/geometry/particle_oct_container.pyx":173
 *         self.oct_list[lpos[0]] = o
 *         lpos[0] += 1
 *         max_level[0] = imax(max_level[0], level)             # <<<<<<<<<<<<<<
 *         for i in range(2):
 *             for j in range(2):
*/
  (__pyx_v_max_level[0]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_imax((__pyx_v_max_level[0]), __pyx_v_level);

  /* "yt/geometry/particle_oct_container.pyx":174
 *         lpos[0] += 1
 *         max_level[0] = imax(max_level[0], level)
 *         for i in range(2):             # <<<<<<<<<<<<<<
 *             for j in range(2):
 *                 for k in range(2):
*/
  for (__pyx_t_2 = 0; __pyx_t_2 < 2; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "yt/geometry/particle_oct_container.pyx":175
 *         max_level[0] = imax(max_level[0], level)
 *         for i in range(2):
 *             for j in range(2):             # <<<<<<<<<<<<<<
 *                 for k in range(2):
 *                     if o.children != NULL \
*/
    for (__pyx_t_3 = 0; __pyx_t_3 < 2; __pyx_t_3+=1) {
      __pyx_v_j = __pyx_t_3;

      /* "yt/geometry/particle_oct_container.pyx":176
 *         for i in range(2):
 *             for j in range(2):
 *                 for k in range(2):             # <<<<<<<<<<<<<<
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:
*/
      for (__pyx_t_4 = 0; __pyx_t_4 < 2; __pyx_t_4+=1) {
        __pyx_v_k = __pyx_t_4;

        /* "yt/geometry/particle_oct_container.pyx":177
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,
*/
        __pyx_t_6 = (__pyx_v_o->children != NULL);
        if (__pyx_t_6) {
        } else {
          __pyx_t_5 = __pyx_t_6;
          goto __pyx_L10_bool_binop_done;
        }

        /* "yt/geometry/particle_oct_container.pyx":178
 *                 for k in range(2):
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:             # <<<<<<<<<<<<<<
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,
 *                                 level + 1, max_level)
*/
        __pyx_t_7 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_7 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 178, __pyx_L1_error)
        __pyx_t_6 = ((__pyx_v_o->children[__pyx_t_7]) != NULL);
        __pyx_t_5 = __pyx_t_6;
        __pyx_L10_bool_binop_done:;

        /* "yt/geometry/particle_oct_container.pyx":177
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,
*/
        if (__pyx_t_5) {

          /* "yt/geometry/particle_oct_container.pyx":179
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,             # <<<<<<<<<<<<<<
 *                                 level + 1, max_level)
 *         return
*/
          __pyx_t_7 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_7 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":180
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,
 *                                 level + 1, max_level)             # <<<<<<<<<<<<<<
 *         return
 * 
*/
          __pyx_t_8 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->visit_assign(__pyx_v_self, (__pyx_v_o->children[__pyx_t_7]), __pyx_v_lpos, (__pyx_v_level + 1), __pyx_v_max_level); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 179, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "yt/geometry/particle_oct_container.pyx":177
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,
*/
        }
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":181
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,
 *                                 level + 1, max_level)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef np.int64_t get_domain_offset(self, int domain_id):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":169
 *         self.max_level = max_level
 * 
 *     cdef visit_assign(self, Oct *o, np.int64_t *lpos, int level, int *max_level):             # <<<<<<<<<<<<<<
 *         cdef int i, j, k
 *         self.oct_list[lpos[0]] = o
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.visit_assign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":183
 *         return
 * 
 *     cdef np.int64_t get_domain_offset(self, int domain_id):             # <<<<<<<<<<<<<<
 *         return 0
 * 
*/

static __pyx_t_5numpy_int64_t __pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_get_domain_offset(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, CYTHON_UNUSED int __pyx_v_domain_id) {
  __pyx_t_5numpy_int64_t __pyx_r;

  /* "yt/geometry/particle_oct_container.pyx":184
 * 
 *     cdef np.int64_t get_domain_offset(self, int domain_id):
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     cdef Oct* allocate_oct(self):
*/
  __pyx_r = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":183
 *         return
 * 
 *     cdef np.int64_t get_domain_offset(self, int domain_id):             # <<<<<<<<<<<<<<
 *         return 0
 * 
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":186
 *         return 0
 * 
 *     cdef Oct* allocate_oct(self):             # <<<<<<<<<<<<<<
 *         #Allocate the memory, set to NULL or -1
 *         #We reserve space for n_ref particles, but keep
*/

static struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_allocate_oct(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self) {
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_my_oct;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_r;

  /* "yt/geometry/particle_oct_container.pyx":190
 *         #We reserve space for n_ref particles, but keep
 *         #track of how many are used with np initially 0
 *         self.nocts += 1             # <<<<<<<<<<<<<<
 *         cdef Oct *my_oct = <Oct*> malloc(sizeof(Oct))
 *         my_oct.domain = -1
*/
  __pyx_v_self->__pyx_base.nocts = (__pyx_v_self->__pyx_base.nocts + 1);

  /* "yt/geometry/particle_oct_container.pyx":191
 *         #track of how many are used with np initially 0
 *         self.nocts += 1
 *         cdef Oct *my_oct = <Oct*> malloc(sizeof(Oct))             # <<<<<<<<<<<<<<
 *         my_oct.domain = -1
 *         my_oct.file_ind = 0
*/
  __pyx_v_my_oct = ((struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *)malloc((sizeof(struct __pyx_t_2yt_8geometry_12oct_visitors_Oct))));

  /* "yt/geometry/particle_oct_container.pyx":192
 *         self.nocts += 1
 *         cdef Oct *my_oct = <Oct*> malloc(sizeof(Oct))
 *         my_oct.domain = -1             # <<<<<<<<<<<<<<
 *         my_oct.file_ind = 0
 *         my_oct.domain_ind = self.nocts - 1
*/
  __pyx_v_my_oct->domain = -1LL;

  /* "yt/geometry/particle_oct_container.pyx":193
 *         cdef Oct *my_oct = <Oct*> malloc(sizeof(Oct))
 *         my_oct.domain = -1
 *         my_oct.file_ind = 0             # <<<<<<<<<<<<<<
 *         my_oct.domain_ind = self.nocts - 1
 *         my_oct.children = NULL
*/
  __pyx_v_my_oct->file_ind = 0;

  /* "yt/geometry/particle_oct_container.pyx":194
 *         my_oct.domain = -1
 *         my_oct.file_ind = 0
 *         my_oct.domain_ind = self.nocts - 1             # <<<<<<<<<<<<<<
 *         my_oct.children = NULL
 *         return my_oct
*/
  __pyx_v_my_oct->domain_ind = (__pyx_v_self->__pyx_base.nocts - 1);

  /* "yt/geometry/particle_oct_container.pyx":195
 *         my_oct.file_ind = 0
 *         my_oct.domain_ind = self.nocts - 1
 *         my_oct.children = NULL             # <<<<<<<<<<<<<<
 *         return my_oct
 * 
*/
  __pyx_v_my_oct->children = NULL;

  /* "yt/geometry/particle_oct_container.pyx":196
 *         my_oct.domain_ind = self.nocts - 1
 *         my_oct.children = NULL
 *         return my_oct             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __pyx_r = __pyx_v_my_oct;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":186
 *         return 0
 * 
 *     cdef Oct* allocate_oct(self):             # <<<<<<<<<<<<<<
 *         #Allocate the memory, set to NULL or -1
 *         #We reserve space for n_ref particles, but keep
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":198
 *         return my_oct
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_14add(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_14add = {"add", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_14add, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_14add(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_indices = 0;
  __pyx_t_5numpy_uint8_t __pyx_v_order;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_indices,&__pyx_mstate_global->__pyx_n_u_order,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 198, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 198, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 198, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "add", 0) < 0) __PYX_ERR(0, 198, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("add", 0, 1, 2, i); __PYX_ERR(0, 198, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 198, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 198, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_indices = ((PyArrayObject *)values[0]);
    if (values[1]) {
      __pyx_v_order = __Pyx_PyLong_As_npy_uint8(values[1]); if (unlikely((__pyx_v_order == ((npy_uint8)-1)) && PyErr_Occurred())) __PYX_ERR(0, 202, __pyx_L3_error)
    } else {
      __pyx_v_order = __pyx_mstate_global->__pyx_k__12;
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 198, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_indices), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "indices", 0))) __PYX_ERR(0, 201, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_13add(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self), __pyx_v_indices, __pyx_v_order);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_13add(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, PyArrayObject *__pyx_v_indices, __pyx_t_5numpy_uint8_t __pyx_v_order) {
  __pyx_t_5numpy_int64_t __pyx_v_no;
  __pyx_t_5numpy_int64_t __pyx_v_p;
  __pyx_t_5numpy_uint64_t __pyx_v_index;
  int __pyx_v_i;
  int __pyx_v_level;
  int __pyx_v_ind[3];
  __pyx_t_5numpy_uint64_t *__pyx_v_data;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_cur;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_indices;
  __Pyx_Buffer __pyx_pybuffer_indices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  npy_intp *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  char *__pyx_t_6;
  __pyx_t_5numpy_int64_t __pyx_t_7;
  __pyx_t_5numpy_int64_t __pyx_t_8;
  __pyx_t_5numpy_int64_t __pyx_t_9;
  __pyx_t_5numpy_int64_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);
  __pyx_pybuffer_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_indices.refcount = 0;
  __pyx_pybuffernd_indices.data = NULL;
  __pyx_pybuffernd_indices.rcbuffer = &__pyx_pybuffer_indices;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 198, __pyx_L1_error)
  }
  __pyx_pybuffernd_indices.diminfo[0].strides = __pyx_pybuffernd_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indices.diminfo[0].shape = __pyx_pybuffernd_indices.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":206
 *         #Then if that oct has children, add it to them recursively
 *         #If the child needs to be refined because of max particles, do so
 *         cdef np.int64_t no = indices.shape[0], p             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t index
 *         cdef int i, level
*/
  __pyx_t_1 = __pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_indices)); if (unlikely(__pyx_t_1 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 206, __pyx_L1_error)
  __pyx_v_no = (__pyx_t_1[0]);

  /* "yt/geometry/particle_oct_container.pyx":210
 *         cdef int i, level
 *         cdef int ind[3]
 *         if self.root_mesh[0][0][0] == NULL: self.allocate_root()             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t *data = <np.uint64_t *> indices.data
 *         for p in range(no):
*/
  __pyx_t_2 = ((((__pyx_v_self->__pyx_base.root_mesh[0])[0])[0]) == NULL);
  if (__pyx_t_2) {
    __pyx_t_4 = ((PyObject *)__pyx_v_self);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_allocate_root, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 210, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "yt/geometry/particle_oct_container.pyx":211
 *         cdef int ind[3]
 *         if self.root_mesh[0][0][0] == NULL: self.allocate_root()
 *         cdef np.uint64_t *data = <np.uint64_t *> indices.data             # <<<<<<<<<<<<<<
 *         for p in range(no):
 *             # We have morton indices, which means we choose left and right by
*/
  __pyx_t_6 = __pyx_f_5numpy_7ndarray_4data_data(((PyArrayObject *)__pyx_v_indices)); if (unlikely(__pyx_t_6 == ((char *)0) && PyErr_Occurred())) __PYX_ERR(0, 211, __pyx_L1_error)
  __pyx_v_data = ((__pyx_t_5numpy_uint64_t *)__pyx_t_6);

  /* "yt/geometry/particle_oct_container.pyx":212
 *         if self.root_mesh[0][0][0] == NULL: self.allocate_root()
 *         cdef np.uint64_t *data = <np.uint64_t *> indices.data
 *         for p in range(no):             # <<<<<<<<<<<<<<
 *             # We have morton indices, which means we choose left and right by
 *             # looking at (MAX_ORDER - level) & with the values 1, 2, 4.
*/
  __pyx_t_7 = __pyx_v_no;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_p = __pyx_t_9;

    /* "yt/geometry/particle_oct_container.pyx":215
 *             # We have morton indices, which means we choose left and right by
 *             # looking at (MAX_ORDER - level) & with the values 1, 2, 4.
 *             level = 0             # <<<<<<<<<<<<<<
 *             index = indices[p]
 *             if index == FLAG:
*/
    __pyx_v_level = 0;

    /* "yt/geometry/particle_oct_container.pyx":216
 *             # looking at (MAX_ORDER - level) & with the values 1, 2, 4.
 *             level = 0
 *             index = indices[p]             # <<<<<<<<<<<<<<
 *             if index == FLAG:
 *                 # This is a marker for the index not being inside the domain
*/
    __pyx_t_10 = __pyx_v_p;
    __pyx_v_index = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_indices.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_indices.diminfo[0].strides));

    /* "yt/geometry/particle_oct_container.pyx":217
 *             level = 0
 *             index = indices[p]
 *             if index == FLAG:             # <<<<<<<<<<<<<<
 *                 # This is a marker for the index not being inside the domain
 *                 # we're interested in.
*/
    __pyx_t_2 = (__pyx_v_index == __pyx_v_2yt_8geometry_22particle_oct_container_FLAG);
    if (__pyx_t_2) {

      /* "yt/geometry/particle_oct_container.pyx":220
 *                 # This is a marker for the index not being inside the domain
 *                 # we're interested in.
 *                 continue             # <<<<<<<<<<<<<<
 *             # Convert morton index to 3D index of octree root
 *             for i in range(3):
*/
      goto __pyx_L4_continue;

      /* "yt/geometry/particle_oct_container.pyx":217
 *             level = 0
 *             index = indices[p]
 *             if index == FLAG:             # <<<<<<<<<<<<<<
 *                 # This is a marker for the index not being inside the domain
 *                 # we're interested in.
*/
    }

    /* "yt/geometry/particle_oct_container.pyx":222
 *                 continue
 *             # Convert morton index to 3D index of octree root
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
 *             cur = self.root_mesh[ind[0]][ind[1]][ind[2]]
*/
    for (__pyx_t_11 = 0; __pyx_t_11 < 3; __pyx_t_11+=1) {
      __pyx_v_i = __pyx_t_11;

      /* "yt/geometry/particle_oct_container.pyx":223
 *             # Convert morton index to 3D index of octree root
 *             for i in range(3):
 *                 ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1             # <<<<<<<<<<<<<<
 *             cur = self.root_mesh[ind[0]][ind[1]][ind[2]]
 *             if cur == NULL:
*/
      (__pyx_v_ind[__pyx_v_i]) = ((__pyx_v_index >> (((__pyx_v_order - __pyx_v_level) * 3) + (2 - __pyx_v_i))) & 1);
    }

    /* "yt/geometry/particle_oct_container.pyx":224
 *             for i in range(3):
 *                 ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
 *             cur = self.root_mesh[ind[0]][ind[1]][ind[2]]             # <<<<<<<<<<<<<<
 *             if cur == NULL:
 *                 raise RuntimeError
*/
    __pyx_v_cur = (((__pyx_v_self->__pyx_base.root_mesh[(__pyx_v_ind[0])])[(__pyx_v_ind[1])])[(__pyx_v_ind[2])]);

    /* "yt/geometry/particle_oct_container.pyx":225
 *                 ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
 *             cur = self.root_mesh[ind[0]][ind[1]][ind[2]]
 *             if cur == NULL:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError
 *             # Continue refining the octree until you reach the level of the
*/
    __pyx_t_2 = (__pyx_v_cur == NULL);
    if (unlikely(__pyx_t_2)) {

      /* "yt/geometry/particle_oct_container.pyx":226
 *             cur = self.root_mesh[ind[0]][ind[1]][ind[2]]
 *             if cur == NULL:
 *                 raise RuntimeError             # <<<<<<<<<<<<<<
 *             # Continue refining the octree until you reach the level of the
 *             # morton indexing order. Along the way, use prefix to count
*/
      __Pyx_Raise(__pyx_builtin_RuntimeError, 0, 0, 0);
      __PYX_ERR(0, 226, __pyx_L1_error)

      /* "yt/geometry/particle_oct_container.pyx":225
 *                 ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
 *             cur = self.root_mesh[ind[0]][ind[1]][ind[2]]
 *             if cur == NULL:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError
 *             # Continue refining the octree until you reach the level of the
*/
    }

    /* "yt/geometry/particle_oct_container.pyx":230
 *             # morton indexing order. Along the way, use prefix to count
 *             # previous indices at levels in the octree?
 *             while (cur.file_ind + 1) > self.n_ref:             # <<<<<<<<<<<<<<
 *                 if level >= order: break # Just dump it here.
 *                 level += 1
*/
    while (1) {
      __pyx_t_2 = ((__pyx_v_cur->file_ind + 1) > __pyx_v_self->n_ref);
      if (!__pyx_t_2) break;

      /* "yt/geometry/particle_oct_container.pyx":231
 *             # previous indices at levels in the octree?
 *             while (cur.file_ind + 1) > self.n_ref:
 *                 if level >= order: break # Just dump it here.             # <<<<<<<<<<<<<<
 *                 level += 1
 *                 for i in range(3):
*/
      __pyx_t_2 = (__pyx_v_level >= __pyx_v_order);
      if (__pyx_t_2) {
        goto __pyx_L11_break;
      }

      /* "yt/geometry/particle_oct_container.pyx":232
 *             while (cur.file_ind + 1) > self.n_ref:
 *                 if level >= order: break # Just dump it here.
 *                 level += 1             # <<<<<<<<<<<<<<
 *                 for i in range(3):
 *                     ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
*/
      __pyx_v_level = (__pyx_v_level + 1);

      /* "yt/geometry/particle_oct_container.pyx":233
 *                 if level >= order: break # Just dump it here.
 *                 level += 1
 *                 for i in range(3):             # <<<<<<<<<<<<<<
 *                     ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
 *                 if cur.children == NULL or \
*/
      for (__pyx_t_11 = 0; __pyx_t_11 < 3; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "yt/geometry/particle_oct_container.pyx":234
 *                 level += 1
 *                 for i in range(3):
 *                     ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1             # <<<<<<<<<<<<<<
 *                 if cur.children == NULL or \
 *                    cur.children[cind(ind[0],ind[1],ind[2])] == NULL:
*/
        (__pyx_v_ind[__pyx_v_i]) = ((__pyx_v_index >> (((__pyx_v_order - __pyx_v_level) * 3) + (2 - __pyx_v_i))) & 1);
      }

      /* "yt/geometry/particle_oct_container.pyx":235
 *                 for i in range(3):
 *                     ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
 *                 if cur.children == NULL or \             # <<<<<<<<<<<<<<
 *                    cur.children[cind(ind[0],ind[1],ind[2])] == NULL:
 *                     cur = self.refine_oct(cur, index, level, order)
*/
      __pyx_t_12 = (__pyx_v_cur->children == NULL);
      if (!__pyx_t_12) {
      } else {
        __pyx_t_2 = __pyx_t_12;
        goto __pyx_L16_bool_binop_done;
      }

      /* "yt/geometry/particle_oct_container.pyx":236
 *                     ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
 *                 if cur.children == NULL or \
 *                    cur.children[cind(ind[0],ind[1],ind[2])] == NULL:             # <<<<<<<<<<<<<<
 *                     cur = self.refine_oct(cur, index, level, order)
 *                     self.filter_particles(cur, data, p, level, order)
*/
      __pyx_t_11 = __pyx_f_2yt_8geometry_12oct_visitors_cind((__pyx_v_ind[0]), (__pyx_v_ind[1]), (__pyx_v_ind[2])); if (unlikely(__pyx_t_11 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L1_error)
      __pyx_t_12 = ((__pyx_v_cur->children[__pyx_t_11]) == NULL);
      __pyx_t_2 = __pyx_t_12;
      __pyx_L16_bool_binop_done:;

      /* "yt/geometry/particle_oct_container.pyx":235
 *                 for i in range(3):
 *                     ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
 *                 if cur.children == NULL or \             # <<<<<<<<<<<<<<
 *                    cur.children[cind(ind[0],ind[1],ind[2])] == NULL:
 *                     cur = self.refine_oct(cur, index, level, order)
*/
      if (__pyx_t_2) {

        /* "yt/geometry/particle_oct_container.pyx":237
 *                 if cur.children == NULL or \
 *                    cur.children[cind(ind[0],ind[1],ind[2])] == NULL:
 *                     cur = self.refine_oct(cur, index, level, order)             # <<<<<<<<<<<<<<
 *                     self.filter_particles(cur, data, p, level, order)
 *                 else:
*/
        __pyx_t_13 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->refine_oct(__pyx_v_self, __pyx_v_cur, __pyx_v_index, __pyx_v_level, __pyx_v_order); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 237, __pyx_L1_error)
        __pyx_v_cur = __pyx_t_13;

        /* "yt/geometry/particle_oct_container.pyx":238
 *                    cur.children[cind(ind[0],ind[1],ind[2])] == NULL:
 *                     cur = self.refine_oct(cur, index, level, order)
 *                     self.filter_particles(cur, data, p, level, order)             # <<<<<<<<<<<<<<
 *                 else:
 *                     cur = cur.children[cind(ind[0],ind[1],ind[2])]
*/
        ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->filter_particles(__pyx_v_self, __pyx_v_cur, __pyx_v_data, __pyx_v_p, __pyx_v_level, __pyx_v_order); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 238, __pyx_L1_error)

        /* "yt/geometry/particle_oct_container.pyx":235
 *                 for i in range(3):
 *                     ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
 *                 if cur.children == NULL or \             # <<<<<<<<<<<<<<
 *                    cur.children[cind(ind[0],ind[1],ind[2])] == NULL:
 *                     cur = self.refine_oct(cur, index, level, order)
*/
        goto __pyx_L15;
      }

      /* "yt/geometry/particle_oct_container.pyx":240
 *                     self.filter_particles(cur, data, p, level, order)
 *                 else:
 *                     cur = cur.children[cind(ind[0],ind[1],ind[2])]             # <<<<<<<<<<<<<<
 *             # If our n_ref is 1, we are always refining, which means we're an
 *             # index octree.  In this case, we should store the index for fast
*/
      /*else*/ {
        __pyx_t_11 = __pyx_f_2yt_8geometry_12oct_visitors_cind((__pyx_v_ind[0]), (__pyx_v_ind[1]), (__pyx_v_ind[2])); if (unlikely(__pyx_t_11 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 240, __pyx_L1_error)
        __pyx_v_cur = (__pyx_v_cur->children[__pyx_t_11]);
      }
      __pyx_L15:;
    }
    __pyx_L11_break:;

    /* "yt/geometry/particle_oct_container.pyx":244
 *             # index octree.  In this case, we should store the index for fast
 *             # lookup later on when we find neighbors and the like.
 *             if self.n_ref == 1:             # <<<<<<<<<<<<<<
 *                 cur.file_ind = index
 *             else:
*/
    __pyx_t_2 = (__pyx_v_self->n_ref == 1);
    if (__pyx_t_2) {

      /* "yt/geometry/particle_oct_container.pyx":245
 *             # lookup later on when we find neighbors and the like.
 *             if self.n_ref == 1:
 *                 cur.file_ind = index             # <<<<<<<<<<<<<<
 *             else:
 *                 cur.file_ind += 1
*/
      __pyx_v_cur->file_ind = __pyx_v_index;

      /* "yt/geometry/particle_oct_container.pyx":244
 *             # index octree.  In this case, we should store the index for fast
 *             # lookup later on when we find neighbors and the like.
 *             if self.n_ref == 1:             # <<<<<<<<<<<<<<
 *                 cur.file_ind = index
 *             else:
*/
      goto __pyx_L18;
    }

    /* "yt/geometry/particle_oct_container.pyx":247
 *                 cur.file_ind = index
 *             else:
 *                 cur.file_ind += 1             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
    /*else*/ {
      __pyx_v_cur->file_ind = (__pyx_v_cur->file_ind + 1);
    }
    __pyx_L18:;
    __pyx_L4_continue:;
  }

  /* "yt/geometry/particle_oct_container.pyx":198
 *         return my_oct
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":249
 *                 cur.file_ind += 1
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_refine_oct(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_uint64_t __pyx_v_index, int __pyx_v_level, __pyx_t_5numpy_uint8_t __pyx_v_order) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_ind[3];
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_noct;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_t_4;
  __pyx_t_5numpy_int64_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":261
 *         cdef Oct *noct
 *         # TODO: This does not need to be changed.
 *         o.children = <Oct **> malloc(sizeof(Oct *)*8)             # <<<<<<<<<<<<<<
 *         for i in range(2):
 *             for j in range(2):
*/
  __pyx_v_o->children = ((struct __pyx_t_2yt_8geometry_12oct_visitors_Oct **)malloc(((sizeof(struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *)) * 8)));

  /* "yt/geometry/particle_oct_container.pyx":262
 *         # TODO: This does not need to be changed.
 *         o.children = <Oct **> malloc(sizeof(Oct *)*8)
 *         for i in range(2):             # <<<<<<<<<<<<<<
 *             for j in range(2):
 *                 for k in range(2):
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 2; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":263
 *         o.children = <Oct **> malloc(sizeof(Oct *)*8)
 *         for i in range(2):
 *             for j in range(2):             # <<<<<<<<<<<<<<
 *                 for k in range(2):
 *                     noct = self.allocate_oct()
*/
    for (__pyx_t_2 = 0; __pyx_t_2 < 2; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "yt/geometry/particle_oct_container.pyx":264
 *         for i in range(2):
 *             for j in range(2):
 *                 for k in range(2):             # <<<<<<<<<<<<<<
 *                     noct = self.allocate_oct()
 *                     noct.domain = o.domain
*/
      for (__pyx_t_3 = 0; __pyx_t_3 < 2; __pyx_t_3+=1) {
        __pyx_v_k = __pyx_t_3;

        /* "yt/geometry/particle_oct_container.pyx":265
 *             for j in range(2):
 *                 for k in range(2):
 *                     noct = self.allocate_oct()             # <<<<<<<<<<<<<<
 *                     noct.domain = o.domain
 *                     noct.file_ind = 0
*/
        __pyx_t_4 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->allocate_oct(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 265, __pyx_L1_error)
        __pyx_v_noct = __pyx_t_4;

        /* "yt/geometry/particle_oct_container.pyx":266
 *                 for k in range(2):
 *                     noct = self.allocate_oct()
 *                     noct.domain = o.domain             # <<<<<<<<<<<<<<
 *                     noct.file_ind = 0
 *                     o.children[cind(i,j,k)] = noct
*/
        __pyx_t_5 = __pyx_v_o->domain;
        __pyx_v_noct->domain = __pyx_t_5;

        /* "yt/geometry/particle_oct_container.pyx":267
 *                     noct = self.allocate_oct()
 *                     noct.domain = o.domain
 *                     noct.file_ind = 0             # <<<<<<<<<<<<<<
 *                     o.children[cind(i,j,k)] = noct
 *         o.file_ind = self.n_ref + 1
*/
        __pyx_v_noct->file_ind = 0;

        /* "yt/geometry/particle_oct_container.pyx":268
 *                     noct.domain = o.domain
 *                     noct.file_ind = 0
 *                     o.children[cind(i,j,k)] = noct             # <<<<<<<<<<<<<<
 *         o.file_ind = self.n_ref + 1
 *         for i in range(3):
*/
        __pyx_t_6 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 268, __pyx_L1_error)
        (__pyx_v_o->children[__pyx_t_6]) = __pyx_v_noct;
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":269
 *                     noct.file_ind = 0
 *                     o.children[cind(i,j,k)] = noct
 *         o.file_ind = self.n_ref + 1             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
*/
  __pyx_v_o->file_ind = (__pyx_v_self->n_ref + 1);

  /* "yt/geometry/particle_oct_container.pyx":270
 *                     o.children[cind(i,j,k)] = noct
 *         o.file_ind = self.n_ref + 1
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
 *         noct = o.children[cind(ind[0],ind[1],ind[2])]
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":271
 *         o.file_ind = self.n_ref + 1
 *         for i in range(3):
 *             ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1             # <<<<<<<<<<<<<<
 *         noct = o.children[cind(ind[0],ind[1],ind[2])]
 *         return noct
*/
    (__pyx_v_ind[__pyx_v_i]) = ((__pyx_v_index >> (((__pyx_v_order - __pyx_v_level) * 3) + (2 - __pyx_v_i))) & 1);
  }

  /* "yt/geometry/particle_oct_container.pyx":272
 *         for i in range(3):
 *             ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
 *         noct = o.children[cind(ind[0],ind[1],ind[2])]             # <<<<<<<<<<<<<<
 *         return noct
 * 
*/
  __pyx_t_1 = __pyx_f_2yt_8geometry_12oct_visitors_cind((__pyx_v_ind[0]), (__pyx_v_ind[1]), (__pyx_v_ind[2])); if (unlikely(__pyx_t_1 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_v_noct = (__pyx_v_o->children[__pyx_t_1]);

  /* "yt/geometry/particle_oct_container.pyx":273
 *             ind[i] = (index >> ((order - level)*3 + (2 - i))) & 1
 *         noct = o.children[cind(ind[0],ind[1],ind[2])]
 *         return noct             # <<<<<<<<<<<<<<
 * 
 *     cdef void filter_particles(self, Oct *o, np.uint64_t *data, np.int64_t p,
*/
  __pyx_r = __pyx_v_noct;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":249
 *                 cur.file_ind += 1
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.refine_oct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":275
 *         return noct
 * 
 *     cdef void filter_particles(self, Oct *o, np.uint64_t *data, np.int64_t p,             # <<<<<<<<<<<<<<
 *                                int level, np.uint8_t order):
 *         # Now we look at the last nref particles to decide where they go.
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_filter_particles(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_uint64_t *__pyx_v_data, __pyx_t_5numpy_int64_t __pyx_v_p, int __pyx_v_level, __pyx_t_5numpy_uint8_t __pyx_v_order) {
  int __pyx_v_n;
  __pyx_t_5numpy_uint64_t *__pyx_v_arr;
  __pyx_t_5numpy_uint64_t __pyx_v_prefix1;
  __pyx_t_5numpy_uint64_t __pyx_v_prefix2;
  int __pyx_v_i;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "yt/geometry/particle_oct_container.pyx":280
 *         # If p: Loops over all previous morton indices
 *         # If n_ref: Loops over n_ref previous morton indices
 *         cdef int n = imin(p, self.n_ref)             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t *arr = data + imax(p - self.n_ref, 0)
 *         cdef np.uint64_t prefix1, prefix2
*/
  __pyx_v_n = __pyx_f_2yt_9utilities_3lib_8fp_utils_imin(__pyx_v_p, __pyx_v_self->n_ref);

  /* "yt/geometry/particle_oct_container.pyx":281
 *         # If n_ref: Loops over n_ref previous morton indices
 *         cdef int n = imin(p, self.n_ref)
 *         cdef np.uint64_t *arr = data + imax(p - self.n_ref, 0)             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t prefix1, prefix2
 *         # Now we figure out our prefix, which is the oct address at this level.
*/
  __pyx_v_arr = (__pyx_v_data + __pyx_f_2yt_9utilities_3lib_8fp_utils_imax((__pyx_v_p - __pyx_v_self->n_ref), 0));

  /* "yt/geometry/particle_oct_container.pyx":286
 *         # As long as we're actually in Morton order, we do not need to worry
 *         # about *any* of the other children of the oct.
 *         prefix1 = data[p] >> (order - level)*3             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             prefix2 = arr[i] >> (order - level)*3
*/
  __pyx_v_prefix1 = ((__pyx_v_data[__pyx_v_p]) >> ((__pyx_v_order - __pyx_v_level) * 3));

  /* "yt/geometry/particle_oct_container.pyx":287
 *         # about *any* of the other children of the oct.
 *         prefix1 = data[p] >> (order - level)*3
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             prefix2 = arr[i] >> (order - level)*3
 *             if (prefix1 == prefix2):
*/
  __pyx_t_1 = __pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":288
 *         prefix1 = data[p] >> (order - level)*3
 *         for i in range(n):
 *             prefix2 = arr[i] >> (order - level)*3             # <<<<<<<<<<<<<<
 *             if (prefix1 == prefix2):
 *                 o.file_ind += 1 # Says how many morton indices are in this octant?
*/
    __pyx_v_prefix2 = ((__pyx_v_arr[__pyx_v_i]) >> ((__pyx_v_order - __pyx_v_level) * 3));

    /* "yt/geometry/particle_oct_container.pyx":289
 *         for i in range(n):
 *             prefix2 = arr[i] >> (order - level)*3
 *             if (prefix1 == prefix2):             # <<<<<<<<<<<<<<
 *                 o.file_ind += 1 # Says how many morton indices are in this octant?
 * 
*/
    __pyx_t_4 = (__pyx_v_prefix1 == __pyx_v_prefix2);
    if (__pyx_t_4) {

      /* "yt/geometry/particle_oct_container.pyx":290
 *             prefix2 = arr[i] >> (order - level)*3
 *             if (prefix1 == prefix2):
 *                 o.file_ind += 1 # Says how many morton indices are in this octant?             # <<<<<<<<<<<<<<
 * 
 *     def recursively_count(self):
*/
      __pyx_v_o->file_ind = (__pyx_v_o->file_ind + 1);

      /* "yt/geometry/particle_oct_container.pyx":289
 *         for i in range(n):
 *             prefix2 = arr[i] >> (order - level)*3
 *             if (prefix1 == prefix2):             # <<<<<<<<<<<<<<
 *                 o.file_ind += 1 # Says how many morton indices are in this octant?
 * 
*/
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":275
 *         return noct
 * 
 *     cdef void filter_particles(self, Oct *o, np.uint64_t *data, np.int64_t p,             # <<<<<<<<<<<<<<
 *                                int level, np.uint8_t order):
 *         # Now we look at the last nref particles to decide where they go.
*/

  /* function exit code */
}

/* "yt/geometry/particle_oct_container.pyx":292
 *                 o.file_ind += 1 # Says how many morton indices are in this octant?
 * 
 *     def recursively_count(self):             # <<<<<<<<<<<<<<
 *         #Visit every cell, accumulate the # of cells per level
 *         cdef int i, j, k
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_16recursively_count(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_16recursively_count = {"recursively_count", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_16recursively_count, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_16recursively_count(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("recursively_count (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("recursively_count", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("recursively_count", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_15recursively_count(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_15recursively_count(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  __pyx_t_5numpy_int64_t __pyx_v_counts[0x80];
  PyObject *__pyx_v_level_counts = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("recursively_count", 0);

  /* "yt/geometry/particle_oct_container.pyx":296
 *         cdef int i, j, k
 *         cdef np.int64_t counts[128]
 *         for i in range(128): counts[i] = 0             # <<<<<<<<<<<<<<
 *         for i in range(self.nn[0]):
 *             for j in range(self.nn[1]):
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 0x80; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;
    (__pyx_v_counts[__pyx_v_i]) = 0;
  }

  /* "yt/geometry/particle_oct_container.pyx":297
 *         cdef np.int64_t counts[128]
 *         for i in range(128): counts[i] = 0
 *         for i in range(self.nn[0]):             # <<<<<<<<<<<<<<
 *             for j in range(self.nn[1]):
 *                 for k in range(self.nn[2]):
*/
  __pyx_t_1 = (__pyx_v_self->__pyx_base.nn[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":298
 *         for i in range(128): counts[i] = 0
 *         for i in range(self.nn[0]):
 *             for j in range(self.nn[1]):             # <<<<<<<<<<<<<<
 *                 for k in range(self.nn[2]):
 *                     if self.root_mesh[i][j][k] != NULL:
*/
    __pyx_t_4 = (__pyx_v_self->__pyx_base.nn[1]);
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "yt/geometry/particle_oct_container.pyx":299
 *         for i in range(self.nn[0]):
 *             for j in range(self.nn[1]):
 *                 for k in range(self.nn[2]):             # <<<<<<<<<<<<<<
 *                     if self.root_mesh[i][j][k] != NULL:
 *                         self.visit(self.root_mesh[i][j][k], counts)
*/
      __pyx_t_7 = (__pyx_v_self->__pyx_base.nn[2]);
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_k = __pyx_t_9;

        /* "yt/geometry/particle_oct_container.pyx":300
 *             for j in range(self.nn[1]):
 *                 for k in range(self.nn[2]):
 *                     if self.root_mesh[i][j][k] != NULL:             # <<<<<<<<<<<<<<
 *                         self.visit(self.root_mesh[i][j][k], counts)
 *         level_counts = {}
*/
        __pyx_t_10 = ((((__pyx_v_self->__pyx_base.root_mesh[__pyx_v_i])[__pyx_v_j])[__pyx_v_k]) != NULL);
        if (__pyx_t_10) {

          /* "yt/geometry/particle_oct_container.pyx":301
 *                 for k in range(self.nn[2]):
 *                     if self.root_mesh[i][j][k] != NULL:
 *                         self.visit(self.root_mesh[i][j][k], counts)             # <<<<<<<<<<<<<<
 *         level_counts = {}
 *         for i in range(128):
*/
          __pyx_t_11 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->visit(__pyx_v_self, (((__pyx_v_self->__pyx_base.root_mesh[__pyx_v_i])[__pyx_v_j])[__pyx_v_k]), __pyx_v_counts, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 301, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "yt/geometry/particle_oct_container.pyx":300
 *             for j in range(self.nn[1]):
 *                 for k in range(self.nn[2]):
 *                     if self.root_mesh[i][j][k] != NULL:             # <<<<<<<<<<<<<<
 *                         self.visit(self.root_mesh[i][j][k], counts)
 *         level_counts = {}
*/
        }
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":302
 *                     if self.root_mesh[i][j][k] != NULL:
 *                         self.visit(self.root_mesh[i][j][k], counts)
 *         level_counts = {}             # <<<<<<<<<<<<<<
 *         for i in range(128):
 *             if counts[i] == 0: break
*/
  __pyx_t_11 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_v_level_counts = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "yt/geometry/particle_oct_container.pyx":303
 *                         self.visit(self.root_mesh[i][j][k], counts)
 *         level_counts = {}
 *         for i in range(128):             # <<<<<<<<<<<<<<
 *             if counts[i] == 0: break
 *             level_counts[i] = counts[i]
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 0x80; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":304
 *         level_counts = {}
 *         for i in range(128):
 *             if counts[i] == 0: break             # <<<<<<<<<<<<<<
 *             level_counts[i] = counts[i]
 *         return level_counts
*/
    __pyx_t_10 = ((__pyx_v_counts[__pyx_v_i]) == 0);
    if (__pyx_t_10) {
      goto __pyx_L13_break;
    }

    /* "yt/geometry/particle_oct_container.pyx":305
 *         for i in range(128):
 *             if counts[i] == 0: break
 *             level_counts[i] = counts[i]             # <<<<<<<<<<<<<<
 *         return level_counts
 * 
*/
    __pyx_t_11 = __Pyx_PyLong_From_npy_int64((__pyx_v_counts[__pyx_v_i])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_12 = __Pyx_PyLong_From_int(__pyx_v_i); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (unlikely((PyDict_SetItem(__pyx_v_level_counts, __pyx_t_12, __pyx_t_11) < 0))) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }
  __pyx_L13_break:;

  /* "yt/geometry/particle_oct_container.pyx":306
 *             if counts[i] == 0: break
 *             level_counts[i] = counts[i]
 *         return level_counts             # <<<<<<<<<<<<<<
 * 
 *     cdef visit(self, Oct *o, np.int64_t *counts, level = 0):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_level_counts);
  __pyx_r = __pyx_v_level_counts;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":292
 *                 o.file_ind += 1 # Says how many morton indices are in this octant?
 * 
 *     def recursively_count(self):             # <<<<<<<<<<<<<<
 *         #Visit every cell, accumulate the # of cells per level
 *         cdef int i, j, k
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.recursively_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_level_counts);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":308
 *         return level_counts
 * 
 *     cdef visit(self, Oct *o, np.int64_t *counts, level = 0):             # <<<<<<<<<<<<<<
 *         cdef int i, j, k
 *         counts[level] += 1
*/

static PyObject *__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_int64_t *__pyx_v_counts, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit *__pyx_optional_args) {
  PyObject *__pyx_v_level = ((PyObject *)__pyx_mstate_global->__pyx_int_0);
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("visit", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_level = __pyx_optional_args->level;
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":310
 *     cdef visit(self, Oct *o, np.int64_t *counts, level = 0):
 *         cdef int i, j, k
 *         counts[level] += 1             # <<<<<<<<<<<<<<
 *         for i in range(2):
 *             for j in range(2):
*/
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_level); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
  (__pyx_v_counts[__pyx_t_1]) = ((__pyx_v_counts[__pyx_t_1]) + 1);

  /* "yt/geometry/particle_oct_container.pyx":311
 *         cdef int i, j, k
 *         counts[level] += 1
 *         for i in range(2):             # <<<<<<<<<<<<<<
 *             for j in range(2):
 *                 for k in range(2):
*/
  for (__pyx_t_2 = 0; __pyx_t_2 < 2; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "yt/geometry/particle_oct_container.pyx":312
 *         counts[level] += 1
 *         for i in range(2):
 *             for j in range(2):             # <<<<<<<<<<<<<<
 *                 for k in range(2):
 *                     if o.children != NULL \
*/
    for (__pyx_t_3 = 0; __pyx_t_3 < 2; __pyx_t_3+=1) {
      __pyx_v_j = __pyx_t_3;

      /* "yt/geometry/particle_oct_container.pyx":313
 *         for i in range(2):
 *             for j in range(2):
 *                 for k in range(2):             # <<<<<<<<<<<<<<
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:
*/
      for (__pyx_t_4 = 0; __pyx_t_4 < 2; __pyx_t_4+=1) {
        __pyx_v_k = __pyx_t_4;

        /* "yt/geometry/particle_oct_container.pyx":314
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit(o.children[cind(i,j,k)], counts, level + 1)
*/
        __pyx_t_6 = (__pyx_v_o->children != NULL);
        if (__pyx_t_6) {
        } else {
          __pyx_t_5 = __pyx_t_6;
          goto __pyx_L10_bool_binop_done;
        }

        /* "yt/geometry/particle_oct_container.pyx":315
 *                 for k in range(2):
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:             # <<<<<<<<<<<<<<
 *                         self.visit(o.children[cind(i,j,k)], counts, level + 1)
 *         return
*/
        __pyx_t_7 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_7 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 315, __pyx_L1_error)
        __pyx_t_6 = ((__pyx_v_o->children[__pyx_t_7]) != NULL);
        __pyx_t_5 = __pyx_t_6;
        __pyx_L10_bool_binop_done:;

        /* "yt/geometry/particle_oct_container.pyx":314
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit(o.children[cind(i,j,k)], counts, level + 1)
*/
        if (__pyx_t_5) {

          /* "yt/geometry/particle_oct_container.pyx":316
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit(o.children[cind(i,j,k)], counts, level + 1)             # <<<<<<<<<<<<<<
 *         return
 * 
*/
          __pyx_t_7 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_7 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L1_error)
          __pyx_t_8 = __Pyx_PyLong_AddObjC(__pyx_v_level, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 316, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10.__pyx_n = 1;
          __pyx_t_10.level = __pyx_t_8;
          __pyx_t_9 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->visit(__pyx_v_self, (__pyx_v_o->children[__pyx_t_7]), __pyx_v_counts, &__pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 316, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

          /* "yt/geometry/particle_oct_container.pyx":314
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit(o.children[cind(i,j,k)], counts, level + 1)
*/
        }
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":317
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit(o.children[cind(i,j,k)], counts, level + 1)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":308
 *         return level_counts
 * 
 *     cdef visit(self, Oct *o, np.int64_t *counts, level = 0):             # <<<<<<<<<<<<<<
 *         cdef int i, j, k
 *         counts[level] += 1
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.visit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":319
 *         return
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_get_from_index(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_get_from_index *__pyx_optional_args) {
  __pyx_t_5numpy_uint8_t __pyx_v_order = __pyx_mstate_global->__pyx_k__13;
  int __pyx_v_max_level = ((int)99);
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_cur;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_next;
  int __pyx_v_i;
  __pyx_t_5numpy_int64_t __pyx_v_level;
  int __pyx_v_ind32[3];
  __pyx_t_5numpy_uint64_t __pyx_v_ind[3];
  __pyx_t_5numpy_uint64_t __pyx_v_index;
  int __pyx_v_level_offset[3];
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __pyx_t_5numpy_uint8_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_from_index", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_order = __pyx_optional_args->order;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_max_level = __pyx_optional_args->max_level;
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":326
 *         cdef Oct *cur
 *         cdef Oct *next
 *         cur = next = NULL             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef np.int64_t level = -1
*/
  __pyx_v_cur = NULL;
  __pyx_v_next = NULL;

  /* "yt/geometry/particle_oct_container.pyx":328
 *         cur = next = NULL
 *         cdef int i
 *         cdef np.int64_t level = -1             # <<<<<<<<<<<<<<
 *         cdef int ind32[3]
 *         cdef np.uint64_t ind[3]
*/
  __pyx_v_level = -1LL;

  /* "yt/geometry/particle_oct_container.pyx":334
 *         # Get level offset
 *         cdef int level_offset[3]
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             level_offset[i] = np.log2(self.nn[i])
 *             if (1 << level_offset[i]) != self.nn[i]:
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":335
 *         cdef int level_offset[3]
 *         for i in range(3):
 *             level_offset[i] = np.log2(self.nn[i])             # <<<<<<<<<<<<<<
 *             if (1 << level_offset[i]) != self.nn[i]:
 *                 raise Exception("Octree does not have roots along dimension {} in a power of 2 ".format(i))
*/
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_log2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyLong_From_int((__pyx_v_self->__pyx_base.nn[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_6 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_4};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_7 = __Pyx_PyLong_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    (__pyx_v_level_offset[__pyx_v_i]) = __pyx_t_7;

    /* "yt/geometry/particle_oct_container.pyx":336
 *         for i in range(3):
 *             level_offset[i] = np.log2(self.nn[i])
 *             if (1 << level_offset[i]) != self.nn[i]:             # <<<<<<<<<<<<<<
 *                 raise Exception("Octree does not have roots along dimension {} in a power of 2 ".format(i))
 *         for i in range(2,3):
*/
    __pyx_t_8 = ((1 << (__pyx_v_level_offset[__pyx_v_i])) != (__pyx_v_self->__pyx_base.nn[__pyx_v_i]));
    if (unlikely(__pyx_t_8)) {

      /* "yt/geometry/particle_oct_container.pyx":337
 *             level_offset[i] = np.log2(self.nn[i])
 *             if (1 << level_offset[i]) != self.nn[i]:
 *                 raise Exception("Octree does not have roots along dimension {} in a power of 2 ".format(i))             # <<<<<<<<<<<<<<
 *         for i in range(2,3):
 *             if level_offset[i] != level_offset[0]:
*/
      __pyx_t_5 = NULL;
      __Pyx_INCREF((PyObject *)(((PyTypeObject*)PyExc_Exception)));
      __pyx_t_4 = ((PyObject *)(((PyTypeObject*)PyExc_Exception))); 
      __pyx_t_9 = __pyx_mstate_global->__pyx_kp_u_Octree_does_not_have_roots_along;
      __Pyx_INCREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyLong_From_int(__pyx_v_i); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 337, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_10};
        __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      }
      __pyx_t_6 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 337, __pyx_L1_error)

      /* "yt/geometry/particle_oct_container.pyx":336
 *         for i in range(3):
 *             level_offset[i] = np.log2(self.nn[i])
 *             if (1 << level_offset[i]) != self.nn[i]:             # <<<<<<<<<<<<<<
 *                 raise Exception("Octree does not have roots along dimension {} in a power of 2 ".format(i))
 *         for i in range(2,3):
*/
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":338
 *             if (1 << level_offset[i]) != self.nn[i]:
 *                 raise Exception("Octree does not have roots along dimension {} in a power of 2 ".format(i))
 *         for i in range(2,3):             # <<<<<<<<<<<<<<
 *             if level_offset[i] != level_offset[0]:
 *                 raise Exception("Octree must have the same number of roots in each dimension for this.")
*/
  for (__pyx_t_1 = 2; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":339
 *                 raise Exception("Octree does not have roots along dimension {} in a power of 2 ".format(i))
 *         for i in range(2,3):
 *             if level_offset[i] != level_offset[0]:             # <<<<<<<<<<<<<<
 *                 raise Exception("Octree must have the same number of roots in each dimension for this.")
 *         # Get root for index
*/
    __pyx_t_8 = ((__pyx_v_level_offset[__pyx_v_i]) != (__pyx_v_level_offset[0]));
    if (unlikely(__pyx_t_8)) {

      /* "yt/geometry/particle_oct_container.pyx":340
 *         for i in range(2,3):
 *             if level_offset[i] != level_offset[0]:
 *                 raise Exception("Octree must have the same number of roots in each dimension for this.")             # <<<<<<<<<<<<<<
 *         # Get root for index
 *         index = (mi >> ((order - level_offset[0])*3))
*/
      __pyx_t_4 = NULL;
      __Pyx_INCREF((PyObject *)(((PyTypeObject*)PyExc_Exception)));
      __pyx_t_3 = ((PyObject *)(((PyTypeObject*)PyExc_Exception))); 
      __pyx_t_6 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_Octree_must_have_the_same_number};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(0, 340, __pyx_L1_error)

      /* "yt/geometry/particle_oct_container.pyx":339
 *                 raise Exception("Octree does not have roots along dimension {} in a power of 2 ".format(i))
 *         for i in range(2,3):
 *             if level_offset[i] != level_offset[0]:             # <<<<<<<<<<<<<<
 *                 raise Exception("Octree must have the same number of roots in each dimension for this.")
 *         # Get root for index
*/
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":342
 *                 raise Exception("Octree must have the same number of roots in each dimension for this.")
 *         # Get root for index
 *         index = (mi >> ((order - level_offset[0])*3))             # <<<<<<<<<<<<<<
 *         decode_morton_64bit(index, ind)
 *         for i in range(3):
*/
  __pyx_v_index = (__pyx_v_mi >> ((__pyx_v_order - (__pyx_v_level_offset[0])) * 3));

  /* "yt/geometry/particle_oct_container.pyx":343
 *         # Get root for index
 *         index = (mi >> ((order - level_offset[0])*3))
 *         decode_morton_64bit(index, ind)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             ind32[i] = ind[i]
*/
  __pyx_f_2yt_9utilities_3lib_14geometry_utils_decode_morton_64bit(__pyx_v_index, __pyx_v_ind); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":344
 *         index = (mi >> ((order - level_offset[0])*3))
 *         decode_morton_64bit(index, ind)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             ind32[i] = ind[i]
 *         self.get_root(ind32, &next)
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":345
 *         decode_morton_64bit(index, ind)
 *         for i in range(3):
 *             ind32[i] = ind[i]             # <<<<<<<<<<<<<<
 *         self.get_root(ind32, &next)
 *         # We want to stop recursing when there's nowhere else to go
*/
    (__pyx_v_ind32[__pyx_v_i]) = (__pyx_v_ind[__pyx_v_i]);
  }

  /* "yt/geometry/particle_oct_container.pyx":346
 *         for i in range(3):
 *             ind32[i] = ind[i]
 *         self.get_root(ind32, &next)             # <<<<<<<<<<<<<<
 *         # We want to stop recursing when there's nowhere else to go
 *         level = level_offset[0]
*/
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.get_root(((struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *)__pyx_v_self), __pyx_v_ind32, (&__pyx_v_next)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":348
 *         self.get_root(ind32, &next)
 *         # We want to stop recursing when there's nowhere else to go
 *         level = level_offset[0]             # <<<<<<<<<<<<<<
 *         max_level = min(max_level, order)
 *         while next != NULL and level <= max_level:
*/
  __pyx_v_level = (__pyx_v_level_offset[0]);

  /* "yt/geometry/particle_oct_container.pyx":349
 *         # We want to stop recursing when there's nowhere else to go
 *         level = level_offset[0]
 *         max_level = min(max_level, order)             # <<<<<<<<<<<<<<
 *         while next != NULL and level <= max_level:
 *             level += 1
*/
  __pyx_t_11 = __pyx_v_order;
  __pyx_t_1 = __pyx_v_max_level;
  __pyx_t_8 = (__pyx_t_11 < __pyx_t_1);
  if (__pyx_t_8) {
    __pyx_t_7 = __pyx_t_11;
  } else {
    __pyx_t_7 = __pyx_t_1;
  }
  __pyx_v_max_level = __pyx_t_7;

  /* "yt/geometry/particle_oct_container.pyx":350
 *         level = level_offset[0]
 *         max_level = min(max_level, order)
 *         while next != NULL and level <= max_level:             # <<<<<<<<<<<<<<
 *             level += 1
 *             for i in range(3):
*/
  while (1) {
    __pyx_t_12 = (__pyx_v_next != NULL);
    if (__pyx_t_12) {
    } else {
      __pyx_t_8 = __pyx_t_12;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_12 = (__pyx_v_level <= __pyx_v_max_level);
    __pyx_t_8 = __pyx_t_12;
    __pyx_L13_bool_binop_done:;
    if (!__pyx_t_8) break;

    /* "yt/geometry/particle_oct_container.pyx":351
 *         max_level = min(max_level, order)
 *         while next != NULL and level <= max_level:
 *             level += 1             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 ind[i] = (mi >> ((order - level)*3 + (2 - i))) & 1
*/
    __pyx_v_level = (__pyx_v_level + 1);

    /* "yt/geometry/particle_oct_container.pyx":352
 *         while next != NULL and level <= max_level:
 *             level += 1
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 ind[i] = (mi >> ((order - level)*3 + (2 - i))) & 1
 *             cur = next
*/
    for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
      __pyx_v_i = __pyx_t_7;

      /* "yt/geometry/particle_oct_container.pyx":353
 *             level += 1
 *             for i in range(3):
 *                 ind[i] = (mi >> ((order - level)*3 + (2 - i))) & 1             # <<<<<<<<<<<<<<
 *             cur = next
 *             if cur.children != NULL:
*/
      (__pyx_v_ind[__pyx_v_i]) = ((__pyx_v_mi >> (((__pyx_v_order - __pyx_v_level) * 3) + (2 - __pyx_v_i))) & 1);
    }

    /* "yt/geometry/particle_oct_container.pyx":354
 *             for i in range(3):
 *                 ind[i] = (mi >> ((order - level)*3 + (2 - i))) & 1
 *             cur = next             # <<<<<<<<<<<<<<
 *             if cur.children != NULL:
 *                 next = cur.children[cind(ind[0],ind[1],ind[2])]
*/
    __pyx_v_cur = __pyx_v_next;

    /* "yt/geometry/particle_oct_container.pyx":355
 *                 ind[i] = (mi >> ((order - level)*3 + (2 - i))) & 1
 *             cur = next
 *             if cur.children != NULL:             # <<<<<<<<<<<<<<
 *                 next = cur.children[cind(ind[0],ind[1],ind[2])]
 *             else:
*/
    __pyx_t_8 = (__pyx_v_cur->children != NULL);
    if (__pyx_t_8) {

      /* "yt/geometry/particle_oct_container.pyx":356
 *             cur = next
 *             if cur.children != NULL:
 *                 next = cur.children[cind(ind[0],ind[1],ind[2])]             # <<<<<<<<<<<<<<
 *             else:
 *                 next = NULL
*/
      __pyx_t_7 = __pyx_f_2yt_8geometry_12oct_visitors_cind((__pyx_v_ind[0]), (__pyx_v_ind[1]), (__pyx_v_ind[2])); if (unlikely(__pyx_t_7 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 356, __pyx_L1_error)
      __pyx_v_next = (__pyx_v_cur->children[__pyx_t_7]);

      /* "yt/geometry/particle_oct_container.pyx":355
 *                 ind[i] = (mi >> ((order - level)*3 + (2 - i))) & 1
 *             cur = next
 *             if cur.children != NULL:             # <<<<<<<<<<<<<<
 *                 next = cur.children[cind(ind[0],ind[1],ind[2])]
 *             else:
*/
      goto __pyx_L17;
    }

    /* "yt/geometry/particle_oct_container.pyx":358
 *                 next = cur.children[cind(ind[0],ind[1],ind[2])]
 *             else:
 *                 next = NULL             # <<<<<<<<<<<<<<
 *         return cur
 * 
*/
    /*else*/ {
      __pyx_v_next = NULL;
    }
    __pyx_L17:;
  }

  /* "yt/geometry/particle_oct_container.pyx":359
 *             else:
 *                 next = NULL
 *         return cur             # <<<<<<<<<<<<<<
 * 
 *     def apply_domain(self, int domain_id, BoolArrayCollection mask,
*/
  __pyx_r = __pyx_v_cur;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":319
 *         return
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.get_from_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":361
 *         return cur
 * 
 *     def apply_domain(self, int domain_id, BoolArrayCollection mask,             # <<<<<<<<<<<<<<
 *                      int masklevel):
 *         cdef SelectorObject selector = AlwaysSelector(None)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_18apply_domain(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_18apply_domain = {"apply_domain", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_18apply_domain, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_18apply_domain(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_domain_id;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask = 0;
  int __pyx_v_masklevel;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply_domain (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_domain_id,&__pyx_mstate_global->__pyx_n_u_mask,&__pyx_mstate_global->__pyx_n_u_masklevel,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 361, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 361, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 361, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 361, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "apply_domain", 0) < 0) __PYX_ERR(0, 361, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("apply_domain", 1, 3, 3, i); __PYX_ERR(0, 361, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 361, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 361, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 361, __pyx_L3_error)
    }
    __pyx_v_domain_id = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_domain_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 361, __pyx_L3_error)
    __pyx_v_mask = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[1]);
    __pyx_v_masklevel = __Pyx_PyLong_As_int(values[2]); if (unlikely((__pyx_v_masklevel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 362, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("apply_domain", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 361, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.apply_domain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mask), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "mask", 0))) __PYX_ERR(0, 361, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_17apply_domain(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self), __pyx_v_domain_id, __pyx_v_mask, __pyx_v_masklevel);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_17apply_domain(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, int __pyx_v_domain_id, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask, int __pyx_v_masklevel) {
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector = 0;
  PyObject *__pyx_v_ind = NULL;
  __pyx_t_5numpy_int64_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __pyx_t_5numpy_int64_t __pyx_t_6;
  __pyx_t_5numpy_int64_t __pyx_t_7;
  __pyx_t_5numpy_int64_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("apply_domain", 0);

  /* "yt/geometry/particle_oct_container.pyx":363
 *     def apply_domain(self, int domain_id, BoolArrayCollection mask,
 *                      int masklevel):
 *         cdef SelectorObject selector = AlwaysSelector(None)             # <<<<<<<<<<<<<<
 *         ind = self.domain_ind(selector, mask = mask, masklevel = masklevel)
 *         for i in range(self.nocts):
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, Py_None};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_selector = ((struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":364
 *                      int masklevel):
 *         cdef SelectorObject selector = AlwaysSelector(None)
 *         ind = self.domain_ind(selector, mask = mask, masklevel = masklevel)             # <<<<<<<<<<<<<<
 *         for i in range(self.nocts):
 *             if ind[i] < 0: continue
*/
  __pyx_t_3 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_masklevel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 2 : 0)] = {__pyx_t_3, ((PyObject *)__pyx_v_selector)};
    __pyx_t_5 = __Pyx_MakeVectorcallBuilderKwds(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_mask, ((PyObject *)__pyx_v_mask), __pyx_t_5, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_masklevel, __pyx_t_2, __pyx_t_5, __pyx_callargs+2, 1) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_domain_ind, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_ind = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":365
 *         cdef SelectorObject selector = AlwaysSelector(None)
 *         ind = self.domain_ind(selector, mask = mask, masklevel = masklevel)
 *         for i in range(self.nocts):             # <<<<<<<<<<<<<<
 *             if ind[i] < 0: continue
 *             self.oct_list[i].domain = domain_id
*/
  __pyx_t_6 = __pyx_v_self->__pyx_base.nocts;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "yt/geometry/particle_oct_container.pyx":366
 *         ind = self.domain_ind(selector, mask = mask, masklevel = masklevel)
 *         for i in range(self.nocts):
 *             if ind[i] < 0: continue             # <<<<<<<<<<<<<<
 *             self.oct_list[i].domain = domain_id
 *         super(ParticleOctreeContainer,self).domain_ind(selector, domain_id = domain_id)
*/
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_ind, __pyx_v_i, __pyx_t_5numpy_int64_t, 1, __Pyx_PyLong_From_npy_int64, 0, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_9) {
      goto __pyx_L3_continue;
    }

    /* "yt/geometry/particle_oct_container.pyx":367
 *         for i in range(self.nocts):
 *             if ind[i] < 0: continue
 *             self.oct_list[i].domain = domain_id             # <<<<<<<<<<<<<<
 *         super(ParticleOctreeContainer,self).domain_ind(selector, domain_id = domain_id)
 * 
*/
    (__pyx_v_self->oct_list[__pyx_v_i])->domain = __pyx_v_domain_id;
    __pyx_L3_continue:;
  }

  /* "yt/geometry/particle_oct_container.pyx":368
 *             if ind[i] < 0: continue
 *             self.oct_list[i].domain = domain_id
 *         super(ParticleOctreeContainer,self).domain_ind(selector, domain_id = domain_id)             # <<<<<<<<<<<<<<
 * 
 *     def domain_ind(self, selector, int domain_id = -1,
*/
  __pyx_t_3 = NULL;
  __Pyx_INCREF(__pyx_builtin_super);
  __pyx_t_10 = __pyx_builtin_super; 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer), ((PyObject *)__pyx_v_self)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_4, (3-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_t_1 = __pyx_t_2;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_10 = __Pyx_PyLong_From_int(__pyx_v_domain_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_1, ((PyObject *)__pyx_v_selector)};
    __pyx_t_3 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_domain_id, __pyx_t_10, __pyx_t_3, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
    __pyx_t_5 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_domain_ind, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "yt/geometry/particle_oct_container.pyx":361
 *         return cur
 * 
 *     def apply_domain(self, int domain_id, BoolArrayCollection mask,             # <<<<<<<<<<<<<<
 *                      int masklevel):
 *         cdef SelectorObject selector = AlwaysSelector(None)
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.apply_domain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_selector);
  __Pyx_XDECREF(__pyx_v_ind);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":370
 *         super(ParticleOctreeContainer,self).domain_ind(selector, domain_id = domain_id)
 * 
 *     def domain_ind(self, selector, int domain_id = -1,             # <<<<<<<<<<<<<<
 *                    BoolArrayCollection mask = None, int masklevel = 99):
 *         if mask is None:
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_20domain_ind(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_20domain_ind = {"domain_ind", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_20domain_ind, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_20domain_ind(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_selector = 0;
  int __pyx_v_domain_id;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask = 0;
  int __pyx_v_masklevel;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("domain_ind (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_selector,&__pyx_mstate_global->__pyx_n_u_domain_id,&__pyx_mstate_global->__pyx_n_u_mask,&__pyx_mstate_global->__pyx_n_u_masklevel,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 370, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 370, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 370, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 370, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 370, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "domain_ind", 0) < 0) __PYX_ERR(0, 370, __pyx_L3_error)

      /* "yt/geometry/particle_oct_container.pyx":371
 * 
 *     def domain_ind(self, selector, int domain_id = -1,
 *                    BoolArrayCollection mask = None, int masklevel = 99):             # <<<<<<<<<<<<<<
 *         if mask is None:
 *             return super(ParticleOctreeContainer,self).domain_ind(selector, domain_id = domain_id)
*/
      if (!values[2]) values[2] = __Pyx_NewRef((PyObject *)((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("domain_ind", 0, 1, 4, i); __PYX_ERR(0, 370, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 370, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 370, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 370, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 370, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef((PyObject *)((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None));
    }
    __pyx_v_selector = values[0];
    if (values[1]) {
      __pyx_v_domain_id = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_domain_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 370, __pyx_L3_error)
    } else {
      __pyx_v_domain_id = ((int)-1);
    }
    __pyx_v_mask = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[2]);
    if (values[3]) {
      __pyx_v_masklevel = __Pyx_PyLong_As_int(values[3]); if (unlikely((__pyx_v_masklevel == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L3_error)
    } else {
      __pyx_v_masklevel = ((int)99);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("domain_ind", 0, 1, 4, __pyx_nargs); __PYX_ERR(0, 370, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.domain_ind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mask), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "mask", 0))) __PYX_ERR(0, 371, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_19domain_ind(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self), __pyx_v_selector, __pyx_v_domain_id, __pyx_v_mask, __pyx_v_masklevel);

  /* "yt/geometry/particle_oct_container.pyx":370
 *         super(ParticleOctreeContainer,self).domain_ind(selector, domain_id = domain_id)
 * 
 *     def domain_ind(self, selector, int domain_id = -1,             # <<<<<<<<<<<<<<
 *                    BoolArrayCollection mask = None, int masklevel = 99):
 *         if mask is None:
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_19domain_ind(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, PyObject *__pyx_v_selector, int __pyx_v_domain_id, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask, int __pyx_v_masklevel) {
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array *__pyx_v_ewah_slct;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_iterator *__pyx_v_iter_set;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_iterator *__pyx_v_iter_end;
  PyArrayObject *__pyx_v_oct_mask = 0;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o;
  int __pyx_v_coct;
  int __pyx_v_cmi;
  size_t __pyx_v_mi;
  PyArrayObject *__pyx_v_ind = 0;
  struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts *__pyx_v_visitor = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_ind;
  __Pyx_Buffer __pyx_pybuffer_ind;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_oct_mask;
  __Pyx_Buffer __pyx_pybuffer_oct_mask;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_t_12;
  struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_get_from_index __pyx_t_13;
  __Pyx_memviewslice __pyx_t_14 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_15 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("domain_ind", 0);
  __pyx_pybuffer_oct_mask.pybuffer.buf = NULL;
  __pyx_pybuffer_oct_mask.refcount = 0;
  __pyx_pybuffernd_oct_mask.data = NULL;
  __pyx_pybuffernd_oct_mask.rcbuffer = &__pyx_pybuffer_oct_mask;
  __pyx_pybuffer_ind.pybuffer.buf = NULL;
  __pyx_pybuffer_ind.refcount = 0;
  __pyx_pybuffernd_ind.data = NULL;
  __pyx_pybuffernd_ind.rcbuffer = &__pyx_pybuffer_ind;

  /* "yt/geometry/particle_oct_container.pyx":372
 *     def domain_ind(self, selector, int domain_id = -1,
 *                    BoolArrayCollection mask = None, int masklevel = 99):
 *         if mask is None:             # <<<<<<<<<<<<<<
 *             return super(ParticleOctreeContainer,self).domain_ind(selector, domain_id = domain_id)
 *         # Create mask for octs that are touched by the mask
*/
  __pyx_t_1 = (((PyObject *)__pyx_v_mask) == Py_None);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_oct_container.pyx":373
 *                    BoolArrayCollection mask = None, int masklevel = 99):
 *         if mask is None:
 *             return super(ParticleOctreeContainer,self).domain_ind(selector, domain_id = domain_id)             # <<<<<<<<<<<<<<
 *         # Create mask for octs that are touched by the mask
 *         cdef ewah_bool_array *ewah_slct = <ewah_bool_array *> mask.ewah_keys
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_builtin_super);
    __pyx_t_6 = __pyx_builtin_super; 
    __pyx_t_7 = 1;
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer), ((PyObject *)__pyx_v_self)};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_3 = __pyx_t_4;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyLong_From_int(__pyx_v_domain_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, __pyx_v_selector};
      __pyx_t_5 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_domain_id, __pyx_t_6, __pyx_t_5, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
      __pyx_t_2 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_domain_ind, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yt/geometry/particle_oct_container.pyx":372
 *     def domain_ind(self, selector, int domain_id = -1,
 *                    BoolArrayCollection mask = None, int masklevel = 99):
 *         if mask is None:             # <<<<<<<<<<<<<<
 *             return super(ParticleOctreeContainer,self).domain_ind(selector, domain_id = domain_id)
 *         # Create mask for octs that are touched by the mask
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":375
 *             return super(ParticleOctreeContainer,self).domain_ind(selector, domain_id = domain_id)
 *         # Create mask for octs that are touched by the mask
 *         cdef ewah_bool_array *ewah_slct = <ewah_bool_array *> mask.ewah_keys             # <<<<<<<<<<<<<<
 *         cdef ewah_bool_iterator *iter_set = new ewah_bool_iterator(ewah_slct[0].begin())
 *         cdef ewah_bool_iterator *iter_end = new ewah_bool_iterator(ewah_slct[0].end())
*/
  __pyx_v_ewah_slct = ((__pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array *)__pyx_v_mask->ewah_keys);

  /* "yt/geometry/particle_oct_container.pyx":376
 *         # Create mask for octs that are touched by the mask
 *         cdef ewah_bool_array *ewah_slct = <ewah_bool_array *> mask.ewah_keys
 *         cdef ewah_bool_iterator *iter_set = new ewah_bool_iterator(ewah_slct[0].begin())             # <<<<<<<<<<<<<<
 *         cdef ewah_bool_iterator *iter_end = new ewah_bool_iterator(ewah_slct[0].end())
 *         cdef np.ndarray[np.uint8_t, ndim=1] oct_mask
*/
  __pyx_v_iter_set = new __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_iterator((__pyx_v_ewah_slct[0]).begin());

  /* "yt/geometry/particle_oct_container.pyx":377
 *         cdef ewah_bool_array *ewah_slct = <ewah_bool_array *> mask.ewah_keys
 *         cdef ewah_bool_iterator *iter_set = new ewah_bool_iterator(ewah_slct[0].begin())
 *         cdef ewah_bool_iterator *iter_end = new ewah_bool_iterator(ewah_slct[0].end())             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint8_t, ndim=1] oct_mask
 *         oct_mask = np.zeros(self.nocts, 'uint8')
*/
  __pyx_v_iter_end = new __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_iterator((__pyx_v_ewah_slct[0]).end());

  /* "yt/geometry/particle_oct_container.pyx":379
 *         cdef ewah_bool_iterator *iter_end = new ewah_bool_iterator(ewah_slct[0].end())
 *         cdef np.ndarray[np.uint8_t, ndim=1] oct_mask
 *         oct_mask = np.zeros(self.nocts, 'uint8')             # <<<<<<<<<<<<<<
 *         cdef Oct *o
 *         cdef int coct, cmi
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyLong_From_npy_int64(__pyx_v_self->__pyx_base.nocts); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    assert(__pyx_t_4);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_6, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_5, __pyx_mstate_global->__pyx_n_u_uint8};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 379, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_oct_mask.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_oct_mask.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_oct_mask.rcbuffer->pybuffer, (PyObject*)__pyx_v_oct_mask, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
    }
    __pyx_pybuffernd_oct_mask.diminfo[0].strides = __pyx_pybuffernd_oct_mask.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_oct_mask.diminfo[0].shape = __pyx_pybuffernd_oct_mask.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 379, __pyx_L1_error)
  }
  __pyx_v_oct_mask = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":382
 *         cdef Oct *o
 *         cdef int coct, cmi
 *         coct = cmi = 0             # <<<<<<<<<<<<<<
 *         while iter_set[0] != iter_end[0]:
 *             mi = dereference(iter_set[0])
*/
  __pyx_v_coct = 0;
  __pyx_v_cmi = 0;

  /* "yt/geometry/particle_oct_container.pyx":383
 *         cdef int coct, cmi
 *         coct = cmi = 0
 *         while iter_set[0] != iter_end[0]:             # <<<<<<<<<<<<<<
 *             mi = dereference(iter_set[0])
 *             o = self.get_from_index(mi, order = masklevel)
*/
  while (1) {
    __pyx_t_1 = ((__pyx_v_iter_set[0]) != (__pyx_v_iter_end[0]));
    if (!__pyx_t_1) break;

    /* "yt/geometry/particle_oct_container.pyx":384
 *         coct = cmi = 0
 *         while iter_set[0] != iter_end[0]:
 *             mi = dereference(iter_set[0])             # <<<<<<<<<<<<<<
 *             o = self.get_from_index(mi, order = masklevel)
 *             if o != NULL:
*/
    __pyx_v_mi = (*(__pyx_v_iter_set[0]));

    /* "yt/geometry/particle_oct_container.pyx":385
 *         while iter_set[0] != iter_end[0]:
 *             mi = dereference(iter_set[0])
 *             o = self.get_from_index(mi, order = masklevel)             # <<<<<<<<<<<<<<
 *             if o != NULL:
 *                 _mask_children(oct_mask, o)
*/
    __pyx_t_13.__pyx_n = 1;
    __pyx_t_13.order = __pyx_v_masklevel;
    __pyx_t_12 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->get_from_index(__pyx_v_self, __pyx_v_mi, &__pyx_t_13); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 385, __pyx_L1_error)
    __pyx_v_o = __pyx_t_12;

    /* "yt/geometry/particle_oct_container.pyx":386
 *             mi = dereference(iter_set[0])
 *             o = self.get_from_index(mi, order = masklevel)
 *             if o != NULL:             # <<<<<<<<<<<<<<
 *                 _mask_children(oct_mask, o)
 *                 coct += 1
*/
    __pyx_t_1 = (__pyx_v_o != NULL);
    if (__pyx_t_1) {

      /* "yt/geometry/particle_oct_container.pyx":387
 *             o = self.get_from_index(mi, order = masklevel)
 *             if o != NULL:
 *                 _mask_children(oct_mask, o)             # <<<<<<<<<<<<<<
 *                 coct += 1
 *             cmi += 1
*/
      __pyx_f_2yt_8geometry_22particle_oct_container__mask_children(((PyArrayObject *)__pyx_v_oct_mask), __pyx_v_o); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 387, __pyx_L1_error)

      /* "yt/geometry/particle_oct_container.pyx":388
 *             if o != NULL:
 *                 _mask_children(oct_mask, o)
 *                 coct += 1             # <<<<<<<<<<<<<<
 *             cmi += 1
 *             preincrement(iter_set[0])
*/
      __pyx_v_coct = (__pyx_v_coct + 1);

      /* "yt/geometry/particle_oct_container.pyx":386
 *             mi = dereference(iter_set[0])
 *             o = self.get_from_index(mi, order = masklevel)
 *             if o != NULL:             # <<<<<<<<<<<<<<
 *                 _mask_children(oct_mask, o)
 *                 coct += 1
*/
    }

    /* "yt/geometry/particle_oct_container.pyx":389
 *                 _mask_children(oct_mask, o)
 *                 coct += 1
 *             cmi += 1             # <<<<<<<<<<<<<<
 *             preincrement(iter_set[0])
 *         # Get domain ind
*/
    __pyx_v_cmi = (__pyx_v_cmi + 1);

    /* "yt/geometry/particle_oct_container.pyx":390
 *                 coct += 1
 *             cmi += 1
 *             preincrement(iter_set[0])             # <<<<<<<<<<<<<<
 *         # Get domain ind
 *         cdef np.ndarray[np.int64_t, ndim=1] ind
*/
    (void)((++(__pyx_v_iter_set[0])));
  }

  /* "yt/geometry/particle_oct_container.pyx":393
 *         # Get domain ind
 *         cdef np.ndarray[np.int64_t, ndim=1] ind
 *         ind = np.zeros(self.nocts, 'int64') - 1             # <<<<<<<<<<<<<<
 *         cdef oct_visitors.MaskedIndexOcts visitor
 *         visitor = oct_visitors.MaskedIndexOcts(self, domain_id)
*/
  __pyx_t_6 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyLong_From_npy_int64(__pyx_v_self->__pyx_base.nocts); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_6);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_5, __pyx_mstate_global->__pyx_n_u_int64};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_t_4 = __Pyx_PyLong_SubtractObjC(__pyx_t_2, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 393, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ind.rcbuffer->pybuffer);
    __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ind.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_4), &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_8 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ind.rcbuffer->pybuffer, (PyObject*)__pyx_v_ind, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
      }
      __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_ind.diminfo[0].strides = __pyx_pybuffernd_ind.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ind.diminfo[0].shape = __pyx_pybuffernd_ind.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 393, __pyx_L1_error)
  }
  __pyx_v_ind = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":395
 *         ind = np.zeros(self.nocts, 'int64') - 1
 *         cdef oct_visitors.MaskedIndexOcts visitor
 *         visitor = oct_visitors.MaskedIndexOcts(self, domain_id)             # <<<<<<<<<<<<<<
 *         visitor.oct_index = ind
 *         visitor.oct_mask = oct_mask
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_12oct_visitors_MaskedIndexOcts);
  __pyx_t_5 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_12oct_visitors_MaskedIndexOcts); 
  __pyx_t_6 = __Pyx_PyLong_From_int(__pyx_v_domain_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_t_6};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 395, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_4);
  }
  __pyx_v_visitor = ((struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":396
 *         cdef oct_visitors.MaskedIndexOcts visitor
 *         visitor = oct_visitors.MaskedIndexOcts(self, domain_id)
 *         visitor.oct_index = ind             # <<<<<<<<<<<<<<
 *         visitor.oct_mask = oct_mask
 *         self.visit_all_octs(selector, visitor)
*/
  __pyx_t_14 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(((PyObject *)__pyx_v_ind), PyBUF_WRITABLE); if (unlikely(!__pyx_t_14.memview)) __PYX_ERR(0, 396, __pyx_L1_error)
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_visitor->oct_index, 0);
  __pyx_v_visitor->oct_index = __pyx_t_14;
  __pyx_t_14.memview = NULL;
  __pyx_t_14.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":397
 *         visitor = oct_visitors.MaskedIndexOcts(self, domain_id)
 *         visitor.oct_index = ind
 *         visitor.oct_mask = oct_mask             # <<<<<<<<<<<<<<
 *         self.visit_all_octs(selector, visitor)
 *         return ind
*/
  __pyx_t_15 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(((PyObject *)__pyx_v_oct_mask), PyBUF_WRITABLE); if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 397, __pyx_L1_error)
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_visitor->oct_mask, 0);
  __pyx_v_visitor->oct_mask = __pyx_t_15;
  __pyx_t_15.memview = NULL;
  __pyx_t_15.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":398
 *         visitor.oct_index = ind
 *         visitor.oct_mask = oct_mask
 *         self.visit_all_octs(selector, visitor)             # <<<<<<<<<<<<<<
 *         return ind
 * 
*/
  if (!(likely(((__pyx_v_selector) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_selector, __pyx_mstate_global->__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject))))) __PYX_ERR(0, 398, __pyx_L1_error)
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base.visit_all_octs(((struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *)__pyx_v_self), ((struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *)__pyx_v_selector), ((struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *)__pyx_v_visitor), NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 398, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":399
 *         visitor.oct_mask = oct_mask
 *         self.visit_all_octs(selector, visitor)
 *         return ind             # <<<<<<<<<<<<<<
 * 
 * cdef void _mask_children(np.ndarray[np.uint8_t] mask, Oct *cur):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_ind);
  __pyx_r = ((PyObject *)__pyx_v_ind);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":370
 *         super(ParticleOctreeContainer,self).domain_ind(selector, domain_id = domain_id)
 * 
 *     def domain_ind(self, selector, int domain_id = -1,             # <<<<<<<<<<<<<<
 *                    BoolArrayCollection mask = None, int masklevel = 99):
 *         if mask is None:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_14, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_15, 1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ind.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_oct_mask.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.domain_ind", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ind.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_oct_mask.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_oct_mask);
  __Pyx_XDECREF((PyObject *)__pyx_v_ind);
  __Pyx_XDECREF((PyObject *)__pyx_v_visitor);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":79
 *     cdef np.int64_t *dom_offsets
 *     #How many particles do we keep before refining
 *     cdef public int n_ref             # <<<<<<<<<<<<<<
 * 
 *     def allocate_root(self):
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5n_ref_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5n_ref_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5n_ref___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5n_ref___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_self->n_ref); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.n_ref.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5n_ref_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5n_ref_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5n_ref_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5n_ref_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyLong_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_v_self->n_ref = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.n_ref.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_22__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_22__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_22__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_22__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_21__reduce_cython__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_21__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_self_dom_offsets_self_oct_list_s, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling"
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_24__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_24__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_24__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_24__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_23__setstate_cython__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_23__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_self_dom_offsets_self_oct_list_s, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleOctreeContainer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":401
 *         return ind
 * 
 * cdef void _mask_children(np.ndarray[np.uint8_t] mask, Oct *cur):             # <<<<<<<<<<<<<<
 *     cdef int i, j, k
 *     if cur == NULL:
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container__mask_children(PyArrayObject *__pyx_v_mask, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_cur) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_mask;
  __Pyx_Buffer __pyx_pybuffer_mask;
  int __pyx_t_1;
  __pyx_t_5numpy_int64_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_pybuffer_mask.pybuffer.buf = NULL;
  __pyx_pybuffer_mask.refcount = 0;
  __pyx_pybuffernd_mask.data = NULL;
  __pyx_pybuffernd_mask.rcbuffer = &__pyx_pybuffer_mask;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_mask.rcbuffer->pybuffer, (PyObject*)__pyx_v_mask, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 401, __pyx_L1_error)
  }
  __pyx_pybuffernd_mask.diminfo[0].strides = __pyx_pybuffernd_mask.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_mask.diminfo[0].shape = __pyx_pybuffernd_mask.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":403
 * cdef void _mask_children(np.ndarray[np.uint8_t] mask, Oct *cur):
 *     cdef int i, j, k
 *     if cur == NULL:             # <<<<<<<<<<<<<<
 *         return
 *     mask[cur.domain_ind] = 1
*/
  __pyx_t_1 = (__pyx_v_cur == NULL);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_oct_container.pyx":404
 *     cdef int i, j, k
 *     if cur == NULL:
 *         return             # <<<<<<<<<<<<<<
 *     mask[cur.domain_ind] = 1
 *     if cur.children == NULL:
*/
    goto __pyx_L0;

    /* "yt/geometry/particle_oct_container.pyx":403
 * cdef void _mask_children(np.ndarray[np.uint8_t] mask, Oct *cur):
 *     cdef int i, j, k
 *     if cur == NULL:             # <<<<<<<<<<<<<<
 *         return
 *     mask[cur.domain_ind] = 1
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":405
 *     if cur == NULL:
 *         return
 *     mask[cur.domain_ind] = 1             # <<<<<<<<<<<<<<
 *     if cur.children == NULL:
 *         return
*/
  __pyx_t_2 = __pyx_v_cur->domain_ind;
  __pyx_t_3 = -1;
  if (__pyx_t_2 < 0) {
    __pyx_t_2 += __pyx_pybuffernd_mask.diminfo[0].shape;
    if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
  } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_mask.diminfo[0].shape)) __pyx_t_3 = 0;
  if (unlikely(__pyx_t_3 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_3);
    __PYX_ERR(0, 405, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_mask.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_mask.diminfo[0].strides) = 1;

  /* "yt/geometry/particle_oct_container.pyx":406
 *         return
 *     mask[cur.domain_ind] = 1
 *     if cur.children == NULL:             # <<<<<<<<<<<<<<
 *         return
 *     for i in range(2):
*/
  __pyx_t_1 = (__pyx_v_cur->children == NULL);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_oct_container.pyx":407
 *     mask[cur.domain_ind] = 1
 *     if cur.children == NULL:
 *         return             # <<<<<<<<<<<<<<
 *     for i in range(2):
 *         for j in range(2):
*/
    goto __pyx_L0;

    /* "yt/geometry/particle_oct_container.pyx":406
 *         return
 *     mask[cur.domain_ind] = 1
 *     if cur.children == NULL:             # <<<<<<<<<<<<<<
 *         return
 *     for i in range(2):
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":408
 *     if cur.children == NULL:
 *         return
 *     for i in range(2):             # <<<<<<<<<<<<<<
 *         for j in range(2):
 *             for k in range(2):
*/
  for (__pyx_t_3 = 0; __pyx_t_3 < 2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":409
 *         return
 *     for i in range(2):
 *         for j in range(2):             # <<<<<<<<<<<<<<
 *             for k in range(2):
 *                 _mask_children(mask, cur.children[cind(i,j,k)])
*/
    for (__pyx_t_4 = 0; __pyx_t_4 < 2; __pyx_t_4+=1) {
      __pyx_v_j = __pyx_t_4;

      /* "yt/geometry/particle_oct_container.pyx":410
 *     for i in range(2):
 *         for j in range(2):
 *             for k in range(2):             # <<<<<<<<<<<<<<
 *                 _mask_children(mask, cur.children[cind(i,j,k)])
 * 
*/
      for (__pyx_t_5 = 0; __pyx_t_5 < 2; __pyx_t_5+=1) {
        __pyx_v_k = __pyx_t_5;

        /* "yt/geometry/particle_oct_container.pyx":411
 *         for j in range(2):
 *             for k in range(2):
 *                 _mask_children(mask, cur.children[cind(i,j,k)])             # <<<<<<<<<<<<<<
 * 
 * cdef np.uint64_t ONEBIT=1
*/
        __pyx_t_6 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L1_error)
        __pyx_f_2yt_8geometry_22particle_oct_container__mask_children(__pyx_v_mask, (__pyx_v_cur->children[__pyx_t_6])); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L1_error)
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":401
 *         return ind
 * 
 * cdef void _mask_children(np.ndarray[np.uint8_t] mask, Oct *cur):             # <<<<<<<<<<<<<<
 *     cdef int i, j, k
 *     if cur == NULL:
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container._mask_children", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
  __pyx_L2:;
}

/* "yt/geometry/particle_oct_container.pyx":449
 *     cdef public int _used_mi2
 * 
 *     def __init__(self, left_edge, right_edge, periodicity, file_hash, nfiles,             # <<<<<<<<<<<<<<
 *                  index_order1, index_order2):
 *         # TODO: Set limit on maximum orders?
*/

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_left_edge = 0;
  PyObject *__pyx_v_right_edge = 0;
  PyObject *__pyx_v_periodicity = 0;
  PyObject *__pyx_v_file_hash = 0;
  PyObject *__pyx_v_nfiles = 0;
  PyObject *__pyx_v_index_order1 = 0;
  PyObject *__pyx_v_index_order2 = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_left_edge,&__pyx_mstate_global->__pyx_n_u_right_edge,&__pyx_mstate_global->__pyx_n_u_periodicity,&__pyx_mstate_global->__pyx_n_u_file_hash,&__pyx_mstate_global->__pyx_n_u_nfiles,&__pyx_mstate_global->__pyx_n_u_index_order1,&__pyx_mstate_global->__pyx_n_u_index_order2,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 449, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  7:
        values[6] = __Pyx_ArgRef_VARARGS(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 449, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_VARARGS(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 449, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 449, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 449, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 449, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 449, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 449, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__init__", 0) < 0) __PYX_ERR(0, 449, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 7; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, i); __PYX_ERR(0, 449, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 7)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 449, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 449, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 449, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 449, __pyx_L3_error)
      values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 449, __pyx_L3_error)
      values[5] = __Pyx_ArgRef_VARARGS(__pyx_args, 5);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 449, __pyx_L3_error)
      values[6] = __Pyx_ArgRef_VARARGS(__pyx_args, 6);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 449, __pyx_L3_error)
    }
    __pyx_v_left_edge = values[0];
    __pyx_v_right_edge = values[1];
    __pyx_v_periodicity = values[2];
    __pyx_v_file_hash = values[3];
    __pyx_v_nfiles = values[4];
    __pyx_v_index_order1 = values[5];
    __pyx_v_index_order2 = values[6];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 7, 7, __pyx_nargs); __PYX_ERR(0, 449, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap___init__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_left_edge, __pyx_v_right_edge, __pyx_v_periodicity, __pyx_v_file_hash, __pyx_v_nfiles, __pyx_v_index_order1, __pyx_v_index_order2);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap___init__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_left_edge, PyObject *__pyx_v_right_edge, PyObject *__pyx_v_periodicity, PyObject *__pyx_v_file_hash, PyObject *__pyx_v_nfiles, PyObject *__pyx_v_index_order1, PyObject *__pyx_v_index_order2) {
  int __pyx_v_i;
  PyObject *__pyx_v_hash_data = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_5numpy_int64_t __pyx_t_2;
  __pyx_t_5numpy_uint64_t __pyx_t_3;
  int __pyx_t_4;
  __pyx_t_5numpy_float64_t __pyx_t_5;
  __pyx_t_5numpy_uint8_t __pyx_t_6;
  __pyx_t_5numpy_int32_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  size_t __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_memviewslice __pyx_t_14 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "yt/geometry/particle_oct_container.pyx":453
 *         # TODO: Set limit on maximum orders?
 *         cdef int i
 *         self._cached_octrees = {}             # <<<<<<<<<<<<<<
 *         self._last_selector = None
 *         self._last_return_values = None
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_cached_octrees);
  __Pyx_DECREF(__pyx_v_self->_cached_octrees);
  __pyx_v_self->_cached_octrees = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":454
 *         cdef int i
 *         self._cached_octrees = {}
 *         self._last_selector = None             # <<<<<<<<<<<<<<
 *         self._last_return_values = None
 *         self._last_octree_subset = None
*/
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_last_selector);
  __Pyx_DECREF(__pyx_v_self->_last_selector);
  __pyx_v_self->_last_selector = Py_None;

  /* "yt/geometry/particle_oct_container.pyx":455
 *         self._cached_octrees = {}
 *         self._last_selector = None
 *         self._last_return_values = None             # <<<<<<<<<<<<<<
 *         self._last_octree_subset = None
 *         self._last_oct_handler = None
*/
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_last_return_values);
  __Pyx_DECREF(__pyx_v_self->_last_return_values);
  __pyx_v_self->_last_return_values = Py_None;

  /* "yt/geometry/particle_oct_container.pyx":456
 *         self._last_selector = None
 *         self._last_return_values = None
 *         self._last_octree_subset = None             # <<<<<<<<<<<<<<
 *         self._last_oct_handler = None
 *         self._prev_octree_subset = None
*/
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_last_octree_subset);
  __Pyx_DECREF(__pyx_v_self->_last_octree_subset);
  __pyx_v_self->_last_octree_subset = Py_None;

  /* "yt/geometry/particle_oct_container.pyx":457
 *         self._last_return_values = None
 *         self._last_octree_subset = None
 *         self._last_oct_handler = None             # <<<<<<<<<<<<<<
 *         self._prev_octree_subset = None
 *         self._prev_oct_handler = None
*/
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_last_oct_handler);
  __Pyx_DECREF(__pyx_v_self->_last_oct_handler);
  __pyx_v_self->_last_oct_handler = Py_None;

  /* "yt/geometry/particle_oct_container.pyx":458
 *         self._last_octree_subset = None
 *         self._last_oct_handler = None
 *         self._prev_octree_subset = None             # <<<<<<<<<<<<<<
 *         self._prev_oct_handler = None
 *         self.file_hash = file_hash
*/
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_prev_octree_subset);
  __Pyx_DECREF(__pyx_v_self->_prev_octree_subset);
  __pyx_v_self->_prev_octree_subset = Py_None;

  /* "yt/geometry/particle_oct_container.pyx":459
 *         self._last_oct_handler = None
 *         self._prev_octree_subset = None
 *         self._prev_oct_handler = None             # <<<<<<<<<<<<<<
 *         self.file_hash = file_hash
 *         self.nfiles = nfiles
*/
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_prev_oct_handler);
  __Pyx_DECREF(__pyx_v_self->_prev_oct_handler);
  __pyx_v_self->_prev_oct_handler = Py_None;

  /* "yt/geometry/particle_oct_container.pyx":460
 *         self._prev_octree_subset = None
 *         self._prev_oct_handler = None
 *         self.file_hash = file_hash             # <<<<<<<<<<<<<<
 *         self.nfiles = nfiles
 *         for i in range(3):
*/
  __pyx_t_2 = __Pyx_PyLong_As_npy_int64(__pyx_v_file_hash); if (unlikely((__pyx_t_2 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 460, __pyx_L1_error)
  __pyx_v_self->file_hash = __pyx_t_2;

  /* "yt/geometry/particle_oct_container.pyx":461
 *         self._prev_oct_handler = None
 *         self.file_hash = file_hash
 *         self.nfiles = nfiles             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             self.left_edge[i] = left_edge[i]
*/
  __pyx_t_3 = __Pyx_PyLong_As_npy_uint64(__pyx_v_nfiles); if (unlikely((__pyx_t_3 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 461, __pyx_L1_error)
  __pyx_v_self->nfiles = __pyx_t_3;

  /* "yt/geometry/particle_oct_container.pyx":462
 *         self.file_hash = file_hash
 *         self.nfiles = nfiles
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             self.left_edge[i] = left_edge[i]
 *             self.right_edge[i] = right_edge[i]
*/
  for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "yt/geometry/particle_oct_container.pyx":463
 *         self.nfiles = nfiles
 *         for i in range(3):
 *             self.left_edge[i] = left_edge[i]             # <<<<<<<<<<<<<<
 *             self.right_edge[i] = right_edge[i]
 *             self.periodicity[i] = <np.uint8_t>periodicity[i]
*/
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_left_edge, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 463, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_self->left_edge[__pyx_v_i]) = __pyx_t_5;

    /* "yt/geometry/particle_oct_container.pyx":464
 *         for i in range(3):
 *             self.left_edge[i] = left_edge[i]
 *             self.right_edge[i] = right_edge[i]             # <<<<<<<<<<<<<<
 *             self.periodicity[i] = <np.uint8_t>periodicity[i]
 *             self.dims[i] = (1<<index_order1)
*/
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_right_edge, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_self->right_edge[__pyx_v_i]) = __pyx_t_5;

    /* "yt/geometry/particle_oct_container.pyx":465
 *             self.left_edge[i] = left_edge[i]
 *             self.right_edge[i] = right_edge[i]
 *             self.periodicity[i] = <np.uint8_t>periodicity[i]             # <<<<<<<<<<<<<<
 *             self.dims[i] = (1<<index_order1)
 *             self.dds[i] = (right_edge[i] - left_edge[i])/self.dims[i]
*/
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_periodicity, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyLong_As_npy_uint8(__pyx_t_1); if (unlikely((__pyx_t_6 == ((npy_uint8)-1)) && PyErr_Occurred())) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_self->periodicity[__pyx_v_i]) = ((__pyx_t_5numpy_uint8_t)__pyx_t_6);

    /* "yt/geometry/particle_oct_container.pyx":466
 *             self.right_edge[i] = right_edge[i]
 *             self.periodicity[i] = <np.uint8_t>periodicity[i]
 *             self.dims[i] = (1<<index_order1)             # <<<<<<<<<<<<<<
 *             self.dds[i] = (right_edge[i] - left_edge[i])/self.dims[i]
 *             self.idds[i] = 1.0/self.dds[i]
*/
    __pyx_t_1 = PyNumber_Lshift(__pyx_mstate_global->__pyx_int_1, __pyx_v_index_order1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyLong_As_npy_int32(__pyx_t_1); if (unlikely((__pyx_t_7 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 466, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_self->dims[__pyx_v_i]) = __pyx_t_7;

    /* "yt/geometry/particle_oct_container.pyx":467
 *             self.periodicity[i] = <np.uint8_t>periodicity[i]
 *             self.dims[i] = (1<<index_order1)
 *             self.dds[i] = (right_edge[i] - left_edge[i])/self.dims[i]             # <<<<<<<<<<<<<<
 *             self.idds[i] = 1.0/self.dds[i]
 *             self.dds_mi1[i] = (right_edge[i] - left_edge[i]) / (1<<index_order1)
*/
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_right_edge, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_left_edge, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 1, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyNumber_Subtract(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyLong_From_npy_int32((__pyx_v_self->dims[__pyx_v_i])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_self->dds[__pyx_v_i]) = __pyx_t_5;

    /* "yt/geometry/particle_oct_container.pyx":468
 *             self.dims[i] = (1<<index_order1)
 *             self.dds[i] = (right_edge[i] - left_edge[i])/self.dims[i]
 *             self.idds[i] = 1.0/self.dds[i]             # <<<<<<<<<<<<<<
 *             self.dds_mi1[i] = (right_edge[i] - left_edge[i]) / (1<<index_order1)
 *         # We use 64-bit masks
*/
    if (unlikely((__pyx_v_self->dds[__pyx_v_i]) == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 468, __pyx_L1_error)
    }
    (__pyx_v_self->idds[__pyx_v_i]) = (1.0 / (__pyx_v_self->dds[__pyx_v_i]));

    /* "yt/geometry/particle_oct_container.pyx":469
 *             self.dds[i] = (right_edge[i] - left_edge[i])/self.dims[i]
 *             self.idds[i] = 1.0/self.dds[i]
 *             self.dds_mi1[i] = (right_edge[i] - left_edge[i]) / (1<<index_order1)             # <<<<<<<<<<<<<<
 *         # We use 64-bit masks
 *         self._used_mi2 = 0
*/
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_right_edge, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 1, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_left_edge, __pyx_v_i, int, 1, __Pyx_PyLong_From_int, 0, 1, 1, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyNumber_Subtract(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Lshift(__pyx_mstate_global->__pyx_int_1, __pyx_v_index_order1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __Pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_self->dds_mi1[__pyx_v_i]) = __pyx_t_5;
  }

  /* "yt/geometry/particle_oct_container.pyx":471
 *             self.dds_mi1[i] = (right_edge[i] - left_edge[i]) / (1<<index_order1)
 *         # We use 64-bit masks
 *         self._used_mi2 = 0             # <<<<<<<<<<<<<<
 *         self.index_order1 = index_order1
 *         self._update_mi2(index_order2)
*/
  __pyx_v_self->_used_mi2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":472
 *         # We use 64-bit masks
 *         self._used_mi2 = 0
 *         self.index_order1 = index_order1             # <<<<<<<<<<<<<<
 *         self._update_mi2(index_order2)
 *         # This will be an on/off flag for which morton index values are touched
*/
  __pyx_t_7 = __Pyx_PyLong_As_npy_int32(__pyx_v_index_order1); if (unlikely((__pyx_t_7 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 472, __pyx_L1_error)
  __pyx_v_self->index_order1 = __pyx_t_7;

  /* "yt/geometry/particle_oct_container.pyx":473
 *         self._used_mi2 = 0
 *         self.index_order1 = index_order1
 *         self._update_mi2(index_order2)             # <<<<<<<<<<<<<<
 *         # This will be an on/off flag for which morton index values are touched
 *         # by particles.
*/
  __pyx_t_3 = __Pyx_PyLong_As_npy_uint64(__pyx_v_index_order2); if (unlikely((__pyx_t_3 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 473, __pyx_L1_error)
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self->__pyx_vtab)->_update_mi2(__pyx_v_self, __pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 473, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":477
 *         # by particles.
 *         # This is the simple way, for now.
 *         self.masks = np.zeros((1 << (index_order1 * 3), nfiles), dtype="uint8")             # <<<<<<<<<<<<<<
 *         self.particle_counts = np.zeros(1 << (index_order1 * 3), dtype="uint64")
 *         self.bitmasks = FileBitmasks(self.nfiles)
*/
  __pyx_t_8 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyLong_MultiplyObjC(__pyx_v_index_order1, __pyx_mstate_global->__pyx_int_3, 3, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_11 = PyNumber_Lshift(__pyx_mstate_global->__pyx_int_1, __pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_11) != (0)) __PYX_ERR(0, 477, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_nfiles);
  __Pyx_GIVEREF(__pyx_v_nfiles);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_nfiles) != (0)) __PYX_ERR(0, 477, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_12 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_10);
    assert(__pyx_t_8);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_10);
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_10, __pyx__function);
    __pyx_t_12 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_8, __pyx_t_9};
    __pyx_t_11 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint8, __pyx_t_11, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 477, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_10, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_11);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->masks);
  __Pyx_DECREF(__pyx_v_self->masks);
  __pyx_v_self->masks = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":478
 *         # This is the simple way, for now.
 *         self.masks = np.zeros((1 << (index_order1 * 3), nfiles), dtype="uint8")
 *         self.particle_counts = np.zeros(1 << (index_order1 * 3), dtype="uint64")             # <<<<<<<<<<<<<<
 *         self.bitmasks = FileBitmasks(self.nfiles)
 *         self.collisions = BoolArrayCollection()
*/
  __pyx_t_10 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyLong_MultiplyObjC(__pyx_v_index_order1, __pyx_mstate_global->__pyx_int_3, 3, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_8 = PyNumber_Lshift(__pyx_mstate_global->__pyx_int_1, __pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_12 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
    assert(__pyx_t_10);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_9);
    __Pyx_INCREF(__pyx_t_10);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_9, __pyx__function);
    __pyx_t_12 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_10, __pyx_t_8};
    __pyx_t_11 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint64, __pyx_t_11, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 478, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_9, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_11);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->particle_counts);
  __Pyx_DECREF(__pyx_v_self->particle_counts);
  __pyx_v_self->particle_counts = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":479
 *         self.masks = np.zeros((1 << (index_order1 * 3), nfiles), dtype="uint8")
 *         self.particle_counts = np.zeros(1 << (index_order1 * 3), dtype="uint64")
 *         self.bitmasks = FileBitmasks(self.nfiles)             # <<<<<<<<<<<<<<
 *         self.collisions = BoolArrayCollection()
 *         hash_data = bytearray()
*/
  __pyx_t_9 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks);
  __pyx_t_11 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks); 
  __pyx_t_8 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->nfiles); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_12 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __Pyx_GIVEREF((PyObject *)__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->bitmasks);
  __Pyx_DECREF((PyObject *)__pyx_v_self->bitmasks);
  __pyx_v_self->bitmasks = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":480
 *         self.particle_counts = np.zeros(1 << (index_order1 * 3), dtype="uint64")
 *         self.bitmasks = FileBitmasks(self.nfiles)
 *         self.collisions = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         hash_data = bytearray()
 *         hash_data.extend(self.file_hash.to_bytes(8, "little", signed=True))
*/
  __pyx_t_11 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
  __pyx_t_8 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
  __pyx_t_12 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_12, (1-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __Pyx_GIVEREF((PyObject *)__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->collisions);
  __Pyx_DECREF((PyObject *)__pyx_v_self->collisions);
  __pyx_v_self->collisions = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":481
 *         self.bitmasks = FileBitmasks(self.nfiles)
 *         self.collisions = BoolArrayCollection()
 *         hash_data = bytearray()             # <<<<<<<<<<<<<<
 *         hash_data.extend(self.file_hash.to_bytes(8, "little", signed=True))
 *         hash_data.extend(np.array(self.left_edge).tobytes())
*/
  __pyx_t_8 = NULL;
  __Pyx_INCREF((PyObject *)(&PyByteArray_Type));
  __pyx_t_11 = ((PyObject *)(&PyByteArray_Type)); 
  __pyx_t_12 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_12, (1-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_hash_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":482
 *         self.collisions = BoolArrayCollection()
 *         hash_data = bytearray()
 *         hash_data.extend(self.file_hash.to_bytes(8, "little", signed=True))             # <<<<<<<<<<<<<<
 *         hash_data.extend(np.array(self.left_edge).tobytes())
 *         hash_data.extend(np.array(self.right_edge).tobytes())
*/
  __pyx_t_1 = __Pyx_PyLong_From_npy_int64(__pyx_v_self->file_hash); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_to_bytes); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_signed, Py_True) < 0) __PYX_ERR(0, 482, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_mstate_global->__pyx_tuple[2], __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_mstate_global->__pyx_umethod_PyByteArray_Type__extend, __pyx_v_hash_data, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":483
 *         hash_data = bytearray()
 *         hash_data.extend(self.file_hash.to_bytes(8, "little", signed=True))
 *         hash_data.extend(np.array(self.left_edge).tobytes())             # <<<<<<<<<<<<<<
 *         hash_data.extend(np.array(self.right_edge).tobytes())
 *         hash_data.extend(np.array(self.periodicity).tobytes())
*/
  __pyx_t_9 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_array); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_carray_to_py___pyx_t_5numpy_float64_t(__pyx_v_self->left_edge, 3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_13);
    assert(__pyx_t_9);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_13);
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_13, __pyx__function);
    __pyx_t_12 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_10};
    __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
  }
  __pyx_t_8 = __pyx_t_11;
  __Pyx_INCREF(__pyx_t_8);
  __pyx_t_12 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_tobytes, __pyx_callargs+__pyx_t_12, (1-__pyx_t_12) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_11 = __Pyx_CallUnboundCMethod1(&__pyx_mstate_global->__pyx_umethod_PyByteArray_Type__extend, __pyx_v_hash_data, __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "yt/geometry/particle_oct_container.pyx":484
 *         hash_data.extend(self.file_hash.to_bytes(8, "little", signed=True))
 *         hash_data.extend(np.array(self.left_edge).tobytes())
 *         hash_data.extend(np.array(self.right_edge).tobytes())             # <<<<<<<<<<<<<<
 *         hash_data.extend(np.array(self.periodicity).tobytes())
 *         hash_data.extend(self.nfiles.to_bytes(8, "little", signed=False))
*/
  __pyx_t_13 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_carray_to_py___pyx_t_5numpy_float64_t(__pyx_v_self->right_edge, 3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_9);
    assert(__pyx_t_13);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_9);
    __Pyx_INCREF(__pyx_t_13);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_9, __pyx__function);
    __pyx_t_12 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_t_10};
    __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
  }
  __pyx_t_1 = __pyx_t_8;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_12 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
    __pyx_t_11 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_tobytes, __pyx_callargs+__pyx_t_12, (1-__pyx_t_12) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
  }
  __pyx_t_8 = __Pyx_CallUnboundCMethod1(&__pyx_mstate_global->__pyx_umethod_PyByteArray_Type__extend, __pyx_v_hash_data, __pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "yt/geometry/particle_oct_container.pyx":485
 *         hash_data.extend(np.array(self.left_edge).tobytes())
 *         hash_data.extend(np.array(self.right_edge).tobytes())
 *         hash_data.extend(np.array(self.periodicity).tobytes())             # <<<<<<<<<<<<<<
 *         hash_data.extend(self.nfiles.to_bytes(8, "little", signed=False))
 *         hash_data.extend(self.index_order1.to_bytes(4, "little", signed=True))
*/
  __pyx_t_9 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_array); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_FromCString(__pyx_v_self->periodicity); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_13);
    assert(__pyx_t_9);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_13);
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_13, __pyx__function);
    __pyx_t_12 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_10};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_11 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_11);
  __pyx_t_12 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_11, NULL};
    __pyx_t_8 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_tobytes, __pyx_callargs+__pyx_t_12, (1-__pyx_t_12) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
  }
  __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_mstate_global->__pyx_umethod_PyByteArray_Type__extend, __pyx_v_hash_data, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":486
 *         hash_data.extend(np.array(self.right_edge).tobytes())
 *         hash_data.extend(np.array(self.periodicity).tobytes())
 *         hash_data.extend(self.nfiles.to_bytes(8, "little", signed=False))             # <<<<<<<<<<<<<<
 *         hash_data.extend(self.index_order1.to_bytes(4, "little", signed=True))
 *         hash_data.extend(self.index_order2.to_bytes(4, "little", signed=True))
*/
  __pyx_t_1 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->nfiles); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_to_bytes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_signed, Py_False) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_mstate_global->__pyx_tuple[2], __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_mstate_global->__pyx_umethod_PyByteArray_Type__extend, __pyx_v_hash_data, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":487
 *         hash_data.extend(np.array(self.periodicity).tobytes())
 *         hash_data.extend(self.nfiles.to_bytes(8, "little", signed=False))
 *         hash_data.extend(self.index_order1.to_bytes(4, "little", signed=True))             # <<<<<<<<<<<<<<
 *         hash_data.extend(self.index_order2.to_bytes(4, "little", signed=True))
 *         self.hash_value = fnv_hash(hash_data)
*/
  __pyx_t_1 = __Pyx_PyLong_From_npy_int32(__pyx_v_self->index_order1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_to_bytes); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_signed, Py_True) < 0) __PYX_ERR(0, 487, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_mstate_global->__pyx_tuple[3], __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_mstate_global->__pyx_umethod_PyByteArray_Type__extend, __pyx_v_hash_data, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":488
 *         hash_data.extend(self.nfiles.to_bytes(8, "little", signed=False))
 *         hash_data.extend(self.index_order1.to_bytes(4, "little", signed=True))
 *         hash_data.extend(self.index_order2.to_bytes(4, "little", signed=True))             # <<<<<<<<<<<<<<
 *         self.hash_value = fnv_hash(hash_data)
 * 
*/
  __pyx_t_1 = __Pyx_PyLong_From_npy_int32(__pyx_v_self->index_order2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_to_bytes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_signed, Py_True) < 0) __PYX_ERR(0, 488, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_mstate_global->__pyx_tuple[3], __pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CallUnboundCMethod1(&__pyx_mstate_global->__pyx_umethod_PyByteArray_Type__extend, __pyx_v_hash_data, __pyx_t_11); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":489
 *         hash_data.extend(self.index_order1.to_bytes(4, "little", signed=True))
 *         hash_data.extend(self.index_order2.to_bytes(4, "little", signed=True))
 *         self.hash_value = fnv_hash(hash_data)             # <<<<<<<<<<<<<<
 * 
 *     def _bitmask_logicaland(self, ifile, bcoll, out):
*/
  __pyx_t_14 = __Pyx_PyObject_to_MemoryviewSlice_ds_unsigned_char(__pyx_v_hash_data, PyBUF_WRITABLE); if (unlikely(!__pyx_t_14.memview)) __PYX_ERR(0, 489, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_2yt_9utilities_3lib_8fnv_hash_c_fnv_hash(__pyx_t_14); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 489, __pyx_L1_error)
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_14, 1);
  __pyx_t_14.memview = NULL; __pyx_t_14.data = NULL;
  __pyx_v_self->hash_value = __pyx_t_2;

  /* "yt/geometry/particle_oct_container.pyx":449
 *     cdef public int _used_mi2
 * 
 *     def __init__(self, left_edge, right_edge, periodicity, file_hash, nfiles,             # <<<<<<<<<<<<<<
 *                  index_order1, index_order2):
 *         # TODO: Set limit on maximum orders?
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_14, 1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_hash_data);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":491
 *         self.hash_value = fnv_hash(hash_data)
 * 
 *     def _bitmask_logicaland(self, ifile, bcoll, out):             # <<<<<<<<<<<<<<
 *         self.bitmasks._logicaland(ifile, bcoll, out)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_3_bitmask_logicaland(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_3_bitmask_logicaland = {"_bitmask_logicaland", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_3_bitmask_logicaland, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_3_bitmask_logicaland(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ifile = 0;
  PyObject *__pyx_v_bcoll = 0;
  PyObject *__pyx_v_out = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bitmask_logicaland (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_ifile,&__pyx_mstate_global->__pyx_n_u_bcoll,&__pyx_mstate_global->__pyx_n_u_out,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 491, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 491, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 491, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 491, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_bitmask_logicaland", 0) < 0) __PYX_ERR(0, 491, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_bitmask_logicaland", 1, 3, 3, i); __PYX_ERR(0, 491, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 491, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 491, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 491, __pyx_L3_error)
    }
    __pyx_v_ifile = values[0];
    __pyx_v_bcoll = values[1];
    __pyx_v_out = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_bitmask_logicaland", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 491, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._bitmask_logicaland", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_2_bitmask_logicaland(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_ifile, __pyx_v_bcoll, __pyx_v_out);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_2_bitmask_logicaland(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_ifile, PyObject *__pyx_v_bcoll, PyObject *__pyx_v_out) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bitmask_logicaland", 0);

  /* "yt/geometry/particle_oct_container.pyx":492
 * 
 *     def _bitmask_logicaland(self, ifile, bcoll, out):
 *         self.bitmasks._logicaland(ifile, bcoll, out)             # <<<<<<<<<<<<<<
 * 
 *     def _bitmask_intersects(self, ifile, bcoll):
*/
  __pyx_t_1 = __Pyx_PyLong_As_npy_uint32(__pyx_v_ifile); if (unlikely((__pyx_t_1 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 492, __pyx_L1_error)
  if (!(likely(((__pyx_v_bcoll) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_bcoll, __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection))))) __PYX_ERR(0, 492, __pyx_L1_error)
  if (!(likely(((__pyx_v_out) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_out, __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection))))) __PYX_ERR(0, 492, __pyx_L1_error)
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_logicaland(__pyx_v_self->bitmasks, __pyx_t_1, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_v_bcoll), ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_v_out)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 492, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":491
 *         self.hash_value = fnv_hash(hash_data)
 * 
 *     def _bitmask_logicaland(self, ifile, bcoll, out):             # <<<<<<<<<<<<<<
 *         self.bitmasks._logicaland(ifile, bcoll, out)
 * 
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._bitmask_logicaland", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":494
 *         self.bitmasks._logicaland(ifile, bcoll, out)
 * 
 *     def _bitmask_intersects(self, ifile, bcoll):             # <<<<<<<<<<<<<<
 *         return self.bitmasks._intersects(ifile, bcoll)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5_bitmask_intersects(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5_bitmask_intersects = {"_bitmask_intersects", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5_bitmask_intersects, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5_bitmask_intersects(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ifile = 0;
  PyObject *__pyx_v_bcoll = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_bitmask_intersects (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_ifile,&__pyx_mstate_global->__pyx_n_u_bcoll,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 494, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 494, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 494, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_bitmask_intersects", 0) < 0) __PYX_ERR(0, 494, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_bitmask_intersects", 1, 2, 2, i); __PYX_ERR(0, 494, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 494, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 494, __pyx_L3_error)
    }
    __pyx_v_ifile = values[0];
    __pyx_v_bcoll = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_bitmask_intersects", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 494, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._bitmask_intersects", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_4_bitmask_intersects(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_ifile, __pyx_v_bcoll);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_4_bitmask_intersects(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_ifile, PyObject *__pyx_v_bcoll) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_bitmask_intersects", 0);

  /* "yt/geometry/particle_oct_container.pyx":495
 * 
 *     def _bitmask_intersects(self, ifile, bcoll):
 *         return self.bitmasks._intersects(ifile, bcoll)             # <<<<<<<<<<<<<<
 * 
 *     def update_mi2(self, np.float64_t characteristic_size,
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_As_npy_uint32(__pyx_v_ifile); if (unlikely((__pyx_t_1 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 495, __pyx_L1_error)
  if (!(likely(((__pyx_v_bcoll) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_bcoll, __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection))))) __PYX_ERR(0, 495, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_intersects(__pyx_v_self->bitmasks, __pyx_t_1, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_v_bcoll)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 495, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":494
 *         self.bitmasks._logicaland(ifile, bcoll, out)
 * 
 *     def _bitmask_intersects(self, ifile, bcoll):             # <<<<<<<<<<<<<<
 *         return self.bitmasks._intersects(ifile, bcoll)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._bitmask_intersects", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":497
 *         return self.bitmasks._intersects(ifile, bcoll)
 * 
 *     def update_mi2(self, np.float64_t characteristic_size,             # <<<<<<<<<<<<<<
 *                    np.uint64_t max_index_order2 = 6):
 *         """
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_7update_mi2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6update_mi2, "\n        mi2 is the *refined* morton index order; mi2 is thus the definition of\n        the size of the refined index objects we stick inside any collisions at\n        the coarse level.  This takes a characteristic size and attempts to\n        compute the mi2 such that the cell is roughly equivalent to the\n        characteristic size.  It will return whether or not it was able to\n        update; if the mi2 has already been used, it does not update.\n        There are cases where the maximum index_order2 that it would compute\n        would be extremely fine, which can do really bad things to memory.  So\n        we allow the setting of a maximum value, which it won't exceed.\n        ");
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_7update_mi2 = {"update_mi2", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_7update_mi2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6update_mi2};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_7update_mi2(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_5numpy_float64_t __pyx_v_characteristic_size;
  __pyx_t_5numpy_uint64_t __pyx_v_max_index_order2;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_mi2 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_characteristic_size,&__pyx_mstate_global->__pyx_n_u_max_index_order2,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 497, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 497, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 497, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "update_mi2", 0) < 0) __PYX_ERR(0, 497, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("update_mi2", 0, 1, 2, i); __PYX_ERR(0, 497, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 497, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 497, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_characteristic_size = __Pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_characteristic_size == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 497, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_max_index_order2 = __Pyx_PyLong_As_npy_uint64(values[1]); if (unlikely((__pyx_v_max_index_order2 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 498, __pyx_L3_error)
    } else {
      __pyx_v_max_index_order2 = ((__pyx_t_5numpy_uint64_t)6);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_mi2", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 497, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.update_mi2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6update_mi2(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_characteristic_size, __pyx_v_max_index_order2);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6update_mi2(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_float64_t __pyx_v_characteristic_size, __pyx_t_5numpy_uint64_t __pyx_v_max_index_order2) {
  __pyx_t_5numpy_uint64_t __pyx_v_index_order2;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  long __pyx_t_3;
  __pyx_t_5numpy_uint64_t __pyx_t_4;
  __pyx_t_5numpy_uint64_t __pyx_t_5;
  __pyx_t_5numpy_uint64_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("update_mi2", 0);

  /* "yt/geometry/particle_oct_container.pyx":510
 *         we allow the setting of a maximum value, which it won't exceed.
 *         """
 *         if self._used_mi2 > 0:             # <<<<<<<<<<<<<<
 *             return self.index_order2
 *         cdef np.uint64_t index_order2 = 2
*/
  __pyx_t_1 = (__pyx_v_self->_used_mi2 > 0);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_oct_container.pyx":511
 *         """
 *         if self._used_mi2 > 0:
 *             return self.index_order2             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t index_order2 = 2
 *         for i in range(3):
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_npy_int32(__pyx_v_self->index_order2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yt/geometry/particle_oct_container.pyx":510
 *         we allow the setting of a maximum value, which it won't exceed.
 *         """
 *         if self._used_mi2 > 0:             # <<<<<<<<<<<<<<
 *             return self.index_order2
 *         cdef np.uint64_t index_order2 = 2
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":512
 *         if self._used_mi2 > 0:
 *             return self.index_order2
 *         cdef np.uint64_t index_order2 = 2             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             # Note we're casting to signed here, to avoid negative issues.
*/
  __pyx_v_index_order2 = 2;

  /* "yt/geometry/particle_oct_container.pyx":513
 *             return self.index_order2
 *         cdef np.uint64_t index_order2 = 2
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             # Note we're casting to signed here, to avoid negative issues.
 *             if self.dds_mi1[i] < characteristic_size: continue
*/
  for (__pyx_t_3 = 0; __pyx_t_3 < 3; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":515
 *         for i in range(3):
 *             # Note we're casting to signed here, to avoid negative issues.
 *             if self.dds_mi1[i] < characteristic_size: continue             # <<<<<<<<<<<<<<
 *             index_order2 = max(index_order2, <np.uint64_t> ceil(log2(self.dds_mi1[i] / characteristic_size)))
 *         index_order2 = i64min(max_index_order2, index_order2)
*/
    __pyx_t_1 = ((__pyx_v_self->dds_mi1[__pyx_v_i]) < __pyx_v_characteristic_size);
    if (__pyx_t_1) {
      goto __pyx_L4_continue;
    }

    /* "yt/geometry/particle_oct_container.pyx":516
 *             # Note we're casting to signed here, to avoid negative issues.
 *             if self.dds_mi1[i] < characteristic_size: continue
 *             index_order2 = max(index_order2, <np.uint64_t> ceil(log2(self.dds_mi1[i] / characteristic_size)))             # <<<<<<<<<<<<<<
 *         index_order2 = i64min(max_index_order2, index_order2)
 *         self._update_mi2(index_order2)
*/
    if (unlikely(__pyx_v_characteristic_size == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 516, __pyx_L1_error)
    }
    __pyx_t_4 = ((__pyx_t_5numpy_uint64_t)ceil(log2(((__pyx_v_self->dds_mi1[__pyx_v_i]) / __pyx_v_characteristic_size))));
    __pyx_t_5 = __pyx_v_index_order2;
    __pyx_t_1 = (__pyx_t_4 > __pyx_t_5);
    if (__pyx_t_1) {
      __pyx_t_6 = __pyx_t_4;
    } else {
      __pyx_t_6 = __pyx_t_5;
    }
    __pyx_v_index_order2 = __pyx_t_6;
    __pyx_L4_continue:;
  }

  /* "yt/geometry/particle_oct_container.pyx":517
 *             if self.dds_mi1[i] < characteristic_size: continue
 *             index_order2 = max(index_order2, <np.uint64_t> ceil(log2(self.dds_mi1[i] / characteristic_size)))
 *         index_order2 = i64min(max_index_order2, index_order2)             # <<<<<<<<<<<<<<
 *         self._update_mi2(index_order2)
 *         return self.index_order2
*/
  __pyx_v_index_order2 = __pyx_f_2yt_9utilities_3lib_8fp_utils_i64min(__pyx_v_max_index_order2, __pyx_v_index_order2);

  /* "yt/geometry/particle_oct_container.pyx":518
 *             index_order2 = max(index_order2, <np.uint64_t> ceil(log2(self.dds_mi1[i] / characteristic_size)))
 *         index_order2 = i64min(max_index_order2, index_order2)
 *         self._update_mi2(index_order2)             # <<<<<<<<<<<<<<
 *         return self.index_order2
 * 
*/
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self->__pyx_vtab)->_update_mi2(__pyx_v_self, __pyx_v_index_order2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":519
 *         index_order2 = i64min(max_index_order2, index_order2)
 *         self._update_mi2(index_order2)
 *         return self.index_order2             # <<<<<<<<<<<<<<
 * 
 *     cdef void _update_mi2(self, np.uint64_t index_order2):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyLong_From_npy_int32(__pyx_v_self->index_order2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":497
 *         return self.bitmasks._intersects(ifile, bcoll)
 * 
 *     def update_mi2(self, np.float64_t characteristic_size,             # <<<<<<<<<<<<<<
 *                    np.uint64_t max_index_order2 = 6):
 *         """
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.update_mi2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":521
 *         return self.index_order2
 * 
 *     cdef void _update_mi2(self, np.uint64_t index_order2):             # <<<<<<<<<<<<<<
 *         self.index_order2 = index_order2
 *         mi2_max = (1 << self.index_order2) - 1
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__update_mi2(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_index_order2) {
  long __pyx_v_mi2_max;
  long __pyx_v_i;
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  long __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":522
 * 
 *     cdef void _update_mi2(self, np.uint64_t index_order2):
 *         self.index_order2 = index_order2             # <<<<<<<<<<<<<<
 *         mi2_max = (1 << self.index_order2) - 1
 *         self.directional_max2[0] = encode_morton_64bit(mi2_max, 0, 0)
*/
  __pyx_v_self->index_order2 = __pyx_v_index_order2;

  /* "yt/geometry/particle_oct_container.pyx":523
 *     cdef void _update_mi2(self, np.uint64_t index_order2):
 *         self.index_order2 = index_order2
 *         mi2_max = (1 << self.index_order2) - 1             # <<<<<<<<<<<<<<
 *         self.directional_max2[0] = encode_morton_64bit(mi2_max, 0, 0)
 *         self.directional_max2[1] = encode_morton_64bit(0, mi2_max, 0)
*/
  __pyx_v_mi2_max = ((1 << __pyx_v_self->index_order2) - 1);

  /* "yt/geometry/particle_oct_container.pyx":524
 *         self.index_order2 = index_order2
 *         mi2_max = (1 << self.index_order2) - 1
 *         self.directional_max2[0] = encode_morton_64bit(mi2_max, 0, 0)             # <<<<<<<<<<<<<<
 *         self.directional_max2[1] = encode_morton_64bit(0, mi2_max, 0)
 *         self.directional_max2[2] = encode_morton_64bit(0, 0, mi2_max)
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_v_mi2_max, 0, 0); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 524, __pyx_L1_error)
  (__pyx_v_self->directional_max2[0]) = __pyx_t_1;

  /* "yt/geometry/particle_oct_container.pyx":525
 *         mi2_max = (1 << self.index_order2) - 1
 *         self.directional_max2[0] = encode_morton_64bit(mi2_max, 0, 0)
 *         self.directional_max2[1] = encode_morton_64bit(0, mi2_max, 0)             # <<<<<<<<<<<<<<
 *         self.directional_max2[2] = encode_morton_64bit(0, 0, mi2_max)
 *         for i in range(3):
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(0, __pyx_v_mi2_max, 0); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 525, __pyx_L1_error)
  (__pyx_v_self->directional_max2[1]) = __pyx_t_1;

  /* "yt/geometry/particle_oct_container.pyx":526
 *         self.directional_max2[0] = encode_morton_64bit(mi2_max, 0, 0)
 *         self.directional_max2[1] = encode_morton_64bit(0, mi2_max, 0)
 *         self.directional_max2[2] = encode_morton_64bit(0, 0, mi2_max)             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             self.dds_mi2[i] = self.dds_mi1[i] / (1<<index_order2)
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(0, 0, __pyx_v_mi2_max); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 526, __pyx_L1_error)
  (__pyx_v_self->directional_max2[2]) = __pyx_t_1;

  /* "yt/geometry/particle_oct_container.pyx":527
 *         self.directional_max2[1] = encode_morton_64bit(0, mi2_max, 0)
 *         self.directional_max2[2] = encode_morton_64bit(0, 0, mi2_max)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             self.dds_mi2[i] = self.dds_mi1[i] / (1<<index_order2)
 * 
*/
  for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "yt/geometry/particle_oct_container.pyx":528
 *         self.directional_max2[2] = encode_morton_64bit(0, 0, mi2_max)
 *         for i in range(3):
 *             self.dds_mi2[i] = self.dds_mi1[i] / (1<<index_order2)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
    __pyx_t_1 = (1 << __pyx_v_index_order2);
    if (unlikely(__pyx_t_1 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 528, __pyx_L1_error)
    }
    (__pyx_v_self->dds_mi2[__pyx_v_i]) = ((__pyx_v_self->dds_mi1[__pyx_v_i]) / __pyx_t_1);
  }

  /* "yt/geometry/particle_oct_container.pyx":521
 *         return self.index_order2
 * 
 *     cdef void _update_mi2(self, np.uint64_t index_order2):             # <<<<<<<<<<<<<<
 *         self.index_order2 = index_order2
 *         mi2_max = (1 << self.index_order2) - 1
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._update_mi2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":530
 *             self.dds_mi2[i] = self.dds_mi1[i] / (1<<index_order2)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_coarse_index_data_file(PyObject *__pyx_v_signatures, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_coarse_index_data_file = {"_coarse_index_data_file", (PyCFunction)(void(*)(void))(PyCFunctionWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_coarse_index_data_file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_coarse_index_data_file(PyObject *__pyx_v_signatures, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED PyObject *__pyx_v_defaults = 0;
  PyObject *__pyx_v__fused_sigindex_ref = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_fused_cpdef (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_args,&__pyx_mstate_global->__pyx_n_u_kwargs,&__pyx_mstate_global->__pyx_n_u_defaults,&__pyx_mstate_global->__pyx_n_u_fused_sigindex_ref,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 530, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__pyx_fused_cpdef", 0) < 0) __PYX_ERR(0, 530, __pyx_L3_error)
      if (!values[3]) values[3] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k__14);
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 0, 3, 4, i); __PYX_ERR(0, 530, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 530, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 530, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 530, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[3]) values[3] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k__14);
    }
    __pyx_v_args = values[0];
    __pyx_v_kwargs = values[1];
    __pyx_v_defaults = values[2];
    __pyx_v__fused_sigindex_ref = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 530, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8_coarse_index_data_file(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_signatures), __pyx_v_args, __pyx_v_kwargs, __pyx_v_defaults, __pyx_v__fused_sigindex_ref);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8_coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults, PyObject *__pyx_v__fused_sigindex_ref) {
  PyObject *__pyx_v_search_list = 0;
  PyObject *__pyx_v_sigindex_node = 0;
  PyObject *__pyx_v_dest_sig = NULL;
  PyTypeObject *__pyx_v_ndarray = 0;
  PyObject *__pyx_v_arg_as_memoryview = 0;
  __Pyx_memviewslice __pyx_v_memslice;
  Py_ssize_t __pyx_v_itemsize;
  CYTHON_UNUSED int __pyx_v_dtype_signed;
  Py_UCS4 __pyx_v_kind;
  PyObject *__pyx_v_arg = NULL;
  PyObject *__pyx_v_dtype = NULL;
  PyObject *__pyx_v_arg_base = NULL;
  PyObject *__pyx_v_fused_sigindex = NULL;
  PyObject *__pyx_v_sig = NULL;
  PyObject *__pyx_v_sig_series = NULL;
  PyObject *__pyx_v_last_type = NULL;
  PyObject *__pyx_v_sig_type = NULL;
  PyObject *__pyx_v_sigindex_matches = NULL;
  PyObject *__pyx_v_sigindex_candidates = NULL;
  PyObject *__pyx_v_dst_type = NULL;
  PyObject *__pyx_v_found_matches = NULL;
  PyObject *__pyx_v_found_candidates = NULL;
  PyObject *__pyx_v_sn = NULL;
  PyObject *__pyx_v_type_match = NULL;
  PyObject *__pyx_v_candidates = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10[4];
  PyObject *__pyx_t_11 = NULL;
  size_t __pyx_t_12;
  long __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  __Pyx_memviewslice __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  int __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  int __pyx_t_22;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_coarse_index_data_file", 0);
  __Pyx_INCREF(__pyx_v_kwargs);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, Py_None) != (0)) __PYX_ERR(0, 530, __pyx_L1_error);
  __pyx_v_dest_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
  __pyx_t_4 = (!__pyx_t_3);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_kwargs, Py_None);
  }
  __pyx_t_1 = ((PyObject *)__Pyx_ImportNumPyArrayTypeIfAvailable()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ndarray = ((PyTypeObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_itemsize = -1L;
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 530, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 530, __pyx_L1_error)
  __pyx_t_2 = (1 < __pyx_t_5);
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 530, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyTuple_GET_ITEM(((PyObject*)__pyx_v_args), 1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  __pyx_t_4 = (__pyx_v_kwargs != Py_None);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 530, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_mstate_global->__pyx_n_u_pos, ((PyObject*)__pyx_v_kwargs), Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L7_bool_binop_done:;
  if (likely(__pyx_t_2)) {
    if (unlikely(__pyx_v_kwargs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 530, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_kwargs), __pyx_mstate_global->__pyx_n_u_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  /*else*/ {
    __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_builtin_TypeError);
    __pyx_t_7 = __pyx_builtin_TypeError; 
    __pyx_t_8 = __Pyx_PyUnicode_From_long(4, 0, ' ', 'd'); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 530, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 530, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_5, 0, ' ', 'd'); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10[0] = __pyx_mstate_global->__pyx_kp_u_Expected_at_least;
    __pyx_t_10[1] = __pyx_t_8;
    __pyx_t_10[2] = __pyx_mstate_global->__pyx_kp_u_arguments_got;
    __pyx_t_10[3] = __pyx_t_9;
    __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_10, 4, 18 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8) + 16 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9), 127);
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_12 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_11};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 530, __pyx_L1_error)
  }
  __pyx_L6:;
  while (1) {
    __pyx_t_2 = (__pyx_v_ndarray != ((PyTypeObject*)Py_None));
    if (__pyx_t_2) {
      __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_v_ndarray); 
      if (__pyx_t_2) {
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_dtype = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L12;
      }
      __pyx_t_2 = __pyx_memoryview_check(__pyx_v_arg); 
      if (__pyx_t_2) {
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_mstate_global->__pyx_n_u_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_arg_base = __pyx_t_1;
        __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg_base, __pyx_v_ndarray); 
        if (__pyx_t_2) {
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg_base, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_v_dtype = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L13;
        }
        /*else*/ {
          __Pyx_INCREF(Py_None);
          __pyx_v_dtype = Py_None;
        }
        __pyx_L13:;
        goto __pyx_L12;
      }
      /*else*/ {
        __Pyx_INCREF(Py_None);
        __pyx_v_dtype = Py_None;
      }
      __pyx_L12:;
      __pyx_v_itemsize = -1L;
      __pyx_t_2 = (__pyx_v_dtype != Py_None);
      if (__pyx_t_2) {
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_mstate_global->__pyx_n_u_itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_itemsize = __pyx_t_5;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_mstate_global->__pyx_n_u_kind); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = __Pyx_PyObject_Ord(__pyx_t_1); if (unlikely(__pyx_t_13 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_kind = __pyx_t_13;
        __pyx_v_dtype_signed = (__pyx_v_kind == 0x69);
        switch (__pyx_v_kind) {
          case 0x69:
          case 0x75:
          break;
          case 0x66:
          __pyx_t_4 = ((sizeof(float)) == __pyx_v_itemsize);
          if (__pyx_t_4) {
          } else {
            __pyx_t_2 = __pyx_t_4;
            goto __pyx_L16_bool_binop_done;
          }
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_mstate_global->__pyx_n_u_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_4 = (((Py_ssize_t)__pyx_t_5) == 2);
          __pyx_t_2 = __pyx_t_4;
          __pyx_L16_bool_binop_done:;
          if (__pyx_t_2) {
            if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_mstate_global->__pyx_n_u_float, long, 1, __Pyx_PyLong_From_long, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
            goto __pyx_L10_break;
          }
          __pyx_t_4 = ((sizeof(double)) == __pyx_v_itemsize);
          if (__pyx_t_4) {
          } else {
            __pyx_t_2 = __pyx_t_4;
            goto __pyx_L19_bool_binop_done;
          }
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_mstate_global->__pyx_n_u_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_4 = (((Py_ssize_t)__pyx_t_5) == 2);
          __pyx_t_2 = __pyx_t_4;
          __pyx_L19_bool_binop_done:;
          if (__pyx_t_2) {
            if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_mstate_global->__pyx_n_u_double, long, 1, __Pyx_PyLong_From_long, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
            goto __pyx_L10_break;
          }
          break;
          case 99:
          break;
          default: break;
        }
      }
    }
    __pyx_t_2 = (__pyx_v_arg == Py_None);
    if (__pyx_t_2) {
      if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_mstate_global->__pyx_n_u_float, long, 1, __Pyx_PyLong_From_long, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
      goto __pyx_L10_break;
    }
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      /*try:*/ {
        __pyx_t_1 = PyMemoryView_FromObject(__pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_arg_as_memoryview = ((PyObject*)__pyx_t_1);
        __pyx_t_1 = 0;
      }
      /*else:*/ {
        __pyx_t_4 = (__pyx_v_itemsize == -1L);
        if (!__pyx_t_4) {
          goto __pyx_L33_next_or;
        } else {
        }
        __pyx_t_5 = __Pyx_PyMemoryView_Get_itemsize(__pyx_v_arg_as_memoryview); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 530, __pyx_L24_except_error)
        __pyx_t_4 = (__pyx_t_5 == (sizeof(float)));
        if (!__pyx_t_4) {
        } else {
          goto __pyx_L32_next_and;
        }
        __pyx_L33_next_or:;
        __pyx_t_4 = (__pyx_v_itemsize == (sizeof(float)));
        if (__pyx_t_4) {
        } else {
          __pyx_t_2 = __pyx_t_4;
          goto __pyx_L31_bool_binop_done;
        }
        __pyx_L32_next_and:;
        __pyx_t_17 = __Pyx_PyMemoryView_Get_ndim(__pyx_v_arg_as_memoryview); if (unlikely(__pyx_t_17 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 530, __pyx_L24_except_error)
        __pyx_t_4 = (__pyx_t_17 == 2);
        __pyx_t_2 = __pyx_t_4;
        __pyx_L31_bool_binop_done:;
        if (__pyx_t_2) {
          __pyx_t_18 = __Pyx_PyObject_to_MemoryviewSlice_dsds_float(__pyx_v_arg_as_memoryview, 0); 
          __pyx_v_memslice = __pyx_t_18;
          __pyx_t_2 = (__pyx_v_memslice.memview != 0);
          if (__pyx_t_2) {
            __PYX_XCLEAR_MEMVIEW((&__pyx_v_memslice), 1); 
            if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_mstate_global->__pyx_n_u_float, long, 1, __Pyx_PyLong_From_long, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 530, __pyx_L24_except_error)
            goto __pyx_L27_try_break;
          }
          /*else*/ {
            PyErr_Clear(); 
          }
        }
        __pyx_t_4 = (__pyx_v_itemsize == -1L);
        if (!__pyx_t_4) {
          goto __pyx_L39_next_or;
        } else {
        }
        __pyx_t_5 = __Pyx_PyMemoryView_Get_itemsize(__pyx_v_arg_as_memoryview); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 530, __pyx_L24_except_error)
        __pyx_t_4 = (__pyx_t_5 == (sizeof(double)));
        if (!__pyx_t_4) {
        } else {
          goto __pyx_L38_next_and;
        }
        __pyx_L39_next_or:;
        __pyx_t_4 = (__pyx_v_itemsize == (sizeof(double)));
        if (__pyx_t_4) {
        } else {
          __pyx_t_2 = __pyx_t_4;
          goto __pyx_L37_bool_binop_done;
        }
        __pyx_L38_next_and:;
        __pyx_t_17 = __Pyx_PyMemoryView_Get_ndim(__pyx_v_arg_as_memoryview); if (unlikely(__pyx_t_17 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 530, __pyx_L24_except_error)
        __pyx_t_4 = (__pyx_t_17 == 2);
        __pyx_t_2 = __pyx_t_4;
        __pyx_L37_bool_binop_done:;
        if (__pyx_t_2) {
          __pyx_t_18 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_v_arg_as_memoryview, 0); 
          __pyx_v_memslice = __pyx_t_18;
          __pyx_t_2 = (__pyx_v_memslice.memview != 0);
          if (__pyx_t_2) {
            __PYX_XCLEAR_MEMVIEW((&__pyx_v_memslice), 1); 
            if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_mstate_global->__pyx_n_u_double, long, 1, __Pyx_PyLong_From_long, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 530, __pyx_L24_except_error)
            goto __pyx_L27_try_break;
          }
          /*else*/ {
            PyErr_Clear(); 
          }
        }
      }
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      goto __pyx_L29_try_end;
      __pyx_L22_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_17 = __Pyx_PyErr_ExceptionMatches2(__pyx_builtin_ValueError, __pyx_builtin_TypeError);
      if (__pyx_t_17) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L23_exception_handled;
      }
      goto __pyx_L24_except_error;
      __pyx_L24_except_error:;
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      goto __pyx_L1_error;
      __pyx_L27_try_break:;
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      goto __pyx_L10_break;
      __pyx_L23_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      __pyx_L29_try_end:;
    }
    if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, Py_None, long, 1, __Pyx_PyLong_From_long, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
    goto __pyx_L10_break;
  }
  __pyx_L10_break:;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v__fused_sigindex_ref, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fused_sigindex = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_2 = (__pyx_v_fused_sigindex == ((PyObject*)Py_None));
  if (__pyx_t_2) {
    __pyx_t_7 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF_SET(__pyx_v_fused_sigindex, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;
    __pyx_t_5 = 0;
    if (unlikely(((PyObject *)__pyx_v_signatures) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 530, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_dict_iterator(((PyObject*)__pyx_v_signatures), 1, ((PyObject *)NULL), (&__pyx_t_19), (&__pyx_t_17)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_7);
    __pyx_t_7 = __pyx_t_1;
    __pyx_t_1 = 0;
    while (1) {
      __pyx_t_20 = __Pyx_dict_iter_next(__pyx_t_7, __pyx_t_19, &__pyx_t_5, &__pyx_t_1, NULL, NULL, __pyx_t_17);
      if (unlikely(__pyx_t_20 == 0)) break;
      if (unlikely(__pyx_t_20 == -1)) __PYX_ERR(0, 530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_sig, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_INCREF(__pyx_v_fused_sigindex);
      __Pyx_XDECREF_SET(__pyx_v_sigindex_node, __pyx_v_fused_sigindex);
      __pyx_t_9 = __pyx_v_sig;
      __Pyx_INCREF(__pyx_t_9);
      __pyx_t_12 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u__15};
        __pyx_t_6 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_strip, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
      }
      __pyx_t_11 = __pyx_t_6;
      __Pyx_INCREF(__pyx_t_11);
      __pyx_t_12 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u__16};
        __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_split, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __pyx_t_6 = __Pyx_PySequence_ListKeepNew(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_21 = __Pyx_PyList_GET_SIZE(__pyx_t_6);
      if (unlikely(__pyx_t_21 < 1)) {
        __Pyx_RaiseNeedMoreValuesError(0+__pyx_t_21); __PYX_ERR(0, 530, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_11 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_21-1); 
      ((PyVarObject*)__pyx_t_6)->ob_size--;
      #else
      __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_21-1); 
      #endif
      __Pyx_GOTREF(__pyx_t_11);
      #if !CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PySequence_GetSlice(__pyx_t_6, 0, __pyx_t_21-1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6);
      __pyx_t_6 = __pyx_t_9; __pyx_t_9 = NULL;
      #else
      CYTHON_UNUSED_VAR(__pyx_t_9);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_sig_series, ((PyObject*)__pyx_t_6));
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_last_type, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_1 = __pyx_v_sig_series; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_21 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
          #endif
          if (__pyx_t_21 >= __pyx_temp) break;
        }
        __pyx_t_11 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_21);
        ++__pyx_t_21;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_XDECREF_SET(__pyx_v_sig_type, __pyx_t_11);
        __pyx_t_11 = 0;
        if (unlikely(__pyx_v_sigindex_node == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 530, __pyx_L1_error)
        }
        __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_sig_type, __pyx_v_sigindex_node, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
        if (__pyx_t_2) {
          __pyx_t_11 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (unlikely(__pyx_v_sigindex_node == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 530, __pyx_L1_error)
          }
          if (unlikely((PyDict_SetItem(__pyx_v_sigindex_node, __pyx_v_sig_type, __pyx_t_11) < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_DECREF_SET(__pyx_v_sigindex_node, __pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L49;
        }
        /*else*/ {
          if (unlikely(__pyx_v_sigindex_node == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 530, __pyx_L1_error)
          }
          __pyx_t_11 = __Pyx_PyDict_GetItem(__pyx_v_sigindex_node, __pyx_v_sig_type); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_6 = __pyx_t_11;
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF_SET(__pyx_v_sigindex_node, ((PyObject*)__pyx_t_6));
          __pyx_t_6 = 0;
        }
        __pyx_L49:;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(__pyx_v_sigindex_node == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 530, __pyx_L1_error)
      }
      if (unlikely((PyDict_SetItem(__pyx_v_sigindex_node, __pyx_v_last_type, __pyx_v_sig) < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely((__Pyx_SetItemInt(__pyx_v__fused_sigindex_ref, 0, __pyx_v_fused_sigindex, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1) < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
  }
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v_sigindex_matches = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_v_fused_sigindex);
  __Pyx_GIVEREF(__pyx_v_fused_sigindex);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_v_fused_sigindex) != (0)) __PYX_ERR(0, 530, __pyx_L1_error);
  __pyx_v_sigindex_candidates = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_v_dest_sig; __Pyx_INCREF(__pyx_t_7);
  __pyx_t_19 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_7);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
      #endif
      if (__pyx_t_19 >= __pyx_temp) break;
    }
    __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_7, __pyx_t_19);
    ++__pyx_t_19;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_dst_type, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_found_matches, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_found_candidates, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_2 = (__pyx_v_dst_type == Py_None);
    if (__pyx_t_2) {
      __pyx_t_1 = __pyx_v_sigindex_matches; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        __pyx_t_6 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_5);
        ++__pyx_t_5;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_XDECREF_SET(__pyx_v_sn, __pyx_t_6);
        __pyx_t_6 = 0;
        if (unlikely(__pyx_v_sn == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
          __PYX_ERR(0, 530, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_PyDict_Values(((PyObject*)__pyx_v_sn)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_22 = __Pyx_PyList_Extend(__pyx_v_found_matches, __pyx_t_6); if (unlikely(__pyx_t_22 == ((int)-1))) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_v_sigindex_candidates; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        __pyx_t_6 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_5);
        ++__pyx_t_5;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_XDECREF_SET(__pyx_v_sn, __pyx_t_6);
        __pyx_t_6 = 0;
        if (unlikely(__pyx_v_sn == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
          __PYX_ERR(0, 530, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_PyDict_Values(((PyObject*)__pyx_v_sn)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_22 = __Pyx_PyList_Extend(__pyx_v_found_candidates, __pyx_t_6); if (unlikely(__pyx_t_22 == ((int)-1))) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L53;
    }
    /*else*/ {
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_sigindex_matches);
      __Pyx_GIVEREF(__pyx_v_sigindex_matches);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_sigindex_matches) != (0)) __PYX_ERR(0, 530, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_sigindex_candidates);
      __Pyx_GIVEREF(__pyx_v_sigindex_candidates);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_sigindex_candidates) != (0)) __PYX_ERR(0, 530, __pyx_L1_error);
      __pyx_t_6 = __pyx_t_1; __Pyx_INCREF(__pyx_t_6);
      __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (__pyx_t_5 >= 2) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_5));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_5);
        #endif
        ++__pyx_t_5;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_search_list, ((PyObject*)__pyx_t_1));
        __pyx_t_1 = 0;
        if (unlikely(__pyx_v_search_list == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 530, __pyx_L1_error)
        }
        __pyx_t_1 = __pyx_v_search_list; __Pyx_INCREF(__pyx_t_1);
        __pyx_t_21 = 0;
        for (;;) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
            #endif
            if (__pyx_t_21 >= __pyx_temp) break;
          }
          __pyx_t_11 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_21);
          ++__pyx_t_21;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_XDECREF_SET(__pyx_v_sn, __pyx_t_11);
          __pyx_t_11 = 0;
          if (unlikely(__pyx_v_sn == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
            __PYX_ERR(0, 530, __pyx_L1_error)
          }
          __pyx_t_11 = __Pyx_PyDict_GetItemDefault(((PyObject*)__pyx_v_sn), __pyx_v_dst_type, Py_None); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 530, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_XDECREF_SET(__pyx_v_type_match, __pyx_t_11);
          __pyx_t_11 = 0;
          __pyx_t_2 = (__pyx_v_type_match != Py_None);
          if (__pyx_t_2) {
            __pyx_t_22 = __Pyx_PyList_Append(__pyx_v_found_matches, __pyx_v_type_match); if (unlikely(__pyx_t_22 == ((int)-1))) __PYX_ERR(0, 530, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_L53:;
    __Pyx_INCREF(__pyx_v_found_matches);
    __Pyx_DECREF_SET(__pyx_v_sigindex_matches, __pyx_v_found_matches);
    __Pyx_INCREF(__pyx_v_found_candidates);
    __Pyx_DECREF_SET(__pyx_v_sigindex_candidates, __pyx_v_found_candidates);
    __pyx_t_4 = (__Pyx_PyList_GET_SIZE(__pyx_v_found_matches) != 0);
    if (unlikely(((!CYTHON_ASSUME_SAFE_MACROS) && __pyx_t_4 < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L68_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyList_GET_SIZE(__pyx_v_found_candidates) != 0);
    if (unlikely(((!CYTHON_ASSUME_SAFE_MACROS) && __pyx_t_4 < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_4;
    __pyx_L68_bool_binop_done:;
    __pyx_t_4 = (!__pyx_t_2);
    if (__pyx_t_4) {
      goto __pyx_L52_break;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  goto __pyx_L70_for_end;
  __pyx_L52_break:;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  goto __pyx_L70_for_end;
  __pyx_L70_for_end:;
  __Pyx_INCREF(__pyx_v_sigindex_matches);
  __pyx_v_candidates = __pyx_v_sigindex_matches;
  __pyx_t_4 = (__Pyx_PyList_GET_SIZE(__pyx_v_candidates) != 0);
  if (unlikely(((!CYTHON_ASSUME_SAFE_MACROS) && __pyx_t_4 < 0))) __PYX_ERR(0, 530, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_4);
  if (unlikely(__pyx_t_2)) {
    __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_builtin_TypeError);
    __pyx_t_1 = __pyx_builtin_TypeError; 
    __pyx_t_12 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_No_matching_signature_found};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 530, __pyx_L1_error)
  }
  __pyx_t_19 = __Pyx_PyList_GET_SIZE(__pyx_v_candidates); if (unlikely(__pyx_t_19 == ((Py_ssize_t)-1))) __PYX_ERR(0, 530, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_19 > 1);
  if (unlikely(__pyx_t_2)) {
    __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_builtin_TypeError);
    __pyx_t_6 = __pyx_builtin_TypeError; 
    __pyx_t_12 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_mstate_global->__pyx_kp_u_Function_call_with_ambiguous_arg};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 530, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 530, __pyx_L1_error)
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(((PyObject *)__pyx_v_signatures) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 530, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_signatures), __Pyx_PyList_GET_ITEM(__pyx_v_candidates, 0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_search_list);
  __Pyx_XDECREF(__pyx_v_sigindex_node);
  __Pyx_XDECREF(__pyx_v_dest_sig);
  __Pyx_XDECREF((PyObject *)__pyx_v_ndarray);
  __Pyx_XDECREF(__pyx_v_arg_as_memoryview);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XDECREF(__pyx_v_arg_base);
  __Pyx_XDECREF(__pyx_v_fused_sigindex);
  __Pyx_XDECREF(__pyx_v_sig);
  __Pyx_XDECREF(__pyx_v_sig_series);
  __Pyx_XDECREF(__pyx_v_last_type);
  __Pyx_XDECREF(__pyx_v_sig_type);
  __Pyx_XDECREF(__pyx_v_sigindex_matches);
  __Pyx_XDECREF(__pyx_v_sigindex_candidates);
  __Pyx_XDECREF(__pyx_v_dst_type);
  __Pyx_XDECREF(__pyx_v_found_matches);
  __Pyx_XDECREF(__pyx_v_found_candidates);
  __Pyx_XDECREF(__pyx_v_sn);
  __Pyx_XDECREF(__pyx_v_type_match);
  __Pyx_XDECREF(__pyx_v_candidates);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_0__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_79_coarse_index_data_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_0__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_79_coarse_index_data_file = {"__pyx_fuse_0_coarse_index_data_file", (PyCFunction)(void(*)(void))(PyCFunctionWithKeywords)__pyx_fuse_0__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_79_coarse_index_data_file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_fuse_0__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_79_coarse_index_data_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_pos = 0;
  PyArrayObject *__pyx_v_hsml = 0;
  __pyx_t_5numpy_uint64_t __pyx_v_file_id;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_coarse_index_data_file (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pos,&__pyx_mstate_global->__pyx_n_u_hsml,&__pyx_mstate_global->__pyx_n_u_file_id,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 530, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_coarse_index_data_file", 0) < 0) __PYX_ERR(0, 530, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_coarse_index_data_file", 1, 3, 3, i); __PYX_ERR(0, 530, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 530, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 530, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 530, __pyx_L3_error)
    }
    __pyx_v_pos = ((PyArrayObject *)values[0]);
    __pyx_v_hsml = ((PyArrayObject *)values[1]);
    __pyx_v_file_id = __Pyx_PyLong_As_npy_uint64(values[2]); if (unlikely((__pyx_v_file_id == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 536, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_coarse_index_data_file", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 530, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._coarse_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pos), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "pos", 0))) __PYX_ERR(0, 534, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hsml), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "hsml", 0))) __PYX_ERR(0, 535, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_78_coarse_index_data_file(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_pos, __pyx_v_hsml, __pyx_v_file_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_78_coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, __pyx_t_5numpy_uint64_t __pyx_v_file_id) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_hsml;
  __Pyx_Buffer __pyx_pybuffer_hsml;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pos;
  __Pyx_Buffer __pyx_pybuffer_pos;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0_coarse_index_data_file", 0);
  __pyx_pybuffer_pos.pybuffer.buf = NULL;
  __pyx_pybuffer_pos.refcount = 0;
  __pyx_pybuffernd_pos.data = NULL;
  __pyx_pybuffernd_pos.rcbuffer = &__pyx_pybuffer_pos;
  __pyx_pybuffer_hsml.pybuffer.buf = NULL;
  __pyx_pybuffer_hsml.refcount = 0;
  __pyx_pybuffernd_hsml.data = NULL;
  __pyx_pybuffernd_hsml.rcbuffer = &__pyx_pybuffer_hsml;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos.rcbuffer->pybuffer, (PyObject*)__pyx_v_pos, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 530, __pyx_L1_error)
  }
  __pyx_pybuffernd_pos.diminfo[0].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pos.diminfo[0].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pos.diminfo[1].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pos.diminfo[1].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer, (PyObject*)__pyx_v_hsml, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 530, __pyx_L1_error)
  }
  __pyx_pybuffernd_hsml.diminfo[0].strides = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_hsml.diminfo[0].shape = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":537
 *                                 np.ndarray[cython.floating, ndim=1] hsml,
 *                                 np.uint64_t file_id):
 *         return self.__coarse_index_data_file(pos, hsml, file_id)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self->__pyx_vtab)->__pyx_fuse_0_ParticleBitmap__coarse_index_data_file(__pyx_v_self, ((PyArrayObject *)__pyx_v_pos), ((PyArrayObject *)__pyx_v_hsml), __pyx_v_file_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L1_error)
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":530
 *             self.dds_mi2[i] = self.dds_mi1[i] / (1<<index_order2)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._coarse_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_1__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_81_coarse_index_data_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_1__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_81_coarse_index_data_file = {"__pyx_fuse_1_coarse_index_data_file", (PyCFunction)(void(*)(void))(PyCFunctionWithKeywords)__pyx_fuse_1__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_81_coarse_index_data_file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_fuse_1__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_81_coarse_index_data_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_pos = 0;
  PyArrayObject *__pyx_v_hsml = 0;
  __pyx_t_5numpy_uint64_t __pyx_v_file_id;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_coarse_index_data_file (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pos,&__pyx_mstate_global->__pyx_n_u_hsml,&__pyx_mstate_global->__pyx_n_u_file_id,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 530, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 530, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_coarse_index_data_file", 0) < 0) __PYX_ERR(0, 530, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_coarse_index_data_file", 1, 3, 3, i); __PYX_ERR(0, 530, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 530, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 530, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 530, __pyx_L3_error)
    }
    __pyx_v_pos = ((PyArrayObject *)values[0]);
    __pyx_v_hsml = ((PyArrayObject *)values[1]);
    __pyx_v_file_id = __Pyx_PyLong_As_npy_uint64(values[2]); if (unlikely((__pyx_v_file_id == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 536, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_coarse_index_data_file", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 530, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._coarse_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pos), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "pos", 0))) __PYX_ERR(0, 534, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hsml), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "hsml", 0))) __PYX_ERR(0, 535, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_80_coarse_index_data_file(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_pos, __pyx_v_hsml, __pyx_v_file_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_80_coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, __pyx_t_5numpy_uint64_t __pyx_v_file_id) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_hsml;
  __Pyx_Buffer __pyx_pybuffer_hsml;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pos;
  __Pyx_Buffer __pyx_pybuffer_pos;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1_coarse_index_data_file", 0);
  __pyx_pybuffer_pos.pybuffer.buf = NULL;
  __pyx_pybuffer_pos.refcount = 0;
  __pyx_pybuffernd_pos.data = NULL;
  __pyx_pybuffernd_pos.rcbuffer = &__pyx_pybuffer_pos;
  __pyx_pybuffer_hsml.pybuffer.buf = NULL;
  __pyx_pybuffer_hsml.refcount = 0;
  __pyx_pybuffernd_hsml.data = NULL;
  __pyx_pybuffernd_hsml.rcbuffer = &__pyx_pybuffer_hsml;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos.rcbuffer->pybuffer, (PyObject*)__pyx_v_pos, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 530, __pyx_L1_error)
  }
  __pyx_pybuffernd_pos.diminfo[0].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pos.diminfo[0].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pos.diminfo[1].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pos.diminfo[1].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer, (PyObject*)__pyx_v_hsml, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 530, __pyx_L1_error)
  }
  __pyx_pybuffernd_hsml.diminfo[0].strides = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_hsml.diminfo[0].shape = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":537
 *                                 np.ndarray[cython.floating, ndim=1] hsml,
 *                                 np.uint64_t file_id):
 *         return self.__coarse_index_data_file(pos, hsml, file_id)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self->__pyx_vtab)->__pyx_fuse_1_ParticleBitmap__coarse_index_data_file(__pyx_v_self, ((PyArrayObject *)__pyx_v_pos), ((PyArrayObject *)__pyx_v_hsml), __pyx_v_file_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 537, __pyx_L1_error)
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":530
 *             self.dds_mi2[i] = self.dds_mi1[i] / (1<<index_order2)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._coarse_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":539
 *         return self.__coarse_index_data_file(pos, hsml, file_id)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_fuse_0__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, __pyx_t_5numpy_uint64_t __pyx_v_file_id) {
  __pyx_t_5numpy_int64_t __pyx_v_i;
  __pyx_t_5numpy_int64_t __pyx_v_p;
  __pyx_t_5numpy_uint64_t __pyx_v_mi;
  __pyx_t_5numpy_uint64_t __pyx_v_miex;
  __pyx_t_5numpy_uint64_t __pyx_v_mi_split[3];
  __pyx_t_5numpy_float64_t __pyx_v_ppos[3];
  __pyx_t_5numpy_float64_t __pyx_v_s_ppos[3];
  __pyx_t_5numpy_float64_t __pyx_v_clip_pos_l[3];
  __pyx_t_5numpy_float64_t __pyx_v_clip_pos_r[3];
  int __pyx_v_skip;
  __pyx_t_5numpy_uint64_t __pyx_v_bounds[2][3];
  __pyx_t_5numpy_uint64_t __pyx_v_xex;
  __pyx_t_5numpy_uint64_t __pyx_v_yex;
  __pyx_t_5numpy_uint64_t __pyx_v_zex;
  __pyx_t_5numpy_float64_t __pyx_v_LE[3];
  __pyx_t_5numpy_float64_t __pyx_v_RE[3];
  __pyx_t_5numpy_float64_t __pyx_v_DW[3];
  __pyx_t_5numpy_uint8_t __pyx_v_PER[3];
  __pyx_t_5numpy_float64_t __pyx_v_dds[3];
  __pyx_t_5numpy_float64_t __pyx_v_radius;
  __Pyx_memviewslice __pyx_v_mask = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_particle_counts = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_uint64_t __pyx_v_msize;
  int __pyx_v_axiter[3][2];
  __pyx_t_5numpy_float64_t __pyx_v_axiterv[3][2];
  long __pyx_v_xi;
  long __pyx_v_yi;
  long __pyx_v_zi;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_hsml;
  __Pyx_Buffer __pyx_pybuffer_hsml;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pos;
  __Pyx_Buffer __pyx_pybuffer_pos;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_memviewslice __pyx_t_3 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_int64_t __pyx_t_5;
  npy_intp *__pyx_t_6;
  npy_intp __pyx_t_7;
  npy_intp __pyx_t_8;
  __pyx_t_5numpy_int64_t __pyx_t_9;
  __pyx_t_5numpy_int64_t __pyx_t_10;
  __pyx_t_5numpy_int64_t __pyx_t_11;
  float __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  __pyx_t_5numpy_uint64_t __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20[4];
  size_t __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  __pyx_t_5numpy_uint64_t __pyx_t_25;
  __pyx_t_5numpy_uint64_t __pyx_t_26;
  __pyx_t_5numpy_uint64_t __pyx_t_27;
  __pyx_t_5numpy_uint64_t __pyx_t_28;
  __pyx_t_5numpy_uint64_t __pyx_t_29;
  __pyx_t_5numpy_uint64_t __pyx_t_30;
  __pyx_t_5numpy_uint64_t __pyx_t_31;
  __pyx_t_5numpy_uint64_t __pyx_t_32;
  __pyx_t_5numpy_uint64_t __pyx_t_33;
  PyObject *__pyx_t_34[5];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0_ParticleBitmap__coarse_index_data_file", 0);
  __pyx_pybuffer_pos.pybuffer.buf = NULL;
  __pyx_pybuffer_pos.refcount = 0;
  __pyx_pybuffernd_pos.data = NULL;
  __pyx_pybuffernd_pos.rcbuffer = &__pyx_pybuffer_pos;
  __pyx_pybuffer_hsml.pybuffer.buf = NULL;
  __pyx_pybuffer_hsml.refcount = 0;
  __pyx_pybuffernd_hsml.data = NULL;
  __pyx_pybuffernd_hsml.rcbuffer = &__pyx_pybuffer_hsml;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos.rcbuffer->pybuffer, (PyObject*)__pyx_v_pos, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 539, __pyx_L1_error)
  }
  __pyx_pybuffernd_pos.diminfo[0].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pos.diminfo[0].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pos.diminfo[1].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pos.diminfo[1].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer, (PyObject*)__pyx_v_hsml, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 539, __pyx_L1_error)
  }
  __pyx_pybuffernd_hsml.diminfo[0].strides = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_hsml.diminfo[0].shape = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":563
 *         cdef np.float64_t dds[3]
 *         cdef np.float64_t radius
 *         cdef np.uint8_t[:] mask = self.masks[:, file_id]             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t[:] particle_counts = self.particle_counts
 *         cdef np.uint64_t msize = (1 << (self.index_order1 * 3))
*/
  __pyx_t_1 = __Pyx_PyLong_From_npy_uint64(__pyx_v_file_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_slice[0]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_slice[0]);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_mstate_global->__pyx_slice[0]) != (0)) __PYX_ERR(0, 563, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1) != (0)) __PYX_ERR(0, 563, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_self->masks, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mask = __pyx_t_3;
  __pyx_t_3.memview = NULL;
  __pyx_t_3.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":564
 *         cdef np.float64_t radius
 *         cdef np.uint8_t[:] mask = self.masks[:, file_id]
 *         cdef np.uint64_t[:] particle_counts = self.particle_counts             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t msize = (1 << (self.index_order1 * 3))
 *         cdef int axiter[3][2]
*/
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint64_t(__pyx_v_self->particle_counts, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 564, __pyx_L1_error)
  __pyx_v_particle_counts = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":565
 *         cdef np.uint8_t[:] mask = self.masks[:, file_id]
 *         cdef np.uint64_t[:] particle_counts = self.particle_counts
 *         cdef np.uint64_t msize = (1 << (self.index_order1 * 3))             # <<<<<<<<<<<<<<
 *         cdef int axiter[3][2]
 *         cdef np.float64_t axiterv[3][2]
*/
  __pyx_v_msize = (1 << (__pyx_v_self->index_order1 * 3));

  /* "yt/geometry/particle_oct_container.pyx":569
 *         cdef np.float64_t axiterv[3][2]
 *         # Copy over things for this file (type cast necessary?)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             LE[i] = self.left_edge[i]
 *             RE[i] = self.right_edge[i]
*/
  for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "yt/geometry/particle_oct_container.pyx":570
 *         # Copy over things for this file (type cast necessary?)
 *         for i in range(3):
 *             LE[i] = self.left_edge[i]             # <<<<<<<<<<<<<<
 *             RE[i] = self.right_edge[i]
 *             PER[i] = self.periodicity[i]
*/
    (__pyx_v_LE[__pyx_v_i]) = (__pyx_v_self->left_edge[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":571
 *         for i in range(3):
 *             LE[i] = self.left_edge[i]
 *             RE[i] = self.right_edge[i]             # <<<<<<<<<<<<<<
 *             PER[i] = self.periodicity[i]
 *             dds[i] = self.dds_mi1[i]
*/
    (__pyx_v_RE[__pyx_v_i]) = (__pyx_v_self->right_edge[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":572
 *             LE[i] = self.left_edge[i]
 *             RE[i] = self.right_edge[i]
 *             PER[i] = self.periodicity[i]             # <<<<<<<<<<<<<<
 *             dds[i] = self.dds_mi1[i]
 *             DW[i] = RE[i] - LE[i]
*/
    (__pyx_v_PER[__pyx_v_i]) = (__pyx_v_self->periodicity[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":573
 *             RE[i] = self.right_edge[i]
 *             PER[i] = self.periodicity[i]
 *             dds[i] = self.dds_mi1[i]             # <<<<<<<<<<<<<<
 *             DW[i] = RE[i] - LE[i]
 *             axiter[i][0] = 0 # We always do an offset of 0
*/
    (__pyx_v_dds[__pyx_v_i]) = (__pyx_v_self->dds_mi1[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":574
 *             PER[i] = self.periodicity[i]
 *             dds[i] = self.dds_mi1[i]
 *             DW[i] = RE[i] - LE[i]             # <<<<<<<<<<<<<<
 *             axiter[i][0] = 0 # We always do an offset of 0
 *             axiterv[i][0] = 0.0
*/
    (__pyx_v_DW[__pyx_v_i]) = ((__pyx_v_RE[__pyx_v_i]) - (__pyx_v_LE[__pyx_v_i]));

    /* "yt/geometry/particle_oct_container.pyx":575
 *             dds[i] = self.dds_mi1[i]
 *             DW[i] = RE[i] - LE[i]
 *             axiter[i][0] = 0 # We always do an offset of 0             # <<<<<<<<<<<<<<
 *             axiterv[i][0] = 0.0
 *         # Mark index of particles that are in this file
*/
    ((__pyx_v_axiter[__pyx_v_i])[0]) = 0;

    /* "yt/geometry/particle_oct_container.pyx":576
 *             DW[i] = RE[i] - LE[i]
 *             axiter[i][0] = 0 # We always do an offset of 0
 *             axiterv[i][0] = 0.0             # <<<<<<<<<<<<<<
 *         # Mark index of particles that are in this file
 *         for p in range(pos.shape[0]):
*/
    ((__pyx_v_axiterv[__pyx_v_i])[0]) = 0.0;
  }

  /* "yt/geometry/particle_oct_container.pyx":578
 *             axiterv[i][0] = 0.0
 *         # Mark index of particles that are in this file
 *         for p in range(pos.shape[0]):             # <<<<<<<<<<<<<<
 *             skip = 0
 *             for i in range(3):
*/
  __pyx_t_6 = __pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_pos)); if (unlikely(__pyx_t_6 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 578, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6[0]);
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_8; __pyx_t_5+=1) {
    __pyx_v_p = __pyx_t_5;

    /* "yt/geometry/particle_oct_container.pyx":579
 *         # Mark index of particles that are in this file
 *         for p in range(pos.shape[0]):
 *             skip = 0             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 axiter[i][1] = 999
*/
    __pyx_v_skip = 0;

    /* "yt/geometry/particle_oct_container.pyx":580
 *         for p in range(pos.shape[0]):
 *             skip = 0
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 axiter[i][1] = 999
 *                 # Skip particles outside the domain
*/
    for (__pyx_t_9 = 0; __pyx_t_9 < 3; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "yt/geometry/particle_oct_container.pyx":581
 *             skip = 0
 *             for i in range(3):
 *                 axiter[i][1] = 999             # <<<<<<<<<<<<<<
 *                 # Skip particles outside the domain
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
*/
      ((__pyx_v_axiter[__pyx_v_i])[1]) = 0x3E7;

      /* "yt/geometry/particle_oct_container.pyx":583
 *                 axiter[i][1] = 999
 *                 # Skip particles outside the domain
 *                 if not (LE[i] <= pos[p, i] < RE[i]):             # <<<<<<<<<<<<<<
 *                     skip = 1
 *                     break
*/
      __pyx_t_10 = __pyx_v_p;
      __pyx_t_11 = __pyx_v_i;
      __pyx_t_12 = (*__Pyx_BufPtrStrided2d(float *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_pos.diminfo[1].strides));
      __pyx_t_13 = ((__pyx_v_LE[__pyx_v_i]) <= __pyx_t_12);
      if (__pyx_t_13) {
        __pyx_t_13 = (__pyx_t_12 < (__pyx_v_RE[__pyx_v_i]));
      }
      __pyx_t_14 = (!__pyx_t_13);
      if (__pyx_t_14) {

        /* "yt/geometry/particle_oct_container.pyx":584
 *                 # Skip particles outside the domain
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
 *                     skip = 1             # <<<<<<<<<<<<<<
 *                     break
 *                 ppos[i] = pos[p,i]
*/
        __pyx_v_skip = 1;

        /* "yt/geometry/particle_oct_container.pyx":585
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
 *                     skip = 1
 *                     break             # <<<<<<<<<<<<<<
 *                 ppos[i] = pos[p,i]
 *             if skip == 1: continue
*/
        goto __pyx_L8_break;

        /* "yt/geometry/particle_oct_container.pyx":583
 *                 axiter[i][1] = 999
 *                 # Skip particles outside the domain
 *                 if not (LE[i] <= pos[p, i] < RE[i]):             # <<<<<<<<<<<<<<
 *                     skip = 1
 *                     break
*/
      }

      /* "yt/geometry/particle_oct_container.pyx":586
 *                     skip = 1
 *                     break
 *                 ppos[i] = pos[p,i]             # <<<<<<<<<<<<<<
 *             if skip == 1: continue
 *             mi = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,
*/
      __pyx_t_11 = __pyx_v_p;
      __pyx_t_10 = __pyx_v_i;
      (__pyx_v_ppos[__pyx_v_i]) = (*__Pyx_BufPtrStrided2d(float *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_pos.diminfo[1].strides));
    }
    __pyx_L8_break:;

    /* "yt/geometry/particle_oct_container.pyx":587
 *                     break
 *                 ppos[i] = pos[p,i]
 *             if skip == 1: continue             # <<<<<<<<<<<<<<
 *             mi = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,
 *                                           dds, mi_split)
*/
    __pyx_t_14 = (__pyx_v_skip == 1);
    if (__pyx_t_14) {
      goto __pyx_L5_continue;
    }

    /* "yt/geometry/particle_oct_container.pyx":588
 *                 ppos[i] = pos[p,i]
 *             if skip == 1: continue
 *             mi = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,             # <<<<<<<<<<<<<<
 *                                           dds, mi_split)
 *             mask[mi] = 1
*/
    __pyx_t_15 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds((__pyx_v_ppos[0]), (__pyx_v_ppos[1]), (__pyx_v_ppos[2]), __pyx_v_LE, __pyx_v_dds, __pyx_v_mi_split); if (unlikely(__pyx_t_15 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 588, __pyx_L1_error)
    __pyx_v_mi = __pyx_t_15;

    /* "yt/geometry/particle_oct_container.pyx":590
 *             mi = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,
 *                                           dds, mi_split)
 *             mask[mi] = 1             # <<<<<<<<<<<<<<
 *             particle_counts[mi] += 1
 *             # Expand mask by softening
*/
    __pyx_t_15 = __pyx_v_mi;
    *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_mask.data + __pyx_t_15 * __pyx_v_mask.strides[0]) )) = 1;

    /* "yt/geometry/particle_oct_container.pyx":591
 *                                           dds, mi_split)
 *             mask[mi] = 1
 *             particle_counts[mi] += 1             # <<<<<<<<<<<<<<
 *             # Expand mask by softening
 *             if hsml is None:
*/
    __pyx_t_15 = __pyx_v_mi;
    *((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_particle_counts.data + __pyx_t_15 * __pyx_v_particle_counts.strides[0]) )) += 1;

    /* "yt/geometry/particle_oct_container.pyx":593
 *             particle_counts[mi] += 1
 *             # Expand mask by softening
 *             if hsml is None:             # <<<<<<<<<<<<<<
 *                 continue
 *             if hsml[p] < 0:
*/
    __pyx_t_14 = (((PyObject *)__pyx_v_hsml) == Py_None);
    if (__pyx_t_14) {

      /* "yt/geometry/particle_oct_container.pyx":594
 *             # Expand mask by softening
 *             if hsml is None:
 *                 continue             # <<<<<<<<<<<<<<
 *             if hsml[p] < 0:
 *                 raise RuntimeError(
*/
      goto __pyx_L5_continue;

      /* "yt/geometry/particle_oct_container.pyx":593
 *             particle_counts[mi] += 1
 *             # Expand mask by softening
 *             if hsml is None:             # <<<<<<<<<<<<<<
 *                 continue
 *             if hsml[p] < 0:
*/
    }

    /* "yt/geometry/particle_oct_container.pyx":595
 *             if hsml is None:
 *                 continue
 *             if hsml[p] < 0:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(
 *                     f"Smoothing length for particle {p} is negative with "
*/
    __pyx_t_9 = __pyx_v_p;
    __pyx_t_14 = ((*__Pyx_BufPtrStrided1d(float *, __pyx_pybuffernd_hsml.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_hsml.diminfo[0].strides)) < 0.0);
    if (unlikely(__pyx_t_14)) {

      /* "yt/geometry/particle_oct_container.pyx":596
 *                 continue
 *             if hsml[p] < 0:
 *                 raise RuntimeError(             # <<<<<<<<<<<<<<
 *                     f"Smoothing length for particle {p} is negative with "
 *                     f"value {hsml[p]}")
*/
      __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_builtin_RuntimeError);
      __pyx_t_16 = __pyx_builtin_RuntimeError; 

      /* "yt/geometry/particle_oct_container.pyx":597
 *             if hsml[p] < 0:
 *                 raise RuntimeError(
 *                     f"Smoothing length for particle {p} is negative with "             # <<<<<<<<<<<<<<
 *                     f"value {hsml[p]}")
 *             radius = hsml[p]
*/
      __pyx_t_17 = __Pyx_PyLong_From_npy_int64(__pyx_v_p); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_18 = __Pyx_PyObject_FormatSimple(__pyx_t_17, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

      /* "yt/geometry/particle_oct_container.pyx":598
 *                 raise RuntimeError(
 *                     f"Smoothing length for particle {p} is negative with "
 *                     f"value {hsml[p]}")             # <<<<<<<<<<<<<<
 *             radius = hsml[p]
 *             # We first check if we're bounded within the domain; this follows the logic in the
*/
      __pyx_t_9 = __pyx_v_p;
      __pyx_t_17 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(float *, __pyx_pybuffernd_hsml.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_hsml.diminfo[0].strides))); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_19 = __Pyx_PyObject_FormatSimple(__pyx_t_17, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_20[0] = __pyx_mstate_global->__pyx_kp_u_Smoothing_length_for_particle;
      __pyx_t_20[1] = __pyx_t_18;
      __pyx_t_20[2] = __pyx_mstate_global->__pyx_kp_u_is_negative_with_value;
      __pyx_t_20[3] = __pyx_t_19;

      /* "yt/geometry/particle_oct_container.pyx":597
 *             if hsml[p] < 0:
 *                 raise RuntimeError(
 *                     f"Smoothing length for particle {p} is negative with "             # <<<<<<<<<<<<<<
 *                     f"value {hsml[p]}")
 *             radius = hsml[p]
*/
      __pyx_t_17 = __Pyx_PyUnicode_Join(__pyx_t_20, 4, 30 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_18) + 24 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_19), 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_19));
      if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_21 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_17};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+__pyx_t_21, (2-__pyx_t_21) | (__pyx_t_21*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 596, __pyx_L1_error)

      /* "yt/geometry/particle_oct_container.pyx":595
 *             if hsml is None:
 *                 continue
 *             if hsml[p] < 0:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(
 *                     f"Smoothing length for particle {p} is negative with "
*/
    }

    /* "yt/geometry/particle_oct_container.pyx":599
 *                     f"Smoothing length for particle {p} is negative with "
 *                     f"value {hsml[p]}")
 *             radius = hsml[p]             # <<<<<<<<<<<<<<
 *             # We first check if we're bounded within the domain; this follows the logic in the
 *             # pixelize_cartesian routine.  We assume that no smoothing
*/
    __pyx_t_9 = __pyx_v_p;
    __pyx_v_radius = (*__Pyx_BufPtrStrided1d(float *, __pyx_pybuffernd_hsml.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_hsml.diminfo[0].strides));

    /* "yt/geometry/particle_oct_container.pyx":603
 *             # pixelize_cartesian routine.  We assume that no smoothing
 *             # length can wrap around both directions.
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 if PER[i] and ppos[i] - radius < LE[i]:
 *                     axiter[i][1] = +1
*/
    for (__pyx_t_9 = 0; __pyx_t_9 < 3; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "yt/geometry/particle_oct_container.pyx":604
 *             # length can wrap around both directions.
 *             for i in range(3):
 *                 if PER[i] and ppos[i] - radius < LE[i]:             # <<<<<<<<<<<<<<
 *                     axiter[i][1] = +1
 *                     axiterv[i][1] = DW[i]
*/
      __pyx_t_13 = ((__pyx_v_PER[__pyx_v_i]) != 0);
      if (__pyx_t_13) {
      } else {
        __pyx_t_14 = __pyx_t_13;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_13 = (((__pyx_v_ppos[__pyx_v_i]) - __pyx_v_radius) < (__pyx_v_LE[__pyx_v_i]));
      __pyx_t_14 = __pyx_t_13;
      __pyx_L16_bool_binop_done:;
      if (__pyx_t_14) {

        /* "yt/geometry/particle_oct_container.pyx":605
 *             for i in range(3):
 *                 if PER[i] and ppos[i] - radius < LE[i]:
 *                     axiter[i][1] = +1             # <<<<<<<<<<<<<<
 *                     axiterv[i][1] = DW[i]
 *                 elif PER[i] and ppos[i] + radius > RE[i]:
*/
        ((__pyx_v_axiter[__pyx_v_i])[1]) = 1;

        /* "yt/geometry/particle_oct_container.pyx":606
 *                 if PER[i] and ppos[i] - radius < LE[i]:
 *                     axiter[i][1] = +1
 *                     axiterv[i][1] = DW[i]             # <<<<<<<<<<<<<<
 *                 elif PER[i] and ppos[i] + radius > RE[i]:
 *                     axiter[i][1] = -1
*/
        ((__pyx_v_axiterv[__pyx_v_i])[1]) = (__pyx_v_DW[__pyx_v_i]);

        /* "yt/geometry/particle_oct_container.pyx":604
 *             # length can wrap around both directions.
 *             for i in range(3):
 *                 if PER[i] and ppos[i] - radius < LE[i]:             # <<<<<<<<<<<<<<
 *                     axiter[i][1] = +1
 *                     axiterv[i][1] = DW[i]
*/
        goto __pyx_L15;
      }

      /* "yt/geometry/particle_oct_container.pyx":607
 *                     axiter[i][1] = +1
 *                     axiterv[i][1] = DW[i]
 *                 elif PER[i] and ppos[i] + radius > RE[i]:             # <<<<<<<<<<<<<<
 *                     axiter[i][1] = -1
 *                     axiterv[i][1] = -DW[i]
*/
      __pyx_t_13 = ((__pyx_v_PER[__pyx_v_i]) != 0);
      if (__pyx_t_13) {
      } else {
        __pyx_t_14 = __pyx_t_13;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_13 = (((__pyx_v_ppos[__pyx_v_i]) + __pyx_v_radius) > (__pyx_v_RE[__pyx_v_i]));
      __pyx_t_14 = __pyx_t_13;
      __pyx_L18_bool_binop_done:;
      if (__pyx_t_14) {

        /* "yt/geometry/particle_oct_container.pyx":608
 *                     axiterv[i][1] = DW[i]
 *                 elif PER[i] and ppos[i] + radius > RE[i]:
 *                     axiter[i][1] = -1             # <<<<<<<<<<<<<<
 *                     axiterv[i][1] = -DW[i]
 *             for xi in range(2):
*/
        ((__pyx_v_axiter[__pyx_v_i])[1]) = -1;

        /* "yt/geometry/particle_oct_container.pyx":609
 *                 elif PER[i] and ppos[i] + radius > RE[i]:
 *                     axiter[i][1] = -1
 *                     axiterv[i][1] = -DW[i]             # <<<<<<<<<<<<<<
 *             for xi in range(2):
 *                 if axiter[0][xi] == 999: continue
*/
        ((__pyx_v_axiterv[__pyx_v_i])[1]) = (-(__pyx_v_DW[__pyx_v_i]));

        /* "yt/geometry/particle_oct_container.pyx":607
 *                     axiter[i][1] = +1
 *                     axiterv[i][1] = DW[i]
 *                 elif PER[i] and ppos[i] + radius > RE[i]:             # <<<<<<<<<<<<<<
 *                     axiter[i][1] = -1
 *                     axiterv[i][1] = -DW[i]
*/
      }
      __pyx_L15:;
    }

    /* "yt/geometry/particle_oct_container.pyx":610
 *                     axiter[i][1] = -1
 *                     axiterv[i][1] = -DW[i]
 *             for xi in range(2):             # <<<<<<<<<<<<<<
 *                 if axiter[0][xi] == 999: continue
 *                 s_ppos[0] = ppos[0] + axiterv[0][xi]
*/
    for (__pyx_t_22 = 0; __pyx_t_22 < 2; __pyx_t_22+=1) {
      __pyx_v_xi = __pyx_t_22;

      /* "yt/geometry/particle_oct_container.pyx":611
 *                     axiterv[i][1] = -DW[i]
 *             for xi in range(2):
 *                 if axiter[0][xi] == 999: continue             # <<<<<<<<<<<<<<
 *                 s_ppos[0] = ppos[0] + axiterv[0][xi]
 *                 for yi in range(2):
*/
      __pyx_t_14 = (((__pyx_v_axiter[0])[__pyx_v_xi]) == 0x3E7);
      if (__pyx_t_14) {
        goto __pyx_L20_continue;
      }

      /* "yt/geometry/particle_oct_container.pyx":612
 *             for xi in range(2):
 *                 if axiter[0][xi] == 999: continue
 *                 s_ppos[0] = ppos[0] + axiterv[0][xi]             # <<<<<<<<<<<<<<
 *                 for yi in range(2):
 *                     if axiter[1][yi] == 999: continue
*/
      (__pyx_v_s_ppos[0]) = ((__pyx_v_ppos[0]) + ((__pyx_v_axiterv[0])[__pyx_v_xi]));

      /* "yt/geometry/particle_oct_container.pyx":613
 *                 if axiter[0][xi] == 999: continue
 *                 s_ppos[0] = ppos[0] + axiterv[0][xi]
 *                 for yi in range(2):             # <<<<<<<<<<<<<<
 *                     if axiter[1][yi] == 999: continue
 *                     s_ppos[1] = ppos[1] + axiterv[1][yi]
*/
      for (__pyx_t_23 = 0; __pyx_t_23 < 2; __pyx_t_23+=1) {
        __pyx_v_yi = __pyx_t_23;

        /* "yt/geometry/particle_oct_container.pyx":614
 *                 s_ppos[0] = ppos[0] + axiterv[0][xi]
 *                 for yi in range(2):
 *                     if axiter[1][yi] == 999: continue             # <<<<<<<<<<<<<<
 *                     s_ppos[1] = ppos[1] + axiterv[1][yi]
 *                     for zi in range(2):
*/
        __pyx_t_14 = (((__pyx_v_axiter[1])[__pyx_v_yi]) == 0x3E7);
        if (__pyx_t_14) {
          goto __pyx_L23_continue;
        }

        /* "yt/geometry/particle_oct_container.pyx":615
 *                 for yi in range(2):
 *                     if axiter[1][yi] == 999: continue
 *                     s_ppos[1] = ppos[1] + axiterv[1][yi]             # <<<<<<<<<<<<<<
 *                     for zi in range(2):
 *                         if axiter[2][zi] == 999: continue
*/
        (__pyx_v_s_ppos[1]) = ((__pyx_v_ppos[1]) + ((__pyx_v_axiterv[1])[__pyx_v_yi]));

        /* "yt/geometry/particle_oct_container.pyx":616
 *                     if axiter[1][yi] == 999: continue
 *                     s_ppos[1] = ppos[1] + axiterv[1][yi]
 *                     for zi in range(2):             # <<<<<<<<<<<<<<
 *                         if axiter[2][zi] == 999: continue
 *                         s_ppos[2] = ppos[2] + axiterv[2][zi]
*/
        for (__pyx_t_24 = 0; __pyx_t_24 < 2; __pyx_t_24+=1) {
          __pyx_v_zi = __pyx_t_24;

          /* "yt/geometry/particle_oct_container.pyx":617
 *                     s_ppos[1] = ppos[1] + axiterv[1][yi]
 *                     for zi in range(2):
 *                         if axiter[2][zi] == 999: continue             # <<<<<<<<<<<<<<
 *                         s_ppos[2] = ppos[2] + axiterv[2][zi]
 *                         # OK, now we compute the left and right edges for this shift.
*/
          __pyx_t_14 = (((__pyx_v_axiter[2])[__pyx_v_zi]) == 0x3E7);
          if (__pyx_t_14) {
            goto __pyx_L26_continue;
          }

          /* "yt/geometry/particle_oct_container.pyx":618
 *                     for zi in range(2):
 *                         if axiter[2][zi] == 999: continue
 *                         s_ppos[2] = ppos[2] + axiterv[2][zi]             # <<<<<<<<<<<<<<
 *                         # OK, now we compute the left and right edges for this shift.
 *                         for i in range(3):
*/
          (__pyx_v_s_ppos[2]) = ((__pyx_v_ppos[2]) + ((__pyx_v_axiterv[2])[__pyx_v_zi]));

          /* "yt/geometry/particle_oct_container.pyx":620
 *                         s_ppos[2] = ppos[2] + axiterv[2][zi]
 *                         # OK, now we compute the left and right edges for this shift.
 *                         for i in range(3):             # <<<<<<<<<<<<<<
 *                             clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds[i]/10)
 *                             clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds[i]/10)
*/
          for (__pyx_t_9 = 0; __pyx_t_9 < 3; __pyx_t_9+=1) {
            __pyx_v_i = __pyx_t_9;

            /* "yt/geometry/particle_oct_container.pyx":621
 *                         # OK, now we compute the left and right edges for this shift.
 *                         for i in range(3):
 *                             clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds[i]/10)             # <<<<<<<<<<<<<<
 *                             clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds[i]/10)
 *                         bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds, bounds[0])
*/
            (__pyx_v_clip_pos_l[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(((__pyx_v_s_ppos[__pyx_v_i]) - __pyx_v_radius), ((__pyx_v_LE[__pyx_v_i]) + ((__pyx_v_dds[__pyx_v_i]) / 10.0)));

            /* "yt/geometry/particle_oct_container.pyx":622
 *                         for i in range(3):
 *                             clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds[i]/10)
 *                             clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds[i]/10)             # <<<<<<<<<<<<<<
 *                         bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds, bounds[0])
 *                         bounded_morton_split_dds(clip_pos_r[0], clip_pos_r[1], clip_pos_r[2], LE, dds, bounds[1])
*/
            (__pyx_v_clip_pos_r[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(((__pyx_v_s_ppos[__pyx_v_i]) + __pyx_v_radius), ((__pyx_v_RE[__pyx_v_i]) - ((__pyx_v_dds[__pyx_v_i]) / 10.0)));
          }

          /* "yt/geometry/particle_oct_container.pyx":623
 *                             clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds[i]/10)
 *                             clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds[i]/10)
 *                         bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds, bounds[0])             # <<<<<<<<<<<<<<
 *                         bounded_morton_split_dds(clip_pos_r[0], clip_pos_r[1], clip_pos_r[2], LE, dds, bounds[1])
 *                         # We go to the upper bound plus one so that we have *inclusive* loops -- the upper bound
*/
          __pyx_t_15 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds((__pyx_v_clip_pos_l[0]), (__pyx_v_clip_pos_l[1]), (__pyx_v_clip_pos_l[2]), __pyx_v_LE, __pyx_v_dds, (__pyx_v_bounds[0])); if (unlikely(__pyx_t_15 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 623, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":624
 *                             clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds[i]/10)
 *                         bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds, bounds[0])
 *                         bounded_morton_split_dds(clip_pos_r[0], clip_pos_r[1], clip_pos_r[2], LE, dds, bounds[1])             # <<<<<<<<<<<<<<
 *                         # We go to the upper bound plus one so that we have *inclusive* loops -- the upper bound
 *                         # is the cell *index*, so we want to make sure we include that cell.  This is also why
*/
          __pyx_t_15 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds((__pyx_v_clip_pos_r[0]), (__pyx_v_clip_pos_r[1]), (__pyx_v_clip_pos_r[2]), __pyx_v_LE, __pyx_v_dds, (__pyx_v_bounds[1])); if (unlikely(__pyx_t_15 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 624, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":628
 *                         # is the cell *index*, so we want to make sure we include that cell.  This is also why
 *                         # we don't need to worry about mi_max being the max index rather than the cell count.
 *                         for xex in range(bounds[0][0], bounds[1][0] + 1):             # <<<<<<<<<<<<<<
 *                             for yex in range(bounds[0][1], bounds[1][1] + 1):
 *                                 for zex in range(bounds[0][2], bounds[1][2] + 1):
*/
          __pyx_t_15 = (((__pyx_v_bounds[1])[0]) + 1);
          __pyx_t_25 = __pyx_t_15;
          for (__pyx_t_26 = ((__pyx_v_bounds[0])[0]); __pyx_t_26 < __pyx_t_25; __pyx_t_26+=1) {
            __pyx_v_xex = __pyx_t_26;

            /* "yt/geometry/particle_oct_container.pyx":629
 *                         # we don't need to worry about mi_max being the max index rather than the cell count.
 *                         for xex in range(bounds[0][0], bounds[1][0] + 1):
 *                             for yex in range(bounds[0][1], bounds[1][1] + 1):             # <<<<<<<<<<<<<<
 *                                 for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                     miex = encode_morton_64bit(xex, yex, zex)
*/
            __pyx_t_27 = (((__pyx_v_bounds[1])[1]) + 1);
            __pyx_t_28 = __pyx_t_27;
            for (__pyx_t_29 = ((__pyx_v_bounds[0])[1]); __pyx_t_29 < __pyx_t_28; __pyx_t_29+=1) {
              __pyx_v_yex = __pyx_t_29;

              /* "yt/geometry/particle_oct_container.pyx":630
 *                         for xex in range(bounds[0][0], bounds[1][0] + 1):
 *                             for yex in range(bounds[0][1], bounds[1][1] + 1):
 *                                 for zex in range(bounds[0][2], bounds[1][2] + 1):             # <<<<<<<<<<<<<<
 *                                     miex = encode_morton_64bit(xex, yex, zex)
 *                                     mask[miex] = 1
*/
              __pyx_t_30 = (((__pyx_v_bounds[1])[2]) + 1);
              __pyx_t_31 = __pyx_t_30;
              for (__pyx_t_32 = ((__pyx_v_bounds[0])[2]); __pyx_t_32 < __pyx_t_31; __pyx_t_32+=1) {
                __pyx_v_zex = __pyx_t_32;

                /* "yt/geometry/particle_oct_container.pyx":631
 *                             for yex in range(bounds[0][1], bounds[1][1] + 1):
 *                                 for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                     miex = encode_morton_64bit(xex, yex, zex)             # <<<<<<<<<<<<<<
 *                                     mask[miex] = 1
 *                                     particle_counts[miex] += 1
*/
                __pyx_t_33 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_v_xex, __pyx_v_yex, __pyx_v_zex); if (unlikely(__pyx_t_33 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L1_error)
                __pyx_v_miex = __pyx_t_33;

                /* "yt/geometry/particle_oct_container.pyx":632
 *                                 for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                     miex = encode_morton_64bit(xex, yex, zex)
 *                                     mask[miex] = 1             # <<<<<<<<<<<<<<
 *                                     particle_counts[miex] += 1
 *                                     if miex >= msize:
*/
                __pyx_t_33 = __pyx_v_miex;
                *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_mask.data + __pyx_t_33 * __pyx_v_mask.strides[0]) )) = 1;

                /* "yt/geometry/particle_oct_container.pyx":633
 *                                     miex = encode_morton_64bit(xex, yex, zex)
 *                                     mask[miex] = 1
 *                                     particle_counts[miex] += 1             # <<<<<<<<<<<<<<
 *                                     if miex >= msize:
 *                                         raise IndexError(
*/
                __pyx_t_33 = __pyx_v_miex;
                *((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_particle_counts.data + __pyx_t_33 * __pyx_v_particle_counts.strides[0]) )) += 1;

                /* "yt/geometry/particle_oct_container.pyx":634
 *                                     mask[miex] = 1
 *                                     particle_counts[miex] += 1
 *                                     if miex >= msize:             # <<<<<<<<<<<<<<
 *                                         raise IndexError(
 *                                             "Index for a softening region "
*/
                __pyx_t_14 = (__pyx_v_miex >= __pyx_v_msize);
                if (unlikely(__pyx_t_14)) {

                  /* "yt/geometry/particle_oct_container.pyx":635
 *                                     particle_counts[miex] += 1
 *                                     if miex >= msize:
 *                                         raise IndexError(             # <<<<<<<<<<<<<<
 *                                             "Index for a softening region "
 *                                             f"({miex}) exceeds "
*/
                  __pyx_t_16 = NULL;
                  __Pyx_INCREF(__pyx_builtin_IndexError);
                  __pyx_t_17 = __pyx_builtin_IndexError; 

                  /* "yt/geometry/particle_oct_container.pyx":637
 *                                         raise IndexError(
 *                                             "Index for a softening region "
 *                                             f"({miex}) exceeds "             # <<<<<<<<<<<<<<
 *                                             f"max ({msize})")
 * 
*/
                  __pyx_t_2 = __Pyx_PyLong_From_npy_uint64(__pyx_v_miex); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 637, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_19 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 637, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_19);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                  /* "yt/geometry/particle_oct_container.pyx":638
 *                                             "Index for a softening region "
 *                                             f"({miex}) exceeds "
 *                                             f"max ({msize})")             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
                  __pyx_t_2 = __Pyx_PyLong_From_npy_uint64(__pyx_v_msize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 638, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_18 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 638, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_18);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_34[0] = __pyx_mstate_global->__pyx_kp_u_Index_for_a_softening_region;
                  __pyx_t_34[1] = __pyx_t_19;
                  __pyx_t_34[2] = __pyx_mstate_global->__pyx_kp_u_exceeds_max;
                  __pyx_t_34[3] = __pyx_t_18;
                  __pyx_t_34[4] = __pyx_mstate_global->__pyx_kp_u__5;

                  /* "yt/geometry/particle_oct_container.pyx":636
 *                                     if miex >= msize:
 *                                         raise IndexError(
 *                                             "Index for a softening region "             # <<<<<<<<<<<<<<
 *                                             f"({miex}) exceeds "
 *                                             f"max ({msize})")
*/
                  __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_34, 5, 30 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_19) + 15 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_18) + 1, 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_19) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18));
                  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 636, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                  __pyx_t_21 = 1;
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_2};
                    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+__pyx_t_21, (2-__pyx_t_21) | (__pyx_t_21*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
                    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_1);
                  }
                  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __PYX_ERR(0, 635, __pyx_L1_error)

                  /* "yt/geometry/particle_oct_container.pyx":634
 *                                     mask[miex] = 1
 *                                     particle_counts[miex] += 1
 *                                     if miex >= msize:             # <<<<<<<<<<<<<<
 *                                         raise IndexError(
 *                                             "Index for a softening region "
*/
                }
              }
            }
          }
          __pyx_L26_continue:;
        }
        __pyx_L23_continue:;
      }
      __pyx_L20_continue:;
    }
    __pyx_L5_continue:;
  }

  /* "yt/geometry/particle_oct_container.pyx":539
 *         return self.__coarse_index_data_file(pos, hsml, file_id)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_3, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._ParticleBitmap__coarse_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
  __pyx_L2:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_mask, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_particle_counts, 1);
  __Pyx_RefNannyFinishContext();
}

static void __pyx_fuse_1__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, __pyx_t_5numpy_uint64_t __pyx_v_file_id) {
  __pyx_t_5numpy_int64_t __pyx_v_i;
  __pyx_t_5numpy_int64_t __pyx_v_p;
  __pyx_t_5numpy_uint64_t __pyx_v_mi;
  __pyx_t_5numpy_uint64_t __pyx_v_miex;
  __pyx_t_5numpy_uint64_t __pyx_v_mi_split[3];
  __pyx_t_5numpy_float64_t __pyx_v_ppos[3];
  __pyx_t_5numpy_float64_t __pyx_v_s_ppos[3];
  __pyx_t_5numpy_float64_t __pyx_v_clip_pos_l[3];
  __pyx_t_5numpy_float64_t __pyx_v_clip_pos_r[3];
  int __pyx_v_skip;
  __pyx_t_5numpy_uint64_t __pyx_v_bounds[2][3];
  __pyx_t_5numpy_uint64_t __pyx_v_xex;
  __pyx_t_5numpy_uint64_t __pyx_v_yex;
  __pyx_t_5numpy_uint64_t __pyx_v_zex;
  __pyx_t_5numpy_float64_t __pyx_v_LE[3];
  __pyx_t_5numpy_float64_t __pyx_v_RE[3];
  __pyx_t_5numpy_float64_t __pyx_v_DW[3];
  __pyx_t_5numpy_uint8_t __pyx_v_PER[3];
  __pyx_t_5numpy_float64_t __pyx_v_dds[3];
  __pyx_t_5numpy_float64_t __pyx_v_radius;
  __Pyx_memviewslice __pyx_v_mask = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_particle_counts = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_uint64_t __pyx_v_msize;
  int __pyx_v_axiter[3][2];
  __pyx_t_5numpy_float64_t __pyx_v_axiterv[3][2];
  long __pyx_v_xi;
  long __pyx_v_yi;
  long __pyx_v_zi;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_hsml;
  __Pyx_Buffer __pyx_pybuffer_hsml;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pos;
  __Pyx_Buffer __pyx_pybuffer_pos;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_memviewslice __pyx_t_3 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_int64_t __pyx_t_5;
  npy_intp *__pyx_t_6;
  npy_intp __pyx_t_7;
  npy_intp __pyx_t_8;
  __pyx_t_5numpy_int64_t __pyx_t_9;
  __pyx_t_5numpy_int64_t __pyx_t_10;
  __pyx_t_5numpy_int64_t __pyx_t_11;
  double __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  __pyx_t_5numpy_uint64_t __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20[4];
  size_t __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  __pyx_t_5numpy_uint64_t __pyx_t_25;
  __pyx_t_5numpy_uint64_t __pyx_t_26;
  __pyx_t_5numpy_uint64_t __pyx_t_27;
  __pyx_t_5numpy_uint64_t __pyx_t_28;
  __pyx_t_5numpy_uint64_t __pyx_t_29;
  __pyx_t_5numpy_uint64_t __pyx_t_30;
  __pyx_t_5numpy_uint64_t __pyx_t_31;
  __pyx_t_5numpy_uint64_t __pyx_t_32;
  __pyx_t_5numpy_uint64_t __pyx_t_33;
  PyObject *__pyx_t_34[5];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1_ParticleBitmap__coarse_index_data_file", 0);
  __pyx_pybuffer_pos.pybuffer.buf = NULL;
  __pyx_pybuffer_pos.refcount = 0;
  __pyx_pybuffernd_pos.data = NULL;
  __pyx_pybuffernd_pos.rcbuffer = &__pyx_pybuffer_pos;
  __pyx_pybuffer_hsml.pybuffer.buf = NULL;
  __pyx_pybuffer_hsml.refcount = 0;
  __pyx_pybuffernd_hsml.data = NULL;
  __pyx_pybuffernd_hsml.rcbuffer = &__pyx_pybuffer_hsml;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos.rcbuffer->pybuffer, (PyObject*)__pyx_v_pos, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 539, __pyx_L1_error)
  }
  __pyx_pybuffernd_pos.diminfo[0].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pos.diminfo[0].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pos.diminfo[1].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pos.diminfo[1].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer, (PyObject*)__pyx_v_hsml, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 539, __pyx_L1_error)
  }
  __pyx_pybuffernd_hsml.diminfo[0].strides = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_hsml.diminfo[0].shape = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":563
 *         cdef np.float64_t dds[3]
 *         cdef np.float64_t radius
 *         cdef np.uint8_t[:] mask = self.masks[:, file_id]             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t[:] particle_counts = self.particle_counts
 *         cdef np.uint64_t msize = (1 << (self.index_order1 * 3))
*/
  __pyx_t_1 = __Pyx_PyLong_From_npy_uint64(__pyx_v_file_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_slice[0]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_slice[0]);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_mstate_global->__pyx_slice[0]) != (0)) __PYX_ERR(0, 563, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1) != (0)) __PYX_ERR(0, 563, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_self->masks, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_mask = __pyx_t_3;
  __pyx_t_3.memview = NULL;
  __pyx_t_3.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":564
 *         cdef np.float64_t radius
 *         cdef np.uint8_t[:] mask = self.masks[:, file_id]
 *         cdef np.uint64_t[:] particle_counts = self.particle_counts             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t msize = (1 << (self.index_order1 * 3))
 *         cdef int axiter[3][2]
*/
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint64_t(__pyx_v_self->particle_counts, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 564, __pyx_L1_error)
  __pyx_v_particle_counts = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":565
 *         cdef np.uint8_t[:] mask = self.masks[:, file_id]
 *         cdef np.uint64_t[:] particle_counts = self.particle_counts
 *         cdef np.uint64_t msize = (1 << (self.index_order1 * 3))             # <<<<<<<<<<<<<<
 *         cdef int axiter[3][2]
 *         cdef np.float64_t axiterv[3][2]
*/
  __pyx_v_msize = (1 << (__pyx_v_self->index_order1 * 3));

  /* "yt/geometry/particle_oct_container.pyx":569
 *         cdef np.float64_t axiterv[3][2]
 *         # Copy over things for this file (type cast necessary?)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             LE[i] = self.left_edge[i]
 *             RE[i] = self.right_edge[i]
*/
  for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "yt/geometry/particle_oct_container.pyx":570
 *         # Copy over things for this file (type cast necessary?)
 *         for i in range(3):
 *             LE[i] = self.left_edge[i]             # <<<<<<<<<<<<<<
 *             RE[i] = self.right_edge[i]
 *             PER[i] = self.periodicity[i]
*/
    (__pyx_v_LE[__pyx_v_i]) = (__pyx_v_self->left_edge[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":571
 *         for i in range(3):
 *             LE[i] = self.left_edge[i]
 *             RE[i] = self.right_edge[i]             # <<<<<<<<<<<<<<
 *             PER[i] = self.periodicity[i]
 *             dds[i] = self.dds_mi1[i]
*/
    (__pyx_v_RE[__pyx_v_i]) = (__pyx_v_self->right_edge[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":572
 *             LE[i] = self.left_edge[i]
 *             RE[i] = self.right_edge[i]
 *             PER[i] = self.periodicity[i]             # <<<<<<<<<<<<<<
 *             dds[i] = self.dds_mi1[i]
 *             DW[i] = RE[i] - LE[i]
*/
    (__pyx_v_PER[__pyx_v_i]) = (__pyx_v_self->periodicity[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":573
 *             RE[i] = self.right_edge[i]
 *             PER[i] = self.periodicity[i]
 *             dds[i] = self.dds_mi1[i]             # <<<<<<<<<<<<<<
 *             DW[i] = RE[i] - LE[i]
 *             axiter[i][0] = 0 # We always do an offset of 0
*/
    (__pyx_v_dds[__pyx_v_i]) = (__pyx_v_self->dds_mi1[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":574
 *             PER[i] = self.periodicity[i]
 *             dds[i] = self.dds_mi1[i]
 *             DW[i] = RE[i] - LE[i]             # <<<<<<<<<<<<<<
 *             axiter[i][0] = 0 # We always do an offset of 0
 *             axiterv[i][0] = 0.0
*/
    (__pyx_v_DW[__pyx_v_i]) = ((__pyx_v_RE[__pyx_v_i]) - (__pyx_v_LE[__pyx_v_i]));

    /* "yt/geometry/particle_oct_container.pyx":575
 *             dds[i] = self.dds_mi1[i]
 *             DW[i] = RE[i] - LE[i]
 *             axiter[i][0] = 0 # We always do an offset of 0             # <<<<<<<<<<<<<<
 *             axiterv[i][0] = 0.0
 *         # Mark index of particles that are in this file
*/
    ((__pyx_v_axiter[__pyx_v_i])[0]) = 0;

    /* "yt/geometry/particle_oct_container.pyx":576
 *             DW[i] = RE[i] - LE[i]
 *             axiter[i][0] = 0 # We always do an offset of 0
 *             axiterv[i][0] = 0.0             # <<<<<<<<<<<<<<
 *         # Mark index of particles that are in this file
 *         for p in range(pos.shape[0]):
*/
    ((__pyx_v_axiterv[__pyx_v_i])[0]) = 0.0;
  }

  /* "yt/geometry/particle_oct_container.pyx":578
 *             axiterv[i][0] = 0.0
 *         # Mark index of particles that are in this file
 *         for p in range(pos.shape[0]):             # <<<<<<<<<<<<<<
 *             skip = 0
 *             for i in range(3):
*/
  __pyx_t_6 = __pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_pos)); if (unlikely(__pyx_t_6 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 578, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_6[0]);
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_8; __pyx_t_5+=1) {
    __pyx_v_p = __pyx_t_5;

    /* "yt/geometry/particle_oct_container.pyx":579
 *         # Mark index of particles that are in this file
 *         for p in range(pos.shape[0]):
 *             skip = 0             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 axiter[i][1] = 999
*/
    __pyx_v_skip = 0;

    /* "yt/geometry/particle_oct_container.pyx":580
 *         for p in range(pos.shape[0]):
 *             skip = 0
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 axiter[i][1] = 999
 *                 # Skip particles outside the domain
*/
    for (__pyx_t_9 = 0; __pyx_t_9 < 3; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "yt/geometry/particle_oct_container.pyx":581
 *             skip = 0
 *             for i in range(3):
 *                 axiter[i][1] = 999             # <<<<<<<<<<<<<<
 *                 # Skip particles outside the domain
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
*/
      ((__pyx_v_axiter[__pyx_v_i])[1]) = 0x3E7;

      /* "yt/geometry/particle_oct_container.pyx":583
 *                 axiter[i][1] = 999
 *                 # Skip particles outside the domain
 *                 if not (LE[i] <= pos[p, i] < RE[i]):             # <<<<<<<<<<<<<<
 *                     skip = 1
 *                     break
*/
      __pyx_t_10 = __pyx_v_p;
      __pyx_t_11 = __pyx_v_i;
      __pyx_t_12 = (*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_pos.diminfo[1].strides));
      __pyx_t_13 = ((__pyx_v_LE[__pyx_v_i]) <= __pyx_t_12);
      if (__pyx_t_13) {
        __pyx_t_13 = (__pyx_t_12 < (__pyx_v_RE[__pyx_v_i]));
      }
      __pyx_t_14 = (!__pyx_t_13);
      if (__pyx_t_14) {

        /* "yt/geometry/particle_oct_container.pyx":584
 *                 # Skip particles outside the domain
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
 *                     skip = 1             # <<<<<<<<<<<<<<
 *                     break
 *                 ppos[i] = pos[p,i]
*/
        __pyx_v_skip = 1;

        /* "yt/geometry/particle_oct_container.pyx":585
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
 *                     skip = 1
 *                     break             # <<<<<<<<<<<<<<
 *                 ppos[i] = pos[p,i]
 *             if skip == 1: continue
*/
        goto __pyx_L8_break;

        /* "yt/geometry/particle_oct_container.pyx":583
 *                 axiter[i][1] = 999
 *                 # Skip particles outside the domain
 *                 if not (LE[i] <= pos[p, i] < RE[i]):             # <<<<<<<<<<<<<<
 *                     skip = 1
 *                     break
*/
      }

      /* "yt/geometry/particle_oct_container.pyx":586
 *                     skip = 1
 *                     break
 *                 ppos[i] = pos[p,i]             # <<<<<<<<<<<<<<
 *             if skip == 1: continue
 *             mi = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,
*/
      __pyx_t_11 = __pyx_v_p;
      __pyx_t_10 = __pyx_v_i;
      (__pyx_v_ppos[__pyx_v_i]) = (*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_pos.diminfo[1].strides));
    }
    __pyx_L8_break:;

    /* "yt/geometry/particle_oct_container.pyx":587
 *                     break
 *                 ppos[i] = pos[p,i]
 *             if skip == 1: continue             # <<<<<<<<<<<<<<
 *             mi = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,
 *                                           dds, mi_split)
*/
    __pyx_t_14 = (__pyx_v_skip == 1);
    if (__pyx_t_14) {
      goto __pyx_L5_continue;
    }

    /* "yt/geometry/particle_oct_container.pyx":588
 *                 ppos[i] = pos[p,i]
 *             if skip == 1: continue
 *             mi = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,             # <<<<<<<<<<<<<<
 *                                           dds, mi_split)
 *             mask[mi] = 1
*/
    __pyx_t_15 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds((__pyx_v_ppos[0]), (__pyx_v_ppos[1]), (__pyx_v_ppos[2]), __pyx_v_LE, __pyx_v_dds, __pyx_v_mi_split); if (unlikely(__pyx_t_15 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 588, __pyx_L1_error)
    __pyx_v_mi = __pyx_t_15;

    /* "yt/geometry/particle_oct_container.pyx":590
 *             mi = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,
 *                                           dds, mi_split)
 *             mask[mi] = 1             # <<<<<<<<<<<<<<
 *             particle_counts[mi] += 1
 *             # Expand mask by softening
*/
    __pyx_t_15 = __pyx_v_mi;
    *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_mask.data + __pyx_t_15 * __pyx_v_mask.strides[0]) )) = 1;

    /* "yt/geometry/particle_oct_container.pyx":591
 *                                           dds, mi_split)
 *             mask[mi] = 1
 *             particle_counts[mi] += 1             # <<<<<<<<<<<<<<
 *             # Expand mask by softening
 *             if hsml is None:
*/
    __pyx_t_15 = __pyx_v_mi;
    *((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_particle_counts.data + __pyx_t_15 * __pyx_v_particle_counts.strides[0]) )) += 1;

    /* "yt/geometry/particle_oct_container.pyx":593
 *             particle_counts[mi] += 1
 *             # Expand mask by softening
 *             if hsml is None:             # <<<<<<<<<<<<<<
 *                 continue
 *             if hsml[p] < 0:
*/
    __pyx_t_14 = (((PyObject *)__pyx_v_hsml) == Py_None);
    if (__pyx_t_14) {

      /* "yt/geometry/particle_oct_container.pyx":594
 *             # Expand mask by softening
 *             if hsml is None:
 *                 continue             # <<<<<<<<<<<<<<
 *             if hsml[p] < 0:
 *                 raise RuntimeError(
*/
      goto __pyx_L5_continue;

      /* "yt/geometry/particle_oct_container.pyx":593
 *             particle_counts[mi] += 1
 *             # Expand mask by softening
 *             if hsml is None:             # <<<<<<<<<<<<<<
 *                 continue
 *             if hsml[p] < 0:
*/
    }

    /* "yt/geometry/particle_oct_container.pyx":595
 *             if hsml is None:
 *                 continue
 *             if hsml[p] < 0:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(
 *                     f"Smoothing length for particle {p} is negative with "
*/
    __pyx_t_9 = __pyx_v_p;
    __pyx_t_14 = ((*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_hsml.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_hsml.diminfo[0].strides)) < 0.0);
    if (unlikely(__pyx_t_14)) {

      /* "yt/geometry/particle_oct_container.pyx":596
 *                 continue
 *             if hsml[p] < 0:
 *                 raise RuntimeError(             # <<<<<<<<<<<<<<
 *                     f"Smoothing length for particle {p} is negative with "
 *                     f"value {hsml[p]}")
*/
      __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_builtin_RuntimeError);
      __pyx_t_16 = __pyx_builtin_RuntimeError; 

      /* "yt/geometry/particle_oct_container.pyx":597
 *             if hsml[p] < 0:
 *                 raise RuntimeError(
 *                     f"Smoothing length for particle {p} is negative with "             # <<<<<<<<<<<<<<
 *                     f"value {hsml[p]}")
 *             radius = hsml[p]
*/
      __pyx_t_17 = __Pyx_PyLong_From_npy_int64(__pyx_v_p); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_18 = __Pyx_PyObject_FormatSimple(__pyx_t_17, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

      /* "yt/geometry/particle_oct_container.pyx":598
 *                 raise RuntimeError(
 *                     f"Smoothing length for particle {p} is negative with "
 *                     f"value {hsml[p]}")             # <<<<<<<<<<<<<<
 *             radius = hsml[p]
 *             # We first check if we're bounded within the domain; this follows the logic in the
*/
      __pyx_t_9 = __pyx_v_p;
      __pyx_t_17 = PyFloat_FromDouble((*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_hsml.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_hsml.diminfo[0].strides))); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_19 = __Pyx_PyObject_FormatSimple(__pyx_t_17, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __pyx_t_20[0] = __pyx_mstate_global->__pyx_kp_u_Smoothing_length_for_particle;
      __pyx_t_20[1] = __pyx_t_18;
      __pyx_t_20[2] = __pyx_mstate_global->__pyx_kp_u_is_negative_with_value;
      __pyx_t_20[3] = __pyx_t_19;

      /* "yt/geometry/particle_oct_container.pyx":597
 *             if hsml[p] < 0:
 *                 raise RuntimeError(
 *                     f"Smoothing length for particle {p} is negative with "             # <<<<<<<<<<<<<<
 *                     f"value {hsml[p]}")
 *             radius = hsml[p]
*/
      __pyx_t_17 = __Pyx_PyUnicode_Join(__pyx_t_20, 4, 30 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_18) + 24 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_19), 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_19));
      if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 597, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_21 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_17};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+__pyx_t_21, (2-__pyx_t_21) | (__pyx_t_21*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(0, 596, __pyx_L1_error)

      /* "yt/geometry/particle_oct_container.pyx":595
 *             if hsml is None:
 *                 continue
 *             if hsml[p] < 0:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(
 *                     f"Smoothing length for particle {p} is negative with "
*/
    }

    /* "yt/geometry/particle_oct_container.pyx":599
 *                     f"Smoothing length for particle {p} is negative with "
 *                     f"value {hsml[p]}")
 *             radius = hsml[p]             # <<<<<<<<<<<<<<
 *             # We first check if we're bounded within the domain; this follows the logic in the
 *             # pixelize_cartesian routine.  We assume that no smoothing
*/
    __pyx_t_9 = __pyx_v_p;
    __pyx_v_radius = (*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_hsml.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_hsml.diminfo[0].strides));

    /* "yt/geometry/particle_oct_container.pyx":603
 *             # pixelize_cartesian routine.  We assume that no smoothing
 *             # length can wrap around both directions.
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 if PER[i] and ppos[i] - radius < LE[i]:
 *                     axiter[i][1] = +1
*/
    for (__pyx_t_9 = 0; __pyx_t_9 < 3; __pyx_t_9+=1) {
      __pyx_v_i = __pyx_t_9;

      /* "yt/geometry/particle_oct_container.pyx":604
 *             # length can wrap around both directions.
 *             for i in range(3):
 *                 if PER[i] and ppos[i] - radius < LE[i]:             # <<<<<<<<<<<<<<
 *                     axiter[i][1] = +1
 *                     axiterv[i][1] = DW[i]
*/
      __pyx_t_13 = ((__pyx_v_PER[__pyx_v_i]) != 0);
      if (__pyx_t_13) {
      } else {
        __pyx_t_14 = __pyx_t_13;
        goto __pyx_L16_bool_binop_done;
      }
      __pyx_t_13 = (((__pyx_v_ppos[__pyx_v_i]) - __pyx_v_radius) < (__pyx_v_LE[__pyx_v_i]));
      __pyx_t_14 = __pyx_t_13;
      __pyx_L16_bool_binop_done:;
      if (__pyx_t_14) {

        /* "yt/geometry/particle_oct_container.pyx":605
 *             for i in range(3):
 *                 if PER[i] and ppos[i] - radius < LE[i]:
 *                     axiter[i][1] = +1             # <<<<<<<<<<<<<<
 *                     axiterv[i][1] = DW[i]
 *                 elif PER[i] and ppos[i] + radius > RE[i]:
*/
        ((__pyx_v_axiter[__pyx_v_i])[1]) = 1;

        /* "yt/geometry/particle_oct_container.pyx":606
 *                 if PER[i] and ppos[i] - radius < LE[i]:
 *                     axiter[i][1] = +1
 *                     axiterv[i][1] = DW[i]             # <<<<<<<<<<<<<<
 *                 elif PER[i] and ppos[i] + radius > RE[i]:
 *                     axiter[i][1] = -1
*/
        ((__pyx_v_axiterv[__pyx_v_i])[1]) = (__pyx_v_DW[__pyx_v_i]);

        /* "yt/geometry/particle_oct_container.pyx":604
 *             # length can wrap around both directions.
 *             for i in range(3):
 *                 if PER[i] and ppos[i] - radius < LE[i]:             # <<<<<<<<<<<<<<
 *                     axiter[i][1] = +1
 *                     axiterv[i][1] = DW[i]
*/
        goto __pyx_L15;
      }

      /* "yt/geometry/particle_oct_container.pyx":607
 *                     axiter[i][1] = +1
 *                     axiterv[i][1] = DW[i]
 *                 elif PER[i] and ppos[i] + radius > RE[i]:             # <<<<<<<<<<<<<<
 *                     axiter[i][1] = -1
 *                     axiterv[i][1] = -DW[i]
*/
      __pyx_t_13 = ((__pyx_v_PER[__pyx_v_i]) != 0);
      if (__pyx_t_13) {
      } else {
        __pyx_t_14 = __pyx_t_13;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_13 = (((__pyx_v_ppos[__pyx_v_i]) + __pyx_v_radius) > (__pyx_v_RE[__pyx_v_i]));
      __pyx_t_14 = __pyx_t_13;
      __pyx_L18_bool_binop_done:;
      if (__pyx_t_14) {

        /* "yt/geometry/particle_oct_container.pyx":608
 *                     axiterv[i][1] = DW[i]
 *                 elif PER[i] and ppos[i] + radius > RE[i]:
 *                     axiter[i][1] = -1             # <<<<<<<<<<<<<<
 *                     axiterv[i][1] = -DW[i]
 *             for xi in range(2):
*/
        ((__pyx_v_axiter[__pyx_v_i])[1]) = -1;

        /* "yt/geometry/particle_oct_container.pyx":609
 *                 elif PER[i] and ppos[i] + radius > RE[i]:
 *                     axiter[i][1] = -1
 *                     axiterv[i][1] = -DW[i]             # <<<<<<<<<<<<<<
 *             for xi in range(2):
 *                 if axiter[0][xi] == 999: continue
*/
        ((__pyx_v_axiterv[__pyx_v_i])[1]) = (-(__pyx_v_DW[__pyx_v_i]));

        /* "yt/geometry/particle_oct_container.pyx":607
 *                     axiter[i][1] = +1
 *                     axiterv[i][1] = DW[i]
 *                 elif PER[i] and ppos[i] + radius > RE[i]:             # <<<<<<<<<<<<<<
 *                     axiter[i][1] = -1
 *                     axiterv[i][1] = -DW[i]
*/
      }
      __pyx_L15:;
    }

    /* "yt/geometry/particle_oct_container.pyx":610
 *                     axiter[i][1] = -1
 *                     axiterv[i][1] = -DW[i]
 *             for xi in range(2):             # <<<<<<<<<<<<<<
 *                 if axiter[0][xi] == 999: continue
 *                 s_ppos[0] = ppos[0] + axiterv[0][xi]
*/
    for (__pyx_t_22 = 0; __pyx_t_22 < 2; __pyx_t_22+=1) {
      __pyx_v_xi = __pyx_t_22;

      /* "yt/geometry/particle_oct_container.pyx":611
 *                     axiterv[i][1] = -DW[i]
 *             for xi in range(2):
 *                 if axiter[0][xi] == 999: continue             # <<<<<<<<<<<<<<
 *                 s_ppos[0] = ppos[0] + axiterv[0][xi]
 *                 for yi in range(2):
*/
      __pyx_t_14 = (((__pyx_v_axiter[0])[__pyx_v_xi]) == 0x3E7);
      if (__pyx_t_14) {
        goto __pyx_L20_continue;
      }

      /* "yt/geometry/particle_oct_container.pyx":612
 *             for xi in range(2):
 *                 if axiter[0][xi] == 999: continue
 *                 s_ppos[0] = ppos[0] + axiterv[0][xi]             # <<<<<<<<<<<<<<
 *                 for yi in range(2):
 *                     if axiter[1][yi] == 999: continue
*/
      (__pyx_v_s_ppos[0]) = ((__pyx_v_ppos[0]) + ((__pyx_v_axiterv[0])[__pyx_v_xi]));

      /* "yt/geometry/particle_oct_container.pyx":613
 *                 if axiter[0][xi] == 999: continue
 *                 s_ppos[0] = ppos[0] + axiterv[0][xi]
 *                 for yi in range(2):             # <<<<<<<<<<<<<<
 *                     if axiter[1][yi] == 999: continue
 *                     s_ppos[1] = ppos[1] + axiterv[1][yi]
*/
      for (__pyx_t_23 = 0; __pyx_t_23 < 2; __pyx_t_23+=1) {
        __pyx_v_yi = __pyx_t_23;

        /* "yt/geometry/particle_oct_container.pyx":614
 *                 s_ppos[0] = ppos[0] + axiterv[0][xi]
 *                 for yi in range(2):
 *                     if axiter[1][yi] == 999: continue             # <<<<<<<<<<<<<<
 *                     s_ppos[1] = ppos[1] + axiterv[1][yi]
 *                     for zi in range(2):
*/
        __pyx_t_14 = (((__pyx_v_axiter[1])[__pyx_v_yi]) == 0x3E7);
        if (__pyx_t_14) {
          goto __pyx_L23_continue;
        }

        /* "yt/geometry/particle_oct_container.pyx":615
 *                 for yi in range(2):
 *                     if axiter[1][yi] == 999: continue
 *                     s_ppos[1] = ppos[1] + axiterv[1][yi]             # <<<<<<<<<<<<<<
 *                     for zi in range(2):
 *                         if axiter[2][zi] == 999: continue
*/
        (__pyx_v_s_ppos[1]) = ((__pyx_v_ppos[1]) + ((__pyx_v_axiterv[1])[__pyx_v_yi]));

        /* "yt/geometry/particle_oct_container.pyx":616
 *                     if axiter[1][yi] == 999: continue
 *                     s_ppos[1] = ppos[1] + axiterv[1][yi]
 *                     for zi in range(2):             # <<<<<<<<<<<<<<
 *                         if axiter[2][zi] == 999: continue
 *                         s_ppos[2] = ppos[2] + axiterv[2][zi]
*/
        for (__pyx_t_24 = 0; __pyx_t_24 < 2; __pyx_t_24+=1) {
          __pyx_v_zi = __pyx_t_24;

          /* "yt/geometry/particle_oct_container.pyx":617
 *                     s_ppos[1] = ppos[1] + axiterv[1][yi]
 *                     for zi in range(2):
 *                         if axiter[2][zi] == 999: continue             # <<<<<<<<<<<<<<
 *                         s_ppos[2] = ppos[2] + axiterv[2][zi]
 *                         # OK, now we compute the left and right edges for this shift.
*/
          __pyx_t_14 = (((__pyx_v_axiter[2])[__pyx_v_zi]) == 0x3E7);
          if (__pyx_t_14) {
            goto __pyx_L26_continue;
          }

          /* "yt/geometry/particle_oct_container.pyx":618
 *                     for zi in range(2):
 *                         if axiter[2][zi] == 999: continue
 *                         s_ppos[2] = ppos[2] + axiterv[2][zi]             # <<<<<<<<<<<<<<
 *                         # OK, now we compute the left and right edges for this shift.
 *                         for i in range(3):
*/
          (__pyx_v_s_ppos[2]) = ((__pyx_v_ppos[2]) + ((__pyx_v_axiterv[2])[__pyx_v_zi]));

          /* "yt/geometry/particle_oct_container.pyx":620
 *                         s_ppos[2] = ppos[2] + axiterv[2][zi]
 *                         # OK, now we compute the left and right edges for this shift.
 *                         for i in range(3):             # <<<<<<<<<<<<<<
 *                             clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds[i]/10)
 *                             clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds[i]/10)
*/
          for (__pyx_t_9 = 0; __pyx_t_9 < 3; __pyx_t_9+=1) {
            __pyx_v_i = __pyx_t_9;

            /* "yt/geometry/particle_oct_container.pyx":621
 *                         # OK, now we compute the left and right edges for this shift.
 *                         for i in range(3):
 *                             clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds[i]/10)             # <<<<<<<<<<<<<<
 *                             clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds[i]/10)
 *                         bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds, bounds[0])
*/
            (__pyx_v_clip_pos_l[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(((__pyx_v_s_ppos[__pyx_v_i]) - __pyx_v_radius), ((__pyx_v_LE[__pyx_v_i]) + ((__pyx_v_dds[__pyx_v_i]) / 10.0)));

            /* "yt/geometry/particle_oct_container.pyx":622
 *                         for i in range(3):
 *                             clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds[i]/10)
 *                             clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds[i]/10)             # <<<<<<<<<<<<<<
 *                         bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds, bounds[0])
 *                         bounded_morton_split_dds(clip_pos_r[0], clip_pos_r[1], clip_pos_r[2], LE, dds, bounds[1])
*/
            (__pyx_v_clip_pos_r[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(((__pyx_v_s_ppos[__pyx_v_i]) + __pyx_v_radius), ((__pyx_v_RE[__pyx_v_i]) - ((__pyx_v_dds[__pyx_v_i]) / 10.0)));
          }

          /* "yt/geometry/particle_oct_container.pyx":623
 *                             clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds[i]/10)
 *                             clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds[i]/10)
 *                         bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds, bounds[0])             # <<<<<<<<<<<<<<
 *                         bounded_morton_split_dds(clip_pos_r[0], clip_pos_r[1], clip_pos_r[2], LE, dds, bounds[1])
 *                         # We go to the upper bound plus one so that we have *inclusive* loops -- the upper bound
*/
          __pyx_t_15 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds((__pyx_v_clip_pos_l[0]), (__pyx_v_clip_pos_l[1]), (__pyx_v_clip_pos_l[2]), __pyx_v_LE, __pyx_v_dds, (__pyx_v_bounds[0])); if (unlikely(__pyx_t_15 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 623, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":624
 *                             clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds[i]/10)
 *                         bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds, bounds[0])
 *                         bounded_morton_split_dds(clip_pos_r[0], clip_pos_r[1], clip_pos_r[2], LE, dds, bounds[1])             # <<<<<<<<<<<<<<
 *                         # We go to the upper bound plus one so that we have *inclusive* loops -- the upper bound
 *                         # is the cell *index*, so we want to make sure we include that cell.  This is also why
*/
          __pyx_t_15 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds((__pyx_v_clip_pos_r[0]), (__pyx_v_clip_pos_r[1]), (__pyx_v_clip_pos_r[2]), __pyx_v_LE, __pyx_v_dds, (__pyx_v_bounds[1])); if (unlikely(__pyx_t_15 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 624, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":628
 *                         # is the cell *index*, so we want to make sure we include that cell.  This is also why
 *                         # we don't need to worry about mi_max being the max index rather than the cell count.
 *                         for xex in range(bounds[0][0], bounds[1][0] + 1):             # <<<<<<<<<<<<<<
 *                             for yex in range(bounds[0][1], bounds[1][1] + 1):
 *                                 for zex in range(bounds[0][2], bounds[1][2] + 1):
*/
          __pyx_t_15 = (((__pyx_v_bounds[1])[0]) + 1);
          __pyx_t_25 = __pyx_t_15;
          for (__pyx_t_26 = ((__pyx_v_bounds[0])[0]); __pyx_t_26 < __pyx_t_25; __pyx_t_26+=1) {
            __pyx_v_xex = __pyx_t_26;

            /* "yt/geometry/particle_oct_container.pyx":629
 *                         # we don't need to worry about mi_max being the max index rather than the cell count.
 *                         for xex in range(bounds[0][0], bounds[1][0] + 1):
 *                             for yex in range(bounds[0][1], bounds[1][1] + 1):             # <<<<<<<<<<<<<<
 *                                 for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                     miex = encode_morton_64bit(xex, yex, zex)
*/
            __pyx_t_27 = (((__pyx_v_bounds[1])[1]) + 1);
            __pyx_t_28 = __pyx_t_27;
            for (__pyx_t_29 = ((__pyx_v_bounds[0])[1]); __pyx_t_29 < __pyx_t_28; __pyx_t_29+=1) {
              __pyx_v_yex = __pyx_t_29;

              /* "yt/geometry/particle_oct_container.pyx":630
 *                         for xex in range(bounds[0][0], bounds[1][0] + 1):
 *                             for yex in range(bounds[0][1], bounds[1][1] + 1):
 *                                 for zex in range(bounds[0][2], bounds[1][2] + 1):             # <<<<<<<<<<<<<<
 *                                     miex = encode_morton_64bit(xex, yex, zex)
 *                                     mask[miex] = 1
*/
              __pyx_t_30 = (((__pyx_v_bounds[1])[2]) + 1);
              __pyx_t_31 = __pyx_t_30;
              for (__pyx_t_32 = ((__pyx_v_bounds[0])[2]); __pyx_t_32 < __pyx_t_31; __pyx_t_32+=1) {
                __pyx_v_zex = __pyx_t_32;

                /* "yt/geometry/particle_oct_container.pyx":631
 *                             for yex in range(bounds[0][1], bounds[1][1] + 1):
 *                                 for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                     miex = encode_morton_64bit(xex, yex, zex)             # <<<<<<<<<<<<<<
 *                                     mask[miex] = 1
 *                                     particle_counts[miex] += 1
*/
                __pyx_t_33 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_v_xex, __pyx_v_yex, __pyx_v_zex); if (unlikely(__pyx_t_33 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 631, __pyx_L1_error)
                __pyx_v_miex = __pyx_t_33;

                /* "yt/geometry/particle_oct_container.pyx":632
 *                                 for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                     miex = encode_morton_64bit(xex, yex, zex)
 *                                     mask[miex] = 1             # <<<<<<<<<<<<<<
 *                                     particle_counts[miex] += 1
 *                                     if miex >= msize:
*/
                __pyx_t_33 = __pyx_v_miex;
                *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_mask.data + __pyx_t_33 * __pyx_v_mask.strides[0]) )) = 1;

                /* "yt/geometry/particle_oct_container.pyx":633
 *                                     miex = encode_morton_64bit(xex, yex, zex)
 *                                     mask[miex] = 1
 *                                     particle_counts[miex] += 1             # <<<<<<<<<<<<<<
 *                                     if miex >= msize:
 *                                         raise IndexError(
*/
                __pyx_t_33 = __pyx_v_miex;
                *((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_particle_counts.data + __pyx_t_33 * __pyx_v_particle_counts.strides[0]) )) += 1;

                /* "yt/geometry/particle_oct_container.pyx":634
 *                                     mask[miex] = 1
 *                                     particle_counts[miex] += 1
 *                                     if miex >= msize:             # <<<<<<<<<<<<<<
 *                                         raise IndexError(
 *                                             "Index for a softening region "
*/
                __pyx_t_14 = (__pyx_v_miex >= __pyx_v_msize);
                if (unlikely(__pyx_t_14)) {

                  /* "yt/geometry/particle_oct_container.pyx":635
 *                                     particle_counts[miex] += 1
 *                                     if miex >= msize:
 *                                         raise IndexError(             # <<<<<<<<<<<<<<
 *                                             "Index for a softening region "
 *                                             f"({miex}) exceeds "
*/
                  __pyx_t_16 = NULL;
                  __Pyx_INCREF(__pyx_builtin_IndexError);
                  __pyx_t_17 = __pyx_builtin_IndexError; 

                  /* "yt/geometry/particle_oct_container.pyx":637
 *                                         raise IndexError(
 *                                             "Index for a softening region "
 *                                             f"({miex}) exceeds "             # <<<<<<<<<<<<<<
 *                                             f"max ({msize})")
 * 
*/
                  __pyx_t_2 = __Pyx_PyLong_From_npy_uint64(__pyx_v_miex); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 637, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_19 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 637, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_19);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

                  /* "yt/geometry/particle_oct_container.pyx":638
 *                                             "Index for a softening region "
 *                                             f"({miex}) exceeds "
 *                                             f"max ({msize})")             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
                  __pyx_t_2 = __Pyx_PyLong_From_npy_uint64(__pyx_v_msize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 638, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __pyx_t_18 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 638, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_18);
                  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __pyx_t_34[0] = __pyx_mstate_global->__pyx_kp_u_Index_for_a_softening_region;
                  __pyx_t_34[1] = __pyx_t_19;
                  __pyx_t_34[2] = __pyx_mstate_global->__pyx_kp_u_exceeds_max;
                  __pyx_t_34[3] = __pyx_t_18;
                  __pyx_t_34[4] = __pyx_mstate_global->__pyx_kp_u__5;

                  /* "yt/geometry/particle_oct_container.pyx":636
 *                                     if miex >= msize:
 *                                         raise IndexError(
 *                                             "Index for a softening region "             # <<<<<<<<<<<<<<
 *                                             f"({miex}) exceeds "
 *                                             f"max ({msize})")
*/
                  __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_34, 5, 30 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_19) + 15 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_18) + 1, 127 | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_19) | __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18));
                  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 636, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_2);
                  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                  __pyx_t_21 = 1;
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_2};
                    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+__pyx_t_21, (2-__pyx_t_21) | (__pyx_t_21*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
                    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
                    __Pyx_GOTREF(__pyx_t_1);
                  }
                  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __PYX_ERR(0, 635, __pyx_L1_error)

                  /* "yt/geometry/particle_oct_container.pyx":634
 *                                     mask[miex] = 1
 *                                     particle_counts[miex] += 1
 *                                     if miex >= msize:             # <<<<<<<<<<<<<<
 *                                         raise IndexError(
 *                                             "Index for a softening region "
*/
                }
              }
            }
          }
          __pyx_L26_continue:;
        }
        __pyx_L23_continue:;
      }
      __pyx_L20_continue:;
    }
    __pyx_L5_continue:;
  }

  /* "yt/geometry/particle_oct_container.pyx":539
 *         return self.__coarse_index_data_file(pos, hsml, file_id)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_3, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._ParticleBitmap__coarse_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
  __pyx_L2:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_mask, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_particle_counts, 1);
  __Pyx_RefNannyFinishContext();
}

/* "yt/geometry/particle_oct_container.pyx":640
 *                                             f"max ({msize})")
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_11_set_coarse_index_data_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_11_set_coarse_index_data_file = {"_set_coarse_index_data_file", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_11_set_coarse_index_data_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_11_set_coarse_index_data_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_5numpy_uint64_t __pyx_v_file_id;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_coarse_index_data_file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_file_id,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 640, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 640, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_set_coarse_index_data_file", 0) < 0) __PYX_ERR(0, 640, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_set_coarse_index_data_file", 1, 1, 1, i); __PYX_ERR(0, 640, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 640, __pyx_L3_error)
    }
    __pyx_v_file_id = __Pyx_PyLong_As_npy_uint64(values[0]); if (unlikely((__pyx_v_file_id == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 643, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_set_coarse_index_data_file", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 640, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._set_coarse_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10_set_coarse_index_data_file(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_file_id);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10_set_coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_file_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_coarse_index_data_file", 0);

  /* "yt/geometry/particle_oct_container.pyx":644
 *     @cython.cdivision(True)
 *     def _set_coarse_index_data_file(self, np.uint64_t file_id):
 *         return self.__set_coarse_index_data_file(file_id)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self->__pyx_vtab)->_ParticleBitmap__set_coarse_index_data_file(__pyx_v_self, __pyx_v_file_id); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 644, __pyx_L1_error)
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":640
 *                                             f"max ({msize})")
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._set_coarse_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":646
 *         return self.__set_coarse_index_data_file(file_id)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__set_coarse_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_file_id) {
  __pyx_t_5numpy_int64_t __pyx_v_i;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *__pyx_v_bitmasks = 0;
  PyArrayObject *__pyx_v_mask = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_mask;
  __Pyx_Buffer __pyx_pybuffer_mask;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  npy_intp *__pyx_t_3;
  npy_intp __pyx_t_4;
  npy_intp __pyx_t_5;
  __pyx_t_5numpy_int64_t __pyx_t_6;
  __pyx_t_5numpy_int64_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_ParticleBitmap__set_coarse_index_data_file", 0);
  __pyx_pybuffer_mask.pybuffer.buf = NULL;
  __pyx_pybuffer_mask.refcount = 0;
  __pyx_pybuffernd_mask.data = NULL;
  __pyx_pybuffernd_mask.rcbuffer = &__pyx_pybuffer_mask;

  /* "yt/geometry/particle_oct_container.pyx":651
 *     cdef void __set_coarse_index_data_file(self, np.uint64_t file_id):
 *         cdef np.int64_t i
 *         cdef FileBitmasks bitmasks = self.bitmasks             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint8_t, ndim=1] mask = self.masks[:,file_id]
 *         # Add in order
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->bitmasks);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_bitmasks = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":652
 *         cdef np.int64_t i
 *         cdef FileBitmasks bitmasks = self.bitmasks
 *         cdef np.ndarray[np.uint8_t, ndim=1] mask = self.masks[:,file_id]             # <<<<<<<<<<<<<<
 *         # Add in order
 *         for i in range(mask.shape[0]):
*/
  __pyx_t_1 = __Pyx_PyLong_From_npy_uint64(__pyx_v_file_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_slice[0]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_slice[0]);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_mstate_global->__pyx_slice[0]) != (0)) __PYX_ERR(0, 652, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1) != (0)) __PYX_ERR(0, 652, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_self->masks, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 652, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_mask.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_mask = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_mask.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 652, __pyx_L1_error)
    } else {__pyx_pybuffernd_mask.diminfo[0].strides = __pyx_pybuffernd_mask.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_mask.diminfo[0].shape = __pyx_pybuffernd_mask.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_v_mask = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":654
 *         cdef np.ndarray[np.uint8_t, ndim=1] mask = self.masks[:,file_id]
 *         # Add in order
 *         for i in range(mask.shape[0]):             # <<<<<<<<<<<<<<
 *             if mask[i] == 1:
 *                 bitmasks._set_coarse(file_id, i)
*/
  __pyx_t_3 = __pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_mask)); if (unlikely(__pyx_t_3 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 654, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3[0]);
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "yt/geometry/particle_oct_container.pyx":655
 *         # Add in order
 *         for i in range(mask.shape[0]):
 *             if mask[i] == 1:             # <<<<<<<<<<<<<<
 *                 bitmasks._set_coarse(file_id, i)
 * 
*/
    __pyx_t_7 = __pyx_v_i;
    __pyx_t_8 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_mask.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_mask.diminfo[0].strides)) == 1);
    if (__pyx_t_8) {

      /* "yt/geometry/particle_oct_container.pyx":656
 *         for i in range(mask.shape[0]):
 *             if mask[i] == 1:
 *                 bitmasks._set_coarse(file_id, i)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
      ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_bitmasks->__pyx_vtab)->_set_coarse(__pyx_v_bitmasks, __pyx_v_file_id, __pyx_v_i); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 656, __pyx_L1_error)

      /* "yt/geometry/particle_oct_container.pyx":655
 *         # Add in order
 *         for i in range(mask.shape[0]):
 *             if mask[i] == 1:             # <<<<<<<<<<<<<<
 *                 bitmasks._set_coarse(file_id, i)
 * 
*/
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":646
 *         return self.__set_coarse_index_data_file(file_id)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._ParticleBitmap__set_coarse_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bitmasks);
  __Pyx_XDECREF((PyObject *)__pyx_v_mask);
  __Pyx_RefNannyFinishContext();
}

/* "yt/geometry/particle_oct_container.pyx":658
 *                 bitmasks._set_coarse(file_id, i)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_13_refined_index_data_file(PyObject *__pyx_v_signatures, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_13_refined_index_data_file = {"_refined_index_data_file", (PyCFunction)(void(*)(void))(PyCFunctionWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_13_refined_index_data_file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_13_refined_index_data_file(PyObject *__pyx_v_signatures, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED PyObject *__pyx_v_defaults = 0;
  PyObject *__pyx_v__fused_sigindex_ref = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_fused_cpdef (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_args,&__pyx_mstate_global->__pyx_n_u_kwargs,&__pyx_mstate_global->__pyx_n_u_defaults,&__pyx_mstate_global->__pyx_n_u_fused_sigindex_ref,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 658, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__pyx_fused_cpdef", 0) < 0) __PYX_ERR(0, 658, __pyx_L3_error)
      if (!values[3]) values[3] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k__17);
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 0, 3, 4, i); __PYX_ERR(0, 658, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 658, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[3]) values[3] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k__17);
    }
    __pyx_v_args = values[0];
    __pyx_v_kwargs = values[1];
    __pyx_v_defaults = values[2];
    __pyx_v__fused_sigindex_ref = values[3];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 658, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12_refined_index_data_file(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_signatures), __pyx_v_args, __pyx_v_kwargs, __pyx_v_defaults, __pyx_v__fused_sigindex_ref);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12_refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults, PyObject *__pyx_v__fused_sigindex_ref) {
  PyObject *__pyx_v_search_list = 0;
  PyObject *__pyx_v_sigindex_node = 0;
  PyObject *__pyx_v_dest_sig = NULL;
  PyTypeObject *__pyx_v_ndarray = 0;
  PyObject *__pyx_v_arg_as_memoryview = 0;
  __Pyx_memviewslice __pyx_v_memslice;
  Py_ssize_t __pyx_v_itemsize;
  CYTHON_UNUSED int __pyx_v_dtype_signed;
  Py_UCS4 __pyx_v_kind;
  PyObject *__pyx_v_arg = NULL;
  PyObject *__pyx_v_dtype = NULL;
  PyObject *__pyx_v_arg_base = NULL;
  PyObject *__pyx_v_fused_sigindex = NULL;
  PyObject *__pyx_v_sig = NULL;
  PyObject *__pyx_v_sig_series = NULL;
  PyObject *__pyx_v_last_type = NULL;
  PyObject *__pyx_v_sig_type = NULL;
  PyObject *__pyx_v_sigindex_matches = NULL;
  PyObject *__pyx_v_sigindex_candidates = NULL;
  PyObject *__pyx_v_dst_type = NULL;
  PyObject *__pyx_v_found_matches = NULL;
  PyObject *__pyx_v_found_candidates = NULL;
  PyObject *__pyx_v_sn = NULL;
  PyObject *__pyx_v_type_match = NULL;
  PyObject *__pyx_v_candidates = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10[4];
  PyObject *__pyx_t_11 = NULL;
  size_t __pyx_t_12;
  long __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  __Pyx_memviewslice __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  int __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  int __pyx_t_22;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_refined_index_data_file", 0);
  __Pyx_INCREF(__pyx_v_kwargs);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, Py_None) != (0)) __PYX_ERR(0, 658, __pyx_L1_error);
  __pyx_v_dest_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
  __pyx_t_4 = (!__pyx_t_3);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_kwargs, Py_None);
  }
  __pyx_t_1 = ((PyObject *)__Pyx_ImportNumPyArrayTypeIfAvailable()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ndarray = ((PyTypeObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_itemsize = -1L;
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 658, __pyx_L1_error)
  __pyx_t_2 = (2 < __pyx_t_5);
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 658, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyTuple_GET_ITEM(((PyObject*)__pyx_v_args), 2);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  __pyx_t_4 = (__pyx_v_kwargs != Py_None);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_mstate_global->__pyx_n_u_pos, ((PyObject*)__pyx_v_kwargs), Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L7_bool_binop_done:;
  if (likely(__pyx_t_2)) {
    if (unlikely(__pyx_v_kwargs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 658, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_kwargs), __pyx_mstate_global->__pyx_n_u_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  /*else*/ {
    __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_builtin_TypeError);
    __pyx_t_7 = __pyx_builtin_TypeError; 
    __pyx_t_8 = __Pyx_PyUnicode_From_long(9, 0, ' ', 'd'); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 658, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 658, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_5, 0, ' ', 'd'); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10[0] = __pyx_mstate_global->__pyx_kp_u_Expected_at_least;
    __pyx_t_10[1] = __pyx_t_8;
    __pyx_t_10[2] = __pyx_mstate_global->__pyx_kp_u_arguments_got;
    __pyx_t_10[3] = __pyx_t_9;
    __pyx_t_11 = __Pyx_PyUnicode_Join(__pyx_t_10, 4, 18 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8) + 16 + __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9), 127);
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_12 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_11};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_L6:;
  while (1) {
    __pyx_t_2 = (__pyx_v_ndarray != ((PyTypeObject*)Py_None));
    if (__pyx_t_2) {
      __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_v_ndarray); 
      if (__pyx_t_2) {
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_dtype = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L12;
      }
      __pyx_t_2 = __pyx_memoryview_check(__pyx_v_arg); 
      if (__pyx_t_2) {
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_mstate_global->__pyx_n_u_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_arg_base = __pyx_t_1;
        __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_arg_base, __pyx_v_ndarray); 
        if (__pyx_t_2) {
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg_base, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_v_dtype = __pyx_t_1;
          __pyx_t_1 = 0;
          goto __pyx_L13;
        }
        /*else*/ {
          __Pyx_INCREF(Py_None);
          __pyx_v_dtype = Py_None;
        }
        __pyx_L13:;
        goto __pyx_L12;
      }
      /*else*/ {
        __Pyx_INCREF(Py_None);
        __pyx_v_dtype = Py_None;
      }
      __pyx_L12:;
      __pyx_v_itemsize = -1L;
      __pyx_t_2 = (__pyx_v_dtype != Py_None);
      if (__pyx_t_2) {
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_mstate_global->__pyx_n_u_itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_itemsize = __pyx_t_5;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_mstate_global->__pyx_n_u_kind); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = __Pyx_PyObject_Ord(__pyx_t_1); if (unlikely(__pyx_t_13 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_v_kind = __pyx_t_13;
        __pyx_v_dtype_signed = (__pyx_v_kind == 0x69);
        switch (__pyx_v_kind) {
          case 0x69:
          case 0x75:
          break;
          case 0x66:
          __pyx_t_4 = ((sizeof(float)) == __pyx_v_itemsize);
          if (__pyx_t_4) {
          } else {
            __pyx_t_2 = __pyx_t_4;
            goto __pyx_L16_bool_binop_done;
          }
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_mstate_global->__pyx_n_u_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_4 = (((Py_ssize_t)__pyx_t_5) == 2);
          __pyx_t_2 = __pyx_t_4;
          __pyx_L16_bool_binop_done:;
          if (__pyx_t_2) {
            if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_mstate_global->__pyx_n_u_float, long, 1, __Pyx_PyLong_From_long, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
            goto __pyx_L10_break;
          }
          __pyx_t_4 = ((sizeof(double)) == __pyx_v_itemsize);
          if (__pyx_t_4) {
          } else {
            __pyx_t_2 = __pyx_t_4;
            goto __pyx_L19_bool_binop_done;
          }
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_mstate_global->__pyx_n_u_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_4 = (((Py_ssize_t)__pyx_t_5) == 2);
          __pyx_t_2 = __pyx_t_4;
          __pyx_L19_bool_binop_done:;
          if (__pyx_t_2) {
            if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_mstate_global->__pyx_n_u_double, long, 1, __Pyx_PyLong_From_long, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
            goto __pyx_L10_break;
          }
          break;
          case 99:
          break;
          default: break;
        }
      }
    }
    __pyx_t_2 = (__pyx_v_arg == Py_None);
    if (__pyx_t_2) {
      if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_mstate_global->__pyx_n_u_float, long, 1, __Pyx_PyLong_From_long, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
      goto __pyx_L10_break;
    }
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      /*try:*/ {
        __pyx_t_1 = PyMemoryView_FromObject(__pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_v_arg_as_memoryview = ((PyObject*)__pyx_t_1);
        __pyx_t_1 = 0;
      }
      /*else:*/ {
        __pyx_t_4 = (__pyx_v_itemsize == -1L);
        if (!__pyx_t_4) {
          goto __pyx_L33_next_or;
        } else {
        }
        __pyx_t_5 = __Pyx_PyMemoryView_Get_itemsize(__pyx_v_arg_as_memoryview); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L24_except_error)
        __pyx_t_4 = (__pyx_t_5 == (sizeof(float)));
        if (!__pyx_t_4) {
        } else {
          goto __pyx_L32_next_and;
        }
        __pyx_L33_next_or:;
        __pyx_t_4 = (__pyx_v_itemsize == (sizeof(float)));
        if (__pyx_t_4) {
        } else {
          __pyx_t_2 = __pyx_t_4;
          goto __pyx_L31_bool_binop_done;
        }
        __pyx_L32_next_and:;
        __pyx_t_17 = __Pyx_PyMemoryView_Get_ndim(__pyx_v_arg_as_memoryview); if (unlikely(__pyx_t_17 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L24_except_error)
        __pyx_t_4 = (__pyx_t_17 == 2);
        __pyx_t_2 = __pyx_t_4;
        __pyx_L31_bool_binop_done:;
        if (__pyx_t_2) {
          __pyx_t_18 = __Pyx_PyObject_to_MemoryviewSlice_dsds_float(__pyx_v_arg_as_memoryview, 0); 
          __pyx_v_memslice = __pyx_t_18;
          __pyx_t_2 = (__pyx_v_memslice.memview != 0);
          if (__pyx_t_2) {
            __PYX_XCLEAR_MEMVIEW((&__pyx_v_memslice), 1); 
            if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_mstate_global->__pyx_n_u_float, long, 1, __Pyx_PyLong_From_long, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 658, __pyx_L24_except_error)
            goto __pyx_L27_try_break;
          }
          /*else*/ {
            PyErr_Clear(); 
          }
        }
        __pyx_t_4 = (__pyx_v_itemsize == -1L);
        if (!__pyx_t_4) {
          goto __pyx_L39_next_or;
        } else {
        }
        __pyx_t_5 = __Pyx_PyMemoryView_Get_itemsize(__pyx_v_arg_as_memoryview); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L24_except_error)
        __pyx_t_4 = (__pyx_t_5 == (sizeof(double)));
        if (!__pyx_t_4) {
        } else {
          goto __pyx_L38_next_and;
        }
        __pyx_L39_next_or:;
        __pyx_t_4 = (__pyx_v_itemsize == (sizeof(double)));
        if (__pyx_t_4) {
        } else {
          __pyx_t_2 = __pyx_t_4;
          goto __pyx_L37_bool_binop_done;
        }
        __pyx_L38_next_and:;
        __pyx_t_17 = __Pyx_PyMemoryView_Get_ndim(__pyx_v_arg_as_memoryview); if (unlikely(__pyx_t_17 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 658, __pyx_L24_except_error)
        __pyx_t_4 = (__pyx_t_17 == 2);
        __pyx_t_2 = __pyx_t_4;
        __pyx_L37_bool_binop_done:;
        if (__pyx_t_2) {
          __pyx_t_18 = __Pyx_PyObject_to_MemoryviewSlice_dsds_double(__pyx_v_arg_as_memoryview, 0); 
          __pyx_v_memslice = __pyx_t_18;
          __pyx_t_2 = (__pyx_v_memslice.memview != 0);
          if (__pyx_t_2) {
            __PYX_XCLEAR_MEMVIEW((&__pyx_v_memslice), 1); 
            if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_mstate_global->__pyx_n_u_double, long, 1, __Pyx_PyLong_From_long, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 658, __pyx_L24_except_error)
            goto __pyx_L27_try_break;
          }
          /*else*/ {
            PyErr_Clear(); 
          }
        }
      }
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      goto __pyx_L29_try_end;
      __pyx_L22_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_17 = __Pyx_PyErr_ExceptionMatches2(__pyx_builtin_ValueError, __pyx_builtin_TypeError);
      if (__pyx_t_17) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L23_exception_handled;
      }
      goto __pyx_L24_except_error;
      __pyx_L24_except_error:;
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      goto __pyx_L1_error;
      __pyx_L27_try_break:;
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      goto __pyx_L10_break;
      __pyx_L23_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      __pyx_L29_try_end:;
    }
    if (unlikely((__Pyx_SetItemInt(__pyx_v_dest_sig, 0, Py_None, long, 1, __Pyx_PyLong_From_long, 1, 0, 0, 1) < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
    goto __pyx_L10_break;
  }
  __pyx_L10_break:;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v__fused_sigindex_ref, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __pyx_t_1;
  __Pyx_INCREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fused_sigindex = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_2 = (__pyx_v_fused_sigindex == ((PyObject*)Py_None));
  if (__pyx_t_2) {
    __pyx_t_7 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF_SET(__pyx_v_fused_sigindex, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;
    __pyx_t_5 = 0;
    if (unlikely(((PyObject *)__pyx_v_signatures) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 658, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_dict_iterator(((PyObject*)__pyx_v_signatures), 1, ((PyObject *)NULL), (&__pyx_t_19), (&__pyx_t_17)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_7);
    __pyx_t_7 = __pyx_t_1;
    __pyx_t_1 = 0;
    while (1) {
      __pyx_t_20 = __Pyx_dict_iter_next(__pyx_t_7, __pyx_t_19, &__pyx_t_5, &__pyx_t_1, NULL, NULL, __pyx_t_17);
      if (unlikely(__pyx_t_20 == 0)) break;
      if (unlikely(__pyx_t_20 == -1)) __PYX_ERR(0, 658, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_sig, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_INCREF(__pyx_v_fused_sigindex);
      __Pyx_XDECREF_SET(__pyx_v_sigindex_node, __pyx_v_fused_sigindex);
      __pyx_t_9 = __pyx_v_sig;
      __Pyx_INCREF(__pyx_t_9);
      __pyx_t_12 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_mstate_global->__pyx_kp_u__15};
        __pyx_t_6 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_strip, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
      }
      __pyx_t_11 = __pyx_t_6;
      __Pyx_INCREF(__pyx_t_11);
      __pyx_t_12 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_mstate_global->__pyx_kp_u__16};
        __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_split, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
      }
      __pyx_t_6 = __Pyx_PySequence_ListKeepNew(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 658, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_21 = __Pyx_PyList_GET_SIZE(__pyx_t_6);
      if (unlikely(__pyx_t_21 < 1)) {
        __Pyx_RaiseNeedMoreValuesError(0+__pyx_t_21); __PYX_ERR(0, 658, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_11 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_21-1); 
      ((PyVarObject*)__pyx_t_6)->ob_size--;
      #else
      __pyx_t_11 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_21-1); 
      #endif
      __Pyx_GOTREF(__pyx_t_11);
      #if !CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_9 = PySequence_GetSlice(__pyx_t_6, 0, __pyx_t_21-1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 658, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6);
      __pyx_t_6 = __pyx_t_9; __pyx_t_9 = NULL;
      #else
      CYTHON_UNUSED_VAR(__pyx_t_9);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_sig_series, ((PyObject*)__pyx_t_6));
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_v_last_type, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_1 = __pyx_v_sig_series; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_21 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
          #endif
          if (__pyx_t_21 >= __pyx_temp) break;
        }
        __pyx_t_11 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_21);
        ++__pyx_t_21;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_XDECREF_SET(__pyx_v_sig_type, __pyx_t_11);
        __pyx_t_11 = 0;
        if (unlikely(__pyx_v_sigindex_node == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 658, __pyx_L1_error)
        }
        __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_sig_type, __pyx_v_sigindex_node, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
        if (__pyx_t_2) {
          __pyx_t_11 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 658, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (unlikely(__pyx_v_sigindex_node == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 658, __pyx_L1_error)
          }
          if (unlikely((PyDict_SetItem(__pyx_v_sigindex_node, __pyx_v_sig_type, __pyx_t_11) < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_DECREF_SET(__pyx_v_sigindex_node, __pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L49;
        }
        /*else*/ {
          if (unlikely(__pyx_v_sigindex_node == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 658, __pyx_L1_error)
          }
          __pyx_t_11 = __Pyx_PyDict_GetItem(__pyx_v_sigindex_node, __pyx_v_sig_type); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 658, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_6 = __pyx_t_11;
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF_SET(__pyx_v_sigindex_node, ((PyObject*)__pyx_t_6));
          __pyx_t_6 = 0;
        }
        __pyx_L49:;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(__pyx_v_sigindex_node == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 658, __pyx_L1_error)
      }
      if (unlikely((PyDict_SetItem(__pyx_v_sigindex_node, __pyx_v_last_type, __pyx_v_sig) < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely((__Pyx_SetItemInt(__pyx_v__fused_sigindex_ref, 0, __pyx_v_fused_sigindex, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1) < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v_sigindex_matches = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_v_fused_sigindex);
  __Pyx_GIVEREF(__pyx_v_fused_sigindex);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_v_fused_sigindex) != (0)) __PYX_ERR(0, 658, __pyx_L1_error);
  __pyx_v_sigindex_candidates = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __pyx_v_dest_sig; __Pyx_INCREF(__pyx_t_7);
  __pyx_t_19 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_7);
      #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
      #endif
      if (__pyx_t_19 >= __pyx_temp) break;
    }
    __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_7, __pyx_t_19);
    ++__pyx_t_19;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_dst_type, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_found_matches, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_found_candidates, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_2 = (__pyx_v_dst_type == Py_None);
    if (__pyx_t_2) {
      __pyx_t_1 = __pyx_v_sigindex_matches; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        __pyx_t_6 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_5);
        ++__pyx_t_5;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_XDECREF_SET(__pyx_v_sn, __pyx_t_6);
        __pyx_t_6 = 0;
        if (unlikely(__pyx_v_sn == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
          __PYX_ERR(0, 658, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_PyDict_Values(((PyObject*)__pyx_v_sn)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_22 = __Pyx_PyList_Extend(__pyx_v_found_matches, __pyx_t_6); if (unlikely(__pyx_t_22 == ((int)-1))) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_v_sigindex_candidates; __Pyx_INCREF(__pyx_t_1);
      __pyx_t_5 = 0;
      for (;;) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        __pyx_t_6 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_5);
        ++__pyx_t_5;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_XDECREF_SET(__pyx_v_sn, __pyx_t_6);
        __pyx_t_6 = 0;
        if (unlikely(__pyx_v_sn == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
          __PYX_ERR(0, 658, __pyx_L1_error)
        }
        __pyx_t_6 = __Pyx_PyDict_Values(((PyObject*)__pyx_v_sn)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_22 = __Pyx_PyList_Extend(__pyx_v_found_candidates, __pyx_t_6); if (unlikely(__pyx_t_22 == ((int)-1))) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L53;
    }
    /*else*/ {
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_sigindex_matches);
      __Pyx_GIVEREF(__pyx_v_sigindex_matches);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_sigindex_matches) != (0)) __PYX_ERR(0, 658, __pyx_L1_error);
      __Pyx_INCREF(__pyx_v_sigindex_candidates);
      __Pyx_GIVEREF(__pyx_v_sigindex_candidates);
      if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_sigindex_candidates) != (0)) __PYX_ERR(0, 658, __pyx_L1_error);
      __pyx_t_6 = __pyx_t_1; __Pyx_INCREF(__pyx_t_6);
      __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      for (;;) {
        if (__pyx_t_5 >= 2) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_5));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_6, __pyx_t_5);
        #endif
        ++__pyx_t_5;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 658, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_v_search_list, ((PyObject*)__pyx_t_1));
        __pyx_t_1 = 0;
        if (unlikely(__pyx_v_search_list == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
          __PYX_ERR(0, 658, __pyx_L1_error)
        }
        __pyx_t_1 = __pyx_v_search_list; __Pyx_INCREF(__pyx_t_1);
        __pyx_t_21 = 0;
        for (;;) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_1);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
            #endif
            if (__pyx_t_21 >= __pyx_temp) break;
          }
          __pyx_t_11 = __Pyx_PyList_GetItemRef(__pyx_t_1, __pyx_t_21);
          ++__pyx_t_21;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 658, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_XDECREF_SET(__pyx_v_sn, __pyx_t_11);
          __pyx_t_11 = 0;
          if (unlikely(__pyx_v_sn == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
            __PYX_ERR(0, 658, __pyx_L1_error)
          }
          __pyx_t_11 = __Pyx_PyDict_GetItemDefault(((PyObject*)__pyx_v_sn), __pyx_v_dst_type, Py_None); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 658, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_XDECREF_SET(__pyx_v_type_match, __pyx_t_11);
          __pyx_t_11 = 0;
          __pyx_t_2 = (__pyx_v_type_match != Py_None);
          if (__pyx_t_2) {
            __pyx_t_22 = __Pyx_PyList_Append(__pyx_v_found_matches, __pyx_v_type_match); if (unlikely(__pyx_t_22 == ((int)-1))) __PYX_ERR(0, 658, __pyx_L1_error)
          }
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_L53:;
    __Pyx_INCREF(__pyx_v_found_matches);
    __Pyx_DECREF_SET(__pyx_v_sigindex_matches, __pyx_v_found_matches);
    __Pyx_INCREF(__pyx_v_found_candidates);
    __Pyx_DECREF_SET(__pyx_v_sigindex_candidates, __pyx_v_found_candidates);
    __pyx_t_4 = (__Pyx_PyList_GET_SIZE(__pyx_v_found_matches) != 0);
    if (unlikely(((!CYTHON_ASSUME_SAFE_MACROS) && __pyx_t_4 < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
    if (!__pyx_t_4) {
    } else {
      __pyx_t_2 = __pyx_t_4;
      goto __pyx_L68_bool_binop_done;
    }
    __pyx_t_4 = (__Pyx_PyList_GET_SIZE(__pyx_v_found_candidates) != 0);
    if (unlikely(((!CYTHON_ASSUME_SAFE_MACROS) && __pyx_t_4 < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
    __pyx_t_2 = __pyx_t_4;
    __pyx_L68_bool_binop_done:;
    __pyx_t_4 = (!__pyx_t_2);
    if (__pyx_t_4) {
      goto __pyx_L52_break;
    }
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  goto __pyx_L70_for_end;
  __pyx_L52_break:;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  goto __pyx_L70_for_end;
  __pyx_L70_for_end:;
  __Pyx_INCREF(__pyx_v_sigindex_matches);
  __pyx_v_candidates = __pyx_v_sigindex_matches;
  __pyx_t_4 = (__Pyx_PyList_GET_SIZE(__pyx_v_candidates) != 0);
  if (unlikely(((!CYTHON_ASSUME_SAFE_MACROS) && __pyx_t_4 < 0))) __PYX_ERR(0, 658, __pyx_L1_error)
  __pyx_t_2 = (!__pyx_t_4);
  if (unlikely(__pyx_t_2)) {
    __pyx_t_6 = NULL;
    __Pyx_INCREF(__pyx_builtin_TypeError);
    __pyx_t_1 = __pyx_builtin_TypeError; 
    __pyx_t_12 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_No_matching_signature_found};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 658, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_t_19 = __Pyx_PyList_GET_SIZE(__pyx_v_candidates); if (unlikely(__pyx_t_19 == ((Py_ssize_t)-1))) __PYX_ERR(0, 658, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_19 > 1);
  if (unlikely(__pyx_t_2)) {
    __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_builtin_TypeError);
    __pyx_t_6 = __pyx_builtin_TypeError; 
    __pyx_t_12 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_mstate_global->__pyx_kp_u_Function_call_with_ambiguous_arg};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 658, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(0, 658, __pyx_L1_error)
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(((PyObject *)__pyx_v_signatures) == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 658, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_signatures), __Pyx_PyList_GET_ITEM(__pyx_v_candidates, 0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 658, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_r = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L0;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_search_list);
  __Pyx_XDECREF(__pyx_v_sigindex_node);
  __Pyx_XDECREF(__pyx_v_dest_sig);
  __Pyx_XDECREF((PyObject *)__pyx_v_ndarray);
  __Pyx_XDECREF(__pyx_v_arg_as_memoryview);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XDECREF(__pyx_v_arg_base);
  __Pyx_XDECREF(__pyx_v_fused_sigindex);
  __Pyx_XDECREF(__pyx_v_sig);
  __Pyx_XDECREF(__pyx_v_sig_series);
  __Pyx_XDECREF(__pyx_v_last_type);
  __Pyx_XDECREF(__pyx_v_sig_type);
  __Pyx_XDECREF(__pyx_v_sigindex_matches);
  __Pyx_XDECREF(__pyx_v_sigindex_candidates);
  __Pyx_XDECREF(__pyx_v_dst_type);
  __Pyx_XDECREF(__pyx_v_found_matches);
  __Pyx_XDECREF(__pyx_v_found_candidates);
  __Pyx_XDECREF(__pyx_v_sn);
  __Pyx_XDECREF(__pyx_v_type_match);
  __Pyx_XDECREF(__pyx_v_candidates);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_0__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_85_refined_index_data_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_0__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_85_refined_index_data_file = {"__pyx_fuse_0_refined_index_data_file", (PyCFunction)(void(*)(void))(PyCFunctionWithKeywords)__pyx_fuse_0__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_85_refined_index_data_file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_fuse_0__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_85_refined_index_data_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_in_collection = 0;
  PyArrayObject *__pyx_v_pos = 0;
  PyArrayObject *__pyx_v_hsml = 0;
  PyArrayObject *__pyx_v_mask = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_sub_mi1 = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_sub_mi2 = 0;
  CYTHON_UNUSED __pyx_t_5numpy_uint64_t __pyx_v_file_id;
  CYTHON_UNUSED __pyx_t_5numpy_int64_t __pyx_v_nsub_mi;
  __pyx_t_5numpy_uint64_t __pyx_v_count_threshold;
  __pyx_t_5numpy_uint8_t __pyx_v_mask_threshold;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_refined_index_data_file (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_in_collection,&__pyx_mstate_global->__pyx_n_u_pos,&__pyx_mstate_global->__pyx_n_u_hsml,&__pyx_mstate_global->__pyx_n_u_mask,&__pyx_mstate_global->__pyx_n_u_sub_mi1,&__pyx_mstate_global->__pyx_n_u_sub_mi2,&__pyx_mstate_global->__pyx_n_u_file_id,&__pyx_mstate_global->__pyx_n_u_nsub_mi,&__pyx_mstate_global->__pyx_n_u_count_threshold,&__pyx_mstate_global->__pyx_n_u_mask_threshold,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 658, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case 10:
        values[9] = __Pyx_ArgRef_VARARGS(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  9:
        values[8] = __Pyx_ArgRef_VARARGS(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  8:
        values[7] = __Pyx_ArgRef_VARARGS(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  7:
        values[6] = __Pyx_ArgRef_VARARGS(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_VARARGS(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_refined_index_data_file", 0) < 0) __PYX_ERR(0, 658, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 8; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_refined_index_data_file", 0, 8, 10, i); __PYX_ERR(0, 658, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case 10:
        values[9] = __Pyx_ArgRef_VARARGS(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  9:
        values[8] = __Pyx_ArgRef_VARARGS(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  8:
        values[7] = __Pyx_ArgRef_VARARGS(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[6] = __Pyx_ArgRef_VARARGS(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[5] = __Pyx_ArgRef_VARARGS(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 658, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_collection = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[0]);
    __pyx_v_pos = ((PyArrayObject *)values[1]);
    __pyx_v_hsml = ((PyArrayObject *)values[2]);
    __pyx_v_mask = ((PyArrayObject *)values[3]);
    __pyx_v_sub_mi1 = ((PyArrayObject *)values[4]);
    __pyx_v_sub_mi2 = ((PyArrayObject *)values[5]);
    __pyx_v_file_id = __Pyx_PyLong_As_npy_uint64(values[6]); if (unlikely((__pyx_v_file_id == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 669, __pyx_L3_error)
    __pyx_v_nsub_mi = __Pyx_PyLong_As_npy_int64(values[7]); if (unlikely((__pyx_v_nsub_mi == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 669, __pyx_L3_error)
    if (values[8]) {
      __pyx_v_count_threshold = __Pyx_PyLong_As_npy_uint64(values[8]); if (unlikely((__pyx_v_count_threshold == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
    } else {
      __pyx_v_count_threshold = ((__pyx_t_5numpy_uint64_t)0x80);
    }
    if (values[9]) {
      __pyx_v_mask_threshold = __Pyx_PyLong_As_npy_uint8(values[9]); if (unlikely((__pyx_v_mask_threshold == ((npy_uint8)-1)) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L3_error)
    } else {
      __pyx_v_mask_threshold = ((__pyx_t_5numpy_uint8_t)2);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_refined_index_data_file", 0, 8, 10, __pyx_nargs); __PYX_ERR(0, 658, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._refined_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_collection), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "in_collection", 0))) __PYX_ERR(0, 663, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pos), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "pos", 0))) __PYX_ERR(0, 664, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hsml), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "hsml", 0))) __PYX_ERR(0, 665, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mask), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "mask", 0))) __PYX_ERR(0, 666, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sub_mi1), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "sub_mi1", 0))) __PYX_ERR(0, 667, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sub_mi2), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "sub_mi2", 0))) __PYX_ERR(0, 668, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_84_refined_index_data_file(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_in_collection, __pyx_v_pos, __pyx_v_hsml, __pyx_v_mask, __pyx_v_sub_mi1, __pyx_v_sub_mi2, __pyx_v_file_id, __pyx_v_nsub_mi, __pyx_v_count_threshold, __pyx_v_mask_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_84_refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_in_collection, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, PyArrayObject *__pyx_v_mask, CYTHON_UNUSED PyArrayObject *__pyx_v_sub_mi1, CYTHON_UNUSED PyArrayObject *__pyx_v_sub_mi2, CYTHON_UNUSED __pyx_t_5numpy_uint64_t __pyx_v_file_id, CYTHON_UNUSED __pyx_t_5numpy_int64_t __pyx_v_nsub_mi, __pyx_t_5numpy_uint64_t __pyx_v_count_threshold, __pyx_t_5numpy_uint8_t __pyx_v_mask_threshold) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v__in_coll = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_out_collection = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_hsml;
  __Pyx_Buffer __pyx_pybuffer_hsml;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_mask;
  __Pyx_Buffer __pyx_pybuffer_mask;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pos;
  __Pyx_Buffer __pyx_pybuffer_pos;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sub_mi1;
  __Pyx_Buffer __pyx_pybuffer_sub_mi1;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sub_mi2;
  __Pyx_Buffer __pyx_pybuffer_sub_mi2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0_refined_index_data_file", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_in_collection);
  __pyx_pybuffer_pos.pybuffer.buf = NULL;
  __pyx_pybuffer_pos.refcount = 0;
  __pyx_pybuffernd_pos.data = NULL;
  __pyx_pybuffernd_pos.rcbuffer = &__pyx_pybuffer_pos;
  __pyx_pybuffer_hsml.pybuffer.buf = NULL;
  __pyx_pybuffer_hsml.refcount = 0;
  __pyx_pybuffernd_hsml.data = NULL;
  __pyx_pybuffernd_hsml.rcbuffer = &__pyx_pybuffer_hsml;
  __pyx_pybuffer_mask.pybuffer.buf = NULL;
  __pyx_pybuffer_mask.refcount = 0;
  __pyx_pybuffernd_mask.data = NULL;
  __pyx_pybuffernd_mask.rcbuffer = &__pyx_pybuffer_mask;
  __pyx_pybuffer_sub_mi1.pybuffer.buf = NULL;
  __pyx_pybuffer_sub_mi1.refcount = 0;
  __pyx_pybuffernd_sub_mi1.data = NULL;
  __pyx_pybuffernd_sub_mi1.rcbuffer = &__pyx_pybuffer_sub_mi1;
  __pyx_pybuffer_sub_mi2.pybuffer.buf = NULL;
  __pyx_pybuffer_sub_mi2.refcount = 0;
  __pyx_pybuffernd_sub_mi2.data = NULL;
  __pyx_pybuffernd_sub_mi2.rcbuffer = &__pyx_pybuffer_sub_mi2;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos.rcbuffer->pybuffer, (PyObject*)__pyx_v_pos, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_pybuffernd_pos.diminfo[0].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pos.diminfo[0].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pos.diminfo[1].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pos.diminfo[1].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer, (PyObject*)__pyx_v_hsml, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_pybuffernd_hsml.diminfo[0].strides = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_hsml.diminfo[0].shape = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_mask.rcbuffer->pybuffer, (PyObject*)__pyx_v_mask, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_pybuffernd_mask.diminfo[0].strides = __pyx_pybuffernd_mask.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_mask.diminfo[0].shape = __pyx_pybuffernd_mask.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer, (PyObject*)__pyx_v_sub_mi1, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_pybuffernd_sub_mi1.diminfo[0].strides = __pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sub_mi1.diminfo[0].shape = __pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer, (PyObject*)__pyx_v_sub_mi2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_pybuffernd_sub_mi2.diminfo[0].strides = __pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sub_mi2.diminfo[0].shape = __pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":672
 *                                  np.uint64_t count_threshold = 128,
 *                                  np.uint8_t mask_threshold = 2):
 *         self._used_mi2 = 1             # <<<<<<<<<<<<<<
 *         if in_collection is None:
 *             in_collection = BoolArrayCollection()
*/
  __pyx_v_self->_used_mi2 = 1;

  /* "yt/geometry/particle_oct_container.pyx":673
 *                                  np.uint8_t mask_threshold = 2):
 *         self._used_mi2 = 1
 *         if in_collection is None:             # <<<<<<<<<<<<<<
 *             in_collection = BoolArrayCollection()
 *         cdef BoolArrayCollection _in_coll = in_collection
*/
  __pyx_t_1 = (((PyObject *)__pyx_v_in_collection) == Py_None);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_oct_container.pyx":674
 *         self._used_mi2 = 1
 *         if in_collection is None:
 *             in_collection = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         cdef BoolArrayCollection _in_coll = in_collection
 *         out_collection = self.__refined_index_data_file(_in_coll, pos, hsml, mask,
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
    __pyx_t_4 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_2);
    }
    __Pyx_DECREF_SET(__pyx_v_in_collection, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "yt/geometry/particle_oct_container.pyx":673
 *                                  np.uint8_t mask_threshold = 2):
 *         self._used_mi2 = 1
 *         if in_collection is None:             # <<<<<<<<<<<<<<
 *             in_collection = BoolArrayCollection()
 *         cdef BoolArrayCollection _in_coll = in_collection
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":675
 *         if in_collection is None:
 *             in_collection = BoolArrayCollection()
 *         cdef BoolArrayCollection _in_coll = in_collection             # <<<<<<<<<<<<<<
 *         out_collection = self.__refined_index_data_file(_in_coll, pos, hsml, mask,
 *                                               count_threshold, mask_threshold)
*/
  __Pyx_INCREF((PyObject *)__pyx_v_in_collection);
  __pyx_v__in_coll = __pyx_v_in_collection;

  /* "yt/geometry/particle_oct_container.pyx":676
 *             in_collection = BoolArrayCollection()
 *         cdef BoolArrayCollection _in_coll = in_collection
 *         out_collection = self.__refined_index_data_file(_in_coll, pos, hsml, mask,             # <<<<<<<<<<<<<<
 *                                               count_threshold, mask_threshold)
 *         return 0, out_collection
*/
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self->__pyx_vtab)->__pyx_fuse_0_ParticleBitmap__refined_index_data_file(__pyx_v_self, __pyx_v__in_coll, ((PyArrayObject *)__pyx_v_pos), ((PyArrayObject *)__pyx_v_hsml), ((PyArrayObject *)__pyx_v_mask), __pyx_v_count_threshold, __pyx_v_mask_threshold)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_out_collection = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":678
 *         out_collection = self.__refined_index_data_file(_in_coll, pos, hsml, mask,
 *                                               count_threshold, mask_threshold)
 *         return 0, out_collection             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_int_0);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_mstate_global->__pyx_int_0) != (0)) __PYX_ERR(0, 678, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_out_collection);
  __Pyx_GIVEREF((PyObject *)__pyx_v_out_collection);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_out_collection)) != (0)) __PYX_ERR(0, 678, __pyx_L1_error);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":658
 *                 bitmasks._set_coarse(file_id, i)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._refined_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v__in_coll);
  __Pyx_XDECREF((PyObject *)__pyx_v_out_collection);
  __Pyx_XDECREF((PyObject *)__pyx_v_in_collection);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_1__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_87_refined_index_data_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_1__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_87_refined_index_data_file = {"__pyx_fuse_1_refined_index_data_file", (PyCFunction)(void(*)(void))(PyCFunctionWithKeywords)__pyx_fuse_1__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_87_refined_index_data_file, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_fuse_1__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_87_refined_index_data_file(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_in_collection = 0;
  PyArrayObject *__pyx_v_pos = 0;
  PyArrayObject *__pyx_v_hsml = 0;
  PyArrayObject *__pyx_v_mask = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_sub_mi1 = 0;
  CYTHON_UNUSED PyArrayObject *__pyx_v_sub_mi2 = 0;
  CYTHON_UNUSED __pyx_t_5numpy_uint64_t __pyx_v_file_id;
  CYTHON_UNUSED __pyx_t_5numpy_int64_t __pyx_v_nsub_mi;
  __pyx_t_5numpy_uint64_t __pyx_v_count_threshold;
  __pyx_t_5numpy_uint8_t __pyx_v_mask_threshold;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_refined_index_data_file (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_in_collection,&__pyx_mstate_global->__pyx_n_u_pos,&__pyx_mstate_global->__pyx_n_u_hsml,&__pyx_mstate_global->__pyx_n_u_mask,&__pyx_mstate_global->__pyx_n_u_sub_mi1,&__pyx_mstate_global->__pyx_n_u_sub_mi2,&__pyx_mstate_global->__pyx_n_u_file_id,&__pyx_mstate_global->__pyx_n_u_nsub_mi,&__pyx_mstate_global->__pyx_n_u_count_threshold,&__pyx_mstate_global->__pyx_n_u_mask_threshold,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 658, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case 10:
        values[9] = __Pyx_ArgRef_VARARGS(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  9:
        values[8] = __Pyx_ArgRef_VARARGS(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  8:
        values[7] = __Pyx_ArgRef_VARARGS(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  7:
        values[6] = __Pyx_ArgRef_VARARGS(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  6:
        values[5] = __Pyx_ArgRef_VARARGS(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_refined_index_data_file", 0) < 0) __PYX_ERR(0, 658, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 8; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_refined_index_data_file", 0, 8, 10, i); __PYX_ERR(0, 658, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case 10:
        values[9] = __Pyx_ArgRef_VARARGS(__pyx_args, 9);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[9])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  9:
        values[8] = __Pyx_ArgRef_VARARGS(__pyx_args, 8);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[8])) __PYX_ERR(0, 658, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  8:
        values[7] = __Pyx_ArgRef_VARARGS(__pyx_args, 7);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[7])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[6] = __Pyx_ArgRef_VARARGS(__pyx_args, 6);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[6])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[5] = __Pyx_ArgRef_VARARGS(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 658, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 658, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_in_collection = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[0]);
    __pyx_v_pos = ((PyArrayObject *)values[1]);
    __pyx_v_hsml = ((PyArrayObject *)values[2]);
    __pyx_v_mask = ((PyArrayObject *)values[3]);
    __pyx_v_sub_mi1 = ((PyArrayObject *)values[4]);
    __pyx_v_sub_mi2 = ((PyArrayObject *)values[5]);
    __pyx_v_file_id = __Pyx_PyLong_As_npy_uint64(values[6]); if (unlikely((__pyx_v_file_id == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 669, __pyx_L3_error)
    __pyx_v_nsub_mi = __Pyx_PyLong_As_npy_int64(values[7]); if (unlikely((__pyx_v_nsub_mi == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 669, __pyx_L3_error)
    if (values[8]) {
      __pyx_v_count_threshold = __Pyx_PyLong_As_npy_uint64(values[8]); if (unlikely((__pyx_v_count_threshold == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 670, __pyx_L3_error)
    } else {
      __pyx_v_count_threshold = ((__pyx_t_5numpy_uint64_t)0x80);
    }
    if (values[9]) {
      __pyx_v_mask_threshold = __Pyx_PyLong_As_npy_uint8(values[9]); if (unlikely((__pyx_v_mask_threshold == ((npy_uint8)-1)) && PyErr_Occurred())) __PYX_ERR(0, 671, __pyx_L3_error)
    } else {
      __pyx_v_mask_threshold = ((__pyx_t_5numpy_uint8_t)2);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_refined_index_data_file", 0, 8, 10, __pyx_nargs); __PYX_ERR(0, 658, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._refined_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_in_collection), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "in_collection", 0))) __PYX_ERR(0, 663, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_pos), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "pos", 0))) __PYX_ERR(0, 664, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_hsml), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "hsml", 0))) __PYX_ERR(0, 665, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mask), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "mask", 0))) __PYX_ERR(0, 666, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sub_mi1), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "sub_mi1", 0))) __PYX_ERR(0, 667, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sub_mi2), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "sub_mi2", 0))) __PYX_ERR(0, 668, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_86_refined_index_data_file(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_in_collection, __pyx_v_pos, __pyx_v_hsml, __pyx_v_mask, __pyx_v_sub_mi1, __pyx_v_sub_mi2, __pyx_v_file_id, __pyx_v_nsub_mi, __pyx_v_count_threshold, __pyx_v_mask_threshold);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_86_refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_in_collection, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, PyArrayObject *__pyx_v_mask, CYTHON_UNUSED PyArrayObject *__pyx_v_sub_mi1, CYTHON_UNUSED PyArrayObject *__pyx_v_sub_mi2, CYTHON_UNUSED __pyx_t_5numpy_uint64_t __pyx_v_file_id, CYTHON_UNUSED __pyx_t_5numpy_int64_t __pyx_v_nsub_mi, __pyx_t_5numpy_uint64_t __pyx_v_count_threshold, __pyx_t_5numpy_uint8_t __pyx_v_mask_threshold) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v__in_coll = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_out_collection = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_hsml;
  __Pyx_Buffer __pyx_pybuffer_hsml;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_mask;
  __Pyx_Buffer __pyx_pybuffer_mask;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pos;
  __Pyx_Buffer __pyx_pybuffer_pos;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sub_mi1;
  __Pyx_Buffer __pyx_pybuffer_sub_mi1;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sub_mi2;
  __Pyx_Buffer __pyx_pybuffer_sub_mi2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1_refined_index_data_file", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_in_collection);
  __pyx_pybuffer_pos.pybuffer.buf = NULL;
  __pyx_pybuffer_pos.refcount = 0;
  __pyx_pybuffernd_pos.data = NULL;
  __pyx_pybuffernd_pos.rcbuffer = &__pyx_pybuffer_pos;
  __pyx_pybuffer_hsml.pybuffer.buf = NULL;
  __pyx_pybuffer_hsml.refcount = 0;
  __pyx_pybuffernd_hsml.data = NULL;
  __pyx_pybuffernd_hsml.rcbuffer = &__pyx_pybuffer_hsml;
  __pyx_pybuffer_mask.pybuffer.buf = NULL;
  __pyx_pybuffer_mask.refcount = 0;
  __pyx_pybuffernd_mask.data = NULL;
  __pyx_pybuffernd_mask.rcbuffer = &__pyx_pybuffer_mask;
  __pyx_pybuffer_sub_mi1.pybuffer.buf = NULL;
  __pyx_pybuffer_sub_mi1.refcount = 0;
  __pyx_pybuffernd_sub_mi1.data = NULL;
  __pyx_pybuffernd_sub_mi1.rcbuffer = &__pyx_pybuffer_sub_mi1;
  __pyx_pybuffer_sub_mi2.pybuffer.buf = NULL;
  __pyx_pybuffer_sub_mi2.refcount = 0;
  __pyx_pybuffernd_sub_mi2.data = NULL;
  __pyx_pybuffernd_sub_mi2.rcbuffer = &__pyx_pybuffer_sub_mi2;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos.rcbuffer->pybuffer, (PyObject*)__pyx_v_pos, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_pybuffernd_pos.diminfo[0].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pos.diminfo[0].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pos.diminfo[1].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pos.diminfo[1].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer, (PyObject*)__pyx_v_hsml, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_pybuffernd_hsml.diminfo[0].strides = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_hsml.diminfo[0].shape = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_mask.rcbuffer->pybuffer, (PyObject*)__pyx_v_mask, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_pybuffernd_mask.diminfo[0].strides = __pyx_pybuffernd_mask.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_mask.diminfo[0].shape = __pyx_pybuffernd_mask.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer, (PyObject*)__pyx_v_sub_mi1, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_pybuffernd_sub_mi1.diminfo[0].strides = __pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sub_mi1.diminfo[0].shape = __pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer, (PyObject*)__pyx_v_sub_mi2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 658, __pyx_L1_error)
  }
  __pyx_pybuffernd_sub_mi2.diminfo[0].strides = __pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sub_mi2.diminfo[0].shape = __pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":672
 *                                  np.uint64_t count_threshold = 128,
 *                                  np.uint8_t mask_threshold = 2):
 *         self._used_mi2 = 1             # <<<<<<<<<<<<<<
 *         if in_collection is None:
 *             in_collection = BoolArrayCollection()
*/
  __pyx_v_self->_used_mi2 = 1;

  /* "yt/geometry/particle_oct_container.pyx":673
 *                                  np.uint8_t mask_threshold = 2):
 *         self._used_mi2 = 1
 *         if in_collection is None:             # <<<<<<<<<<<<<<
 *             in_collection = BoolArrayCollection()
 *         cdef BoolArrayCollection _in_coll = in_collection
*/
  __pyx_t_1 = (((PyObject *)__pyx_v_in_collection) == Py_None);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_oct_container.pyx":674
 *         self._used_mi2 = 1
 *         if in_collection is None:
 *             in_collection = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         cdef BoolArrayCollection _in_coll = in_collection
 *         out_collection = self.__refined_index_data_file(_in_coll, pos, hsml, mask,
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
    __pyx_t_4 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_2);
    }
    __Pyx_DECREF_SET(__pyx_v_in_collection, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "yt/geometry/particle_oct_container.pyx":673
 *                                  np.uint8_t mask_threshold = 2):
 *         self._used_mi2 = 1
 *         if in_collection is None:             # <<<<<<<<<<<<<<
 *             in_collection = BoolArrayCollection()
 *         cdef BoolArrayCollection _in_coll = in_collection
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":675
 *         if in_collection is None:
 *             in_collection = BoolArrayCollection()
 *         cdef BoolArrayCollection _in_coll = in_collection             # <<<<<<<<<<<<<<
 *         out_collection = self.__refined_index_data_file(_in_coll, pos, hsml, mask,
 *                                               count_threshold, mask_threshold)
*/
  __Pyx_INCREF((PyObject *)__pyx_v_in_collection);
  __pyx_v__in_coll = __pyx_v_in_collection;

  /* "yt/geometry/particle_oct_container.pyx":676
 *             in_collection = BoolArrayCollection()
 *         cdef BoolArrayCollection _in_coll = in_collection
 *         out_collection = self.__refined_index_data_file(_in_coll, pos, hsml, mask,             # <<<<<<<<<<<<<<
 *                                               count_threshold, mask_threshold)
 *         return 0, out_collection
*/
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self->__pyx_vtab)->__pyx_fuse_1_ParticleBitmap__refined_index_data_file(__pyx_v_self, __pyx_v__in_coll, ((PyArrayObject *)__pyx_v_pos), ((PyArrayObject *)__pyx_v_hsml), ((PyArrayObject *)__pyx_v_mask), __pyx_v_count_threshold, __pyx_v_mask_threshold)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_out_collection = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":678
 *         out_collection = self.__refined_index_data_file(_in_coll, pos, hsml, mask,
 *                                               count_threshold, mask_threshold)
 *         return 0, out_collection             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_int_0);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_mstate_global->__pyx_int_0) != (0)) __PYX_ERR(0, 678, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_out_collection);
  __Pyx_GIVEREF((PyObject *)__pyx_v_out_collection);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_out_collection)) != (0)) __PYX_ERR(0, 678, __pyx_L1_error);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":658
 *                 bitmasks._set_coarse(file_id, i)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._refined_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v__in_coll);
  __Pyx_XDECREF((PyObject *)__pyx_v_out_collection);
  __Pyx_XDECREF((PyObject *)__pyx_v_in_collection);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":680
 *         return 0, out_collection
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_fuse_0__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_in_collection, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, PyArrayObject *__pyx_v_mask, __pyx_t_5numpy_uint64_t __pyx_v_count_threshold, __pyx_t_5numpy_uint8_t __pyx_v_mask_threshold) {
  __pyx_t_5numpy_int64_t __pyx_v_p;
  __pyx_t_5numpy_int64_t __pyx_v_sorted_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_i;
  __pyx_t_5numpy_uint64_t __pyx_v_mi1;
  __pyx_t_5numpy_uint64_t __pyx_v_mi2;
  __pyx_t_5numpy_float64_t __pyx_v_ppos[3];
  __pyx_t_5numpy_float64_t __pyx_v_s_ppos[3];
  int __pyx_v_skip;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_this_collection = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_out_collection = 0;
  __pyx_t_5numpy_uint64_t __pyx_v_bounds[2][3];
  __pyx_t_5numpy_uint8_t __pyx_v_fully_enclosed;
  __pyx_t_5numpy_float64_t __pyx_v_LE[3];
  __pyx_t_5numpy_float64_t __pyx_v_RE[3];
  __pyx_t_5numpy_float64_t __pyx_v_DW[3];
  __pyx_t_5numpy_uint8_t __pyx_v_PER[3];
  __pyx_t_5numpy_float64_t __pyx_v_dds1[3];
  __pyx_t_5numpy_float64_t __pyx_v_dds2[3];
  __pyx_t_5numpy_float64_t __pyx_v_radius;
  __pyx_t_5numpy_uint64_t __pyx_v_mi_split1[3];
  __pyx_t_5numpy_uint64_t __pyx_v_mi_split2[3];
  __pyx_t_5numpy_uint64_t __pyx_v_miex1;
  __Pyx_memviewslice __pyx_v_particle_counts = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_uint64_t __pyx_v_xex;
  __pyx_t_5numpy_uint64_t __pyx_v_yex;
  __pyx_t_5numpy_uint64_t __pyx_v_zex;
  __pyx_t_5numpy_float64_t __pyx_v_clip_pos_l[3];
  __pyx_t_5numpy_float64_t __pyx_v_clip_pos_r[3];
  int __pyx_v_axiter[3][2];
  __pyx_t_5numpy_float64_t __pyx_v_axiterv[3][2];
  __pyx_t_2yt_8geometry_22particle_oct_container_CoarseRefinedSets __pyx_v_coarse_refined_map;
  __pyx_t_5numpy_uint64_t __pyx_v_nfully_enclosed;
  __pyx_t_5numpy_uint64_t __pyx_v_n_calls;
  __pyx_t_5numpy_uint64_t __pyx_v_max_mi1_elements;
  __pyx_t_5numpy_uint64_t __pyx_v_max_mi2_elements;
  PyArrayObject *__pyx_v_refined_count = 0;
  PyArrayObject *__pyx_v_morton_indices = 0;
  PyArrayObject *__pyx_v_sorted_order = 0;
  long __pyx_v_xi;
  long __pyx_v_yi;
  long __pyx_v_zi;
  __pyx_t_5numpy_uint64_t __pyx_v_vec_i;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array *__pyx_v_buf;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_word_type __pyx_v_w;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array *__pyx_v_refined_arr;
  std::pair<__pyx_t_5numpy_uint64_t,__pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array>  __pyx_v_it1;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_hsml;
  __Pyx_Buffer __pyx_pybuffer_hsml;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_mask;
  __Pyx_Buffer __pyx_pybuffer_mask;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_morton_indices;
  __Pyx_Buffer __pyx_pybuffer_morton_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pos;
  __Pyx_Buffer __pyx_pybuffer_pos;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_refined_count;
  __Pyx_Buffer __pyx_pybuffer_refined_count;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sorted_order;
  __Pyx_Buffer __pyx_pybuffer_sorted_order;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __pyx_t_5numpy_uint64_t __pyx_t_8;
  npy_intp *__pyx_t_9;
  npy_intp __pyx_t_10;
  npy_intp __pyx_t_11;
  __pyx_t_5numpy_int64_t __pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  int __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  __pyx_t_5numpy_uint64_t __pyx_t_25;
  float __pyx_t_26;
  int __pyx_t_27;
  long __pyx_t_28;
  long __pyx_t_29;
  long __pyx_t_30;
  __pyx_t_5numpy_uint64_t __pyx_t_31;
  __pyx_t_5numpy_uint64_t __pyx_t_32;
  __pyx_t_5numpy_uint64_t __pyx_t_33;
  __pyx_t_5numpy_uint64_t __pyx_t_34;
  __pyx_t_5numpy_uint64_t __pyx_t_35;
  __pyx_t_5numpy_uint64_t __pyx_t_36;
  __pyx_t_5numpy_uint64_t __pyx_t_37;
  __pyx_t_5numpy_uint64_t __pyx_t_38;
  std::map<__pyx_t_5numpy_uint64_t,__pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array> ::iterator __pyx_t_39;
  std::pair<__pyx_t_5numpy_uint64_t,__pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array>  __pyx_t_40;
  size_t __pyx_t_41;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0_ParticleBitmap__refined_index_data_file", 0);
  __pyx_pybuffer_refined_count.pybuffer.buf = NULL;
  __pyx_pybuffer_refined_count.refcount = 0;
  __pyx_pybuffernd_refined_count.data = NULL;
  __pyx_pybuffernd_refined_count.rcbuffer = &__pyx_pybuffer_refined_count;
  __pyx_pybuffer_morton_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_morton_indices.refcount = 0;
  __pyx_pybuffernd_morton_indices.data = NULL;
  __pyx_pybuffernd_morton_indices.rcbuffer = &__pyx_pybuffer_morton_indices;
  __pyx_pybuffer_sorted_order.pybuffer.buf = NULL;
  __pyx_pybuffer_sorted_order.refcount = 0;
  __pyx_pybuffernd_sorted_order.data = NULL;
  __pyx_pybuffernd_sorted_order.rcbuffer = &__pyx_pybuffer_sorted_order;
  __pyx_pybuffer_pos.pybuffer.buf = NULL;
  __pyx_pybuffer_pos.refcount = 0;
  __pyx_pybuffernd_pos.data = NULL;
  __pyx_pybuffernd_pos.rcbuffer = &__pyx_pybuffer_pos;
  __pyx_pybuffer_hsml.pybuffer.buf = NULL;
  __pyx_pybuffer_hsml.refcount = 0;
  __pyx_pybuffernd_hsml.data = NULL;
  __pyx_pybuffernd_hsml.rcbuffer = &__pyx_pybuffer_hsml;
  __pyx_pybuffer_mask.pybuffer.buf = NULL;
  __pyx_pybuffer_mask.refcount = 0;
  __pyx_pybuffernd_mask.data = NULL;
  __pyx_pybuffernd_mask.rcbuffer = &__pyx_pybuffer_mask;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos.rcbuffer->pybuffer, (PyObject*)__pyx_v_pos, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 680, __pyx_L1_error)
  }
  __pyx_pybuffernd_pos.diminfo[0].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pos.diminfo[0].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pos.diminfo[1].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pos.diminfo[1].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer, (PyObject*)__pyx_v_hsml, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 680, __pyx_L1_error)
  }
  __pyx_pybuffernd_hsml.diminfo[0].strides = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_hsml.diminfo[0].shape = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_mask.rcbuffer->pybuffer, (PyObject*)__pyx_v_mask, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 680, __pyx_L1_error)
  }
  __pyx_pybuffernd_mask.diminfo[0].strides = __pyx_pybuffernd_mask.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_mask.diminfo[0].shape = __pyx_pybuffernd_mask.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":712
 *         cdef np.uint64_t mi_split2[3]
 *         cdef np.uint64_t miex1
 *         cdef np.uint64_t[:] particle_counts = self.particle_counts             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t xex, yex, zex
 *         cdef np.float64_t clip_pos_l[3]
*/
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint64_t(__pyx_v_self->particle_counts, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 712, __pyx_L1_error)
  __pyx_v_particle_counts = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":719
 *         cdef np.float64_t axiterv[3][2]
 *         cdef CoarseRefinedSets coarse_refined_map
 *         cdef np.uint64_t nfully_enclosed = 0, n_calls = 0             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t max_mi1_elements = 1 << (3*self.index_order1)
 *         cdef np.uint64_t max_mi2_elements = 1 << (3*self.index_order2)
*/
  __pyx_v_nfully_enclosed = 0;
  __pyx_v_n_calls = 0;

  /* "yt/geometry/particle_oct_container.pyx":720
 *         cdef CoarseRefinedSets coarse_refined_map
 *         cdef np.uint64_t nfully_enclosed = 0, n_calls = 0
 *         cdef np.uint64_t max_mi1_elements = 1 << (3*self.index_order1)             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t max_mi2_elements = 1 << (3*self.index_order2)
 *         cdef np.ndarray[np.uint64_t, ndim=1] refined_count = np.zeros(max_mi1_elements, dtype="uint64")
*/
  __pyx_v_max_mi1_elements = (1 << (3 * __pyx_v_self->index_order1));

  /* "yt/geometry/particle_oct_container.pyx":721
 *         cdef np.uint64_t nfully_enclosed = 0, n_calls = 0
 *         cdef np.uint64_t max_mi1_elements = 1 << (3*self.index_order1)
 *         cdef np.uint64_t max_mi2_elements = 1 << (3*self.index_order2)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint64_t, ndim=1] refined_count = np.zeros(max_mi1_elements, dtype="uint64")
 *         # Copy things from structure (type cast)
*/
  __pyx_v_max_mi2_elements = (1 << (3 * __pyx_v_self->index_order2));

  /* "yt/geometry/particle_oct_container.pyx":722
 *         cdef np.uint64_t max_mi1_elements = 1 << (3*self.index_order1)
 *         cdef np.uint64_t max_mi2_elements = 1 << (3*self.index_order2)
 *         cdef np.ndarray[np.uint64_t, ndim=1] refined_count = np.zeros(max_mi1_elements, dtype="uint64")             # <<<<<<<<<<<<<<
 *         # Copy things from structure (type cast)
 *         for i in range(3):
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyLong_From_npy_uint64(__pyx_v_max_mi1_elements); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    assert(__pyx_t_3);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, __pyx_t_4};
    __pyx_t_7 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint64, __pyx_t_7, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 722, __pyx_L1_error)
    __pyx_t_2 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 722, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_refined_count.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_refined_count = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 722, __pyx_L1_error)
    } else {__pyx_pybuffernd_refined_count.diminfo[0].strides = __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_refined_count.diminfo[0].shape = __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_v_refined_count = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":724
 *         cdef np.ndarray[np.uint64_t, ndim=1] refined_count = np.zeros(max_mi1_elements, dtype="uint64")
 *         # Copy things from structure (type cast)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             LE[i] = self.left_edge[i]
 *             RE[i] = self.right_edge[i]
*/
  for (__pyx_t_8 = 0; __pyx_t_8 < 3; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "yt/geometry/particle_oct_container.pyx":725
 *         # Copy things from structure (type cast)
 *         for i in range(3):
 *             LE[i] = self.left_edge[i]             # <<<<<<<<<<<<<<
 *             RE[i] = self.right_edge[i]
 *             PER[i] = self.periodicity[i]
*/
    (__pyx_v_LE[__pyx_v_i]) = (__pyx_v_self->left_edge[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":726
 *         for i in range(3):
 *             LE[i] = self.left_edge[i]
 *             RE[i] = self.right_edge[i]             # <<<<<<<<<<<<<<
 *             PER[i] = self.periodicity[i]
 *             dds1[i] = self.dds_mi1[i]
*/
    (__pyx_v_RE[__pyx_v_i]) = (__pyx_v_self->right_edge[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":727
 *             LE[i] = self.left_edge[i]
 *             RE[i] = self.right_edge[i]
 *             PER[i] = self.periodicity[i]             # <<<<<<<<<<<<<<
 *             dds1[i] = self.dds_mi1[i]
 *             dds2[i] = self.dds_mi2[i]
*/
    (__pyx_v_PER[__pyx_v_i]) = (__pyx_v_self->periodicity[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":728
 *             RE[i] = self.right_edge[i]
 *             PER[i] = self.periodicity[i]
 *             dds1[i] = self.dds_mi1[i]             # <<<<<<<<<<<<<<
 *             dds2[i] = self.dds_mi2[i]
 *             DW[i] = RE[i] - LE[i]
*/
    (__pyx_v_dds1[__pyx_v_i]) = (__pyx_v_self->dds_mi1[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":729
 *             PER[i] = self.periodicity[i]
 *             dds1[i] = self.dds_mi1[i]
 *             dds2[i] = self.dds_mi2[i]             # <<<<<<<<<<<<<<
 *             DW[i] = RE[i] - LE[i]
 *             axiter[i][0] = 0 # We always do an offset of 0
*/
    (__pyx_v_dds2[__pyx_v_i]) = (__pyx_v_self->dds_mi2[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":730
 *             dds1[i] = self.dds_mi1[i]
 *             dds2[i] = self.dds_mi2[i]
 *             DW[i] = RE[i] - LE[i]             # <<<<<<<<<<<<<<
 *             axiter[i][0] = 0 # We always do an offset of 0
 *             axiterv[i][0] = 0.0
*/
    (__pyx_v_DW[__pyx_v_i]) = ((__pyx_v_RE[__pyx_v_i]) - (__pyx_v_LE[__pyx_v_i]));

    /* "yt/geometry/particle_oct_container.pyx":731
 *             dds2[i] = self.dds_mi2[i]
 *             DW[i] = RE[i] - LE[i]
 *             axiter[i][0] = 0 # We always do an offset of 0             # <<<<<<<<<<<<<<
 *             axiterv[i][0] = 0.0
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_indices = np.empty(pos.shape[0], dtype="u8")
*/
    ((__pyx_v_axiter[__pyx_v_i])[0]) = 0;

    /* "yt/geometry/particle_oct_container.pyx":732
 *             DW[i] = RE[i] - LE[i]
 *             axiter[i][0] = 0 # We always do an offset of 0
 *             axiterv[i][0] = 0.0             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_indices = np.empty(pos.shape[0], dtype="u8")
 *         for p in range(pos.shape[0]):
*/
    ((__pyx_v_axiterv[__pyx_v_i])[0]) = 0.0;
  }

  /* "yt/geometry/particle_oct_container.pyx":733
 *             axiter[i][0] = 0 # We always do an offset of 0
 *             axiterv[i][0] = 0.0
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_indices = np.empty(pos.shape[0], dtype="u8")             # <<<<<<<<<<<<<<
 *         for p in range(pos.shape[0]):
 *             morton_indices[p] = bounded_morton(pos[p, 0], pos[p, 1], pos[p, 2],
*/
  __pyx_t_5 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_9 = __pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_pos)); if (unlikely(__pyx_t_9 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 733, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyLong_From_Py_intptr_t((__pyx_t_9[0])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_5);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_5, __pyx_t_7};
    __pyx_t_3 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_u8, __pyx_t_3, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
    __pyx_t_2 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 733, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_morton_indices.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_morton_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_morton_indices.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 733, __pyx_L1_error)
    } else {__pyx_pybuffernd_morton_indices.diminfo[0].strides = __pyx_pybuffernd_morton_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_morton_indices.diminfo[0].shape = __pyx_pybuffernd_morton_indices.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_v_morton_indices = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":734
 *             axiterv[i][0] = 0.0
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_indices = np.empty(pos.shape[0], dtype="u8")
 *         for p in range(pos.shape[0]):             # <<<<<<<<<<<<<<
 *             morton_indices[p] = bounded_morton(pos[p, 0], pos[p, 1], pos[p, 2],
 *                                                LE, RE, self.index_order1)
*/
  __pyx_t_9 = __pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_pos)); if (unlikely(__pyx_t_9 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
  __pyx_t_10 = (__pyx_t_9[0]);
  __pyx_t_11 = __pyx_t_10;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
    __pyx_v_p = __pyx_t_12;

    /* "yt/geometry/particle_oct_container.pyx":735
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_indices = np.empty(pos.shape[0], dtype="u8")
 *         for p in range(pos.shape[0]):
 *             morton_indices[p] = bounded_morton(pos[p, 0], pos[p, 1], pos[p, 2],             # <<<<<<<<<<<<<<
 *                                                LE, RE, self.index_order1)
 *         # Loop over positions skipping those outside the domain
*/
    __pyx_t_13 = __pyx_v_p;
    __pyx_t_14 = 0;
    __pyx_t_15 = __pyx_v_p;
    __pyx_t_16 = 1;
    __pyx_t_17 = __pyx_v_p;
    __pyx_t_18 = 2;

    /* "yt/geometry/particle_oct_container.pyx":736
 *         for p in range(pos.shape[0]):
 *             morton_indices[p] = bounded_morton(pos[p, 0], pos[p, 1], pos[p, 2],
 *                                                LE, RE, self.index_order1)             # <<<<<<<<<<<<<<
 *         # Loop over positions skipping those outside the domain
 *         cdef np.ndarray[np.uint64_t, ndim=1, cast=True] sorted_order
*/
    __pyx_t_8 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton((*__Pyx_BufPtrStrided2d(float *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_14, __pyx_pybuffernd_pos.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(float *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_pos.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(float *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_pos.diminfo[1].strides)), __pyx_v_LE, __pyx_v_RE, __pyx_v_self->index_order1); if (unlikely(__pyx_t_8 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 735, __pyx_L1_error)

    /* "yt/geometry/particle_oct_container.pyx":735
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_indices = np.empty(pos.shape[0], dtype="u8")
 *         for p in range(pos.shape[0]):
 *             morton_indices[p] = bounded_morton(pos[p, 0], pos[p, 1], pos[p, 2],             # <<<<<<<<<<<<<<
 *                                                LE, RE, self.index_order1)
 *         # Loop over positions skipping those outside the domain
*/
    __pyx_t_17 = __pyx_v_p;
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_morton_indices.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_morton_indices.diminfo[0].strides) = __pyx_t_8;
  }

  /* "yt/geometry/particle_oct_container.pyx":739
 *         # Loop over positions skipping those outside the domain
 *         cdef np.ndarray[np.uint64_t, ndim=1, cast=True] sorted_order
 *         if hsml is None:             # <<<<<<<<<<<<<<
 *             # casting to uint64 for compatibility with 32 bits systems
 *             # see https://github.com/yt-project/yt/issues/3656
*/
  __pyx_t_19 = (((PyObject *)__pyx_v_hsml) == Py_None);
  if (__pyx_t_19) {

    /* "yt/geometry/particle_oct_container.pyx":742
 *             # casting to uint64 for compatibility with 32 bits systems
 *             # see https://github.com/yt-project/yt/issues/3656
 *             sorted_order = np.argsort(morton_indices).astype(np.uint64, copy=False)             # <<<<<<<<<<<<<<
 *         else:
 *             sorted_order = np.argsort(hsml)[::-1].astype(np.uint64, copy=False)
*/
    __pyx_t_7 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_argsort); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_20))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_20);
      assert(__pyx_t_7);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_20);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_20, __pyx__function);
      __pyx_t_6 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, ((PyObject *)__pyx_v_morton_indices)};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_20, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 742, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __pyx_t_4 = __pyx_t_3;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_mstate_global->__pyx_n_u_uint64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_4, __pyx_t_7};
      __pyx_t_20 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 742, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_copy, Py_False, __pyx_t_20, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 742, __pyx_L1_error)
      __pyx_t_2 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_20);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 742, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 742, __pyx_L1_error)
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer);
      __pyx_t_21 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 1, __pyx_stack);
      if (unlikely(__pyx_t_21 < 0)) {
        PyErr_Fetch(&__pyx_t_22, &__pyx_t_23, &__pyx_t_24);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer, (PyObject*)__pyx_v_sorted_order, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 1, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_22); Py_XDECREF(__pyx_t_23); Py_XDECREF(__pyx_t_24);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_22, __pyx_t_23, __pyx_t_24);
        }
        __pyx_t_22 = __pyx_t_23 = __pyx_t_24 = 0;
      }
      __pyx_pybuffernd_sorted_order.diminfo[0].strides = __pyx_pybuffernd_sorted_order.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sorted_order.diminfo[0].shape = __pyx_pybuffernd_sorted_order.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 742, __pyx_L1_error)
    }
    __pyx_v_sorted_order = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/geometry/particle_oct_container.pyx":739
 *         # Loop over positions skipping those outside the domain
 *         cdef np.ndarray[np.uint64_t, ndim=1, cast=True] sorted_order
 *         if hsml is None:             # <<<<<<<<<<<<<<
 *             # casting to uint64 for compatibility with 32 bits systems
 *             # see https://github.com/yt-project/yt/issues/3656
*/
    goto __pyx_L7;
  }

  /* "yt/geometry/particle_oct_container.pyx":744
 *             sorted_order = np.argsort(morton_indices).astype(np.uint64, copy=False)
 *         else:
 *             sorted_order = np.argsort(hsml)[::-1].astype(np.uint64, copy=False)             # <<<<<<<<<<<<<<
 *         for sorted_ind in range(sorted_order.shape[0]):
 *             p = sorted_order[sorted_ind]
*/
  /*else*/ {
    __pyx_t_7 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_argsort); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_7);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_6 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, ((PyObject *)__pyx_v_hsml)};
      __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
    }
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_20, __pyx_mstate_global->__pyx_slice[1]); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_t_3 = __pyx_t_5;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_mstate_global->__pyx_n_u_uint64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, __pyx_t_7};
      __pyx_t_20 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_copy, Py_False, __pyx_t_20, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 744, __pyx_L1_error)
      __pyx_t_2 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_20);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 744, __pyx_L1_error)
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer);
      __pyx_t_21 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 1, __pyx_stack);
      if (unlikely(__pyx_t_21 < 0)) {
        PyErr_Fetch(&__pyx_t_24, &__pyx_t_23, &__pyx_t_22);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer, (PyObject*)__pyx_v_sorted_order, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 1, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_24); Py_XDECREF(__pyx_t_23); Py_XDECREF(__pyx_t_22);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_24, __pyx_t_23, __pyx_t_22);
        }
        __pyx_t_24 = __pyx_t_23 = __pyx_t_22 = 0;
      }
      __pyx_pybuffernd_sorted_order.diminfo[0].strides = __pyx_pybuffernd_sorted_order.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sorted_order.diminfo[0].shape = __pyx_pybuffernd_sorted_order.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 744, __pyx_L1_error)
    }
    __pyx_v_sorted_order = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L7:;

  /* "yt/geometry/particle_oct_container.pyx":745
 *         else:
 *             sorted_order = np.argsort(hsml)[::-1].astype(np.uint64, copy=False)
 *         for sorted_ind in range(sorted_order.shape[0]):             # <<<<<<<<<<<<<<
 *             p = sorted_order[sorted_ind]
 *             skip = 0
*/
  __pyx_t_9 = __pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_sorted_order)); if (unlikely(__pyx_t_9 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 745, __pyx_L1_error)
  __pyx_t_10 = (__pyx_t_9[0]);
  __pyx_t_11 = __pyx_t_10;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
    __pyx_v_sorted_ind = __pyx_t_12;

    /* "yt/geometry/particle_oct_container.pyx":746
 *             sorted_order = np.argsort(hsml)[::-1].astype(np.uint64, copy=False)
 *         for sorted_ind in range(sorted_order.shape[0]):
 *             p = sorted_order[sorted_ind]             # <<<<<<<<<<<<<<
 *             skip = 0
 *             for i in range(3):
*/
    __pyx_t_17 = __pyx_v_sorted_ind;
    __pyx_v_p = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_sorted_order.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_sorted_order.diminfo[0].strides));

    /* "yt/geometry/particle_oct_container.pyx":747
 *         for sorted_ind in range(sorted_order.shape[0]):
 *             p = sorted_order[sorted_ind]
 *             skip = 0             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 axiter[i][1] = 999
*/
    __pyx_v_skip = 0;

    /* "yt/geometry/particle_oct_container.pyx":748
 *             p = sorted_order[sorted_ind]
 *             skip = 0
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 axiter[i][1] = 999
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
*/
    for (__pyx_t_8 = 0; __pyx_t_8 < 3; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "yt/geometry/particle_oct_container.pyx":749
 *             skip = 0
 *             for i in range(3):
 *                 axiter[i][1] = 999             # <<<<<<<<<<<<<<
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
 *                     skip = 1
*/
      ((__pyx_v_axiter[__pyx_v_i])[1]) = 0x3E7;

      /* "yt/geometry/particle_oct_container.pyx":750
 *             for i in range(3):
 *                 axiter[i][1] = 999
 *                 if not (LE[i] <= pos[p, i] < RE[i]):             # <<<<<<<<<<<<<<
 *                     skip = 1
 *                     break
*/
      __pyx_t_17 = __pyx_v_p;
      __pyx_t_25 = __pyx_v_i;
      __pyx_t_26 = (*__Pyx_BufPtrStrided2d(float *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_25, __pyx_pybuffernd_pos.diminfo[1].strides));
      __pyx_t_19 = ((__pyx_v_LE[__pyx_v_i]) <= __pyx_t_26);
      if (__pyx_t_19) {
        __pyx_t_19 = (__pyx_t_26 < (__pyx_v_RE[__pyx_v_i]));
      }
      __pyx_t_27 = (!__pyx_t_19);
      if (__pyx_t_27) {

        /* "yt/geometry/particle_oct_container.pyx":751
 *                 axiter[i][1] = 999
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
 *                     skip = 1             # <<<<<<<<<<<<<<
 *                     break
 *                 ppos[i] = pos[p,i]
*/
        __pyx_v_skip = 1;

        /* "yt/geometry/particle_oct_container.pyx":752
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
 *                     skip = 1
 *                     break             # <<<<<<<<<<<<<<
 *                 ppos[i] = pos[p,i]
 *             if skip == 1: continue
*/
        goto __pyx_L11_break;

        /* "yt/geometry/particle_oct_container.pyx":750
 *             for i in range(3):
 *                 axiter[i][1] = 999
 *                 if not (LE[i] <= pos[p, i] < RE[i]):             # <<<<<<<<<<<<<<
 *                     skip = 1
 *                     break
*/
      }

      /* "yt/geometry/particle_oct_container.pyx":753
 *                     skip = 1
 *                     break
 *                 ppos[i] = pos[p,i]             # <<<<<<<<<<<<<<
 *             if skip == 1: continue
 *             # Only look if collision at coarse index
*/
      __pyx_t_17 = __pyx_v_p;
      __pyx_t_25 = __pyx_v_i;
      (__pyx_v_ppos[__pyx_v_i]) = (*__Pyx_BufPtrStrided2d(float *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_25, __pyx_pybuffernd_pos.diminfo[1].strides));
    }
    __pyx_L11_break:;

    /* "yt/geometry/particle_oct_container.pyx":754
 *                     break
 *                 ppos[i] = pos[p,i]
 *             if skip == 1: continue             # <<<<<<<<<<<<<<
 *             # Only look if collision at coarse index
 *             mi1 = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,
*/
    __pyx_t_27 = (__pyx_v_skip == 1);
    if (__pyx_t_27) {
      goto __pyx_L8_continue;
    }

    /* "yt/geometry/particle_oct_container.pyx":756
 *             if skip == 1: continue
 *             # Only look if collision at coarse index
 *             mi1 = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,             # <<<<<<<<<<<<<<
 *                                            dds1, mi_split1)
 *             if hsml is None:
*/
    __pyx_t_8 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds((__pyx_v_ppos[0]), (__pyx_v_ppos[1]), (__pyx_v_ppos[2]), __pyx_v_LE, __pyx_v_dds1, __pyx_v_mi_split1); if (unlikely(__pyx_t_8 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L1_error)
    __pyx_v_mi1 = __pyx_t_8;

    /* "yt/geometry/particle_oct_container.pyx":758
 *             mi1 = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,
 *                                            dds1, mi_split1)
 *             if hsml is None:             # <<<<<<<<<<<<<<
 *                 if mask[mi1] < mask_threshold \
 *                         or particle_counts[mi1] < count_threshold:
*/
    __pyx_t_27 = (((PyObject *)__pyx_v_hsml) == Py_None);
    if (__pyx_t_27) {

      /* "yt/geometry/particle_oct_container.pyx":759
 *                                            dds1, mi_split1)
 *             if hsml is None:
 *                 if mask[mi1] < mask_threshold \             # <<<<<<<<<<<<<<
 *                         or particle_counts[mi1] < count_threshold:
 *                     continue
*/
      __pyx_t_8 = __pyx_v_mi1;
      __pyx_t_19 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_mask.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_mask.diminfo[0].strides)) < __pyx_v_mask_threshold);
      if (!__pyx_t_19) {
      } else {
        __pyx_t_27 = __pyx_t_19;
        goto __pyx_L16_bool_binop_done;
      }

      /* "yt/geometry/particle_oct_container.pyx":760
 *             if hsml is None:
 *                 if mask[mi1] < mask_threshold \
 *                         or particle_counts[mi1] < count_threshold:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # Determine sub index within cell of primary index
*/
      __pyx_t_8 = __pyx_v_mi1;
      __pyx_t_19 = ((*((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_particle_counts.data + __pyx_t_8 * __pyx_v_particle_counts.strides[0]) ))) < __pyx_v_count_threshold);
      __pyx_t_27 = __pyx_t_19;
      __pyx_L16_bool_binop_done:;

      /* "yt/geometry/particle_oct_container.pyx":759
 *                                            dds1, mi_split1)
 *             if hsml is None:
 *                 if mask[mi1] < mask_threshold \             # <<<<<<<<<<<<<<
 *                         or particle_counts[mi1] < count_threshold:
 *                     continue
*/
      if (__pyx_t_27) {

        /* "yt/geometry/particle_oct_container.pyx":761
 *                 if mask[mi1] < mask_threshold \
 *                         or particle_counts[mi1] < count_threshold:
 *                     continue             # <<<<<<<<<<<<<<
 *                 # Determine sub index within cell of primary index
 *                 mi2 = bounded_morton_split_relative_dds(
*/
        goto __pyx_L8_continue;

        /* "yt/geometry/particle_oct_container.pyx":759
 *                                            dds1, mi_split1)
 *             if hsml is None:
 *                 if mask[mi1] < mask_threshold \             # <<<<<<<<<<<<<<
 *                         or particle_counts[mi1] < count_threshold:
 *                     continue
*/
      }

      /* "yt/geometry/particle_oct_container.pyx":763
 *                     continue
 *                 # Determine sub index within cell of primary index
 *                 mi2 = bounded_morton_split_relative_dds(             # <<<<<<<<<<<<<<
 *                     ppos[0], ppos[1], ppos[2], LE, dds1, dds2, mi_split2)
 *                 if refined_count[mi1] == 0:
*/
      __pyx_t_8 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_relative_dds((__pyx_v_ppos[0]), (__pyx_v_ppos[1]), (__pyx_v_ppos[2]), __pyx_v_LE, __pyx_v_dds1, __pyx_v_dds2, __pyx_v_mi_split2); if (unlikely(__pyx_t_8 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L1_error)
      __pyx_v_mi2 = __pyx_t_8;

      /* "yt/geometry/particle_oct_container.pyx":765
 *                 mi2 = bounded_morton_split_relative_dds(
 *                     ppos[0], ppos[1], ppos[2], LE, dds1, dds2, mi_split2)
 *                 if refined_count[mi1] == 0:             # <<<<<<<<<<<<<<
 *                     coarse_refined_map[mi1].padWithZeroes(max_mi2_elements)
 *                 if not coarse_refined_map[mi1].get(mi2):
*/
      __pyx_t_8 = __pyx_v_mi1;
      __pyx_t_27 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_refined_count.diminfo[0].strides)) == 0);
      if (__pyx_t_27) {

        /* "yt/geometry/particle_oct_container.pyx":766
 *                     ppos[0], ppos[1], ppos[2], LE, dds1, dds2, mi_split2)
 *                 if refined_count[mi1] == 0:
 *                     coarse_refined_map[mi1].padWithZeroes(max_mi2_elements)             # <<<<<<<<<<<<<<
 *                 if not coarse_refined_map[mi1].get(mi2):
 *                     coarse_refined_map[mi1].set(mi2)
*/
        (void)((__pyx_v_coarse_refined_map[__pyx_v_mi1]).padWithZeroes(__pyx_v_max_mi2_elements));

        /* "yt/geometry/particle_oct_container.pyx":765
 *                 mi2 = bounded_morton_split_relative_dds(
 *                     ppos[0], ppos[1], ppos[2], LE, dds1, dds2, mi_split2)
 *                 if refined_count[mi1] == 0:             # <<<<<<<<<<<<<<
 *                     coarse_refined_map[mi1].padWithZeroes(max_mi2_elements)
 *                 if not coarse_refined_map[mi1].get(mi2):
*/
      }

      /* "yt/geometry/particle_oct_container.pyx":767
 *                 if refined_count[mi1] == 0:
 *                     coarse_refined_map[mi1].padWithZeroes(max_mi2_elements)
 *                 if not coarse_refined_map[mi1].get(mi2):             # <<<<<<<<<<<<<<
 *                     coarse_refined_map[mi1].set(mi2)
 *                     refined_count[mi1] += 1
*/
      __pyx_t_27 = (!((__pyx_v_coarse_refined_map[__pyx_v_mi1]).get(__pyx_v_mi2) != 0));
      if (__pyx_t_27) {

        /* "yt/geometry/particle_oct_container.pyx":768
 *                     coarse_refined_map[mi1].padWithZeroes(max_mi2_elements)
 *                 if not coarse_refined_map[mi1].get(mi2):
 *                     coarse_refined_map[mi1].set(mi2)             # <<<<<<<<<<<<<<
 *                     refined_count[mi1] += 1
 *             else: # only hit if we have smoothing lengths.
*/
        (__pyx_v_coarse_refined_map[__pyx_v_mi1]).set(__pyx_v_mi2);

        /* "yt/geometry/particle_oct_container.pyx":769
 *                 if not coarse_refined_map[mi1].get(mi2):
 *                     coarse_refined_map[mi1].set(mi2)
 *                     refined_count[mi1] += 1             # <<<<<<<<<<<<<<
 *             else: # only hit if we have smoothing lengths.
 *                 # We have to do essentially the identical process to in the coarse indexing,
*/
        __pyx_t_8 = __pyx_v_mi1;
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_refined_count.diminfo[0].strides) += 1;

        /* "yt/geometry/particle_oct_container.pyx":767
 *                 if refined_count[mi1] == 0:
 *                     coarse_refined_map[mi1].padWithZeroes(max_mi2_elements)
 *                 if not coarse_refined_map[mi1].get(mi2):             # <<<<<<<<<<<<<<
 *                     coarse_refined_map[mi1].set(mi2)
 *                     refined_count[mi1] += 1
*/
      }

      /* "yt/geometry/particle_oct_container.pyx":758
 *             mi1 = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,
 *                                            dds1, mi_split1)
 *             if hsml is None:             # <<<<<<<<<<<<<<
 *                 if mask[mi1] < mask_threshold \
 *                         or particle_counts[mi1] < count_threshold:
*/
      goto __pyx_L14;
    }

    /* "yt/geometry/particle_oct_container.pyx":774
 *                 # except here we need to fill in all the subranges as well as the coarse ranges
 *                 # Note that we are also doing the null case, where we do no shifting
 *                 radius = hsml[p]             # <<<<<<<<<<<<<<
 *                 #if mask[mi1] <= 4: # only one thing in this area
 *                 #    continue
*/
    /*else*/ {
      __pyx_t_17 = __pyx_v_p;
      __pyx_v_radius = (*__Pyx_BufPtrStrided1d(float *, __pyx_pybuffernd_hsml.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_hsml.diminfo[0].strides));

      /* "yt/geometry/particle_oct_container.pyx":777
 *                 #if mask[mi1] <= 4: # only one thing in this area
 *                 #    continue
 *                 for i in range(3):             # <<<<<<<<<<<<<<
 *                     if PER[i] and ppos[i] - radius < LE[i]:
 *                         axiter[i][1] = +1
*/
      for (__pyx_t_8 = 0; __pyx_t_8 < 3; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "yt/geometry/particle_oct_container.pyx":778
 *                 #    continue
 *                 for i in range(3):
 *                     if PER[i] and ppos[i] - radius < LE[i]:             # <<<<<<<<<<<<<<
 *                         axiter[i][1] = +1
 *                         axiterv[i][1] = DW[i]
*/
        __pyx_t_19 = ((__pyx_v_PER[__pyx_v_i]) != 0);
        if (__pyx_t_19) {
        } else {
          __pyx_t_27 = __pyx_t_19;
          goto __pyx_L23_bool_binop_done;
        }
        __pyx_t_19 = (((__pyx_v_ppos[__pyx_v_i]) - __pyx_v_radius) < (__pyx_v_LE[__pyx_v_i]));
        __pyx_t_27 = __pyx_t_19;
        __pyx_L23_bool_binop_done:;
        if (__pyx_t_27) {

          /* "yt/geometry/particle_oct_container.pyx":779
 *                 for i in range(3):
 *                     if PER[i] and ppos[i] - radius < LE[i]:
 *                         axiter[i][1] = +1             # <<<<<<<<<<<<<<
 *                         axiterv[i][1] = DW[i]
 *                     elif PER[i] and ppos[i] + radius > RE[i]:
*/
          ((__pyx_v_axiter[__pyx_v_i])[1]) = 1;

          /* "yt/geometry/particle_oct_container.pyx":780
 *                     if PER[i] and ppos[i] - radius < LE[i]:
 *                         axiter[i][1] = +1
 *                         axiterv[i][1] = DW[i]             # <<<<<<<<<<<<<<
 *                     elif PER[i] and ppos[i] + radius > RE[i]:
 *                         axiter[i][1] = -1
*/
          ((__pyx_v_axiterv[__pyx_v_i])[1]) = (__pyx_v_DW[__pyx_v_i]);

          /* "yt/geometry/particle_oct_container.pyx":778
 *                 #    continue
 *                 for i in range(3):
 *                     if PER[i] and ppos[i] - radius < LE[i]:             # <<<<<<<<<<<<<<
 *                         axiter[i][1] = +1
 *                         axiterv[i][1] = DW[i]
*/
          goto __pyx_L22;
        }

        /* "yt/geometry/particle_oct_container.pyx":781
 *                         axiter[i][1] = +1
 *                         axiterv[i][1] = DW[i]
 *                     elif PER[i] and ppos[i] + radius > RE[i]:             # <<<<<<<<<<<<<<
 *                         axiter[i][1] = -1
 *                         axiterv[i][1] = -DW[i]
*/
        __pyx_t_19 = ((__pyx_v_PER[__pyx_v_i]) != 0);
        if (__pyx_t_19) {
        } else {
          __pyx_t_27 = __pyx_t_19;
          goto __pyx_L25_bool_binop_done;
        }
        __pyx_t_19 = (((__pyx_v_ppos[__pyx_v_i]) + __pyx_v_radius) > (__pyx_v_RE[__pyx_v_i]));
        __pyx_t_27 = __pyx_t_19;
        __pyx_L25_bool_binop_done:;
        if (__pyx_t_27) {

          /* "yt/geometry/particle_oct_container.pyx":782
 *                         axiterv[i][1] = DW[i]
 *                     elif PER[i] and ppos[i] + radius > RE[i]:
 *                         axiter[i][1] = -1             # <<<<<<<<<<<<<<
 *                         axiterv[i][1] = -DW[i]
 *                 for xi in range(2):
*/
          ((__pyx_v_axiter[__pyx_v_i])[1]) = -1;

          /* "yt/geometry/particle_oct_container.pyx":783
 *                     elif PER[i] and ppos[i] + radius > RE[i]:
 *                         axiter[i][1] = -1
 *                         axiterv[i][1] = -DW[i]             # <<<<<<<<<<<<<<
 *                 for xi in range(2):
 *                     if axiter[0][xi] == 999: continue
*/
          ((__pyx_v_axiterv[__pyx_v_i])[1]) = (-(__pyx_v_DW[__pyx_v_i]));

          /* "yt/geometry/particle_oct_container.pyx":781
 *                         axiter[i][1] = +1
 *                         axiterv[i][1] = DW[i]
 *                     elif PER[i] and ppos[i] + radius > RE[i]:             # <<<<<<<<<<<<<<
 *                         axiter[i][1] = -1
 *                         axiterv[i][1] = -DW[i]
*/
        }
        __pyx_L22:;
      }

      /* "yt/geometry/particle_oct_container.pyx":784
 *                         axiter[i][1] = -1
 *                         axiterv[i][1] = -DW[i]
 *                 for xi in range(2):             # <<<<<<<<<<<<<<
 *                     if axiter[0][xi] == 999: continue
 *                     s_ppos[0] = ppos[0] + axiterv[0][xi]
*/
      for (__pyx_t_28 = 0; __pyx_t_28 < 2; __pyx_t_28+=1) {
        __pyx_v_xi = __pyx_t_28;

        /* "yt/geometry/particle_oct_container.pyx":785
 *                         axiterv[i][1] = -DW[i]
 *                 for xi in range(2):
 *                     if axiter[0][xi] == 999: continue             # <<<<<<<<<<<<<<
 *                     s_ppos[0] = ppos[0] + axiterv[0][xi]
 *                     for yi in range(2):
*/
        __pyx_t_27 = (((__pyx_v_axiter[0])[__pyx_v_xi]) == 0x3E7);
        if (__pyx_t_27) {
          goto __pyx_L27_continue;
        }

        /* "yt/geometry/particle_oct_container.pyx":786
 *                 for xi in range(2):
 *                     if axiter[0][xi] == 999: continue
 *                     s_ppos[0] = ppos[0] + axiterv[0][xi]             # <<<<<<<<<<<<<<
 *                     for yi in range(2):
 *                         if axiter[1][yi] == 999: continue
*/
        (__pyx_v_s_ppos[0]) = ((__pyx_v_ppos[0]) + ((__pyx_v_axiterv[0])[__pyx_v_xi]));

        /* "yt/geometry/particle_oct_container.pyx":787
 *                     if axiter[0][xi] == 999: continue
 *                     s_ppos[0] = ppos[0] + axiterv[0][xi]
 *                     for yi in range(2):             # <<<<<<<<<<<<<<
 *                         if axiter[1][yi] == 999: continue
 *                         s_ppos[1] = ppos[1] + axiterv[1][yi]
*/
        for (__pyx_t_29 = 0; __pyx_t_29 < 2; __pyx_t_29+=1) {
          __pyx_v_yi = __pyx_t_29;

          /* "yt/geometry/particle_oct_container.pyx":788
 *                     s_ppos[0] = ppos[0] + axiterv[0][xi]
 *                     for yi in range(2):
 *                         if axiter[1][yi] == 999: continue             # <<<<<<<<<<<<<<
 *                         s_ppos[1] = ppos[1] + axiterv[1][yi]
 *                         for zi in range(2):
*/
          __pyx_t_27 = (((__pyx_v_axiter[1])[__pyx_v_yi]) == 0x3E7);
          if (__pyx_t_27) {
            goto __pyx_L30_continue;
          }

          /* "yt/geometry/particle_oct_container.pyx":789
 *                     for yi in range(2):
 *                         if axiter[1][yi] == 999: continue
 *                         s_ppos[1] = ppos[1] + axiterv[1][yi]             # <<<<<<<<<<<<<<
 *                         for zi in range(2):
 *                             if axiter[2][zi] == 999: continue
*/
          (__pyx_v_s_ppos[1]) = ((__pyx_v_ppos[1]) + ((__pyx_v_axiterv[1])[__pyx_v_yi]));

          /* "yt/geometry/particle_oct_container.pyx":790
 *                         if axiter[1][yi] == 999: continue
 *                         s_ppos[1] = ppos[1] + axiterv[1][yi]
 *                         for zi in range(2):             # <<<<<<<<<<<<<<
 *                             if axiter[2][zi] == 999: continue
 *                             s_ppos[2] = ppos[2] + axiterv[2][zi]
*/
          for (__pyx_t_30 = 0; __pyx_t_30 < 2; __pyx_t_30+=1) {
            __pyx_v_zi = __pyx_t_30;

            /* "yt/geometry/particle_oct_container.pyx":791
 *                         s_ppos[1] = ppos[1] + axiterv[1][yi]
 *                         for zi in range(2):
 *                             if axiter[2][zi] == 999: continue             # <<<<<<<<<<<<<<
 *                             s_ppos[2] = ppos[2] + axiterv[2][zi]
 *                             # OK, now we compute the left and right edges for this shift.
*/
            __pyx_t_27 = (((__pyx_v_axiter[2])[__pyx_v_zi]) == 0x3E7);
            if (__pyx_t_27) {
              goto __pyx_L33_continue;
            }

            /* "yt/geometry/particle_oct_container.pyx":792
 *                         for zi in range(2):
 *                             if axiter[2][zi] == 999: continue
 *                             s_ppos[2] = ppos[2] + axiterv[2][zi]             # <<<<<<<<<<<<<<
 *                             # OK, now we compute the left and right edges for this shift.
 *                             for i in range(3):
*/
            (__pyx_v_s_ppos[2]) = ((__pyx_v_ppos[2]) + ((__pyx_v_axiterv[2])[__pyx_v_zi]));

            /* "yt/geometry/particle_oct_container.pyx":794
 *                             s_ppos[2] = ppos[2] + axiterv[2][zi]
 *                             # OK, now we compute the left and right edges for this shift.
 *                             for i in range(3):             # <<<<<<<<<<<<<<
 *                                 # casting to int64 is not nice but is so we can have negative values we clip
 *                                 clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds1[i]/10)
*/
            for (__pyx_t_8 = 0; __pyx_t_8 < 3; __pyx_t_8+=1) {
              __pyx_v_i = __pyx_t_8;

              /* "yt/geometry/particle_oct_container.pyx":796
 *                             for i in range(3):
 *                                 # casting to int64 is not nice but is so we can have negative values we clip
 *                                 clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds1[i]/10)             # <<<<<<<<<<<<<<
 *                                 clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds1[i]/10)
 * 
*/
              (__pyx_v_clip_pos_l[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(((__pyx_v_s_ppos[__pyx_v_i]) - __pyx_v_radius), ((__pyx_v_LE[__pyx_v_i]) + ((__pyx_v_dds1[__pyx_v_i]) / 10.0)));

              /* "yt/geometry/particle_oct_container.pyx":797
 *                                 # casting to int64 is not nice but is so we can have negative values we clip
 *                                 clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds1[i]/10)
 *                                 clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds1[i]/10)             # <<<<<<<<<<<<<<
 * 
 *                             bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds1, bounds[0])
*/
              (__pyx_v_clip_pos_r[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(((__pyx_v_s_ppos[__pyx_v_i]) + __pyx_v_radius), ((__pyx_v_RE[__pyx_v_i]) - ((__pyx_v_dds1[__pyx_v_i]) / 10.0)));
            }

            /* "yt/geometry/particle_oct_container.pyx":799
 *                                 clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds1[i]/10)
 * 
 *                             bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds1, bounds[0])             # <<<<<<<<<<<<<<
 *                             bounded_morton_split_dds(clip_pos_r[0], clip_pos_r[1], clip_pos_r[2], LE, dds1, bounds[1])
 * 
*/
            __pyx_t_8 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds((__pyx_v_clip_pos_l[0]), (__pyx_v_clip_pos_l[1]), (__pyx_v_clip_pos_l[2]), __pyx_v_LE, __pyx_v_dds1, (__pyx_v_bounds[0])); if (unlikely(__pyx_t_8 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 799, __pyx_L1_error)

            /* "yt/geometry/particle_oct_container.pyx":800
 * 
 *                             bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds1, bounds[0])
 *                             bounded_morton_split_dds(clip_pos_r[0], clip_pos_r[1], clip_pos_r[2], LE, dds1, bounds[1])             # <<<<<<<<<<<<<<
 * 
 *                             # We go to the upper bound plus one so that we have *inclusive* loops -- the upper bound
*/
            __pyx_t_8 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds((__pyx_v_clip_pos_r[0]), (__pyx_v_clip_pos_r[1]), (__pyx_v_clip_pos_r[2]), __pyx_v_LE, __pyx_v_dds1, (__pyx_v_bounds[1])); if (unlikely(__pyx_t_8 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 800, __pyx_L1_error)

            /* "yt/geometry/particle_oct_container.pyx":809
 *                             # greater than the left edge and less than the
 *                             # right edge, we are fully enclosed.
 *                             for xex in range(bounds[0][0], bounds[1][0] + 1):             # <<<<<<<<<<<<<<
 *                                 for yex in range(bounds[0][1], bounds[1][1] + 1):
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):
*/
            __pyx_t_8 = (((__pyx_v_bounds[1])[0]) + 1);
            __pyx_t_25 = __pyx_t_8;
            for (__pyx_t_31 = ((__pyx_v_bounds[0])[0]); __pyx_t_31 < __pyx_t_25; __pyx_t_31+=1) {
              __pyx_v_xex = __pyx_t_31;

              /* "yt/geometry/particle_oct_container.pyx":810
 *                             # right edge, we are fully enclosed.
 *                             for xex in range(bounds[0][0], bounds[1][0] + 1):
 *                                 for yex in range(bounds[0][1], bounds[1][1] + 1):             # <<<<<<<<<<<<<<
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)
*/
              __pyx_t_32 = (((__pyx_v_bounds[1])[1]) + 1);
              __pyx_t_33 = __pyx_t_32;
              for (__pyx_t_34 = ((__pyx_v_bounds[0])[1]); __pyx_t_34 < __pyx_t_33; __pyx_t_34+=1) {
                __pyx_v_yex = __pyx_t_34;

                /* "yt/geometry/particle_oct_container.pyx":811
 *                             for xex in range(bounds[0][0], bounds[1][0] + 1):
 *                                 for yex in range(bounds[0][1], bounds[1][1] + 1):
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):             # <<<<<<<<<<<<<<
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)
 *                                         if mask[miex1] < mask_threshold or \
*/
                __pyx_t_35 = (((__pyx_v_bounds[1])[2]) + 1);
                __pyx_t_36 = __pyx_t_35;
                for (__pyx_t_37 = ((__pyx_v_bounds[0])[2]); __pyx_t_37 < __pyx_t_36; __pyx_t_37+=1) {
                  __pyx_v_zex = __pyx_t_37;

                  /* "yt/geometry/particle_oct_container.pyx":812
 *                                 for yex in range(bounds[0][1], bounds[1][1] + 1):
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)             # <<<<<<<<<<<<<<
 *                                         if mask[miex1] < mask_threshold or \
 *                                                 particle_counts[miex1] < count_threshold:
*/
                  __pyx_t_38 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_v_xex, __pyx_v_yex, __pyx_v_zex); if (unlikely(__pyx_t_38 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 812, __pyx_L1_error)
                  __pyx_v_miex1 = __pyx_t_38;

                  /* "yt/geometry/particle_oct_container.pyx":813
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)
 *                                         if mask[miex1] < mask_threshold or \             # <<<<<<<<<<<<<<
 *                                                 particle_counts[miex1] < count_threshold:
 *                                             continue
*/
                  __pyx_t_38 = __pyx_v_miex1;
                  __pyx_t_19 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_mask.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_mask.diminfo[0].strides)) < __pyx_v_mask_threshold);
                  if (!__pyx_t_19) {
                  } else {
                    __pyx_t_27 = __pyx_t_19;
                    goto __pyx_L45_bool_binop_done;
                  }

                  /* "yt/geometry/particle_oct_container.pyx":814
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)
 *                                         if mask[miex1] < mask_threshold or \
 *                                                 particle_counts[miex1] < count_threshold:             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         # this explicitly requires that it be *between*
*/
                  __pyx_t_38 = __pyx_v_miex1;
                  __pyx_t_19 = ((*((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_particle_counts.data + __pyx_t_38 * __pyx_v_particle_counts.strides[0]) ))) < __pyx_v_count_threshold);
                  __pyx_t_27 = __pyx_t_19;
                  __pyx_L45_bool_binop_done:;

                  /* "yt/geometry/particle_oct_container.pyx":813
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)
 *                                         if mask[miex1] < mask_threshold or \             # <<<<<<<<<<<<<<
 *                                                 particle_counts[miex1] < count_threshold:
 *                                             continue
*/
                  if (__pyx_t_27) {

                    /* "yt/geometry/particle_oct_container.pyx":815
 *                                         if mask[miex1] < mask_threshold or \
 *                                                 particle_counts[miex1] < count_threshold:
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         # this explicitly requires that it be *between*
 *                                         # them, not overlapping
*/
                    goto __pyx_L42_continue;

                    /* "yt/geometry/particle_oct_container.pyx":813
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)
 *                                         if mask[miex1] < mask_threshold or \             # <<<<<<<<<<<<<<
 *                                                 particle_counts[miex1] < count_threshold:
 *                                             continue
*/
                  }

                  /* "yt/geometry/particle_oct_container.pyx":818
 *                                         # this explicitly requires that it be *between*
 *                                         # them, not overlapping
 *                                         if xex > bounds[0][0] and xex < bounds[1][0] and \             # <<<<<<<<<<<<<<
 *                                            yex > bounds[0][1] and yex < bounds[1][1] and \
 *                                            zex > bounds[0][2] and zex < bounds[1][2]:
*/
                  __pyx_t_19 = (__pyx_v_xex > ((__pyx_v_bounds[0])[0]));
                  if (__pyx_t_19) {
                  } else {
                    __pyx_t_27 = __pyx_t_19;
                    goto __pyx_L48_bool_binop_done;
                  }
                  __pyx_t_19 = (__pyx_v_xex < ((__pyx_v_bounds[1])[0]));
                  if (__pyx_t_19) {
                  } else {
                    __pyx_t_27 = __pyx_t_19;
                    goto __pyx_L48_bool_binop_done;
                  }

                  /* "yt/geometry/particle_oct_container.pyx":819
 *                                         # them, not overlapping
 *                                         if xex > bounds[0][0] and xex < bounds[1][0] and \
 *                                            yex > bounds[0][1] and yex < bounds[1][1] and \             # <<<<<<<<<<<<<<
 *                                            zex > bounds[0][2] and zex < bounds[1][2]:
 *                                             fully_enclosed = 1
*/
                  __pyx_t_19 = (__pyx_v_yex > ((__pyx_v_bounds[0])[1]));
                  if (__pyx_t_19) {
                  } else {
                    __pyx_t_27 = __pyx_t_19;
                    goto __pyx_L48_bool_binop_done;
                  }
                  __pyx_t_19 = (__pyx_v_yex < ((__pyx_v_bounds[1])[1]));
                  if (__pyx_t_19) {
                  } else {
                    __pyx_t_27 = __pyx_t_19;
                    goto __pyx_L48_bool_binop_done;
                  }

                  /* "yt/geometry/particle_oct_container.pyx":820
 *                                         if xex > bounds[0][0] and xex < bounds[1][0] and \
 *                                            yex > bounds[0][1] and yex < bounds[1][1] and \
 *                                            zex > bounds[0][2] and zex < bounds[1][2]:             # <<<<<<<<<<<<<<
 *                                             fully_enclosed = 1
 *                                         else:
*/
                  __pyx_t_19 = (__pyx_v_zex > ((__pyx_v_bounds[0])[2]));
                  if (__pyx_t_19) {
                  } else {
                    __pyx_t_27 = __pyx_t_19;
                    goto __pyx_L48_bool_binop_done;
                  }
                  __pyx_t_19 = (__pyx_v_zex < ((__pyx_v_bounds[1])[2]));
                  __pyx_t_27 = __pyx_t_19;
                  __pyx_L48_bool_binop_done:;

                  /* "yt/geometry/particle_oct_container.pyx":818
 *                                         # this explicitly requires that it be *between*
 *                                         # them, not overlapping
 *                                         if xex > bounds[0][0] and xex < bounds[1][0] and \             # <<<<<<<<<<<<<<
 *                                            yex > bounds[0][1] and yex < bounds[1][1] and \
 *                                            zex > bounds[0][2] and zex < bounds[1][2]:
*/
                  if (__pyx_t_27) {

                    /* "yt/geometry/particle_oct_container.pyx":821
 *                                            yex > bounds[0][1] and yex < bounds[1][1] and \
 *                                            zex > bounds[0][2] and zex < bounds[1][2]:
 *                                             fully_enclosed = 1             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             fully_enclosed = 0
*/
                    __pyx_v_fully_enclosed = 1;

                    /* "yt/geometry/particle_oct_container.pyx":818
 *                                         # this explicitly requires that it be *between*
 *                                         # them, not overlapping
 *                                         if xex > bounds[0][0] and xex < bounds[1][0] and \             # <<<<<<<<<<<<<<
 *                                            yex > bounds[0][1] and yex < bounds[1][1] and \
 *                                            zex > bounds[0][2] and zex < bounds[1][2]:
*/
                    goto __pyx_L47;
                  }

                  /* "yt/geometry/particle_oct_container.pyx":823
 *                                             fully_enclosed = 1
 *                                         else:
 *                                             fully_enclosed = 0             # <<<<<<<<<<<<<<
 *                                         # Now we need to fill our sub-range
 *                                         if refined_count[miex1] == 0:
*/
                  /*else*/ {
                    __pyx_v_fully_enclosed = 0;
                  }
                  __pyx_L47:;

                  /* "yt/geometry/particle_oct_container.pyx":825
 *                                             fully_enclosed = 0
 *                                         # Now we need to fill our sub-range
 *                                         if refined_count[miex1] == 0:             # <<<<<<<<<<<<<<
 *                                             coarse_refined_map[miex1].padWithZeroes(max_mi2_elements)
 *                                         elif refined_count[miex1] >= max_mi2_elements:
*/
                  __pyx_t_38 = __pyx_v_miex1;
                  __pyx_t_27 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_refined_count.diminfo[0].strides)) == 0);
                  if (__pyx_t_27) {

                    /* "yt/geometry/particle_oct_container.pyx":826
 *                                         # Now we need to fill our sub-range
 *                                         if refined_count[miex1] == 0:
 *                                             coarse_refined_map[miex1].padWithZeroes(max_mi2_elements)             # <<<<<<<<<<<<<<
 *                                         elif refined_count[miex1] >= max_mi2_elements:
 *                                             continue
*/
                    (void)((__pyx_v_coarse_refined_map[__pyx_v_miex1]).padWithZeroes(__pyx_v_max_mi2_elements));

                    /* "yt/geometry/particle_oct_container.pyx":825
 *                                             fully_enclosed = 0
 *                                         # Now we need to fill our sub-range
 *                                         if refined_count[miex1] == 0:             # <<<<<<<<<<<<<<
 *                                             coarse_refined_map[miex1].padWithZeroes(max_mi2_elements)
 *                                         elif refined_count[miex1] >= max_mi2_elements:
*/
                    goto __pyx_L54;
                  }

                  /* "yt/geometry/particle_oct_container.pyx":827
 *                                         if refined_count[miex1] == 0:
 *                                             coarse_refined_map[miex1].padWithZeroes(max_mi2_elements)
 *                                         elif refined_count[miex1] >= max_mi2_elements:             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         if fully_enclosed == 1:
*/
                  __pyx_t_38 = __pyx_v_miex1;
                  __pyx_t_27 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_refined_count.diminfo[0].strides)) >= __pyx_v_max_mi2_elements);
                  if (__pyx_t_27) {

                    /* "yt/geometry/particle_oct_container.pyx":828
 *                                             coarse_refined_map[miex1].padWithZeroes(max_mi2_elements)
 *                                         elif refined_count[miex1] >= max_mi2_elements:
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         if fully_enclosed == 1:
 *                                             nfully_enclosed += 1
*/
                    goto __pyx_L42_continue;

                    /* "yt/geometry/particle_oct_container.pyx":827
 *                                         if refined_count[miex1] == 0:
 *                                             coarse_refined_map[miex1].padWithZeroes(max_mi2_elements)
 *                                         elif refined_count[miex1] >= max_mi2_elements:             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         if fully_enclosed == 1:
*/
                  }
                  __pyx_L54:;

                  /* "yt/geometry/particle_oct_container.pyx":829
 *                                         elif refined_count[miex1] >= max_mi2_elements:
 *                                             continue
 *                                         if fully_enclosed == 1:             # <<<<<<<<<<<<<<
 *                                             nfully_enclosed += 1
 *                                             coarse_refined_map[miex1].inplace_logicalxor(
*/
                  __pyx_t_27 = (__pyx_v_fully_enclosed == 1);
                  if (__pyx_t_27) {

                    /* "yt/geometry/particle_oct_container.pyx":830
 *                                             continue
 *                                         if fully_enclosed == 1:
 *                                             nfully_enclosed += 1             # <<<<<<<<<<<<<<
 *                                             coarse_refined_map[miex1].inplace_logicalxor(
 *                                                 coarse_refined_map[miex1])
*/
                    __pyx_v_nfully_enclosed = (__pyx_v_nfully_enclosed + 1);

                    /* "yt/geometry/particle_oct_container.pyx":831
 *                                         if fully_enclosed == 1:
 *                                             nfully_enclosed += 1
 *                                             coarse_refined_map[miex1].inplace_logicalxor(             # <<<<<<<<<<<<<<
 *                                                 coarse_refined_map[miex1])
 *                                             coarse_refined_map[miex1].inplace_logicalnot()
*/
                    (__pyx_v_coarse_refined_map[__pyx_v_miex1]).inplace_logicalxor((__pyx_v_coarse_refined_map[__pyx_v_miex1]));

                    /* "yt/geometry/particle_oct_container.pyx":833
 *                                             coarse_refined_map[miex1].inplace_logicalxor(
 *                                                 coarse_refined_map[miex1])
 *                                             coarse_refined_map[miex1].inplace_logicalnot()             # <<<<<<<<<<<<<<
 *                                             refined_count[miex1] = max_mi2_elements
 *                                             continue
*/
                    (__pyx_v_coarse_refined_map[__pyx_v_miex1]).inplace_logicalnot();

                    /* "yt/geometry/particle_oct_container.pyx":834
 *                                                 coarse_refined_map[miex1])
 *                                             coarse_refined_map[miex1].inplace_logicalnot()
 *                                             refined_count[miex1] = max_mi2_elements             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         n_calls += 1
*/
                    __pyx_t_38 = __pyx_v_miex1;
                    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_refined_count.diminfo[0].strides) = __pyx_v_max_mi2_elements;

                    /* "yt/geometry/particle_oct_container.pyx":835
 *                                             coarse_refined_map[miex1].inplace_logicalnot()
 *                                             refined_count[miex1] = max_mi2_elements
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         n_calls += 1
 *                                         refined_count[miex1] += self.__fill_refined_ranges(s_ppos, radius, LE, RE,
*/
                    goto __pyx_L42_continue;

                    /* "yt/geometry/particle_oct_container.pyx":829
 *                                         elif refined_count[miex1] >= max_mi2_elements:
 *                                             continue
 *                                         if fully_enclosed == 1:             # <<<<<<<<<<<<<<
 *                                             nfully_enclosed += 1
 *                                             coarse_refined_map[miex1].inplace_logicalxor(
*/
                  }

                  /* "yt/geometry/particle_oct_container.pyx":836
 *                                             refined_count[miex1] = max_mi2_elements
 *                                             continue
 *                                         n_calls += 1             # <<<<<<<<<<<<<<
 *                                         refined_count[miex1] += self.__fill_refined_ranges(s_ppos, radius, LE, RE,
 *                                                                    dds1, xex, yex, zex,
*/
                  __pyx_v_n_calls = (__pyx_v_n_calls + 1);

                  /* "yt/geometry/particle_oct_container.pyx":837
 *                                             continue
 *                                         n_calls += 1
 *                                         refined_count[miex1] += self.__fill_refined_ranges(s_ppos, radius, LE, RE,             # <<<<<<<<<<<<<<
 *                                                                    dds1, xex, yex, zex,
 *                                                                    dds2,
*/
                  __pyx_t_17 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self->__pyx_vtab)->_ParticleBitmap__fill_refined_ranges(__pyx_v_self, __pyx_v_s_ppos, __pyx_v_radius, __pyx_v_LE, __pyx_v_RE, __pyx_v_dds1, __pyx_v_xex, __pyx_v_yex, __pyx_v_zex, __pyx_v_dds2, (__pyx_v_coarse_refined_map[__pyx_v_miex1])); if (unlikely(__pyx_t_17 == ((__pyx_t_5numpy_int64_t)-1))) __PYX_ERR(0, 837, __pyx_L1_error)
                  __pyx_t_38 = __pyx_v_miex1;
                  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_refined_count.diminfo[0].strides) += __pyx_t_17;
                  __pyx_L42_continue:;
                }
              }
            }
            __pyx_L33_continue:;
          }
          __pyx_L30_continue:;
        }
        __pyx_L27_continue:;
      }
    }
    __pyx_L14:;
    __pyx_L8_continue:;
  }

  /* "yt/geometry/particle_oct_container.pyx":842
 *                                                                    coarse_refined_map[miex1])
 *         cdef np.uint64_t vec_i
 *         cdef bool_array *buf = NULL             # <<<<<<<<<<<<<<
 *         cdef ewah_word_type w
 *         this_collection = BoolArrayCollection()
*/
  __pyx_v_buf = NULL;

  /* "yt/geometry/particle_oct_container.pyx":844
 *         cdef bool_array *buf = NULL
 *         cdef ewah_word_type w
 *         this_collection = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         cdef ewah_bool_array *refined_arr = NULL
 *         for it1 in coarse_refined_map:
*/
  __pyx_t_5 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
  __pyx_t_20 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_20, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_2);
  }
  __pyx_v_this_collection = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":845
 *         cdef ewah_word_type w
 *         this_collection = BoolArrayCollection()
 *         cdef ewah_bool_array *refined_arr = NULL             # <<<<<<<<<<<<<<
 *         for it1 in coarse_refined_map:
 *             mi1 = it1.first
*/
  __pyx_v_refined_arr = NULL;

  /* "yt/geometry/particle_oct_container.pyx":846
 *         this_collection = BoolArrayCollection()
 *         cdef ewah_bool_array *refined_arr = NULL
 *         for it1 in coarse_refined_map:             # <<<<<<<<<<<<<<
 *             mi1 = it1.first
 *             refined_arr = &this_collection.ewah_coll[0][mi1]
*/
  __pyx_t_39 = __pyx_v_coarse_refined_map.begin();
  for (; __pyx_t_39 != __pyx_v_coarse_refined_map.end(); ++__pyx_t_39) {
    __pyx_t_40 = *__pyx_t_39;
    __pyx_v_it1 = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_40);

    /* "yt/geometry/particle_oct_container.pyx":847
 *         cdef ewah_bool_array *refined_arr = NULL
 *         for it1 in coarse_refined_map:
 *             mi1 = it1.first             # <<<<<<<<<<<<<<
 *             refined_arr = &this_collection.ewah_coll[0][mi1]
 *             this_collection.ewah_keys[0].set(mi1)
*/
    __pyx_t_8 = __pyx_v_it1.first;
    __pyx_v_mi1 = __pyx_t_8;

    /* "yt/geometry/particle_oct_container.pyx":848
 *         for it1 in coarse_refined_map:
 *             mi1 = it1.first
 *             refined_arr = &this_collection.ewah_coll[0][mi1]             # <<<<<<<<<<<<<<
 *             this_collection.ewah_keys[0].set(mi1)
 *             this_collection.ewah_refn[0].set(mi1)
*/
    __pyx_v_refined_arr = (&((__pyx_v_this_collection->ewah_coll[0])[__pyx_v_mi1]));

    /* "yt/geometry/particle_oct_container.pyx":849
 *             mi1 = it1.first
 *             refined_arr = &this_collection.ewah_coll[0][mi1]
 *             this_collection.ewah_keys[0].set(mi1)             # <<<<<<<<<<<<<<
 *             this_collection.ewah_refn[0].set(mi1)
 *             buf = &it1.second
*/
    (void)((__pyx_v_this_collection->ewah_keys[0]).set(__pyx_v_mi1));

    /* "yt/geometry/particle_oct_container.pyx":850
 *             refined_arr = &this_collection.ewah_coll[0][mi1]
 *             this_collection.ewah_keys[0].set(mi1)
 *             this_collection.ewah_refn[0].set(mi1)             # <<<<<<<<<<<<<<
 *             buf = &it1.second
 *             for vec_i in range(buf.sizeInBytes() / sizeof(ewah_word_type)):
*/
    (void)((__pyx_v_this_collection->ewah_refn[0]).set(__pyx_v_mi1));

    /* "yt/geometry/particle_oct_container.pyx":851
 *             this_collection.ewah_keys[0].set(mi1)
 *             this_collection.ewah_refn[0].set(mi1)
 *             buf = &it1.second             # <<<<<<<<<<<<<<
 *             for vec_i in range(buf.sizeInBytes() / sizeof(ewah_word_type)):
 *                 w = buf.getWord(vec_i)
*/
    __pyx_v_buf = (&__pyx_v_it1.second);

    /* "yt/geometry/particle_oct_container.pyx":852
 *             this_collection.ewah_refn[0].set(mi1)
 *             buf = &it1.second
 *             for vec_i in range(buf.sizeInBytes() / sizeof(ewah_word_type)):             # <<<<<<<<<<<<<<
 *                 w = buf.getWord(vec_i)
 *                 refined_arr.addWord(w)
*/
    __pyx_t_6 = (__pyx_v_buf->sizeInBytes() / (sizeof(__pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_word_type)));
    __pyx_t_41 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_41; __pyx_t_8+=1) {
      __pyx_v_vec_i = __pyx_t_8;

      /* "yt/geometry/particle_oct_container.pyx":853
 *             buf = &it1.second
 *             for vec_i in range(buf.sizeInBytes() / sizeof(ewah_word_type)):
 *                 w = buf.getWord(vec_i)             # <<<<<<<<<<<<<<
 *                 refined_arr.addWord(w)
 *         out_collection = BoolArrayCollection()
*/
      __pyx_v_w = __pyx_v_buf->getWord(__pyx_v_vec_i);

      /* "yt/geometry/particle_oct_container.pyx":854
 *             for vec_i in range(buf.sizeInBytes() / sizeof(ewah_word_type)):
 *                 w = buf.getWord(vec_i)
 *                 refined_arr.addWord(w)             # <<<<<<<<<<<<<<
 *         out_collection = BoolArrayCollection()
 *         in_collection._logicalor(this_collection, out_collection)
*/
      (void)(__pyx_v_refined_arr->addWord(__pyx_v_w));
    }

    /* "yt/geometry/particle_oct_container.pyx":846
 *         this_collection = BoolArrayCollection()
 *         cdef ewah_bool_array *refined_arr = NULL
 *         for it1 in coarse_refined_map:             # <<<<<<<<<<<<<<
 *             mi1 = it1.first
 *             refined_arr = &this_collection.ewah_coll[0][mi1]
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":855
 *                 w = buf.getWord(vec_i)
 *                 refined_arr.addWord(w)
 *         out_collection = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         in_collection._logicalor(this_collection, out_collection)
 *         return out_collection
*/
  __pyx_t_20 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
  __pyx_t_5 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_20, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_2);
  }
  __pyx_v_out_collection = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":856
 *                 refined_arr.addWord(w)
 *         out_collection = BoolArrayCollection()
 *         in_collection._logicalor(this_collection, out_collection)             # <<<<<<<<<<<<<<
 *         return out_collection
 * 
*/
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_v_in_collection->__pyx_vtab)->_logicalor(__pyx_v_in_collection, __pyx_v_this_collection, __pyx_v_out_collection); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":857
 *         out_collection = BoolArrayCollection()
 *         in_collection._logicalor(this_collection, out_collection)
 *         return out_collection             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out_collection);
  __pyx_r = __pyx_v_out_collection;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":680
 *         return 0, out_collection
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_20);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_morton_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_refined_count.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._ParticleBitmap__refined_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_morton_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_refined_count.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_this_collection);
  __Pyx_XDECREF((PyObject *)__pyx_v_out_collection);
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_particle_counts, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_refined_count);
  __Pyx_XDECREF((PyObject *)__pyx_v_morton_indices);
  __Pyx_XDECREF((PyObject *)__pyx_v_sorted_order);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_fuse_1__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_in_collection, PyArrayObject *__pyx_v_pos, PyArrayObject *__pyx_v_hsml, PyArrayObject *__pyx_v_mask, __pyx_t_5numpy_uint64_t __pyx_v_count_threshold, __pyx_t_5numpy_uint8_t __pyx_v_mask_threshold) {
  __pyx_t_5numpy_int64_t __pyx_v_p;
  __pyx_t_5numpy_int64_t __pyx_v_sorted_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_i;
  __pyx_t_5numpy_uint64_t __pyx_v_mi1;
  __pyx_t_5numpy_uint64_t __pyx_v_mi2;
  __pyx_t_5numpy_float64_t __pyx_v_ppos[3];
  __pyx_t_5numpy_float64_t __pyx_v_s_ppos[3];
  int __pyx_v_skip;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_this_collection = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_out_collection = 0;
  __pyx_t_5numpy_uint64_t __pyx_v_bounds[2][3];
  __pyx_t_5numpy_uint8_t __pyx_v_fully_enclosed;
  __pyx_t_5numpy_float64_t __pyx_v_LE[3];
  __pyx_t_5numpy_float64_t __pyx_v_RE[3];
  __pyx_t_5numpy_float64_t __pyx_v_DW[3];
  __pyx_t_5numpy_uint8_t __pyx_v_PER[3];
  __pyx_t_5numpy_float64_t __pyx_v_dds1[3];
  __pyx_t_5numpy_float64_t __pyx_v_dds2[3];
  __pyx_t_5numpy_float64_t __pyx_v_radius;
  __pyx_t_5numpy_uint64_t __pyx_v_mi_split1[3];
  __pyx_t_5numpy_uint64_t __pyx_v_mi_split2[3];
  __pyx_t_5numpy_uint64_t __pyx_v_miex1;
  __Pyx_memviewslice __pyx_v_particle_counts = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_uint64_t __pyx_v_xex;
  __pyx_t_5numpy_uint64_t __pyx_v_yex;
  __pyx_t_5numpy_uint64_t __pyx_v_zex;
  __pyx_t_5numpy_float64_t __pyx_v_clip_pos_l[3];
  __pyx_t_5numpy_float64_t __pyx_v_clip_pos_r[3];
  int __pyx_v_axiter[3][2];
  __pyx_t_5numpy_float64_t __pyx_v_axiterv[3][2];
  __pyx_t_2yt_8geometry_22particle_oct_container_CoarseRefinedSets __pyx_v_coarse_refined_map;
  __pyx_t_5numpy_uint64_t __pyx_v_nfully_enclosed;
  __pyx_t_5numpy_uint64_t __pyx_v_n_calls;
  __pyx_t_5numpy_uint64_t __pyx_v_max_mi1_elements;
  __pyx_t_5numpy_uint64_t __pyx_v_max_mi2_elements;
  PyArrayObject *__pyx_v_refined_count = 0;
  PyArrayObject *__pyx_v_morton_indices = 0;
  PyArrayObject *__pyx_v_sorted_order = 0;
  long __pyx_v_xi;
  long __pyx_v_yi;
  long __pyx_v_zi;
  __pyx_t_5numpy_uint64_t __pyx_v_vec_i;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array *__pyx_v_buf;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_word_type __pyx_v_w;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array *__pyx_v_refined_arr;
  std::pair<__pyx_t_5numpy_uint64_t,__pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array>  __pyx_v_it1;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_hsml;
  __Pyx_Buffer __pyx_pybuffer_hsml;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_mask;
  __Pyx_Buffer __pyx_pybuffer_mask;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_morton_indices;
  __Pyx_Buffer __pyx_pybuffer_morton_indices;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pos;
  __Pyx_Buffer __pyx_pybuffer_pos;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_refined_count;
  __Pyx_Buffer __pyx_pybuffer_refined_count;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sorted_order;
  __Pyx_Buffer __pyx_pybuffer_sorted_order;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __pyx_t_5numpy_uint64_t __pyx_t_8;
  npy_intp *__pyx_t_9;
  npy_intp __pyx_t_10;
  npy_intp __pyx_t_11;
  __pyx_t_5numpy_int64_t __pyx_t_12;
  __pyx_t_5numpy_int64_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  int __pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  __pyx_t_5numpy_uint64_t __pyx_t_25;
  double __pyx_t_26;
  int __pyx_t_27;
  long __pyx_t_28;
  long __pyx_t_29;
  long __pyx_t_30;
  __pyx_t_5numpy_uint64_t __pyx_t_31;
  __pyx_t_5numpy_uint64_t __pyx_t_32;
  __pyx_t_5numpy_uint64_t __pyx_t_33;
  __pyx_t_5numpy_uint64_t __pyx_t_34;
  __pyx_t_5numpy_uint64_t __pyx_t_35;
  __pyx_t_5numpy_uint64_t __pyx_t_36;
  __pyx_t_5numpy_uint64_t __pyx_t_37;
  __pyx_t_5numpy_uint64_t __pyx_t_38;
  std::map<__pyx_t_5numpy_uint64_t,__pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array> ::iterator __pyx_t_39;
  std::pair<__pyx_t_5numpy_uint64_t,__pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array>  __pyx_t_40;
  size_t __pyx_t_41;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1_ParticleBitmap__refined_index_data_file", 0);
  __pyx_pybuffer_refined_count.pybuffer.buf = NULL;
  __pyx_pybuffer_refined_count.refcount = 0;
  __pyx_pybuffernd_refined_count.data = NULL;
  __pyx_pybuffernd_refined_count.rcbuffer = &__pyx_pybuffer_refined_count;
  __pyx_pybuffer_morton_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_morton_indices.refcount = 0;
  __pyx_pybuffernd_morton_indices.data = NULL;
  __pyx_pybuffernd_morton_indices.rcbuffer = &__pyx_pybuffer_morton_indices;
  __pyx_pybuffer_sorted_order.pybuffer.buf = NULL;
  __pyx_pybuffer_sorted_order.refcount = 0;
  __pyx_pybuffernd_sorted_order.data = NULL;
  __pyx_pybuffernd_sorted_order.rcbuffer = &__pyx_pybuffer_sorted_order;
  __pyx_pybuffer_pos.pybuffer.buf = NULL;
  __pyx_pybuffer_pos.refcount = 0;
  __pyx_pybuffernd_pos.data = NULL;
  __pyx_pybuffernd_pos.rcbuffer = &__pyx_pybuffer_pos;
  __pyx_pybuffer_hsml.pybuffer.buf = NULL;
  __pyx_pybuffer_hsml.refcount = 0;
  __pyx_pybuffernd_hsml.data = NULL;
  __pyx_pybuffernd_hsml.rcbuffer = &__pyx_pybuffer_hsml;
  __pyx_pybuffer_mask.pybuffer.buf = NULL;
  __pyx_pybuffer_mask.refcount = 0;
  __pyx_pybuffernd_mask.data = NULL;
  __pyx_pybuffernd_mask.rcbuffer = &__pyx_pybuffer_mask;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos.rcbuffer->pybuffer, (PyObject*)__pyx_v_pos, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 680, __pyx_L1_error)
  }
  __pyx_pybuffernd_pos.diminfo[0].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pos.diminfo[0].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pos.diminfo[1].strides = __pyx_pybuffernd_pos.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pos.diminfo[1].shape = __pyx_pybuffernd_pos.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer, (PyObject*)__pyx_v_hsml, &__Pyx_TypeInfo_double, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 680, __pyx_L1_error)
  }
  __pyx_pybuffernd_hsml.diminfo[0].strides = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_hsml.diminfo[0].shape = __pyx_pybuffernd_hsml.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_mask.rcbuffer->pybuffer, (PyObject*)__pyx_v_mask, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 680, __pyx_L1_error)
  }
  __pyx_pybuffernd_mask.diminfo[0].strides = __pyx_pybuffernd_mask.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_mask.diminfo[0].shape = __pyx_pybuffernd_mask.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":712
 *         cdef np.uint64_t mi_split2[3]
 *         cdef np.uint64_t miex1
 *         cdef np.uint64_t[:] particle_counts = self.particle_counts             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t xex, yex, zex
 *         cdef np.float64_t clip_pos_l[3]
*/
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint64_t(__pyx_v_self->particle_counts, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 712, __pyx_L1_error)
  __pyx_v_particle_counts = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":719
 *         cdef np.float64_t axiterv[3][2]
 *         cdef CoarseRefinedSets coarse_refined_map
 *         cdef np.uint64_t nfully_enclosed = 0, n_calls = 0             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t max_mi1_elements = 1 << (3*self.index_order1)
 *         cdef np.uint64_t max_mi2_elements = 1 << (3*self.index_order2)
*/
  __pyx_v_nfully_enclosed = 0;
  __pyx_v_n_calls = 0;

  /* "yt/geometry/particle_oct_container.pyx":720
 *         cdef CoarseRefinedSets coarse_refined_map
 *         cdef np.uint64_t nfully_enclosed = 0, n_calls = 0
 *         cdef np.uint64_t max_mi1_elements = 1 << (3*self.index_order1)             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t max_mi2_elements = 1 << (3*self.index_order2)
 *         cdef np.ndarray[np.uint64_t, ndim=1] refined_count = np.zeros(max_mi1_elements, dtype="uint64")
*/
  __pyx_v_max_mi1_elements = (1 << (3 * __pyx_v_self->index_order1));

  /* "yt/geometry/particle_oct_container.pyx":721
 *         cdef np.uint64_t nfully_enclosed = 0, n_calls = 0
 *         cdef np.uint64_t max_mi1_elements = 1 << (3*self.index_order1)
 *         cdef np.uint64_t max_mi2_elements = 1 << (3*self.index_order2)             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint64_t, ndim=1] refined_count = np.zeros(max_mi1_elements, dtype="uint64")
 *         # Copy things from structure (type cast)
*/
  __pyx_v_max_mi2_elements = (1 << (3 * __pyx_v_self->index_order2));

  /* "yt/geometry/particle_oct_container.pyx":722
 *         cdef np.uint64_t max_mi1_elements = 1 << (3*self.index_order1)
 *         cdef np.uint64_t max_mi2_elements = 1 << (3*self.index_order2)
 *         cdef np.ndarray[np.uint64_t, ndim=1] refined_count = np.zeros(max_mi1_elements, dtype="uint64")             # <<<<<<<<<<<<<<
 *         # Copy things from structure (type cast)
 *         for i in range(3):
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyLong_From_npy_uint64(__pyx_v_max_mi1_elements); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    assert(__pyx_t_3);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, __pyx_t_4};
    __pyx_t_7 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint64, __pyx_t_7, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 722, __pyx_L1_error)
    __pyx_t_2 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_7);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 722, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_refined_count.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_refined_count = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 722, __pyx_L1_error)
    } else {__pyx_pybuffernd_refined_count.diminfo[0].strides = __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_refined_count.diminfo[0].shape = __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_v_refined_count = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":724
 *         cdef np.ndarray[np.uint64_t, ndim=1] refined_count = np.zeros(max_mi1_elements, dtype="uint64")
 *         # Copy things from structure (type cast)
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             LE[i] = self.left_edge[i]
 *             RE[i] = self.right_edge[i]
*/
  for (__pyx_t_8 = 0; __pyx_t_8 < 3; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "yt/geometry/particle_oct_container.pyx":725
 *         # Copy things from structure (type cast)
 *         for i in range(3):
 *             LE[i] = self.left_edge[i]             # <<<<<<<<<<<<<<
 *             RE[i] = self.right_edge[i]
 *             PER[i] = self.periodicity[i]
*/
    (__pyx_v_LE[__pyx_v_i]) = (__pyx_v_self->left_edge[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":726
 *         for i in range(3):
 *             LE[i] = self.left_edge[i]
 *             RE[i] = self.right_edge[i]             # <<<<<<<<<<<<<<
 *             PER[i] = self.periodicity[i]
 *             dds1[i] = self.dds_mi1[i]
*/
    (__pyx_v_RE[__pyx_v_i]) = (__pyx_v_self->right_edge[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":727
 *             LE[i] = self.left_edge[i]
 *             RE[i] = self.right_edge[i]
 *             PER[i] = self.periodicity[i]             # <<<<<<<<<<<<<<
 *             dds1[i] = self.dds_mi1[i]
 *             dds2[i] = self.dds_mi2[i]
*/
    (__pyx_v_PER[__pyx_v_i]) = (__pyx_v_self->periodicity[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":728
 *             RE[i] = self.right_edge[i]
 *             PER[i] = self.periodicity[i]
 *             dds1[i] = self.dds_mi1[i]             # <<<<<<<<<<<<<<
 *             dds2[i] = self.dds_mi2[i]
 *             DW[i] = RE[i] - LE[i]
*/
    (__pyx_v_dds1[__pyx_v_i]) = (__pyx_v_self->dds_mi1[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":729
 *             PER[i] = self.periodicity[i]
 *             dds1[i] = self.dds_mi1[i]
 *             dds2[i] = self.dds_mi2[i]             # <<<<<<<<<<<<<<
 *             DW[i] = RE[i] - LE[i]
 *             axiter[i][0] = 0 # We always do an offset of 0
*/
    (__pyx_v_dds2[__pyx_v_i]) = (__pyx_v_self->dds_mi2[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":730
 *             dds1[i] = self.dds_mi1[i]
 *             dds2[i] = self.dds_mi2[i]
 *             DW[i] = RE[i] - LE[i]             # <<<<<<<<<<<<<<
 *             axiter[i][0] = 0 # We always do an offset of 0
 *             axiterv[i][0] = 0.0
*/
    (__pyx_v_DW[__pyx_v_i]) = ((__pyx_v_RE[__pyx_v_i]) - (__pyx_v_LE[__pyx_v_i]));

    /* "yt/geometry/particle_oct_container.pyx":731
 *             dds2[i] = self.dds_mi2[i]
 *             DW[i] = RE[i] - LE[i]
 *             axiter[i][0] = 0 # We always do an offset of 0             # <<<<<<<<<<<<<<
 *             axiterv[i][0] = 0.0
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_indices = np.empty(pos.shape[0], dtype="u8")
*/
    ((__pyx_v_axiter[__pyx_v_i])[0]) = 0;

    /* "yt/geometry/particle_oct_container.pyx":732
 *             DW[i] = RE[i] - LE[i]
 *             axiter[i][0] = 0 # We always do an offset of 0
 *             axiterv[i][0] = 0.0             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_indices = np.empty(pos.shape[0], dtype="u8")
 *         for p in range(pos.shape[0]):
*/
    ((__pyx_v_axiterv[__pyx_v_i])[0]) = 0.0;
  }

  /* "yt/geometry/particle_oct_container.pyx":733
 *             axiter[i][0] = 0 # We always do an offset of 0
 *             axiterv[i][0] = 0.0
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_indices = np.empty(pos.shape[0], dtype="u8")             # <<<<<<<<<<<<<<
 *         for p in range(pos.shape[0]):
 *             morton_indices[p] = bounded_morton(pos[p, 0], pos[p, 1], pos[p, 2],
*/
  __pyx_t_5 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_9 = __pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_pos)); if (unlikely(__pyx_t_9 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 733, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyLong_From_Py_intptr_t((__pyx_t_9[0])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_5);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_5, __pyx_t_7};
    __pyx_t_3 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_u8, __pyx_t_3, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
    __pyx_t_2 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 733, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_morton_indices.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_morton_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_morton_indices.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 733, __pyx_L1_error)
    } else {__pyx_pybuffernd_morton_indices.diminfo[0].strides = __pyx_pybuffernd_morton_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_morton_indices.diminfo[0].shape = __pyx_pybuffernd_morton_indices.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_v_morton_indices = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":734
 *             axiterv[i][0] = 0.0
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_indices = np.empty(pos.shape[0], dtype="u8")
 *         for p in range(pos.shape[0]):             # <<<<<<<<<<<<<<
 *             morton_indices[p] = bounded_morton(pos[p, 0], pos[p, 1], pos[p, 2],
 *                                                LE, RE, self.index_order1)
*/
  __pyx_t_9 = __pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_pos)); if (unlikely(__pyx_t_9 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
  __pyx_t_10 = (__pyx_t_9[0]);
  __pyx_t_11 = __pyx_t_10;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
    __pyx_v_p = __pyx_t_12;

    /* "yt/geometry/particle_oct_container.pyx":735
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_indices = np.empty(pos.shape[0], dtype="u8")
 *         for p in range(pos.shape[0]):
 *             morton_indices[p] = bounded_morton(pos[p, 0], pos[p, 1], pos[p, 2],             # <<<<<<<<<<<<<<
 *                                                LE, RE, self.index_order1)
 *         # Loop over positions skipping those outside the domain
*/
    __pyx_t_13 = __pyx_v_p;
    __pyx_t_14 = 0;
    __pyx_t_15 = __pyx_v_p;
    __pyx_t_16 = 1;
    __pyx_t_17 = __pyx_v_p;
    __pyx_t_18 = 2;

    /* "yt/geometry/particle_oct_container.pyx":736
 *         for p in range(pos.shape[0]):
 *             morton_indices[p] = bounded_morton(pos[p, 0], pos[p, 1], pos[p, 2],
 *                                                LE, RE, self.index_order1)             # <<<<<<<<<<<<<<
 *         # Loop over positions skipping those outside the domain
 *         cdef np.ndarray[np.uint64_t, ndim=1, cast=True] sorted_order
*/
    __pyx_t_8 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton((*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_14, __pyx_pybuffernd_pos.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_pos.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_pos.diminfo[1].strides)), __pyx_v_LE, __pyx_v_RE, __pyx_v_self->index_order1); if (unlikely(__pyx_t_8 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 735, __pyx_L1_error)

    /* "yt/geometry/particle_oct_container.pyx":735
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_indices = np.empty(pos.shape[0], dtype="u8")
 *         for p in range(pos.shape[0]):
 *             morton_indices[p] = bounded_morton(pos[p, 0], pos[p, 1], pos[p, 2],             # <<<<<<<<<<<<<<
 *                                                LE, RE, self.index_order1)
 *         # Loop over positions skipping those outside the domain
*/
    __pyx_t_17 = __pyx_v_p;
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_morton_indices.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_morton_indices.diminfo[0].strides) = __pyx_t_8;
  }

  /* "yt/geometry/particle_oct_container.pyx":739
 *         # Loop over positions skipping those outside the domain
 *         cdef np.ndarray[np.uint64_t, ndim=1, cast=True] sorted_order
 *         if hsml is None:             # <<<<<<<<<<<<<<
 *             # casting to uint64 for compatibility with 32 bits systems
 *             # see https://github.com/yt-project/yt/issues/3656
*/
  __pyx_t_19 = (((PyObject *)__pyx_v_hsml) == Py_None);
  if (__pyx_t_19) {

    /* "yt/geometry/particle_oct_container.pyx":742
 *             # casting to uint64 for compatibility with 32 bits systems
 *             # see https://github.com/yt-project/yt/issues/3656
 *             sorted_order = np.argsort(morton_indices).astype(np.uint64, copy=False)             # <<<<<<<<<<<<<<
 *         else:
 *             sorted_order = np.argsort(hsml)[::-1].astype(np.uint64, copy=False)
*/
    __pyx_t_7 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_argsort); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_20))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_20);
      assert(__pyx_t_7);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_20);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_20, __pyx__function);
      __pyx_t_6 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, ((PyObject *)__pyx_v_morton_indices)};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_20, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 742, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __pyx_t_4 = __pyx_t_3;
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_mstate_global->__pyx_n_u_uint64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_4, __pyx_t_7};
      __pyx_t_20 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 742, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_copy, Py_False, __pyx_t_20, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 742, __pyx_L1_error)
      __pyx_t_2 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_20);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 742, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 742, __pyx_L1_error)
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer);
      __pyx_t_21 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 1, __pyx_stack);
      if (unlikely(__pyx_t_21 < 0)) {
        PyErr_Fetch(&__pyx_t_22, &__pyx_t_23, &__pyx_t_24);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer, (PyObject*)__pyx_v_sorted_order, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 1, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_22); Py_XDECREF(__pyx_t_23); Py_XDECREF(__pyx_t_24);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_22, __pyx_t_23, __pyx_t_24);
        }
        __pyx_t_22 = __pyx_t_23 = __pyx_t_24 = 0;
      }
      __pyx_pybuffernd_sorted_order.diminfo[0].strides = __pyx_pybuffernd_sorted_order.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sorted_order.diminfo[0].shape = __pyx_pybuffernd_sorted_order.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 742, __pyx_L1_error)
    }
    __pyx_v_sorted_order = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/geometry/particle_oct_container.pyx":739
 *         # Loop over positions skipping those outside the domain
 *         cdef np.ndarray[np.uint64_t, ndim=1, cast=True] sorted_order
 *         if hsml is None:             # <<<<<<<<<<<<<<
 *             # casting to uint64 for compatibility with 32 bits systems
 *             # see https://github.com/yt-project/yt/issues/3656
*/
    goto __pyx_L7;
  }

  /* "yt/geometry/particle_oct_container.pyx":744
 *             sorted_order = np.argsort(morton_indices).astype(np.uint64, copy=False)
 *         else:
 *             sorted_order = np.argsort(hsml)[::-1].astype(np.uint64, copy=False)             # <<<<<<<<<<<<<<
 *         for sorted_ind in range(sorted_order.shape[0]):
 *             p = sorted_order[sorted_ind]
*/
  /*else*/ {
    __pyx_t_7 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_argsort); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_7);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_6 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, ((PyObject *)__pyx_v_hsml)};
      __pyx_t_20 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
    }
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_20, __pyx_mstate_global->__pyx_slice[2]); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_t_3 = __pyx_t_5;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_20, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_20);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_20, __pyx_mstate_global->__pyx_n_u_uint64); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, __pyx_t_7};
      __pyx_t_20 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_copy, Py_False, __pyx_t_20, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 744, __pyx_L1_error)
      __pyx_t_2 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_20);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 744, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 744, __pyx_L1_error)
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer);
      __pyx_t_21 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_2), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 1, __pyx_stack);
      if (unlikely(__pyx_t_21 < 0)) {
        PyErr_Fetch(&__pyx_t_24, &__pyx_t_23, &__pyx_t_22);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer, (PyObject*)__pyx_v_sorted_order, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 1, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_24); Py_XDECREF(__pyx_t_23); Py_XDECREF(__pyx_t_22);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_24, __pyx_t_23, __pyx_t_22);
        }
        __pyx_t_24 = __pyx_t_23 = __pyx_t_22 = 0;
      }
      __pyx_pybuffernd_sorted_order.diminfo[0].strides = __pyx_pybuffernd_sorted_order.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sorted_order.diminfo[0].shape = __pyx_pybuffernd_sorted_order.rcbuffer->pybuffer.shape[0];
      if (unlikely((__pyx_t_21 < 0))) __PYX_ERR(0, 744, __pyx_L1_error)
    }
    __pyx_v_sorted_order = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;
  }
  __pyx_L7:;

  /* "yt/geometry/particle_oct_container.pyx":745
 *         else:
 *             sorted_order = np.argsort(hsml)[::-1].astype(np.uint64, copy=False)
 *         for sorted_ind in range(sorted_order.shape[0]):             # <<<<<<<<<<<<<<
 *             p = sorted_order[sorted_ind]
 *             skip = 0
*/
  __pyx_t_9 = __pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_sorted_order)); if (unlikely(__pyx_t_9 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 745, __pyx_L1_error)
  __pyx_t_10 = (__pyx_t_9[0]);
  __pyx_t_11 = __pyx_t_10;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
    __pyx_v_sorted_ind = __pyx_t_12;

    /* "yt/geometry/particle_oct_container.pyx":746
 *             sorted_order = np.argsort(hsml)[::-1].astype(np.uint64, copy=False)
 *         for sorted_ind in range(sorted_order.shape[0]):
 *             p = sorted_order[sorted_ind]             # <<<<<<<<<<<<<<
 *             skip = 0
 *             for i in range(3):
*/
    __pyx_t_17 = __pyx_v_sorted_ind;
    __pyx_v_p = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_sorted_order.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_sorted_order.diminfo[0].strides));

    /* "yt/geometry/particle_oct_container.pyx":747
 *         for sorted_ind in range(sorted_order.shape[0]):
 *             p = sorted_order[sorted_ind]
 *             skip = 0             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 axiter[i][1] = 999
*/
    __pyx_v_skip = 0;

    /* "yt/geometry/particle_oct_container.pyx":748
 *             p = sorted_order[sorted_ind]
 *             skip = 0
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 axiter[i][1] = 999
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
*/
    for (__pyx_t_8 = 0; __pyx_t_8 < 3; __pyx_t_8+=1) {
      __pyx_v_i = __pyx_t_8;

      /* "yt/geometry/particle_oct_container.pyx":749
 *             skip = 0
 *             for i in range(3):
 *                 axiter[i][1] = 999             # <<<<<<<<<<<<<<
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
 *                     skip = 1
*/
      ((__pyx_v_axiter[__pyx_v_i])[1]) = 0x3E7;

      /* "yt/geometry/particle_oct_container.pyx":750
 *             for i in range(3):
 *                 axiter[i][1] = 999
 *                 if not (LE[i] <= pos[p, i] < RE[i]):             # <<<<<<<<<<<<<<
 *                     skip = 1
 *                     break
*/
      __pyx_t_17 = __pyx_v_p;
      __pyx_t_25 = __pyx_v_i;
      __pyx_t_26 = (*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_25, __pyx_pybuffernd_pos.diminfo[1].strides));
      __pyx_t_19 = ((__pyx_v_LE[__pyx_v_i]) <= __pyx_t_26);
      if (__pyx_t_19) {
        __pyx_t_19 = (__pyx_t_26 < (__pyx_v_RE[__pyx_v_i]));
      }
      __pyx_t_27 = (!__pyx_t_19);
      if (__pyx_t_27) {

        /* "yt/geometry/particle_oct_container.pyx":751
 *                 axiter[i][1] = 999
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
 *                     skip = 1             # <<<<<<<<<<<<<<
 *                     break
 *                 ppos[i] = pos[p,i]
*/
        __pyx_v_skip = 1;

        /* "yt/geometry/particle_oct_container.pyx":752
 *                 if not (LE[i] <= pos[p, i] < RE[i]):
 *                     skip = 1
 *                     break             # <<<<<<<<<<<<<<
 *                 ppos[i] = pos[p,i]
 *             if skip == 1: continue
*/
        goto __pyx_L11_break;

        /* "yt/geometry/particle_oct_container.pyx":750
 *             for i in range(3):
 *                 axiter[i][1] = 999
 *                 if not (LE[i] <= pos[p, i] < RE[i]):             # <<<<<<<<<<<<<<
 *                     skip = 1
 *                     break
*/
      }

      /* "yt/geometry/particle_oct_container.pyx":753
 *                     skip = 1
 *                     break
 *                 ppos[i] = pos[p,i]             # <<<<<<<<<<<<<<
 *             if skip == 1: continue
 *             # Only look if collision at coarse index
*/
      __pyx_t_17 = __pyx_v_p;
      __pyx_t_25 = __pyx_v_i;
      (__pyx_v_ppos[__pyx_v_i]) = (*__Pyx_BufPtrStrided2d(double *, __pyx_pybuffernd_pos.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_pos.diminfo[0].strides, __pyx_t_25, __pyx_pybuffernd_pos.diminfo[1].strides));
    }
    __pyx_L11_break:;

    /* "yt/geometry/particle_oct_container.pyx":754
 *                     break
 *                 ppos[i] = pos[p,i]
 *             if skip == 1: continue             # <<<<<<<<<<<<<<
 *             # Only look if collision at coarse index
 *             mi1 = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,
*/
    __pyx_t_27 = (__pyx_v_skip == 1);
    if (__pyx_t_27) {
      goto __pyx_L8_continue;
    }

    /* "yt/geometry/particle_oct_container.pyx":756
 *             if skip == 1: continue
 *             # Only look if collision at coarse index
 *             mi1 = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,             # <<<<<<<<<<<<<<
 *                                            dds1, mi_split1)
 *             if hsml is None:
*/
    __pyx_t_8 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds((__pyx_v_ppos[0]), (__pyx_v_ppos[1]), (__pyx_v_ppos[2]), __pyx_v_LE, __pyx_v_dds1, __pyx_v_mi_split1); if (unlikely(__pyx_t_8 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L1_error)
    __pyx_v_mi1 = __pyx_t_8;

    /* "yt/geometry/particle_oct_container.pyx":758
 *             mi1 = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,
 *                                            dds1, mi_split1)
 *             if hsml is None:             # <<<<<<<<<<<<<<
 *                 if mask[mi1] < mask_threshold \
 *                         or particle_counts[mi1] < count_threshold:
*/
    __pyx_t_27 = (((PyObject *)__pyx_v_hsml) == Py_None);
    if (__pyx_t_27) {

      /* "yt/geometry/particle_oct_container.pyx":759
 *                                            dds1, mi_split1)
 *             if hsml is None:
 *                 if mask[mi1] < mask_threshold \             # <<<<<<<<<<<<<<
 *                         or particle_counts[mi1] < count_threshold:
 *                     continue
*/
      __pyx_t_8 = __pyx_v_mi1;
      __pyx_t_19 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_mask.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_mask.diminfo[0].strides)) < __pyx_v_mask_threshold);
      if (!__pyx_t_19) {
      } else {
        __pyx_t_27 = __pyx_t_19;
        goto __pyx_L16_bool_binop_done;
      }

      /* "yt/geometry/particle_oct_container.pyx":760
 *             if hsml is None:
 *                 if mask[mi1] < mask_threshold \
 *                         or particle_counts[mi1] < count_threshold:             # <<<<<<<<<<<<<<
 *                     continue
 *                 # Determine sub index within cell of primary index
*/
      __pyx_t_8 = __pyx_v_mi1;
      __pyx_t_19 = ((*((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_particle_counts.data + __pyx_t_8 * __pyx_v_particle_counts.strides[0]) ))) < __pyx_v_count_threshold);
      __pyx_t_27 = __pyx_t_19;
      __pyx_L16_bool_binop_done:;

      /* "yt/geometry/particle_oct_container.pyx":759
 *                                            dds1, mi_split1)
 *             if hsml is None:
 *                 if mask[mi1] < mask_threshold \             # <<<<<<<<<<<<<<
 *                         or particle_counts[mi1] < count_threshold:
 *                     continue
*/
      if (__pyx_t_27) {

        /* "yt/geometry/particle_oct_container.pyx":761
 *                 if mask[mi1] < mask_threshold \
 *                         or particle_counts[mi1] < count_threshold:
 *                     continue             # <<<<<<<<<<<<<<
 *                 # Determine sub index within cell of primary index
 *                 mi2 = bounded_morton_split_relative_dds(
*/
        goto __pyx_L8_continue;

        /* "yt/geometry/particle_oct_container.pyx":759
 *                                            dds1, mi_split1)
 *             if hsml is None:
 *                 if mask[mi1] < mask_threshold \             # <<<<<<<<<<<<<<
 *                         or particle_counts[mi1] < count_threshold:
 *                     continue
*/
      }

      /* "yt/geometry/particle_oct_container.pyx":763
 *                     continue
 *                 # Determine sub index within cell of primary index
 *                 mi2 = bounded_morton_split_relative_dds(             # <<<<<<<<<<<<<<
 *                     ppos[0], ppos[1], ppos[2], LE, dds1, dds2, mi_split2)
 *                 if refined_count[mi1] == 0:
*/
      __pyx_t_8 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_relative_dds((__pyx_v_ppos[0]), (__pyx_v_ppos[1]), (__pyx_v_ppos[2]), __pyx_v_LE, __pyx_v_dds1, __pyx_v_dds2, __pyx_v_mi_split2); if (unlikely(__pyx_t_8 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 763, __pyx_L1_error)
      __pyx_v_mi2 = __pyx_t_8;

      /* "yt/geometry/particle_oct_container.pyx":765
 *                 mi2 = bounded_morton_split_relative_dds(
 *                     ppos[0], ppos[1], ppos[2], LE, dds1, dds2, mi_split2)
 *                 if refined_count[mi1] == 0:             # <<<<<<<<<<<<<<
 *                     coarse_refined_map[mi1].padWithZeroes(max_mi2_elements)
 *                 if not coarse_refined_map[mi1].get(mi2):
*/
      __pyx_t_8 = __pyx_v_mi1;
      __pyx_t_27 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_refined_count.diminfo[0].strides)) == 0);
      if (__pyx_t_27) {

        /* "yt/geometry/particle_oct_container.pyx":766
 *                     ppos[0], ppos[1], ppos[2], LE, dds1, dds2, mi_split2)
 *                 if refined_count[mi1] == 0:
 *                     coarse_refined_map[mi1].padWithZeroes(max_mi2_elements)             # <<<<<<<<<<<<<<
 *                 if not coarse_refined_map[mi1].get(mi2):
 *                     coarse_refined_map[mi1].set(mi2)
*/
        (void)((__pyx_v_coarse_refined_map[__pyx_v_mi1]).padWithZeroes(__pyx_v_max_mi2_elements));

        /* "yt/geometry/particle_oct_container.pyx":765
 *                 mi2 = bounded_morton_split_relative_dds(
 *                     ppos[0], ppos[1], ppos[2], LE, dds1, dds2, mi_split2)
 *                 if refined_count[mi1] == 0:             # <<<<<<<<<<<<<<
 *                     coarse_refined_map[mi1].padWithZeroes(max_mi2_elements)
 *                 if not coarse_refined_map[mi1].get(mi2):
*/
      }

      /* "yt/geometry/particle_oct_container.pyx":767
 *                 if refined_count[mi1] == 0:
 *                     coarse_refined_map[mi1].padWithZeroes(max_mi2_elements)
 *                 if not coarse_refined_map[mi1].get(mi2):             # <<<<<<<<<<<<<<
 *                     coarse_refined_map[mi1].set(mi2)
 *                     refined_count[mi1] += 1
*/
      __pyx_t_27 = (!((__pyx_v_coarse_refined_map[__pyx_v_mi1]).get(__pyx_v_mi2) != 0));
      if (__pyx_t_27) {

        /* "yt/geometry/particle_oct_container.pyx":768
 *                     coarse_refined_map[mi1].padWithZeroes(max_mi2_elements)
 *                 if not coarse_refined_map[mi1].get(mi2):
 *                     coarse_refined_map[mi1].set(mi2)             # <<<<<<<<<<<<<<
 *                     refined_count[mi1] += 1
 *             else: # only hit if we have smoothing lengths.
*/
        (__pyx_v_coarse_refined_map[__pyx_v_mi1]).set(__pyx_v_mi2);

        /* "yt/geometry/particle_oct_container.pyx":769
 *                 if not coarse_refined_map[mi1].get(mi2):
 *                     coarse_refined_map[mi1].set(mi2)
 *                     refined_count[mi1] += 1             # <<<<<<<<<<<<<<
 *             else: # only hit if we have smoothing lengths.
 *                 # We have to do essentially the identical process to in the coarse indexing,
*/
        __pyx_t_8 = __pyx_v_mi1;
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_refined_count.diminfo[0].strides) += 1;

        /* "yt/geometry/particle_oct_container.pyx":767
 *                 if refined_count[mi1] == 0:
 *                     coarse_refined_map[mi1].padWithZeroes(max_mi2_elements)
 *                 if not coarse_refined_map[mi1].get(mi2):             # <<<<<<<<<<<<<<
 *                     coarse_refined_map[mi1].set(mi2)
 *                     refined_count[mi1] += 1
*/
      }

      /* "yt/geometry/particle_oct_container.pyx":758
 *             mi1 = bounded_morton_split_dds(ppos[0], ppos[1], ppos[2], LE,
 *                                            dds1, mi_split1)
 *             if hsml is None:             # <<<<<<<<<<<<<<
 *                 if mask[mi1] < mask_threshold \
 *                         or particle_counts[mi1] < count_threshold:
*/
      goto __pyx_L14;
    }

    /* "yt/geometry/particle_oct_container.pyx":774
 *                 # except here we need to fill in all the subranges as well as the coarse ranges
 *                 # Note that we are also doing the null case, where we do no shifting
 *                 radius = hsml[p]             # <<<<<<<<<<<<<<
 *                 #if mask[mi1] <= 4: # only one thing in this area
 *                 #    continue
*/
    /*else*/ {
      __pyx_t_17 = __pyx_v_p;
      __pyx_v_radius = (*__Pyx_BufPtrStrided1d(double *, __pyx_pybuffernd_hsml.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_hsml.diminfo[0].strides));

      /* "yt/geometry/particle_oct_container.pyx":777
 *                 #if mask[mi1] <= 4: # only one thing in this area
 *                 #    continue
 *                 for i in range(3):             # <<<<<<<<<<<<<<
 *                     if PER[i] and ppos[i] - radius < LE[i]:
 *                         axiter[i][1] = +1
*/
      for (__pyx_t_8 = 0; __pyx_t_8 < 3; __pyx_t_8+=1) {
        __pyx_v_i = __pyx_t_8;

        /* "yt/geometry/particle_oct_container.pyx":778
 *                 #    continue
 *                 for i in range(3):
 *                     if PER[i] and ppos[i] - radius < LE[i]:             # <<<<<<<<<<<<<<
 *                         axiter[i][1] = +1
 *                         axiterv[i][1] = DW[i]
*/
        __pyx_t_19 = ((__pyx_v_PER[__pyx_v_i]) != 0);
        if (__pyx_t_19) {
        } else {
          __pyx_t_27 = __pyx_t_19;
          goto __pyx_L23_bool_binop_done;
        }
        __pyx_t_19 = (((__pyx_v_ppos[__pyx_v_i]) - __pyx_v_radius) < (__pyx_v_LE[__pyx_v_i]));
        __pyx_t_27 = __pyx_t_19;
        __pyx_L23_bool_binop_done:;
        if (__pyx_t_27) {

          /* "yt/geometry/particle_oct_container.pyx":779
 *                 for i in range(3):
 *                     if PER[i] and ppos[i] - radius < LE[i]:
 *                         axiter[i][1] = +1             # <<<<<<<<<<<<<<
 *                         axiterv[i][1] = DW[i]
 *                     elif PER[i] and ppos[i] + radius > RE[i]:
*/
          ((__pyx_v_axiter[__pyx_v_i])[1]) = 1;

          /* "yt/geometry/particle_oct_container.pyx":780
 *                     if PER[i] and ppos[i] - radius < LE[i]:
 *                         axiter[i][1] = +1
 *                         axiterv[i][1] = DW[i]             # <<<<<<<<<<<<<<
 *                     elif PER[i] and ppos[i] + radius > RE[i]:
 *                         axiter[i][1] = -1
*/
          ((__pyx_v_axiterv[__pyx_v_i])[1]) = (__pyx_v_DW[__pyx_v_i]);

          /* "yt/geometry/particle_oct_container.pyx":778
 *                 #    continue
 *                 for i in range(3):
 *                     if PER[i] and ppos[i] - radius < LE[i]:             # <<<<<<<<<<<<<<
 *                         axiter[i][1] = +1
 *                         axiterv[i][1] = DW[i]
*/
          goto __pyx_L22;
        }

        /* "yt/geometry/particle_oct_container.pyx":781
 *                         axiter[i][1] = +1
 *                         axiterv[i][1] = DW[i]
 *                     elif PER[i] and ppos[i] + radius > RE[i]:             # <<<<<<<<<<<<<<
 *                         axiter[i][1] = -1
 *                         axiterv[i][1] = -DW[i]
*/
        __pyx_t_19 = ((__pyx_v_PER[__pyx_v_i]) != 0);
        if (__pyx_t_19) {
        } else {
          __pyx_t_27 = __pyx_t_19;
          goto __pyx_L25_bool_binop_done;
        }
        __pyx_t_19 = (((__pyx_v_ppos[__pyx_v_i]) + __pyx_v_radius) > (__pyx_v_RE[__pyx_v_i]));
        __pyx_t_27 = __pyx_t_19;
        __pyx_L25_bool_binop_done:;
        if (__pyx_t_27) {

          /* "yt/geometry/particle_oct_container.pyx":782
 *                         axiterv[i][1] = DW[i]
 *                     elif PER[i] and ppos[i] + radius > RE[i]:
 *                         axiter[i][1] = -1             # <<<<<<<<<<<<<<
 *                         axiterv[i][1] = -DW[i]
 *                 for xi in range(2):
*/
          ((__pyx_v_axiter[__pyx_v_i])[1]) = -1;

          /* "yt/geometry/particle_oct_container.pyx":783
 *                     elif PER[i] and ppos[i] + radius > RE[i]:
 *                         axiter[i][1] = -1
 *                         axiterv[i][1] = -DW[i]             # <<<<<<<<<<<<<<
 *                 for xi in range(2):
 *                     if axiter[0][xi] == 999: continue
*/
          ((__pyx_v_axiterv[__pyx_v_i])[1]) = (-(__pyx_v_DW[__pyx_v_i]));

          /* "yt/geometry/particle_oct_container.pyx":781
 *                         axiter[i][1] = +1
 *                         axiterv[i][1] = DW[i]
 *                     elif PER[i] and ppos[i] + radius > RE[i]:             # <<<<<<<<<<<<<<
 *                         axiter[i][1] = -1
 *                         axiterv[i][1] = -DW[i]
*/
        }
        __pyx_L22:;
      }

      /* "yt/geometry/particle_oct_container.pyx":784
 *                         axiter[i][1] = -1
 *                         axiterv[i][1] = -DW[i]
 *                 for xi in range(2):             # <<<<<<<<<<<<<<
 *                     if axiter[0][xi] == 999: continue
 *                     s_ppos[0] = ppos[0] + axiterv[0][xi]
*/
      for (__pyx_t_28 = 0; __pyx_t_28 < 2; __pyx_t_28+=1) {
        __pyx_v_xi = __pyx_t_28;

        /* "yt/geometry/particle_oct_container.pyx":785
 *                         axiterv[i][1] = -DW[i]
 *                 for xi in range(2):
 *                     if axiter[0][xi] == 999: continue             # <<<<<<<<<<<<<<
 *                     s_ppos[0] = ppos[0] + axiterv[0][xi]
 *                     for yi in range(2):
*/
        __pyx_t_27 = (((__pyx_v_axiter[0])[__pyx_v_xi]) == 0x3E7);
        if (__pyx_t_27) {
          goto __pyx_L27_continue;
        }

        /* "yt/geometry/particle_oct_container.pyx":786
 *                 for xi in range(2):
 *                     if axiter[0][xi] == 999: continue
 *                     s_ppos[0] = ppos[0] + axiterv[0][xi]             # <<<<<<<<<<<<<<
 *                     for yi in range(2):
 *                         if axiter[1][yi] == 999: continue
*/
        (__pyx_v_s_ppos[0]) = ((__pyx_v_ppos[0]) + ((__pyx_v_axiterv[0])[__pyx_v_xi]));

        /* "yt/geometry/particle_oct_container.pyx":787
 *                     if axiter[0][xi] == 999: continue
 *                     s_ppos[0] = ppos[0] + axiterv[0][xi]
 *                     for yi in range(2):             # <<<<<<<<<<<<<<
 *                         if axiter[1][yi] == 999: continue
 *                         s_ppos[1] = ppos[1] + axiterv[1][yi]
*/
        for (__pyx_t_29 = 0; __pyx_t_29 < 2; __pyx_t_29+=1) {
          __pyx_v_yi = __pyx_t_29;

          /* "yt/geometry/particle_oct_container.pyx":788
 *                     s_ppos[0] = ppos[0] + axiterv[0][xi]
 *                     for yi in range(2):
 *                         if axiter[1][yi] == 999: continue             # <<<<<<<<<<<<<<
 *                         s_ppos[1] = ppos[1] + axiterv[1][yi]
 *                         for zi in range(2):
*/
          __pyx_t_27 = (((__pyx_v_axiter[1])[__pyx_v_yi]) == 0x3E7);
          if (__pyx_t_27) {
            goto __pyx_L30_continue;
          }

          /* "yt/geometry/particle_oct_container.pyx":789
 *                     for yi in range(2):
 *                         if axiter[1][yi] == 999: continue
 *                         s_ppos[1] = ppos[1] + axiterv[1][yi]             # <<<<<<<<<<<<<<
 *                         for zi in range(2):
 *                             if axiter[2][zi] == 999: continue
*/
          (__pyx_v_s_ppos[1]) = ((__pyx_v_ppos[1]) + ((__pyx_v_axiterv[1])[__pyx_v_yi]));

          /* "yt/geometry/particle_oct_container.pyx":790
 *                         if axiter[1][yi] == 999: continue
 *                         s_ppos[1] = ppos[1] + axiterv[1][yi]
 *                         for zi in range(2):             # <<<<<<<<<<<<<<
 *                             if axiter[2][zi] == 999: continue
 *                             s_ppos[2] = ppos[2] + axiterv[2][zi]
*/
          for (__pyx_t_30 = 0; __pyx_t_30 < 2; __pyx_t_30+=1) {
            __pyx_v_zi = __pyx_t_30;

            /* "yt/geometry/particle_oct_container.pyx":791
 *                         s_ppos[1] = ppos[1] + axiterv[1][yi]
 *                         for zi in range(2):
 *                             if axiter[2][zi] == 999: continue             # <<<<<<<<<<<<<<
 *                             s_ppos[2] = ppos[2] + axiterv[2][zi]
 *                             # OK, now we compute the left and right edges for this shift.
*/
            __pyx_t_27 = (((__pyx_v_axiter[2])[__pyx_v_zi]) == 0x3E7);
            if (__pyx_t_27) {
              goto __pyx_L33_continue;
            }

            /* "yt/geometry/particle_oct_container.pyx":792
 *                         for zi in range(2):
 *                             if axiter[2][zi] == 999: continue
 *                             s_ppos[2] = ppos[2] + axiterv[2][zi]             # <<<<<<<<<<<<<<
 *                             # OK, now we compute the left and right edges for this shift.
 *                             for i in range(3):
*/
            (__pyx_v_s_ppos[2]) = ((__pyx_v_ppos[2]) + ((__pyx_v_axiterv[2])[__pyx_v_zi]));

            /* "yt/geometry/particle_oct_container.pyx":794
 *                             s_ppos[2] = ppos[2] + axiterv[2][zi]
 *                             # OK, now we compute the left and right edges for this shift.
 *                             for i in range(3):             # <<<<<<<<<<<<<<
 *                                 # casting to int64 is not nice but is so we can have negative values we clip
 *                                 clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds1[i]/10)
*/
            for (__pyx_t_8 = 0; __pyx_t_8 < 3; __pyx_t_8+=1) {
              __pyx_v_i = __pyx_t_8;

              /* "yt/geometry/particle_oct_container.pyx":796
 *                             for i in range(3):
 *                                 # casting to int64 is not nice but is so we can have negative values we clip
 *                                 clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds1[i]/10)             # <<<<<<<<<<<<<<
 *                                 clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds1[i]/10)
 * 
*/
              (__pyx_v_clip_pos_l[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(((__pyx_v_s_ppos[__pyx_v_i]) - __pyx_v_radius), ((__pyx_v_LE[__pyx_v_i]) + ((__pyx_v_dds1[__pyx_v_i]) / 10.0)));

              /* "yt/geometry/particle_oct_container.pyx":797
 *                                 # casting to int64 is not nice but is so we can have negative values we clip
 *                                 clip_pos_l[i] = fmax(s_ppos[i] - radius, LE[i] + dds1[i]/10)
 *                                 clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds1[i]/10)             # <<<<<<<<<<<<<<
 * 
 *                             bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds1, bounds[0])
*/
              (__pyx_v_clip_pos_r[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(((__pyx_v_s_ppos[__pyx_v_i]) + __pyx_v_radius), ((__pyx_v_RE[__pyx_v_i]) - ((__pyx_v_dds1[__pyx_v_i]) / 10.0)));
            }

            /* "yt/geometry/particle_oct_container.pyx":799
 *                                 clip_pos_r[i] = fmin(s_ppos[i] + radius, RE[i] - dds1[i]/10)
 * 
 *                             bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds1, bounds[0])             # <<<<<<<<<<<<<<
 *                             bounded_morton_split_dds(clip_pos_r[0], clip_pos_r[1], clip_pos_r[2], LE, dds1, bounds[1])
 * 
*/
            __pyx_t_8 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds((__pyx_v_clip_pos_l[0]), (__pyx_v_clip_pos_l[1]), (__pyx_v_clip_pos_l[2]), __pyx_v_LE, __pyx_v_dds1, (__pyx_v_bounds[0])); if (unlikely(__pyx_t_8 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 799, __pyx_L1_error)

            /* "yt/geometry/particle_oct_container.pyx":800
 * 
 *                             bounded_morton_split_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2], LE, dds1, bounds[0])
 *                             bounded_morton_split_dds(clip_pos_r[0], clip_pos_r[1], clip_pos_r[2], LE, dds1, bounds[1])             # <<<<<<<<<<<<<<
 * 
 *                             # We go to the upper bound plus one so that we have *inclusive* loops -- the upper bound
*/
            __pyx_t_8 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds((__pyx_v_clip_pos_r[0]), (__pyx_v_clip_pos_r[1]), (__pyx_v_clip_pos_r[2]), __pyx_v_LE, __pyx_v_dds1, (__pyx_v_bounds[1])); if (unlikely(__pyx_t_8 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 800, __pyx_L1_error)

            /* "yt/geometry/particle_oct_container.pyx":809
 *                             # greater than the left edge and less than the
 *                             # right edge, we are fully enclosed.
 *                             for xex in range(bounds[0][0], bounds[1][0] + 1):             # <<<<<<<<<<<<<<
 *                                 for yex in range(bounds[0][1], bounds[1][1] + 1):
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):
*/
            __pyx_t_8 = (((__pyx_v_bounds[1])[0]) + 1);
            __pyx_t_25 = __pyx_t_8;
            for (__pyx_t_31 = ((__pyx_v_bounds[0])[0]); __pyx_t_31 < __pyx_t_25; __pyx_t_31+=1) {
              __pyx_v_xex = __pyx_t_31;

              /* "yt/geometry/particle_oct_container.pyx":810
 *                             # right edge, we are fully enclosed.
 *                             for xex in range(bounds[0][0], bounds[1][0] + 1):
 *                                 for yex in range(bounds[0][1], bounds[1][1] + 1):             # <<<<<<<<<<<<<<
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)
*/
              __pyx_t_32 = (((__pyx_v_bounds[1])[1]) + 1);
              __pyx_t_33 = __pyx_t_32;
              for (__pyx_t_34 = ((__pyx_v_bounds[0])[1]); __pyx_t_34 < __pyx_t_33; __pyx_t_34+=1) {
                __pyx_v_yex = __pyx_t_34;

                /* "yt/geometry/particle_oct_container.pyx":811
 *                             for xex in range(bounds[0][0], bounds[1][0] + 1):
 *                                 for yex in range(bounds[0][1], bounds[1][1] + 1):
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):             # <<<<<<<<<<<<<<
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)
 *                                         if mask[miex1] < mask_threshold or \
*/
                __pyx_t_35 = (((__pyx_v_bounds[1])[2]) + 1);
                __pyx_t_36 = __pyx_t_35;
                for (__pyx_t_37 = ((__pyx_v_bounds[0])[2]); __pyx_t_37 < __pyx_t_36; __pyx_t_37+=1) {
                  __pyx_v_zex = __pyx_t_37;

                  /* "yt/geometry/particle_oct_container.pyx":812
 *                                 for yex in range(bounds[0][1], bounds[1][1] + 1):
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)             # <<<<<<<<<<<<<<
 *                                         if mask[miex1] < mask_threshold or \
 *                                                 particle_counts[miex1] < count_threshold:
*/
                  __pyx_t_38 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_v_xex, __pyx_v_yex, __pyx_v_zex); if (unlikely(__pyx_t_38 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 812, __pyx_L1_error)
                  __pyx_v_miex1 = __pyx_t_38;

                  /* "yt/geometry/particle_oct_container.pyx":813
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)
 *                                         if mask[miex1] < mask_threshold or \             # <<<<<<<<<<<<<<
 *                                                 particle_counts[miex1] < count_threshold:
 *                                             continue
*/
                  __pyx_t_38 = __pyx_v_miex1;
                  __pyx_t_19 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_mask.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_mask.diminfo[0].strides)) < __pyx_v_mask_threshold);
                  if (!__pyx_t_19) {
                  } else {
                    __pyx_t_27 = __pyx_t_19;
                    goto __pyx_L45_bool_binop_done;
                  }

                  /* "yt/geometry/particle_oct_container.pyx":814
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)
 *                                         if mask[miex1] < mask_threshold or \
 *                                                 particle_counts[miex1] < count_threshold:             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         # this explicitly requires that it be *between*
*/
                  __pyx_t_38 = __pyx_v_miex1;
                  __pyx_t_19 = ((*((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_particle_counts.data + __pyx_t_38 * __pyx_v_particle_counts.strides[0]) ))) < __pyx_v_count_threshold);
                  __pyx_t_27 = __pyx_t_19;
                  __pyx_L45_bool_binop_done:;

                  /* "yt/geometry/particle_oct_container.pyx":813
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)
 *                                         if mask[miex1] < mask_threshold or \             # <<<<<<<<<<<<<<
 *                                                 particle_counts[miex1] < count_threshold:
 *                                             continue
*/
                  if (__pyx_t_27) {

                    /* "yt/geometry/particle_oct_container.pyx":815
 *                                         if mask[miex1] < mask_threshold or \
 *                                                 particle_counts[miex1] < count_threshold:
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         # this explicitly requires that it be *between*
 *                                         # them, not overlapping
*/
                    goto __pyx_L42_continue;

                    /* "yt/geometry/particle_oct_container.pyx":813
 *                                     for zex in range(bounds[0][2], bounds[1][2] + 1):
 *                                         miex1 = encode_morton_64bit(xex, yex, zex)
 *                                         if mask[miex1] < mask_threshold or \             # <<<<<<<<<<<<<<
 *                                                 particle_counts[miex1] < count_threshold:
 *                                             continue
*/
                  }

                  /* "yt/geometry/particle_oct_container.pyx":818
 *                                         # this explicitly requires that it be *between*
 *                                         # them, not overlapping
 *                                         if xex > bounds[0][0] and xex < bounds[1][0] and \             # <<<<<<<<<<<<<<
 *                                            yex > bounds[0][1] and yex < bounds[1][1] and \
 *                                            zex > bounds[0][2] and zex < bounds[1][2]:
*/
                  __pyx_t_19 = (__pyx_v_xex > ((__pyx_v_bounds[0])[0]));
                  if (__pyx_t_19) {
                  } else {
                    __pyx_t_27 = __pyx_t_19;
                    goto __pyx_L48_bool_binop_done;
                  }
                  __pyx_t_19 = (__pyx_v_xex < ((__pyx_v_bounds[1])[0]));
                  if (__pyx_t_19) {
                  } else {
                    __pyx_t_27 = __pyx_t_19;
                    goto __pyx_L48_bool_binop_done;
                  }

                  /* "yt/geometry/particle_oct_container.pyx":819
 *                                         # them, not overlapping
 *                                         if xex > bounds[0][0] and xex < bounds[1][0] and \
 *                                            yex > bounds[0][1] and yex < bounds[1][1] and \             # <<<<<<<<<<<<<<
 *                                            zex > bounds[0][2] and zex < bounds[1][2]:
 *                                             fully_enclosed = 1
*/
                  __pyx_t_19 = (__pyx_v_yex > ((__pyx_v_bounds[0])[1]));
                  if (__pyx_t_19) {
                  } else {
                    __pyx_t_27 = __pyx_t_19;
                    goto __pyx_L48_bool_binop_done;
                  }
                  __pyx_t_19 = (__pyx_v_yex < ((__pyx_v_bounds[1])[1]));
                  if (__pyx_t_19) {
                  } else {
                    __pyx_t_27 = __pyx_t_19;
                    goto __pyx_L48_bool_binop_done;
                  }

                  /* "yt/geometry/particle_oct_container.pyx":820
 *                                         if xex > bounds[0][0] and xex < bounds[1][0] and \
 *                                            yex > bounds[0][1] and yex < bounds[1][1] and \
 *                                            zex > bounds[0][2] and zex < bounds[1][2]:             # <<<<<<<<<<<<<<
 *                                             fully_enclosed = 1
 *                                         else:
*/
                  __pyx_t_19 = (__pyx_v_zex > ((__pyx_v_bounds[0])[2]));
                  if (__pyx_t_19) {
                  } else {
                    __pyx_t_27 = __pyx_t_19;
                    goto __pyx_L48_bool_binop_done;
                  }
                  __pyx_t_19 = (__pyx_v_zex < ((__pyx_v_bounds[1])[2]));
                  __pyx_t_27 = __pyx_t_19;
                  __pyx_L48_bool_binop_done:;

                  /* "yt/geometry/particle_oct_container.pyx":818
 *                                         # this explicitly requires that it be *between*
 *                                         # them, not overlapping
 *                                         if xex > bounds[0][0] and xex < bounds[1][0] and \             # <<<<<<<<<<<<<<
 *                                            yex > bounds[0][1] and yex < bounds[1][1] and \
 *                                            zex > bounds[0][2] and zex < bounds[1][2]:
*/
                  if (__pyx_t_27) {

                    /* "yt/geometry/particle_oct_container.pyx":821
 *                                            yex > bounds[0][1] and yex < bounds[1][1] and \
 *                                            zex > bounds[0][2] and zex < bounds[1][2]:
 *                                             fully_enclosed = 1             # <<<<<<<<<<<<<<
 *                                         else:
 *                                             fully_enclosed = 0
*/
                    __pyx_v_fully_enclosed = 1;

                    /* "yt/geometry/particle_oct_container.pyx":818
 *                                         # this explicitly requires that it be *between*
 *                                         # them, not overlapping
 *                                         if xex > bounds[0][0] and xex < bounds[1][0] and \             # <<<<<<<<<<<<<<
 *                                            yex > bounds[0][1] and yex < bounds[1][1] and \
 *                                            zex > bounds[0][2] and zex < bounds[1][2]:
*/
                    goto __pyx_L47;
                  }

                  /* "yt/geometry/particle_oct_container.pyx":823
 *                                             fully_enclosed = 1
 *                                         else:
 *                                             fully_enclosed = 0             # <<<<<<<<<<<<<<
 *                                         # Now we need to fill our sub-range
 *                                         if refined_count[miex1] == 0:
*/
                  /*else*/ {
                    __pyx_v_fully_enclosed = 0;
                  }
                  __pyx_L47:;

                  /* "yt/geometry/particle_oct_container.pyx":825
 *                                             fully_enclosed = 0
 *                                         # Now we need to fill our sub-range
 *                                         if refined_count[miex1] == 0:             # <<<<<<<<<<<<<<
 *                                             coarse_refined_map[miex1].padWithZeroes(max_mi2_elements)
 *                                         elif refined_count[miex1] >= max_mi2_elements:
*/
                  __pyx_t_38 = __pyx_v_miex1;
                  __pyx_t_27 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_refined_count.diminfo[0].strides)) == 0);
                  if (__pyx_t_27) {

                    /* "yt/geometry/particle_oct_container.pyx":826
 *                                         # Now we need to fill our sub-range
 *                                         if refined_count[miex1] == 0:
 *                                             coarse_refined_map[miex1].padWithZeroes(max_mi2_elements)             # <<<<<<<<<<<<<<
 *                                         elif refined_count[miex1] >= max_mi2_elements:
 *                                             continue
*/
                    (void)((__pyx_v_coarse_refined_map[__pyx_v_miex1]).padWithZeroes(__pyx_v_max_mi2_elements));

                    /* "yt/geometry/particle_oct_container.pyx":825
 *                                             fully_enclosed = 0
 *                                         # Now we need to fill our sub-range
 *                                         if refined_count[miex1] == 0:             # <<<<<<<<<<<<<<
 *                                             coarse_refined_map[miex1].padWithZeroes(max_mi2_elements)
 *                                         elif refined_count[miex1] >= max_mi2_elements:
*/
                    goto __pyx_L54;
                  }

                  /* "yt/geometry/particle_oct_container.pyx":827
 *                                         if refined_count[miex1] == 0:
 *                                             coarse_refined_map[miex1].padWithZeroes(max_mi2_elements)
 *                                         elif refined_count[miex1] >= max_mi2_elements:             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         if fully_enclosed == 1:
*/
                  __pyx_t_38 = __pyx_v_miex1;
                  __pyx_t_27 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_refined_count.diminfo[0].strides)) >= __pyx_v_max_mi2_elements);
                  if (__pyx_t_27) {

                    /* "yt/geometry/particle_oct_container.pyx":828
 *                                             coarse_refined_map[miex1].padWithZeroes(max_mi2_elements)
 *                                         elif refined_count[miex1] >= max_mi2_elements:
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         if fully_enclosed == 1:
 *                                             nfully_enclosed += 1
*/
                    goto __pyx_L42_continue;

                    /* "yt/geometry/particle_oct_container.pyx":827
 *                                         if refined_count[miex1] == 0:
 *                                             coarse_refined_map[miex1].padWithZeroes(max_mi2_elements)
 *                                         elif refined_count[miex1] >= max_mi2_elements:             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         if fully_enclosed == 1:
*/
                  }
                  __pyx_L54:;

                  /* "yt/geometry/particle_oct_container.pyx":829
 *                                         elif refined_count[miex1] >= max_mi2_elements:
 *                                             continue
 *                                         if fully_enclosed == 1:             # <<<<<<<<<<<<<<
 *                                             nfully_enclosed += 1
 *                                             coarse_refined_map[miex1].inplace_logicalxor(
*/
                  __pyx_t_27 = (__pyx_v_fully_enclosed == 1);
                  if (__pyx_t_27) {

                    /* "yt/geometry/particle_oct_container.pyx":830
 *                                             continue
 *                                         if fully_enclosed == 1:
 *                                             nfully_enclosed += 1             # <<<<<<<<<<<<<<
 *                                             coarse_refined_map[miex1].inplace_logicalxor(
 *                                                 coarse_refined_map[miex1])
*/
                    __pyx_v_nfully_enclosed = (__pyx_v_nfully_enclosed + 1);

                    /* "yt/geometry/particle_oct_container.pyx":831
 *                                         if fully_enclosed == 1:
 *                                             nfully_enclosed += 1
 *                                             coarse_refined_map[miex1].inplace_logicalxor(             # <<<<<<<<<<<<<<
 *                                                 coarse_refined_map[miex1])
 *                                             coarse_refined_map[miex1].inplace_logicalnot()
*/
                    (__pyx_v_coarse_refined_map[__pyx_v_miex1]).inplace_logicalxor((__pyx_v_coarse_refined_map[__pyx_v_miex1]));

                    /* "yt/geometry/particle_oct_container.pyx":833
 *                                             coarse_refined_map[miex1].inplace_logicalxor(
 *                                                 coarse_refined_map[miex1])
 *                                             coarse_refined_map[miex1].inplace_logicalnot()             # <<<<<<<<<<<<<<
 *                                             refined_count[miex1] = max_mi2_elements
 *                                             continue
*/
                    (__pyx_v_coarse_refined_map[__pyx_v_miex1]).inplace_logicalnot();

                    /* "yt/geometry/particle_oct_container.pyx":834
 *                                                 coarse_refined_map[miex1])
 *                                             coarse_refined_map[miex1].inplace_logicalnot()
 *                                             refined_count[miex1] = max_mi2_elements             # <<<<<<<<<<<<<<
 *                                             continue
 *                                         n_calls += 1
*/
                    __pyx_t_38 = __pyx_v_miex1;
                    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_refined_count.diminfo[0].strides) = __pyx_v_max_mi2_elements;

                    /* "yt/geometry/particle_oct_container.pyx":835
 *                                             coarse_refined_map[miex1].inplace_logicalnot()
 *                                             refined_count[miex1] = max_mi2_elements
 *                                             continue             # <<<<<<<<<<<<<<
 *                                         n_calls += 1
 *                                         refined_count[miex1] += self.__fill_refined_ranges(s_ppos, radius, LE, RE,
*/
                    goto __pyx_L42_continue;

                    /* "yt/geometry/particle_oct_container.pyx":829
 *                                         elif refined_count[miex1] >= max_mi2_elements:
 *                                             continue
 *                                         if fully_enclosed == 1:             # <<<<<<<<<<<<<<
 *                                             nfully_enclosed += 1
 *                                             coarse_refined_map[miex1].inplace_logicalxor(
*/
                  }

                  /* "yt/geometry/particle_oct_container.pyx":836
 *                                             refined_count[miex1] = max_mi2_elements
 *                                             continue
 *                                         n_calls += 1             # <<<<<<<<<<<<<<
 *                                         refined_count[miex1] += self.__fill_refined_ranges(s_ppos, radius, LE, RE,
 *                                                                    dds1, xex, yex, zex,
*/
                  __pyx_v_n_calls = (__pyx_v_n_calls + 1);

                  /* "yt/geometry/particle_oct_container.pyx":837
 *                                             continue
 *                                         n_calls += 1
 *                                         refined_count[miex1] += self.__fill_refined_ranges(s_ppos, radius, LE, RE,             # <<<<<<<<<<<<<<
 *                                                                    dds1, xex, yex, zex,
 *                                                                    dds2,
*/
                  __pyx_t_17 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self->__pyx_vtab)->_ParticleBitmap__fill_refined_ranges(__pyx_v_self, __pyx_v_s_ppos, __pyx_v_radius, __pyx_v_LE, __pyx_v_RE, __pyx_v_dds1, __pyx_v_xex, __pyx_v_yex, __pyx_v_zex, __pyx_v_dds2, (__pyx_v_coarse_refined_map[__pyx_v_miex1])); if (unlikely(__pyx_t_17 == ((__pyx_t_5numpy_int64_t)-1))) __PYX_ERR(0, 837, __pyx_L1_error)
                  __pyx_t_38 = __pyx_v_miex1;
                  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_refined_count.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_refined_count.diminfo[0].strides) += __pyx_t_17;
                  __pyx_L42_continue:;
                }
              }
            }
            __pyx_L33_continue:;
          }
          __pyx_L30_continue:;
        }
        __pyx_L27_continue:;
      }
    }
    __pyx_L14:;
    __pyx_L8_continue:;
  }

  /* "yt/geometry/particle_oct_container.pyx":842
 *                                                                    coarse_refined_map[miex1])
 *         cdef np.uint64_t vec_i
 *         cdef bool_array *buf = NULL             # <<<<<<<<<<<<<<
 *         cdef ewah_word_type w
 *         this_collection = BoolArrayCollection()
*/
  __pyx_v_buf = NULL;

  /* "yt/geometry/particle_oct_container.pyx":844
 *         cdef bool_array *buf = NULL
 *         cdef ewah_word_type w
 *         this_collection = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         cdef ewah_bool_array *refined_arr = NULL
 *         for it1 in coarse_refined_map:
*/
  __pyx_t_5 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
  __pyx_t_20 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_20, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_2);
  }
  __pyx_v_this_collection = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":845
 *         cdef ewah_word_type w
 *         this_collection = BoolArrayCollection()
 *         cdef ewah_bool_array *refined_arr = NULL             # <<<<<<<<<<<<<<
 *         for it1 in coarse_refined_map:
 *             mi1 = it1.first
*/
  __pyx_v_refined_arr = NULL;

  /* "yt/geometry/particle_oct_container.pyx":846
 *         this_collection = BoolArrayCollection()
 *         cdef ewah_bool_array *refined_arr = NULL
 *         for it1 in coarse_refined_map:             # <<<<<<<<<<<<<<
 *             mi1 = it1.first
 *             refined_arr = &this_collection.ewah_coll[0][mi1]
*/
  __pyx_t_39 = __pyx_v_coarse_refined_map.begin();
  for (; __pyx_t_39 != __pyx_v_coarse_refined_map.end(); ++__pyx_t_39) {
    __pyx_t_40 = *__pyx_t_39;
    __pyx_v_it1 = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_40);

    /* "yt/geometry/particle_oct_container.pyx":847
 *         cdef ewah_bool_array *refined_arr = NULL
 *         for it1 in coarse_refined_map:
 *             mi1 = it1.first             # <<<<<<<<<<<<<<
 *             refined_arr = &this_collection.ewah_coll[0][mi1]
 *             this_collection.ewah_keys[0].set(mi1)
*/
    __pyx_t_8 = __pyx_v_it1.first;
    __pyx_v_mi1 = __pyx_t_8;

    /* "yt/geometry/particle_oct_container.pyx":848
 *         for it1 in coarse_refined_map:
 *             mi1 = it1.first
 *             refined_arr = &this_collection.ewah_coll[0][mi1]             # <<<<<<<<<<<<<<
 *             this_collection.ewah_keys[0].set(mi1)
 *             this_collection.ewah_refn[0].set(mi1)
*/
    __pyx_v_refined_arr = (&((__pyx_v_this_collection->ewah_coll[0])[__pyx_v_mi1]));

    /* "yt/geometry/particle_oct_container.pyx":849
 *             mi1 = it1.first
 *             refined_arr = &this_collection.ewah_coll[0][mi1]
 *             this_collection.ewah_keys[0].set(mi1)             # <<<<<<<<<<<<<<
 *             this_collection.ewah_refn[0].set(mi1)
 *             buf = &it1.second
*/
    (void)((__pyx_v_this_collection->ewah_keys[0]).set(__pyx_v_mi1));

    /* "yt/geometry/particle_oct_container.pyx":850
 *             refined_arr = &this_collection.ewah_coll[0][mi1]
 *             this_collection.ewah_keys[0].set(mi1)
 *             this_collection.ewah_refn[0].set(mi1)             # <<<<<<<<<<<<<<
 *             buf = &it1.second
 *             for vec_i in range(buf.sizeInBytes() / sizeof(ewah_word_type)):
*/
    (void)((__pyx_v_this_collection->ewah_refn[0]).set(__pyx_v_mi1));

    /* "yt/geometry/particle_oct_container.pyx":851
 *             this_collection.ewah_keys[0].set(mi1)
 *             this_collection.ewah_refn[0].set(mi1)
 *             buf = &it1.second             # <<<<<<<<<<<<<<
 *             for vec_i in range(buf.sizeInBytes() / sizeof(ewah_word_type)):
 *                 w = buf.getWord(vec_i)
*/
    __pyx_v_buf = (&__pyx_v_it1.second);

    /* "yt/geometry/particle_oct_container.pyx":852
 *             this_collection.ewah_refn[0].set(mi1)
 *             buf = &it1.second
 *             for vec_i in range(buf.sizeInBytes() / sizeof(ewah_word_type)):             # <<<<<<<<<<<<<<
 *                 w = buf.getWord(vec_i)
 *                 refined_arr.addWord(w)
*/
    __pyx_t_6 = (__pyx_v_buf->sizeInBytes() / (sizeof(__pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_word_type)));
    __pyx_t_41 = __pyx_t_6;
    for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_41; __pyx_t_8+=1) {
      __pyx_v_vec_i = __pyx_t_8;

      /* "yt/geometry/particle_oct_container.pyx":853
 *             buf = &it1.second
 *             for vec_i in range(buf.sizeInBytes() / sizeof(ewah_word_type)):
 *                 w = buf.getWord(vec_i)             # <<<<<<<<<<<<<<
 *                 refined_arr.addWord(w)
 *         out_collection = BoolArrayCollection()
*/
      __pyx_v_w = __pyx_v_buf->getWord(__pyx_v_vec_i);

      /* "yt/geometry/particle_oct_container.pyx":854
 *             for vec_i in range(buf.sizeInBytes() / sizeof(ewah_word_type)):
 *                 w = buf.getWord(vec_i)
 *                 refined_arr.addWord(w)             # <<<<<<<<<<<<<<
 *         out_collection = BoolArrayCollection()
 *         in_collection._logicalor(this_collection, out_collection)
*/
      (void)(__pyx_v_refined_arr->addWord(__pyx_v_w));
    }

    /* "yt/geometry/particle_oct_container.pyx":846
 *         this_collection = BoolArrayCollection()
 *         cdef ewah_bool_array *refined_arr = NULL
 *         for it1 in coarse_refined_map:             # <<<<<<<<<<<<<<
 *             mi1 = it1.first
 *             refined_arr = &this_collection.ewah_coll[0][mi1]
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":855
 *                 w = buf.getWord(vec_i)
 *                 refined_arr.addWord(w)
 *         out_collection = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         in_collection._logicalor(this_collection, out_collection)
 *         return out_collection
*/
  __pyx_t_20 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
  __pyx_t_5 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_20, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_2);
  }
  __pyx_v_out_collection = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":856
 *                 refined_arr.addWord(w)
 *         out_collection = BoolArrayCollection()
 *         in_collection._logicalor(this_collection, out_collection)             # <<<<<<<<<<<<<<
 *         return out_collection
 * 
*/
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_v_in_collection->__pyx_vtab)->_logicalor(__pyx_v_in_collection, __pyx_v_this_collection, __pyx_v_out_collection); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":857
 *         out_collection = BoolArrayCollection()
 *         in_collection._logicalor(this_collection, out_collection)
 *         return out_collection             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out_collection);
  __pyx_r = __pyx_v_out_collection;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":680
 *         return 0, out_collection
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_20);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_morton_indices.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_refined_count.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._ParticleBitmap__refined_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_hsml.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_morton_indices.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_refined_count.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sorted_order.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_this_collection);
  __Pyx_XDECREF((PyObject *)__pyx_v_out_collection);
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_particle_counts, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_refined_count);
  __Pyx_XDECREF((PyObject *)__pyx_v_morton_indices);
  __Pyx_XDECREF((PyObject *)__pyx_v_sorted_order);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":859
 *         return out_collection
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static __pyx_t_5numpy_int64_t __pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__fill_refined_ranges(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_float64_t *__pyx_v_s_ppos, __pyx_t_5numpy_float64_t __pyx_v_radius, __pyx_t_5numpy_float64_t *__pyx_v_LE, CYTHON_UNUSED __pyx_t_5numpy_float64_t *__pyx_v_RE, __pyx_t_5numpy_float64_t *__pyx_v_dds1, __pyx_t_5numpy_uint64_t __pyx_v_xex, __pyx_t_5numpy_uint64_t __pyx_v_yex, __pyx_t_5numpy_uint64_t __pyx_v_zex, __pyx_t_5numpy_float64_t *__pyx_v_dds2, __pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array &__pyx_v_refined_set) {
  int __pyx_v_i;
  __pyx_t_5numpy_uint64_t __pyx_v_bounds_l[3];
  __pyx_t_5numpy_uint64_t __pyx_v_bounds_r[3];
  __pyx_t_5numpy_uint64_t __pyx_v_miex2;
  __pyx_t_5numpy_uint64_t __pyx_v_miex2_min;
  __pyx_t_5numpy_uint64_t __pyx_v_miex2_max;
  __pyx_t_5numpy_float64_t __pyx_v_clip_pos_l[3];
  __pyx_t_5numpy_float64_t __pyx_v_clip_pos_r[3];
  __pyx_t_5numpy_float64_t __pyx_v_cell_edge_l;
  __pyx_t_5numpy_float64_t __pyx_v_cell_edge_r;
  __pyx_t_5numpy_uint64_t __pyx_v_ex1[3];
  __pyx_t_5numpy_uint64_t __pyx_v_xiex_min;
  __pyx_t_5numpy_uint64_t __pyx_v_yiex_min;
  __pyx_t_5numpy_uint64_t __pyx_v_ziex_min;
  __pyx_t_5numpy_uint64_t __pyx_v_xiex_max;
  __pyx_t_5numpy_uint64_t __pyx_v_yiex_max;
  __pyx_t_5numpy_uint64_t __pyx_v_ziex_max;
  __pyx_t_5numpy_uint64_t __pyx_v_old_nsub;
  __pyx_t_5numpy_uint64_t __pyx_v_xex_max;
  __pyx_t_5numpy_uint64_t __pyx_v_yex_max;
  __pyx_t_5numpy_uint64_t __pyx_v_zex_max;
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __pyx_t_5numpy_uint64_t __pyx_t_4;
  __pyx_t_5numpy_uint64_t __pyx_t_5;
  __pyx_t_5numpy_uint64_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":877
 *         cdef np.uint64_t xiex_min, yiex_min, ziex_min
 *         cdef np.uint64_t xiex_max, yiex_max, ziex_max
 *         cdef np.uint64_t old_nsub = refined_set.numberOfOnes()             # <<<<<<<<<<<<<<
 *         ex1[0] = xex
 *         ex1[1] = yex
*/
  __pyx_v_old_nsub = __pyx_v_refined_set.numberOfOnes();

  /* "yt/geometry/particle_oct_container.pyx":878
 *         cdef np.uint64_t xiex_max, yiex_max, ziex_max
 *         cdef np.uint64_t old_nsub = refined_set.numberOfOnes()
 *         ex1[0] = xex             # <<<<<<<<<<<<<<
 *         ex1[1] = yex
 *         ex1[2] = zex
*/
  (__pyx_v_ex1[0]) = __pyx_v_xex;

  /* "yt/geometry/particle_oct_container.pyx":879
 *         cdef np.uint64_t old_nsub = refined_set.numberOfOnes()
 *         ex1[0] = xex
 *         ex1[1] = yex             # <<<<<<<<<<<<<<
 *         ex1[2] = zex
 *         # Check a few special cases
*/
  (__pyx_v_ex1[1]) = __pyx_v_yex;

  /* "yt/geometry/particle_oct_container.pyx":880
 *         ex1[0] = xex
 *         ex1[1] = yex
 *         ex1[2] = zex             # <<<<<<<<<<<<<<
 *         # Check a few special cases
 *         for i in range(3):
*/
  (__pyx_v_ex1[2]) = __pyx_v_zex;

  /* "yt/geometry/particle_oct_container.pyx":882
 *         ex1[2] = zex
 *         # Check a few special cases
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             # Figure out our bounds inside our coarse cell, in the space of the
 *             # full domain
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":885
 *             # Figure out our bounds inside our coarse cell, in the space of the
 *             # full domain
 *             cell_edge_l = ex1[i] * dds1[i] + LE[i]             # <<<<<<<<<<<<<<
 *             cell_edge_r = cell_edge_l + dds1[i]
 *             if s_ppos[i] + radius < cell_edge_l or s_ppos[i] - radius > cell_edge_r:
*/
    __pyx_v_cell_edge_l = (((__pyx_v_ex1[__pyx_v_i]) * (__pyx_v_dds1[__pyx_v_i])) + (__pyx_v_LE[__pyx_v_i]));

    /* "yt/geometry/particle_oct_container.pyx":886
 *             # full domain
 *             cell_edge_l = ex1[i] * dds1[i] + LE[i]
 *             cell_edge_r = cell_edge_l + dds1[i]             # <<<<<<<<<<<<<<
 *             if s_ppos[i] + radius < cell_edge_l or s_ppos[i] - radius > cell_edge_r:
 *                 return 0
*/
    __pyx_v_cell_edge_r = (__pyx_v_cell_edge_l + (__pyx_v_dds1[__pyx_v_i]));

    /* "yt/geometry/particle_oct_container.pyx":887
 *             cell_edge_l = ex1[i] * dds1[i] + LE[i]
 *             cell_edge_r = cell_edge_l + dds1[i]
 *             if s_ppos[i] + radius < cell_edge_l or s_ppos[i] - radius > cell_edge_r:             # <<<<<<<<<<<<<<
 *                 return 0
 *             clip_pos_l[i] = fmax(s_ppos[i] - radius, cell_edge_l + dds2[i]/2.0)
*/
    __pyx_t_3 = (((__pyx_v_s_ppos[__pyx_v_i]) + __pyx_v_radius) < __pyx_v_cell_edge_l);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_3 = (((__pyx_v_s_ppos[__pyx_v_i]) - __pyx_v_radius) > __pyx_v_cell_edge_r);
    __pyx_t_2 = __pyx_t_3;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_2) {

      /* "yt/geometry/particle_oct_container.pyx":888
 *             cell_edge_r = cell_edge_l + dds1[i]
 *             if s_ppos[i] + radius < cell_edge_l or s_ppos[i] - radius > cell_edge_r:
 *                 return 0             # <<<<<<<<<<<<<<
 *             clip_pos_l[i] = fmax(s_ppos[i] - radius, cell_edge_l + dds2[i]/2.0)
 *             clip_pos_r[i] = fmin(s_ppos[i] + radius, cell_edge_r - dds2[i]/2.0)
*/
      __pyx_r = 0;
      goto __pyx_L0;

      /* "yt/geometry/particle_oct_container.pyx":887
 *             cell_edge_l = ex1[i] * dds1[i] + LE[i]
 *             cell_edge_r = cell_edge_l + dds1[i]
 *             if s_ppos[i] + radius < cell_edge_l or s_ppos[i] - radius > cell_edge_r:             # <<<<<<<<<<<<<<
 *                 return 0
 *             clip_pos_l[i] = fmax(s_ppos[i] - radius, cell_edge_l + dds2[i]/2.0)
*/
    }

    /* "yt/geometry/particle_oct_container.pyx":889
 *             if s_ppos[i] + radius < cell_edge_l or s_ppos[i] - radius > cell_edge_r:
 *                 return 0
 *             clip_pos_l[i] = fmax(s_ppos[i] - radius, cell_edge_l + dds2[i]/2.0)             # <<<<<<<<<<<<<<
 *             clip_pos_r[i] = fmin(s_ppos[i] + radius, cell_edge_r - dds2[i]/2.0)
 *         miex2_min = bounded_morton_split_relative_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2],
*/
    (__pyx_v_clip_pos_l[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(((__pyx_v_s_ppos[__pyx_v_i]) - __pyx_v_radius), (__pyx_v_cell_edge_l + ((__pyx_v_dds2[__pyx_v_i]) / 2.0)));

    /* "yt/geometry/particle_oct_container.pyx":890
 *                 return 0
 *             clip_pos_l[i] = fmax(s_ppos[i] - radius, cell_edge_l + dds2[i]/2.0)
 *             clip_pos_r[i] = fmin(s_ppos[i] + radius, cell_edge_r - dds2[i]/2.0)             # <<<<<<<<<<<<<<
 *         miex2_min = bounded_morton_split_relative_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2],
 *                                                 LE, dds1, dds2, bounds_l)
*/
    (__pyx_v_clip_pos_r[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(((__pyx_v_s_ppos[__pyx_v_i]) + __pyx_v_radius), (__pyx_v_cell_edge_r - ((__pyx_v_dds2[__pyx_v_i]) / 2.0)));
  }

  /* "yt/geometry/particle_oct_container.pyx":891
 *             clip_pos_l[i] = fmax(s_ppos[i] - radius, cell_edge_l + dds2[i]/2.0)
 *             clip_pos_r[i] = fmin(s_ppos[i] + radius, cell_edge_r - dds2[i]/2.0)
 *         miex2_min = bounded_morton_split_relative_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2],             # <<<<<<<<<<<<<<
 *                                                 LE, dds1, dds2, bounds_l)
 *         miex2_max = bounded_morton_split_relative_dds(clip_pos_r[0], clip_pos_r[1], clip_pos_r[2],
*/
  __pyx_t_4 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_relative_dds((__pyx_v_clip_pos_l[0]), (__pyx_v_clip_pos_l[1]), (__pyx_v_clip_pos_l[2]), __pyx_v_LE, __pyx_v_dds1, __pyx_v_dds2, __pyx_v_bounds_l); if (unlikely(__pyx_t_4 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 891, __pyx_L1_error)
  __pyx_v_miex2_min = __pyx_t_4;

  /* "yt/geometry/particle_oct_container.pyx":893
 *         miex2_min = bounded_morton_split_relative_dds(clip_pos_l[0], clip_pos_l[1], clip_pos_l[2],
 *                                                 LE, dds1, dds2, bounds_l)
 *         miex2_max = bounded_morton_split_relative_dds(clip_pos_r[0], clip_pos_r[1], clip_pos_r[2],             # <<<<<<<<<<<<<<
 *                                                 LE, dds1, dds2, bounds_r)
 *         xex_max = self.directional_max2[0]
*/
  __pyx_t_4 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_relative_dds((__pyx_v_clip_pos_r[0]), (__pyx_v_clip_pos_r[1]), (__pyx_v_clip_pos_r[2]), __pyx_v_LE, __pyx_v_dds1, __pyx_v_dds2, __pyx_v_bounds_r); if (unlikely(__pyx_t_4 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L1_error)
  __pyx_v_miex2_max = __pyx_t_4;

  /* "yt/geometry/particle_oct_container.pyx":895
 *         miex2_max = bounded_morton_split_relative_dds(clip_pos_r[0], clip_pos_r[1], clip_pos_r[2],
 *                                                 LE, dds1, dds2, bounds_r)
 *         xex_max = self.directional_max2[0]             # <<<<<<<<<<<<<<
 *         yex_max = self.directional_max2[1]
 *         zex_max = self.directional_max2[2]
*/
  __pyx_v_xex_max = (__pyx_v_self->directional_max2[0]);

  /* "yt/geometry/particle_oct_container.pyx":896
 *                                                 LE, dds1, dds2, bounds_r)
 *         xex_max = self.directional_max2[0]
 *         yex_max = self.directional_max2[1]             # <<<<<<<<<<<<<<
 *         zex_max = self.directional_max2[2]
 *         xiex_min = miex2_min & xex_max
*/
  __pyx_v_yex_max = (__pyx_v_self->directional_max2[1]);

  /* "yt/geometry/particle_oct_container.pyx":897
 *         xex_max = self.directional_max2[0]
 *         yex_max = self.directional_max2[1]
 *         zex_max = self.directional_max2[2]             # <<<<<<<<<<<<<<
 *         xiex_min = miex2_min & xex_max
 *         yiex_min = miex2_min & yex_max
*/
  __pyx_v_zex_max = (__pyx_v_self->directional_max2[2]);

  /* "yt/geometry/particle_oct_container.pyx":898
 *         yex_max = self.directional_max2[1]
 *         zex_max = self.directional_max2[2]
 *         xiex_min = miex2_min & xex_max             # <<<<<<<<<<<<<<
 *         yiex_min = miex2_min & yex_max
 *         ziex_min = miex2_min & zex_max
*/
  __pyx_v_xiex_min = (__pyx_v_miex2_min & __pyx_v_xex_max);

  /* "yt/geometry/particle_oct_container.pyx":899
 *         zex_max = self.directional_max2[2]
 *         xiex_min = miex2_min & xex_max
 *         yiex_min = miex2_min & yex_max             # <<<<<<<<<<<<<<
 *         ziex_min = miex2_min & zex_max
 *         xiex_max = miex2_max & xex_max
*/
  __pyx_v_yiex_min = (__pyx_v_miex2_min & __pyx_v_yex_max);

  /* "yt/geometry/particle_oct_container.pyx":900
 *         xiex_min = miex2_min & xex_max
 *         yiex_min = miex2_min & yex_max
 *         ziex_min = miex2_min & zex_max             # <<<<<<<<<<<<<<
 *         xiex_max = miex2_max & xex_max
 *         yiex_max = miex2_max & yex_max
*/
  __pyx_v_ziex_min = (__pyx_v_miex2_min & __pyx_v_zex_max);

  /* "yt/geometry/particle_oct_container.pyx":901
 *         yiex_min = miex2_min & yex_max
 *         ziex_min = miex2_min & zex_max
 *         xiex_max = miex2_max & xex_max             # <<<<<<<<<<<<<<
 *         yiex_max = miex2_max & yex_max
 *         ziex_max = miex2_max & zex_max
*/
  __pyx_v_xiex_max = (__pyx_v_miex2_max & __pyx_v_xex_max);

  /* "yt/geometry/particle_oct_container.pyx":902
 *         ziex_min = miex2_min & zex_max
 *         xiex_max = miex2_max & xex_max
 *         yiex_max = miex2_max & yex_max             # <<<<<<<<<<<<<<
 *         ziex_max = miex2_max & zex_max
 *         # This could *probably* be sped up by iterating over words.
*/
  __pyx_v_yiex_max = (__pyx_v_miex2_max & __pyx_v_yex_max);

  /* "yt/geometry/particle_oct_container.pyx":903
 *         xiex_max = miex2_max & xex_max
 *         yiex_max = miex2_max & yex_max
 *         ziex_max = miex2_max & zex_max             # <<<<<<<<<<<<<<
 *         # This could *probably* be sped up by iterating over words.
 *         for miex2 in range(miex2_min, miex2_max + 1):
*/
  __pyx_v_ziex_max = (__pyx_v_miex2_max & __pyx_v_zex_max);

  /* "yt/geometry/particle_oct_container.pyx":905
 *         ziex_max = miex2_max & zex_max
 *         # This could *probably* be sped up by iterating over words.
 *         for miex2 in range(miex2_min, miex2_max + 1):             # <<<<<<<<<<<<<<
 *             #miex2 = encode_morton_64bit(xex2, yex2, zex2)
 *             #decode_morton_64bit(miex2, ex2)
*/
  __pyx_t_4 = (__pyx_v_miex2_max + 1);
  __pyx_t_5 = __pyx_t_4;
  for (__pyx_t_6 = __pyx_v_miex2_min; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_miex2 = __pyx_t_6;

    /* "yt/geometry/particle_oct_container.pyx":909
 *             #decode_morton_64bit(miex2, ex2)
 *             # Let's check all our cases here
 *             if (miex2 & xex_max) < (xiex_min): continue             # <<<<<<<<<<<<<<
 *             if (miex2 & xex_max) > (xiex_max): continue
 *             if (miex2 & yex_max) < (yiex_min): continue
*/
    __pyx_t_2 = ((__pyx_v_miex2 & __pyx_v_xex_max) < __pyx_v_xiex_min);
    if (__pyx_t_2) {
      goto __pyx_L8_continue;
    }

    /* "yt/geometry/particle_oct_container.pyx":910
 *             # Let's check all our cases here
 *             if (miex2 & xex_max) < (xiex_min): continue
 *             if (miex2 & xex_max) > (xiex_max): continue             # <<<<<<<<<<<<<<
 *             if (miex2 & yex_max) < (yiex_min): continue
 *             if (miex2 & yex_max) > (yiex_max): continue
*/
    __pyx_t_2 = ((__pyx_v_miex2 & __pyx_v_xex_max) > __pyx_v_xiex_max);
    if (__pyx_t_2) {
      goto __pyx_L8_continue;
    }

    /* "yt/geometry/particle_oct_container.pyx":911
 *             if (miex2 & xex_max) < (xiex_min): continue
 *             if (miex2 & xex_max) > (xiex_max): continue
 *             if (miex2 & yex_max) < (yiex_min): continue             # <<<<<<<<<<<<<<
 *             if (miex2 & yex_max) > (yiex_max): continue
 *             if (miex2 & zex_max) < (ziex_min): continue
*/
    __pyx_t_2 = ((__pyx_v_miex2 & __pyx_v_yex_max) < __pyx_v_yiex_min);
    if (__pyx_t_2) {
      goto __pyx_L8_continue;
    }

    /* "yt/geometry/particle_oct_container.pyx":912
 *             if (miex2 & xex_max) > (xiex_max): continue
 *             if (miex2 & yex_max) < (yiex_min): continue
 *             if (miex2 & yex_max) > (yiex_max): continue             # <<<<<<<<<<<<<<
 *             if (miex2 & zex_max) < (ziex_min): continue
 *             if (miex2 & zex_max) > (ziex_max): continue
*/
    __pyx_t_2 = ((__pyx_v_miex2 & __pyx_v_yex_max) > __pyx_v_yiex_max);
    if (__pyx_t_2) {
      goto __pyx_L8_continue;
    }

    /* "yt/geometry/particle_oct_container.pyx":913
 *             if (miex2 & yex_max) < (yiex_min): continue
 *             if (miex2 & yex_max) > (yiex_max): continue
 *             if (miex2 & zex_max) < (ziex_min): continue             # <<<<<<<<<<<<<<
 *             if (miex2 & zex_max) > (ziex_max): continue
 *             refined_set.set(miex2)
*/
    __pyx_t_2 = ((__pyx_v_miex2 & __pyx_v_zex_max) < __pyx_v_ziex_min);
    if (__pyx_t_2) {
      goto __pyx_L8_continue;
    }

    /* "yt/geometry/particle_oct_container.pyx":914
 *             if (miex2 & yex_max) > (yiex_max): continue
 *             if (miex2 & zex_max) < (ziex_min): continue
 *             if (miex2 & zex_max) > (ziex_max): continue             # <<<<<<<<<<<<<<
 *             refined_set.set(miex2)
 *         return refined_set.numberOfOnes() - old_nsub
*/
    __pyx_t_2 = ((__pyx_v_miex2 & __pyx_v_zex_max) > __pyx_v_ziex_max);
    if (__pyx_t_2) {
      goto __pyx_L8_continue;
    }

    /* "yt/geometry/particle_oct_container.pyx":915
 *             if (miex2 & zex_max) < (ziex_min): continue
 *             if (miex2 & zex_max) > (ziex_max): continue
 *             refined_set.set(miex2)             # <<<<<<<<<<<<<<
 *         return refined_set.numberOfOnes() - old_nsub
 * 
*/
    __pyx_v_refined_set.set(__pyx_v_miex2);
    __pyx_L8_continue:;
  }

  /* "yt/geometry/particle_oct_container.pyx":916
 *             if (miex2 & zex_max) > (ziex_max): continue
 *             refined_set.set(miex2)
 *         return refined_set.numberOfOnes() - old_nsub             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __pyx_r = (__pyx_v_refined_set.numberOfOnes() - __pyx_v_old_nsub);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":859
 *         return out_collection
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._ParticleBitmap__fill_refined_ranges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":918
 *         return refined_set.numberOfOnes() - old_nsub
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_set_refined_index_data_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_set_refined_index_data_file = {"_set_refined_index_data_file", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_set_refined_index_data_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_set_refined_index_data_file(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_sub_mi1 = 0;
  PyArrayObject *__pyx_v_sub_mi2 = 0;
  __pyx_t_5numpy_uint64_t __pyx_v_file_id;
  __pyx_t_5numpy_int64_t __pyx_v_nsub_mi;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_set_refined_index_data_file (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_sub_mi1,&__pyx_mstate_global->__pyx_n_u_sub_mi2,&__pyx_mstate_global->__pyx_n_u_file_id,&__pyx_mstate_global->__pyx_n_u_nsub_mi,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 918, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 918, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 918, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 918, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 918, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_set_refined_index_data_file", 0) < 0) __PYX_ERR(0, 918, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 4; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_set_refined_index_data_file", 1, 4, 4, i); __PYX_ERR(0, 918, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 918, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 918, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 918, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 918, __pyx_L3_error)
    }
    __pyx_v_sub_mi1 = ((PyArrayObject *)values[0]);
    __pyx_v_sub_mi2 = ((PyArrayObject *)values[1]);
    __pyx_v_file_id = __Pyx_PyLong_As_npy_uint64(values[2]); if (unlikely((__pyx_v_file_id == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 925, __pyx_L3_error)
    __pyx_v_nsub_mi = __Pyx_PyLong_As_npy_int64(values[3]); if (unlikely((__pyx_v_nsub_mi == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 925, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_set_refined_index_data_file", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 918, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._set_refined_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sub_mi1), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "sub_mi1", 0))) __PYX_ERR(0, 923, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_sub_mi2), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "sub_mi2", 0))) __PYX_ERR(0, 924, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_set_refined_index_data_file(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_sub_mi1, __pyx_v_sub_mi2, __pyx_v_file_id, __pyx_v_nsub_mi);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_set_refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_sub_mi1, PyArrayObject *__pyx_v_sub_mi2, __pyx_t_5numpy_uint64_t __pyx_v_file_id, __pyx_t_5numpy_int64_t __pyx_v_nsub_mi) {
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sub_mi1;
  __Pyx_Buffer __pyx_pybuffer_sub_mi1;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sub_mi2;
  __Pyx_Buffer __pyx_pybuffer_sub_mi2;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_refined_index_data_file", 0);
  __pyx_pybuffer_sub_mi1.pybuffer.buf = NULL;
  __pyx_pybuffer_sub_mi1.refcount = 0;
  __pyx_pybuffernd_sub_mi1.data = NULL;
  __pyx_pybuffernd_sub_mi1.rcbuffer = &__pyx_pybuffer_sub_mi1;
  __pyx_pybuffer_sub_mi2.pybuffer.buf = NULL;
  __pyx_pybuffer_sub_mi2.refcount = 0;
  __pyx_pybuffernd_sub_mi2.data = NULL;
  __pyx_pybuffernd_sub_mi2.rcbuffer = &__pyx_pybuffer_sub_mi2;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer, (PyObject*)__pyx_v_sub_mi1, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 918, __pyx_L1_error)
  }
  __pyx_pybuffernd_sub_mi1.diminfo[0].strides = __pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sub_mi1.diminfo[0].shape = __pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer, (PyObject*)__pyx_v_sub_mi2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 918, __pyx_L1_error)
  }
  __pyx_pybuffernd_sub_mi2.diminfo[0].strides = __pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sub_mi2.diminfo[0].shape = __pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":926
 *                                      np.ndarray[np.uint64_t, ndim=1] sub_mi2,
 *                                      np.uint64_t file_id, np.int64_t nsub_mi):
 *         return self.__set_refined_index_data_file(sub_mi1, sub_mi2,             # <<<<<<<<<<<<<<
 *                                                   file_id, nsub_mi)
 * 
*/
  __Pyx_XDECREF(__pyx_r);

  /* "yt/geometry/particle_oct_container.pyx":927
 *                                      np.uint64_t file_id, np.int64_t nsub_mi):
 *         return self.__set_refined_index_data_file(sub_mi1, sub_mi2,
 *                                                   file_id, nsub_mi)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self->__pyx_vtab)->_ParticleBitmap__set_refined_index_data_file(__pyx_v_self, ((PyArrayObject *)__pyx_v_sub_mi1), ((PyArrayObject *)__pyx_v_sub_mi2), __pyx_v_file_id, __pyx_v_nsub_mi); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 926, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":926
 *                                      np.ndarray[np.uint64_t, ndim=1] sub_mi2,
 *                                      np.uint64_t file_id, np.int64_t nsub_mi):
 *         return self.__set_refined_index_data_file(sub_mi1, sub_mi2,             # <<<<<<<<<<<<<<
 *                                                   file_id, nsub_mi)
 * 
*/
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":918
 *         return refined_set.numberOfOnes() - old_nsub
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._set_refined_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":929
 *                                                   file_id, nsub_mi)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__set_refined_index_data_file(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_sub_mi1, PyArrayObject *__pyx_v_sub_mi2, __pyx_t_5numpy_uint64_t __pyx_v_file_id, __pyx_t_5numpy_int64_t __pyx_v_nsub_mi) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *__pyx_v_bitmasks = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sub_mi1;
  __Pyx_Buffer __pyx_pybuffer_sub_mi1;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sub_mi2;
  __Pyx_Buffer __pyx_pybuffer_sub_mi2;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_ParticleBitmap__set_refined_index_data_file", 0);
  __pyx_pybuffer_sub_mi1.pybuffer.buf = NULL;
  __pyx_pybuffer_sub_mi1.refcount = 0;
  __pyx_pybuffernd_sub_mi1.data = NULL;
  __pyx_pybuffernd_sub_mi1.rcbuffer = &__pyx_pybuffer_sub_mi1;
  __pyx_pybuffer_sub_mi2.pybuffer.buf = NULL;
  __pyx_pybuffer_sub_mi2.refcount = 0;
  __pyx_pybuffernd_sub_mi2.data = NULL;
  __pyx_pybuffernd_sub_mi2.rcbuffer = &__pyx_pybuffer_sub_mi2;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer, (PyObject*)__pyx_v_sub_mi1, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 929, __pyx_L1_error)
  }
  __pyx_pybuffernd_sub_mi1.diminfo[0].strides = __pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sub_mi1.diminfo[0].shape = __pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer, (PyObject*)__pyx_v_sub_mi2, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 929, __pyx_L1_error)
  }
  __pyx_pybuffernd_sub_mi2.diminfo[0].strides = __pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sub_mi2.diminfo[0].shape = __pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":937
 *                                             np.ndarray[np.uint64_t, ndim=1] sub_mi2,
 *                                             np.uint64_t file_id, np.int64_t nsub_mi):
 *         cdef FileBitmasks bitmasks = self.bitmasks             # <<<<<<<<<<<<<<
 *         bitmasks._set_refined_index_array(file_id, nsub_mi, sub_mi1, sub_mi2)
 * 
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->bitmasks);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_bitmasks = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":938
 *                                             np.uint64_t file_id, np.int64_t nsub_mi):
 *         cdef FileBitmasks bitmasks = self.bitmasks
 *         bitmasks._set_refined_index_array(file_id, nsub_mi, sub_mi1, sub_mi2)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_bitmasks->__pyx_vtab)->_set_refined_index_array(__pyx_v_bitmasks, __pyx_v_file_id, __pyx_v_nsub_mi, ((PyArrayObject *)__pyx_v_sub_mi1), ((PyArrayObject *)__pyx_v_sub_mi2)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 938, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":929
 *                                                   file_id, nsub_mi)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._ParticleBitmap__set_refined_index_data_file", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi1.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sub_mi2.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_bitmasks);
  __Pyx_RefNannyFinishContext();
}

/* "yt/geometry/particle_oct_container.pyx":940
 *         bitmasks._set_refined_index_array(file_id, nsub_mi, sub_mi1, sub_mi2)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17find_collisions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17find_collisions = {"find_collisions", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17find_collisions, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17find_collisions(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_verbose = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_collisions (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_verbose,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 940, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 940, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "find_collisions", 0) < 0) __PYX_ERR(0, 940, __pyx_L3_error)

      /* "yt/geometry/particle_oct_container.pyx":944
 *     @cython.cdivision(True)
 *     @cython.initializedcheck(False)
 *     def find_collisions(self, verbose=False):             # <<<<<<<<<<<<<<
 *         cdef tuple cc, rc
 *         cc, rc = self.bitmasks._find_collisions(self.collisions,verbose)
*/
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_False));
    } else {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 940, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_False));
    }
    __pyx_v_verbose = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_collisions", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 940, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.find_collisions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_16find_collisions(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_verbose);

  /* "yt/geometry/particle_oct_container.pyx":940
 *         bitmasks._set_refined_index_array(file_id, nsub_mi, sub_mi1, sub_mi2)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_16find_collisions(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_verbose) {
  PyObject *__pyx_v_cc = 0;
  PyObject *__pyx_v_rc = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__find_collisions __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_collisions", 0);

  /* "yt/geometry/particle_oct_container.pyx":946
 *     def find_collisions(self, verbose=False):
 *         cdef tuple cc, rc
 *         cc, rc = self.bitmasks._find_collisions(self.collisions,verbose)             # <<<<<<<<<<<<<<
 *         return cc, rc
 * 
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->collisions);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 946, __pyx_L1_error)
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.verbose = __pyx_t_2;
  __pyx_t_3 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_find_collisions(__pyx_v_self->bitmasks, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_1), &__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PyTuple_GET_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 946, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_1 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 946, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 946, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 946, __pyx_L1_error)
  }
  if (!(likely(PyTuple_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_1))) __PYX_ERR(0, 946, __pyx_L1_error)
  if (!(likely(PyTuple_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_t_5))) __PYX_ERR(0, 946, __pyx_L1_error)
  __pyx_v_cc = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_rc = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "yt/geometry/particle_oct_container.pyx":947
 *         cdef tuple cc, rc
 *         cc, rc = self.bitmasks._find_collisions(self.collisions,verbose)
 *         return cc, rc             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_cc);
  __Pyx_GIVEREF(__pyx_v_cc);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_cc) != (0)) __PYX_ERR(0, 947, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_rc);
  __Pyx_GIVEREF(__pyx_v_rc);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_rc) != (0)) __PYX_ERR(0, 947, __pyx_L1_error);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":940
 *         bitmasks._set_refined_index_array(file_id, nsub_mi, sub_mi1, sub_mi2)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.find_collisions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cc);
  __Pyx_XDECREF(__pyx_v_rc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":949
 *         return cc, rc
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19find_collisions_coarse(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19find_collisions_coarse = {"find_collisions_coarse", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19find_collisions_coarse, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19find_collisions_coarse(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_verbose = 0;
  PyObject *__pyx_v_file_list = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_collisions_coarse (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_verbose,&__pyx_mstate_global->__pyx_n_u_file_list,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 949, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 949, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 949, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "find_collisions_coarse", 0) < 0) __PYX_ERR(0, 949, __pyx_L3_error)

      /* "yt/geometry/particle_oct_container.pyx":953
 *     @cython.cdivision(True)
 *     @cython.initializedcheck(False)
 *     def find_collisions_coarse(self, verbose=False, file_list = None):             # <<<<<<<<<<<<<<
 *         cdef int nc, nm
 *         nc, nm = self.bitmasks._find_collisions_coarse(self.collisions, verbose, file_list)
*/
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_False));
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_None));
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 949, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 949, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_False));
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject *)Py_None));
    }
    __pyx_v_verbose = values[0];
    __pyx_v_file_list = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_collisions_coarse", 0, 0, 2, __pyx_nargs); __PYX_ERR(0, 949, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.find_collisions_coarse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_18find_collisions_coarse(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_verbose, __pyx_v_file_list);

  /* "yt/geometry/particle_oct_container.pyx":949
 *         return cc, rc
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_18find_collisions_coarse(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_verbose, PyObject *__pyx_v_file_list) {
  int __pyx_v_nc;
  int __pyx_v_nm;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__find_collisions_coarse __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_collisions_coarse", 0);

  /* "yt/geometry/particle_oct_container.pyx":955
 *     def find_collisions_coarse(self, verbose=False, file_list = None):
 *         cdef int nc, nm
 *         nc, nm = self.bitmasks._find_collisions_coarse(self.collisions, verbose, file_list)             # <<<<<<<<<<<<<<
 *         return nc, nm
 * 
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->collisions);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 955, __pyx_L1_error)
  __pyx_t_4.__pyx_n = 2;
  __pyx_t_4.verbose = __pyx_t_2;
  __pyx_t_4.file_list = __pyx_v_file_list;
  __pyx_t_3 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_find_collisions_coarse(__pyx_v_self->bitmasks, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_1), &__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PyTuple_GET_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 955, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_1 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 955, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 955, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 955, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyLong_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyLong_As_int(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_nc = __pyx_t_6;
  __pyx_v_nm = __pyx_t_7;

  /* "yt/geometry/particle_oct_container.pyx":956
 *         cdef int nc, nm
 *         nc, nm = self.bitmasks._find_collisions_coarse(self.collisions, verbose, file_list)
 *         return nc, nm             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyLong_From_int(__pyx_v_nc); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_nm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3) != (0)) __PYX_ERR(0, 956, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5) != (0)) __PYX_ERR(0, 956, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":949
 *         return cc, rc
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.find_collisions_coarse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":958
 *         return nc, nm
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_21find_uncontaminated(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_21find_uncontaminated = {"find_uncontaminated", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_21find_uncontaminated, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_21find_uncontaminated(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_5numpy_uint32_t __pyx_v_ifile;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask2 = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_uncontaminated (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_ifile,&__pyx_mstate_global->__pyx_n_u_mask,&__pyx_mstate_global->__pyx_n_u_mask2,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 958, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 958, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 958, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 958, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "find_uncontaminated", 0) < 0) __PYX_ERR(0, 958, __pyx_L3_error)

      /* "yt/geometry/particle_oct_container.pyx":963
 *     @cython.initializedcheck(False)
 *     def find_uncontaminated(self, np.uint32_t ifile, BoolArrayCollection mask,
 *                             BoolArrayCollection mask2 = None):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint8_t, ndim=1] arr = np.zeros((1 << (self.index_order1 * 3)),'uint8')
 *         cdef np.uint8_t[:] arr_view = arr
*/
      if (!values[2]) values[2] = __Pyx_NewRef((PyObject *)((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None));
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("find_uncontaminated", 0, 2, 3, i); __PYX_ERR(0, 958, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 958, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 958, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 958, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef((PyObject *)((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None));
    }
    __pyx_v_ifile = __Pyx_PyLong_As_npy_uint32(values[0]); if (unlikely((__pyx_v_ifile == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 962, __pyx_L3_error)
    __pyx_v_mask = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[1]);
    __pyx_v_mask2 = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_uncontaminated", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 958, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.find_uncontaminated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mask), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "mask", 0))) __PYX_ERR(0, 962, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mask2), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "mask2", 0))) __PYX_ERR(0, 963, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_20find_uncontaminated(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_ifile, __pyx_v_mask, __pyx_v_mask2);

  /* "yt/geometry/particle_oct_container.pyx":958
 *         return nc, nm
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_20find_uncontaminated(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_uint32_t __pyx_v_ifile, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask2) {
  PyArrayObject *__pyx_v_arr = 0;
  __Pyx_memviewslice __pyx_v_arr_view = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr;
  __Pyx_Buffer __pyx_pybuffer_arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__select_uncontaminated __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_uncontaminated", 0);
  __pyx_pybuffer_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_arr.refcount = 0;
  __pyx_pybuffernd_arr.data = NULL;
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "yt/geometry/particle_oct_container.pyx":964
 *     def find_uncontaminated(self, np.uint32_t ifile, BoolArrayCollection mask,
 *                             BoolArrayCollection mask2 = None):
 *         cdef np.ndarray[np.uint8_t, ndim=1] arr = np.zeros((1 << (self.index_order1 * 3)),'uint8')             # <<<<<<<<<<<<<<
 *         cdef np.uint8_t[:] arr_view = arr
 *         self.bitmasks._select_uncontaminated(ifile, mask, arr_view, mask2)
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_long((1 << (__pyx_v_self->index_order1 * 3))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_mstate_global->__pyx_n_u_uint8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 964, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 964, __pyx_L1_error)
    } else {__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":965
 *                             BoolArrayCollection mask2 = None):
 *         cdef np.ndarray[np.uint8_t, ndim=1] arr = np.zeros((1 << (self.index_order1 * 3)),'uint8')
 *         cdef np.uint8_t[:] arr_view = arr             # <<<<<<<<<<<<<<
 *         self.bitmasks._select_uncontaminated(ifile, mask, arr_view, mask2)
 *         return arr
*/
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(((PyObject *)__pyx_v_arr), PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 965, __pyx_L1_error)
  __pyx_v_arr_view = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":966
 *         cdef np.ndarray[np.uint8_t, ndim=1] arr = np.zeros((1 << (self.index_order1 * 3)),'uint8')
 *         cdef np.uint8_t[:] arr_view = arr
 *         self.bitmasks._select_uncontaminated(ifile, mask, arr_view, mask2)             # <<<<<<<<<<<<<<
 *         return arr
 * 
*/
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.mask2 = __pyx_v_mask2;
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_select_uncontaminated(__pyx_v_self->bitmasks, __pyx_v_ifile, __pyx_v_mask, __pyx_v_arr_view, &__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 966, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":967
 *         cdef np.uint8_t[:] arr_view = arr
 *         self.bitmasks._select_uncontaminated(ifile, mask, arr_view, mask2)
 *         return arr             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_arr);
  __pyx_r = ((PyObject *)__pyx_v_arr);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":958
 *         return nc, nm
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_6, 1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.find_uncontaminated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_arr_view, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":969
 *         return arr
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_23find_contaminated(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_23find_contaminated = {"find_contaminated", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_23find_contaminated, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_23find_contaminated(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __pyx_t_5numpy_uint32_t __pyx_v_ifile;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask2 = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_contaminated (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_ifile,&__pyx_mstate_global->__pyx_n_u_mask,&__pyx_mstate_global->__pyx_n_u_mask2,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 969, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 969, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 969, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 969, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "find_contaminated", 0) < 0) __PYX_ERR(0, 969, __pyx_L3_error)

      /* "yt/geometry/particle_oct_container.pyx":974
 *     @cython.initializedcheck(False)
 *     def find_contaminated(self, np.uint32_t ifile, BoolArrayCollection mask,
 *                           BoolArrayCollection mask2 = None):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint8_t, ndim=1] arr = np.zeros((1 << (self.index_order1 * 3)),'uint8')
 *         cdef np.uint8_t[:] arr_view = arr
*/
      if (!values[2]) values[2] = __Pyx_NewRef((PyObject *)((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None));
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("find_contaminated", 0, 2, 3, i); __PYX_ERR(0, 969, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 969, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 969, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 969, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef((PyObject *)((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None));
    }
    __pyx_v_ifile = __Pyx_PyLong_As_npy_uint32(values[0]); if (unlikely((__pyx_v_ifile == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 973, __pyx_L3_error)
    __pyx_v_mask = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[1]);
    __pyx_v_mask2 = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_contaminated", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 969, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.find_contaminated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mask), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "mask", 0))) __PYX_ERR(0, 973, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mask2), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "mask2", 0))) __PYX_ERR(0, 974, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_22find_contaminated(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_ifile, __pyx_v_mask, __pyx_v_mask2);

  /* "yt/geometry/particle_oct_container.pyx":969
 *         return arr
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_22find_contaminated(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, __pyx_t_5numpy_uint32_t __pyx_v_ifile, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mask2) {
  PyArrayObject *__pyx_v_arr = 0;
  __Pyx_memviewslice __pyx_v_arr_view = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyArrayObject *__pyx_v_sfiles = 0;
  __Pyx_memviewslice __pyx_v_sfiles_view = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr;
  __Pyx_Buffer __pyx_pybuffer_arr;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_sfiles;
  __Pyx_Buffer __pyx_pybuffer_sfiles;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__select_contaminated __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_contaminated", 0);
  __pyx_pybuffer_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_arr.refcount = 0;
  __pyx_pybuffernd_arr.data = NULL;
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;
  __pyx_pybuffer_sfiles.pybuffer.buf = NULL;
  __pyx_pybuffer_sfiles.refcount = 0;
  __pyx_pybuffernd_sfiles.data = NULL;
  __pyx_pybuffernd_sfiles.rcbuffer = &__pyx_pybuffer_sfiles;

  /* "yt/geometry/particle_oct_container.pyx":975
 *     def find_contaminated(self, np.uint32_t ifile, BoolArrayCollection mask,
 *                           BoolArrayCollection mask2 = None):
 *         cdef np.ndarray[np.uint8_t, ndim=1] arr = np.zeros((1 << (self.index_order1 * 3)),'uint8')             # <<<<<<<<<<<<<<
 *         cdef np.uint8_t[:] arr_view = arr
 *         cdef np.ndarray[np.uint8_t, ndim=1] sfiles = np.zeros(self.nfiles,'uint8')
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_long((1 << (__pyx_v_self->index_order1 * 3))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_mstate_global->__pyx_n_u_uint8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 975, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 975, __pyx_L1_error)
    } else {__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":976
 *                           BoolArrayCollection mask2 = None):
 *         cdef np.ndarray[np.uint8_t, ndim=1] arr = np.zeros((1 << (self.index_order1 * 3)),'uint8')
 *         cdef np.uint8_t[:] arr_view = arr             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint8_t, ndim=1] sfiles = np.zeros(self.nfiles,'uint8')
 *         cdef np.uint8_t[:] sfiles_view = sfiles
*/
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(((PyObject *)__pyx_v_arr), PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 976, __pyx_L1_error)
  __pyx_v_arr_view = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":977
 *         cdef np.ndarray[np.uint8_t, ndim=1] arr = np.zeros((1 << (self.index_order1 * 3)),'uint8')
 *         cdef np.uint8_t[:] arr_view = arr
 *         cdef np.ndarray[np.uint8_t, ndim=1] sfiles = np.zeros(self.nfiles,'uint8')             # <<<<<<<<<<<<<<
 *         cdef np.uint8_t[:] sfiles_view = sfiles
 *         self.bitmasks._select_contaminated(ifile, mask, arr_view, sfiles_view, mask2)
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->nfiles); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    assert(__pyx_t_4);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_2, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_3, __pyx_mstate_global->__pyx_n_u_uint8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 977, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_sfiles.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_sfiles = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_sfiles.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 977, __pyx_L1_error)
    } else {__pyx_pybuffernd_sfiles.diminfo[0].strides = __pyx_pybuffernd_sfiles.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_sfiles.diminfo[0].shape = __pyx_pybuffernd_sfiles.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_v_sfiles = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":978
 *         cdef np.uint8_t[:] arr_view = arr
 *         cdef np.ndarray[np.uint8_t, ndim=1] sfiles = np.zeros(self.nfiles,'uint8')
 *         cdef np.uint8_t[:] sfiles_view = sfiles             # <<<<<<<<<<<<<<
 *         self.bitmasks._select_contaminated(ifile, mask, arr_view, sfiles_view, mask2)
 *         return arr, np.where(sfiles)[0].astype('uint32')
*/
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(((PyObject *)__pyx_v_sfiles), PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 978, __pyx_L1_error)
  __pyx_v_sfiles_view = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":979
 *         cdef np.ndarray[np.uint8_t, ndim=1] sfiles = np.zeros(self.nfiles,'uint8')
 *         cdef np.uint8_t[:] sfiles_view = sfiles
 *         self.bitmasks._select_contaminated(ifile, mask, arr_view, sfiles_view, mask2)             # <<<<<<<<<<<<<<
 *         return arr, np.where(sfiles)[0].astype('uint32')
 * 
*/
  __pyx_t_7.__pyx_n = 1;
  __pyx_t_7.mask2 = __pyx_v_mask2;
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_select_contaminated(__pyx_v_self->bitmasks, __pyx_v_ifile, __pyx_v_mask, __pyx_v_arr_view, __pyx_v_sfiles_view, &__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 979, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":980
 *         cdef np.uint8_t[:] sfiles_view = sfiles
 *         self.bitmasks._select_contaminated(ifile, mask, arr_view, sfiles_view, mask2)
 *         return arr, np.where(sfiles)[0].astype('uint32')             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_where); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_9);
    assert(__pyx_t_4);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_9);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_9, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, ((PyObject *)__pyx_v_sfiles)};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_9;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_n_u_uint32};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 980, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_INCREF((PyObject *)__pyx_v_arr);
  __Pyx_GIVEREF((PyObject *)__pyx_v_arr);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, ((PyObject *)__pyx_v_arr)) != (0)) __PYX_ERR(0, 980, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_1) != (0)) __PYX_ERR(0, 980, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":969
 *         return arr
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sfiles.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.find_contaminated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_sfiles.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_arr_view, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_sfiles);
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_sfiles_view, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":982
 *         return arr, np.where(sfiles)[0].astype('uint32')
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_25find_collisions_refined(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_25find_collisions_refined = {"find_collisions_refined", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_25find_collisions_refined, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_25find_collisions_refined(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_verbose = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_collisions_refined (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_verbose,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 982, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 982, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "find_collisions_refined", 0) < 0) __PYX_ERR(0, 982, __pyx_L3_error)

      /* "yt/geometry/particle_oct_container.pyx":986
 *     @cython.cdivision(True)
 *     @cython.initializedcheck(False)
 *     def find_collisions_refined(self, verbose=False):             # <<<<<<<<<<<<<<
 *         cdef np.int32_t nc, nm
 *         nc, nm = self.bitmasks._find_collisions_refined(self.collisions,verbose)
*/
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_False));
    } else {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 982, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_False));
    }
    __pyx_v_verbose = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_collisions_refined", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 982, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.find_collisions_refined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_24find_collisions_refined(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_verbose);

  /* "yt/geometry/particle_oct_container.pyx":982
 *         return arr, np.where(sfiles)[0].astype('uint32')
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_24find_collisions_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_verbose) {
  __pyx_t_5numpy_int32_t __pyx_v_nc;
  __pyx_t_5numpy_int32_t __pyx_v_nm;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__find_collisions_refined __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __pyx_t_5numpy_int32_t __pyx_t_6;
  __pyx_t_5numpy_int32_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_collisions_refined", 0);

  /* "yt/geometry/particle_oct_container.pyx":988
 *     def find_collisions_refined(self, verbose=False):
 *         cdef np.int32_t nc, nm
 *         nc, nm = self.bitmasks._find_collisions_refined(self.collisions,verbose)             # <<<<<<<<<<<<<<
 *         return nc, nm
 * 
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->collisions);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 988, __pyx_L1_error)
  __pyx_t_4.__pyx_n = 1;
  __pyx_t_4.verbose = __pyx_t_2;
  __pyx_t_3 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_find_collisions_refined(__pyx_v_self->bitmasks, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_1), &__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PyTuple_GET_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 988, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_1 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 988, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyLong_As_npy_int32(__pyx_t_1); if (unlikely((__pyx_t_6 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyLong_As_npy_int32(__pyx_t_5); if (unlikely((__pyx_t_7 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_nc = __pyx_t_6;
  __pyx_v_nm = __pyx_t_7;

  /* "yt/geometry/particle_oct_container.pyx":989
 *         cdef np.int32_t nc, nm
 *         nc, nm = self.bitmasks._find_collisions_refined(self.collisions,verbose)
 *         return nc, nm             # <<<<<<<<<<<<<<
 * 
 *     def get_bitmasks(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyLong_From_npy_int32(__pyx_v_nc); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyLong_From_npy_int32(__pyx_v_nm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3) != (0)) __PYX_ERR(0, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5) != (0)) __PYX_ERR(0, 989, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":982
 *         return arr, np.where(sfiles)[0].astype('uint32')
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.find_collisions_refined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":991
 *         return nc, nm
 * 
 *     def get_bitmasks(self):             # <<<<<<<<<<<<<<
 *         return self.bitmasks
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_27get_bitmasks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_27get_bitmasks = {"get_bitmasks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_27get_bitmasks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_27get_bitmasks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_bitmasks (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_bitmasks", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_bitmasks", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_26get_bitmasks(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_26get_bitmasks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_bitmasks", 0);

  /* "yt/geometry/particle_oct_container.pyx":992
 * 
 *     def get_bitmasks(self):
 *         return self.bitmasks             # <<<<<<<<<<<<<<
 * 
 *     def iseq_bitmask(self, solf):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->bitmasks);
  __pyx_r = ((PyObject *)__pyx_v_self->bitmasks);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":991
 *         return nc, nm
 * 
 *     def get_bitmasks(self):             # <<<<<<<<<<<<<<
 *         return self.bitmasks
 * 
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":994
 *         return self.bitmasks
 * 
 *     def iseq_bitmask(self, solf):             # <<<<<<<<<<<<<<
 *         return self.bitmasks._iseq(solf.get_bitmasks())
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_29iseq_bitmask(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_29iseq_bitmask = {"iseq_bitmask", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_29iseq_bitmask, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_29iseq_bitmask(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_solf = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("iseq_bitmask (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_solf,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 994, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 994, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "iseq_bitmask", 0) < 0) __PYX_ERR(0, 994, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("iseq_bitmask", 1, 1, 1, i); __PYX_ERR(0, 994, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 994, __pyx_L3_error)
    }
    __pyx_v_solf = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("iseq_bitmask", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 994, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.iseq_bitmask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_28iseq_bitmask(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_solf);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_28iseq_bitmask(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_solf) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("iseq_bitmask", 0);

  /* "yt/geometry/particle_oct_container.pyx":995
 * 
 *     def iseq_bitmask(self, solf):
 *         return self.bitmasks._iseq(solf.get_bitmasks())             # <<<<<<<<<<<<<<
 * 
 *     def save_bitmasks(self, fname, max_hsml):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_v_solf;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_bitmasks, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks))))) __PYX_ERR(0, 995, __pyx_L1_error)
  __pyx_t_4 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_iseq(__pyx_v_self->bitmasks, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":994
 *         return self.bitmasks
 * 
 *     def iseq_bitmask(self, solf):             # <<<<<<<<<<<<<<
 *         return self.bitmasks._iseq(solf.get_bitmasks())
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.iseq_bitmask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":997
 *         return self.bitmasks._iseq(solf.get_bitmasks())
 * 
 *     def save_bitmasks(self, fname, max_hsml):             # <<<<<<<<<<<<<<
 *         import h5py
 *         cdef bytes serial_BAC
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_31save_bitmasks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_31save_bitmasks = {"save_bitmasks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_31save_bitmasks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_31save_bitmasks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_fname = 0;
  PyObject *__pyx_v_max_hsml = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save_bitmasks (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_fname,&__pyx_mstate_global->__pyx_n_u_max_hsml,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 997, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 997, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 997, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "save_bitmasks", 0) < 0) __PYX_ERR(0, 997, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("save_bitmasks", 1, 2, 2, i); __PYX_ERR(0, 997, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 997, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 997, __pyx_L3_error)
    }
    __pyx_v_fname = values[0];
    __pyx_v_max_hsml = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save_bitmasks", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 997, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.save_bitmasks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_30save_bitmasks(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_fname, __pyx_v_max_hsml);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_30save_bitmasks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_max_hsml) {
  PyObject *__pyx_v_h5py = NULL;
  PyObject *__pyx_v_serial_BAC = 0;
  __pyx_t_5numpy_uint64_t __pyx_v_ifile;
  PyObject *__pyx_v_fp = NULL;
  PyObject *__pyx_v_grp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  __pyx_t_5numpy_uint64_t __pyx_t_17;
  __pyx_t_5numpy_uint64_t __pyx_t_18;
  __pyx_t_5numpy_uint64_t __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save_bitmasks", 0);

  /* "yt/geometry/particle_oct_container.pyx":998
 * 
 *     def save_bitmasks(self, fname, max_hsml):
 *         import h5py             # <<<<<<<<<<<<<<
 *         cdef bytes serial_BAC
 *         cdef np.uint64_t ifile
*/
  __pyx_t_1 = __Pyx_ImportDottedModuleRelFirst(__pyx_mstate_global->__pyx_n_u_h5py, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h5py = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1001
 *         cdef bytes serial_BAC
 *         cdef np.uint64_t ifile
 *         with h5py.File(fname, mode="a") as fp:             # <<<<<<<<<<<<<<
 *             try:
 *                 grp = fp[str(self.hash_value)]
*/
  /*with:*/ {
    __pyx_t_2 = __pyx_v_h5py;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_v_fname};
      __pyx_t_4 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_mode, __pyx_mstate_global->__pyx_n_u_a, __pyx_t_4, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1001, __pyx_L1_error)
      __pyx_t_1 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_File, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_t_5 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_exit); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = NULL;
    __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_enter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1001, __pyx_L3_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = 1;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      assert(__pyx_t_2);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_6, __pyx__function);
      __pyx_t_3 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1001, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_6 = __pyx_t_4;
    __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        /*try:*/ {
          __pyx_v_fp = __pyx_t_6;
          __pyx_t_6 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1002
 *         cdef np.uint64_t ifile
 *         with h5py.File(fname, mode="a") as fp:
 *             try:             # <<<<<<<<<<<<<<
 *                 grp = fp[str(self.hash_value)]
 *                 grp.clear()
*/
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
            __Pyx_XGOTREF(__pyx_t_10);
            __Pyx_XGOTREF(__pyx_t_11);
            __Pyx_XGOTREF(__pyx_t_12);
            /*try:*/ {

              /* "yt/geometry/particle_oct_container.pyx":1003
 *         with h5py.File(fname, mode="a") as fp:
 *             try:
 *                 grp = fp[str(self.hash_value)]             # <<<<<<<<<<<<<<
 *                 grp.clear()
 *             except KeyError:
*/
              __pyx_t_6 = __Pyx_PyLong_From_npy_int64(__pyx_v_self->hash_value); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1003, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_6);
              __pyx_t_1 = __Pyx_PyObject_Unicode(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1003, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_v_fp, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1003, __pyx_L13_error)
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_v_grp = __pyx_t_6;
              __pyx_t_6 = 0;

              /* "yt/geometry/particle_oct_container.pyx":1004
 *             try:
 *                 grp = fp[str(self.hash_value)]
 *                 grp.clear()             # <<<<<<<<<<<<<<
 *             except KeyError:
 *                 grp = fp.create_group(str(self.hash_value))
*/
              __pyx_t_1 = __pyx_v_grp;
              __Pyx_INCREF(__pyx_t_1);
              __pyx_t_3 = 0;
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
                __pyx_t_6 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_clear, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
                __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1004, __pyx_L13_error)
                __Pyx_GOTREF(__pyx_t_6);
              }
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

              /* "yt/geometry/particle_oct_container.pyx":1002
 *         cdef np.uint64_t ifile
 *         with h5py.File(fname, mode="a") as fp:
 *             try:             # <<<<<<<<<<<<<<
 *                 grp = fp[str(self.hash_value)]
 *                 grp.clear()
*/
            }
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            goto __pyx_L18_try_end;
            __pyx_L13_error:;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

            /* "yt/geometry/particle_oct_container.pyx":1005
 *                 grp = fp[str(self.hash_value)]
 *                 grp.clear()
 *             except KeyError:             # <<<<<<<<<<<<<<
 *                 grp = fp.create_group(str(self.hash_value))
 * 
*/
            __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
            if (__pyx_t_13) {
              __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.save_bitmasks", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_1, &__pyx_t_4) < 0) __PYX_ERR(0, 1005, __pyx_L15_except_error)
              __Pyx_XGOTREF(__pyx_t_6);
              __Pyx_XGOTREF(__pyx_t_1);
              __Pyx_XGOTREF(__pyx_t_4);

              /* "yt/geometry/particle_oct_container.pyx":1006
 *                 grp.clear()
 *             except KeyError:
 *                 grp = fp.create_group(str(self.hash_value))             # <<<<<<<<<<<<<<
 * 
 *             grp.attrs["bitmask_version"] = _bitmask_version
*/
              __pyx_t_14 = __pyx_v_fp;
              __Pyx_INCREF(__pyx_t_14);
              __pyx_t_15 = __Pyx_PyLong_From_npy_int64(__pyx_v_self->hash_value); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1006, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_15);
              __pyx_t_16 = __Pyx_PyObject_Unicode(__pyx_t_15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1006, __pyx_L15_except_error)
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __pyx_t_3 = 0;
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_t_16};
                __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_create_group, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
                __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
                __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1006, __pyx_L15_except_error)
                __Pyx_GOTREF(__pyx_t_2);
              }
              __Pyx_XDECREF_SET(__pyx_v_grp, __pyx_t_2);
              __pyx_t_2 = 0;
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
              goto __pyx_L14_exception_handled;
            }
            goto __pyx_L15_except_error;

            /* "yt/geometry/particle_oct_container.pyx":1002
 *         cdef np.uint64_t ifile
 *         with h5py.File(fname, mode="a") as fp:
 *             try:             # <<<<<<<<<<<<<<
 *                 grp = fp[str(self.hash_value)]
 *                 grp.clear()
*/
            __pyx_L15_except_error:;
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_11);
            __Pyx_XGIVEREF(__pyx_t_12);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
            goto __pyx_L7_error;
            __pyx_L14_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_10);
            __Pyx_XGIVEREF(__pyx_t_11);
            __Pyx_XGIVEREF(__pyx_t_12);
            __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
            __pyx_L18_try_end:;
          }

          /* "yt/geometry/particle_oct_container.pyx":1008
 *                 grp = fp.create_group(str(self.hash_value))
 * 
 *             grp.attrs["bitmask_version"] = _bitmask_version             # <<<<<<<<<<<<<<
 *             grp.attrs["nfiles"] = self.nfiles
 *             grp.attrs["max_hsml"] = max_hsml
*/
          __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_bitmask_version); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1008, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_grp, __pyx_mstate_global->__pyx_n_u_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1008, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_bitmask_version_2, __pyx_t_4) < 0))) __PYX_ERR(0, 1008, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1009
 * 
 *             grp.attrs["bitmask_version"] = _bitmask_version
 *             grp.attrs["nfiles"] = self.nfiles             # <<<<<<<<<<<<<<
 *             grp.attrs["max_hsml"] = max_hsml
 *             # Add some attrs for convenience. They're not read back.
*/
          __pyx_t_4 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->nfiles); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1009, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_grp, __pyx_mstate_global->__pyx_n_u_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1009, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_nfiles, __pyx_t_4) < 0))) __PYX_ERR(0, 1009, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1010
 *             grp.attrs["bitmask_version"] = _bitmask_version
 *             grp.attrs["nfiles"] = self.nfiles
 *             grp.attrs["max_hsml"] = max_hsml             # <<<<<<<<<<<<<<
 *             # Add some attrs for convenience. They're not read back.
 *             grp.attrs["file_hash"] = self.file_hash
*/
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_grp, __pyx_mstate_global->__pyx_n_u_attrs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1010, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (unlikely((PyObject_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_max_hsml, __pyx_v_max_hsml) < 0))) __PYX_ERR(0, 1010, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1012
 *             grp.attrs["max_hsml"] = max_hsml
 *             # Add some attrs for convenience. They're not read back.
 *             grp.attrs["file_hash"] = self.file_hash             # <<<<<<<<<<<<<<
 *             grp.attrs["left_edge"] = self.left_edge
 *             grp.attrs["right_edge"] = self.right_edge
*/
          __pyx_t_4 = __Pyx_PyLong_From_npy_int64(__pyx_v_self->file_hash); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1012, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_grp, __pyx_mstate_global->__pyx_n_u_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1012, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_file_hash, __pyx_t_4) < 0))) __PYX_ERR(0, 1012, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1013
 *             # Add some attrs for convenience. They're not read back.
 *             grp.attrs["file_hash"] = self.file_hash
 *             grp.attrs["left_edge"] = self.left_edge             # <<<<<<<<<<<<<<
 *             grp.attrs["right_edge"] = self.right_edge
 *             grp.attrs["periodicity"] = self.periodicity
*/
          __pyx_t_4 = __Pyx_carray_to_py___pyx_t_5numpy_float64_t(__pyx_v_self->left_edge, 3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1013, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_grp, __pyx_mstate_global->__pyx_n_u_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1013, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_left_edge, __pyx_t_4) < 0))) __PYX_ERR(0, 1013, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1014
 *             grp.attrs["file_hash"] = self.file_hash
 *             grp.attrs["left_edge"] = self.left_edge
 *             grp.attrs["right_edge"] = self.right_edge             # <<<<<<<<<<<<<<
 *             grp.attrs["periodicity"] = self.periodicity
 *             grp.attrs["index_order1"] = self.index_order1
*/
          __pyx_t_4 = __Pyx_carray_to_py___pyx_t_5numpy_float64_t(__pyx_v_self->right_edge, 3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1014, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_grp, __pyx_mstate_global->__pyx_n_u_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1014, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_right_edge, __pyx_t_4) < 0))) __PYX_ERR(0, 1014, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1015
 *             grp.attrs["left_edge"] = self.left_edge
 *             grp.attrs["right_edge"] = self.right_edge
 *             grp.attrs["periodicity"] = self.periodicity             # <<<<<<<<<<<<<<
 *             grp.attrs["index_order1"] = self.index_order1
 *             grp.attrs["index_order2"] = self.index_order2
*/
          __pyx_t_4 = __Pyx_PyObject_FromCString(__pyx_v_self->periodicity); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1015, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_grp, __pyx_mstate_global->__pyx_n_u_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1015, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_periodicity, __pyx_t_4) < 0))) __PYX_ERR(0, 1015, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1016
 *             grp.attrs["right_edge"] = self.right_edge
 *             grp.attrs["periodicity"] = self.periodicity
 *             grp.attrs["index_order1"] = self.index_order1             # <<<<<<<<<<<<<<
 *             grp.attrs["index_order2"] = self.index_order2
 * 
*/
          __pyx_t_4 = __Pyx_PyLong_From_npy_int32(__pyx_v_self->index_order1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1016, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_grp, __pyx_mstate_global->__pyx_n_u_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_index_order1, __pyx_t_4) < 0))) __PYX_ERR(0, 1016, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1017
 *             grp.attrs["periodicity"] = self.periodicity
 *             grp.attrs["index_order1"] = self.index_order1
 *             grp.attrs["index_order2"] = self.index_order2             # <<<<<<<<<<<<<<
 * 
 *             for ifile in range(self.nfiles):
*/
          __pyx_t_4 = __Pyx_PyLong_From_npy_int32(__pyx_v_self->index_order2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1017, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_grp, __pyx_mstate_global->__pyx_n_u_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1017, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_index_order2, __pyx_t_4) < 0))) __PYX_ERR(0, 1017, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1019
 *             grp.attrs["index_order2"] = self.index_order2
 * 
 *             for ifile in range(self.nfiles):             # <<<<<<<<<<<<<<
 *                 serial_BAC = self.bitmasks._dumps(ifile)
 *                 grp.create_dataset(f"nfile_{ifile:05}", data=np.void(serial_BAC))
*/
          __pyx_t_17 = __pyx_v_self->nfiles;
          __pyx_t_18 = __pyx_t_17;
          for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
            __pyx_v_ifile = __pyx_t_19;

            /* "yt/geometry/particle_oct_container.pyx":1020
 * 
 *             for ifile in range(self.nfiles):
 *                 serial_BAC = self.bitmasks._dumps(ifile)             # <<<<<<<<<<<<<<
 *                 grp.create_dataset(f"nfile_{ifile:05}", data=np.void(serial_BAC))
 *             serial_BAC = self.collisions._dumps()
*/
            __pyx_t_4 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_dumps(__pyx_v_self->bitmasks, __pyx_v_ifile); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1020, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_XDECREF_SET(__pyx_v_serial_BAC, ((PyObject*)__pyx_t_4));
            __pyx_t_4 = 0;

            /* "yt/geometry/particle_oct_container.pyx":1021
 *             for ifile in range(self.nfiles):
 *                 serial_BAC = self.bitmasks._dumps(ifile)
 *                 grp.create_dataset(f"nfile_{ifile:05}", data=np.void(serial_BAC))             # <<<<<<<<<<<<<<
 *             serial_BAC = self.collisions._dumps()
 *             grp.create_dataset("collisions", data=np.void(serial_BAC))
*/
            __pyx_t_1 = __pyx_v_grp;
            __Pyx_INCREF(__pyx_t_1);
            __pyx_t_6 = __Pyx_PyLong_From_npy_uint64(__pyx_v_ifile); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1021, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_2 = __Pyx_PyObject_Format(__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_05); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1021, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
            __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_n_u_nfile, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1021, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_16 = NULL;
            __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1021, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_14);
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_void); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1021, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
            __pyx_t_3 = 1;
            #if CYTHON_UNPACK_METHODS
            if (unlikely(PyMethod_Check(__pyx_t_15))) {
              __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_15);
              assert(__pyx_t_16);
              PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_16);
              __Pyx_INCREF(__pyx__function);
              __Pyx_DECREF_SET(__pyx_t_15, __pyx__function);
              __pyx_t_3 = 0;
            }
            #endif
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_v_serial_BAC};
              __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
              __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1021, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_2);
            }
            __pyx_t_3 = 0;
            {
              PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_1, __pyx_t_6};
              __pyx_t_15 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1021, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_15);
              if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_data, __pyx_t_2, __pyx_t_15, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1021, __pyx_L7_error)
              __pyx_t_4 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_create_dataset, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_15);
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1021, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_4);
            }
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }

          /* "yt/geometry/particle_oct_container.pyx":1022
 *                 serial_BAC = self.bitmasks._dumps(ifile)
 *                 grp.create_dataset(f"nfile_{ifile:05}", data=np.void(serial_BAC))
 *             serial_BAC = self.collisions._dumps()             # <<<<<<<<<<<<<<
 *             grp.create_dataset("collisions", data=np.void(serial_BAC))
 * 
*/
          __pyx_t_4 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_v_self->collisions->__pyx_vtab)->_dumps(__pyx_v_self->collisions); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1022, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_XDECREF_SET(__pyx_v_serial_BAC, ((PyObject*)__pyx_t_4));
          __pyx_t_4 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1023
 *                 grp.create_dataset(f"nfile_{ifile:05}", data=np.void(serial_BAC))
 *             serial_BAC = self.collisions._dumps()
 *             grp.create_dataset("collisions", data=np.void(serial_BAC))             # <<<<<<<<<<<<<<
 * 
 *     def check_bitmasks(self):
*/
          __pyx_t_15 = __pyx_v_grp;
          __Pyx_INCREF(__pyx_t_15);
          __pyx_t_6 = NULL;
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_void); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1023, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_3 = 1;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_16))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_16);
            assert(__pyx_t_6);
            PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_16);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(__pyx__function);
            __Pyx_DECREF_SET(__pyx_t_16, __pyx__function);
            __pyx_t_3 = 0;
          }
          #endif
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_serial_BAC};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1023, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_2);
          }
          __pyx_t_3 = 0;
          {
            PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_15, __pyx_mstate_global->__pyx_n_u_collisions};
            __pyx_t_16 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1023, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_16);
            if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_data, __pyx_t_2, __pyx_t_16, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1023, __pyx_L7_error)
            __pyx_t_4 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_create_dataset, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_16);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1023, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1001
 *         cdef bytes serial_BAC
 *         cdef np.uint64_t ifile
 *         with h5py.File(fname, mode="a") as fp:             # <<<<<<<<<<<<<<
 *             try:
 *                 grp = fp[str(self.hash_value)]
*/
        }
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L12_try_end;
        __pyx_L7_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.save_bitmasks", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_16, &__pyx_t_2) < 0) __PYX_ERR(0, 1001, __pyx_L9_except_error)
          __Pyx_XGOTREF(__pyx_t_4);
          __Pyx_XGOTREF(__pyx_t_16);
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_15 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_16, __pyx_t_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1001, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_15, NULL);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1001, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_20 = __Pyx_PyObject_IsTrue(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__pyx_t_20 < 0) __PYX_ERR(0, 1001, __pyx_L9_except_error)
          __pyx_t_21 = (!__pyx_t_20);
          if (unlikely(__pyx_t_21)) {
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_16);
            __Pyx_XGIVEREF(__pyx_t_2);
            __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_16, __pyx_t_2);
            __pyx_t_4 = 0;  __pyx_t_16 = 0;  __pyx_t_2 = 0; 
            __PYX_ERR(0, 1001, __pyx_L9_except_error)
          }
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L8_exception_handled;
        }
        __pyx_L9_except_error:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        goto __pyx_L1_error;
        __pyx_L8_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_7);
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
        __pyx_L12_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_5) {
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_mstate_global->__pyx_tuple[4], NULL);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1001, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        goto __pyx_L6;
      }
      __pyx_L6:;
    }
    goto __pyx_L26;
    __pyx_L3_error:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L1_error;
    __pyx_L26:;
  }

  /* "yt/geometry/particle_oct_container.pyx":997
 *         return self.bitmasks._iseq(solf.get_bitmasks())
 * 
 *     def save_bitmasks(self, fname, max_hsml):             # <<<<<<<<<<<<<<
 *         import h5py
 *         cdef bytes serial_BAC
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.save_bitmasks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_h5py);
  __Pyx_XDECREF(__pyx_v_serial_BAC);
  __Pyx_XDECREF(__pyx_v_fp);
  __Pyx_XDECREF(__pyx_v_grp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1025
 *             grp.create_dataset("collisions", data=np.void(serial_BAC))
 * 
 *     def check_bitmasks(self):             # <<<<<<<<<<<<<<
 *         return self.bitmasks._check()
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_33check_bitmasks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_33check_bitmasks = {"check_bitmasks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_33check_bitmasks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_33check_bitmasks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_bitmasks (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("check_bitmasks", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("check_bitmasks", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_32check_bitmasks(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_32check_bitmasks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_bitmasks", 0);

  /* "yt/geometry/particle_oct_container.pyx":1026
 * 
 *     def check_bitmasks(self):
 *         return self.bitmasks._check()             # <<<<<<<<<<<<<<
 * 
 *     def reset_bitmasks(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_check(__pyx_v_self->bitmasks); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1026, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1025
 *             grp.create_dataset("collisions", data=np.void(serial_BAC))
 * 
 *     def check_bitmasks(self):             # <<<<<<<<<<<<<<
 *         return self.bitmasks._check()
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.check_bitmasks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1028
 *         return self.bitmasks._check()
 * 
 *     def reset_bitmasks(self):             # <<<<<<<<<<<<<<
 *         self.bitmasks._reset()
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_35reset_bitmasks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_35reset_bitmasks = {"reset_bitmasks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_35reset_bitmasks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_35reset_bitmasks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset_bitmasks (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("reset_bitmasks", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("reset_bitmasks", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_34reset_bitmasks(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_34reset_bitmasks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reset_bitmasks", 0);

  /* "yt/geometry/particle_oct_container.pyx":1029
 * 
 *     def reset_bitmasks(self):
 *         self.bitmasks._reset()             # <<<<<<<<<<<<<<
 * 
 *     def load_bitmasks(self, fname):
*/
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_reset(__pyx_v_self->bitmasks); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1029, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1028
 *         return self.bitmasks._check()
 * 
 *     def reset_bitmasks(self):             # <<<<<<<<<<<<<<
 *         self.bitmasks._reset()
 * 
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.reset_bitmasks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1031
 *         self.bitmasks._reset()
 * 
 *     def load_bitmasks(self, fname):             # <<<<<<<<<<<<<<
 *         import h5py
 *         cdef bint read_flag = 1
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_37load_bitmasks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_37load_bitmasks = {"load_bitmasks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_37load_bitmasks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_37load_bitmasks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_fname = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load_bitmasks (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_fname,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1031, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1031, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "load_bitmasks", 0) < 0) __PYX_ERR(0, 1031, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("load_bitmasks", 1, 1, 1, i); __PYX_ERR(0, 1031, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1031, __pyx_L3_error)
    }
    __pyx_v_fname = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load_bitmasks", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1031, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.load_bitmasks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_36load_bitmasks(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_fname);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_36load_bitmasks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_fname) {
  PyObject *__pyx_v_h5py = NULL;
  int __pyx_v_read_flag;
  int __pyx_v_irflag;
  __pyx_t_5numpy_uint64_t __pyx_v_ver;
  int __pyx_v_overwrite;
  PyObject *__pyx_v_fp = NULL;
  PyObject *__pyx_v_grp = NULL;
  PyObject *__pyx_v_max_hsml = NULL;
  PyObject *__pyx_v_pb = NULL;
  PyObject *__pyx_v_ifile = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  __pyx_t_5numpy_uint64_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  PyObject *(*__pyx_t_22)(PyObject *);
  __pyx_t_5numpy_uint32_t __pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load_bitmasks", 0);

  /* "yt/geometry/particle_oct_container.pyx":1032
 * 
 *     def load_bitmasks(self, fname):
 *         import h5py             # <<<<<<<<<<<<<<
 *         cdef bint read_flag = 1
 *         cdef bint irflag
*/
  __pyx_t_1 = __Pyx_ImportDottedModuleRelFirst(__pyx_mstate_global->__pyx_n_u_h5py, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_h5py = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1033
 *     def load_bitmasks(self, fname):
 *         import h5py
 *         cdef bint read_flag = 1             # <<<<<<<<<<<<<<
 *         cdef bint irflag
 *         cdef np.uint64_t ver
*/
  __pyx_v_read_flag = 1;

  /* "yt/geometry/particle_oct_container.pyx":1036
 *         cdef bint irflag
 *         cdef np.uint64_t ver
 *         cdef bint overwrite = 0             # <<<<<<<<<<<<<<
 *         # Verify that file is correct version
 *         if not os.path.isfile(fname):
*/
  __pyx_v_overwrite = 0;

  /* "yt/geometry/particle_oct_container.pyx":1038
 *         cdef bint overwrite = 0
 *         # Verify that file is correct version
 *         if not os.path.isfile(fname):             # <<<<<<<<<<<<<<
 *             raise OSError
 *         with h5py.File(fname, mode="r") as fp:
*/
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_os); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_path); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = __pyx_t_4;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_fname};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_isfile, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1038, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = (!__pyx_t_6);
  if (unlikely(__pyx_t_7)) {

    /* "yt/geometry/particle_oct_container.pyx":1039
 *         # Verify that file is correct version
 *         if not os.path.isfile(fname):
 *             raise OSError             # <<<<<<<<<<<<<<
 *         with h5py.File(fname, mode="r") as fp:
 *             try:
*/
    __Pyx_Raise(__pyx_builtin_OSError, 0, 0, 0);
    __PYX_ERR(0, 1039, __pyx_L1_error)

    /* "yt/geometry/particle_oct_container.pyx":1038
 *         cdef bint overwrite = 0
 *         # Verify that file is correct version
 *         if not os.path.isfile(fname):             # <<<<<<<<<<<<<<
 *             raise OSError
 *         with h5py.File(fname, mode="r") as fp:
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":1040
 *         if not os.path.isfile(fname):
 *             raise OSError
 *         with h5py.File(fname, mode="r") as fp:             # <<<<<<<<<<<<<<
 *             try:
 *                 grp = fp[str(self.hash_value)]
*/
  /*with:*/ {
    __pyx_t_4 = __pyx_v_h5py;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_4, __pyx_v_fname};
      __pyx_t_2 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1040, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_mode, __pyx_mstate_global->__pyx_n_u_r, __pyx_t_2, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1040, __pyx_L1_error)
      __pyx_t_1 = __Pyx_Object_VectorcallMethod_CallFromBuilder(__pyx_mstate_global->__pyx_n_u_File, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_2);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1040, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_exit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1040, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = NULL;
    __pyx_t_3 = __Pyx_PyObject_LookupSpecial(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1040, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = 1;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      assert(__pyx_t_4);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
      __pyx_t_5 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1040, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_3 = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    /*try:*/ {
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        /*try:*/ {
          __pyx_v_fp = __pyx_t_3;
          __pyx_t_3 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1041
 *             raise OSError
 *         with h5py.File(fname, mode="r") as fp:
 *             try:             # <<<<<<<<<<<<<<
 *                 grp = fp[str(self.hash_value)]
 *             except KeyError:
*/
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_12);
            __Pyx_XGOTREF(__pyx_t_13);
            __Pyx_XGOTREF(__pyx_t_14);
            /*try:*/ {

              /* "yt/geometry/particle_oct_container.pyx":1042
 *         with h5py.File(fname, mode="r") as fp:
 *             try:
 *                 grp = fp[str(self.hash_value)]             # <<<<<<<<<<<<<<
 *             except KeyError:
 *                 raise OSError(f"Index not found in the {fname}")
*/
              __pyx_t_3 = __Pyx_PyLong_From_npy_int64(__pyx_v_self->hash_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1042, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_1 = __Pyx_PyObject_Unicode(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1042, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_fp, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1042, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_v_grp = __pyx_t_3;
              __pyx_t_3 = 0;

              /* "yt/geometry/particle_oct_container.pyx":1041
 *             raise OSError
 *         with h5py.File(fname, mode="r") as fp:
 *             try:             # <<<<<<<<<<<<<<
 *                 grp = fp[str(self.hash_value)]
 *             except KeyError:
*/
            }
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            goto __pyx_L19_try_end;
            __pyx_L14_error:;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "yt/geometry/particle_oct_container.pyx":1043
 *             try:
 *                 grp = fp[str(self.hash_value)]
 *             except KeyError:             # <<<<<<<<<<<<<<
 *                 raise OSError(f"Index not found in the {fname}")
 * 
*/
            __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
            if (__pyx_t_15) {
              __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.load_bitmasks", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_2) < 0) __PYX_ERR(0, 1043, __pyx_L16_except_error)
              __Pyx_XGOTREF(__pyx_t_3);
              __Pyx_XGOTREF(__pyx_t_1);
              __Pyx_XGOTREF(__pyx_t_2);

              /* "yt/geometry/particle_oct_container.pyx":1044
 *                 grp = fp[str(self.hash_value)]
 *             except KeyError:
 *                 raise OSError(f"Index not found in the {fname}")             # <<<<<<<<<<<<<<
 * 
 *             ver = grp.attrs["bitmask_version"]
*/
              __pyx_t_16 = NULL;
              __Pyx_INCREF(__pyx_builtin_OSError);
              __pyx_t_17 = __pyx_builtin_OSError; 
              __pyx_t_18 = __Pyx_PyObject_FormatSimple(__pyx_v_fname, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1044, __pyx_L16_except_error)
              __Pyx_GOTREF(__pyx_t_18);
              __pyx_t_19 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_kp_u_Index_not_found_in_the, __pyx_t_18); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1044, __pyx_L16_except_error)
              __Pyx_GOTREF(__pyx_t_19);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              __pyx_t_5 = 1;
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_19};
                __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
                __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
                if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1044, __pyx_L16_except_error)
                __Pyx_GOTREF(__pyx_t_4);
              }
              __Pyx_Raise(__pyx_t_4, 0, 0, 0);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __PYX_ERR(0, 1044, __pyx_L16_except_error)
            }
            goto __pyx_L16_except_error;

            /* "yt/geometry/particle_oct_container.pyx":1041
 *             raise OSError
 *         with h5py.File(fname, mode="r") as fp:
 *             try:             # <<<<<<<<<<<<<<
 *                 grp = fp[str(self.hash_value)]
 *             except KeyError:
*/
            __pyx_L16_except_error:;
            __Pyx_XGIVEREF(__pyx_t_12);
            __Pyx_XGIVEREF(__pyx_t_13);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_ExceptionReset(__pyx_t_12, __pyx_t_13, __pyx_t_14);
            goto __pyx_L8_error;
            __pyx_L19_try_end:;
          }

          /* "yt/geometry/particle_oct_container.pyx":1046
 *                 raise OSError(f"Index not found in the {fname}")
 * 
 *             ver = grp.attrs["bitmask_version"]             # <<<<<<<<<<<<<<
 *             try:
 *                 max_hsml = grp.attrs["max_hsml"]
*/
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_grp, __pyx_mstate_global->__pyx_n_u_attrs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1046, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_bitmask_version_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1046, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_20 = __Pyx_PyLong_As_npy_uint64(__pyx_t_1); if (unlikely((__pyx_t_20 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1046, __pyx_L8_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_v_ver = __pyx_t_20;

          /* "yt/geometry/particle_oct_container.pyx":1047
 * 
 *             ver = grp.attrs["bitmask_version"]
 *             try:             # <<<<<<<<<<<<<<
 *                 max_hsml = grp.attrs["max_hsml"]
 *             except KeyError:
*/
          {
            __Pyx_PyThreadState_declare
            __Pyx_PyThreadState_assign
            __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_13, &__pyx_t_12);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_13);
            __Pyx_XGOTREF(__pyx_t_12);
            /*try:*/ {

              /* "yt/geometry/particle_oct_container.pyx":1048
 *             ver = grp.attrs["bitmask_version"]
 *             try:
 *                 max_hsml = grp.attrs["max_hsml"]             # <<<<<<<<<<<<<<
 *             except KeyError:
 *                 raise OSError(f"'max_hsml' not found in the {fname}")
*/
              __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_grp, __pyx_mstate_global->__pyx_n_u_attrs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L22_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_max_hsml); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1048, __pyx_L22_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_v_max_hsml = __pyx_t_2;
              __pyx_t_2 = 0;

              /* "yt/geometry/particle_oct_container.pyx":1047
 * 
 *             ver = grp.attrs["bitmask_version"]
 *             try:             # <<<<<<<<<<<<<<
 *                 max_hsml = grp.attrs["max_hsml"]
 *             except KeyError:
*/
            }
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            goto __pyx_L27_try_end;
            __pyx_L22_error:;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "yt/geometry/particle_oct_container.pyx":1049
 *             try:
 *                 max_hsml = grp.attrs["max_hsml"]
 *             except KeyError:             # <<<<<<<<<<<<<<
 *                 raise OSError(f"'max_hsml' not found in the {fname}")
 *             if ver == self.nfiles and ver != _bitmask_version:
*/
            __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
            if (__pyx_t_15) {
              __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.load_bitmasks", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_3) < 0) __PYX_ERR(0, 1049, __pyx_L24_except_error)
              __Pyx_XGOTREF(__pyx_t_2);
              __Pyx_XGOTREF(__pyx_t_1);
              __Pyx_XGOTREF(__pyx_t_3);

              /* "yt/geometry/particle_oct_container.pyx":1050
 *                 max_hsml = grp.attrs["max_hsml"]
 *             except KeyError:
 *                 raise OSError(f"'max_hsml' not found in the {fname}")             # <<<<<<<<<<<<<<
 *             if ver == self.nfiles and ver != _bitmask_version:
 *                 overwrite = 1
*/
              __pyx_t_17 = NULL;
              __Pyx_INCREF(__pyx_builtin_OSError);
              __pyx_t_19 = __pyx_builtin_OSError; 
              __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_v_fname, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1050, __pyx_L24_except_error)
              __Pyx_GOTREF(__pyx_t_16);
              __pyx_t_18 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_kp_u_max_hsml_not_found_in_the, __pyx_t_16); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1050, __pyx_L24_except_error)
              __Pyx_GOTREF(__pyx_t_18);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              __pyx_t_5 = 1;
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_t_18};
                __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_19, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
                __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
                __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1050, __pyx_L24_except_error)
                __Pyx_GOTREF(__pyx_t_4);
              }
              __Pyx_Raise(__pyx_t_4, 0, 0, 0);
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __PYX_ERR(0, 1050, __pyx_L24_except_error)
            }
            goto __pyx_L24_except_error;

            /* "yt/geometry/particle_oct_container.pyx":1047
 * 
 *             ver = grp.attrs["bitmask_version"]
 *             try:             # <<<<<<<<<<<<<<
 *                 max_hsml = grp.attrs["max_hsml"]
 *             except KeyError:
*/
            __pyx_L24_except_error:;
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_13);
            __Pyx_XGIVEREF(__pyx_t_12);
            __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_13, __pyx_t_12);
            goto __pyx_L8_error;
            __pyx_L27_try_end:;
          }

          /* "yt/geometry/particle_oct_container.pyx":1051
 *             except KeyError:
 *                 raise OSError(f"'max_hsml' not found in the {fname}")
 *             if ver == self.nfiles and ver != _bitmask_version:             # <<<<<<<<<<<<<<
 *                 overwrite = 1
 *                 ver = 0 # Original bitmaps had number of files first
*/
          __pyx_t_6 = (__pyx_v_ver == __pyx_v_self->nfiles);
          if (__pyx_t_6) {
          } else {
            __pyx_t_7 = __pyx_t_6;
            goto __pyx_L31_bool_binop_done;
          }
          __pyx_t_3 = __Pyx_PyLong_From_npy_uint64(__pyx_v_ver); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1051, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_bitmask_version); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1051, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1051, __pyx_L8_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1051, __pyx_L8_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_7 = __pyx_t_6;
          __pyx_L31_bool_binop_done:;
          if (__pyx_t_7) {

            /* "yt/geometry/particle_oct_container.pyx":1052
 *                 raise OSError(f"'max_hsml' not found in the {fname}")
 *             if ver == self.nfiles and ver != _bitmask_version:
 *                 overwrite = 1             # <<<<<<<<<<<<<<
 *                 ver = 0 # Original bitmaps had number of files first
 *             if ver != _bitmask_version:
*/
            __pyx_v_overwrite = 1;

            /* "yt/geometry/particle_oct_container.pyx":1053
 *             if ver == self.nfiles and ver != _bitmask_version:
 *                 overwrite = 1
 *                 ver = 0 # Original bitmaps had number of files first             # <<<<<<<<<<<<<<
 *             if ver != _bitmask_version:
 *                 raise OSError("The file format of the index has changed since "
*/
            __pyx_v_ver = 0;

            /* "yt/geometry/particle_oct_container.pyx":1051
 *             except KeyError:
 *                 raise OSError(f"'max_hsml' not found in the {fname}")
 *             if ver == self.nfiles and ver != _bitmask_version:             # <<<<<<<<<<<<<<
 *                 overwrite = 1
 *                 ver = 0 # Original bitmaps had number of files first
*/
          }

          /* "yt/geometry/particle_oct_container.pyx":1054
 *                 overwrite = 1
 *                 ver = 0 # Original bitmaps had number of files first
 *             if ver != _bitmask_version:             # <<<<<<<<<<<<<<
 *                 raise OSError("The file format of the index has changed since "
 *                               "this file was created. It will be replaced with an "
*/
          __pyx_t_2 = __Pyx_PyLong_From_npy_uint64(__pyx_v_ver); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1054, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_bitmask_version); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1054, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1054, __pyx_L8_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1054, __pyx_L8_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(__pyx_t_7)) {

            /* "yt/geometry/particle_oct_container.pyx":1055
 *                 ver = 0 # Original bitmaps had number of files first
 *             if ver != _bitmask_version:
 *                 raise OSError("The file format of the index has changed since "             # <<<<<<<<<<<<<<
 *                               "this file was created. It will be replaced with an "
 *                               "updated version.")
*/
            __pyx_t_1 = NULL;
            __Pyx_INCREF(__pyx_builtin_OSError);
            __pyx_t_2 = __pyx_builtin_OSError; 
            __pyx_t_5 = 1;
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_mstate_global->__pyx_kp_u_The_file_format_of_the_index_has};
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1055, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_3);
            }
            __Pyx_Raise(__pyx_t_3, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __PYX_ERR(0, 1055, __pyx_L8_error)

            /* "yt/geometry/particle_oct_container.pyx":1054
 *                 overwrite = 1
 *                 ver = 0 # Original bitmaps had number of files first
 *             if ver != _bitmask_version:             # <<<<<<<<<<<<<<
 *                 raise OSError("The file format of the index has changed since "
 *                               "this file was created. It will be replaced with an "
*/
          }

          /* "yt/geometry/particle_oct_container.pyx":1060
 * 
 *             # Read bitmap for each file
 *             pb = get_pbar("Loading particle index", self.nfiles)             # <<<<<<<<<<<<<<
 *             for ifile in range(self.nfiles):
 *                 pb.update(ifile+1)
*/
          __pyx_t_2 = NULL;
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_get_pbar); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1060, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_4 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->nfiles); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1060, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = 1;
          #if CYTHON_UNPACK_METHODS
          if (unlikely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
            assert(__pyx_t_2);
            PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(__pyx__function);
            __Pyx_DECREF_SET(__pyx_t_1, __pyx__function);
            __pyx_t_5 = 0;
          }
          #endif
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_mstate_global->__pyx_kp_u_Loading_particle_index, __pyx_t_4};
            __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1060, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
          }
          __pyx_v_pb = __pyx_t_3;
          __pyx_t_3 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1061
 *             # Read bitmap for each file
 *             pb = get_pbar("Loading particle index", self.nfiles)
 *             for ifile in range(self.nfiles):             # <<<<<<<<<<<<<<
 *                 pb.update(ifile+1)
 *                 irflag = self.bitmasks._loads(ifile, grp[f"nfile_{ifile:05}"][...].tobytes())
*/
          __pyx_t_1 = NULL;
          __Pyx_INCREF(__pyx_builtin_range);
          __pyx_t_4 = __pyx_builtin_range; 
          __pyx_t_2 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->nfiles); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1061, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_5 = 1;
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_2};
            __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1061, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_3);
          }
          if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
            __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4);
            __pyx_t_21 = 0;
            __pyx_t_22 = NULL;
          } else {
            __pyx_t_21 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1061, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_22 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1061, __pyx_L8_error)
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          for (;;) {
            if (likely(!__pyx_t_22)) {
              if (likely(PyList_CheckExact(__pyx_t_4))) {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
                  #if !CYTHON_ASSUME_SAFE_SIZE
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1061, __pyx_L8_error)
                  #endif
                  if (__pyx_t_21 >= __pyx_temp) break;
                }
                __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_21);
                ++__pyx_t_21;
              } else {
                {
                  Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
                  #if !CYTHON_ASSUME_SAFE_SIZE
                  if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1061, __pyx_L8_error)
                  #endif
                  if (__pyx_t_21 >= __pyx_temp) break;
                }
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_21));
                #else
                __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_21);
                #endif
                ++__pyx_t_21;
              }
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1061, __pyx_L8_error)
            } else {
              __pyx_t_3 = __pyx_t_22(__pyx_t_4);
              if (unlikely(!__pyx_t_3)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1061, __pyx_L8_error)
                  PyErr_Clear();
                }
                break;
              }
            }
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_XDECREF_SET(__pyx_v_ifile, __pyx_t_3);
            __pyx_t_3 = 0;

            /* "yt/geometry/particle_oct_container.pyx":1062
 *             pb = get_pbar("Loading particle index", self.nfiles)
 *             for ifile in range(self.nfiles):
 *                 pb.update(ifile+1)             # <<<<<<<<<<<<<<
 *                 irflag = self.bitmasks._loads(ifile, grp[f"nfile_{ifile:05}"][...].tobytes())
 *                 if irflag == 0:
*/
            __pyx_t_2 = __pyx_v_pb;
            __Pyx_INCREF(__pyx_t_2);
            __pyx_t_1 = __Pyx_PyLong_AddObjC(__pyx_v_ifile, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1062, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_5 = 0;
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_1};
              __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_update, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1062, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_3);
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "yt/geometry/particle_oct_container.pyx":1063
 *             for ifile in range(self.nfiles):
 *                 pb.update(ifile+1)
 *                 irflag = self.bitmasks._loads(ifile, grp[f"nfile_{ifile:05}"][...].tobytes())             # <<<<<<<<<<<<<<
 *                 if irflag == 0:
 *                     read_flag = 0
*/
            __pyx_t_23 = __Pyx_PyLong_As_npy_uint32(__pyx_v_ifile); if (unlikely((__pyx_t_23 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1063, __pyx_L8_error)
            __pyx_t_2 = __Pyx_PyObject_Format(__pyx_v_ifile, __pyx_mstate_global->__pyx_kp_u_05); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1063, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_19 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_n_u_nfile, __pyx_t_2); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1063, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_19);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_grp, __pyx_t_19); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1063, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
            __pyx_t_19 = __Pyx_PyObject_GetItem(__pyx_t_2, Py_Ellipsis); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1063, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_19);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_1 = __pyx_t_19;
            __Pyx_INCREF(__pyx_t_1);
            __pyx_t_5 = 0;
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
              __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_tobytes, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1063, __pyx_L8_error)
              __Pyx_GOTREF(__pyx_t_3);
            }
            if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_3))) __PYX_ERR(0, 1063, __pyx_L8_error)
            __pyx_t_7 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_loads(__pyx_v_self->bitmasks, __pyx_t_23, ((PyObject*)__pyx_t_3)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1063, __pyx_L8_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_v_irflag = __pyx_t_7;

            /* "yt/geometry/particle_oct_container.pyx":1064
 *                 pb.update(ifile+1)
 *                 irflag = self.bitmasks._loads(ifile, grp[f"nfile_{ifile:05}"][...].tobytes())
 *                 if irflag == 0:             # <<<<<<<<<<<<<<
 *                     read_flag = 0
 *             pb.finish()
*/
            __pyx_t_7 = (__pyx_v_irflag == 0);
            if (__pyx_t_7) {

              /* "yt/geometry/particle_oct_container.pyx":1065
 *                 irflag = self.bitmasks._loads(ifile, grp[f"nfile_{ifile:05}"][...].tobytes())
 *                 if irflag == 0:
 *                     read_flag = 0             # <<<<<<<<<<<<<<
 *             pb.finish()
 *             # Collisions
*/
              __pyx_v_read_flag = 0;

              /* "yt/geometry/particle_oct_container.pyx":1064
 *                 pb.update(ifile+1)
 *                 irflag = self.bitmasks._loads(ifile, grp[f"nfile_{ifile:05}"][...].tobytes())
 *                 if irflag == 0:             # <<<<<<<<<<<<<<
 *                     read_flag = 0
 *             pb.finish()
*/
            }

            /* "yt/geometry/particle_oct_container.pyx":1061
 *             # Read bitmap for each file
 *             pb = get_pbar("Loading particle index", self.nfiles)
 *             for ifile in range(self.nfiles):             # <<<<<<<<<<<<<<
 *                 pb.update(ifile+1)
 *                 irflag = self.bitmasks._loads(ifile, grp[f"nfile_{ifile:05}"][...].tobytes())
*/
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1066
 *                 if irflag == 0:
 *                     read_flag = 0
 *             pb.finish()             # <<<<<<<<<<<<<<
 *             # Collisions
 *             irflag = self.collisions._loads(grp["collisions"][...].tobytes())
*/
          __pyx_t_3 = __pyx_v_pb;
          __Pyx_INCREF(__pyx_t_3);
          __pyx_t_5 = 0;
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
            __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_finish, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1066, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "yt/geometry/particle_oct_container.pyx":1068
 *             pb.finish()
 *             # Collisions
 *             irflag = self.collisions._loads(grp["collisions"][...].tobytes())             # <<<<<<<<<<<<<<
 *             if irflag == 0:
 *                 read_flag = 0
*/
          __pyx_t_19 = __Pyx_PyObject_Dict_GetItem(__pyx_v_grp, __pyx_mstate_global->__pyx_n_u_collisions); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1068, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_19);
          __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_19, Py_Ellipsis); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1068, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          __pyx_t_3 = __pyx_t_1;
          __Pyx_INCREF(__pyx_t_3);
          __pyx_t_5 = 0;
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
            __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_tobytes, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1068, __pyx_L8_error)
            __Pyx_GOTREF(__pyx_t_4);
          }
          if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_4))) __PYX_ERR(0, 1068, __pyx_L8_error)
          __pyx_t_7 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_v_self->collisions->__pyx_vtab)->_loads(__pyx_v_self->collisions, ((PyObject*)__pyx_t_4)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1068, __pyx_L8_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_v_irflag = __pyx_t_7;

          /* "yt/geometry/particle_oct_container.pyx":1069
 *             # Collisions
 *             irflag = self.collisions._loads(grp["collisions"][...].tobytes())
 *             if irflag == 0:             # <<<<<<<<<<<<<<
 *                 read_flag = 0
 * 
*/
          __pyx_t_7 = (__pyx_v_irflag == 0);
          if (__pyx_t_7) {

            /* "yt/geometry/particle_oct_container.pyx":1070
 *             irflag = self.collisions._loads(grp["collisions"][...].tobytes())
 *             if irflag == 0:
 *                 read_flag = 0             # <<<<<<<<<<<<<<
 * 
 *         # Save in correct format
*/
            __pyx_v_read_flag = 0;

            /* "yt/geometry/particle_oct_container.pyx":1069
 *             # Collisions
 *             irflag = self.collisions._loads(grp["collisions"][...].tobytes())
 *             if irflag == 0:             # <<<<<<<<<<<<<<
 *                 read_flag = 0
 * 
*/
          }

          /* "yt/geometry/particle_oct_container.pyx":1040
 *         if not os.path.isfile(fname):
 *             raise OSError
 *         with h5py.File(fname, mode="r") as fp:             # <<<<<<<<<<<<<<
 *             try:
 *                 grp = fp[str(self.hash_value)]
*/
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L13_try_end;
        __pyx_L8_error:;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.load_bitmasks", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_1, &__pyx_t_3) < 0) __PYX_ERR(0, 1040, __pyx_L10_except_error)
          __Pyx_XGOTREF(__pyx_t_4);
          __Pyx_XGOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_19 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1040, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_19);
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_19, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1040, __pyx_L10_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__pyx_t_7 < 0) __PYX_ERR(0, 1040, __pyx_L10_except_error)
          __pyx_t_6 = (!__pyx_t_7);
          if (unlikely(__pyx_t_6)) {
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_1);
            __Pyx_XGIVEREF(__pyx_t_3);
            __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_1, __pyx_t_3);
            __pyx_t_4 = 0;  __pyx_t_1 = 0;  __pyx_t_3 = 0; 
            __PYX_ERR(0, 1040, __pyx_L10_except_error)
          }
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          goto __pyx_L9_exception_handled;
        }
        __pyx_L10_except_error:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        goto __pyx_L1_error;
        __pyx_L9_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        __pyx_L13_try_end:;
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_8) {
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_mstate_global->__pyx_tuple[4], NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1040, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        goto __pyx_L7;
      }
      __pyx_L7:;
    }
    goto __pyx_L42;
    __pyx_L4_error:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L1_error;
    __pyx_L42:;
  }

  /* "yt/geometry/particle_oct_container.pyx":1073
 * 
 *         # Save in correct format
 *         if overwrite == 1:             # <<<<<<<<<<<<<<
 *             self.save_bitmasks(fname, max_hsml)
 *         return read_flag, max_hsml
*/
  __pyx_t_6 = (__pyx_v_overwrite == 1);
  if (__pyx_t_6) {

    /* "yt/geometry/particle_oct_container.pyx":1074
 *         # Save in correct format
 *         if overwrite == 1:
 *             self.save_bitmasks(fname, max_hsml)             # <<<<<<<<<<<<<<
 *         return read_flag, max_hsml
 * 
*/
    __pyx_t_1 = ((PyObject *)__pyx_v_self);
    __Pyx_INCREF(__pyx_t_1);
    if (unlikely(!__pyx_v_max_hsml)) { __Pyx_RaiseUnboundLocalError("max_hsml"); __PYX_ERR(0, 1074, __pyx_L1_error) }
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_v_fname, __pyx_v_max_hsml};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_save_bitmasks, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1074, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1073
 * 
 *         # Save in correct format
 *         if overwrite == 1:             # <<<<<<<<<<<<<<
 *             self.save_bitmasks(fname, max_hsml)
 *         return read_flag, max_hsml
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":1075
 *         if overwrite == 1:
 *             self.save_bitmasks(fname, max_hsml)
 *         return read_flag, max_hsml             # <<<<<<<<<<<<<<
 * 
 *     def print_info(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_read_flag); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(!__pyx_v_max_hsml)) { __Pyx_RaiseUnboundLocalError("max_hsml"); __PYX_ERR(0, 1075, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3) != (0)) __PYX_ERR(0, 1075, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_max_hsml);
  __Pyx_GIVEREF(__pyx_v_max_hsml);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_max_hsml) != (0)) __PYX_ERR(0, 1075, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1031
 *         self.bitmasks._reset()
 * 
 *     def load_bitmasks(self, fname):             # <<<<<<<<<<<<<<
 *         import h5py
 *         cdef bint read_flag = 1
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.load_bitmasks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_h5py);
  __Pyx_XDECREF(__pyx_v_fp);
  __Pyx_XDECREF(__pyx_v_grp);
  __Pyx_XDECREF(__pyx_v_max_hsml);
  __Pyx_XDECREF(__pyx_v_pb);
  __Pyx_XDECREF(__pyx_v_ifile);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1077
 *         return read_flag, max_hsml
 * 
 *     def print_info(self):             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t ifile
 *         for ifile in range(self.nfiles):
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_39print_info(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_39print_info = {"print_info", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_39print_info, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_39print_info(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("print_info (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("print_info", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("print_info", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_38print_info(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_38print_info(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  __pyx_t_5numpy_uint64_t __pyx_v_ifile;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  __pyx_t_5numpy_uint64_t __pyx_t_2;
  __pyx_t_5numpy_uint64_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  size_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("print_info", 0);

  /* "yt/geometry/particle_oct_container.pyx":1079
 *     def print_info(self):
 *         cdef np.uint64_t ifile
 *         for ifile in range(self.nfiles):             # <<<<<<<<<<<<<<
 *             self.bitmasks.print_info(ifile, "File: %03d" % ifile)
 * 
*/
  __pyx_t_1 = __pyx_v_self->nfiles;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_ifile = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":1080
 *         cdef np.uint64_t ifile
 *         for ifile in range(self.nfiles):
 *             self.bitmasks.print_info(ifile, "File: %03d" % ifile)             # <<<<<<<<<<<<<<
 * 
 *     def count_coarse(self, ifile):
*/
    __pyx_t_5 = ((PyObject *)__pyx_v_self->bitmasks);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyLong_From_npy_uint64(__pyx_v_ifile); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyLong_From_npy_uint64(__pyx_v_ifile); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyUnicode_Format(__pyx_mstate_global->__pyx_kp_u_File_03d, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = 0;
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_6, __pyx_t_8};
      __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_print_info, __pyx_callargs+__pyx_t_9, (3-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1080, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "yt/geometry/particle_oct_container.pyx":1077
 *         return read_flag, max_hsml
 * 
 *     def print_info(self):             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t ifile
 *         for ifile in range(self.nfiles):
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.print_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1082
 *             self.bitmasks.print_info(ifile, "File: %03d" % ifile)
 * 
 *     def count_coarse(self, ifile):             # <<<<<<<<<<<<<<
 *         r"""Get the number of coarse cells set for a file."""
 *         return self.bitmasks.count_coarse(ifile)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_41count_coarse(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_2yt_8geometry_22particle_oct_container_14ParticleBitmap_40count_coarse, "Get the number of coarse cells set for a file.");
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_41count_coarse = {"count_coarse", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_41count_coarse, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2yt_8geometry_22particle_oct_container_14ParticleBitmap_40count_coarse};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_41count_coarse(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ifile = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count_coarse (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_ifile,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1082, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1082, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "count_coarse", 0) < 0) __PYX_ERR(0, 1082, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("count_coarse", 1, 1, 1, i); __PYX_ERR(0, 1082, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1082, __pyx_L3_error)
    }
    __pyx_v_ifile = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("count_coarse", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1082, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.count_coarse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_40count_coarse(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_ifile);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_40count_coarse(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_ifile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count_coarse", 0);

  /* "yt/geometry/particle_oct_container.pyx":1084
 *     def count_coarse(self, ifile):
 *         r"""Get the number of coarse cells set for a file."""
 *         return self.bitmasks.count_coarse(ifile)             # <<<<<<<<<<<<<<
 * 
 *     def count_refined(self, ifile):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->bitmasks);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_ifile};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_count_coarse, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1084, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1082
 *             self.bitmasks.print_info(ifile, "File: %03d" % ifile)
 * 
 *     def count_coarse(self, ifile):             # <<<<<<<<<<<<<<
 *         r"""Get the number of coarse cells set for a file."""
 *         return self.bitmasks.count_coarse(ifile)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.count_coarse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1086
 *         return self.bitmasks.count_coarse(ifile)
 * 
 *     def count_refined(self, ifile):             # <<<<<<<<<<<<<<
 *         r"""Get the number of cells refined for a file."""
 *         return self.bitmasks.count_refined(ifile)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_43count_refined(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_2yt_8geometry_22particle_oct_container_14ParticleBitmap_42count_refined, "Get the number of cells refined for a file.");
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_43count_refined = {"count_refined", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_43count_refined, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2yt_8geometry_22particle_oct_container_14ParticleBitmap_42count_refined};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_43count_refined(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ifile = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count_refined (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_ifile,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1086, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1086, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "count_refined", 0) < 0) __PYX_ERR(0, 1086, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("count_refined", 1, 1, 1, i); __PYX_ERR(0, 1086, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1086, __pyx_L3_error)
    }
    __pyx_v_ifile = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("count_refined", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1086, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.count_refined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_42count_refined(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_ifile);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_42count_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_ifile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count_refined", 0);

  /* "yt/geometry/particle_oct_container.pyx":1088
 *     def count_refined(self, ifile):
 *         r"""Get the number of cells refined for a file."""
 *         return self.bitmasks.count_refined(ifile)             # <<<<<<<<<<<<<<
 * 
 *     def count_total(self, ifile):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->bitmasks);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_ifile};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_count_refined, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1086
 *         return self.bitmasks.count_coarse(ifile)
 * 
 *     def count_refined(self, ifile):             # <<<<<<<<<<<<<<
 *         r"""Get the number of cells refined for a file."""
 *         return self.bitmasks.count_refined(ifile)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.count_refined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1090
 *         return self.bitmasks.count_refined(ifile)
 * 
 *     def count_total(self, ifile):             # <<<<<<<<<<<<<<
 *         r"""Get the total number of cells set for a file."""
 *         return self.bitmasks.count_total(ifile)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_45count_total(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_2yt_8geometry_22particle_oct_container_14ParticleBitmap_44count_total, "Get the total number of cells set for a file.");
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_45count_total = {"count_total", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_45count_total, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2yt_8geometry_22particle_oct_container_14ParticleBitmap_44count_total};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_45count_total(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ifile = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count_total (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_ifile,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1090, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1090, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "count_total", 0) < 0) __PYX_ERR(0, 1090, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("count_total", 1, 1, 1, i); __PYX_ERR(0, 1090, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1090, __pyx_L3_error)
    }
    __pyx_v_ifile = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("count_total", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1090, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.count_total", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_44count_total(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_ifile);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_44count_total(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_ifile) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count_total", 0);

  /* "yt/geometry/particle_oct_container.pyx":1092
 *     def count_total(self, ifile):
 *         r"""Get the total number of cells set for a file."""
 *         return self.bitmasks.count_total(ifile)             # <<<<<<<<<<<<<<
 * 
 *     def check(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((PyObject *)__pyx_v_self->bitmasks);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_ifile};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_count_total, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1092, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1090
 *         return self.bitmasks.count_refined(ifile)
 * 
 *     def count_total(self, ifile):             # <<<<<<<<<<<<<<
 *         r"""Get the total number of cells set for a file."""
 *         return self.bitmasks.count_total(ifile)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.count_total", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1094
 *         return self.bitmasks.count_total(ifile)
 * 
 *     def check(self):             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t mi1
 *         cdef ewah_bool_array arr_totref, arr_tottwo
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_47check(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_47check = {"check", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_47check, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_47check(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("check", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("check", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_46check(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_46check(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  __pyx_t_5numpy_uint64_t __pyx_v_mi1;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array __pyx_v_arr_totref;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array __pyx_v_arr_tottwo;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array __pyx_v_arr;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array __pyx_v_arr_any;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array __pyx_v_arr_two;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array __pyx_v_arr_swap;
  std::vector<size_t>  __pyx_v_vec_totref;
  std::vector<size_t> ::iterator __pyx_v_it_mi1;
  int __pyx_v_nm;
  int __pyx_v_nc;
  __pyx_t_5numpy_uint64_t __pyx_v_ifile;
  __pyx_t_5numpy_uint64_t __pyx_v_nbitmasks;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  __pyx_t_5numpy_uint64_t __pyx_t_3;
  __pyx_t_5numpy_uint64_t __pyx_t_4;
  __pyx_t_5numpy_uint64_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  double __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check", 0);

  /* "yt/geometry/particle_oct_container.pyx":1100
 *         cdef vector[size_t] vec_totref
 *         cdef vector[size_t].iterator it_mi1
 *         cdef int nm = 0, nc = 0             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t ifile, nbitmasks
 *         nbitmasks = len(self.bitmasks)
*/
  __pyx_v_nm = 0;
  __pyx_v_nc = 0;

  /* "yt/geometry/particle_oct_container.pyx":1102
 *         cdef int nm = 0, nc = 0
 *         cdef np.uint64_t ifile, nbitmasks
 *         nbitmasks = len(self.bitmasks)             # <<<<<<<<<<<<<<
 *         # Locate all indices with second level refinement
 *         for ifile in range(self.nfiles):
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->bitmasks);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_nbitmasks = __pyx_t_2;

  /* "yt/geometry/particle_oct_container.pyx":1104
 *         nbitmasks = len(self.bitmasks)
 *         # Locate all indices with second level refinement
 *         for ifile in range(self.nfiles):             # <<<<<<<<<<<<<<
 *             arr = (<ewah_bool_array**> self.bitmasks.ewah_refn)[ifile][0]
 *             arr_totref.logicalor(arr,arr_totref)
*/
  __pyx_t_3 = __pyx_v_self->nfiles;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_ifile = __pyx_t_5;

    /* "yt/geometry/particle_oct_container.pyx":1105
 *         # Locate all indices with second level refinement
 *         for ifile in range(self.nfiles):
 *             arr = (<ewah_bool_array**> self.bitmasks.ewah_refn)[ifile][0]             # <<<<<<<<<<<<<<
 *             arr_totref.logicalor(arr,arr_totref)
 *         # Count collections & second level indices
*/
    __pyx_v_arr = ((((__pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array **)__pyx_v_self->bitmasks->ewah_refn)[__pyx_v_ifile])[0]);

    /* "yt/geometry/particle_oct_container.pyx":1106
 *         for ifile in range(self.nfiles):
 *             arr = (<ewah_bool_array**> self.bitmasks.ewah_refn)[ifile][0]
 *             arr_totref.logicalor(arr,arr_totref)             # <<<<<<<<<<<<<<
 *         # Count collections & second level indices
 *         vec_totref = arr_totref.toArray()
*/
    __pyx_v_arr_totref.logicalor(__pyx_v_arr, __pyx_v_arr_totref);
  }

  /* "yt/geometry/particle_oct_container.pyx":1108
 *             arr_totref.logicalor(arr,arr_totref)
 *         # Count collections & second level indices
 *         vec_totref = arr_totref.toArray()             # <<<<<<<<<<<<<<
 *         it_mi1 = vec_totref.begin()
 *         while it_mi1 != vec_totref.end():
*/
  __pyx_v_vec_totref = __pyx_v_arr_totref.toArray();

  /* "yt/geometry/particle_oct_container.pyx":1109
 *         # Count collections & second level indices
 *         vec_totref = arr_totref.toArray()
 *         it_mi1 = vec_totref.begin()             # <<<<<<<<<<<<<<
 *         while it_mi1 != vec_totref.end():
 *             mi1 = dereference(it_mi1)
*/
  __pyx_v_it_mi1 = __pyx_v_vec_totref.begin();

  /* "yt/geometry/particle_oct_container.pyx":1110
 *         vec_totref = arr_totref.toArray()
 *         it_mi1 = vec_totref.begin()
 *         while it_mi1 != vec_totref.end():             # <<<<<<<<<<<<<<
 *             mi1 = dereference(it_mi1)
 *             arr_any.reset()
*/
  while (1) {
    __pyx_t_6 = (__pyx_v_it_mi1 != __pyx_v_vec_totref.end());
    if (!__pyx_t_6) break;

    /* "yt/geometry/particle_oct_container.pyx":1111
 *         it_mi1 = vec_totref.begin()
 *         while it_mi1 != vec_totref.end():
 *             mi1 = dereference(it_mi1)             # <<<<<<<<<<<<<<
 *             arr_any.reset()
 *             arr_two.reset()
*/
    __pyx_v_mi1 = (*__pyx_v_it_mi1);

    /* "yt/geometry/particle_oct_container.pyx":1112
 *         while it_mi1 != vec_totref.end():
 *             mi1 = dereference(it_mi1)
 *             arr_any.reset()             # <<<<<<<<<<<<<<
 *             arr_two.reset()
 *             for ifile in range(nbitmasks):
*/
    __pyx_v_arr_any.reset();

    /* "yt/geometry/particle_oct_container.pyx":1113
 *             mi1 = dereference(it_mi1)
 *             arr_any.reset()
 *             arr_two.reset()             # <<<<<<<<<<<<<<
 *             for ifile in range(nbitmasks):
 *                 if self.bitmasks._isref(ifile, mi1) == 1:
*/
    __pyx_v_arr_two.reset();

    /* "yt/geometry/particle_oct_container.pyx":1114
 *             arr_any.reset()
 *             arr_two.reset()
 *             for ifile in range(nbitmasks):             # <<<<<<<<<<<<<<
 *                 if self.bitmasks._isref(ifile, mi1) == 1:
 *                     arr = (<cmap[np.int64_t, ewah_bool_array]**> self.bitmasks.ewah_coll)[ifile][0][mi1]
*/
    __pyx_t_3 = __pyx_v_nbitmasks;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_ifile = __pyx_t_5;

      /* "yt/geometry/particle_oct_container.pyx":1115
 *             arr_two.reset()
 *             for ifile in range(nbitmasks):
 *                 if self.bitmasks._isref(ifile, mi1) == 1:             # <<<<<<<<<<<<<<
 *                     arr = (<cmap[np.int64_t, ewah_bool_array]**> self.bitmasks.ewah_coll)[ifile][0][mi1]
 *                     arr_any.logicaland(arr, arr_two) # Indices in previous files
*/
      __pyx_t_6 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_isref(__pyx_v_self->bitmasks, __pyx_v_ifile, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1115, __pyx_L1_error)
      __pyx_t_7 = (__pyx_t_6 == 1);
      if (__pyx_t_7) {

        /* "yt/geometry/particle_oct_container.pyx":1116
 *             for ifile in range(nbitmasks):
 *                 if self.bitmasks._isref(ifile, mi1) == 1:
 *                     arr = (<cmap[np.int64_t, ewah_bool_array]**> self.bitmasks.ewah_coll)[ifile][0][mi1]             # <<<<<<<<<<<<<<
 *                     arr_any.logicaland(arr, arr_two) # Indices in previous files
 *                     arr_any.logicalor(arr, arr_swap) # All second level indices
*/
        __pyx_v_arr = (((((std::map<__pyx_t_5numpy_int64_t,__pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array>  **)__pyx_v_self->bitmasks->ewah_coll)[__pyx_v_ifile])[0])[__pyx_v_mi1]);

        /* "yt/geometry/particle_oct_container.pyx":1117
 *                 if self.bitmasks._isref(ifile, mi1) == 1:
 *                     arr = (<cmap[np.int64_t, ewah_bool_array]**> self.bitmasks.ewah_coll)[ifile][0][mi1]
 *                     arr_any.logicaland(arr, arr_two) # Indices in previous files             # <<<<<<<<<<<<<<
 *                     arr_any.logicalor(arr, arr_swap) # All second level indices
 *                     arr_any = arr_swap
*/
        __pyx_v_arr_any.logicaland(__pyx_v_arr, __pyx_v_arr_two);

        /* "yt/geometry/particle_oct_container.pyx":1118
 *                     arr = (<cmap[np.int64_t, ewah_bool_array]**> self.bitmasks.ewah_coll)[ifile][0][mi1]
 *                     arr_any.logicaland(arr, arr_two) # Indices in previous files
 *                     arr_any.logicalor(arr, arr_swap) # All second level indices             # <<<<<<<<<<<<<<
 *                     arr_any = arr_swap
 *                     arr_two.logicalor(arr_tottwo,arr_tottwo)
*/
        __pyx_v_arr_any.logicalor(__pyx_v_arr, __pyx_v_arr_swap);

        /* "yt/geometry/particle_oct_container.pyx":1119
 *                     arr_any.logicaland(arr, arr_two) # Indices in previous files
 *                     arr_any.logicalor(arr, arr_swap) # All second level indices
 *                     arr_any = arr_swap             # <<<<<<<<<<<<<<
 *                     arr_two.logicalor(arr_tottwo,arr_tottwo)
 *             nc += arr_tottwo.numberOfOnes()
*/
        __pyx_v_arr_any = __pyx_v_arr_swap;

        /* "yt/geometry/particle_oct_container.pyx":1120
 *                     arr_any.logicalor(arr, arr_swap) # All second level indices
 *                     arr_any = arr_swap
 *                     arr_two.logicalor(arr_tottwo,arr_tottwo)             # <<<<<<<<<<<<<<
 *             nc += arr_tottwo.numberOfOnes()
 *             nm += arr_any.numberOfOnes()
*/
        __pyx_v_arr_two.logicalor(__pyx_v_arr_tottwo, __pyx_v_arr_tottwo);

        /* "yt/geometry/particle_oct_container.pyx":1115
 *             arr_two.reset()
 *             for ifile in range(nbitmasks):
 *                 if self.bitmasks._isref(ifile, mi1) == 1:             # <<<<<<<<<<<<<<
 *                     arr = (<cmap[np.int64_t, ewah_bool_array]**> self.bitmasks.ewah_coll)[ifile][0][mi1]
 *                     arr_any.logicaland(arr, arr_two) # Indices in previous files
*/
      }
    }

    /* "yt/geometry/particle_oct_container.pyx":1121
 *                     arr_any = arr_swap
 *                     arr_two.logicalor(arr_tottwo,arr_tottwo)
 *             nc += arr_tottwo.numberOfOnes()             # <<<<<<<<<<<<<<
 *             nm += arr_any.numberOfOnes()
 *             preincrement(it_mi1)
*/
    __pyx_v_nc = (__pyx_v_nc + __pyx_v_arr_tottwo.numberOfOnes());

    /* "yt/geometry/particle_oct_container.pyx":1122
 *                     arr_two.logicalor(arr_tottwo,arr_tottwo)
 *             nc += arr_tottwo.numberOfOnes()
 *             nm += arr_any.numberOfOnes()             # <<<<<<<<<<<<<<
 *             preincrement(it_mi1)
 *         # nc: total number of second level morton indices that are repeated
*/
    __pyx_v_nm = (__pyx_v_nm + __pyx_v_arr_any.numberOfOnes());

    /* "yt/geometry/particle_oct_container.pyx":1123
 *             nc += arr_tottwo.numberOfOnes()
 *             nm += arr_any.numberOfOnes()
 *             preincrement(it_mi1)             # <<<<<<<<<<<<<<
 *         # nc: total number of second level morton indices that are repeated
 *         # nm: total number of second level morton indices
*/
    (void)((++__pyx_v_it_mi1));
  }

  /* "yt/geometry/particle_oct_container.pyx":1126
 *         # nc: total number of second level morton indices that are repeated
 *         # nm: total number of second level morton indices
 *         print("Total of %s / %s collisions (% 3.5f%%)" % (nc, nm, 100.0*float(nc)/nm))             # <<<<<<<<<<<<<<
 * 
 *     def primary_indices(self):
*/
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_nc); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyLong_From_int(__pyx_v_nm); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = (100.0 * ((double)__pyx_v_nc));
  if (unlikely(__pyx_v_nm == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1126, __pyx_L1_error)
  }
  __pyx_t_10 = PyFloat_FromDouble((__pyx_t_9 / __pyx_v_nm)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = PyTuple_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1) != (0)) __PYX_ERR(0, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_8);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_8) != (0)) __PYX_ERR(0, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_t_10) != (0)) __PYX_ERR(0, 1126, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_8 = 0;
  __pyx_t_10 = 0;
  __pyx_t_10 = PyUnicode_Format(__pyx_mstate_global->__pyx_kp_u_Total_of_s_s_collisions_3_5f, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_10) < 0) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1094
 *         return self.bitmasks.count_total(ifile)
 * 
 *     def check(self):             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t mi1
 *         cdef ewah_bool_array arr_totref, arr_tottwo
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1128
 *         print("Total of %s / %s collisions (% 3.5f%%)" % (nc, nm, 100.0*float(nc)/nm))
 * 
 *     def primary_indices(self):             # <<<<<<<<<<<<<<
 *         mi = (<ewah_bool_array*> self.collisions.ewah_keys)[0].toArray()
 *         return np.array(mi,'uint64')
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_49primary_indices(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_49primary_indices = {"primary_indices", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_49primary_indices, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_49primary_indices(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("primary_indices (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("primary_indices", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("primary_indices", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_48primary_indices(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_48primary_indices(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  std::vector<size_t>  __pyx_v_mi;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("primary_indices", 0);

  /* "yt/geometry/particle_oct_container.pyx":1129
 * 
 *     def primary_indices(self):
 *         mi = (<ewah_bool_array*> self.collisions.ewah_keys)[0].toArray()             # <<<<<<<<<<<<<<
 *         return np.array(mi,'uint64')
 * 
*/
  __pyx_v_mi = (((__pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array *)__pyx_v_self->collisions->ewah_keys)[0]).toArray();

  /* "yt/geometry/particle_oct_container.pyx":1130
 *     def primary_indices(self):
 *         mi = (<ewah_bool_array*> self.collisions.ewah_keys)[0].toArray()
 *         return np.array(mi,'uint64')             # <<<<<<<<<<<<<<
 * 
 *     def file_ownership_mask(self, fid):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_convert_vector_to_py_size_t(__pyx_v_mi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_mstate_global->__pyx_n_u_uint64};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1128
 *         print("Total of %s / %s collisions (% 3.5f%%)" % (nc, nm, 100.0*float(nc)/nm))
 * 
 *     def primary_indices(self):             # <<<<<<<<<<<<<<
 *         mi = (<ewah_bool_array*> self.collisions.ewah_keys)[0].toArray()
 *         return np.array(mi,'uint64')
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.primary_indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1132
 *         return np.array(mi,'uint64')
 * 
 *     def file_ownership_mask(self, fid):             # <<<<<<<<<<<<<<
 *         cdef BoolArrayCollection out
 *         out = self.bitmasks._get_bitmask(<np.uint32_t> fid)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_51file_ownership_mask(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_51file_ownership_mask = {"file_ownership_mask", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_51file_ownership_mask, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_51file_ownership_mask(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_fid = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("file_ownership_mask (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_fid,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1132, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1132, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "file_ownership_mask", 0) < 0) __PYX_ERR(0, 1132, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("file_ownership_mask", 1, 1, 1, i); __PYX_ERR(0, 1132, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1132, __pyx_L3_error)
    }
    __pyx_v_fid = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("file_ownership_mask", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1132, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.file_ownership_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_50file_ownership_mask(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_fid);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_50file_ownership_mask(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_fid) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_out = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("file_ownership_mask", 0);

  /* "yt/geometry/particle_oct_container.pyx":1134
 *     def file_ownership_mask(self, fid):
 *         cdef BoolArrayCollection out
 *         out = self.bitmasks._get_bitmask(<np.uint32_t> fid)             # <<<<<<<<<<<<<<
 *         return out
 * 
*/
  __pyx_t_1 = __Pyx_PyLong_As_npy_uint32(__pyx_v_fid); if (unlikely((__pyx_t_1 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1134, __pyx_L1_error)
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_get_bitmask(__pyx_v_self->bitmasks, ((__pyx_t_5numpy_uint32_t)__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_out = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1135
 *         cdef BoolArrayCollection out
 *         out = self.bitmasks._get_bitmask(<np.uint32_t> fid)
 *         return out             # <<<<<<<<<<<<<<
 * 
 *     def finalize(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __pyx_r = ((PyObject *)__pyx_v_out);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1132
 *         return np.array(mi,'uint64')
 * 
 *     def file_ownership_mask(self, fid):             # <<<<<<<<<<<<<<
 *         cdef BoolArrayCollection out
 *         out = self.bitmasks._get_bitmask(<np.uint32_t> fid)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.file_ownership_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1137
 *         return out
 * 
 *     def finalize(self):             # <<<<<<<<<<<<<<
 *         return
 *         # self.index_octree = ParticleOctreeContainer([1,1,1],
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_53finalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_53finalize = {"finalize", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_53finalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_53finalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("finalize", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("finalize", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_52finalize(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_52finalize(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize", 0);

  /* "yt/geometry/particle_oct_container.pyx":1138
 * 
 *     def finalize(self):
 *         return             # <<<<<<<<<<<<<<
 *         # self.index_octree = ParticleOctreeContainer([1,1,1],
 *         #     [self.left_edge[0], self.left_edge[1], self.left_edge[2]],
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1137
 *         return out
 * 
 *     def finalize(self):             # <<<<<<<<<<<<<<
 *         return
 *         # self.index_octree = ParticleOctreeContainer([1,1,1],
*/

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1151
 *         # self.index_octree.finalize()
 * 
 *     def get_DLE(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef np.ndarray[np.float64_t, ndim=1] DLE
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_55get_DLE(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_55get_DLE = {"get_DLE", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_55get_DLE, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_55get_DLE(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_DLE (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_DLE", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_DLE", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_54get_DLE(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_54get_DLE(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_v_i;
  PyArrayObject *__pyx_v_DLE = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_DLE;
  __Pyx_Buffer __pyx_pybuffer_DLE;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_DLE", 0);
  __pyx_pybuffer_DLE.pybuffer.buf = NULL;
  __pyx_pybuffer_DLE.refcount = 0;
  __pyx_pybuffernd_DLE.data = NULL;
  __pyx_pybuffernd_DLE.rcbuffer = &__pyx_pybuffer_DLE;

  /* "yt/geometry/particle_oct_container.pyx":1154
 *         cdef int i
 *         cdef np.ndarray[np.float64_t, ndim=1] DLE
 *         DLE = np.zeros(3, dtype='float64')             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             DLE[i] = self.left_edge[i]
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_mstate_global->__pyx_int_3};
    __pyx_t_3 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_float64, __pyx_t_3, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1154, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1154, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_DLE.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_DLE.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_DLE.rcbuffer->pybuffer, (PyObject*)__pyx_v_DLE, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_DLE.diminfo[0].strides = __pyx_pybuffernd_DLE.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_DLE.diminfo[0].shape = __pyx_pybuffernd_DLE.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1154, __pyx_L1_error)
  }
  __pyx_v_DLE = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1155
 *         cdef np.ndarray[np.float64_t, ndim=1] DLE
 *         DLE = np.zeros(3, dtype='float64')
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             DLE[i] = self.left_edge[i]
 *         return DLE
*/
  for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "yt/geometry/particle_oct_container.pyx":1156
 *         DLE = np.zeros(3, dtype='float64')
 *         for i in range(3):
 *             DLE[i] = self.left_edge[i]             # <<<<<<<<<<<<<<
 *         return DLE
 *     def get_DRE(self):
*/
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_DLE.diminfo[0].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_DLE.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 1156, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_DLE.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_DLE.diminfo[0].strides) = (__pyx_v_self->left_edge[__pyx_v_i]);
  }

  /* "yt/geometry/particle_oct_container.pyx":1157
 *         for i in range(3):
 *             DLE[i] = self.left_edge[i]
 *         return DLE             # <<<<<<<<<<<<<<
 *     def get_DRE(self):
 *         cdef int i
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_DLE);
  __pyx_r = ((PyObject *)__pyx_v_DLE);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1151
 *         # self.index_octree.finalize()
 * 
 *     def get_DLE(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef np.ndarray[np.float64_t, ndim=1] DLE
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_DLE.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.get_DLE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_DLE.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_DLE);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1158
 *             DLE[i] = self.left_edge[i]
 *         return DLE
 *     def get_DRE(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef np.ndarray[np.float64_t, ndim=1] DRE
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_57get_DRE(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_57get_DRE = {"get_DRE", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_57get_DRE, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_57get_DRE(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_DRE (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_DRE", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_DRE", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_56get_DRE(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_56get_DRE(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_v_i;
  PyArrayObject *__pyx_v_DRE = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_DRE;
  __Pyx_Buffer __pyx_pybuffer_DRE;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_DRE", 0);
  __pyx_pybuffer_DRE.pybuffer.buf = NULL;
  __pyx_pybuffer_DRE.refcount = 0;
  __pyx_pybuffernd_DRE.data = NULL;
  __pyx_pybuffernd_DRE.rcbuffer = &__pyx_pybuffer_DRE;

  /* "yt/geometry/particle_oct_container.pyx":1161
 *         cdef int i
 *         cdef np.ndarray[np.float64_t, ndim=1] DRE
 *         DRE = np.zeros(3, dtype='float64')             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             DRE[i] = self.right_edge[i]
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_mstate_global->__pyx_int_3};
    __pyx_t_3 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_float64, __pyx_t_3, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1161, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1161, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_DRE.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_DRE.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_DRE.rcbuffer->pybuffer, (PyObject*)__pyx_v_DRE, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_DRE.diminfo[0].strides = __pyx_pybuffernd_DRE.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_DRE.diminfo[0].shape = __pyx_pybuffernd_DRE.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1161, __pyx_L1_error)
  }
  __pyx_v_DRE = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1162
 *         cdef np.ndarray[np.float64_t, ndim=1] DRE
 *         DRE = np.zeros(3, dtype='float64')
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             DRE[i] = self.right_edge[i]
 *         return DRE
*/
  for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "yt/geometry/particle_oct_container.pyx":1163
 *         DRE = np.zeros(3, dtype='float64')
 *         for i in range(3):
 *             DRE[i] = self.right_edge[i]             # <<<<<<<<<<<<<<
 *         return DRE
 * 
*/
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_pybuffernd_DRE.diminfo[0].shape;
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_DRE.diminfo[0].shape)) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 1163, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_DRE.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_DRE.diminfo[0].strides) = (__pyx_v_self->right_edge[__pyx_v_i]);
  }

  /* "yt/geometry/particle_oct_container.pyx":1164
 *         for i in range(3):
 *             DRE[i] = self.right_edge[i]
 *         return DRE             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_DRE);
  __pyx_r = ((PyObject *)__pyx_v_DRE);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1158
 *             DLE[i] = self.left_edge[i]
 *         return DLE
 *     def get_DRE(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef np.ndarray[np.float64_t, ndim=1] DRE
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_DRE.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.get_DRE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_DRE.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_DRE);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1166
 *         return DRE
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_59get_ghost_zones(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_59get_ghost_zones = {"get_ghost_zones", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_59get_ghost_zones, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_59get_ghost_zones(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector = 0;
  int __pyx_v_ngz;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_dmask = 0;
  int __pyx_v_coarse_ghosts;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_ghost_zones (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_selector,&__pyx_mstate_global->__pyx_n_u_ngz,&__pyx_mstate_global->__pyx_n_u_dmask,&__pyx_mstate_global->__pyx_n_u_coarse_ghosts,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1166, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1166, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1166, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1166, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1166, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "get_ghost_zones", 0) < 0) __PYX_ERR(0, 1166, __pyx_L3_error)

      /* "yt/geometry/particle_oct_container.pyx":1170
 *     @cython.cdivision(True)
 *     def get_ghost_zones(self, SelectorObject selector, int ngz,
 *                         BoolArrayCollection dmask = None, bint coarse_ghosts = False):             # <<<<<<<<<<<<<<
 *         cdef BoolArrayCollection gmask, gmask2, out
 *         cdef np.ndarray[np.uint8_t, ndim=1] periodic = selector.get_periodicity()
*/
      if (!values[2]) values[2] = __Pyx_NewRef((PyObject *)((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None));
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("get_ghost_zones", 0, 2, 4, i); __PYX_ERR(0, 1166, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1166, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1166, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1166, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1166, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef((PyObject *)((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None));
    }
    __pyx_v_selector = ((struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *)values[0]);
    __pyx_v_ngz = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_ngz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1169, __pyx_L3_error)
    __pyx_v_dmask = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[2]);
    if (values[3]) {
      __pyx_v_coarse_ghosts = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_coarse_ghosts == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1170, __pyx_L3_error)
    } else {
      __pyx_v_coarse_ghosts = ((int)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_ghost_zones", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 1166, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.get_ghost_zones", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_selector), __pyx_mstate_global->__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject, 1, "selector", 0))) __PYX_ERR(0, 1169, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dmask), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "dmask", 0))) __PYX_ERR(0, 1170, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_58get_ghost_zones(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_selector, __pyx_v_ngz, __pyx_v_dmask, __pyx_v_coarse_ghosts);

  /* "yt/geometry/particle_oct_container.pyx":1166
 *         return DRE
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_58get_ghost_zones(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector, int __pyx_v_ngz, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_dmask, int __pyx_v_coarse_ghosts) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_gmask = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_gmask2 = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_out = 0;
  PyArrayObject *__pyx_v_periodic = 0;
  int __pyx_v_periodicity[3];
  int __pyx_v_i;
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_morton_selector = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__dfiles = NULL;
  PyObject *__pyx_v_gfiles = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_periodic;
  __Pyx_Buffer __pyx_pybuffer_periodic;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_19BoolArrayCollection__get_ghost_zones __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_ghost_zones", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_dmask);
  __pyx_pybuffer_periodic.pybuffer.buf = NULL;
  __pyx_pybuffer_periodic.refcount = 0;
  __pyx_pybuffernd_periodic.data = NULL;
  __pyx_pybuffernd_periodic.rcbuffer = &__pyx_pybuffer_periodic;

  /* "yt/geometry/particle_oct_container.pyx":1172
 *                         BoolArrayCollection dmask = None, bint coarse_ghosts = False):
 *         cdef BoolArrayCollection gmask, gmask2, out
 *         cdef np.ndarray[np.uint8_t, ndim=1] periodic = selector.get_periodicity()             # <<<<<<<<<<<<<<
 *         cdef bint periodicity[3]
 *         cdef int i
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_selector);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_periodicity, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1172, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_periodic.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_periodic = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_periodic.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1172, __pyx_L1_error)
    } else {__pyx_pybuffernd_periodic.diminfo[0].strides = __pyx_pybuffernd_periodic.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_periodic.diminfo[0].shape = __pyx_pybuffernd_periodic.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_v_periodic = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1175
 *         cdef bint periodicity[3]
 *         cdef int i
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             periodicity[i] = periodic[i]
 *         if dmask is None:
*/
  for (__pyx_t_4 = 0; __pyx_t_4 < 3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "yt/geometry/particle_oct_container.pyx":1176
 *         cdef int i
 *         for i in range(3):
 *             periodicity[i] = periodic[i]             # <<<<<<<<<<<<<<
 *         if dmask is None:
 *             dmask = BoolArrayCollection()
*/
    __pyx_t_5 = __pyx_v_i;
    (__pyx_v_periodicity[__pyx_v_i]) = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_periodic.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_periodic.diminfo[0].strides));
  }

  /* "yt/geometry/particle_oct_container.pyx":1177
 *         for i in range(3):
 *             periodicity[i] = periodic[i]
 *         if dmask is None:             # <<<<<<<<<<<<<<
 *             dmask = BoolArrayCollection()
 *             gmask2 = BoolArrayCollection()
*/
  __pyx_t_6 = (((PyObject *)__pyx_v_dmask) == Py_None);
  if (__pyx_t_6) {

    /* "yt/geometry/particle_oct_container.pyx":1178
 *             periodicity[i] = periodic[i]
 *         if dmask is None:
 *             dmask = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *             gmask2 = BoolArrayCollection()
 *             morton_selector = ParticleBitmapSelector(selector,self,ngz=0)
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
    __pyx_t_7 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1178, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_1);
    }
    __Pyx_DECREF_SET(__pyx_v_dmask, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1179
 *         if dmask is None:
 *             dmask = BoolArrayCollection()
 *             gmask2 = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *             morton_selector = ParticleBitmapSelector(selector,self,ngz=0)
 *             morton_selector.fill_masks(dmask, gmask2)
*/
    __pyx_t_7 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
    __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1179, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_1);
    }
    __pyx_v_gmask2 = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1180
 *             dmask = BoolArrayCollection()
 *             gmask2 = BoolArrayCollection()
 *             morton_selector = ParticleBitmapSelector(selector,self,ngz=0)             # <<<<<<<<<<<<<<
 *             morton_selector.fill_masks(dmask, gmask2)
 *         gmask = BoolArrayCollection()
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector);
    __pyx_t_7 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector); 
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[3 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, ((PyObject *)__pyx_v_selector), ((PyObject *)__pyx_v_self)};
      __pyx_t_8 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_ngz, __pyx_mstate_global->__pyx_int_0, __pyx_t_8, __pyx_callargs+3, 0) < 0) __PYX_ERR(0, 1180, __pyx_L1_error)
      __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_7, __pyx_callargs+__pyx_t_3, (3-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_8);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1180, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_1);
    }
    __pyx_v_morton_selector = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1181
 *             gmask2 = BoolArrayCollection()
 *             morton_selector = ParticleBitmapSelector(selector,self,ngz=0)
 *             morton_selector.fill_masks(dmask, gmask2)             # <<<<<<<<<<<<<<
 *         gmask = BoolArrayCollection()
 *         dmask._get_ghost_zones(ngz, self.index_order1, self.index_order2,
*/
    __pyx_t_7 = ((PyObject *)__pyx_v_morton_selector);
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_3 = 0;
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_7, ((PyObject *)__pyx_v_dmask), ((PyObject *)__pyx_v_gmask2)};
      __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_fill_masks, __pyx_callargs+__pyx_t_3, (3-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1181, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1177
 *         for i in range(3):
 *             periodicity[i] = periodic[i]
 *         if dmask is None:             # <<<<<<<<<<<<<<
 *             dmask = BoolArrayCollection()
 *             gmask2 = BoolArrayCollection()
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":1182
 *             morton_selector = ParticleBitmapSelector(selector,self,ngz=0)
 *             morton_selector.fill_masks(dmask, gmask2)
 *         gmask = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         dmask._get_ghost_zones(ngz, self.index_order1, self.index_order2,
 *                                periodicity, gmask, <bint>coarse_ghosts)
*/
  __pyx_t_7 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
  __pyx_t_8 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
  __pyx_t_3 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1182, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_gmask = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1183
 *             morton_selector.fill_masks(dmask, gmask2)
 *         gmask = BoolArrayCollection()
 *         dmask._get_ghost_zones(ngz, self.index_order1, self.index_order2,             # <<<<<<<<<<<<<<
 *                                periodicity, gmask, <bint>coarse_ghosts)
 *         _dfiles, gfiles = self.masks_to_files(dmask, gmask)
*/
  __pyx_t_9.__pyx_n = 1;
  __pyx_t_9.coarse_ghosts = __pyx_v_coarse_ghosts;
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_v_dmask->__pyx_vtab)->_get_ghost_zones(__pyx_v_dmask, __pyx_v_ngz, __pyx_v_self->index_order1, __pyx_v_self->index_order2, __pyx_v_periodicity, __pyx_v_gmask, &__pyx_t_9); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1183, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1185
 *         dmask._get_ghost_zones(ngz, self.index_order1, self.index_order2,
 *                                periodicity, gmask, <bint>coarse_ghosts)
 *         _dfiles, gfiles = self.masks_to_files(dmask, gmask)             # <<<<<<<<<<<<<<
 *         out = BoolArrayCollection()
 *         gmask._logicalor(dmask, out)
*/
  __pyx_t_8 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_8);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_8, ((PyObject *)__pyx_v_dmask), ((PyObject *)__pyx_v_gmask)};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_masks_to_files, __pyx_callargs+__pyx_t_3, (3-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1185, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0);
      __Pyx_INCREF(__pyx_t_8);
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1);
      __Pyx_INCREF(__pyx_t_7);
    } else {
      __pyx_t_8 = __Pyx_PyList_GetItemRef(sequence, 0);
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1185, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyList_GetItemRef(sequence, 1);
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1185, __pyx_L1_error)
      __Pyx_XGOTREF(__pyx_t_7);
    }
    #else
    __pyx_t_8 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2);
    index = 0; __pyx_t_8 = __pyx_t_10(__pyx_t_2); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_8);
    index = 1; __pyx_t_7 = __pyx_t_10(__pyx_t_2); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_7);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_2), 2) < 0) __PYX_ERR(0, 1185, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L7_unpacking_done;
    __pyx_L6_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1185, __pyx_L1_error)
    __pyx_L7_unpacking_done:;
  }
  __pyx_v__dfiles = __pyx_t_8;
  __pyx_t_8 = 0;
  __pyx_v_gfiles = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1186
 *                                periodicity, gmask, <bint>coarse_ghosts)
 *         _dfiles, gfiles = self.masks_to_files(dmask, gmask)
 *         out = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         gmask._logicalor(dmask, out)
 *         return gfiles, out
*/
  __pyx_t_7 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
  __pyx_t_8 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
  __pyx_t_3 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_out = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1187
 *         _dfiles, gfiles = self.masks_to_files(dmask, gmask)
 *         out = BoolArrayCollection()
 *         gmask._logicalor(dmask, out)             # <<<<<<<<<<<<<<
 *         return gfiles, out
 * 
*/
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_v_gmask->__pyx_vtab)->_logicalor(__pyx_v_gmask, __pyx_v_dmask, __pyx_v_out); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1187, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1188
 *         out = BoolArrayCollection()
 *         gmask._logicalor(dmask, out)
 *         return gfiles, out             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_gfiles);
  __Pyx_GIVEREF(__pyx_v_gfiles);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_gfiles) != (0)) __PYX_ERR(0, 1188, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_out);
  __Pyx_GIVEREF((PyObject *)__pyx_v_out);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_out)) != (0)) __PYX_ERR(0, 1188, __pyx_L1_error);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1166
 *         return DRE
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_periodic.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.get_ghost_zones", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_periodic.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_gmask);
  __Pyx_XDECREF((PyObject *)__pyx_v_gmask2);
  __Pyx_XDECREF((PyObject *)__pyx_v_out);
  __Pyx_XDECREF((PyObject *)__pyx_v_periodic);
  __Pyx_XDECREF((PyObject *)__pyx_v_morton_selector);
  __Pyx_XDECREF(__pyx_v__dfiles);
  __Pyx_XDECREF(__pyx_v_gfiles);
  __Pyx_XDECREF((PyObject *)__pyx_v_dmask);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1190
 *         return gfiles, out
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_61selector2mask(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_61selector2mask = {"selector2mask", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_61selector2mask, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_61selector2mask(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("selector2mask (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_selector,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1190, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1190, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "selector2mask", 0) < 0) __PYX_ERR(0, 1190, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("selector2mask", 1, 1, 1, i); __PYX_ERR(0, 1190, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1190, __pyx_L3_error)
    }
    __pyx_v_selector = ((struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("selector2mask", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1190, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.selector2mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_selector), __pyx_mstate_global->__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject, 1, "selector", 0))) __PYX_ERR(0, 1193, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_60selector2mask(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_selector);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_60selector2mask(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_cmask = 0;
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_morton_selector = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("selector2mask", 0);

  /* "yt/geometry/particle_oct_container.pyx":1194
 *     @cython.cdivision(True)
 *     def selector2mask(self, SelectorObject selector):
 *         cdef BoolArrayCollection cmask = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         cdef ParticleBitmapSelector morton_selector
 *         morton_selector = ParticleBitmapSelector(selector,self,ngz=0)
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_cmask = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1196
 *         cdef BoolArrayCollection cmask = BoolArrayCollection()
 *         cdef ParticleBitmapSelector morton_selector
 *         morton_selector = ParticleBitmapSelector(selector,self,ngz=0)             # <<<<<<<<<<<<<<
 *         morton_selector.fill_masks(cmask)
 *         return cmask
*/
  __pyx_t_3 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector);
  __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[3 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, ((PyObject *)__pyx_v_selector), ((PyObject *)__pyx_v_self)};
    __pyx_t_5 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_ngz, __pyx_mstate_global->__pyx_int_0, __pyx_t_5, __pyx_callargs+3, 0) < 0) __PYX_ERR(0, 1196, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_2, __pyx_callargs+__pyx_t_4, (3-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1196, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_morton_selector = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1197
 *         cdef ParticleBitmapSelector morton_selector
 *         morton_selector = ParticleBitmapSelector(selector,self,ngz=0)
 *         morton_selector.fill_masks(cmask)             # <<<<<<<<<<<<<<
 *         return cmask
 * 
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_morton_selector);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_cmask)};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_fill_masks, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1198
 *         morton_selector = ParticleBitmapSelector(selector,self,ngz=0)
 *         morton_selector.fill_masks(cmask)
 *         return cmask             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_cmask);
  __pyx_r = ((PyObject *)__pyx_v_cmask);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1190
 *         return gfiles, out
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.selector2mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cmask);
  __Pyx_XDECREF((PyObject *)__pyx_v_morton_selector);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1200
 *         return cmask
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_63mask2files(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_63mask2files = {"mask2files", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_63mask2files, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_63mask2files(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_cmask = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mask2files (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_cmask,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1200, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1200, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "mask2files", 0) < 0) __PYX_ERR(0, 1200, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("mask2files", 1, 1, 1, i); __PYX_ERR(0, 1200, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1200, __pyx_L3_error)
    }
    __pyx_v_cmask = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mask2files", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1200, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.mask2files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cmask), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "cmask", 0))) __PYX_ERR(0, 1203, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_62mask2files(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_cmask);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_62mask2files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_cmask) {
  PyArrayObject *__pyx_v_file_idx = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_idx;
  __Pyx_Buffer __pyx_pybuffer_file_idx;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mask2files", 0);
  __pyx_pybuffer_file_idx.pybuffer.buf = NULL;
  __pyx_pybuffer_file_idx.refcount = 0;
  __pyx_pybuffernd_file_idx.data = NULL;
  __pyx_pybuffernd_file_idx.rcbuffer = &__pyx_pybuffer_file_idx;

  /* "yt/geometry/particle_oct_container.pyx":1205
 *     def mask2files(self, BoolArrayCollection cmask):
 *         cdef np.ndarray[np.uint32_t, ndim=1] file_idx
 *         file_idx = self.mask_to_files(cmask)             # <<<<<<<<<<<<<<
 *         return file_idx
 * 
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_cmask)};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_mask_to_files, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1205, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx.rcbuffer->pybuffer);
    __pyx_t_4 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_idx.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_4 < 0)) {
      PyErr_Fetch(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_5); Py_XDECREF(__pyx_t_6); Py_XDECREF(__pyx_t_7);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      }
      __pyx_t_5 = __pyx_t_6 = __pyx_t_7 = 0;
    }
    __pyx_pybuffernd_file_idx.diminfo[0].strides = __pyx_pybuffernd_file_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_idx.diminfo[0].shape = __pyx_pybuffernd_file_idx.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1205, __pyx_L1_error)
  }
  __pyx_v_file_idx = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1206
 *         cdef np.ndarray[np.uint32_t, ndim=1] file_idx
 *         file_idx = self.mask_to_files(cmask)
 *         return file_idx             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_file_idx);
  __pyx_r = ((PyObject *)__pyx_v_file_idx);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1200
 *         return cmask
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.mask2files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_file_idx);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1208
 *         return file_idx
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_65mask2filemasks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_65mask2filemasks = {"mask2filemasks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_65mask2filemasks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_65mask2filemasks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_cmask = 0;
  PyArrayObject *__pyx_v_file_idx = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mask2filemasks (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_cmask,&__pyx_mstate_global->__pyx_n_u_file_idx,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1208, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1208, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1208, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "mask2filemasks", 0) < 0) __PYX_ERR(0, 1208, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("mask2filemasks", 1, 2, 2, i); __PYX_ERR(0, 1208, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1208, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1208, __pyx_L3_error)
    }
    __pyx_v_cmask = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[0]);
    __pyx_v_file_idx = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mask2filemasks", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1208, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.mask2filemasks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_cmask), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "cmask", 0))) __PYX_ERR(0, 1211, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_file_idx), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "file_idx", 0))) __PYX_ERR(0, 1211, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_64mask2filemasks(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_cmask, __pyx_v_file_idx);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_64mask2filemasks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_cmask, PyArrayObject *__pyx_v_file_idx) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_fmask = 0;
  __pyx_t_5numpy_int32_t __pyx_v_fid;
  PyArrayObject *__pyx_v_file_masks = 0;
  CYTHON_UNUSED int __pyx_v_i;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_idx;
  __Pyx_Buffer __pyx_pybuffer_file_idx;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_masks;
  __Pyx_Buffer __pyx_pybuffer_file_masks;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *(*__pyx_t_16)(PyObject *);
  __pyx_t_5numpy_int32_t __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mask2filemasks", 0);
  __pyx_pybuffer_file_masks.pybuffer.buf = NULL;
  __pyx_pybuffer_file_masks.refcount = 0;
  __pyx_pybuffernd_file_masks.data = NULL;
  __pyx_pybuffernd_file_masks.rcbuffer = &__pyx_pybuffer_file_masks;
  __pyx_pybuffer_file_idx.pybuffer.buf = NULL;
  __pyx_pybuffer_file_idx.refcount = 0;
  __pyx_pybuffernd_file_idx.data = NULL;
  __pyx_pybuffernd_file_idx.rcbuffer = &__pyx_pybuffer_file_idx;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1208, __pyx_L1_error)
  }
  __pyx_pybuffernd_file_idx.diminfo[0].strides = __pyx_pybuffernd_file_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_idx.diminfo[0].shape = __pyx_pybuffernd_file_idx.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":1217
 *         cdef int i
 *         # Get bitmasks for parts of files touching the selector
 *         file_masks = np.array([BoolArrayCollection() for i in range(len(file_idx))],             # <<<<<<<<<<<<<<
 *                               dtype="object")
 *         for i, (fid, fmask) in enumerate(zip(file_idx,file_masks)):
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyObject_Length(((PyObject *)__pyx_v_file_idx)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1217, __pyx_L1_error)
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;
    __pyx_t_9 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
    __pyx_t_10 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
    __pyx_t_11 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
      __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (1-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1217, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_8);
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_DECREF((PyObject *)__pyx_t_8); __pyx_t_8 = 0;
  }
  __pyx_t_11 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_11 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_t_3};
    __pyx_t_8 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_object_2, __pyx_t_8, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1217, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_4, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1217, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_masks.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_masks.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_object, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_12, &__pyx_t_13, &__pyx_t_14);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_masks.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_masks, &__Pyx_TypeInfo_object, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_14);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_12, __pyx_t_13, __pyx_t_14);
      }
      __pyx_t_12 = __pyx_t_13 = __pyx_t_14 = 0;
    }
    __pyx_pybuffernd_file_masks.diminfo[0].strides = __pyx_pybuffernd_file_masks.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_masks.diminfo[0].shape = __pyx_pybuffernd_file_masks.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1217, __pyx_L1_error)
  }
  __pyx_v_file_masks = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1219
 *         file_masks = np.array([BoolArrayCollection() for i in range(len(file_idx))],
 *                               dtype="object")
 *         for i, (fid, fmask) in enumerate(zip(file_idx,file_masks)):             # <<<<<<<<<<<<<<
 *             self.bitmasks._logicaland(<np.uint32_t> fid, cmask, fmask)
 *         return file_masks
*/
  __pyx_t_7 = 0;
  __pyx_t_4 = NULL;
  __Pyx_INCREF(__pyx_builtin_zip);
  __pyx_t_8 = __pyx_builtin_zip; 
  __pyx_t_11 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, ((PyObject *)__pyx_v_file_idx), ((PyObject *)__pyx_v_file_masks)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_11, (3-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_8 = __pyx_t_1; __Pyx_INCREF(__pyx_t_8);
    __pyx_t_5 = 0;
    __pyx_t_15 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1219, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_15 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_8); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1219, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_15)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_8);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1219, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        __pyx_t_1 = __Pyx_PyList_GetItemRef(__pyx_t_8, __pyx_t_5);
        ++__pyx_t_5;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_8);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1219, __pyx_L1_error)
          #endif
          if (__pyx_t_5 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_5));
        #else
        __pyx_t_1 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_5);
        #endif
        ++__pyx_t_5;
      }
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1219, __pyx_L1_error)
    } else {
      __pyx_t_1 = __pyx_t_15(__pyx_t_8);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1219, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_1);
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1219, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_3);
      } else {
        __pyx_t_4 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1219, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1219, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_3);
      }
      #else
      __pyx_t_4 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1219, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1219, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1219, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_16 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2);
      index = 0; __pyx_t_4 = __pyx_t_16(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_3 = __pyx_t_16(__pyx_t_2); if (unlikely(!__pyx_t_3)) goto __pyx_L7_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_2), 2) < 0) __PYX_ERR(0, 1219, __pyx_L1_error)
      __pyx_t_16 = NULL;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L8_unpacking_done;
      __pyx_L7_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_16 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1219, __pyx_L1_error)
      __pyx_L8_unpacking_done:;
    }
    __pyx_t_17 = __Pyx_PyLong_As_npy_int32(__pyx_t_4); if (unlikely((__pyx_t_17 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1219, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection))))) __PYX_ERR(0, 1219, __pyx_L1_error)
    __pyx_v_fid = __pyx_t_17;
    __Pyx_XDECREF_SET(__pyx_v_fmask, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_3));
    __pyx_t_3 = 0;
    __pyx_v_i = __pyx_t_7;
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "yt/geometry/particle_oct_container.pyx":1220
 *                               dtype="object")
 *         for i, (fid, fmask) in enumerate(zip(file_idx,file_masks)):
 *             self.bitmasks._logicaland(<np.uint32_t> fid, cmask, fmask)             # <<<<<<<<<<<<<<
 *         return file_masks
 * 
*/
    ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_logicaland(__pyx_v_self->bitmasks, ((__pyx_t_5numpy_uint32_t)__pyx_v_fid), __pyx_v_cmask, __pyx_v_fmask); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1220, __pyx_L1_error)

    /* "yt/geometry/particle_oct_container.pyx":1219
 *         file_masks = np.array([BoolArrayCollection() for i in range(len(file_idx))],
 *                               dtype="object")
 *         for i, (fid, fmask) in enumerate(zip(file_idx,file_masks)):             # <<<<<<<<<<<<<<
 *             self.bitmasks._logicaland(<np.uint32_t> fid, cmask, fmask)
 *         return file_masks
*/
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1221
 *         for i, (fid, fmask) in enumerate(zip(file_idx,file_masks)):
 *             self.bitmasks._logicaland(<np.uint32_t> fid, cmask, fmask)
 *         return file_masks             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_file_masks);
  __pyx_r = ((PyObject *)__pyx_v_file_masks);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1208
 *         return file_idx
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_masks.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.mask2filemasks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_masks.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fmask);
  __Pyx_XDECREF((PyObject *)__pyx_v_file_masks);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1223
 *         return file_masks
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_67filemasks2addfiles(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_67filemasks2addfiles = {"filemasks2addfiles", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_67filemasks2addfiles, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_67filemasks2addfiles(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_file_masks = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("filemasks2addfiles (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_file_masks,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1223, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1223, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "filemasks2addfiles", 0) < 0) __PYX_ERR(0, 1223, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("filemasks2addfiles", 1, 1, 1, i); __PYX_ERR(0, 1223, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1223, __pyx_L3_error)
    }
    __pyx_v_file_masks = ((PyArrayObject *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("filemasks2addfiles", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1223, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.filemasks2addfiles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_file_masks), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "file_masks", 0))) __PYX_ERR(0, 1226, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_66filemasks2addfiles(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_file_masks);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_66filemasks2addfiles(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyArrayObject *__pyx_v_file_masks) {
  PyObject *__pyx_v_addfile_idx = 0;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_fmask = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_masks;
  __Pyx_Buffer __pyx_pybuffer_file_masks;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  size_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filemasks2addfiles", 0);
  __pyx_pybuffer_file_masks.pybuffer.buf = NULL;
  __pyx_pybuffer_file_masks.refcount = 0;
  __pyx_pybuffernd_file_masks.data = NULL;
  __pyx_pybuffernd_file_masks.rcbuffer = &__pyx_pybuffer_file_masks;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_masks.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_masks, &__Pyx_TypeInfo_object, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1223, __pyx_L1_error)
  }
  __pyx_pybuffernd_file_masks.diminfo[0].strides = __pyx_pybuffernd_file_masks.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_masks.diminfo[0].shape = __pyx_pybuffernd_file_masks.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":1228
 *     def filemasks2addfiles(self, np.ndarray[object, ndim=1] file_masks):
 *         cdef list addfile_idx
 *         addfile_idx = len(file_masks)*[None]             # <<<<<<<<<<<<<<
 *         for i, fmask in enumerate(file_masks):
 *             addfile_idx[i] = self.mask_to_files(fmask).astype('uint32')
*/
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_file_masks)); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1228, __pyx_L1_error)
  __pyx_t_2 = PyList_New(1 * ((__pyx_t_1<0) ? 0:__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_1; __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_2, __pyx_temp, Py_None) != (0)) __PYX_ERR(0, 1228, __pyx_L1_error);
    }
  }
  __pyx_v_addfile_idx = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1229
 *         cdef list addfile_idx
 *         addfile_idx = len(file_masks)*[None]
 *         for i, fmask in enumerate(file_masks):             # <<<<<<<<<<<<<<
 *             addfile_idx[i] = self.mask_to_files(fmask).astype('uint32')
 *         return addfile_idx
*/
  __Pyx_INCREF(__pyx_mstate_global->__pyx_int_0);
  __pyx_t_2 = __pyx_mstate_global->__pyx_int_0;
  if (likely(PyList_CheckExact(((PyObject *)__pyx_v_file_masks))) || PyTuple_CheckExact(((PyObject *)__pyx_v_file_masks))) {
    __pyx_t_3 = ((PyObject *)__pyx_v_file_masks); __Pyx_INCREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(((PyObject *)__pyx_v_file_masks)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1229, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1229, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_1);
        ++__pyx_t_1;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1229, __pyx_L1_error)
          #endif
          if (__pyx_t_1 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1));
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_1);
        #endif
        ++__pyx_t_1;
      }
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1229, __pyx_L1_error)
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1229, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_fmask, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_5 = __Pyx_PyLong_AddObjC(__pyx_t_2, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1230
 *         addfile_idx = len(file_masks)*[None]
 *         for i, fmask in enumerate(file_masks):
 *             addfile_idx[i] = self.mask_to_files(fmask).astype('uint32')             # <<<<<<<<<<<<<<
 *         return addfile_idx
 * 
*/
    __pyx_t_8 = ((PyObject *)__pyx_v_self);
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_9 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_fmask};
      __pyx_t_7 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_mask_to_files, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
    }
    __pyx_t_6 = __pyx_t_7;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_9 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_mstate_global->__pyx_n_u_uint32};
      __pyx_t_5 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (unlikely(__pyx_v_addfile_idx == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1230, __pyx_L1_error)
    }
    if (unlikely((PyObject_SetItem(__pyx_v_addfile_idx, __pyx_v_i, __pyx_t_5) < 0))) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1229
 *         cdef list addfile_idx
 *         addfile_idx = len(file_masks)*[None]
 *         for i, fmask in enumerate(file_masks):             # <<<<<<<<<<<<<<
 *             addfile_idx[i] = self.mask_to_files(fmask).astype('uint32')
 *         return addfile_idx
*/
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1231
 *         for i, fmask in enumerate(file_masks):
 *             addfile_idx[i] = self.mask_to_files(fmask).astype('uint32')
 *         return addfile_idx             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_addfile_idx);
  __pyx_r = __pyx_v_addfile_idx;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1223
 *         return file_masks
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_masks.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.filemasks2addfiles", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_masks.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_addfile_idx);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_fmask);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1233
 *         return addfile_idx
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_69identify_file_masks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_69identify_file_masks = {"identify_file_masks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_69identify_file_masks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_69identify_file_masks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("identify_file_masks (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_selector,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1233, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1233, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "identify_file_masks", 0) < 0) __PYX_ERR(0, 1233, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("identify_file_masks", 1, 1, 1, i); __PYX_ERR(0, 1233, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1233, __pyx_L3_error)
    }
    __pyx_v_selector = ((struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("identify_file_masks", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1233, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.identify_file_masks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_selector), __pyx_mstate_global->__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject, 1, "selector", 0))) __PYX_ERR(0, 1236, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_68identify_file_masks(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_selector);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_68identify_file_masks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_cmask = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_fmask = 0;
  __pyx_t_5numpy_int32_t __pyx_v_fid;
  PyArrayObject *__pyx_v_file_masks = 0;
  PyArrayObject *__pyx_v_file_idx = 0;
  PyObject *__pyx_v_addfile_idx = 0;
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_morton_selector = 0;
  PyObject *__pyx_v_i = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_idx;
  __Pyx_Buffer __pyx_pybuffer_file_idx;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_masks;
  __Pyx_Buffer __pyx_pybuffer_file_masks;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *(*__pyx_t_15)(PyObject *);
  PyObject *(*__pyx_t_16)(PyObject *);
  __pyx_t_5numpy_int32_t __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("identify_file_masks", 0);
  __pyx_pybuffer_file_masks.pybuffer.buf = NULL;
  __pyx_pybuffer_file_masks.refcount = 0;
  __pyx_pybuffernd_file_masks.data = NULL;
  __pyx_pybuffernd_file_masks.rcbuffer = &__pyx_pybuffer_file_masks;
  __pyx_pybuffer_file_idx.pybuffer.buf = NULL;
  __pyx_pybuffer_file_idx.refcount = 0;
  __pyx_pybuffernd_file_idx.data = NULL;
  __pyx_pybuffernd_file_idx.rcbuffer = &__pyx_pybuffer_file_idx;

  /* "yt/geometry/particle_oct_container.pyx":1237
 *     @cython.cdivision(True)
 *     def identify_file_masks(self, SelectorObject selector):
 *         cdef BoolArrayCollection cmask = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         cdef BoolArrayCollection fmask
 *         cdef np.int32_t fid
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1237, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_cmask = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1245
 *         # Get bitmask for selector
 *         cdef ParticleBitmapSelector morton_selector
 *         morton_selector = ParticleBitmapSelector(selector, self, ngz=0)             # <<<<<<<<<<<<<<
 *         morton_selector.fill_masks(cmask)
 *         # Get bitmasks for parts of files touching the selector
*/
  __pyx_t_3 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector);
  __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[3 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, ((PyObject *)__pyx_v_selector), ((PyObject *)__pyx_v_self)};
    __pyx_t_5 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_ngz, __pyx_mstate_global->__pyx_int_0, __pyx_t_5, __pyx_callargs+3, 0) < 0) __PYX_ERR(0, 1245, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_2, __pyx_callargs+__pyx_t_4, (3-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1245, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_morton_selector = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1246
 *         cdef ParticleBitmapSelector morton_selector
 *         morton_selector = ParticleBitmapSelector(selector, self, ngz=0)
 *         morton_selector.fill_masks(cmask)             # <<<<<<<<<<<<<<
 *         # Get bitmasks for parts of files touching the selector
 *         file_idx = self.mask_to_files(cmask)
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_morton_selector);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_cmask)};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_fill_masks, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1248
 *         morton_selector.fill_masks(cmask)
 *         # Get bitmasks for parts of files touching the selector
 *         file_idx = self.mask_to_files(cmask)             # <<<<<<<<<<<<<<
 *         file_masks = np.array([BoolArrayCollection() for i in range(len(file_idx))],
 *                               dtype="object")
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_cmask)};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_mask_to_files, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1248, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_idx.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_file_idx.diminfo[0].strides = __pyx_pybuffernd_file_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_idx.diminfo[0].shape = __pyx_pybuffernd_file_idx.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1248, __pyx_L1_error)
  }
  __pyx_v_file_idx = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1249
 *         # Get bitmasks for parts of files touching the selector
 *         file_idx = self.mask_to_files(cmask)
 *         file_masks = np.array([BoolArrayCollection() for i in range(len(file_idx))],             # <<<<<<<<<<<<<<
 *                               dtype="object")
 *         addfile_idx = len(file_idx)*[None]
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_11 = NULL;
  __Pyx_INCREF(__pyx_builtin_range);
  __pyx_t_12 = __pyx_builtin_range; 
  __pyx_t_13 = PyObject_Length(((PyObject *)__pyx_v_file_idx)); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1249, __pyx_L1_error)
  __pyx_t_14 = PyLong_FromSsize_t(__pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_14};
    __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
  }
  if (likely(PyList_CheckExact(__pyx_t_10)) || PyTuple_CheckExact(__pyx_t_10)) {
    __pyx_t_12 = __pyx_t_10; __Pyx_INCREF(__pyx_t_12);
    __pyx_t_13 = 0;
    __pyx_t_15 = NULL;
  } else {
    __pyx_t_13 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_15 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_12); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1249, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  for (;;) {
    if (likely(!__pyx_t_15)) {
      if (likely(PyList_CheckExact(__pyx_t_12))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_12);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1249, __pyx_L1_error)
          #endif
          if (__pyx_t_13 >= __pyx_temp) break;
        }
        __pyx_t_10 = __Pyx_PyList_GetItemRef(__pyx_t_12, __pyx_t_13);
        ++__pyx_t_13;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_12);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1249, __pyx_L1_error)
          #endif
          if (__pyx_t_13 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_10 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_13));
        #else
        __pyx_t_10 = __Pyx_PySequence_ITEM(__pyx_t_12, __pyx_t_13);
        #endif
        ++__pyx_t_13;
      }
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1249, __pyx_L1_error)
    } else {
      __pyx_t_10 = __pyx_t_15(__pyx_t_12);
      if (unlikely(!__pyx_t_10)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1249, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_10);
    __pyx_t_10 = 0;
    __pyx_t_14 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
    __pyx_t_11 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
    __pyx_t_4 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_14, NULL};
      __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1249, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_10);
    }
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 1249, __pyx_L1_error)
    __Pyx_DECREF((PyObject *)__pyx_t_10); __pyx_t_10 = 0;
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_4 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_4 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_t_5};
    __pyx_t_12 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_object_2, __pyx_t_12, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1249, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_12);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1249, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_masks.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_masks.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_object, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_masks.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_masks, &__Pyx_TypeInfo_object, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_7);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      }
      __pyx_t_9 = __pyx_t_8 = __pyx_t_7 = 0;
    }
    __pyx_pybuffernd_file_masks.diminfo[0].strides = __pyx_pybuffernd_file_masks.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_masks.diminfo[0].shape = __pyx_pybuffernd_file_masks.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1249, __pyx_L1_error)
  }
  __pyx_v_file_masks = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1251
 *         file_masks = np.array([BoolArrayCollection() for i in range(len(file_idx))],
 *                               dtype="object")
 *         addfile_idx = len(file_idx)*[None]             # <<<<<<<<<<<<<<
 *         for i, (fid, fmask) in enumerate(zip(file_idx,file_masks)):
 *             self.bitmasks._logicaland(<np.uint32_t> fid, cmask, fmask)
*/
  __pyx_t_13 = PyObject_Length(((PyObject *)__pyx_v_file_idx)); if (unlikely(__pyx_t_13 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1251, __pyx_L1_error)
  __pyx_t_1 = PyList_New(1 * ((__pyx_t_13<0) ? 0:__pyx_t_13)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_13; __pyx_temp++) {
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, __pyx_temp, Py_None) != (0)) __PYX_ERR(0, 1251, __pyx_L1_error);
    }
  }
  __pyx_v_addfile_idx = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1252
 *                               dtype="object")
 *         addfile_idx = len(file_idx)*[None]
 *         for i, (fid, fmask) in enumerate(zip(file_idx,file_masks)):             # <<<<<<<<<<<<<<
 *             self.bitmasks._logicaland(<np.uint32_t> fid, cmask, fmask)
 *             addfile_idx[i] = self.mask_to_files(fmask).astype('uint32')
*/
  __Pyx_INCREF(__pyx_mstate_global->__pyx_int_0);
  __pyx_t_1 = __pyx_mstate_global->__pyx_int_0;
  __pyx_t_12 = NULL;
  __Pyx_INCREF(__pyx_builtin_zip);
  __pyx_t_5 = __pyx_builtin_zip; 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_12, ((PyObject *)__pyx_v_file_idx), ((PyObject *)__pyx_v_file_masks)};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_4, (3-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5);
    __pyx_t_13 = 0;
    __pyx_t_15 = NULL;
  } else {
    __pyx_t_13 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_15 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1252, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_15)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1252, __pyx_L1_error)
          #endif
          if (__pyx_t_13 >= __pyx_temp) break;
        }
        __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_13);
        ++__pyx_t_13;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1252, __pyx_L1_error)
          #endif
          if (__pyx_t_13 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_13));
        #else
        __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_13);
        #endif
        ++__pyx_t_13;
      }
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1252, __pyx_L1_error)
    } else {
      __pyx_t_3 = __pyx_t_15(__pyx_t_5);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1252, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_3);
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1252, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 0);
        __Pyx_INCREF(__pyx_t_12);
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1);
        __Pyx_INCREF(__pyx_t_2);
      } else {
        __pyx_t_12 = __Pyx_PyList_GetItemRef(sequence, 0);
        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1252, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_12);
        __pyx_t_2 = __Pyx_PyList_GetItemRef(sequence, 1);
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1252, __pyx_L1_error)
        __Pyx_XGOTREF(__pyx_t_2);
      }
      #else
      __pyx_t_12 = __Pyx_PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_2 = __Pyx_PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1252, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_16 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
      index = 0; __pyx_t_12 = __pyx_t_16(__pyx_t_10); if (unlikely(!__pyx_t_12)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_12);
      index = 1; __pyx_t_2 = __pyx_t_16(__pyx_t_10); if (unlikely(!__pyx_t_2)) goto __pyx_L8_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_2);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_10), 2) < 0) __PYX_ERR(0, 1252, __pyx_L1_error)
      __pyx_t_16 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L9_unpacking_done;
      __pyx_L8_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_16 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1252, __pyx_L1_error)
      __pyx_L9_unpacking_done:;
    }
    __pyx_t_17 = __Pyx_PyLong_As_npy_int32(__pyx_t_12); if (unlikely((__pyx_t_17 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1252, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection))))) __PYX_ERR(0, 1252, __pyx_L1_error)
    __pyx_v_fid = __pyx_t_17;
    __Pyx_XDECREF_SET(__pyx_v_fmask, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_2));
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_3 = __Pyx_PyLong_AddObjC(__pyx_t_1, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1253
 *         addfile_idx = len(file_idx)*[None]
 *         for i, (fid, fmask) in enumerate(zip(file_idx,file_masks)):
 *             self.bitmasks._logicaland(<np.uint32_t> fid, cmask, fmask)             # <<<<<<<<<<<<<<
 *             addfile_idx[i] = self.mask_to_files(fmask).astype('uint32')
 *         return file_idx.astype('uint32'), file_masks, addfile_idx
*/
    ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmasks->__pyx_vtab)->_logicaland(__pyx_v_self->bitmasks, ((__pyx_t_5numpy_uint32_t)__pyx_v_fid), __pyx_v_cmask, __pyx_v_fmask); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1253, __pyx_L1_error)

    /* "yt/geometry/particle_oct_container.pyx":1254
 *         for i, (fid, fmask) in enumerate(zip(file_idx,file_masks)):
 *             self.bitmasks._logicaland(<np.uint32_t> fid, cmask, fmask)
 *             addfile_idx[i] = self.mask_to_files(fmask).astype('uint32')             # <<<<<<<<<<<<<<
 *         return file_idx.astype('uint32'), file_masks, addfile_idx
 * 
*/
    __pyx_t_10 = ((PyObject *)__pyx_v_self);
    __Pyx_INCREF(__pyx_t_10);
    __pyx_t_4 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, ((PyObject *)__pyx_v_fmask)};
      __pyx_t_12 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_mask_to_files, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
    }
    __pyx_t_2 = __pyx_t_12;
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_4 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_mstate_global->__pyx_n_u_uint32};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1254, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (unlikely(__pyx_v_addfile_idx == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1254, __pyx_L1_error)
    }
    if (unlikely((PyObject_SetItem(__pyx_v_addfile_idx, __pyx_v_i, __pyx_t_3) < 0))) __PYX_ERR(0, 1254, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1252
 *                               dtype="object")
 *         addfile_idx = len(file_idx)*[None]
 *         for i, (fid, fmask) in enumerate(zip(file_idx,file_masks)):             # <<<<<<<<<<<<<<
 *             self.bitmasks._logicaland(<np.uint32_t> fid, cmask, fmask)
 *             addfile_idx[i] = self.mask_to_files(fmask).astype('uint32')
*/
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1255
 *             self.bitmasks._logicaland(<np.uint32_t> fid, cmask, fmask)
 *             addfile_idx[i] = self.mask_to_files(fmask).astype('uint32')
 *         return file_idx.astype('uint32'), file_masks, addfile_idx             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = ((PyObject *)__pyx_v_file_idx);
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_mstate_global->__pyx_n_u_uint32};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1) != (0)) __PYX_ERR(0, 1255, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_file_masks);
  __Pyx_GIVEREF((PyObject *)__pyx_v_file_masks);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_file_masks)) != (0)) __PYX_ERR(0, 1255, __pyx_L1_error);
  __Pyx_INCREF(__pyx_v_addfile_idx);
  __Pyx_GIVEREF(__pyx_v_addfile_idx);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_addfile_idx) != (0)) __PYX_ERR(0, 1255, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1233
 *         return addfile_idx
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_masks.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.identify_file_masks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_masks.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cmask);
  __Pyx_XDECREF((PyObject *)__pyx_v_fmask);
  __Pyx_XDECREF((PyObject *)__pyx_v_file_masks);
  __Pyx_XDECREF((PyObject *)__pyx_v_file_idx);
  __Pyx_XDECREF(__pyx_v_addfile_idx);
  __Pyx_XDECREF((PyObject *)__pyx_v_morton_selector);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1257
 *         return file_idx.astype('uint32'), file_masks, addfile_idx
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_71identify_data_files(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_71identify_data_files = {"identify_data_files", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_71identify_data_files, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_71identify_data_files(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector = 0;
  int __pyx_v_ngz;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("identify_data_files (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_selector,&__pyx_mstate_global->__pyx_n_u_ngz,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1257, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1257, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1257, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "identify_data_files", 0) < 0) __PYX_ERR(0, 1257, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("identify_data_files", 0, 1, 2, i); __PYX_ERR(0, 1257, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1257, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1257, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_selector = ((struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *)values[0]);
    if (values[1]) {
      __pyx_v_ngz = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_ngz == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1260, __pyx_L3_error)
    } else {
      __pyx_v_ngz = ((int)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("identify_data_files", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1257, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.identify_data_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_selector), __pyx_mstate_global->__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject, 1, "selector", 0))) __PYX_ERR(0, 1260, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_70identify_data_files(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_selector, __pyx_v_ngz);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_70identify_data_files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector, int __pyx_v_ngz) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_cmask_s = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_cmask_g = 0;
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_morton_selector = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("identify_data_files", 0);

  /* "yt/geometry/particle_oct_container.pyx":1261
 *     @cython.cdivision(True)
 *     def identify_data_files(self, SelectorObject selector, int ngz = 0):
 *         cdef BoolArrayCollection cmask_s = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         cdef BoolArrayCollection cmask_g = BoolArrayCollection()
 *         # Find mask of selected morton indices
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1261, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_cmask_s = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1262
 *     def identify_data_files(self, SelectorObject selector, int ngz = 0):
 *         cdef BoolArrayCollection cmask_s = BoolArrayCollection()
 *         cdef BoolArrayCollection cmask_g = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         # Find mask of selected morton indices
 *         cdef ParticleBitmapSelector morton_selector
*/
  __pyx_t_3 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
  __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_4, (1-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1262, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_cmask_g = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1265
 *         # Find mask of selected morton indices
 *         cdef ParticleBitmapSelector morton_selector
 *         morton_selector = ParticleBitmapSelector(selector, self, ngz=ngz)             # <<<<<<<<<<<<<<
 *         morton_selector.fill_masks(cmask_s, cmask_g)
 *         return self.masks_to_files(cmask_s, cmask_g), (cmask_s, cmask_g)
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector); 
  __pyx_t_5 = __Pyx_PyLong_From_int(__pyx_v_ngz); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[3 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, ((PyObject *)__pyx_v_selector), ((PyObject *)__pyx_v_self)};
    __pyx_t_6 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_ngz, __pyx_t_5, __pyx_t_6, __pyx_callargs+3, 0) < 0) __PYX_ERR(0, 1265, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_3, __pyx_callargs+__pyx_t_4, (3-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1265, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_morton_selector = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1266
 *         cdef ParticleBitmapSelector morton_selector
 *         morton_selector = ParticleBitmapSelector(selector, self, ngz=ngz)
 *         morton_selector.fill_masks(cmask_s, cmask_g)             # <<<<<<<<<<<<<<
 *         return self.masks_to_files(cmask_s, cmask_g), (cmask_s, cmask_g)
 * 
*/
  __pyx_t_3 = ((PyObject *)__pyx_v_morton_selector);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_cmask_s), ((PyObject *)__pyx_v_cmask_g)};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_fill_masks, __pyx_callargs+__pyx_t_4, (3-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1266, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1267
 *         morton_selector = ParticleBitmapSelector(selector, self, ngz=ngz)
 *         morton_selector.fill_masks(cmask_s, cmask_g)
 *         return self.masks_to_files(cmask_s, cmask_g), (cmask_s, cmask_g)             # <<<<<<<<<<<<<<
 * 
 *     def mask_to_files(self, BoolArrayCollection mm_s):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = ((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, ((PyObject *)__pyx_v_cmask_s), ((PyObject *)__pyx_v_cmask_g)};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_masks_to_files, __pyx_callargs+__pyx_t_4, (3-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1267, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF((PyObject *)__pyx_v_cmask_s);
  __Pyx_GIVEREF((PyObject *)__pyx_v_cmask_s);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_cmask_s)) != (0)) __PYX_ERR(0, 1267, __pyx_L1_error);
  __Pyx_INCREF((PyObject *)__pyx_v_cmask_g);
  __Pyx_GIVEREF((PyObject *)__pyx_v_cmask_g);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_cmask_g)) != (0)) __PYX_ERR(0, 1267, __pyx_L1_error);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1) != (0)) __PYX_ERR(0, 1267, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3) != (0)) __PYX_ERR(0, 1267, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1257
 *         return file_idx.astype('uint32'), file_masks, addfile_idx
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.identify_data_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cmask_s);
  __Pyx_XDECREF((PyObject *)__pyx_v_cmask_g);
  __Pyx_XDECREF((PyObject *)__pyx_v_morton_selector);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1269
 *         return self.masks_to_files(cmask_s, cmask_g), (cmask_s, cmask_g)
 * 
 *     def mask_to_files(self, BoolArrayCollection mm_s):             # <<<<<<<<<<<<<<
 *         cdef FileBitmasks mm_d = self.bitmasks
 *         cdef np.uint32_t ifile
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_73mask_to_files(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_73mask_to_files = {"mask_to_files", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_73mask_to_files, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_73mask_to_files(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_s = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mask_to_files (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_mm_s,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1269, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1269, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "mask_to_files", 0) < 0) __PYX_ERR(0, 1269, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("mask_to_files", 1, 1, 1, i); __PYX_ERR(0, 1269, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1269, __pyx_L3_error)
    }
    __pyx_v_mm_s = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mask_to_files", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1269, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.mask_to_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mm_s), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "mm_s", 0))) __PYX_ERR(0, 1269, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_72mask_to_files(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_mm_s);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_72mask_to_files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_s) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *__pyx_v_mm_d = 0;
  __pyx_t_5numpy_uint32_t __pyx_v_ifile;
  PyArrayObject *__pyx_v_file_mask_p = 0;
  PyArrayObject *__pyx_v_file_idx_p = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_idx_p;
  __Pyx_Buffer __pyx_pybuffer_file_idx_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_mask_p;
  __Pyx_Buffer __pyx_pybuffer_file_mask_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __pyx_t_5numpy_uint64_t __pyx_t_11;
  __pyx_t_5numpy_uint64_t __pyx_t_12;
  __pyx_t_5numpy_uint32_t __pyx_t_13;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mask_to_files", 0);
  __pyx_pybuffer_file_mask_p.pybuffer.buf = NULL;
  __pyx_pybuffer_file_mask_p.refcount = 0;
  __pyx_pybuffernd_file_mask_p.data = NULL;
  __pyx_pybuffernd_file_mask_p.rcbuffer = &__pyx_pybuffer_file_mask_p;
  __pyx_pybuffer_file_idx_p.pybuffer.buf = NULL;
  __pyx_pybuffer_file_idx_p.refcount = 0;
  __pyx_pybuffernd_file_idx_p.data = NULL;
  __pyx_pybuffernd_file_idx_p.rcbuffer = &__pyx_pybuffer_file_idx_p;

  /* "yt/geometry/particle_oct_container.pyx":1270
 * 
 *     def mask_to_files(self, BoolArrayCollection mm_s):
 *         cdef FileBitmasks mm_d = self.bitmasks             # <<<<<<<<<<<<<<
 *         cdef np.uint32_t ifile
 *         cdef np.ndarray[np.uint8_t, ndim=1] file_mask_p
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->bitmasks);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_mm_d = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1273
 *         cdef np.uint32_t ifile
 *         cdef np.ndarray[np.uint8_t, ndim=1] file_mask_p
 *         file_mask_p = np.zeros(self.nfiles, dtype="uint8")             # <<<<<<<<<<<<<<
 *         # Compare with mask of particles
 *         for ifile in range(self.nfiles):
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->nfiles); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_t_3};
    __pyx_t_6 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint8, __pyx_t_6, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1273, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1273, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_mask_p, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_file_mask_p.diminfo[0].strides = __pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_mask_p.diminfo[0].shape = __pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1273, __pyx_L1_error)
  }
  __pyx_v_file_mask_p = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1275
 *         file_mask_p = np.zeros(self.nfiles, dtype="uint8")
 *         # Compare with mask of particles
 *         for ifile in range(self.nfiles):             # <<<<<<<<<<<<<<
 *             # Only continue if the file is not already selected
 *             if file_mask_p[ifile] == 0:
*/
  __pyx_t_11 = __pyx_v_self->nfiles;
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_ifile = __pyx_t_13;

    /* "yt/geometry/particle_oct_container.pyx":1277
 *         for ifile in range(self.nfiles):
 *             # Only continue if the file is not already selected
 *             if file_mask_p[ifile] == 0:             # <<<<<<<<<<<<<<
 *                 if mm_d._intersects(ifile, mm_s):
 *                     file_mask_p[ifile] = 1
*/
    __pyx_t_5 = __pyx_v_ifile;
    __pyx_t_7 = -1;
    if (unlikely(__pyx_t_5 >= (size_t)__pyx_pybuffernd_file_mask_p.diminfo[0].shape)) __pyx_t_7 = 0;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      __PYX_ERR(0, 1277, __pyx_L1_error)
    }
    __pyx_t_14 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_file_mask_p.diminfo[0].strides)) == 0);
    if (__pyx_t_14) {

      /* "yt/geometry/particle_oct_container.pyx":1278
 *             # Only continue if the file is not already selected
 *             if file_mask_p[ifile] == 0:
 *                 if mm_d._intersects(ifile, mm_s):             # <<<<<<<<<<<<<<
 *                     file_mask_p[ifile] = 1
 *         cdef np.ndarray[np.int32_t, ndim=1] file_idx_p
*/
      __pyx_t_14 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_mm_d->__pyx_vtab)->_intersects(__pyx_v_mm_d, __pyx_v_ifile, __pyx_v_mm_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1278, __pyx_L1_error)
      if (__pyx_t_14) {

        /* "yt/geometry/particle_oct_container.pyx":1279
 *             if file_mask_p[ifile] == 0:
 *                 if mm_d._intersects(ifile, mm_s):
 *                     file_mask_p[ifile] = 1             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.int32_t, ndim=1] file_idx_p
 *         file_idx_p = np.where(file_mask_p)[0].astype('int32')
*/
        __pyx_t_5 = __pyx_v_ifile;
        __pyx_t_7 = -1;
        if (unlikely(__pyx_t_5 >= (size_t)__pyx_pybuffernd_file_mask_p.diminfo[0].shape)) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1279, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_file_mask_p.diminfo[0].strides) = 1;

        /* "yt/geometry/particle_oct_container.pyx":1278
 *             # Only continue if the file is not already selected
 *             if file_mask_p[ifile] == 0:
 *                 if mm_d._intersects(ifile, mm_s):             # <<<<<<<<<<<<<<
 *                     file_mask_p[ifile] = 1
 *         cdef np.ndarray[np.int32_t, ndim=1] file_idx_p
*/
      }

      /* "yt/geometry/particle_oct_container.pyx":1277
 *         for ifile in range(self.nfiles):
 *             # Only continue if the file is not already selected
 *             if file_mask_p[ifile] == 0:             # <<<<<<<<<<<<<<
 *                 if mm_d._intersects(ifile, mm_s):
 *                     file_mask_p[ifile] = 1
*/
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":1281
 *                     file_mask_p[ifile] = 1
 *         cdef np.ndarray[np.int32_t, ndim=1] file_idx_p
 *         file_idx_p = np.where(file_mask_p)[0].astype('int32')             # <<<<<<<<<<<<<<
 *         return file_idx_p.astype('uint32')
 * 
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_where); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_15);
    assert(__pyx_t_3);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_15);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_15, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_file_mask_p)};
    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
  }
  __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_4 = __pyx_t_15;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_int32};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1281, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1281, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_idx_p, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      }
      __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
    }
    __pyx_pybuffernd_file_idx_p.diminfo[0].strides = __pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_idx_p.diminfo[0].shape = __pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1281, __pyx_L1_error)
  }
  __pyx_v_file_idx_p = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1282
 *         cdef np.ndarray[np.int32_t, ndim=1] file_idx_p
 *         file_idx_p = np.where(file_mask_p)[0].astype('int32')
 *         return file_idx_p.astype('uint32')             # <<<<<<<<<<<<<<
 * 
 *     def masks_to_files(self, BoolArrayCollection mm_s, BoolArrayCollection mm_g):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_15 = ((PyObject *)__pyx_v_file_idx_p);
  __Pyx_INCREF(__pyx_t_15);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_mstate_global->__pyx_n_u_uint32};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1269
 *         return self.masks_to_files(cmask_s, cmask_g), (cmask_s, cmask_g)
 * 
 *     def mask_to_files(self, BoolArrayCollection mm_s):             # <<<<<<<<<<<<<<
 *         cdef FileBitmasks mm_d = self.bitmasks
 *         cdef np.uint32_t ifile
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_15);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.mask_to_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mm_d);
  __Pyx_XDECREF((PyObject *)__pyx_v_file_mask_p);
  __Pyx_XDECREF((PyObject *)__pyx_v_file_idx_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1284
 *         return file_idx_p.astype('uint32')
 * 
 *     def masks_to_files(self, BoolArrayCollection mm_s, BoolArrayCollection mm_g):             # <<<<<<<<<<<<<<
 *         cdef FileBitmasks mm_d = self.bitmasks
 *         cdef np.uint32_t ifile
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_75masks_to_files(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_75masks_to_files = {"masks_to_files", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_75masks_to_files, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_75masks_to_files(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_s = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_g = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("masks_to_files (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_mm_s,&__pyx_mstate_global->__pyx_n_u_mm_g,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1284, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1284, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1284, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "masks_to_files", 0) < 0) __PYX_ERR(0, 1284, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("masks_to_files", 1, 2, 2, i); __PYX_ERR(0, 1284, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1284, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1284, __pyx_L3_error)
    }
    __pyx_v_mm_s = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[0]);
    __pyx_v_mm_g = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("masks_to_files", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1284, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.masks_to_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mm_s), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "mm_s", 0))) __PYX_ERR(0, 1284, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mm_g), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "mm_g", 0))) __PYX_ERR(0, 1284, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_74masks_to_files(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_mm_s, __pyx_v_mm_g);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_74masks_to_files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_g) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *__pyx_v_mm_d = 0;
  __pyx_t_5numpy_uint32_t __pyx_v_ifile;
  PyArrayObject *__pyx_v_file_mask_p = 0;
  PyArrayObject *__pyx_v_file_mask_g = 0;
  PyArrayObject *__pyx_v_file_idx_p = 0;
  PyArrayObject *__pyx_v_file_idx_g = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_idx_g;
  __Pyx_Buffer __pyx_pybuffer_file_idx_g;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_idx_p;
  __Pyx_Buffer __pyx_pybuffer_file_idx_p;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_mask_g;
  __Pyx_Buffer __pyx_pybuffer_file_mask_g;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_mask_p;
  __Pyx_Buffer __pyx_pybuffer_file_mask_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __pyx_t_5numpy_uint64_t __pyx_t_11;
  __pyx_t_5numpy_uint64_t __pyx_t_12;
  __pyx_t_5numpy_uint32_t __pyx_t_13;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("masks_to_files", 0);
  __pyx_pybuffer_file_mask_p.pybuffer.buf = NULL;
  __pyx_pybuffer_file_mask_p.refcount = 0;
  __pyx_pybuffernd_file_mask_p.data = NULL;
  __pyx_pybuffernd_file_mask_p.rcbuffer = &__pyx_pybuffer_file_mask_p;
  __pyx_pybuffer_file_mask_g.pybuffer.buf = NULL;
  __pyx_pybuffer_file_mask_g.refcount = 0;
  __pyx_pybuffernd_file_mask_g.data = NULL;
  __pyx_pybuffernd_file_mask_g.rcbuffer = &__pyx_pybuffer_file_mask_g;
  __pyx_pybuffer_file_idx_p.pybuffer.buf = NULL;
  __pyx_pybuffer_file_idx_p.refcount = 0;
  __pyx_pybuffernd_file_idx_p.data = NULL;
  __pyx_pybuffernd_file_idx_p.rcbuffer = &__pyx_pybuffer_file_idx_p;
  __pyx_pybuffer_file_idx_g.pybuffer.buf = NULL;
  __pyx_pybuffer_file_idx_g.refcount = 0;
  __pyx_pybuffernd_file_idx_g.data = NULL;
  __pyx_pybuffernd_file_idx_g.rcbuffer = &__pyx_pybuffer_file_idx_g;

  /* "yt/geometry/particle_oct_container.pyx":1285
 * 
 *     def masks_to_files(self, BoolArrayCollection mm_s, BoolArrayCollection mm_g):
 *         cdef FileBitmasks mm_d = self.bitmasks             # <<<<<<<<<<<<<<
 *         cdef np.uint32_t ifile
 *         cdef np.ndarray[np.uint8_t, ndim=1] file_mask_p
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->bitmasks);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_mm_d = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1289
 *         cdef np.ndarray[np.uint8_t, ndim=1] file_mask_p
 *         cdef np.ndarray[np.uint8_t, ndim=1] file_mask_g
 *         file_mask_p = np.zeros(self.nfiles, dtype="uint8")             # <<<<<<<<<<<<<<
 *         file_mask_g = np.zeros(self.nfiles, dtype="uint8")
 *         # Compare with mask of particles
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->nfiles); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_t_3};
    __pyx_t_6 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint8, __pyx_t_6, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1289, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1289, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_mask_p, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_file_mask_p.diminfo[0].strides = __pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_mask_p.diminfo[0].shape = __pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1289, __pyx_L1_error)
  }
  __pyx_v_file_mask_p = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1290
 *         cdef np.ndarray[np.uint8_t, ndim=1] file_mask_g
 *         file_mask_p = np.zeros(self.nfiles, dtype="uint8")
 *         file_mask_g = np.zeros(self.nfiles, dtype="uint8")             # <<<<<<<<<<<<<<
 *         # Compare with mask of particles
 *         for ifile in range(self.nfiles):
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->nfiles); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_4);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_4, __pyx_t_6};
    __pyx_t_2 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint8, __pyx_t_2, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1290, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1290, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_mask_g, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      }
      __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
    }
    __pyx_pybuffernd_file_mask_g.diminfo[0].strides = __pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_mask_g.diminfo[0].shape = __pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1290, __pyx_L1_error)
  }
  __pyx_v_file_mask_g = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1292
 *         file_mask_g = np.zeros(self.nfiles, dtype="uint8")
 *         # Compare with mask of particles
 *         for ifile in range(self.nfiles):             # <<<<<<<<<<<<<<
 *             # Only continue if the file is not already selected
 *             if file_mask_p[ifile] == 0:
*/
  __pyx_t_11 = __pyx_v_self->nfiles;
  __pyx_t_12 = __pyx_t_11;
  for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
    __pyx_v_ifile = __pyx_t_13;

    /* "yt/geometry/particle_oct_container.pyx":1294
 *         for ifile in range(self.nfiles):
 *             # Only continue if the file is not already selected
 *             if file_mask_p[ifile] == 0:             # <<<<<<<<<<<<<<
 *                 if mm_d._intersects(ifile, mm_s):
 *                     file_mask_p[ifile] = 1
*/
    __pyx_t_5 = __pyx_v_ifile;
    __pyx_t_7 = -1;
    if (unlikely(__pyx_t_5 >= (size_t)__pyx_pybuffernd_file_mask_p.diminfo[0].shape)) __pyx_t_7 = 0;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      __PYX_ERR(0, 1294, __pyx_L1_error)
    }
    __pyx_t_14 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_file_mask_p.diminfo[0].strides)) == 0);
    if (__pyx_t_14) {

      /* "yt/geometry/particle_oct_container.pyx":1295
 *             # Only continue if the file is not already selected
 *             if file_mask_p[ifile] == 0:
 *                 if mm_d._intersects(ifile, mm_s):             # <<<<<<<<<<<<<<
 *                     file_mask_p[ifile] = 1
 *                     file_mask_g[ifile] = 0 # No intersection
*/
      __pyx_t_14 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_mm_d->__pyx_vtab)->_intersects(__pyx_v_mm_d, __pyx_v_ifile, __pyx_v_mm_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1295, __pyx_L1_error)
      if (__pyx_t_14) {

        /* "yt/geometry/particle_oct_container.pyx":1296
 *             if file_mask_p[ifile] == 0:
 *                 if mm_d._intersects(ifile, mm_s):
 *                     file_mask_p[ifile] = 1             # <<<<<<<<<<<<<<
 *                     file_mask_g[ifile] = 0 # No intersection
 *                 elif mm_d._intersects(ifile, mm_g):
*/
        __pyx_t_5 = __pyx_v_ifile;
        __pyx_t_7 = -1;
        if (unlikely(__pyx_t_5 >= (size_t)__pyx_pybuffernd_file_mask_p.diminfo[0].shape)) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1296, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_file_mask_p.diminfo[0].strides) = 1;

        /* "yt/geometry/particle_oct_container.pyx":1297
 *                 if mm_d._intersects(ifile, mm_s):
 *                     file_mask_p[ifile] = 1
 *                     file_mask_g[ifile] = 0 # No intersection             # <<<<<<<<<<<<<<
 *                 elif mm_d._intersects(ifile, mm_g):
 *                     file_mask_g[ifile] = 1
*/
        __pyx_t_5 = __pyx_v_ifile;
        __pyx_t_7 = -1;
        if (unlikely(__pyx_t_5 >= (size_t)__pyx_pybuffernd_file_mask_g.diminfo[0].shape)) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1297, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_file_mask_g.diminfo[0].strides) = 0;

        /* "yt/geometry/particle_oct_container.pyx":1295
 *             # Only continue if the file is not already selected
 *             if file_mask_p[ifile] == 0:
 *                 if mm_d._intersects(ifile, mm_s):             # <<<<<<<<<<<<<<
 *                     file_mask_p[ifile] = 1
 *                     file_mask_g[ifile] = 0 # No intersection
*/
        goto __pyx_L6;
      }

      /* "yt/geometry/particle_oct_container.pyx":1298
 *                     file_mask_p[ifile] = 1
 *                     file_mask_g[ifile] = 0 # No intersection
 *                 elif mm_d._intersects(ifile, mm_g):             # <<<<<<<<<<<<<<
 *                     file_mask_g[ifile] = 1
 *         cdef np.ndarray[np.int32_t, ndim=1] file_idx_p
*/
      __pyx_t_14 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_mm_d->__pyx_vtab)->_intersects(__pyx_v_mm_d, __pyx_v_ifile, __pyx_v_mm_g); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1298, __pyx_L1_error)
      if (__pyx_t_14) {

        /* "yt/geometry/particle_oct_container.pyx":1299
 *                     file_mask_g[ifile] = 0 # No intersection
 *                 elif mm_d._intersects(ifile, mm_g):
 *                     file_mask_g[ifile] = 1             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.int32_t, ndim=1] file_idx_p
 *         cdef np.ndarray[np.int32_t, ndim=1] file_idx_g
*/
        __pyx_t_5 = __pyx_v_ifile;
        __pyx_t_7 = -1;
        if (unlikely(__pyx_t_5 >= (size_t)__pyx_pybuffernd_file_mask_g.diminfo[0].shape)) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 1299, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_file_mask_g.diminfo[0].strides) = 1;

        /* "yt/geometry/particle_oct_container.pyx":1298
 *                     file_mask_p[ifile] = 1
 *                     file_mask_g[ifile] = 0 # No intersection
 *                 elif mm_d._intersects(ifile, mm_g):             # <<<<<<<<<<<<<<
 *                     file_mask_g[ifile] = 1
 *         cdef np.ndarray[np.int32_t, ndim=1] file_idx_p
*/
      }
      __pyx_L6:;

      /* "yt/geometry/particle_oct_container.pyx":1294
 *         for ifile in range(self.nfiles):
 *             # Only continue if the file is not already selected
 *             if file_mask_p[ifile] == 0:             # <<<<<<<<<<<<<<
 *                 if mm_d._intersects(ifile, mm_s):
 *                     file_mask_p[ifile] = 1
*/
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":1302
 *         cdef np.ndarray[np.int32_t, ndim=1] file_idx_p
 *         cdef np.ndarray[np.int32_t, ndim=1] file_idx_g
 *         file_idx_p = np.where(file_mask_p)[0].astype('int32')             # <<<<<<<<<<<<<<
 *         file_idx_g = np.where(file_mask_g)[0].astype('int32')
 *         return file_idx_p.astype('uint32'), file_idx_g.astype('uint32')
*/
  __pyx_t_6 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_where); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_15);
    assert(__pyx_t_6);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_15);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_15, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, ((PyObject *)__pyx_v_file_mask_p)};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_t_15 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_t_15;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_n_u_int32};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1302, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_idx_p, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_file_idx_p.diminfo[0].strides = __pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_idx_p.diminfo[0].shape = __pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1302, __pyx_L1_error)
  }
  __pyx_v_file_idx_p = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1303
 *         cdef np.ndarray[np.int32_t, ndim=1] file_idx_g
 *         file_idx_p = np.where(file_mask_p)[0].astype('int32')
 *         file_idx_g = np.where(file_mask_g)[0].astype('int32')             # <<<<<<<<<<<<<<
 *         return file_idx_p.astype('uint32'), file_idx_g.astype('uint32')
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_where); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_file_mask_g)};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_15 = __pyx_t_4;
  __Pyx_INCREF(__pyx_t_15);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_mstate_global->__pyx_n_u_int32};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1303, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx_g.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_idx_g.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_idx_g.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_idx_g, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      }
      __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
    }
    __pyx_pybuffernd_file_idx_g.diminfo[0].strides = __pyx_pybuffernd_file_idx_g.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_idx_g.diminfo[0].shape = __pyx_pybuffernd_file_idx_g.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1303, __pyx_L1_error)
  }
  __pyx_v_file_idx_g = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1304
 *         file_idx_p = np.where(file_mask_p)[0].astype('int32')
 *         file_idx_g = np.where(file_mask_g)[0].astype('int32')
 *         return file_idx_p.astype('uint32'), file_idx_g.astype('uint32')             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((PyObject *)__pyx_v_file_idx_p);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_uint32};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_15 = ((PyObject *)__pyx_v_file_idx_g);
  __Pyx_INCREF(__pyx_t_15);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_mstate_global->__pyx_n_u_uint32};
    __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_astype, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_t_15 = PyTuple_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_1) != (0)) __PYX_ERR(0, 1304, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_4) != (0)) __PYX_ERR(0, 1304, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_15;
  __pyx_t_15 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1284
 *         return file_idx_p.astype('uint32')
 * 
 *     def masks_to_files(self, BoolArrayCollection mm_s, BoolArrayCollection mm_g):             # <<<<<<<<<<<<<<
 *         cdef FileBitmasks mm_d = self.bitmasks
 *         cdef np.uint32_t ifile
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_15);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx_g.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.masks_to_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx_g.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_idx_p.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mm_d);
  __Pyx_XDECREF((PyObject *)__pyx_v_file_mask_p);
  __Pyx_XDECREF((PyObject *)__pyx_v_file_mask_g);
  __Pyx_XDECREF((PyObject *)__pyx_v_file_idx_p);
  __Pyx_XDECREF((PyObject *)__pyx_v_file_idx_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1306
 *         return file_idx_p.astype('uint32'), file_idx_g.astype('uint32')
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_77construct_octree(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_77construct_octree = {"construct_octree", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_77construct_octree, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_77construct_octree(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_io_handler = 0;
  PyObject *__pyx_v_data_files = 0;
  PyObject *__pyx_v_num_zones = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_selector_mask = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_base_mask = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[6] = {0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("construct_octree (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_index,&__pyx_mstate_global->__pyx_n_u_io_handler,&__pyx_mstate_global->__pyx_n_u_data_files,&__pyx_mstate_global->__pyx_n_u_num_zones,&__pyx_mstate_global->__pyx_n_u_selector_mask,&__pyx_mstate_global->__pyx_n_u_base_mask,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1306, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1306, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1306, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1306, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1306, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1306, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1306, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "construct_octree", 0) < 0) __PYX_ERR(0, 1306, __pyx_L3_error)

      /* "yt/geometry/particle_oct_container.pyx":1312
 *                          num_zones,
 *                          BoolArrayCollection selector_mask,
 *                          BoolArrayCollection base_mask = None):             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t total_pcount
 *         cdef np.uint64_t i, j, k
*/
      if (!values[5]) values[5] = __Pyx_NewRef((PyObject *)((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None));
      for (Py_ssize_t i = __pyx_nargs; i < 5; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("construct_octree", 0, 5, 6, i); __PYX_ERR(0, 1306, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  6:
        values[5] = __Pyx_ArgRef_FASTCALL(__pyx_args, 5);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[5])) __PYX_ERR(0, 1306, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  5:
        values[4] = __Pyx_ArgRef_FASTCALL(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1306, __pyx_L3_error)
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1306, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1306, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1306, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1306, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[5]) values[5] = __Pyx_NewRef((PyObject *)((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None));
    }
    __pyx_v_index = values[0];
    __pyx_v_io_handler = values[1];
    __pyx_v_data_files = values[2];
    __pyx_v_num_zones = values[3];
    __pyx_v_selector_mask = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[4]);
    __pyx_v_base_mask = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[5]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("construct_octree", 0, 5, 6, __pyx_nargs); __PYX_ERR(0, 1306, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.construct_octree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_selector_mask), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "selector_mask", 0))) __PYX_ERR(0, 1311, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_base_mask), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "base_mask", 0))) __PYX_ERR(0, 1312, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_76construct_octree(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v_index, __pyx_v_io_handler, __pyx_v_data_files, __pyx_v_num_zones, __pyx_v_selector_mask, __pyx_v_base_mask);

  /* "yt/geometry/particle_oct_container.pyx":1306
 *         return file_idx_p.astype('uint32'), file_idx_g.astype('uint32')
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_76construct_octree(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_io_handler, PyObject *__pyx_v_data_files, PyObject *__pyx_v_num_zones, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_selector_mask, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_base_mask) {
  __pyx_t_5numpy_uint64_t __pyx_v_total_pcount;
  __pyx_t_5numpy_uint64_t __pyx_v_i;
  __pyx_t_5numpy_uint64_t __pyx_v_j;
  __pyx_t_5numpy_uint64_t __pyx_v_k;
  int __pyx_v_ind[3];
  __pyx_t_5numpy_uint64_t __pyx_v_ind64[3];
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_octree = 0;
  __pyx_t_5numpy_uint64_t __pyx_v_mi;
  __pyx_t_5numpy_uint64_t __pyx_v_mi_root;
  PyArrayObject *__pyx_v_pos = 0;
  PyArrayObject *__pyx_v_pos32 = 0;
  PyArrayObject *__pyx_v_pos64 = 0;
  __pyx_t_5numpy_float64_t __pyx_v_ppos[3];
  __pyx_t_5numpy_float64_t __pyx_v_DLE[3];
  __pyx_t_5numpy_float64_t __pyx_v_DRE[3];
  CYTHON_UNUSED int __pyx_v_bitsize;
  PyArrayObject *__pyx_v_morton_ind = 0;
  __pyx_t_5numpy_uint64_t __pyx_v_nroot;
  __pyx_t_5numpy_uint64_t __pyx_v_croot;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array *__pyx_v_ewah_slct;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array *__pyx_v_ewah_base;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_iterator *__pyx_v_iter_set;
  __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_iterator *__pyx_v_iter_end;
  PyArrayObject *__pyx_v_slct_arr = 0;
  PyObject *__pyx_v_files_touched = NULL;
  PyObject *__pyx_v_data_file = NULL;
  __pyx_t_5numpy_uint64_t __pyx_v_base_pcount;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_morton_ind;
  __Pyx_Buffer __pyx_pybuffer_morton_ind;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pos32;
  __Pyx_Buffer __pyx_pybuffer_pos32;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_pos64;
  __Pyx_Buffer __pyx_pybuffer_pos64;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_slct_arr;
  __Pyx_Buffer __pyx_pybuffer_slct_arr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_t_12;
  __pyx_t_5numpy_int32_t __pyx_t_13;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  PyObject *(*__pyx_t_20)(PyObject *);
  Py_ssize_t __pyx_t_21;
  PyObject *(*__pyx_t_22)(PyObject *);
  PyArrayObject *__pyx_t_23 = NULL;
  PyArrayObject *__pyx_t_24 = NULL;
  npy_intp *__pyx_t_25;
  npy_intp __pyx_t_26;
  npy_intp __pyx_t_27;
  __pyx_t_5numpy_uint64_t __pyx_t_28;
  __pyx_t_5numpy_uint64_t __pyx_t_29;
  __pyx_t_5numpy_uint64_t __pyx_t_30;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("construct_octree", 0);
  __pyx_pybuffer_pos32.pybuffer.buf = NULL;
  __pyx_pybuffer_pos32.refcount = 0;
  __pyx_pybuffernd_pos32.data = NULL;
  __pyx_pybuffernd_pos32.rcbuffer = &__pyx_pybuffer_pos32;
  __pyx_pybuffer_pos64.pybuffer.buf = NULL;
  __pyx_pybuffer_pos64.refcount = 0;
  __pyx_pybuffernd_pos64.data = NULL;
  __pyx_pybuffernd_pos64.rcbuffer = &__pyx_pybuffer_pos64;
  __pyx_pybuffer_morton_ind.pybuffer.buf = NULL;
  __pyx_pybuffer_morton_ind.refcount = 0;
  __pyx_pybuffernd_morton_ind.data = NULL;
  __pyx_pybuffernd_morton_ind.rcbuffer = &__pyx_pybuffer_morton_ind;
  __pyx_pybuffer_slct_arr.pybuffer.buf = NULL;
  __pyx_pybuffer_slct_arr.refcount = 0;
  __pyx_pybuffernd_slct_arr.data = NULL;
  __pyx_pybuffernd_slct_arr.rcbuffer = &__pyx_pybuffer_slct_arr;

  /* "yt/geometry/particle_oct_container.pyx":1325
 *         cdef np.float64_t DLE[3]
 *         cdef np.float64_t DRE[3]
 *         cdef int bitsize = 0             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             DLE[i] = self.left_edge[i]
*/
  __pyx_v_bitsize = 0;

  /* "yt/geometry/particle_oct_container.pyx":1326
 *         cdef np.float64_t DRE[3]
 *         cdef int bitsize = 0
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             DLE[i] = self.left_edge[i]
 *             DRE[i] = self.right_edge[i]
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":1327
 *         cdef int bitsize = 0
 *         for i in range(3):
 *             DLE[i] = self.left_edge[i]             # <<<<<<<<<<<<<<
 *             DRE[i] = self.right_edge[i]
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_ind
*/
    (__pyx_v_DLE[__pyx_v_i]) = (__pyx_v_self->left_edge[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":1328
 *         for i in range(3):
 *             DLE[i] = self.left_edge[i]
 *             DRE[i] = self.right_edge[i]             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_ind
 *         # Determine cells that need to be added to the octree
*/
    (__pyx_v_DRE[__pyx_v_i]) = (__pyx_v_self->right_edge[__pyx_v_i]);
  }

  /* "yt/geometry/particle_oct_container.pyx":1331
 *         cdef np.ndarray[np.uint64_t, ndim=1] morton_ind
 *         # Determine cells that need to be added to the octree
 *         cdef np.uint64_t nroot = selector_mask._count_total()             # <<<<<<<<<<<<<<
 *         # Now we can actually create a sparse octree.
 *         octree = ParticleBitmapOctreeContainer(
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_v_selector_mask->__pyx_vtab)->_count_total(__pyx_v_selector_mask); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1331, __pyx_L1_error)
  __pyx_v_nroot = __pyx_t_1;

  /* "yt/geometry/particle_oct_container.pyx":1333
 *         cdef np.uint64_t nroot = selector_mask._count_total()
 *         # Now we can actually create a sparse octree.
 *         octree = ParticleBitmapOctreeContainer(             # <<<<<<<<<<<<<<
 *             (self.dims[0], self.dims[1], self.dims[2]),
 *             (self.left_edge[0], self.left_edge[1], self.left_edge[2]),
*/
  __pyx_t_3 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer);
  __pyx_t_4 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer); 

  /* "yt/geometry/particle_oct_container.pyx":1334
 *         # Now we can actually create a sparse octree.
 *         octree = ParticleBitmapOctreeContainer(
 *             (self.dims[0], self.dims[1], self.dims[2]),             # <<<<<<<<<<<<<<
 *             (self.left_edge[0], self.left_edge[1], self.left_edge[2]),
 *             (self.right_edge[0], self.right_edge[1], self.right_edge[2]),
*/
  __pyx_t_5 = __Pyx_PyLong_From_npy_int32((__pyx_v_self->dims[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyLong_From_npy_int32((__pyx_v_self->dims[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyLong_From_npy_int32((__pyx_v_self->dims[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5) != (0)) __PYX_ERR(0, 1334, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6) != (0)) __PYX_ERR(0, 1334, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7) != (0)) __PYX_ERR(0, 1334, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1335
 *         octree = ParticleBitmapOctreeContainer(
 *             (self.dims[0], self.dims[1], self.dims[2]),
 *             (self.left_edge[0], self.left_edge[1], self.left_edge[2]),             # <<<<<<<<<<<<<<
 *             (self.right_edge[0], self.right_edge[1], self.right_edge[2]),
 *             nroot, num_zones)
*/
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_self->left_edge[0])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->left_edge[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->left_edge[2])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7) != (0)) __PYX_ERR(0, 1335, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_6) != (0)) __PYX_ERR(0, 1335, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_5) != (0)) __PYX_ERR(0, 1335, __pyx_L1_error);
  __pyx_t_7 = 0;
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1336
 *             (self.dims[0], self.dims[1], self.dims[2]),
 *             (self.left_edge[0], self.left_edge[1], self.left_edge[2]),
 *             (self.right_edge[0], self.right_edge[1], self.right_edge[2]),             # <<<<<<<<<<<<<<
 *             nroot, num_zones)
 *         octree.n_ref = index.dataset.n_ref
*/
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->right_edge[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->right_edge[1])); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyFloat_FromDouble((__pyx_v_self->right_edge[2])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = PyTuple_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5) != (0)) __PYX_ERR(0, 1336, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6) != (0)) __PYX_ERR(0, 1336, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_7) != (0)) __PYX_ERR(0, 1336, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_7 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1337
 *             (self.left_edge[0], self.left_edge[1], self.left_edge[2]),
 *             (self.right_edge[0], self.right_edge[1], self.right_edge[2]),
 *             nroot, num_zones)             # <<<<<<<<<<<<<<
 *         octree.n_ref = index.dataset.n_ref
 *         octree.level_offset = self.index_order1
*/
  __pyx_t_7 = __Pyx_PyLong_From_npy_uint64(__pyx_v_nroot); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_11 = 1;
  {
    PyObject *__pyx_callargs[6] = {__pyx_t_3, __pyx_t_8, __pyx_t_9, __pyx_t_10, __pyx_t_7, __pyx_v_num_zones};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_11, (6-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_2);
  }
  __pyx_v_octree = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1338
 *             (self.right_edge[0], self.right_edge[1], self.right_edge[2]),
 *             nroot, num_zones)
 *         octree.n_ref = index.dataset.n_ref             # <<<<<<<<<<<<<<
 *         octree.level_offset = self.index_order1
 *         octree.allocate_domains()
*/
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_mstate_global->__pyx_n_u_dataset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_n_ref); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_12 = __Pyx_PyLong_As_int(__pyx_t_4); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_octree->n_ref = __pyx_t_12;

  /* "yt/geometry/particle_oct_container.pyx":1339
 *             nroot, num_zones)
 *         octree.n_ref = index.dataset.n_ref
 *         octree.level_offset = self.index_order1             # <<<<<<<<<<<<<<
 *         octree.allocate_domains()
 *         # Add roots based on the mask
*/
  __pyx_t_13 = __pyx_v_self->index_order1;
  __pyx_v_octree->__pyx_base.__pyx_base.level_offset = __pyx_t_13;

  /* "yt/geometry/particle_oct_container.pyx":1340
 *         octree.n_ref = index.dataset.n_ref
 *         octree.level_offset = self.index_order1
 *         octree.allocate_domains()             # <<<<<<<<<<<<<<
 *         # Add roots based on the mask
 *         cdef np.uint64_t croot = 0
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_octree);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_11 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_allocate_domains, __pyx_callargs+__pyx_t_11, (1-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1342
 *         octree.allocate_domains()
 *         # Add roots based on the mask
 *         cdef np.uint64_t croot = 0             # <<<<<<<<<<<<<<
 *         cdef ewah_bool_array *ewah_slct = <ewah_bool_array *> selector_mask.ewah_keys
 *         cdef ewah_bool_array *ewah_base
*/
  __pyx_v_croot = 0;

  /* "yt/geometry/particle_oct_container.pyx":1343
 *         # Add roots based on the mask
 *         cdef np.uint64_t croot = 0
 *         cdef ewah_bool_array *ewah_slct = <ewah_bool_array *> selector_mask.ewah_keys             # <<<<<<<<<<<<<<
 *         cdef ewah_bool_array *ewah_base
 *         if base_mask is not None:
*/
  __pyx_v_ewah_slct = ((__pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array *)__pyx_v_selector_mask->ewah_keys);

  /* "yt/geometry/particle_oct_container.pyx":1345
 *         cdef ewah_bool_array *ewah_slct = <ewah_bool_array *> selector_mask.ewah_keys
 *         cdef ewah_bool_array *ewah_base
 *         if base_mask is not None:             # <<<<<<<<<<<<<<
 *             ewah_base = <ewah_bool_array *> base_mask.ewah_keys
 *         else:
*/
  __pyx_t_14 = (((PyObject *)__pyx_v_base_mask) != Py_None);
  if (__pyx_t_14) {

    /* "yt/geometry/particle_oct_container.pyx":1346
 *         cdef ewah_bool_array *ewah_base
 *         if base_mask is not None:
 *             ewah_base = <ewah_bool_array *> base_mask.ewah_keys             # <<<<<<<<<<<<<<
 *         else:
 *             ewah_base = NULL
*/
    __pyx_v_ewah_base = ((__pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_array *)__pyx_v_base_mask->ewah_keys);

    /* "yt/geometry/particle_oct_container.pyx":1345
 *         cdef ewah_bool_array *ewah_slct = <ewah_bool_array *> selector_mask.ewah_keys
 *         cdef ewah_bool_array *ewah_base
 *         if base_mask is not None:             # <<<<<<<<<<<<<<
 *             ewah_base = <ewah_bool_array *> base_mask.ewah_keys
 *         else:
*/
    goto __pyx_L5;
  }

  /* "yt/geometry/particle_oct_container.pyx":1348
 *             ewah_base = <ewah_bool_array *> base_mask.ewah_keys
 *         else:
 *             ewah_base = NULL             # <<<<<<<<<<<<<<
 *         cdef ewah_bool_iterator *iter_set = new ewah_bool_iterator(ewah_slct[0].begin())
 *         cdef ewah_bool_iterator *iter_end = new ewah_bool_iterator(ewah_slct[0].end())
*/
  /*else*/ {
    __pyx_v_ewah_base = NULL;
  }
  __pyx_L5:;

  /* "yt/geometry/particle_oct_container.pyx":1349
 *         else:
 *             ewah_base = NULL
 *         cdef ewah_bool_iterator *iter_set = new ewah_bool_iterator(ewah_slct[0].begin())             # <<<<<<<<<<<<<<
 *         cdef ewah_bool_iterator *iter_end = new ewah_bool_iterator(ewah_slct[0].end())
 *         cdef np.ndarray[np.uint8_t, ndim=1] slct_arr
*/
  __pyx_v_iter_set = new __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_iterator((__pyx_v_ewah_slct[0]).begin());

  /* "yt/geometry/particle_oct_container.pyx":1350
 *             ewah_base = NULL
 *         cdef ewah_bool_iterator *iter_set = new ewah_bool_iterator(ewah_slct[0].begin())
 *         cdef ewah_bool_iterator *iter_end = new ewah_bool_iterator(ewah_slct[0].end())             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.uint8_t, ndim=1] slct_arr
 *         slct_arr = np.zeros((1 << (self.index_order1 * 3)),'uint8')
*/
  __pyx_v_iter_end = new __pyx_t_15ewah_bool_utils_15ewah_bool_array_ewah_bool_iterator((__pyx_v_ewah_slct[0]).end());

  /* "yt/geometry/particle_oct_container.pyx":1352
 *         cdef ewah_bool_iterator *iter_end = new ewah_bool_iterator(ewah_slct[0].end())
 *         cdef np.ndarray[np.uint8_t, ndim=1] slct_arr
 *         slct_arr = np.zeros((1 << (self.index_order1 * 3)),'uint8')             # <<<<<<<<<<<<<<
 *         while iter_set[0] != iter_end[0]:
 *             mi = dereference(iter_set[0])
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyLong_From_long((1 << (__pyx_v_self->index_order1 * 3))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_11 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_10);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_10, __pyx__function);
    __pyx_t_11 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_7, __pyx_mstate_global->__pyx_n_u_uint8};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (3-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1352, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_slct_arr.rcbuffer->pybuffer);
    __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_slct_arr.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_4), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_12 < 0)) {
      PyErr_Fetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_slct_arr.rcbuffer->pybuffer, (PyObject*)__pyx_v_slct_arr, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_15); Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_17);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      }
      __pyx_t_15 = __pyx_t_16 = __pyx_t_17 = 0;
    }
    __pyx_pybuffernd_slct_arr.diminfo[0].strides = __pyx_pybuffernd_slct_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_slct_arr.diminfo[0].shape = __pyx_pybuffernd_slct_arr.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 1352, __pyx_L1_error)
  }
  __pyx_v_slct_arr = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1353
 *         cdef np.ndarray[np.uint8_t, ndim=1] slct_arr
 *         slct_arr = np.zeros((1 << (self.index_order1 * 3)),'uint8')
 *         while iter_set[0] != iter_end[0]:             # <<<<<<<<<<<<<<
 *             mi = dereference(iter_set[0])
 *             if ewah_base != NULL and ewah_base[0].get(mi) == 0:
*/
  while (1) {
    __pyx_t_14 = ((__pyx_v_iter_set[0]) != (__pyx_v_iter_end[0]));
    if (!__pyx_t_14) break;

    /* "yt/geometry/particle_oct_container.pyx":1354
 *         slct_arr = np.zeros((1 << (self.index_order1 * 3)),'uint8')
 *         while iter_set[0] != iter_end[0]:
 *             mi = dereference(iter_set[0])             # <<<<<<<<<<<<<<
 *             if ewah_base != NULL and ewah_base[0].get(mi) == 0:
 *                 octree._index_base_roots[croot] = 0
*/
    __pyx_v_mi = (*(__pyx_v_iter_set[0]));

    /* "yt/geometry/particle_oct_container.pyx":1355
 *         while iter_set[0] != iter_end[0]:
 *             mi = dereference(iter_set[0])
 *             if ewah_base != NULL and ewah_base[0].get(mi) == 0:             # <<<<<<<<<<<<<<
 *                 octree._index_base_roots[croot] = 0
 *                 slct_arr[mi] = 2
*/
    __pyx_t_18 = (__pyx_v_ewah_base != NULL);
    if (__pyx_t_18) {
    } else {
      __pyx_t_14 = __pyx_t_18;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_18 = ((__pyx_v_ewah_base[0]).get(__pyx_v_mi) == 0);
    __pyx_t_14 = __pyx_t_18;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_14) {

      /* "yt/geometry/particle_oct_container.pyx":1356
 *             mi = dereference(iter_set[0])
 *             if ewah_base != NULL and ewah_base[0].get(mi) == 0:
 *                 octree._index_base_roots[croot] = 0             # <<<<<<<<<<<<<<
 *                 slct_arr[mi] = 2
 *             else:
*/
      if (unlikely(!__pyx_v_octree->_index_base_roots.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1356, __pyx_L1_error)}
      __pyx_t_1 = __pyx_v_croot;
      *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_octree->_index_base_roots.data + __pyx_t_1 * __pyx_v_octree->_index_base_roots.strides[0]) )) = 0;

      /* "yt/geometry/particle_oct_container.pyx":1357
 *             if ewah_base != NULL and ewah_base[0].get(mi) == 0:
 *                 octree._index_base_roots[croot] = 0
 *                 slct_arr[mi] = 2             # <<<<<<<<<<<<<<
 *             else:
 *                 slct_arr[mi] = 1
*/
      __pyx_t_1 = __pyx_v_mi;
      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_slct_arr.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_slct_arr.diminfo[0].strides) = 2;

      /* "yt/geometry/particle_oct_container.pyx":1355
 *         while iter_set[0] != iter_end[0]:
 *             mi = dereference(iter_set[0])
 *             if ewah_base != NULL and ewah_base[0].get(mi) == 0:             # <<<<<<<<<<<<<<
 *                 octree._index_base_roots[croot] = 0
 *                 slct_arr[mi] = 2
*/
      goto __pyx_L8;
    }

    /* "yt/geometry/particle_oct_container.pyx":1359
 *                 slct_arr[mi] = 2
 *             else:
 *                 slct_arr[mi] = 1             # <<<<<<<<<<<<<<
 *             decode_morton_64bit(mi, ind64)
 *             for j in range(3):
*/
    /*else*/ {
      __pyx_t_1 = __pyx_v_mi;
      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_slct_arr.rcbuffer->pybuffer.buf, __pyx_t_1, __pyx_pybuffernd_slct_arr.diminfo[0].strides) = 1;
    }
    __pyx_L8:;

    /* "yt/geometry/particle_oct_container.pyx":1360
 *             else:
 *                 slct_arr[mi] = 1
 *             decode_morton_64bit(mi, ind64)             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 ind[j] = ind64[j]
*/
    __pyx_f_2yt_9utilities_3lib_14geometry_utils_decode_morton_64bit(__pyx_v_mi, __pyx_v_ind64); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1360, __pyx_L1_error)

    /* "yt/geometry/particle_oct_container.pyx":1361
 *                 slct_arr[mi] = 1
 *             decode_morton_64bit(mi, ind64)
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 ind[j] = ind64[j]
 *             octree.next_root(1, ind)
*/
    for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
      __pyx_v_j = __pyx_t_1;

      /* "yt/geometry/particle_oct_container.pyx":1362
 *             decode_morton_64bit(mi, ind64)
 *             for j in range(3):
 *                 ind[j] = ind64[j]             # <<<<<<<<<<<<<<
 *             octree.next_root(1, ind)
 *             croot += 1
*/
      (__pyx_v_ind[__pyx_v_j]) = (__pyx_v_ind64[__pyx_v_j]);
    }

    /* "yt/geometry/particle_oct_container.pyx":1363
 *             for j in range(3):
 *                 ind[j] = ind64[j]
 *             octree.next_root(1, ind)             # <<<<<<<<<<<<<<
 *             croot += 1
 *             preincrement(iter_set[0])
*/
    ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_octree->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.next_root(((struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *)__pyx_v_octree), 1, __pyx_v_ind); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1363, __pyx_L1_error)

    /* "yt/geometry/particle_oct_container.pyx":1364
 *                 ind[j] = ind64[j]
 *             octree.next_root(1, ind)
 *             croot += 1             # <<<<<<<<<<<<<<
 *             preincrement(iter_set[0])
 *         assert(croot == nroot)
*/
    __pyx_v_croot = (__pyx_v_croot + 1);

    /* "yt/geometry/particle_oct_container.pyx":1365
 *             octree.next_root(1, ind)
 *             croot += 1
 *             preincrement(iter_set[0])             # <<<<<<<<<<<<<<
 *         assert(croot == nroot)
 *         if ewah_base != NULL:
*/
    (void)((++(__pyx_v_iter_set[0])));
  }

  /* "yt/geometry/particle_oct_container.pyx":1366
 *             croot += 1
 *             preincrement(iter_set[0])
 *         assert(croot == nroot)             # <<<<<<<<<<<<<<
 *         if ewah_base != NULL:
 *             assert(np.sum(octree._index_base_roots) == ewah_base[0].numberOfOnes())
*/
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_14 = (__pyx_v_croot == __pyx_v_nroot);
    if (unlikely(!__pyx_t_14)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 1366, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1366, __pyx_L1_error)
  #endif

  /* "yt/geometry/particle_oct_container.pyx":1367
 *             preincrement(iter_set[0])
 *         assert(croot == nroot)
 *         if ewah_base != NULL:             # <<<<<<<<<<<<<<
 *             assert(np.sum(octree._index_base_roots) == ewah_base[0].numberOfOnes())
 *         # Get morton indices for all particles in this file and those
*/
  __pyx_t_14 = (__pyx_v_ewah_base != NULL);
  if (__pyx_t_14) {

    /* "yt/geometry/particle_oct_container.pyx":1368
 *         assert(croot == nroot)
 *         if ewah_base != NULL:
 *             assert(np.sum(octree._index_base_roots) == ewah_base[0].numberOfOnes())             # <<<<<<<<<<<<<<
 *         # Get morton indices for all particles in this file and those
 *         # contaminating cells it has majority control of.
*/
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      __pyx_t_10 = NULL;
      __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_sum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_v_octree->_index_base_roots.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1368, __pyx_L1_error)}
      __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_v_octree->_index_base_roots, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_uint8_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_uint8_t, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = 1;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
        assert(__pyx_t_10);
        PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(__pyx__function);
        __Pyx_DECREF_SET(__pyx_t_2, __pyx__function);
        __pyx_t_11 = 0;
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_7};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1368, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
      }
      __pyx_t_2 = __Pyx_PyLong_FromSize_t((__pyx_v_ewah_base[0]).numberOfOnes()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1368, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1368, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 1368, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_14)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
        __PYX_ERR(0, 1368, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 1368, __pyx_L1_error)
    #endif

    /* "yt/geometry/particle_oct_container.pyx":1367
 *             preincrement(iter_set[0])
 *         assert(croot == nroot)
 *         if ewah_base != NULL:             # <<<<<<<<<<<<<<
 *             assert(np.sum(octree._index_base_roots) == ewah_base[0].numberOfOnes())
 *         # Get morton indices for all particles in this file and those
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":1371
 *         # Get morton indices for all particles in this file and those
 *         # contaminating cells it has majority control of.
 *         files_touched = data_files #+ buffer_files  # datafile object from ID goes here             # <<<<<<<<<<<<<<
 *         total_pcount = 0
 *         for data_file in files_touched:
*/
  __Pyx_INCREF(__pyx_v_data_files);
  __pyx_v_files_touched = __pyx_v_data_files;

  /* "yt/geometry/particle_oct_container.pyx":1372
 *         # contaminating cells it has majority control of.
 *         files_touched = data_files #+ buffer_files  # datafile object from ID goes here
 *         total_pcount = 0             # <<<<<<<<<<<<<<
 *         for data_file in files_touched:
 *             total_pcount += sum(data_file.total_particles.values())
*/
  __pyx_v_total_pcount = 0;

  /* "yt/geometry/particle_oct_container.pyx":1373
 *         files_touched = data_files #+ buffer_files  # datafile object from ID goes here
 *         total_pcount = 0
 *         for data_file in files_touched:             # <<<<<<<<<<<<<<
 *             total_pcount += sum(data_file.total_particles.values())
 *         morton_ind = np.empty(total_pcount, dtype='uint64')
*/
  if (likely(PyList_CheckExact(__pyx_v_files_touched)) || PyTuple_CheckExact(__pyx_v_files_touched)) {
    __pyx_t_7 = __pyx_v_files_touched; __Pyx_INCREF(__pyx_t_7);
    __pyx_t_19 = 0;
    __pyx_t_20 = NULL;
  } else {
    __pyx_t_19 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_files_touched); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_20 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1373, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_20)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_7);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1373, __pyx_L1_error)
          #endif
          if (__pyx_t_19 >= __pyx_temp) break;
        }
        __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_7, __pyx_t_19);
        ++__pyx_t_19;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_7);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1373, __pyx_L1_error)
          #endif
          if (__pyx_t_19 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_19));
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_19);
        #endif
        ++__pyx_t_19;
      }
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1373, __pyx_L1_error)
    } else {
      __pyx_t_2 = __pyx_t_20(__pyx_t_7);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1373, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_data_file, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1374
 *         total_pcount = 0
 *         for data_file in files_touched:
 *             total_pcount += sum(data_file.total_particles.values())             # <<<<<<<<<<<<<<
 *         morton_ind = np.empty(total_pcount, dtype='uint64')
 *         total_pcount = 0
*/
    __pyx_t_2 = __Pyx_PyLong_From_npy_uint64(__pyx_v_total_pcount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = NULL;
    __Pyx_INCREF(__pyx_builtin_sum);
    __pyx_t_9 = __pyx_builtin_sum; 
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_data_file, __pyx_mstate_global->__pyx_n_u_total_particles); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __pyx_t_6;
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_11 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_8 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_values, __pyx_callargs+__pyx_t_11, (1-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
    }
    __pyx_t_11 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_8};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyLong_As_npy_uint64(__pyx_t_9); if (unlikely((__pyx_t_1 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1374, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_v_total_pcount = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":1373
 *         files_touched = data_files #+ buffer_files  # datafile object from ID goes here
 *         total_pcount = 0
 *         for data_file in files_touched:             # <<<<<<<<<<<<<<
 *             total_pcount += sum(data_file.total_particles.values())
 *         morton_ind = np.empty(total_pcount, dtype='uint64')
*/
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1375
 *         for data_file in files_touched:
 *             total_pcount += sum(data_file.total_particles.values())
 *         morton_ind = np.empty(total_pcount, dtype='uint64')             # <<<<<<<<<<<<<<
 *         total_pcount = 0
 *         cdef np.uint64_t base_pcount = 0
*/
  __pyx_t_9 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyLong_From_npy_uint64(__pyx_v_total_pcount); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_2);
    assert(__pyx_t_9);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_2, __pyx__function);
    __pyx_t_11 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_9, __pyx_t_4};
    __pyx_t_8 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint64, __pyx_t_8, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1375, __pyx_L1_error)
    __pyx_t_7 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_2, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
  }
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1375, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_morton_ind.rcbuffer->pybuffer);
    __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_morton_ind.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_7), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_12 < 0)) {
      PyErr_Fetch(&__pyx_t_17, &__pyx_t_16, &__pyx_t_15);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_morton_ind.rcbuffer->pybuffer, (PyObject*)__pyx_v_morton_ind, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_15);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_17, __pyx_t_16, __pyx_t_15);
      }
      __pyx_t_17 = __pyx_t_16 = __pyx_t_15 = 0;
    }
    __pyx_pybuffernd_morton_ind.diminfo[0].strides = __pyx_pybuffernd_morton_ind.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_morton_ind.diminfo[0].shape = __pyx_pybuffernd_morton_ind.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 1375, __pyx_L1_error)
  }
  __pyx_v_morton_ind = ((PyArrayObject *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1376
 *             total_pcount += sum(data_file.total_particles.values())
 *         morton_ind = np.empty(total_pcount, dtype='uint64')
 *         total_pcount = 0             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t base_pcount = 0
 *         for data_file in files_touched:
*/
  __pyx_v_total_pcount = 0;

  /* "yt/geometry/particle_oct_container.pyx":1377
 *         morton_ind = np.empty(total_pcount, dtype='uint64')
 *         total_pcount = 0
 *         cdef np.uint64_t base_pcount = 0             # <<<<<<<<<<<<<<
 *         for data_file in files_touched:
 *             # We now get our particle positions
*/
  __pyx_v_base_pcount = 0;

  /* "yt/geometry/particle_oct_container.pyx":1378
 *         total_pcount = 0
 *         cdef np.uint64_t base_pcount = 0
 *         for data_file in files_touched:             # <<<<<<<<<<<<<<
 *             # We now get our particle positions
 *             for pos in io_handler._yield_coordinates(data_file):
*/
  if (likely(PyList_CheckExact(__pyx_v_files_touched)) || PyTuple_CheckExact(__pyx_v_files_touched)) {
    __pyx_t_7 = __pyx_v_files_touched; __Pyx_INCREF(__pyx_t_7);
    __pyx_t_19 = 0;
    __pyx_t_20 = NULL;
  } else {
    __pyx_t_19 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_files_touched); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_20 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1378, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_20)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_7);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1378, __pyx_L1_error)
          #endif
          if (__pyx_t_19 >= __pyx_temp) break;
        }
        __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_7, __pyx_t_19);
        ++__pyx_t_19;
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_7);
          #if !CYTHON_ASSUME_SAFE_SIZE
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1378, __pyx_L1_error)
          #endif
          if (__pyx_t_19 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_19));
        #else
        __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_7, __pyx_t_19);
        #endif
        ++__pyx_t_19;
      }
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1378, __pyx_L1_error)
    } else {
      __pyx_t_2 = __pyx_t_20(__pyx_t_7);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1378, __pyx_L1_error)
          PyErr_Clear();
        }
        break;
      }
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_data_file, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1380
 *         for data_file in files_touched:
 *             # We now get our particle positions
 *             for pos in io_handler._yield_coordinates(data_file):             # <<<<<<<<<<<<<<
 *                 pos32 = pos64 = None
 *                 bitsize = 0
*/
    __pyx_t_8 = __pyx_v_io_handler;
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_11 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_data_file};
      __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_yield_coordinates, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_8 = __pyx_t_2; __Pyx_INCREF(__pyx_t_8);
      __pyx_t_21 = 0;
      __pyx_t_22 = NULL;
    } else {
      __pyx_t_21 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1380, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_22 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_8); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 1380, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_22)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_8);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1380, __pyx_L1_error)
            #endif
            if (__pyx_t_21 >= __pyx_temp) break;
          }
          __pyx_t_2 = __Pyx_PyList_GetItemRef(__pyx_t_8, __pyx_t_21);
          ++__pyx_t_21;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_8);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 1380, __pyx_L1_error)
            #endif
            if (__pyx_t_21 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_21));
          #else
          __pyx_t_2 = __Pyx_PySequence_ITEM(__pyx_t_8, __pyx_t_21);
          #endif
          ++__pyx_t_21;
        }
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1380, __pyx_L1_error)
      } else {
        __pyx_t_2 = __pyx_t_22(__pyx_t_8);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 1380, __pyx_L1_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1380, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_pos, ((PyArrayObject *)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "yt/geometry/particle_oct_container.pyx":1381
 *             # We now get our particle positions
 *             for pos in io_handler._yield_coordinates(data_file):
 *                 pos32 = pos64 = None             # <<<<<<<<<<<<<<
 *                 bitsize = 0
 *                 if pos.dtype == np.float32:
*/
      __pyx_t_23 = ((PyArrayObject *)Py_None);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos32.rcbuffer->pybuffer);
        __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos32.rcbuffer->pybuffer, (PyObject*)__pyx_t_23, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
        if (unlikely(__pyx_t_12 < 0)) {
          PyErr_Fetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos32.rcbuffer->pybuffer, (PyObject*)__pyx_v_pos32, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_15); Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_17);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
          }
          __pyx_t_15 = __pyx_t_16 = __pyx_t_17 = 0;
        }
        __pyx_pybuffernd_pos32.diminfo[0].strides = __pyx_pybuffernd_pos32.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pos32.diminfo[0].shape = __pyx_pybuffernd_pos32.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pos32.diminfo[1].strides = __pyx_pybuffernd_pos32.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pos32.diminfo[1].shape = __pyx_pybuffernd_pos32.rcbuffer->pybuffer.shape[1];
        if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 1381, __pyx_L1_error)
      }
      __pyx_t_23 = 0;
      __Pyx_INCREF(Py_None);
      __Pyx_XDECREF_SET(__pyx_v_pos32, ((PyArrayObject *)Py_None));
      __pyx_t_24 = ((PyArrayObject *)Py_None);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos64.rcbuffer->pybuffer);
        __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos64.rcbuffer->pybuffer, (PyObject*)__pyx_t_24, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
        if (unlikely(__pyx_t_12 < 0)) {
          PyErr_Fetch(&__pyx_t_17, &__pyx_t_16, &__pyx_t_15);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos64.rcbuffer->pybuffer, (PyObject*)__pyx_v_pos64, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_15);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_17, __pyx_t_16, __pyx_t_15);
          }
          __pyx_t_17 = __pyx_t_16 = __pyx_t_15 = 0;
        }
        __pyx_pybuffernd_pos64.diminfo[0].strides = __pyx_pybuffernd_pos64.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pos64.diminfo[0].shape = __pyx_pybuffernd_pos64.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pos64.diminfo[1].strides = __pyx_pybuffernd_pos64.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pos64.diminfo[1].shape = __pyx_pybuffernd_pos64.rcbuffer->pybuffer.shape[1];
        if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 1381, __pyx_L1_error)
      }
      __pyx_t_24 = 0;
      __Pyx_INCREF(Py_None);
      __Pyx_XDECREF_SET(__pyx_v_pos64, ((PyArrayObject *)Py_None));

      /* "yt/geometry/particle_oct_container.pyx":1382
 *             for pos in io_handler._yield_coordinates(data_file):
 *                 pos32 = pos64 = None
 *                 bitsize = 0             # <<<<<<<<<<<<<<
 *                 if pos.dtype == np.float32:
 *                     pos32 = pos
*/
      __pyx_v_bitsize = 0;

      /* "yt/geometry/particle_oct_container.pyx":1383
 *                 pos32 = pos64 = None
 *                 bitsize = 0
 *                 if pos.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                     pos32 = pos
 *                     bitsize = 32
*/
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pos), __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_float32); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_9, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 1383, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_14) {

        /* "yt/geometry/particle_oct_container.pyx":1384
 *                 bitsize = 0
 *                 if pos.dtype == np.float32:
 *                     pos32 = pos             # <<<<<<<<<<<<<<
 *                     bitsize = 32
 *                     for j in range(pos.shape[0]):
*/
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos32.rcbuffer->pybuffer);
          __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos32.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_v_pos), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
          if (unlikely(__pyx_t_12 < 0)) {
            PyErr_Fetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos32.rcbuffer->pybuffer, (PyObject*)__pyx_v_pos32, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_15); Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_17);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
            }
            __pyx_t_15 = __pyx_t_16 = __pyx_t_17 = 0;
          }
          __pyx_pybuffernd_pos32.diminfo[0].strides = __pyx_pybuffernd_pos32.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pos32.diminfo[0].shape = __pyx_pybuffernd_pos32.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pos32.diminfo[1].strides = __pyx_pybuffernd_pos32.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pos32.diminfo[1].shape = __pyx_pybuffernd_pos32.rcbuffer->pybuffer.shape[1];
          if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 1384, __pyx_L1_error)
        }
        __Pyx_INCREF((PyObject *)__pyx_v_pos);
        __Pyx_DECREF_SET(__pyx_v_pos32, ((PyArrayObject *)__pyx_v_pos));

        /* "yt/geometry/particle_oct_container.pyx":1385
 *                 if pos.dtype == np.float32:
 *                     pos32 = pos
 *                     bitsize = 32             # <<<<<<<<<<<<<<
 *                     for j in range(pos.shape[0]):
 *                         for k in range(3):
*/
        __pyx_v_bitsize = 32;

        /* "yt/geometry/particle_oct_container.pyx":1386
 *                     pos32 = pos
 *                     bitsize = 32
 *                     for j in range(pos.shape[0]):             # <<<<<<<<<<<<<<
 *                         for k in range(3):
 *                             ppos[k] = pos32[j,k]
*/
        __pyx_t_25 = __pyx_f_5numpy_7ndarray_5shape_shape(__pyx_v_pos); if (unlikely(__pyx_t_25 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 1386, __pyx_L1_error)
        __pyx_t_26 = (__pyx_t_25[0]);
        __pyx_t_27 = __pyx_t_26;
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_27; __pyx_t_1+=1) {
          __pyx_v_j = __pyx_t_1;

          /* "yt/geometry/particle_oct_container.pyx":1387
 *                     bitsize = 32
 *                     for j in range(pos.shape[0]):
 *                         for k in range(3):             # <<<<<<<<<<<<<<
 *                             ppos[k] = pos32[j,k]
 *                         mi = bounded_morton(ppos[0], ppos[1], ppos[2],
*/
          for (__pyx_t_28 = 0; __pyx_t_28 < 3; __pyx_t_28+=1) {
            __pyx_v_k = __pyx_t_28;

            /* "yt/geometry/particle_oct_container.pyx":1388
 *                     for j in range(pos.shape[0]):
 *                         for k in range(3):
 *                             ppos[k] = pos32[j,k]             # <<<<<<<<<<<<<<
 *                         mi = bounded_morton(ppos[0], ppos[1], ppos[2],
 *                                             DLE, DRE, ORDER_MAX)
*/
            __pyx_t_29 = __pyx_v_j;
            __pyx_t_30 = __pyx_v_k;
            (__pyx_v_ppos[__pyx_v_k]) = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_pos32.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_pos32.diminfo[0].strides, __pyx_t_30, __pyx_pybuffernd_pos32.diminfo[1].strides));
          }

          /* "yt/geometry/particle_oct_container.pyx":1389
 *                         for k in range(3):
 *                             ppos[k] = pos32[j,k]
 *                         mi = bounded_morton(ppos[0], ppos[1], ppos[2],             # <<<<<<<<<<<<<<
 *                                             DLE, DRE, ORDER_MAX)
 *                         mi_root = mi >> (3*(ORDER_MAX-self.index_order1))
*/
          __pyx_t_28 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton((__pyx_v_ppos[0]), (__pyx_v_ppos[1]), (__pyx_v_ppos[2]), __pyx_v_DLE, __pyx_v_DRE, __pyx_v_2yt_8geometry_13oct_container_ORDER_MAX); if (unlikely(__pyx_t_28 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1389, __pyx_L1_error)
          __pyx_v_mi = __pyx_t_28;

          /* "yt/geometry/particle_oct_container.pyx":1391
 *                         mi = bounded_morton(ppos[0], ppos[1], ppos[2],
 *                                             DLE, DRE, ORDER_MAX)
 *                         mi_root = mi >> (3*(ORDER_MAX-self.index_order1))             # <<<<<<<<<<<<<<
 *                         if slct_arr[mi_root] > 0:
 *                             morton_ind[total_pcount] = mi
*/
          __pyx_v_mi_root = (__pyx_v_mi >> (3 * (__pyx_v_2yt_8geometry_13oct_container_ORDER_MAX - __pyx_v_self->index_order1)));

          /* "yt/geometry/particle_oct_container.pyx":1392
 *                                             DLE, DRE, ORDER_MAX)
 *                         mi_root = mi >> (3*(ORDER_MAX-self.index_order1))
 *                         if slct_arr[mi_root] > 0:             # <<<<<<<<<<<<<<
 *                             morton_ind[total_pcount] = mi
 *                             total_pcount += 1
*/
          __pyx_t_28 = __pyx_v_mi_root;
          __pyx_t_14 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_slct_arr.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_slct_arr.diminfo[0].strides)) > 0);
          if (__pyx_t_14) {

            /* "yt/geometry/particle_oct_container.pyx":1393
 *                         mi_root = mi >> (3*(ORDER_MAX-self.index_order1))
 *                         if slct_arr[mi_root] > 0:
 *                             morton_ind[total_pcount] = mi             # <<<<<<<<<<<<<<
 *                             total_pcount += 1
 *                             if slct_arr[mi_root] == 1:
*/
            __pyx_t_28 = __pyx_v_total_pcount;
            *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_morton_ind.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_morton_ind.diminfo[0].strides) = __pyx_v_mi;

            /* "yt/geometry/particle_oct_container.pyx":1394
 *                         if slct_arr[mi_root] > 0:
 *                             morton_ind[total_pcount] = mi
 *                             total_pcount += 1             # <<<<<<<<<<<<<<
 *                             if slct_arr[mi_root] == 1:
 *                                 base_pcount += 1
*/
            __pyx_v_total_pcount = (__pyx_v_total_pcount + 1);

            /* "yt/geometry/particle_oct_container.pyx":1395
 *                             morton_ind[total_pcount] = mi
 *                             total_pcount += 1
 *                             if slct_arr[mi_root] == 1:             # <<<<<<<<<<<<<<
 *                                 base_pcount += 1
 *                 elif pos.dtype == np.float64:
*/
            __pyx_t_28 = __pyx_v_mi_root;
            __pyx_t_14 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_slct_arr.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_slct_arr.diminfo[0].strides)) == 1);
            if (__pyx_t_14) {

              /* "yt/geometry/particle_oct_container.pyx":1396
 *                             total_pcount += 1
 *                             if slct_arr[mi_root] == 1:
 *                                 base_pcount += 1             # <<<<<<<<<<<<<<
 *                 elif pos.dtype == np.float64:
 *                     pos64 = pos
*/
              __pyx_v_base_pcount = (__pyx_v_base_pcount + 1);

              /* "yt/geometry/particle_oct_container.pyx":1395
 *                             morton_ind[total_pcount] = mi
 *                             total_pcount += 1
 *                             if slct_arr[mi_root] == 1:             # <<<<<<<<<<<<<<
 *                                 base_pcount += 1
 *                 elif pos.dtype == np.float64:
*/
            }

            /* "yt/geometry/particle_oct_container.pyx":1392
 *                                             DLE, DRE, ORDER_MAX)
 *                         mi_root = mi >> (3*(ORDER_MAX-self.index_order1))
 *                         if slct_arr[mi_root] > 0:             # <<<<<<<<<<<<<<
 *                             morton_ind[total_pcount] = mi
 *                             total_pcount += 1
*/
          }
        }

        /* "yt/geometry/particle_oct_container.pyx":1383
 *                 pos32 = pos64 = None
 *                 bitsize = 0
 *                 if pos.dtype == np.float32:             # <<<<<<<<<<<<<<
 *                     pos32 = pos
 *                     bitsize = 32
*/
        goto __pyx_L21;
      }

      /* "yt/geometry/particle_oct_container.pyx":1397
 *                             if slct_arr[mi_root] == 1:
 *                                 base_pcount += 1
 *                 elif pos.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                     pos64 = pos
 *                     bitsize = 64
*/
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_pos), __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyObject_RichCompare(__pyx_t_4, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1397, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 1397, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (likely(__pyx_t_14)) {

        /* "yt/geometry/particle_oct_container.pyx":1398
 *                                 base_pcount += 1
 *                 elif pos.dtype == np.float64:
 *                     pos64 = pos             # <<<<<<<<<<<<<<
 *                     bitsize = 64
 *                     for j in range(pos.shape[0]):
*/
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos64.rcbuffer->pybuffer);
          __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos64.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_v_pos), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
          if (unlikely(__pyx_t_12 < 0)) {
            PyErr_Fetch(&__pyx_t_17, &__pyx_t_16, &__pyx_t_15);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_pos64.rcbuffer->pybuffer, (PyObject*)__pyx_v_pos64, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_15);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_17, __pyx_t_16, __pyx_t_15);
            }
            __pyx_t_17 = __pyx_t_16 = __pyx_t_15 = 0;
          }
          __pyx_pybuffernd_pos64.diminfo[0].strides = __pyx_pybuffernd_pos64.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_pos64.diminfo[0].shape = __pyx_pybuffernd_pos64.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_pos64.diminfo[1].strides = __pyx_pybuffernd_pos64.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_pos64.diminfo[1].shape = __pyx_pybuffernd_pos64.rcbuffer->pybuffer.shape[1];
          if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 1398, __pyx_L1_error)
        }
        __Pyx_INCREF((PyObject *)__pyx_v_pos);
        __Pyx_DECREF_SET(__pyx_v_pos64, ((PyArrayObject *)__pyx_v_pos));

        /* "yt/geometry/particle_oct_container.pyx":1399
 *                 elif pos.dtype == np.float64:
 *                     pos64 = pos
 *                     bitsize = 64             # <<<<<<<<<<<<<<
 *                     for j in range(pos.shape[0]):
 *                         for k in range(3):
*/
        __pyx_v_bitsize = 64;

        /* "yt/geometry/particle_oct_container.pyx":1400
 *                     pos64 = pos
 *                     bitsize = 64
 *                     for j in range(pos.shape[0]):             # <<<<<<<<<<<<<<
 *                         for k in range(3):
 *                             ppos[k] = pos64[j,k]
*/
        __pyx_t_25 = __pyx_f_5numpy_7ndarray_5shape_shape(__pyx_v_pos); if (unlikely(__pyx_t_25 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 1400, __pyx_L1_error)
        __pyx_t_26 = (__pyx_t_25[0]);
        __pyx_t_27 = __pyx_t_26;
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_27; __pyx_t_1+=1) {
          __pyx_v_j = __pyx_t_1;

          /* "yt/geometry/particle_oct_container.pyx":1401
 *                     bitsize = 64
 *                     for j in range(pos.shape[0]):
 *                         for k in range(3):             # <<<<<<<<<<<<<<
 *                             ppos[k] = pos64[j,k]
 *                         mi = bounded_morton(ppos[0], ppos[1], ppos[2],
*/
          for (__pyx_t_28 = 0; __pyx_t_28 < 3; __pyx_t_28+=1) {
            __pyx_v_k = __pyx_t_28;

            /* "yt/geometry/particle_oct_container.pyx":1402
 *                     for j in range(pos.shape[0]):
 *                         for k in range(3):
 *                             ppos[k] = pos64[j,k]             # <<<<<<<<<<<<<<
 *                         mi = bounded_morton(ppos[0], ppos[1], ppos[2],
 *                                             DLE, DRE, ORDER_MAX)
*/
            __pyx_t_30 = __pyx_v_j;
            __pyx_t_29 = __pyx_v_k;
            (__pyx_v_ppos[__pyx_v_k]) = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_pos64.rcbuffer->pybuffer.buf, __pyx_t_30, __pyx_pybuffernd_pos64.diminfo[0].strides, __pyx_t_29, __pyx_pybuffernd_pos64.diminfo[1].strides));
          }

          /* "yt/geometry/particle_oct_container.pyx":1403
 *                         for k in range(3):
 *                             ppos[k] = pos64[j,k]
 *                         mi = bounded_morton(ppos[0], ppos[1], ppos[2],             # <<<<<<<<<<<<<<
 *                                             DLE, DRE, ORDER_MAX)
 *                         mi_root = mi >> (3*(ORDER_MAX-self.index_order1))
*/
          __pyx_t_28 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton((__pyx_v_ppos[0]), (__pyx_v_ppos[1]), (__pyx_v_ppos[2]), __pyx_v_DLE, __pyx_v_DRE, __pyx_v_2yt_8geometry_13oct_container_ORDER_MAX); if (unlikely(__pyx_t_28 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1403, __pyx_L1_error)
          __pyx_v_mi = __pyx_t_28;

          /* "yt/geometry/particle_oct_container.pyx":1405
 *                         mi = bounded_morton(ppos[0], ppos[1], ppos[2],
 *                                             DLE, DRE, ORDER_MAX)
 *                         mi_root = mi >> (3*(ORDER_MAX-self.index_order1))             # <<<<<<<<<<<<<<
 *                         if slct_arr[mi_root] > 0:
 *                             morton_ind[total_pcount] = mi
*/
          __pyx_v_mi_root = (__pyx_v_mi >> (3 * (__pyx_v_2yt_8geometry_13oct_container_ORDER_MAX - __pyx_v_self->index_order1)));

          /* "yt/geometry/particle_oct_container.pyx":1406
 *                                             DLE, DRE, ORDER_MAX)
 *                         mi_root = mi >> (3*(ORDER_MAX-self.index_order1))
 *                         if slct_arr[mi_root] > 0:             # <<<<<<<<<<<<<<
 *                             morton_ind[total_pcount] = mi
 *                             total_pcount += 1
*/
          __pyx_t_28 = __pyx_v_mi_root;
          __pyx_t_14 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_slct_arr.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_slct_arr.diminfo[0].strides)) > 0);
          if (__pyx_t_14) {

            /* "yt/geometry/particle_oct_container.pyx":1407
 *                         mi_root = mi >> (3*(ORDER_MAX-self.index_order1))
 *                         if slct_arr[mi_root] > 0:
 *                             morton_ind[total_pcount] = mi             # <<<<<<<<<<<<<<
 *                             total_pcount += 1
 *                             if slct_arr[mi_root] == 1:
*/
            __pyx_t_28 = __pyx_v_total_pcount;
            *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_morton_ind.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_morton_ind.diminfo[0].strides) = __pyx_v_mi;

            /* "yt/geometry/particle_oct_container.pyx":1408
 *                         if slct_arr[mi_root] > 0:
 *                             morton_ind[total_pcount] = mi
 *                             total_pcount += 1             # <<<<<<<<<<<<<<
 *                             if slct_arr[mi_root] == 1:
 *                                 base_pcount += 1
*/
            __pyx_v_total_pcount = (__pyx_v_total_pcount + 1);

            /* "yt/geometry/particle_oct_container.pyx":1409
 *                             morton_ind[total_pcount] = mi
 *                             total_pcount += 1
 *                             if slct_arr[mi_root] == 1:             # <<<<<<<<<<<<<<
 *                                 base_pcount += 1
 *                 else:
*/
            __pyx_t_28 = __pyx_v_mi_root;
            __pyx_t_14 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_slct_arr.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_slct_arr.diminfo[0].strides)) == 1);
            if (__pyx_t_14) {

              /* "yt/geometry/particle_oct_container.pyx":1410
 *                             total_pcount += 1
 *                             if slct_arr[mi_root] == 1:
 *                                 base_pcount += 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise RuntimeError
*/
              __pyx_v_base_pcount = (__pyx_v_base_pcount + 1);

              /* "yt/geometry/particle_oct_container.pyx":1409
 *                             morton_ind[total_pcount] = mi
 *                             total_pcount += 1
 *                             if slct_arr[mi_root] == 1:             # <<<<<<<<<<<<<<
 *                                 base_pcount += 1
 *                 else:
*/
            }

            /* "yt/geometry/particle_oct_container.pyx":1406
 *                                             DLE, DRE, ORDER_MAX)
 *                         mi_root = mi >> (3*(ORDER_MAX-self.index_order1))
 *                         if slct_arr[mi_root] > 0:             # <<<<<<<<<<<<<<
 *                             morton_ind[total_pcount] = mi
 *                             total_pcount += 1
*/
          }
        }

        /* "yt/geometry/particle_oct_container.pyx":1397
 *                             if slct_arr[mi_root] == 1:
 *                                 base_pcount += 1
 *                 elif pos.dtype == np.float64:             # <<<<<<<<<<<<<<
 *                     pos64 = pos
 *                     bitsize = 64
*/
        goto __pyx_L21;
      }

      /* "yt/geometry/particle_oct_container.pyx":1412
 *                                 base_pcount += 1
 *                 else:
 *                     raise RuntimeError             # <<<<<<<<<<<<<<
 *         morton_ind = morton_ind[:total_pcount]
 *         morton_ind.sort()
*/
      /*else*/ {
        __Pyx_Raise(__pyx_builtin_RuntimeError, 0, 0, 0);
        __PYX_ERR(0, 1412, __pyx_L1_error)
      }
      __pyx_L21:;

      /* "yt/geometry/particle_oct_container.pyx":1380
 *         for data_file in files_touched:
 *             # We now get our particle positions
 *             for pos in io_handler._yield_coordinates(data_file):             # <<<<<<<<<<<<<<
 *                 pos32 = pos64 = None
 *                 bitsize = 0
*/
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1378
 *         total_pcount = 0
 *         cdef np.uint64_t base_pcount = 0
 *         for data_file in files_touched:             # <<<<<<<<<<<<<<
 *             # We now get our particle positions
 *             for pos in io_handler._yield_coordinates(data_file):
*/
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1413
 *                 else:
 *                     raise RuntimeError
 *         morton_ind = morton_ind[:total_pcount]             # <<<<<<<<<<<<<<
 *         morton_ind.sort()
 *         octree.add(morton_ind, self.index_order1)
*/
  __pyx_t_7 = __Pyx_PyLong_From_npy_uint64(__pyx_v_total_pcount); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PySlice_New(Py_None, __pyx_t_7, Py_None); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_morton_ind), __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1413, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_morton_ind.rcbuffer->pybuffer);
    __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_morton_ind.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_7), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_12 < 0)) {
      PyErr_Fetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_morton_ind.rcbuffer->pybuffer, (PyObject*)__pyx_v_morton_ind, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_15); Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_17);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      }
      __pyx_t_15 = __pyx_t_16 = __pyx_t_17 = 0;
    }
    __pyx_pybuffernd_morton_ind.diminfo[0].strides = __pyx_pybuffernd_morton_ind.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_morton_ind.diminfo[0].shape = __pyx_pybuffernd_morton_ind.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 1413, __pyx_L1_error)
  }
  __Pyx_DECREF_SET(__pyx_v_morton_ind, ((PyArrayObject *)__pyx_t_7));
  __pyx_t_7 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1414
 *                     raise RuntimeError
 *         morton_ind = morton_ind[:total_pcount]
 *         morton_ind.sort()             # <<<<<<<<<<<<<<
 *         octree.add(morton_ind, self.index_order1)
 *         octree.finalize()
*/
  __pyx_t_8 = ((PyObject *)__pyx_v_morton_ind);
  __Pyx_INCREF(__pyx_t_8);
  __pyx_t_11 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, NULL};
    __pyx_t_7 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_sort, __pyx_callargs+__pyx_t_11, (1-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1415
 *         morton_ind = morton_ind[:total_pcount]
 *         morton_ind.sort()
 *         octree.add(morton_ind, self.index_order1)             # <<<<<<<<<<<<<<
 *         octree.finalize()
 *         return octree
*/
  __pyx_t_8 = ((PyObject *)__pyx_v_octree);
  __Pyx_INCREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyLong_From_npy_int32(__pyx_v_self->index_order1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_11 = 0;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_8, ((PyObject *)__pyx_v_morton_ind), __pyx_t_9};
    __pyx_t_7 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_add, __pyx_callargs+__pyx_t_11, (3-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1416
 *         morton_ind.sort()
 *         octree.add(morton_ind, self.index_order1)
 *         octree.finalize()             # <<<<<<<<<<<<<<
 *         return octree
 * 
*/
  __pyx_t_9 = ((PyObject *)__pyx_v_octree);
  __Pyx_INCREF(__pyx_t_9);
  __pyx_t_11 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_9, NULL};
    __pyx_t_7 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_finalize, __pyx_callargs+__pyx_t_11, (1-__pyx_t_11) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1417
 *         octree.add(morton_ind, self.index_order1)
 *         octree.finalize()
 *         return octree             # <<<<<<<<<<<<<<
 * 
 * cdef class ParticleBitmapSelector:
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_octree);
  __pyx_r = ((PyObject *)__pyx_v_octree);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1306
 *         return file_idx_p.astype('uint32'), file_idx_g.astype('uint32')
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_morton_ind.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos32.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos64.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_slct_arr.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.construct_octree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_morton_ind.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos32.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_pos64.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_slct_arr.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_octree);
  __Pyx_XDECREF((PyObject *)__pyx_v_pos);
  __Pyx_XDECREF((PyObject *)__pyx_v_pos32);
  __Pyx_XDECREF((PyObject *)__pyx_v_pos64);
  __Pyx_XDECREF((PyObject *)__pyx_v_morton_ind);
  __Pyx_XDECREF((PyObject *)__pyx_v_slct_arr);
  __Pyx_XDECREF(__pyx_v_files_touched);
  __Pyx_XDECREF(__pyx_v_data_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":428
 *     cdef np.uint64_t directional_max2[3]
 *     cdef np.int64_t hash_value
 *     cdef public np.uint64_t nfiles             # <<<<<<<<<<<<<<
 *     cdef public np.int32_t index_order1
 *     cdef public np.int32_t index_order2
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6nfiles_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6nfiles_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6nfiles___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6nfiles___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->nfiles); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.nfiles.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6nfiles_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6nfiles_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6nfiles_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6nfiles_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyLong_As_npy_uint64(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 428, __pyx_L1_error)
  __pyx_v_self->nfiles = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.nfiles.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":429
 *     cdef np.int64_t hash_value
 *     cdef public np.uint64_t nfiles
 *     cdef public np.int32_t index_order1             # <<<<<<<<<<<<<<
 *     cdef public np.int32_t index_order2
 *     cdef public object masks
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order1_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order1_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order1___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order1___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_npy_int32(__pyx_v_self->index_order1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.index_order1.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order1_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order1_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order1_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __pyx_t_5numpy_int32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyLong_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 429, __pyx_L1_error)
  __pyx_v_self->index_order1 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.index_order1.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":430
 *     cdef public np.uint64_t nfiles
 *     cdef public np.int32_t index_order1
 *     cdef public np.int32_t index_order2             # <<<<<<<<<<<<<<
 *     cdef public object masks
 *     cdef public object particle_counts
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order2_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order2___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order2___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_npy_int32(__pyx_v_self->index_order2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.index_order2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order2_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order2_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __pyx_t_5numpy_int32_t __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyLong_As_npy_int32(__pyx_v_value); if (unlikely((__pyx_t_1 == ((npy_int32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 430, __pyx_L1_error)
  __pyx_v_self->index_order2 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.index_order2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":431
 *     cdef public np.int32_t index_order1
 *     cdef public np.int32_t index_order2
 *     cdef public object masks             # <<<<<<<<<<<<<<
 *     cdef public object particle_counts
 *     cdef public object counts
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->masks);
  __pyx_r = __pyx_v_self->masks;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->masks);
  __Pyx_DECREF(__pyx_v_self->masks);
  __pyx_v_self->masks = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_4__del__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->masks);
  __Pyx_DECREF(__pyx_v_self->masks);
  __pyx_v_self->masks = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":432
 *     cdef public np.int32_t index_order2
 *     cdef public object masks
 *     cdef public object particle_counts             # <<<<<<<<<<<<<<
 *     cdef public object counts
 *     cdef public object max_count
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->particle_counts);
  __pyx_r = __pyx_v_self->particle_counts;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->particle_counts);
  __Pyx_DECREF(__pyx_v_self->particle_counts);
  __pyx_v_self->particle_counts = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_4__del__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->particle_counts);
  __Pyx_DECREF(__pyx_v_self->particle_counts);
  __pyx_v_self->particle_counts = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":433
 *     cdef public object masks
 *     cdef public object particle_counts
 *     cdef public object counts             # <<<<<<<<<<<<<<
 *     cdef public object max_count
 *     cdef public object _last_selector
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->counts);
  __pyx_r = __pyx_v_self->counts;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->counts);
  __Pyx_DECREF(__pyx_v_self->counts);
  __pyx_v_self->counts = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_4__del__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->counts);
  __Pyx_DECREF(__pyx_v_self->counts);
  __pyx_v_self->counts = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":434
 *     cdef public object particle_counts
 *     cdef public object counts
 *     cdef public object max_count             # <<<<<<<<<<<<<<
 *     cdef public object _last_selector
 *     cdef public object _last_return_values
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->max_count);
  __pyx_r = __pyx_v_self->max_count;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->max_count);
  __Pyx_DECREF(__pyx_v_self->max_count);
  __pyx_v_self->max_count = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_4__del__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->max_count);
  __Pyx_DECREF(__pyx_v_self->max_count);
  __pyx_v_self->max_count = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":435
 *     cdef public object counts
 *     cdef public object max_count
 *     cdef public object _last_selector             # <<<<<<<<<<<<<<
 *     cdef public object _last_return_values
 *     cdef public object _cached_octrees
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_last_selector);
  __pyx_r = __pyx_v_self->_last_selector;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_last_selector);
  __Pyx_DECREF(__pyx_v_self->_last_selector);
  __pyx_v_self->_last_selector = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_4__del__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_last_selector);
  __Pyx_DECREF(__pyx_v_self->_last_selector);
  __pyx_v_self->_last_selector = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":436
 *     cdef public object max_count
 *     cdef public object _last_selector
 *     cdef public object _last_return_values             # <<<<<<<<<<<<<<
 *     cdef public object _cached_octrees
 *     cdef public object _last_octree_subset
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_last_return_values);
  __pyx_r = __pyx_v_self->_last_return_values;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_last_return_values);
  __Pyx_DECREF(__pyx_v_self->_last_return_values);
  __pyx_v_self->_last_return_values = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_4__del__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_last_return_values);
  __Pyx_DECREF(__pyx_v_self->_last_return_values);
  __pyx_v_self->_last_return_values = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":437
 *     cdef public object _last_selector
 *     cdef public object _last_return_values
 *     cdef public object _cached_octrees             # <<<<<<<<<<<<<<
 *     cdef public object _last_octree_subset
 *     cdef public object _last_oct_handler
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_cached_octrees);
  __pyx_r = __pyx_v_self->_cached_octrees;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_cached_octrees);
  __Pyx_DECREF(__pyx_v_self->_cached_octrees);
  __pyx_v_self->_cached_octrees = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_4__del__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_cached_octrees);
  __Pyx_DECREF(__pyx_v_self->_cached_octrees);
  __pyx_v_self->_cached_octrees = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":438
 *     cdef public object _last_return_values
 *     cdef public object _cached_octrees
 *     cdef public object _last_octree_subset             # <<<<<<<<<<<<<<
 *     cdef public object _last_oct_handler
 *     cdef public object _prev_octree_subset
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_last_octree_subset);
  __pyx_r = __pyx_v_self->_last_octree_subset;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_last_octree_subset);
  __Pyx_DECREF(__pyx_v_self->_last_octree_subset);
  __pyx_v_self->_last_octree_subset = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_4__del__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_last_octree_subset);
  __Pyx_DECREF(__pyx_v_self->_last_octree_subset);
  __pyx_v_self->_last_octree_subset = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":439
 *     cdef public object _cached_octrees
 *     cdef public object _last_octree_subset
 *     cdef public object _last_oct_handler             # <<<<<<<<<<<<<<
 *     cdef public object _prev_octree_subset
 *     cdef public object _prev_oct_handler
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_last_oct_handler);
  __pyx_r = __pyx_v_self->_last_oct_handler;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_last_oct_handler);
  __Pyx_DECREF(__pyx_v_self->_last_oct_handler);
  __pyx_v_self->_last_oct_handler = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_4__del__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_last_oct_handler);
  __Pyx_DECREF(__pyx_v_self->_last_oct_handler);
  __pyx_v_self->_last_oct_handler = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":440
 *     cdef public object _last_octree_subset
 *     cdef public object _last_oct_handler
 *     cdef public object _prev_octree_subset             # <<<<<<<<<<<<<<
 *     cdef public object _prev_oct_handler
 *     cdef np.uint32_t *file_markers
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_prev_octree_subset);
  __pyx_r = __pyx_v_self->_prev_octree_subset;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_prev_octree_subset);
  __Pyx_DECREF(__pyx_v_self->_prev_octree_subset);
  __pyx_v_self->_prev_octree_subset = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_4__del__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_prev_octree_subset);
  __Pyx_DECREF(__pyx_v_self->_prev_octree_subset);
  __pyx_v_self->_prev_octree_subset = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":441
 *     cdef public object _last_oct_handler
 *     cdef public object _prev_octree_subset
 *     cdef public object _prev_oct_handler             # <<<<<<<<<<<<<<
 *     cdef np.uint32_t *file_markers
 *     cdef np.uint64_t n_file_markers
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_prev_oct_handler);
  __pyx_r = __pyx_v_self->_prev_oct_handler;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_prev_oct_handler);
  __Pyx_DECREF(__pyx_v_self->_prev_oct_handler);
  __pyx_v_self->_prev_oct_handler = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_4__del__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_prev_oct_handler);
  __Pyx_DECREF(__pyx_v_self->_prev_oct_handler);
  __pyx_v_self->_prev_oct_handler = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":445
 *     cdef np.uint64_t n_file_markers
 *     cdef np.uint64_t file_marker_i
 *     cdef public FileBitmasks bitmasks             # <<<<<<<<<<<<<<
 *     cdef public BoolArrayCollection collisions
 *     cdef public int _used_mi2
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->bitmasks);
  __pyx_r = ((PyObject *)__pyx_v_self->bitmasks);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks))))) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->bitmasks);
  __Pyx_DECREF((PyObject *)__pyx_v_self->bitmasks);
  __pyx_v_self->bitmasks = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.bitmasks.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_4__del__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->bitmasks);
  __Pyx_DECREF((PyObject *)__pyx_v_self->bitmasks);
  __pyx_v_self->bitmasks = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":446
 *     cdef np.uint64_t file_marker_i
 *     cdef public FileBitmasks bitmasks
 *     cdef public BoolArrayCollection collisions             # <<<<<<<<<<<<<<
 *     cdef public int _used_mi2
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->collisions);
  __pyx_r = ((PyObject *)__pyx_v_self->collisions);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection))))) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->collisions);
  __Pyx_DECREF((PyObject *)__pyx_v_self->collisions);
  __pyx_v_self->collisions = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.collisions.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_4__del__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_4__del__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->collisions);
  __Pyx_DECREF((PyObject *)__pyx_v_self->collisions);
  __pyx_v_self->collisions = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":447
 *     cdef public FileBitmasks bitmasks
 *     cdef public BoolArrayCollection collisions
 *     cdef public int _used_mi2             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, left_edge, right_edge, periodicity, file_hash, nfiles,
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_used_mi2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_used_mi2_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_used_mi2___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_used_mi2___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_self->_used_mi2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._used_mi2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_used_mi2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_used_mi2_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_used_mi2_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_used_mi2_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyLong_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 447, __pyx_L1_error)
  __pyx_v_self->_used_mi2 = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap._used_mi2.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.file_markers cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_91__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_91__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_91__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_91__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_90__reduce_cython__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_90__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self.file_markers cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.file_markers cannot be converted to a Python object for pickling"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_self_file_markers_cannot_be_conv, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.file_markers cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.file_markers cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.file_markers cannot be converted to a Python object for pickling"
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_93__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_93__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_93__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_93__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_92__setstate_cython__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_14ParticleBitmap_92__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self.file_markers cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self.file_markers cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_self_file_markers_cannot_be_conv, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.file_markers cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.file_markers cannot be converted to a Python object for pickling"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmap.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1450
 *     cdef BoolArrayColl ghosts_ewah
 * 
 *     def __cinit__(self, selector, bitmap, ngz=0):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef np.ndarray[np.uint8_t, ndim=1] periodicity = np.zeros(3, dtype='uint8')
*/

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_selector = 0;
  PyObject *__pyx_v_bitmap = 0;
  PyObject *__pyx_v_ngz = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_selector,&__pyx_mstate_global->__pyx_n_u_bitmap,&__pyx_mstate_global->__pyx_n_u_ngz,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1450, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1450, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1450, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1450, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 1450, __pyx_L3_error)
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_int_0));
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, i); __PYX_ERR(0, 1450, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1450, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1450, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1450, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_int_0));
    }
    __pyx_v_selector = values[0];
    __pyx_v_bitmap = values[1];
    __pyx_v_ngz = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 1450, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector___cinit__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self), __pyx_v_selector, __pyx_v_bitmap, __pyx_v_ngz);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector___cinit__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, PyObject *__pyx_v_selector, PyObject *__pyx_v_bitmap, PyObject *__pyx_v_ngz) {
  int __pyx_v_i;
  PyArrayObject *__pyx_v_periodicity = 0;
  PyArrayObject *__pyx_v_DLE = 0;
  PyArrayObject *__pyx_v_DRE = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_DLE;
  __Pyx_Buffer __pyx_pybuffer_DLE;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_DRE;
  __Pyx_Buffer __pyx_pybuffer_DRE;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_periodicity;
  __Pyx_Buffer __pyx_pybuffer_periodicity;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  __pyx_t_5numpy_uint32_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_memviewslice __pyx_t_14 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_15 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_16 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_17 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __pyx_pybuffer_periodicity.pybuffer.buf = NULL;
  __pyx_pybuffer_periodicity.refcount = 0;
  __pyx_pybuffernd_periodicity.data = NULL;
  __pyx_pybuffernd_periodicity.rcbuffer = &__pyx_pybuffer_periodicity;
  __pyx_pybuffer_DLE.pybuffer.buf = NULL;
  __pyx_pybuffer_DLE.refcount = 0;
  __pyx_pybuffernd_DLE.data = NULL;
  __pyx_pybuffernd_DLE.rcbuffer = &__pyx_pybuffer_DLE;
  __pyx_pybuffer_DRE.pybuffer.buf = NULL;
  __pyx_pybuffer_DRE.refcount = 0;
  __pyx_pybuffernd_DRE.data = NULL;
  __pyx_pybuffernd_DRE.rcbuffer = &__pyx_pybuffer_DRE;

  /* "yt/geometry/particle_oct_container.pyx":1452
 *     def __cinit__(self, selector, bitmap, ngz=0):
 *         cdef int i
 *         cdef np.ndarray[np.uint8_t, ndim=1] periodicity = np.zeros(3, dtype='uint8')             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float64_t, ndim=1] DLE = np.zeros(3, dtype='float64')
 *         cdef np.ndarray[np.float64_t, ndim=1] DRE = np.zeros(3, dtype='float64')
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_mstate_global->__pyx_int_3};
    __pyx_t_3 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint8, __pyx_t_3, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1452, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1452, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1452, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_periodicity.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_periodicity = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_periodicity.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1452, __pyx_L1_error)
    } else {__pyx_pybuffernd_periodicity.diminfo[0].strides = __pyx_pybuffernd_periodicity.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_periodicity.diminfo[0].shape = __pyx_pybuffernd_periodicity.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_v_periodicity = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1453
 *         cdef int i
 *         cdef np.ndarray[np.uint8_t, ndim=1] periodicity = np.zeros(3, dtype='uint8')
 *         cdef np.ndarray[np.float64_t, ndim=1] DLE = np.zeros(3, dtype='float64')             # <<<<<<<<<<<<<<
 *         cdef np.ndarray[np.float64_t, ndim=1] DRE = np.zeros(3, dtype='float64')
 * 
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    assert(__pyx_t_4);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_2, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_4, __pyx_mstate_global->__pyx_int_3};
    __pyx_t_3 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_float64, __pyx_t_3, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1453, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_2, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1453, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_DLE.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_DLE = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_DLE.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1453, __pyx_L1_error)
    } else {__pyx_pybuffernd_DLE.diminfo[0].strides = __pyx_pybuffernd_DLE.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_DLE.diminfo[0].shape = __pyx_pybuffernd_DLE.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_v_DLE = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1454
 *         cdef np.ndarray[np.uint8_t, ndim=1] periodicity = np.zeros(3, dtype='uint8')
 *         cdef np.ndarray[np.float64_t, ndim=1] DLE = np.zeros(3, dtype='float64')
 *         cdef np.ndarray[np.float64_t, ndim=1] DRE = np.zeros(3, dtype='float64')             # <<<<<<<<<<<<<<
 * 
 *         self.selector = selector
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_mstate_global->__pyx_int_3};
    __pyx_t_3 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_float64, __pyx_t_3, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1454, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1454, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_DRE.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_DRE = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_DRE.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1454, __pyx_L1_error)
    } else {__pyx_pybuffernd_DRE.diminfo[0].strides = __pyx_pybuffernd_DRE.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_DRE.diminfo[0].shape = __pyx_pybuffernd_DRE.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_v_DRE = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1456
 *         cdef np.ndarray[np.float64_t, ndim=1] DRE = np.zeros(3, dtype='float64')
 * 
 *         self.selector = selector             # <<<<<<<<<<<<<<
 *         self.bitmap = bitmap
 *         self.ngz = ngz
*/
  __pyx_t_1 = __pyx_v_selector;
  __Pyx_INCREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject))))) __PYX_ERR(0, 1456, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->selector);
  __Pyx_DECREF((PyObject *)__pyx_v_self->selector);
  __pyx_v_self->selector = ((struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1457
 * 
 *         self.selector = selector
 *         self.bitmap = bitmap             # <<<<<<<<<<<<<<
 *         self.ngz = ngz
 *         # Things from the bitmap & selector
*/
  __pyx_t_1 = __pyx_v_bitmap;
  __Pyx_INCREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap))))) __PYX_ERR(0, 1457, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->bitmap);
  __Pyx_DECREF((PyObject *)__pyx_v_self->bitmap);
  __pyx_v_self->bitmap = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1458
 *         self.selector = selector
 *         self.bitmap = bitmap
 *         self.ngz = ngz             # <<<<<<<<<<<<<<
 *         # Things from the bitmap & selector
 *         periodicity = selector.get_periodicity()
*/
  __pyx_t_6 = __Pyx_PyLong_As_npy_uint32(__pyx_v_ngz); if (unlikely((__pyx_t_6 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1458, __pyx_L1_error)
  __pyx_v_self->ngz = __pyx_t_6;

  /* "yt/geometry/particle_oct_container.pyx":1460
 *         self.ngz = ngz
 *         # Things from the bitmap & selector
 *         periodicity = selector.get_periodicity()             # <<<<<<<<<<<<<<
 *         DLE = bitmap.get_DLE()
 *         DRE = bitmap.get_DRE()
*/
  __pyx_t_4 = __pyx_v_selector;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_periodicity, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1460, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1460, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_periodicity.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_periodicity.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_periodicity.rcbuffer->pybuffer, (PyObject*)__pyx_v_periodicity, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_periodicity.diminfo[0].strides = __pyx_pybuffernd_periodicity.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_periodicity.diminfo[0].shape = __pyx_pybuffernd_periodicity.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1460, __pyx_L1_error)
  }
  __Pyx_DECREF_SET(__pyx_v_periodicity, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1461
 *         # Things from the bitmap & selector
 *         periodicity = selector.get_periodicity()
 *         DLE = bitmap.get_DLE()             # <<<<<<<<<<<<<<
 *         DRE = bitmap.get_DRE()
 *         for i in range(3):
*/
  __pyx_t_4 = __pyx_v_bitmap;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_DLE, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1461, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1461, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_DLE.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_DLE.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_DLE.rcbuffer->pybuffer, (PyObject*)__pyx_v_DLE, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      }
      __pyx_t_10 = __pyx_t_9 = __pyx_t_8 = 0;
    }
    __pyx_pybuffernd_DLE.diminfo[0].strides = __pyx_pybuffernd_DLE.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_DLE.diminfo[0].shape = __pyx_pybuffernd_DLE.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1461, __pyx_L1_error)
  }
  __Pyx_DECREF_SET(__pyx_v_DLE, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1462
 *         periodicity = selector.get_periodicity()
 *         DLE = bitmap.get_DLE()
 *         DRE = bitmap.get_DRE()             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             self.DLE[i] = DLE[i]
*/
  __pyx_t_4 = __pyx_v_bitmap;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_DRE, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1462, __pyx_L1_error)
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_DRE.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_DRE.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_1), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_DRE.rcbuffer->pybuffer, (PyObject*)__pyx_v_DRE, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
      __pyx_t_8 = __pyx_t_9 = __pyx_t_10 = 0;
    }
    __pyx_pybuffernd_DRE.diminfo[0].strides = __pyx_pybuffernd_DRE.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_DRE.diminfo[0].shape = __pyx_pybuffernd_DRE.rcbuffer->pybuffer.shape[0];
    if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1462, __pyx_L1_error)
  }
  __Pyx_DECREF_SET(__pyx_v_DRE, ((PyArrayObject *)__pyx_t_1));
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1463
 *         DLE = bitmap.get_DLE()
 *         DRE = bitmap.get_DRE()
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             self.DLE[i] = DLE[i]
 *             self.DRE[i] = DRE[i]
*/
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "yt/geometry/particle_oct_container.pyx":1464
 *         DRE = bitmap.get_DRE()
 *         for i in range(3):
 *             self.DLE[i] = DLE[i]             # <<<<<<<<<<<<<<
 *             self.DRE[i] = DRE[i]
 *             self.periodicity[i] = periodicity[i]
*/
    __pyx_t_11 = __pyx_v_i;
    __pyx_t_12 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_pybuffernd_DLE.diminfo[0].shape;
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_DLE.diminfo[0].shape)) __pyx_t_12 = 0;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      __PYX_ERR(0, 1464, __pyx_L1_error)
    }
    (__pyx_v_self->DLE[__pyx_v_i]) = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_DLE.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_DLE.diminfo[0].strides));

    /* "yt/geometry/particle_oct_container.pyx":1465
 *         for i in range(3):
 *             self.DLE[i] = DLE[i]
 *             self.DRE[i] = DRE[i]             # <<<<<<<<<<<<<<
 *             self.periodicity[i] = periodicity[i]
 *         self.order1 = bitmap.index_order1
*/
    __pyx_t_11 = __pyx_v_i;
    __pyx_t_12 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_pybuffernd_DRE.diminfo[0].shape;
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_DRE.diminfo[0].shape)) __pyx_t_12 = 0;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      __PYX_ERR(0, 1465, __pyx_L1_error)
    }
    (__pyx_v_self->DRE[__pyx_v_i]) = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_DRE.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_DRE.diminfo[0].strides));

    /* "yt/geometry/particle_oct_container.pyx":1466
 *             self.DLE[i] = DLE[i]
 *             self.DRE[i] = DRE[i]
 *             self.periodicity[i] = periodicity[i]             # <<<<<<<<<<<<<<
 *         self.order1 = bitmap.index_order1
 *         self.order2 = bitmap.index_order2
*/
    __pyx_t_11 = __pyx_v_i;
    __pyx_t_12 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_pybuffernd_periodicity.diminfo[0].shape;
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_periodicity.diminfo[0].shape)) __pyx_t_12 = 0;
    if (unlikely(__pyx_t_12 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_12);
      __PYX_ERR(0, 1466, __pyx_L1_error)
    }
    (__pyx_v_self->periodicity[__pyx_v_i]) = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_periodicity.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_periodicity.diminfo[0].strides));
  }

  /* "yt/geometry/particle_oct_container.pyx":1467
 *             self.DRE[i] = DRE[i]
 *             self.periodicity[i] = periodicity[i]
 *         self.order1 = bitmap.index_order1             # <<<<<<<<<<<<<<
 *         self.order2 = bitmap.index_order2
 *         self.nfiles = bitmap.nfiles
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_bitmap, __pyx_mstate_global->__pyx_n_u_index_order1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyLong_As_npy_uint32(__pyx_t_1); if (unlikely((__pyx_t_6 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->order1 = __pyx_t_6;

  /* "yt/geometry/particle_oct_container.pyx":1468
 *             self.periodicity[i] = periodicity[i]
 *         self.order1 = bitmap.index_order1
 *         self.order2 = bitmap.index_order2             # <<<<<<<<<<<<<<
 *         self.nfiles = bitmap.nfiles
 *         self.max_index1 = <np.uint64_t>(1 << self.order1)
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_bitmap, __pyx_mstate_global->__pyx_n_u_index_order2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyLong_As_npy_uint32(__pyx_t_1); if (unlikely((__pyx_t_6 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->order2 = __pyx_t_6;

  /* "yt/geometry/particle_oct_container.pyx":1469
 *         self.order1 = bitmap.index_order1
 *         self.order2 = bitmap.index_order2
 *         self.nfiles = bitmap.nfiles             # <<<<<<<<<<<<<<
 *         self.max_index1 = <np.uint64_t>(1 << self.order1)
 *         self.max_index2 = <np.uint64_t>(1 << self.order2)
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_bitmap, __pyx_mstate_global->__pyx_n_u_nfiles); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyLong_As_npy_uint32(__pyx_t_1); if (unlikely((__pyx_t_6 == ((npy_uint32)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_self->nfiles = __pyx_t_6;

  /* "yt/geometry/particle_oct_container.pyx":1470
 *         self.order2 = bitmap.index_order2
 *         self.nfiles = bitmap.nfiles
 *         self.max_index1 = <np.uint64_t>(1 << self.order1)             # <<<<<<<<<<<<<<
 *         self.max_index2 = <np.uint64_t>(1 << self.order2)
 *         self.s1 = <np.uint64_t>(1 << (self.order1*3))
*/
  __pyx_v_self->max_index1 = ((__pyx_t_5numpy_uint64_t)(1 << __pyx_v_self->order1));

  /* "yt/geometry/particle_oct_container.pyx":1471
 *         self.nfiles = bitmap.nfiles
 *         self.max_index1 = <np.uint64_t>(1 << self.order1)
 *         self.max_index2 = <np.uint64_t>(1 << self.order2)             # <<<<<<<<<<<<<<
 *         self.s1 = <np.uint64_t>(1 << (self.order1*3))
 *         self.s2 = <np.uint64_t>(1 << (self.order2*3))
*/
  __pyx_v_self->max_index2 = ((__pyx_t_5numpy_uint64_t)(1 << __pyx_v_self->order2));

  /* "yt/geometry/particle_oct_container.pyx":1472
 *         self.max_index1 = <np.uint64_t>(1 << self.order1)
 *         self.max_index2 = <np.uint64_t>(1 << self.order2)
 *         self.s1 = <np.uint64_t>(1 << (self.order1*3))             # <<<<<<<<<<<<<<
 *         self.s2 = <np.uint64_t>(1 << (self.order2*3))
 * 
*/
  __pyx_v_self->s1 = ((__pyx_t_5numpy_uint64_t)(1 << (__pyx_v_self->order1 * 3)));

  /* "yt/geometry/particle_oct_container.pyx":1473
 *         self.max_index2 = <np.uint64_t>(1 << self.order2)
 *         self.s1 = <np.uint64_t>(1 << (self.order1*3))
 *         self.s2 = <np.uint64_t>(1 << (self.order2*3))             # <<<<<<<<<<<<<<
 * 
 *         self.neighbors = np.zeros((2*ngz+1, 3), dtype='uint32')
*/
  __pyx_v_self->s2 = ((__pyx_t_5numpy_uint64_t)(1 << (__pyx_v_self->order2 * 3)));

  /* "yt/geometry/particle_oct_container.pyx":1475
 *         self.s2 = <np.uint64_t>(1 << (self.order2*3))
 * 
 *         self.neighbors = np.zeros((2*ngz+1, 3), dtype='uint32')             # <<<<<<<<<<<<<<
 *         self.ind1_n = np.zeros((2*ngz+1, 3), dtype='uint64')
 *         self.ind2_n = np.zeros((2*ngz+1, 3), dtype='uint64')
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_MultiplyCObj(__pyx_mstate_global->__pyx_int_2, __pyx_v_ngz, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_13 = __Pyx_PyLong_AddObjC(__pyx_t_3, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_13) != (0)) __PYX_ERR(0, 1475, __pyx_L1_error);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_int_3);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_mstate_global->__pyx_int_3) != (0)) __PYX_ERR(0, 1475, __pyx_L1_error);
  __pyx_t_13 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    assert(__pyx_t_4);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_2, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_13 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint32, __pyx_t_13, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1475, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_2, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_13);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_14 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_uint32_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_14.memview)) __PYX_ERR(0, 1475, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->neighbors, 0);
  __pyx_v_self->neighbors = __pyx_t_14;
  __pyx_t_14.memview = NULL;
  __pyx_t_14.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1476
 * 
 *         self.neighbors = np.zeros((2*ngz+1, 3), dtype='uint32')
 *         self.ind1_n = np.zeros((2*ngz+1, 3), dtype='uint64')             # <<<<<<<<<<<<<<
 *         self.ind2_n = np.zeros((2*ngz+1, 3), dtype='uint64')
 *         self.neighbor_list1 = np.zeros((2*ngz+1)**3, dtype='uint64')
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = __Pyx_PyLong_MultiplyCObj(__pyx_mstate_global->__pyx_int_2, __pyx_v_ngz, 2, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_4 = __Pyx_PyLong_AddObjC(__pyx_t_13, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_4) != (0)) __PYX_ERR(0, 1476, __pyx_L1_error);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_int_3);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_mstate_global->__pyx_int_3) != (0)) __PYX_ERR(0, 1476, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_t_13};
    __pyx_t_4 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint64, __pyx_t_4, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1476, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_15 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_uint64_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 1476, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->ind1_n, 0);
  __pyx_v_self->ind1_n = __pyx_t_15;
  __pyx_t_15.memview = NULL;
  __pyx_t_15.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1477
 *         self.neighbors = np.zeros((2*ngz+1, 3), dtype='uint32')
 *         self.ind1_n = np.zeros((2*ngz+1, 3), dtype='uint64')
 *         self.ind2_n = np.zeros((2*ngz+1, 3), dtype='uint64')             # <<<<<<<<<<<<<<
 *         self.neighbor_list1 = np.zeros((2*ngz+1)**3, dtype='uint64')
 *         self.neighbor_list2 = np.zeros((2*ngz+1)**3, dtype='uint64')
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyLong_MultiplyCObj(__pyx_mstate_global->__pyx_int_2, __pyx_v_ngz, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyLong_AddObjC(__pyx_t_4, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2) != (0)) __PYX_ERR(0, 1477, __pyx_L1_error);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_int_3);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_mstate_global->__pyx_int_3) != (0)) __PYX_ERR(0, 1477, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_13);
    assert(__pyx_t_3);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_13);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_13, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, __pyx_t_4};
    __pyx_t_2 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint64, __pyx_t_2, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1477, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_13, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1477, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_15 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_uint64_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->ind2_n, 0);
  __pyx_v_self->ind2_n = __pyx_t_15;
  __pyx_t_15.memview = NULL;
  __pyx_t_15.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1478
 *         self.ind1_n = np.zeros((2*ngz+1, 3), dtype='uint64')
 *         self.ind2_n = np.zeros((2*ngz+1, 3), dtype='uint64')
 *         self.neighbor_list1 = np.zeros((2*ngz+1)**3, dtype='uint64')             # <<<<<<<<<<<<<<
 *         self.neighbor_list2 = np.zeros((2*ngz+1)**3, dtype='uint64')
 *         self.file_mask_p = np.zeros(bitmap.nfiles, dtype='uint8')
*/
  __pyx_t_13 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyLong_MultiplyCObj(__pyx_mstate_global->__pyx_int_2, __pyx_v_ngz, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyLong_AddObjC(__pyx_t_2, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Power(__pyx_t_3, __pyx_mstate_global->__pyx_int_3, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_13);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_13);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_13, __pyx_t_2};
    __pyx_t_3 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint64, __pyx_t_3, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1478, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_16 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint64_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_16.memview)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->neighbor_list1, 0);
  __pyx_v_self->neighbor_list1 = __pyx_t_16;
  __pyx_t_16.memview = NULL;
  __pyx_t_16.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1479
 *         self.ind2_n = np.zeros((2*ngz+1, 3), dtype='uint64')
 *         self.neighbor_list1 = np.zeros((2*ngz+1)**3, dtype='uint64')
 *         self.neighbor_list2 = np.zeros((2*ngz+1)**3, dtype='uint64')             # <<<<<<<<<<<<<<
 *         self.file_mask_p = np.zeros(bitmap.nfiles, dtype='uint8')
 *         self.file_mask_g = np.zeros(bitmap.nfiles, dtype='uint8')
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_MultiplyCObj(__pyx_mstate_global->__pyx_int_2, __pyx_v_ngz, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_13 = __Pyx_PyLong_AddObjC(__pyx_t_3, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Power(__pyx_t_13, __pyx_mstate_global->__pyx_int_3, Py_None); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    assert(__pyx_t_4);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_2, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_13 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint64, __pyx_t_13, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1479, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_2, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_13);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1479, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_16 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint64_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_16.memview)) __PYX_ERR(0, 1479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->neighbor_list2, 0);
  __pyx_v_self->neighbor_list2 = __pyx_t_16;
  __pyx_t_16.memview = NULL;
  __pyx_t_16.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1480
 *         self.neighbor_list1 = np.zeros((2*ngz+1)**3, dtype='uint64')
 *         self.neighbor_list2 = np.zeros((2*ngz+1)**3, dtype='uint64')
 *         self.file_mask_p = np.zeros(bitmap.nfiles, dtype='uint8')             # <<<<<<<<<<<<<<
 *         self.file_mask_g = np.zeros(bitmap.nfiles, dtype='uint8')
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_bitmap, __pyx_mstate_global->__pyx_n_u_nfiles); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_2, __pyx_t_13};
    __pyx_t_4 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint8, __pyx_t_4, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1480, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_17 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_17.memview)) __PYX_ERR(0, 1480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->file_mask_p, 0);
  __pyx_v_self->file_mask_p = __pyx_t_17;
  __pyx_t_17.memview = NULL;
  __pyx_t_17.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1481
 *         self.neighbor_list2 = np.zeros((2*ngz+1)**3, dtype='uint64')
 *         self.file_mask_p = np.zeros(bitmap.nfiles, dtype='uint8')
 *         self.file_mask_g = np.zeros(bitmap.nfiles, dtype='uint8')             # <<<<<<<<<<<<<<
 * 
 *         self.refined_select_bool = np.zeros(self.s2, 'uint8')
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_bitmap, __pyx_mstate_global->__pyx_n_u_nfiles); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_13);
    assert(__pyx_t_3);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_13);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_13, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_3, __pyx_t_4};
    __pyx_t_2 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_uint8, __pyx_t_2, __pyx_callargs+2, 0) < 0) __PYX_ERR(0, 1481, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_13, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_17 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_17.memview)) __PYX_ERR(0, 1481, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->file_mask_g, 0);
  __pyx_v_self->file_mask_g = __pyx_t_17;
  __pyx_t_17.memview = NULL;
  __pyx_t_17.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1483
 *         self.file_mask_g = np.zeros(bitmap.nfiles, dtype='uint8')
 * 
 *         self.refined_select_bool = np.zeros(self.s2, 'uint8')             # <<<<<<<<<<<<<<
 *         self.refined_ghosts_bool = np.zeros(self.s2, 'uint8')
 *         self.coarse_select_bool = np.zeros(self.s1, 'uint8')
*/
  __pyx_t_13 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->s2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_13);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_13);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_t_2, __pyx_mstate_global->__pyx_n_u_uint8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1483, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_17 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_17.memview)) __PYX_ERR(0, 1483, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->refined_select_bool, 0);
  __pyx_v_self->refined_select_bool = __pyx_t_17;
  __pyx_t_17.memview = NULL;
  __pyx_t_17.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1484
 * 
 *         self.refined_select_bool = np.zeros(self.s2, 'uint8')
 *         self.refined_ghosts_bool = np.zeros(self.s2, 'uint8')             # <<<<<<<<<<<<<<
 *         self.coarse_select_bool = np.zeros(self.s1, 'uint8')
 *         self.coarse_ghosts_bool = np.zeros(self.s1, 'uint8')
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->s2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_13);
    assert(__pyx_t_4);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_13);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_13, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_2, __pyx_mstate_global->__pyx_n_u_uint8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_17 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_17.memview)) __PYX_ERR(0, 1484, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->refined_ghosts_bool, 0);
  __pyx_v_self->refined_ghosts_bool = __pyx_t_17;
  __pyx_t_17.memview = NULL;
  __pyx_t_17.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1485
 *         self.refined_select_bool = np.zeros(self.s2, 'uint8')
 *         self.refined_ghosts_bool = np.zeros(self.s2, 'uint8')
 *         self.coarse_select_bool = np.zeros(self.s1, 'uint8')             # <<<<<<<<<<<<<<
 *         self.coarse_ghosts_bool = np.zeros(self.s1, 'uint8')
 * 
*/
  __pyx_t_13 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->s1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_13);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_13);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_t_2, __pyx_mstate_global->__pyx_n_u_uint8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1485, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_17 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_17.memview)) __PYX_ERR(0, 1485, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->coarse_select_bool, 0);
  __pyx_v_self->coarse_select_bool = __pyx_t_17;
  __pyx_t_17.memview = NULL;
  __pyx_t_17.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1486
 *         self.refined_ghosts_bool = np.zeros(self.s2, 'uint8')
 *         self.coarse_select_bool = np.zeros(self.s1, 'uint8')
 *         self.coarse_ghosts_bool = np.zeros(self.s1, 'uint8')             # <<<<<<<<<<<<<<
 * 
 *         self.refined_ghosts_list = SparseUnorderedRefinedBitmask()
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->s1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_13);
    assert(__pyx_t_4);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_13);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_13, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_2, __pyx_mstate_global->__pyx_n_u_uint8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_17 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_17.memview)) __PYX_ERR(0, 1486, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->coarse_ghosts_bool, 0);
  __pyx_v_self->coarse_ghosts_bool = __pyx_t_17;
  __pyx_t_17.memview = NULL;
  __pyx_t_17.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1488
 *         self.coarse_ghosts_bool = np.zeros(self.s1, 'uint8')
 * 
 *         self.refined_ghosts_list = SparseUnorderedRefinedBitmask()             # <<<<<<<<<<<<<<
 *         self.select_ewah = BoolArrayColl(self.s1, self.s2)
 *         self.ghosts_ewah = BoolArrayColl(self.s1, self.s2)
*/
  __pyx_t_13 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet);
  __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet); 
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_13, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1488, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __Pyx_GIVEREF((PyObject *)__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->refined_ghosts_list);
  __Pyx_DECREF((PyObject *)__pyx_v_self->refined_ghosts_list);
  __pyx_v_self->refined_ghosts_list = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1489
 * 
 *         self.refined_ghosts_list = SparseUnorderedRefinedBitmask()
 *         self.select_ewah = BoolArrayColl(self.s1, self.s2)             # <<<<<<<<<<<<<<
 *         self.ghosts_ewah = BoolArrayColl(self.s1, self.s2)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed);
  __pyx_t_13 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed); 
  __pyx_t_4 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->s1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->s2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1489, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __Pyx_GIVEREF((PyObject *)__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->select_ewah);
  __Pyx_DECREF((PyObject *)__pyx_v_self->select_ewah);
  __pyx_v_self->select_ewah = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1490
 *         self.refined_ghosts_list = SparseUnorderedRefinedBitmask()
 *         self.select_ewah = BoolArrayColl(self.s1, self.s2)
 *         self.ghosts_ewah = BoolArrayColl(self.s1, self.s2)             # <<<<<<<<<<<<<<
 * 
 *     def fill_masks(self, BoolArrayCollection mm_s, BoolArrayCollection mm_g = None):
*/
  __pyx_t_13 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed); 
  __pyx_t_4 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->s1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->s2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_t_4, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1490, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __Pyx_GIVEREF((PyObject *)__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->ghosts_ewah);
  __Pyx_DECREF((PyObject *)__pyx_v_self->ghosts_ewah);
  __pyx_v_self->ghosts_ewah = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1450
 *     cdef BoolArrayColl ghosts_ewah
 * 
 *     def __cinit__(self, selector, bitmap, ngz=0):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef np.ndarray[np.uint8_t, ndim=1] periodicity = np.zeros(3, dtype='uint8')
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_13);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_14, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_15, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_16, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_17, 1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_DLE.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_DRE.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_periodicity.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_DLE.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_DRE.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_periodicity.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_periodicity);
  __Pyx_XDECREF((PyObject *)__pyx_v_DLE);
  __Pyx_XDECREF((PyObject *)__pyx_v_DRE);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1492
 *         self.ghosts_ewah = BoolArrayColl(self.s1, self.s2)
 * 
 *     def fill_masks(self, BoolArrayCollection mm_s, BoolArrayCollection mm_g = None):             # <<<<<<<<<<<<<<
 *         # Normal variables
 *         cdef int i
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_3fill_masks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_3fill_masks = {"fill_masks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_3fill_masks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_3fill_masks(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_s = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_g = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fill_masks (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_mm_s,&__pyx_mstate_global->__pyx_n_u_mm_g,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1492, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1492, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1492, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "fill_masks", 0) < 0) __PYX_ERR(0, 1492, __pyx_L3_error)
      if (!values[1]) values[1] = __Pyx_NewRef((PyObject *)((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("fill_masks", 0, 1, 2, i); __PYX_ERR(0, 1492, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1492, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1492, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[1]) values[1] = __Pyx_NewRef((PyObject *)((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None));
    }
    __pyx_v_mm_s = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[0]);
    __pyx_v_mm_g = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_masks", 0, 1, 2, __pyx_nargs); __PYX_ERR(0, 1492, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.fill_masks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mm_s), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "mm_s", 0))) __PYX_ERR(0, 1492, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mm_g), __pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection, 1, "mm_g", 0))) __PYX_ERR(0, 1492, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_2fill_masks(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self), __pyx_v_mm_s, __pyx_v_mm_g);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_2fill_masks(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *__pyx_v_mm_g) {
  int __pyx_v_i;
  __pyx_t_5numpy_int32_t __pyx_v_level;
  __pyx_t_5numpy_uint64_t __pyx_v_mi1;
  __pyx_t_5numpy_float64_t __pyx_v_pos[3];
  __pyx_t_5numpy_float64_t __pyx_v_dds[3];
  __pyx_t_5numpy_uint64_t __pyx_v_cur_ind[3];
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_s0 = 0;
  struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_g0 = 0;
  __pyx_t_5numpy_float64_t __pyx_v_rpos[3];
  int __pyx_v_sbbox;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __pyx_t_5numpy_uint64_t __pyx_t_9;
  __pyx_t_5numpy_uint64_t __pyx_t_10;
  __pyx_t_5numpy_uint64_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fill_masks", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_mm_g);

  /* "yt/geometry/particle_oct_container.pyx":1495
 *         # Normal variables
 *         cdef int i
 *         cdef np.int32_t level = 0             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t mi1
 *         mi1 = ~(<np.uint64_t>0)
*/
  __pyx_v_level = 0;

  /* "yt/geometry/particle_oct_container.pyx":1497
 *         cdef np.int32_t level = 0
 *         cdef np.uint64_t mi1
 *         mi1 = ~(<np.uint64_t>0)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t pos[3]
 *         cdef np.float64_t dds[3]
*/
  __pyx_v_mi1 = (~((__pyx_t_5numpy_uint64_t)0));

  /* "yt/geometry/particle_oct_container.pyx":1501
 *         cdef np.float64_t dds[3]
 *         cdef np.uint64_t cur_ind[3]
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             cur_ind[i] = 0
 *             pos[i] = self.DLE[i]
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":1502
 *         cdef np.uint64_t cur_ind[3]
 *         for i in range(3):
 *             cur_ind[i] = 0             # <<<<<<<<<<<<<<
 *             pos[i] = self.DLE[i]
 *             dds[i] = self.DRE[i] - self.DLE[i]
*/
    (__pyx_v_cur_ind[__pyx_v_i]) = 0;

    /* "yt/geometry/particle_oct_container.pyx":1503
 *         for i in range(3):
 *             cur_ind[i] = 0
 *             pos[i] = self.DLE[i]             # <<<<<<<<<<<<<<
 *             dds[i] = self.DRE[i] - self.DLE[i]
 *         if mm_g is None:
*/
    (__pyx_v_pos[__pyx_v_i]) = (__pyx_v_self->DLE[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":1504
 *             cur_ind[i] = 0
 *             pos[i] = self.DLE[i]
 *             dds[i] = self.DRE[i] - self.DLE[i]             # <<<<<<<<<<<<<<
 *         if mm_g is None:
 *             mm_g = BoolArrayCollection()
*/
    (__pyx_v_dds[__pyx_v_i]) = ((__pyx_v_self->DRE[__pyx_v_i]) - (__pyx_v_self->DLE[__pyx_v_i]));
  }

  /* "yt/geometry/particle_oct_container.pyx":1505
 *             pos[i] = self.DLE[i]
 *             dds[i] = self.DRE[i] - self.DLE[i]
 *         if mm_g is None:             # <<<<<<<<<<<<<<
 *             mm_g = BoolArrayCollection()
 *         # Uncompressed version
*/
  __pyx_t_2 = (((PyObject *)__pyx_v_mm_g) == Py_None);
  if (__pyx_t_2) {

    /* "yt/geometry/particle_oct_container.pyx":1506
 *             dds[i] = self.DRE[i] - self.DLE[i]
 *         if mm_g is None:
 *             mm_g = BoolArrayCollection()             # <<<<<<<<<<<<<<
 *         # Uncompressed version
 *         cdef BoolArrayColl mm_s0
*/
    __pyx_t_4 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection);
    __pyx_t_5 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); 
    __pyx_t_6 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1506, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_3);
    }
    __Pyx_DECREF_SET(__pyx_v_mm_g, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1505
 *             pos[i] = self.DLE[i]
 *             dds[i] = self.DRE[i] - self.DLE[i]
 *         if mm_g is None:             # <<<<<<<<<<<<<<
 *             mm_g = BoolArrayCollection()
 *         # Uncompressed version
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":1510
 *         cdef BoolArrayColl mm_s0
 *         cdef BoolArrayColl mm_g0
 *         mm_s0 = BoolArrayColl(self.s1, self.s2)             # <<<<<<<<<<<<<<
 *         mm_g0 = BoolArrayColl(self.s1, self.s2)
 *         # Recurse
*/
  __pyx_t_5 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed);
  __pyx_t_4 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed); 
  __pyx_t_7 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->s1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->s2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_7, __pyx_t_8};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1510, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_3);
  }
  __pyx_v_mm_s0 = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1511
 *         cdef BoolArrayColl mm_g0
 *         mm_s0 = BoolArrayColl(self.s1, self.s2)
 *         mm_g0 = BoolArrayColl(self.s1, self.s2)             # <<<<<<<<<<<<<<
 *         # Recurse
 *         cdef np.float64_t rpos[3]
*/
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed);
  __pyx_t_8 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed); 
  __pyx_t_7 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->s1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyLong_From_npy_uint64(__pyx_v_self->s2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_7, __pyx_t_5};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1511, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_3);
  }
  __pyx_v_mm_g0 = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1514
 *         # Recurse
 *         cdef np.float64_t rpos[3]
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             rpos[i] = self.DRE[i] - self.bitmap.dds_mi2[i]/2.0
 *         sbbox = self.selector.select_bbox_edge(pos, rpos)
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":1515
 *         cdef np.float64_t rpos[3]
 *         for i in range(3):
 *             rpos[i] = self.DRE[i] - self.bitmap.dds_mi2[i]/2.0             # <<<<<<<<<<<<<<
 *         sbbox = self.selector.select_bbox_edge(pos, rpos)
 *         if sbbox == 1:
*/
    (__pyx_v_rpos[__pyx_v_i]) = ((__pyx_v_self->DRE[__pyx_v_i]) - ((__pyx_v_self->bitmap->dds_mi2[__pyx_v_i]) / 2.0));
  }

  /* "yt/geometry/particle_oct_container.pyx":1516
 *         for i in range(3):
 *             rpos[i] = self.DRE[i] - self.bitmap.dds_mi2[i]/2.0
 *         sbbox = self.selector.select_bbox_edge(pos, rpos)             # <<<<<<<<<<<<<<
 *         if sbbox == 1:
 *             for mi1 in range(<np.uint64_t>self.s1):
*/
  __pyx_v_sbbox = ((struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject *)__pyx_v_self->selector->__pyx_vtab)->select_bbox_edge(__pyx_v_self->selector, __pyx_v_pos, __pyx_v_rpos);

  /* "yt/geometry/particle_oct_container.pyx":1517
 *             rpos[i] = self.DRE[i] - self.bitmap.dds_mi2[i]/2.0
 *         sbbox = self.selector.select_bbox_edge(pos, rpos)
 *         if sbbox == 1:             # <<<<<<<<<<<<<<
 *             for mi1 in range(<np.uint64_t>self.s1):
 *                 mm_s0._set_coarse(mi1)
*/
  __pyx_t_2 = (__pyx_v_sbbox == 1);
  if (__pyx_t_2) {

    /* "yt/geometry/particle_oct_container.pyx":1518
 *         sbbox = self.selector.select_bbox_edge(pos, rpos)
 *         if sbbox == 1:
 *             for mi1 in range(<np.uint64_t>self.s1):             # <<<<<<<<<<<<<<
 *                 mm_s0._set_coarse(mi1)
 *             mm_s0._compress(mm_s)
*/
    __pyx_t_9 = ((__pyx_t_5numpy_uint64_t)__pyx_v_self->s1);
    __pyx_t_10 = __pyx_t_9;
    for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
      __pyx_v_mi1 = __pyx_t_11;

      /* "yt/geometry/particle_oct_container.pyx":1519
 *         if sbbox == 1:
 *             for mi1 in range(<np.uint64_t>self.s1):
 *                 mm_s0._set_coarse(mi1)             # <<<<<<<<<<<<<<
 *             mm_s0._compress(mm_s)
 *             return
*/
      ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_mm_s0->__pyx_vtab)->_set_coarse(__pyx_v_mm_s0, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1519, __pyx_L1_error)
    }

    /* "yt/geometry/particle_oct_container.pyx":1520
 *             for mi1 in range(<np.uint64_t>self.s1):
 *                 mm_s0._set_coarse(mi1)
 *             mm_s0._compress(mm_s)             # <<<<<<<<<<<<<<
 *             return
 *         else:
*/
    ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_mm_s0->__pyx_vtab)->_compress(__pyx_v_mm_s0, __pyx_v_mm_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1520, __pyx_L1_error)

    /* "yt/geometry/particle_oct_container.pyx":1521
 *                 mm_s0._set_coarse(mi1)
 *             mm_s0._compress(mm_s)
 *             return             # <<<<<<<<<<<<<<
 *         else:
 *             self.recursive_morton_mask(level, pos, dds, mi1, cur_ind)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yt/geometry/particle_oct_container.pyx":1517
 *             rpos[i] = self.DRE[i] - self.bitmap.dds_mi2[i]/2.0
 *         sbbox = self.selector.select_bbox_edge(pos, rpos)
 *         if sbbox == 1:             # <<<<<<<<<<<<<<
 *             for mi1 in range(<np.uint64_t>self.s1):
 *                 mm_s0._set_coarse(mi1)
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":1523
 *             return
 *         else:
 *             self.recursive_morton_mask(level, pos, dds, mi1, cur_ind)             # <<<<<<<<<<<<<<
 *         # Set coarse morton indices in order
 *         self.set_coarse_bool(mm_s0, mm_g0)
*/
  /*else*/ {
    __pyx_t_1 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->recursive_morton_mask(__pyx_v_self, __pyx_v_level, __pyx_v_pos, __pyx_v_dds, __pyx_v_mi1, __pyx_v_cur_ind); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 1523, __pyx_L1_error)
  }

  /* "yt/geometry/particle_oct_container.pyx":1525
 *             self.recursive_morton_mask(level, pos, dds, mi1, cur_ind)
 *         # Set coarse morton indices in order
 *         self.set_coarse_bool(mm_s0, mm_g0)             # <<<<<<<<<<<<<<
 *         self.set_refined_list(mm_s0, mm_g0)
 *         self.set_refined_bool(mm_s0, mm_g0)
*/
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->set_coarse_bool(__pyx_v_self, __pyx_v_mm_s0, __pyx_v_mm_g0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1525, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1526
 *         # Set coarse morton indices in order
 *         self.set_coarse_bool(mm_s0, mm_g0)
 *         self.set_refined_list(mm_s0, mm_g0)             # <<<<<<<<<<<<<<
 *         self.set_refined_bool(mm_s0, mm_g0)
 *         # Compress
*/
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->set_refined_list(__pyx_v_self, __pyx_v_mm_s0, __pyx_v_mm_g0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1526, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1527
 *         self.set_coarse_bool(mm_s0, mm_g0)
 *         self.set_refined_list(mm_s0, mm_g0)
 *         self.set_refined_bool(mm_s0, mm_g0)             # <<<<<<<<<<<<<<
 *         # Compress
 *         mm_s0._compress(mm_s)
*/
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->set_refined_bool(__pyx_v_self, __pyx_v_mm_s0, __pyx_v_mm_g0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1527, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1529
 *         self.set_refined_bool(mm_s0, mm_g0)
 *         # Compress
 *         mm_s0._compress(mm_s)             # <<<<<<<<<<<<<<
 *         mm_g0._compress(mm_g)
 * 
*/
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_mm_s0->__pyx_vtab)->_compress(__pyx_v_mm_s0, __pyx_v_mm_s); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1529, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1530
 *         # Compress
 *         mm_s0._compress(mm_s)
 *         mm_g0._compress(mm_g)             # <<<<<<<<<<<<<<
 * 
 *     def find_files(self,
*/
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_mm_g0->__pyx_vtab)->_compress(__pyx_v_mm_g0, __pyx_v_mm_g); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1530, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1492
 *         self.ghosts_ewah = BoolArrayColl(self.s1, self.s2)
 * 
 *     def fill_masks(self, BoolArrayCollection mm_s, BoolArrayCollection mm_g = None):             # <<<<<<<<<<<<<<
 *         # Normal variables
 *         cdef int i
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.fill_masks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mm_s0);
  __Pyx_XDECREF((PyObject *)__pyx_v_mm_g0);
  __Pyx_XDECREF((PyObject *)__pyx_v_mm_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1532
 *         mm_g0._compress(mm_g)
 * 
 *     def find_files(self,             # <<<<<<<<<<<<<<
 *                    np.ndarray[np.uint8_t, ndim=1] file_mask_p,
 *                    np.ndarray[np.uint8_t, ndim=1] file_mask_g):
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_5find_files(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_5find_files = {"find_files", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_5find_files, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_5find_files(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_file_mask_p = 0;
  PyArrayObject *__pyx_v_file_mask_g = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_files (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_file_mask_p,&__pyx_mstate_global->__pyx_n_u_file_mask_g,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1532, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1532, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1532, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "find_files", 0) < 0) __PYX_ERR(0, 1532, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("find_files", 1, 2, 2, i); __PYX_ERR(0, 1532, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1532, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1532, __pyx_L3_error)
    }
    __pyx_v_file_mask_p = ((PyArrayObject *)values[0]);
    __pyx_v_file_mask_g = ((PyArrayObject *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_files", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1532, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.find_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_file_mask_p), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "file_mask_p", 0))) __PYX_ERR(0, 1533, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_file_mask_g), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "file_mask_g", 0))) __PYX_ERR(0, 1534, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_4find_files(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self), __pyx_v_file_mask_p, __pyx_v_file_mask_g);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_4find_files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, PyArrayObject *__pyx_v_file_mask_p, PyArrayObject *__pyx_v_file_mask_g) {
  __pyx_t_5numpy_uint64_t __pyx_v_i;
  __pyx_t_5numpy_int32_t __pyx_v_level;
  __pyx_t_5numpy_uint64_t __pyx_v_mi1;
  __pyx_t_5numpy_float64_t __pyx_v_pos[3];
  __pyx_t_5numpy_float64_t __pyx_v_dds[3];
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_mask_g;
  __Pyx_Buffer __pyx_pybuffer_file_mask_g;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_file_mask_p;
  __Pyx_Buffer __pyx_pybuffer_file_mask_p;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  __pyx_t_5numpy_uint32_t __pyx_t_2;
  __pyx_t_5numpy_uint32_t __pyx_t_3;
  __pyx_t_5numpy_uint64_t __pyx_t_4;
  int __pyx_t_5;
  __pyx_t_5numpy_uint64_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_files", 0);
  __pyx_pybuffer_file_mask_p.pybuffer.buf = NULL;
  __pyx_pybuffer_file_mask_p.refcount = 0;
  __pyx_pybuffernd_file_mask_p.data = NULL;
  __pyx_pybuffernd_file_mask_p.rcbuffer = &__pyx_pybuffer_file_mask_p;
  __pyx_pybuffer_file_mask_g.pybuffer.buf = NULL;
  __pyx_pybuffer_file_mask_g.refcount = 0;
  __pyx_pybuffernd_file_mask_g.data = NULL;
  __pyx_pybuffernd_file_mask_g.rcbuffer = &__pyx_pybuffer_file_mask_g;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_mask_p, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1532, __pyx_L1_error)
  }
  __pyx_pybuffernd_file_mask_p.diminfo[0].strides = __pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_mask_p.diminfo[0].shape = __pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer, (PyObject*)__pyx_v_file_mask_g, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1532, __pyx_L1_error)
  }
  __pyx_pybuffernd_file_mask_g.diminfo[0].strides = __pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_file_mask_g.diminfo[0].shape = __pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":1536
 *                    np.ndarray[np.uint8_t, ndim=1] file_mask_g):
 *         cdef np.uint64_t i
 *         cdef np.int32_t level = 0             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t mi1
 *         mi1 = ~(<np.uint64_t>0)
*/
  __pyx_v_level = 0;

  /* "yt/geometry/particle_oct_container.pyx":1538
 *         cdef np.int32_t level = 0
 *         cdef np.uint64_t mi1
 *         mi1 = ~(<np.uint64_t>0)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t pos[3]
 *         cdef np.float64_t dds[3]
*/
  __pyx_v_mi1 = (~((__pyx_t_5numpy_uint64_t)0));

  /* "yt/geometry/particle_oct_container.pyx":1541
 *         cdef np.float64_t pos[3]
 *         cdef np.float64_t dds[3]
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             pos[i] = self.DLE[i]
 *             dds[i] = self.DRE[i] - self.DLE[i]
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":1542
 *         cdef np.float64_t dds[3]
 *         for i in range(3):
 *             pos[i] = self.DLE[i]             # <<<<<<<<<<<<<<
 *             dds[i] = self.DRE[i] - self.DLE[i]
 *         # Fill with input
*/
    (__pyx_v_pos[__pyx_v_i]) = (__pyx_v_self->DLE[__pyx_v_i]);

    /* "yt/geometry/particle_oct_container.pyx":1543
 *         for i in range(3):
 *             pos[i] = self.DLE[i]
 *             dds[i] = self.DRE[i] - self.DLE[i]             # <<<<<<<<<<<<<<
 *         # Fill with input
 *         for i in range(self.nfiles):
*/
    (__pyx_v_dds[__pyx_v_i]) = ((__pyx_v_self->DRE[__pyx_v_i]) - (__pyx_v_self->DLE[__pyx_v_i]));
  }

  /* "yt/geometry/particle_oct_container.pyx":1545
 *             dds[i] = self.DRE[i] - self.DLE[i]
 *         # Fill with input
 *         for i in range(self.nfiles):             # <<<<<<<<<<<<<<
 *             self.file_mask_p[i] = file_mask_p[i]
 *             self.file_mask_g[i] = file_mask_g[i]
*/
  __pyx_t_2 = __pyx_v_self->nfiles;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":1546
 *         # Fill with input
 *         for i in range(self.nfiles):
 *             self.file_mask_p[i] = file_mask_p[i]             # <<<<<<<<<<<<<<
 *             self.file_mask_g[i] = file_mask_g[i]
 *         # Recurse
*/
    __pyx_t_4 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (unlikely(__pyx_t_4 >= (size_t)__pyx_pybuffernd_file_mask_p.diminfo[0].shape)) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(0, 1546, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->file_mask_p.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1546, __pyx_L1_error)}
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (unlikely(__pyx_t_6 >= (size_t)__pyx_v_self->file_mask_p.shape[0])) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(0, 1546, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_p.data + __pyx_t_6 * __pyx_v_self->file_mask_p.strides[0]) )) = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_file_mask_p.diminfo[0].strides));

    /* "yt/geometry/particle_oct_container.pyx":1547
 *         for i in range(self.nfiles):
 *             self.file_mask_p[i] = file_mask_p[i]
 *             self.file_mask_g[i] = file_mask_g[i]             # <<<<<<<<<<<<<<
 *         # Recurse
 *         self.recursive_morton_files(level, pos, dds, mi1)
*/
    __pyx_t_4 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (unlikely(__pyx_t_4 >= (size_t)__pyx_pybuffernd_file_mask_g.diminfo[0].shape)) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(0, 1547, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->file_mask_g.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1547, __pyx_L1_error)}
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (unlikely(__pyx_t_6 >= (size_t)__pyx_v_self->file_mask_g.shape[0])) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(0, 1547, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_g.data + __pyx_t_6 * __pyx_v_self->file_mask_g.strides[0]) )) = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_file_mask_g.diminfo[0].strides));
  }

  /* "yt/geometry/particle_oct_container.pyx":1549
 *             self.file_mask_g[i] = file_mask_g[i]
 *         # Recurse
 *         self.recursive_morton_files(level, pos, dds, mi1)             # <<<<<<<<<<<<<<
 *         # Fill with results
 *         for i in range(self.nfiles):
*/
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->recursive_morton_files(__pyx_v_self, __pyx_v_level, __pyx_v_pos, __pyx_v_dds, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1549, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1551
 *         self.recursive_morton_files(level, pos, dds, mi1)
 *         # Fill with results
 *         for i in range(self.nfiles):             # <<<<<<<<<<<<<<
 *             file_mask_p[i] = self.file_mask_p[i]
 *             if file_mask_p[i]:
*/
  __pyx_t_2 = __pyx_v_self->nfiles;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":1552
 *         # Fill with results
 *         for i in range(self.nfiles):
 *             file_mask_p[i] = self.file_mask_p[i]             # <<<<<<<<<<<<<<
 *             if file_mask_p[i]:
 *                 file_mask_g[i] = 0
*/
    if (unlikely(!__pyx_v_self->file_mask_p.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1552, __pyx_L1_error)}
    __pyx_t_4 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (unlikely(__pyx_t_4 >= (size_t)__pyx_v_self->file_mask_p.shape[0])) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(0, 1552, __pyx_L1_error)
    }
    __pyx_t_6 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (unlikely(__pyx_t_6 >= (size_t)__pyx_pybuffernd_file_mask_p.diminfo[0].shape)) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(0, 1552, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_file_mask_p.diminfo[0].strides) = (*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_p.data + __pyx_t_4 * __pyx_v_self->file_mask_p.strides[0]) )));

    /* "yt/geometry/particle_oct_container.pyx":1553
 *         for i in range(self.nfiles):
 *             file_mask_p[i] = self.file_mask_p[i]
 *             if file_mask_p[i]:             # <<<<<<<<<<<<<<
 *                 file_mask_g[i] = 0
 *             else:
*/
    __pyx_t_4 = __pyx_v_i;
    __pyx_t_5 = -1;
    if (unlikely(__pyx_t_4 >= (size_t)__pyx_pybuffernd_file_mask_p.diminfo[0].shape)) __pyx_t_5 = 0;
    if (unlikely(__pyx_t_5 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_5);
      __PYX_ERR(0, 1553, __pyx_L1_error)
    }
    __pyx_t_7 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_file_mask_p.diminfo[0].strides)) != 0);
    if (__pyx_t_7) {

      /* "yt/geometry/particle_oct_container.pyx":1554
 *             file_mask_p[i] = self.file_mask_p[i]
 *             if file_mask_p[i]:
 *                 file_mask_g[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 file_mask_g[i] = self.file_mask_g[i]
*/
      __pyx_t_4 = __pyx_v_i;
      __pyx_t_5 = -1;
      if (unlikely(__pyx_t_4 >= (size_t)__pyx_pybuffernd_file_mask_g.diminfo[0].shape)) __pyx_t_5 = 0;
      if (unlikely(__pyx_t_5 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_5);
        __PYX_ERR(0, 1554, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_file_mask_g.diminfo[0].strides) = 0;

      /* "yt/geometry/particle_oct_container.pyx":1553
 *         for i in range(self.nfiles):
 *             file_mask_p[i] = self.file_mask_p[i]
 *             if file_mask_p[i]:             # <<<<<<<<<<<<<<
 *                 file_mask_g[i] = 0
 *             else:
*/
      goto __pyx_L9;
    }

    /* "yt/geometry/particle_oct_container.pyx":1556
 *                 file_mask_g[i] = 0
 *             else:
 *                 file_mask_g[i] = self.file_mask_g[i]             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
    /*else*/ {
      if (unlikely(!__pyx_v_self->file_mask_g.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1556, __pyx_L1_error)}
      __pyx_t_4 = __pyx_v_i;
      __pyx_t_5 = -1;
      if (unlikely(__pyx_t_4 >= (size_t)__pyx_v_self->file_mask_g.shape[0])) __pyx_t_5 = 0;
      if (unlikely(__pyx_t_5 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_5);
        __PYX_ERR(0, 1556, __pyx_L1_error)
      }
      __pyx_t_6 = __pyx_v_i;
      __pyx_t_5 = -1;
      if (unlikely(__pyx_t_6 >= (size_t)__pyx_pybuffernd_file_mask_g.diminfo[0].shape)) __pyx_t_5 = 0;
      if (unlikely(__pyx_t_5 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_5);
        __PYX_ERR(0, 1556, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint8_t *, __pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_file_mask_g.diminfo[0].strides) = (*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_g.data + __pyx_t_4 * __pyx_v_self->file_mask_g.strides[0]) )));
    }
    __pyx_L9:;
  }

  /* "yt/geometry/particle_oct_container.pyx":1532
 *         mm_g0._compress(mm_g)
 * 
 *     def find_files(self,             # <<<<<<<<<<<<<<
 *                    np.ndarray[np.uint8_t, ndim=1] file_mask_p,
 *                    np.ndarray[np.uint8_t, ndim=1] file_mask_g):
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.find_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_mask_g.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_file_mask_p.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1558
 *                 file_mask_g[i] = self.file_mask_g[i]
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static int __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_is_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1563
 *     @cython.initializedcheck(False)
 *     cdef bint is_refined(self, np.uint64_t mi1):
 *         return self.bitmap.collisions._isref(mi1)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_v_self->bitmap->collisions->__pyx_vtab)->_isref(__pyx_v_self->bitmap->collisions, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1563, __pyx_L1_error)
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1558
 *                 file_mask_g[i] = self.file_mask_g[i]
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.is_refined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1565
 *         return self.bitmap.collisions._isref(mi1)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static int __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_is_refined_files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1) {
  __pyx_t_5numpy_uint64_t __pyx_v_i;
  int __pyx_r;
  int __pyx_t_1;
  __pyx_t_5numpy_uint32_t __pyx_t_2;
  __pyx_t_5numpy_uint32_t __pyx_t_3;
  __pyx_t_5numpy_uint64_t __pyx_t_4;
  __pyx_t_5numpy_uint64_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1570
 *     cdef bint is_refined_files(self, np.uint64_t mi1):
 *         cdef np.uint64_t i
 *         if self.bitmap.collisions._isref(mi1):             # <<<<<<<<<<<<<<
 *             # Don't refine if files all selected already
 *             for i in range(self.nfiles):
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)__pyx_v_self->bitmap->collisions->__pyx_vtab)->_isref(__pyx_v_self->bitmap->collisions, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1570, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "yt/geometry/particle_oct_container.pyx":1572
 *         if self.bitmap.collisions._isref(mi1):
 *             # Don't refine if files all selected already
 *             for i in range(self.nfiles):             # <<<<<<<<<<<<<<
 *                 if self.file_mask_p[i] == 0:
 *                     if self.bitmap.bitmasks._isref(i, mi1) == 1:
*/
    __pyx_t_2 = __pyx_v_self->nfiles;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "yt/geometry/particle_oct_container.pyx":1573
 *             # Don't refine if files all selected already
 *             for i in range(self.nfiles):
 *                 if self.file_mask_p[i] == 0:             # <<<<<<<<<<<<<<
 *                     if self.bitmap.bitmasks._isref(i, mi1) == 1:
 *                         return 1
*/
      if (unlikely(!__pyx_v_self->file_mask_p.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1573, __pyx_L1_error)}
      __pyx_t_5 = __pyx_v_i;
      __pyx_t_1 = ((*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_p.data + __pyx_t_5 * __pyx_v_self->file_mask_p.strides[0]) ))) == 0);
      if (__pyx_t_1) {

        /* "yt/geometry/particle_oct_container.pyx":1574
 *             for i in range(self.nfiles):
 *                 if self.file_mask_p[i] == 0:
 *                     if self.bitmap.bitmasks._isref(i, mi1) == 1:             # <<<<<<<<<<<<<<
 *                         return 1
 *             return 0
*/
        __pyx_t_1 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmap->bitmasks->__pyx_vtab)->_isref(__pyx_v_self->bitmap->bitmasks, __pyx_v_i, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1574, __pyx_L1_error)
        __pyx_t_6 = (__pyx_t_1 == 1);
        if (__pyx_t_6) {

          /* "yt/geometry/particle_oct_container.pyx":1575
 *                 if self.file_mask_p[i] == 0:
 *                     if self.bitmap.bitmasks._isref(i, mi1) == 1:
 *                         return 1             # <<<<<<<<<<<<<<
 *             return 0
 *         else:
*/
          __pyx_r = 1;
          goto __pyx_L0;

          /* "yt/geometry/particle_oct_container.pyx":1574
 *             for i in range(self.nfiles):
 *                 if self.file_mask_p[i] == 0:
 *                     if self.bitmap.bitmasks._isref(i, mi1) == 1:             # <<<<<<<<<<<<<<
 *                         return 1
 *             return 0
*/
        }

        /* "yt/geometry/particle_oct_container.pyx":1573
 *             # Don't refine if files all selected already
 *             for i in range(self.nfiles):
 *                 if self.file_mask_p[i] == 0:             # <<<<<<<<<<<<<<
 *                     if self.bitmap.bitmasks._isref(i, mi1) == 1:
 *                         return 1
*/
      }
    }

    /* "yt/geometry/particle_oct_container.pyx":1576
 *                     if self.bitmap.bitmasks._isref(i, mi1) == 1:
 *                         return 1
 *             return 0             # <<<<<<<<<<<<<<
 *         else:
 *             return 0
*/
    __pyx_r = 0;
    goto __pyx_L0;

    /* "yt/geometry/particle_oct_container.pyx":1570
 *     cdef bint is_refined_files(self, np.uint64_t mi1):
 *         cdef np.uint64_t i
 *         if self.bitmap.collisions._isref(mi1):             # <<<<<<<<<<<<<<
 *             # Don't refine if files all selected already
 *             for i in range(self.nfiles):
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":1578
 *             return 0
 *         else:
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "yt/geometry/particle_oct_container.pyx":1565
 *         return self.bitmap.collisions._isref(mi1)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.is_refined_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1580
 *             return 0
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_coarse(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_coarse *__pyx_optional_args) {
  int __pyx_v_bbox = ((int)2);
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_bbox = __pyx_optional_args->bbox;
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":1585
 *     @cython.initializedcheck(False)
 *     cdef void add_coarse(self, np.uint64_t mi1, int bbox = 2):
 *         self.coarse_select_bool[mi1] = 1             # <<<<<<<<<<<<<<
 *         # Neighbors
 *         if (self.ngz > 0) and (bbox == 2):
*/
  __pyx_t_1 = __pyx_v_mi1;
  *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->coarse_select_bool.data + __pyx_t_1 * __pyx_v_self->coarse_select_bool.strides[0]) )) = 1;

  /* "yt/geometry/particle_oct_container.pyx":1587
 *         self.coarse_select_bool[mi1] = 1
 *         # Neighbors
 *         if (self.ngz > 0) and (bbox == 2):             # <<<<<<<<<<<<<<
 *             if not self.is_refined(mi1):
 *                 self.add_neighbors_coarse(mi1)
*/
  __pyx_t_3 = (__pyx_v_self->ngz > 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_bbox == 2);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "yt/geometry/particle_oct_container.pyx":1588
 *         # Neighbors
 *         if (self.ngz > 0) and (bbox == 2):
 *             if not self.is_refined(mi1):             # <<<<<<<<<<<<<<
 *                 self.add_neighbors_coarse(mi1)
 * 
*/
    __pyx_t_2 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->is_refined(__pyx_v_self, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1588, __pyx_L1_error)
    __pyx_t_3 = (!__pyx_t_2);
    if (__pyx_t_3) {

      /* "yt/geometry/particle_oct_container.pyx":1589
 *         if (self.ngz > 0) and (bbox == 2):
 *             if not self.is_refined(mi1):
 *                 self.add_neighbors_coarse(mi1)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
      ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->add_neighbors_coarse(__pyx_v_self, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1589, __pyx_L1_error)

      /* "yt/geometry/particle_oct_container.pyx":1588
 *         # Neighbors
 *         if (self.ngz > 0) and (bbox == 2):
 *             if not self.is_refined(mi1):             # <<<<<<<<<<<<<<
 *                 self.add_neighbors_coarse(mi1)
 * 
*/
    }

    /* "yt/geometry/particle_oct_container.pyx":1587
 *         self.coarse_select_bool[mi1] = 1
 *         # Neighbors
 *         if (self.ngz > 0) and (bbox == 2):             # <<<<<<<<<<<<<<
 *             if not self.is_refined(mi1):
 *                 self.add_neighbors_coarse(mi1)
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":1580
 *             return 0
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.add_coarse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":1591
 *                 self.add_neighbors_coarse(mi1)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_files_coarse(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1) {
  __pyx_t_5numpy_uint64_t __pyx_v_i;
  int __pyx_v_flag_ref;
  int __pyx_t_1;
  __pyx_t_5numpy_uint32_t __pyx_t_2;
  __pyx_t_5numpy_uint32_t __pyx_t_3;
  __pyx_t_5numpy_uint64_t __pyx_t_4;
  __pyx_t_5numpy_uint64_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1597
 *     cdef void set_files_coarse(self, np.uint64_t mi1):
 *         cdef np.uint64_t i
 *         cdef bint flag_ref = self.is_refined(mi1)             # <<<<<<<<<<<<<<
 *         # Flag files at coarse level
 *         if flag_ref == 0:
*/
  __pyx_t_1 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->is_refined(__pyx_v_self, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1597, __pyx_L1_error)
  __pyx_v_flag_ref = __pyx_t_1;

  /* "yt/geometry/particle_oct_container.pyx":1599
 *         cdef bint flag_ref = self.is_refined(mi1)
 *         # Flag files at coarse level
 *         if flag_ref == 0:             # <<<<<<<<<<<<<<
 *             for i in range(self.nfiles):
 *                 if self.file_mask_p[i] == 0:
*/
  __pyx_t_1 = (__pyx_v_flag_ref == 0);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_oct_container.pyx":1600
 *         # Flag files at coarse level
 *         if flag_ref == 0:
 *             for i in range(self.nfiles):             # <<<<<<<<<<<<<<
 *                 if self.file_mask_p[i] == 0:
 *                     if self.bitmap.bitmasks._get_coarse(i, mi1) == 1:
*/
    __pyx_t_2 = __pyx_v_self->nfiles;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "yt/geometry/particle_oct_container.pyx":1601
 *         if flag_ref == 0:
 *             for i in range(self.nfiles):
 *                 if self.file_mask_p[i] == 0:             # <<<<<<<<<<<<<<
 *                     if self.bitmap.bitmasks._get_coarse(i, mi1) == 1:
 *                         self.file_mask_p[i] = 1
*/
      __pyx_t_5 = __pyx_v_i;
      __pyx_t_1 = ((*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_p.data + __pyx_t_5 * __pyx_v_self->file_mask_p.strides[0]) ))) == 0);
      if (__pyx_t_1) {

        /* "yt/geometry/particle_oct_container.pyx":1602
 *             for i in range(self.nfiles):
 *                 if self.file_mask_p[i] == 0:
 *                     if self.bitmap.bitmasks._get_coarse(i, mi1) == 1:             # <<<<<<<<<<<<<<
 *                         self.file_mask_p[i] = 1
 *         # Neighbors
*/
        __pyx_t_1 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmap->bitmasks->__pyx_vtab)->_get_coarse(__pyx_v_self->bitmap->bitmasks, __pyx_v_i, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1602, __pyx_L1_error)
        __pyx_t_6 = (__pyx_t_1 == 1);
        if (__pyx_t_6) {

          /* "yt/geometry/particle_oct_container.pyx":1603
 *                 if self.file_mask_p[i] == 0:
 *                     if self.bitmap.bitmasks._get_coarse(i, mi1) == 1:
 *                         self.file_mask_p[i] = 1             # <<<<<<<<<<<<<<
 *         # Neighbors
 *         if (flag_ref == 0) and (self.ngz > 0):
*/
          __pyx_t_5 = __pyx_v_i;
          *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_p.data + __pyx_t_5 * __pyx_v_self->file_mask_p.strides[0]) )) = 1;

          /* "yt/geometry/particle_oct_container.pyx":1602
 *             for i in range(self.nfiles):
 *                 if self.file_mask_p[i] == 0:
 *                     if self.bitmap.bitmasks._get_coarse(i, mi1) == 1:             # <<<<<<<<<<<<<<
 *                         self.file_mask_p[i] = 1
 *         # Neighbors
*/
        }

        /* "yt/geometry/particle_oct_container.pyx":1601
 *         if flag_ref == 0:
 *             for i in range(self.nfiles):
 *                 if self.file_mask_p[i] == 0:             # <<<<<<<<<<<<<<
 *                     if self.bitmap.bitmasks._get_coarse(i, mi1) == 1:
 *                         self.file_mask_p[i] = 1
*/
      }
    }

    /* "yt/geometry/particle_oct_container.pyx":1599
 *         cdef bint flag_ref = self.is_refined(mi1)
 *         # Flag files at coarse level
 *         if flag_ref == 0:             # <<<<<<<<<<<<<<
 *             for i in range(self.nfiles):
 *                 if self.file_mask_p[i] == 0:
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":1605
 *                         self.file_mask_p[i] = 1
 *         # Neighbors
 *         if (flag_ref == 0) and (self.ngz > 0):             # <<<<<<<<<<<<<<
 *             self.set_files_neighbors_coarse(mi1)
 * 
*/
  __pyx_t_1 = (__pyx_v_flag_ref == 0);
  if (__pyx_t_1) {
  } else {
    __pyx_t_6 = __pyx_t_1;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_1 = (__pyx_v_self->ngz > 0);
  __pyx_t_6 = __pyx_t_1;
  __pyx_L9_bool_binop_done:;
  if (__pyx_t_6) {

    /* "yt/geometry/particle_oct_container.pyx":1606
 *         # Neighbors
 *         if (flag_ref == 0) and (self.ngz > 0):
 *             self.set_files_neighbors_coarse(mi1)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
    ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->set_files_neighbors_coarse(__pyx_v_self, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1606, __pyx_L1_error)

    /* "yt/geometry/particle_oct_container.pyx":1605
 *                         self.file_mask_p[i] = 1
 *         # Neighbors
 *         if (flag_ref == 0) and (self.ngz > 0):             # <<<<<<<<<<<<<<
 *             self.set_files_neighbors_coarse(mi1)
 * 
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":1591
 *                 self.add_neighbors_coarse(mi1)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.set_files_coarse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":1608
 *             self.set_files_neighbors_coarse(mi1)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static int __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1, __pyx_t_5numpy_uint64_t __pyx_v_mi2, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_refined *__pyx_optional_args) {
  int __pyx_v_bbox = ((int)2);
  int __pyx_r;
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_bbox = __pyx_optional_args->bbox;
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":1613
 *     @cython.initializedcheck(False)
 *     cdef int add_refined(self, np.uint64_t mi1, np.uint64_t mi2, int bbox = 2) except -1:
 *         self.refined_select_bool[mi2] = 1             # <<<<<<<<<<<<<<
 *         # Neighbors
 *         if (self.ngz > 0) and (bbox == 2):
*/
  __pyx_t_1 = __pyx_v_mi2;
  *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->refined_select_bool.data + __pyx_t_1 * __pyx_v_self->refined_select_bool.strides[0]) )) = 1;

  /* "yt/geometry/particle_oct_container.pyx":1615
 *         self.refined_select_bool[mi2] = 1
 *         # Neighbors
 *         if (self.ngz > 0) and (bbox == 2):             # <<<<<<<<<<<<<<
 *             self.add_neighbors_refined(mi1, mi2)
 * 
*/
  __pyx_t_3 = (__pyx_v_self->ngz > 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_bbox == 2);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "yt/geometry/particle_oct_container.pyx":1616
 *         # Neighbors
 *         if (self.ngz > 0) and (bbox == 2):
 *             self.add_neighbors_refined(mi1, mi2)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
    ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->add_neighbors_refined(__pyx_v_self, __pyx_v_mi1, __pyx_v_mi2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1616, __pyx_L1_error)

    /* "yt/geometry/particle_oct_container.pyx":1615
 *         self.refined_select_bool[mi2] = 1
 *         # Neighbors
 *         if (self.ngz > 0) and (bbox == 2):             # <<<<<<<<<<<<<<
 *             self.add_neighbors_refined(mi1, mi2)
 * 
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":1608
 *             self.set_files_neighbors_coarse(mi1)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.add_refined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1618
 *             self.add_neighbors_refined(mi1, mi2)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_files_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1, __pyx_t_5numpy_uint64_t __pyx_v_mi2) {
  __pyx_t_5numpy_uint64_t __pyx_v_i;
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  __pyx_t_5numpy_uint32_t __pyx_t_2;
  __pyx_t_5numpy_uint64_t __pyx_t_3;
  __pyx_t_5numpy_uint64_t __pyx_t_4;
  int __pyx_t_5;
  struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__get __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1625
 *         cdef np.uint64_t i
 *         # Flag files
 *         for i in range(self.nfiles):             # <<<<<<<<<<<<<<
 *             if self.file_mask_p[i] == 0:
 *                 if self.bitmap.bitmasks._get(i, mi1, mi2):
*/
  __pyx_t_1 = __pyx_v_self->nfiles;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":1626
 *         # Flag files
 *         for i in range(self.nfiles):
 *             if self.file_mask_p[i] == 0:             # <<<<<<<<<<<<<<
 *                 if self.bitmap.bitmasks._get(i, mi1, mi2):
 *                     self.file_mask_p[i] = 1
*/
    __pyx_t_4 = __pyx_v_i;
    __pyx_t_5 = ((*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_p.data + __pyx_t_4 * __pyx_v_self->file_mask_p.strides[0]) ))) == 0);
    if (__pyx_t_5) {

      /* "yt/geometry/particle_oct_container.pyx":1627
 *         for i in range(self.nfiles):
 *             if self.file_mask_p[i] == 0:
 *                 if self.bitmap.bitmasks._get(i, mi1, mi2):             # <<<<<<<<<<<<<<
 *                     self.file_mask_p[i] = 1
 *         # Neighbors
*/
      __pyx_t_6.__pyx_n = 1;
      __pyx_t_6.i2 = __pyx_v_mi2;
      __pyx_t_5 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmap->bitmasks->__pyx_vtab)->_get(__pyx_v_self->bitmap->bitmasks, __pyx_v_i, __pyx_v_mi1, &__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1627, __pyx_L1_error)
      if (__pyx_t_5) {

        /* "yt/geometry/particle_oct_container.pyx":1628
 *             if self.file_mask_p[i] == 0:
 *                 if self.bitmap.bitmasks._get(i, mi1, mi2):
 *                     self.file_mask_p[i] = 1             # <<<<<<<<<<<<<<
 *         # Neighbors
 *         if (self.ngz > 0):
*/
        __pyx_t_4 = __pyx_v_i;
        *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_p.data + __pyx_t_4 * __pyx_v_self->file_mask_p.strides[0]) )) = 1;

        /* "yt/geometry/particle_oct_container.pyx":1627
 *         for i in range(self.nfiles):
 *             if self.file_mask_p[i] == 0:
 *                 if self.bitmap.bitmasks._get(i, mi1, mi2):             # <<<<<<<<<<<<<<
 *                     self.file_mask_p[i] = 1
 *         # Neighbors
*/
      }

      /* "yt/geometry/particle_oct_container.pyx":1626
 *         # Flag files
 *         for i in range(self.nfiles):
 *             if self.file_mask_p[i] == 0:             # <<<<<<<<<<<<<<
 *                 if self.bitmap.bitmasks._get(i, mi1, mi2):
 *                     self.file_mask_p[i] = 1
*/
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":1630
 *                     self.file_mask_p[i] = 1
 *         # Neighbors
 *         if (self.ngz > 0):             # <<<<<<<<<<<<<<
 *             self.set_files_neighbors_refined(mi1, mi2)
 * 
*/
  __pyx_t_5 = (__pyx_v_self->ngz > 0);
  if (__pyx_t_5) {

    /* "yt/geometry/particle_oct_container.pyx":1631
 *         # Neighbors
 *         if (self.ngz > 0):
 *             self.set_files_neighbors_refined(mi1, mi2)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
    ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->set_files_neighbors_refined(__pyx_v_self, __pyx_v_mi1, __pyx_v_mi2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1631, __pyx_L1_error)

    /* "yt/geometry/particle_oct_container.pyx":1630
 *                     self.file_mask_p[i] = 1
 *         # Neighbors
 *         if (self.ngz > 0):             # <<<<<<<<<<<<<<
 *             self.set_files_neighbors_refined(mi1, mi2)
 * 
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":1618
 *             self.add_neighbors_refined(mi1, mi2)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.set_files_refined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":1633
 *             self.set_files_neighbors_refined(mi1, mi2)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_neighbors_coarse(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1) {
  __pyx_t_5numpy_uint64_t __pyx_v_m;
  __pyx_t_5numpy_uint32_t __pyx_v_ntot;
  __pyx_t_5numpy_uint64_t __pyx_v_mi1_n;
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  __pyx_t_5numpy_uint32_t __pyx_t_2;
  __pyx_t_5numpy_uint64_t __pyx_t_3;
  __pyx_t_5numpy_uint64_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1641
 *         cdef np.uint32_t ntot
 *         cdef np.uint64_t mi1_n
 *         ntot = morton_neighbors_coarse(mi1, self.max_index1,             # <<<<<<<<<<<<<<
 *                                        self.periodicity,
 *                                        self.ngz, self.neighbors,
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_morton_neighbors_coarse(__pyx_v_mi1, __pyx_v_self->max_index1, __pyx_v_self->periodicity, __pyx_v_self->ngz, __pyx_v_self->neighbors, __pyx_v_self->ind1_n, __pyx_v_self->neighbor_list1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1641, __pyx_L1_error)
  __pyx_v_ntot = __pyx_t_1;

  /* "yt/geometry/particle_oct_container.pyx":1645
 *                                        self.ngz, self.neighbors,
 *                                        self.ind1_n, self.neighbor_list1)
 *         for m in range(ntot):             # <<<<<<<<<<<<<<
 *             mi1_n = self.neighbor_list1[m]
 *             self.coarse_ghosts_bool[mi1_n] = 1
*/
  __pyx_t_1 = __pyx_v_ntot;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_m = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":1646
 *                                        self.ind1_n, self.neighbor_list1)
 *         for m in range(ntot):
 *             mi1_n = self.neighbor_list1[m]             # <<<<<<<<<<<<<<
 *             self.coarse_ghosts_bool[mi1_n] = 1
 * 
*/
    __pyx_t_4 = __pyx_v_m;
    __pyx_v_mi1_n = (*((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_self->neighbor_list1.data + __pyx_t_4 * __pyx_v_self->neighbor_list1.strides[0]) )));

    /* "yt/geometry/particle_oct_container.pyx":1647
 *         for m in range(ntot):
 *             mi1_n = self.neighbor_list1[m]
 *             self.coarse_ghosts_bool[mi1_n] = 1             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
    __pyx_t_4 = __pyx_v_mi1_n;
    *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->coarse_ghosts_bool.data + __pyx_t_4 * __pyx_v_self->coarse_ghosts_bool.strides[0]) )) = 1;
  }

  /* "yt/geometry/particle_oct_container.pyx":1633
 *             self.set_files_neighbors_refined(mi1, mi2)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.add_neighbors_coarse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":1649
 *             self.coarse_ghosts_bool[mi1_n] = 1
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_files_neighbors_coarse(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1) {
  __pyx_t_5numpy_uint64_t __pyx_v_i;
  __pyx_t_5numpy_uint64_t __pyx_v_m;
  __pyx_t_5numpy_uint32_t __pyx_v_ntot;
  __pyx_t_5numpy_uint64_t __pyx_v_mi1_n;
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  __pyx_t_5numpy_uint32_t __pyx_t_2;
  __pyx_t_5numpy_uint64_t __pyx_t_3;
  __pyx_t_5numpy_uint64_t __pyx_t_4;
  __pyx_t_5numpy_uint32_t __pyx_t_5;
  __pyx_t_5numpy_uint32_t __pyx_t_6;
  __pyx_t_5numpy_uint64_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1657
 *         cdef np.uint32_t ntot
 *         cdef np.uint64_t mi1_n
 *         ntot = morton_neighbors_coarse(mi1, self.max_index1,             # <<<<<<<<<<<<<<
 *                                        self.periodicity,
 *                                        self.ngz, self.neighbors,
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_morton_neighbors_coarse(__pyx_v_mi1, __pyx_v_self->max_index1, __pyx_v_self->periodicity, __pyx_v_self->ngz, __pyx_v_self->neighbors, __pyx_v_self->ind1_n, __pyx_v_self->neighbor_list1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1657, __pyx_L1_error)
  __pyx_v_ntot = __pyx_t_1;

  /* "yt/geometry/particle_oct_container.pyx":1661
 *                                        self.ngz, self.neighbors,
 *                                        self.ind1_n, self.neighbor_list1)
 *         for m in range(ntot):             # <<<<<<<<<<<<<<
 *             mi1_n = self.neighbor_list1[m]
 *             for i in range(self.nfiles):
*/
  __pyx_t_1 = __pyx_v_ntot;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_m = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":1662
 *                                        self.ind1_n, self.neighbor_list1)
 *         for m in range(ntot):
 *             mi1_n = self.neighbor_list1[m]             # <<<<<<<<<<<<<<
 *             for i in range(self.nfiles):
 *                 if self.file_mask_g[i] == 0:
*/
    __pyx_t_4 = __pyx_v_m;
    __pyx_v_mi1_n = (*((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_self->neighbor_list1.data + __pyx_t_4 * __pyx_v_self->neighbor_list1.strides[0]) )));

    /* "yt/geometry/particle_oct_container.pyx":1663
 *         for m in range(ntot):
 *             mi1_n = self.neighbor_list1[m]
 *             for i in range(self.nfiles):             # <<<<<<<<<<<<<<
 *                 if self.file_mask_g[i] == 0:
 *                     if self.bitmap.bitmasks._get_coarse(i, mi1_n):
*/
    __pyx_t_5 = __pyx_v_self->nfiles;
    __pyx_t_6 = __pyx_t_5;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_6; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "yt/geometry/particle_oct_container.pyx":1664
 *             mi1_n = self.neighbor_list1[m]
 *             for i in range(self.nfiles):
 *                 if self.file_mask_g[i] == 0:             # <<<<<<<<<<<<<<
 *                     if self.bitmap.bitmasks._get_coarse(i, mi1_n):
 *                         self.file_mask_g[i] = 1
*/
      __pyx_t_7 = __pyx_v_i;
      __pyx_t_8 = ((*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_g.data + __pyx_t_7 * __pyx_v_self->file_mask_g.strides[0]) ))) == 0);
      if (__pyx_t_8) {

        /* "yt/geometry/particle_oct_container.pyx":1665
 *             for i in range(self.nfiles):
 *                 if self.file_mask_g[i] == 0:
 *                     if self.bitmap.bitmasks._get_coarse(i, mi1_n):             # <<<<<<<<<<<<<<
 *                         self.file_mask_g[i] = 1
 * 
*/
        __pyx_t_8 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmap->bitmasks->__pyx_vtab)->_get_coarse(__pyx_v_self->bitmap->bitmasks, __pyx_v_i, __pyx_v_mi1_n); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1665, __pyx_L1_error)
        if (__pyx_t_8) {

          /* "yt/geometry/particle_oct_container.pyx":1666
 *                 if self.file_mask_g[i] == 0:
 *                     if self.bitmap.bitmasks._get_coarse(i, mi1_n):
 *                         self.file_mask_g[i] = 1             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
          __pyx_t_7 = __pyx_v_i;
          *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_g.data + __pyx_t_7 * __pyx_v_self->file_mask_g.strides[0]) )) = 1;

          /* "yt/geometry/particle_oct_container.pyx":1665
 *             for i in range(self.nfiles):
 *                 if self.file_mask_g[i] == 0:
 *                     if self.bitmap.bitmasks._get_coarse(i, mi1_n):             # <<<<<<<<<<<<<<
 *                         self.file_mask_g[i] = 1
 * 
*/
        }

        /* "yt/geometry/particle_oct_container.pyx":1664
 *             mi1_n = self.neighbor_list1[m]
 *             for i in range(self.nfiles):
 *                 if self.file_mask_g[i] == 0:             # <<<<<<<<<<<<<<
 *                     if self.bitmap.bitmasks._get_coarse(i, mi1_n):
 *                         self.file_mask_g[i] = 1
*/
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":1649
 *             self.coarse_ghosts_bool[mi1_n] = 1
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.set_files_neighbors_coarse", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":1668
 *                         self.file_mask_g[i] = 1
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_neighbors_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1, __pyx_t_5numpy_uint64_t __pyx_v_mi2) {
  int __pyx_v_m;
  __pyx_t_5numpy_uint32_t __pyx_v_ntot;
  __pyx_t_5numpy_uint64_t __pyx_v_mi1_n;
  __pyx_t_5numpy_uint64_t __pyx_v_mi2_n;
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  __pyx_t_5numpy_int32_t __pyx_t_2;
  __pyx_t_5numpy_int32_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __pyx_t_5numpy_uint64_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1676
 *         cdef np.uint32_t ntot
 *         cdef np.uint64_t mi1_n, mi2_n
 *         ntot = morton_neighbors_refined(mi1, mi2,             # <<<<<<<<<<<<<<
 *                                         self.max_index1, self.max_index2,
 *                                         self.periodicity, self.ngz,
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_morton_neighbors_refined(__pyx_v_mi1, __pyx_v_mi2, __pyx_v_self->max_index1, __pyx_v_self->max_index2, __pyx_v_self->periodicity, __pyx_v_self->ngz, __pyx_v_self->neighbors, __pyx_v_self->ind1_n, __pyx_v_self->ind2_n, __pyx_v_self->neighbor_list1, __pyx_v_self->neighbor_list2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1676, __pyx_L1_error)
  __pyx_v_ntot = __pyx_t_1;

  /* "yt/geometry/particle_oct_container.pyx":1681
 *                                         self.neighbors, self.ind1_n, self.ind2_n,
 *                                         self.neighbor_list1, self.neighbor_list2)
 *         for m in range(<np.int32_t>ntot):             # <<<<<<<<<<<<<<
 *             mi1_n = self.neighbor_list1[m]
 *             mi2_n = self.neighbor_list2[m]
*/
  __pyx_t_2 = ((__pyx_t_5numpy_int32_t)__pyx_v_ntot);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_m = __pyx_t_4;

    /* "yt/geometry/particle_oct_container.pyx":1682
 *                                         self.neighbor_list1, self.neighbor_list2)
 *         for m in range(<np.int32_t>ntot):
 *             mi1_n = self.neighbor_list1[m]             # <<<<<<<<<<<<<<
 *             mi2_n = self.neighbor_list2[m]
 *             self.coarse_ghosts_bool[mi1_n] = 1
*/
    __pyx_t_5 = __pyx_v_m;
    __pyx_v_mi1_n = (*((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_self->neighbor_list1.data + __pyx_t_5 * __pyx_v_self->neighbor_list1.strides[0]) )));

    /* "yt/geometry/particle_oct_container.pyx":1683
 *         for m in range(<np.int32_t>ntot):
 *             mi1_n = self.neighbor_list1[m]
 *             mi2_n = self.neighbor_list2[m]             # <<<<<<<<<<<<<<
 *             self.coarse_ghosts_bool[mi1_n] = 1
 * 
*/
    __pyx_t_5 = __pyx_v_m;
    __pyx_v_mi2_n = (*((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_self->neighbor_list2.data + __pyx_t_5 * __pyx_v_self->neighbor_list2.strides[0]) )));

    /* "yt/geometry/particle_oct_container.pyx":1684
 *             mi1_n = self.neighbor_list1[m]
 *             mi2_n = self.neighbor_list2[m]
 *             self.coarse_ghosts_bool[mi1_n] = 1             # <<<<<<<<<<<<<<
 * 
 *             # Ghost cells are added at the refined level regardless of if the
*/
    __pyx_t_6 = __pyx_v_mi1_n;
    *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->coarse_ghosts_bool.data + __pyx_t_6 * __pyx_v_self->coarse_ghosts_bool.strides[0]) )) = 1;

    /* "yt/geometry/particle_oct_container.pyx":1688
 *             # Ghost cells are added at the refined level regardless of if the
 *             # coarse cell containing it is refined in the selector.
 *             if mi1_n == mi1:             # <<<<<<<<<<<<<<
 *                 self.refined_ghosts_bool[mi2_n] = 1
 *             else:
*/
    __pyx_t_7 = (__pyx_v_mi1_n == __pyx_v_mi1);
    if (__pyx_t_7) {

      /* "yt/geometry/particle_oct_container.pyx":1689
 *             # coarse cell containing it is refined in the selector.
 *             if mi1_n == mi1:
 *                 self.refined_ghosts_bool[mi2_n] = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 self.refined_ghosts_list._set(mi1_n, mi2_n)
*/
      __pyx_t_6 = __pyx_v_mi2_n;
      *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->refined_ghosts_bool.data + __pyx_t_6 * __pyx_v_self->refined_ghosts_bool.strides[0]) )) = 1;

      /* "yt/geometry/particle_oct_container.pyx":1688
 *             # Ghost cells are added at the refined level regardless of if the
 *             # coarse cell containing it is refined in the selector.
 *             if mi1_n == mi1:             # <<<<<<<<<<<<<<
 *                 self.refined_ghosts_bool[mi2_n] = 1
 *             else:
*/
      goto __pyx_L5;
    }

    /* "yt/geometry/particle_oct_container.pyx":1691
 *                 self.refined_ghosts_bool[mi2_n] = 1
 *             else:
 *                 self.refined_ghosts_list._set(mi1_n, mi2_n)             # <<<<<<<<<<<<<<
 * 
 *             # alternative implementation by Meagan Lang
*/
    /*else*/ {
      ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *)__pyx_v_self->refined_ghosts_list->__pyx_vtab)->_set(__pyx_v_self->refined_ghosts_list, __pyx_v_mi1_n, __pyx_v_mi2_n); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1691, __pyx_L1_error)
    }
    __pyx_L5:;
  }

  /* "yt/geometry/particle_oct_container.pyx":1668
 *                         self.file_mask_g[i] = 1
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.add_neighbors_refined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":1702
 *             #    self.refined_ghosts_list._set(mi1_n, mi2_n)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_files_neighbors_refined(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1, __pyx_t_5numpy_uint64_t __pyx_v_mi2) {
  int __pyx_v_i;
  int __pyx_v_m;
  __pyx_t_5numpy_uint32_t __pyx_v_ntot;
  __pyx_t_5numpy_uint64_t __pyx_v_mi1_n;
  __pyx_t_5numpy_uint64_t __pyx_v_mi2_n;
  __pyx_t_5numpy_uint32_t __pyx_t_1;
  __pyx_t_5numpy_int32_t __pyx_t_2;
  __pyx_t_5numpy_int32_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  __pyx_t_5numpy_uint32_t __pyx_t_8;
  int __pyx_t_9;
  struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_12FileBitmasks__get __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1710
 *         cdef np.uint32_t ntot
 *         cdef np.uint64_t mi1_n, mi2_n
 *         ntot = morton_neighbors_refined(mi1, mi2,             # <<<<<<<<<<<<<<
 *                                         self.max_index1, self.max_index2,
 *                                         self.periodicity, self.ngz,
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_morton_neighbors_refined(__pyx_v_mi1, __pyx_v_mi2, __pyx_v_self->max_index1, __pyx_v_self->max_index2, __pyx_v_self->periodicity, __pyx_v_self->ngz, __pyx_v_self->neighbors, __pyx_v_self->ind1_n, __pyx_v_self->ind2_n, __pyx_v_self->neighbor_list1, __pyx_v_self->neighbor_list2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1710, __pyx_L1_error)
  __pyx_v_ntot = __pyx_t_1;

  /* "yt/geometry/particle_oct_container.pyx":1715
 *                                         self.neighbors, self.ind1_n, self.ind2_n,
 *                                         self.neighbor_list1, self.neighbor_list2)
 *         for m in range(<np.int32_t>ntot):             # <<<<<<<<<<<<<<
 *             mi1_n = self.neighbor_list1[m]
 *             mi2_n = self.neighbor_list2[m]
*/
  __pyx_t_2 = ((__pyx_t_5numpy_int32_t)__pyx_v_ntot);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_m = __pyx_t_4;

    /* "yt/geometry/particle_oct_container.pyx":1716
 *                                         self.neighbor_list1, self.neighbor_list2)
 *         for m in range(<np.int32_t>ntot):
 *             mi1_n = self.neighbor_list1[m]             # <<<<<<<<<<<<<<
 *             mi2_n = self.neighbor_list2[m]
 *             if self.is_refined(mi1_n) == 1:
*/
    __pyx_t_5 = __pyx_v_m;
    __pyx_v_mi1_n = (*((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_self->neighbor_list1.data + __pyx_t_5 * __pyx_v_self->neighbor_list1.strides[0]) )));

    /* "yt/geometry/particle_oct_container.pyx":1717
 *         for m in range(<np.int32_t>ntot):
 *             mi1_n = self.neighbor_list1[m]
 *             mi2_n = self.neighbor_list2[m]             # <<<<<<<<<<<<<<
 *             if self.is_refined(mi1_n) == 1:
 *                 for i in range(self.nfiles):
*/
    __pyx_t_5 = __pyx_v_m;
    __pyx_v_mi2_n = (*((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_self->neighbor_list2.data + __pyx_t_5 * __pyx_v_self->neighbor_list2.strides[0]) )));

    /* "yt/geometry/particle_oct_container.pyx":1718
 *             mi1_n = self.neighbor_list1[m]
 *             mi2_n = self.neighbor_list2[m]
 *             if self.is_refined(mi1_n) == 1:             # <<<<<<<<<<<<<<
 *                 for i in range(self.nfiles):
 *                     if self.file_mask_g[i] == 0:
*/
    __pyx_t_6 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->is_refined(__pyx_v_self, __pyx_v_mi1_n); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1718, __pyx_L1_error)
    __pyx_t_7 = (__pyx_t_6 == 1);
    if (__pyx_t_7) {

      /* "yt/geometry/particle_oct_container.pyx":1719
 *             mi2_n = self.neighbor_list2[m]
 *             if self.is_refined(mi1_n) == 1:
 *                 for i in range(self.nfiles):             # <<<<<<<<<<<<<<
 *                     if self.file_mask_g[i] == 0:
 *                         if self.bitmap.bitmasks._get(i, mi1_n, mi2_n) == 1:
*/
      __pyx_t_1 = __pyx_v_self->nfiles;
      __pyx_t_8 = __pyx_t_1;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_i = __pyx_t_9;

        /* "yt/geometry/particle_oct_container.pyx":1720
 *             if self.is_refined(mi1_n) == 1:
 *                 for i in range(self.nfiles):
 *                     if self.file_mask_g[i] == 0:             # <<<<<<<<<<<<<<
 *                         if self.bitmap.bitmasks._get(i, mi1_n, mi2_n) == 1:
 *                             self.file_mask_g[i] = 1
*/
        __pyx_t_5 = __pyx_v_i;
        __pyx_t_7 = ((*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_g.data + __pyx_t_5 * __pyx_v_self->file_mask_g.strides[0]) ))) == 0);
        if (__pyx_t_7) {

          /* "yt/geometry/particle_oct_container.pyx":1721
 *                 for i in range(self.nfiles):
 *                     if self.file_mask_g[i] == 0:
 *                         if self.bitmap.bitmasks._get(i, mi1_n, mi2_n) == 1:             # <<<<<<<<<<<<<<
 *                             self.file_mask_g[i] = 1
 *             else:
*/
          __pyx_t_10.__pyx_n = 1;
          __pyx_t_10.i2 = __pyx_v_mi2_n;
          __pyx_t_7 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmap->bitmasks->__pyx_vtab)->_get(__pyx_v_self->bitmap->bitmasks, __pyx_v_i, __pyx_v_mi1_n, &__pyx_t_10); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1721, __pyx_L1_error)
          __pyx_t_6 = (__pyx_t_7 == 1);
          if (__pyx_t_6) {

            /* "yt/geometry/particle_oct_container.pyx":1722
 *                     if self.file_mask_g[i] == 0:
 *                         if self.bitmap.bitmasks._get(i, mi1_n, mi2_n) == 1:
 *                             self.file_mask_g[i] = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 for i in range(self.nfiles):
*/
            __pyx_t_5 = __pyx_v_i;
            *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_g.data + __pyx_t_5 * __pyx_v_self->file_mask_g.strides[0]) )) = 1;

            /* "yt/geometry/particle_oct_container.pyx":1721
 *                 for i in range(self.nfiles):
 *                     if self.file_mask_g[i] == 0:
 *                         if self.bitmap.bitmasks._get(i, mi1_n, mi2_n) == 1:             # <<<<<<<<<<<<<<
 *                             self.file_mask_g[i] = 1
 *             else:
*/
          }

          /* "yt/geometry/particle_oct_container.pyx":1720
 *             if self.is_refined(mi1_n) == 1:
 *                 for i in range(self.nfiles):
 *                     if self.file_mask_g[i] == 0:             # <<<<<<<<<<<<<<
 *                         if self.bitmap.bitmasks._get(i, mi1_n, mi2_n) == 1:
 *                             self.file_mask_g[i] = 1
*/
        }
      }

      /* "yt/geometry/particle_oct_container.pyx":1718
 *             mi1_n = self.neighbor_list1[m]
 *             mi2_n = self.neighbor_list2[m]
 *             if self.is_refined(mi1_n) == 1:             # <<<<<<<<<<<<<<
 *                 for i in range(self.nfiles):
 *                     if self.file_mask_g[i] == 0:
*/
      goto __pyx_L5;
    }

    /* "yt/geometry/particle_oct_container.pyx":1724
 *                             self.file_mask_g[i] = 1
 *             else:
 *                 for i in range(self.nfiles):             # <<<<<<<<<<<<<<
 *                     if self.file_mask_g[i] == 0:
 *                         if self.bitmap.bitmasks._get_coarse(i, mi1_n) == 1:
*/
    /*else*/ {
      __pyx_t_1 = __pyx_v_self->nfiles;
      __pyx_t_8 = __pyx_t_1;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_i = __pyx_t_9;

        /* "yt/geometry/particle_oct_container.pyx":1725
 *             else:
 *                 for i in range(self.nfiles):
 *                     if self.file_mask_g[i] == 0:             # <<<<<<<<<<<<<<
 *                         if self.bitmap.bitmasks._get_coarse(i, mi1_n) == 1:
 *                             self.file_mask_g[i] = 1
*/
        __pyx_t_5 = __pyx_v_i;
        __pyx_t_6 = ((*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_g.data + __pyx_t_5 * __pyx_v_self->file_mask_g.strides[0]) ))) == 0);
        if (__pyx_t_6) {

          /* "yt/geometry/particle_oct_container.pyx":1726
 *                 for i in range(self.nfiles):
 *                     if self.file_mask_g[i] == 0:
 *                         if self.bitmap.bitmasks._get_coarse(i, mi1_n) == 1:             # <<<<<<<<<<<<<<
 *                             self.file_mask_g[i] = 1
 *                             break # If not refined, only one file should be selected
*/
          __pyx_t_6 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)__pyx_v_self->bitmap->bitmasks->__pyx_vtab)->_get_coarse(__pyx_v_self->bitmap->bitmasks, __pyx_v_i, __pyx_v_mi1_n); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1726, __pyx_L1_error)
          __pyx_t_7 = (__pyx_t_6 == 1);
          if (__pyx_t_7) {

            /* "yt/geometry/particle_oct_container.pyx":1727
 *                     if self.file_mask_g[i] == 0:
 *                         if self.bitmap.bitmasks._get_coarse(i, mi1_n) == 1:
 *                             self.file_mask_g[i] = 1             # <<<<<<<<<<<<<<
 *                             break # If not refined, only one file should be selected
 * 
*/
            __pyx_t_5 = __pyx_v_i;
            *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->file_mask_g.data + __pyx_t_5 * __pyx_v_self->file_mask_g.strides[0]) )) = 1;

            /* "yt/geometry/particle_oct_container.pyx":1728
 *                         if self.bitmap.bitmasks._get_coarse(i, mi1_n) == 1:
 *                             self.file_mask_g[i] = 1
 *                             break # If not refined, only one file should be selected             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
            goto __pyx_L11_break;

            /* "yt/geometry/particle_oct_container.pyx":1726
 *                 for i in range(self.nfiles):
 *                     if self.file_mask_g[i] == 0:
 *                         if self.bitmap.bitmasks._get_coarse(i, mi1_n) == 1:             # <<<<<<<<<<<<<<
 *                             self.file_mask_g[i] = 1
 *                             break # If not refined, only one file should be selected
*/
          }

          /* "yt/geometry/particle_oct_container.pyx":1725
 *             else:
 *                 for i in range(self.nfiles):
 *                     if self.file_mask_g[i] == 0:             # <<<<<<<<<<<<<<
 *                         if self.bitmap.bitmasks._get_coarse(i, mi1_n) == 1:
 *                             self.file_mask_g[i] = 1
*/
        }
      }
      __pyx_L11_break:;
    }
    __pyx_L5:;
  }

  /* "yt/geometry/particle_oct_container.pyx":1702
 *             #    self.refined_ghosts_list._set(mi1_n, mi2_n)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.set_files_neighbors_refined", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":1730
 *                             break # If not refined, only one file should be selected
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_coarse_list(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_g) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_coarse_list", 0);

  /* "yt/geometry/particle_oct_container.pyx":1734
 *     @cython.cdivision(True)
 *     cdef void set_coarse_list(self, BoolArrayColl mm_s, BoolArrayColl mm_g):
 *         self.coarse_select_list._fill_bool(mm_s)             # <<<<<<<<<<<<<<
 *         self.coarse_ghosts_list._fill_bool(mm_g)
 * 
*/
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_coarse_select_list); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __pyx_t_3;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, ((PyObject *)__pyx_v_mm_s)};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_fill_bool, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1735
 *     cdef void set_coarse_list(self, BoolArrayColl mm_s, BoolArrayColl mm_g):
 *         self.coarse_select_list._fill_bool(mm_s)
 *         self.coarse_ghosts_list._fill_bool(mm_g)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_mstate_global->__pyx_n_u_coarse_ghosts_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_t_2;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_mm_g)};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_fill_bool, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1730
 *                             break # If not refined, only one file should be selected
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.set_coarse_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "yt/geometry/particle_oct_container.pyx":1737
 *         self.coarse_ghosts_list._fill_bool(mm_g)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_refined_list(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_g) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1741
 *     @cython.cdivision(True)
 *     cdef void set_refined_list(self, BoolArrayColl mm_s, BoolArrayColl mm_g):
 *         self.refined_ghosts_list._fill_bool(mm_g)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *)__pyx_v_self->refined_ghosts_list->__pyx_vtab)->_fill_bool(__pyx_v_self->refined_ghosts_list, __pyx_v_mm_g); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1741, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1737
 *         self.coarse_ghosts_list._fill_bool(mm_g)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.set_refined_list", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":1743
 *         self.refined_ghosts_list._fill_bool(mm_g)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_coarse_bool(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_g) {
  __pyx_t_5numpy_uint64_t __pyx_v_mi1;
  Py_ssize_t __pyx_t_1;
  __pyx_t_5numpy_uint64_t __pyx_t_2;
  __pyx_t_5numpy_uint64_t __pyx_t_3;
  __pyx_t_5numpy_uint64_t __pyx_t_4;
  __pyx_t_5numpy_uint64_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1748
 *     cdef void set_coarse_bool(self, BoolArrayColl mm_s, BoolArrayColl mm_g):
 *         cdef np.uint64_t mi1
 *         mm_s._set_coarse_array_ptr(&self.coarse_select_bool[0])             # <<<<<<<<<<<<<<
 *         for mi1 in range(self.s1):
 *             self.coarse_select_bool[mi1] = 0
*/
  if (unlikely(!__pyx_v_self->coarse_select_bool.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1748, __pyx_L1_error)}
  __pyx_t_1 = 0;
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_mm_s->__pyx_vtab)->_set_coarse_array_ptr(__pyx_v_mm_s, (&(*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->coarse_select_bool.data + __pyx_t_1 * __pyx_v_self->coarse_select_bool.strides[0]) ))))); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1748, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1749
 *         cdef np.uint64_t mi1
 *         mm_s._set_coarse_array_ptr(&self.coarse_select_bool[0])
 *         for mi1 in range(self.s1):             # <<<<<<<<<<<<<<
 *             self.coarse_select_bool[mi1] = 0
 *         mm_g._set_coarse_array_ptr(&self.coarse_ghosts_bool[0])
*/
  __pyx_t_2 = __pyx_v_self->s1;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_mi1 = __pyx_t_4;

    /* "yt/geometry/particle_oct_container.pyx":1750
 *         mm_s._set_coarse_array_ptr(&self.coarse_select_bool[0])
 *         for mi1 in range(self.s1):
 *             self.coarse_select_bool[mi1] = 0             # <<<<<<<<<<<<<<
 *         mm_g._set_coarse_array_ptr(&self.coarse_ghosts_bool[0])
 *         for mi1 in range(self.s1):
*/
    if (unlikely(!__pyx_v_self->coarse_select_bool.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1750, __pyx_L1_error)}
    __pyx_t_5 = __pyx_v_mi1;
    *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->coarse_select_bool.data + __pyx_t_5 * __pyx_v_self->coarse_select_bool.strides[0]) )) = 0;
  }

  /* "yt/geometry/particle_oct_container.pyx":1751
 *         for mi1 in range(self.s1):
 *             self.coarse_select_bool[mi1] = 0
 *         mm_g._set_coarse_array_ptr(&self.coarse_ghosts_bool[0])             # <<<<<<<<<<<<<<
 *         for mi1 in range(self.s1):
 *             self.coarse_ghosts_bool[mi1] = 0
*/
  if (unlikely(!__pyx_v_self->coarse_ghosts_bool.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1751, __pyx_L1_error)}
  __pyx_t_1 = 0;
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_mm_g->__pyx_vtab)->_set_coarse_array_ptr(__pyx_v_mm_g, (&(*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->coarse_ghosts_bool.data + __pyx_t_1 * __pyx_v_self->coarse_ghosts_bool.strides[0]) ))))); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1751, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1752
 *             self.coarse_select_bool[mi1] = 0
 *         mm_g._set_coarse_array_ptr(&self.coarse_ghosts_bool[0])
 *         for mi1 in range(self.s1):             # <<<<<<<<<<<<<<
 *             self.coarse_ghosts_bool[mi1] = 0
 * 
*/
  __pyx_t_2 = __pyx_v_self->s1;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_mi1 = __pyx_t_4;

    /* "yt/geometry/particle_oct_container.pyx":1753
 *         mm_g._set_coarse_array_ptr(&self.coarse_ghosts_bool[0])
 *         for mi1 in range(self.s1):
 *             self.coarse_ghosts_bool[mi1] = 0             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
    if (unlikely(!__pyx_v_self->coarse_ghosts_bool.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1753, __pyx_L1_error)}
    __pyx_t_5 = __pyx_v_mi1;
    *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->coarse_ghosts_bool.data + __pyx_t_5 * __pyx_v_self->coarse_ghosts_bool.strides[0]) )) = 0;
  }

  /* "yt/geometry/particle_oct_container.pyx":1743
 *         self.refined_ghosts_list._fill_bool(mm_g)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.set_coarse_bool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":1755
 *             self.coarse_ghosts_bool[mi1] = 0
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_refined_bool(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_g) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_refined_bool", 0);

  /* "yt/geometry/particle_oct_container.pyx":1759
 *     @cython.cdivision(True)
 *     cdef void set_refined_bool(self, BoolArrayColl mm_s, BoolArrayColl mm_g):
 *         mm_s._append(self.select_ewah)             # <<<<<<<<<<<<<<
 *         mm_g._append(self.ghosts_ewah)
 * 
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->select_ewah);
  __Pyx_INCREF(__pyx_t_1);
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_mm_s->__pyx_vtab)->_append(__pyx_v_mm_s, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1759, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1760
 *     cdef void set_refined_bool(self, BoolArrayColl mm_s, BoolArrayColl mm_g):
 *         mm_s._append(self.select_ewah)
 *         mm_g._append(self.ghosts_ewah)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __pyx_t_1 = ((PyObject *)__pyx_v_self->ghosts_ewah);
  __Pyx_INCREF(__pyx_t_1);
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_mm_g->__pyx_vtab)->_append(__pyx_v_mm_g, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_t_1)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1760, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1755
 *             self.coarse_ghosts_bool[mi1] = 0
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.set_refined_bool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "yt/geometry/particle_oct_container.pyx":1762
 *         mm_g._append(self.ghosts_ewah)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_push_refined_bool(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_mi1) {
  __pyx_t_5numpy_uint64_t __pyx_v_mi2;
  Py_ssize_t __pyx_t_1;
  __pyx_t_5numpy_uint64_t __pyx_t_2;
  __pyx_t_5numpy_uint64_t __pyx_t_3;
  __pyx_t_5numpy_uint64_t __pyx_t_4;
  __pyx_t_5numpy_uint64_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1768
 *     cdef void push_refined_bool(self, np.uint64_t mi1):
 *         cdef np.uint64_t mi2
 *         self.select_ewah._set_refined_array_ptr(mi1, &self.refined_select_bool[0])             # <<<<<<<<<<<<<<
 *         for mi2 in range(self.s2):
 *             self.refined_select_bool[mi2] = 0
*/
  __pyx_t_1 = 0;
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_self->select_ewah->__pyx_vtab)->_set_refined_array_ptr(__pyx_v_self->select_ewah, __pyx_v_mi1, (&(*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->refined_select_bool.data + __pyx_t_1 * __pyx_v_self->refined_select_bool.strides[0]) ))))); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1768, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1769
 *         cdef np.uint64_t mi2
 *         self.select_ewah._set_refined_array_ptr(mi1, &self.refined_select_bool[0])
 *         for mi2 in range(self.s2):             # <<<<<<<<<<<<<<
 *             self.refined_select_bool[mi2] = 0
 *         self.ghosts_ewah._set_refined_array_ptr(mi1, &self.refined_ghosts_bool[0])
*/
  __pyx_t_2 = __pyx_v_self->s2;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_mi2 = __pyx_t_4;

    /* "yt/geometry/particle_oct_container.pyx":1770
 *         self.select_ewah._set_refined_array_ptr(mi1, &self.refined_select_bool[0])
 *         for mi2 in range(self.s2):
 *             self.refined_select_bool[mi2] = 0             # <<<<<<<<<<<<<<
 *         self.ghosts_ewah._set_refined_array_ptr(mi1, &self.refined_ghosts_bool[0])
 *         for mi2 in range(self.s2):
*/
    __pyx_t_5 = __pyx_v_mi2;
    *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->refined_select_bool.data + __pyx_t_5 * __pyx_v_self->refined_select_bool.strides[0]) )) = 0;
  }

  /* "yt/geometry/particle_oct_container.pyx":1771
 *         for mi2 in range(self.s2):
 *             self.refined_select_bool[mi2] = 0
 *         self.ghosts_ewah._set_refined_array_ptr(mi1, &self.refined_ghosts_bool[0])             # <<<<<<<<<<<<<<
 *         for mi2 in range(self.s2):
 *             self.refined_ghosts_bool[mi2] = 0
*/
  __pyx_t_1 = 0;
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_self->ghosts_ewah->__pyx_vtab)->_set_refined_array_ptr(__pyx_v_self->ghosts_ewah, __pyx_v_mi1, (&(*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->refined_ghosts_bool.data + __pyx_t_1 * __pyx_v_self->refined_ghosts_bool.strides[0]) ))))); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1771, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1772
 *             self.refined_select_bool[mi2] = 0
 *         self.ghosts_ewah._set_refined_array_ptr(mi1, &self.refined_ghosts_bool[0])
 *         for mi2 in range(self.s2):             # <<<<<<<<<<<<<<
 *             self.refined_ghosts_bool[mi2] = 0
 * 
*/
  __pyx_t_2 = __pyx_v_self->s2;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_mi2 = __pyx_t_4;

    /* "yt/geometry/particle_oct_container.pyx":1773
 *         self.ghosts_ewah._set_refined_array_ptr(mi1, &self.refined_ghosts_bool[0])
 *         for mi2 in range(self.s2):
 *             self.refined_ghosts_bool[mi2] = 0             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
    __pyx_t_5 = __pyx_v_mi2;
    *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->refined_ghosts_bool.data + __pyx_t_5 * __pyx_v_self->refined_ghosts_bool.strides[0]) )) = 0;
  }

  /* "yt/geometry/particle_oct_container.pyx":1762
 *         mm_g._append(self.ghosts_ewah)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.push_refined_bool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":1775
 *             self.refined_ghosts_bool[mi2] = 0
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_ghost_zones(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_s, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *__pyx_v_mm_g) {
  __pyx_t_5numpy_uint64_t __pyx_v_mi1;
  __pyx_t_5numpy_uint64_t __pyx_v_mi2;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  __pyx_t_5numpy_uint64_t __pyx_t_2;
  __pyx_t_5numpy_uint64_t __pyx_t_3;
  int __pyx_t_4;
  __pyx_t_5numpy_uint64_t __pyx_t_5;
  __pyx_t_5numpy_uint64_t __pyx_t_6;
  __pyx_t_5numpy_uint64_t __pyx_t_7;
  struct __pyx_opt_args_15ewah_bool_utils_14ewah_bool_wrap_31BoolArrayCollectionUncompressed__get __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __pyx_t_5numpy_uint64_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_ghost_zones", 0);

  /* "yt/geometry/particle_oct_container.pyx":1781
 *         cdef np.uint64_t mi1, mi2
 *         # Get ghost zones, unordered
 *         for mi1 in range(self.s1):             # <<<<<<<<<<<<<<
 *             if mm_s._get_coarse(mi1):
 *                 if self.is_refined(mi1):
*/
  __pyx_t_1 = __pyx_v_self->s1;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_mi1 = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":1782
 *         # Get ghost zones, unordered
 *         for mi1 in range(self.s1):
 *             if mm_s._get_coarse(mi1):             # <<<<<<<<<<<<<<
 *                 if self.is_refined(mi1):
 *                     for mi2 in range(self.s2):
*/
    __pyx_t_4 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_mm_s->__pyx_vtab)->_get_coarse(__pyx_v_mm_s, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1782, __pyx_L1_error)
    if (__pyx_t_4) {

      /* "yt/geometry/particle_oct_container.pyx":1783
 *         for mi1 in range(self.s1):
 *             if mm_s._get_coarse(mi1):
 *                 if self.is_refined(mi1):             # <<<<<<<<<<<<<<
 *                     for mi2 in range(self.s2):
 *                         if mm_s._get(mi1, mi2):
*/
      __pyx_t_4 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->is_refined(__pyx_v_self, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1783, __pyx_L1_error)
      if (__pyx_t_4) {

        /* "yt/geometry/particle_oct_container.pyx":1784
 *             if mm_s._get_coarse(mi1):
 *                 if self.is_refined(mi1):
 *                     for mi2 in range(self.s2):             # <<<<<<<<<<<<<<
 *                         if mm_s._get(mi1, mi2):
 *                             self.add_neighbors_refined(mi1, mi2)
*/
        __pyx_t_5 = __pyx_v_self->s2;
        __pyx_t_6 = __pyx_t_5;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
          __pyx_v_mi2 = __pyx_t_7;

          /* "yt/geometry/particle_oct_container.pyx":1785
 *                 if self.is_refined(mi1):
 *                     for mi2 in range(self.s2):
 *                         if mm_s._get(mi1, mi2):             # <<<<<<<<<<<<<<
 *                             self.add_neighbors_refined(mi1, mi2)
 *                     # self.push_refined_bool(mi1)
*/
          __pyx_t_8.__pyx_n = 1;
          __pyx_t_8.i2 = __pyx_v_mi2;
          __pyx_t_4 = ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_mm_s->__pyx_vtab)->_get(__pyx_v_mm_s, __pyx_v_mi1, &__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1785, __pyx_L1_error)
          if (__pyx_t_4) {

            /* "yt/geometry/particle_oct_container.pyx":1786
 *                     for mi2 in range(self.s2):
 *                         if mm_s._get(mi1, mi2):
 *                             self.add_neighbors_refined(mi1, mi2)             # <<<<<<<<<<<<<<
 *                     # self.push_refined_bool(mi1)
 *                     self.ghosts_ewah._set_refined_array_ptr(mi1,
*/
            ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->add_neighbors_refined(__pyx_v_self, __pyx_v_mi1, __pyx_v_mi2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1786, __pyx_L1_error)

            /* "yt/geometry/particle_oct_container.pyx":1785
 *                 if self.is_refined(mi1):
 *                     for mi2 in range(self.s2):
 *                         if mm_s._get(mi1, mi2):             # <<<<<<<<<<<<<<
 *                             self.add_neighbors_refined(mi1, mi2)
 *                     # self.push_refined_bool(mi1)
*/
          }
        }

        /* "yt/geometry/particle_oct_container.pyx":1789
 *                     # self.push_refined_bool(mi1)
 *                     self.ghosts_ewah._set_refined_array_ptr(mi1,
 *                                                             &self.refined_ghosts_bool[0])             # <<<<<<<<<<<<<<
 *                     for mi2 in range(self.s2):
 *                         self.refined_ghosts_bool[mi2] = 0
*/
        if (unlikely(!__pyx_v_self->refined_ghosts_bool.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1789, __pyx_L1_error)}
        __pyx_t_9 = 0;

        /* "yt/geometry/particle_oct_container.pyx":1788
 *                             self.add_neighbors_refined(mi1, mi2)
 *                     # self.push_refined_bool(mi1)
 *                     self.ghosts_ewah._set_refined_array_ptr(mi1,             # <<<<<<<<<<<<<<
 *                                                             &self.refined_ghosts_bool[0])
 *                     for mi2 in range(self.s2):
*/
        ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_self->ghosts_ewah->__pyx_vtab)->_set_refined_array_ptr(__pyx_v_self->ghosts_ewah, __pyx_v_mi1, (&(*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->refined_ghosts_bool.data + __pyx_t_9 * __pyx_v_self->refined_ghosts_bool.strides[0]) ))))); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1788, __pyx_L1_error)

        /* "yt/geometry/particle_oct_container.pyx":1790
 *                     self.ghosts_ewah._set_refined_array_ptr(mi1,
 *                                                             &self.refined_ghosts_bool[0])
 *                     for mi2 in range(self.s2):             # <<<<<<<<<<<<<<
 *                         self.refined_ghosts_bool[mi2] = 0
 *                 else:
*/
        __pyx_t_5 = __pyx_v_self->s2;
        __pyx_t_6 = __pyx_t_5;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
          __pyx_v_mi2 = __pyx_t_7;

          /* "yt/geometry/particle_oct_container.pyx":1791
 *                                                             &self.refined_ghosts_bool[0])
 *                     for mi2 in range(self.s2):
 *                         self.refined_ghosts_bool[mi2] = 0             # <<<<<<<<<<<<<<
 *                 else:
 *                     self.add_neighbors_coarse(mi1)
*/
          if (unlikely(!__pyx_v_self->refined_ghosts_bool.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1791, __pyx_L1_error)}
          __pyx_t_10 = __pyx_v_mi2;
          *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->refined_ghosts_bool.data + __pyx_t_10 * __pyx_v_self->refined_ghosts_bool.strides[0]) )) = 0;
        }

        /* "yt/geometry/particle_oct_container.pyx":1783
 *         for mi1 in range(self.s1):
 *             if mm_s._get_coarse(mi1):
 *                 if self.is_refined(mi1):             # <<<<<<<<<<<<<<
 *                     for mi2 in range(self.s2):
 *                         if mm_s._get(mi1, mi2):
*/
        goto __pyx_L6;
      }

      /* "yt/geometry/particle_oct_container.pyx":1793
 *                         self.refined_ghosts_bool[mi2] = 0
 *                 else:
 *                     self.add_neighbors_coarse(mi1)             # <<<<<<<<<<<<<<
 *         # Add ghost zones to bool array in order
 *         mm_g._set_coarse_array_ptr(&self.coarse_ghosts_bool[0])
*/
      /*else*/ {
        ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->add_neighbors_coarse(__pyx_v_self, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1793, __pyx_L1_error)
      }
      __pyx_L6:;

      /* "yt/geometry/particle_oct_container.pyx":1782
 *         # Get ghost zones, unordered
 *         for mi1 in range(self.s1):
 *             if mm_s._get_coarse(mi1):             # <<<<<<<<<<<<<<
 *                 if self.is_refined(mi1):
 *                     for mi2 in range(self.s2):
*/
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":1795
 *                     self.add_neighbors_coarse(mi1)
 *         # Add ghost zones to bool array in order
 *         mm_g._set_coarse_array_ptr(&self.coarse_ghosts_bool[0])             # <<<<<<<<<<<<<<
 *         for mi1 in range(self.s1):
 *             self.coarse_ghosts_bool[mi1] = 0
*/
  if (unlikely(!__pyx_v_self->coarse_ghosts_bool.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1795, __pyx_L1_error)}
  __pyx_t_9 = 0;
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_mm_g->__pyx_vtab)->_set_coarse_array_ptr(__pyx_v_mm_g, (&(*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->coarse_ghosts_bool.data + __pyx_t_9 * __pyx_v_self->coarse_ghosts_bool.strides[0]) ))))); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1795, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1796
 *         # Add ghost zones to bool array in order
 *         mm_g._set_coarse_array_ptr(&self.coarse_ghosts_bool[0])
 *         for mi1 in range(self.s1):             # <<<<<<<<<<<<<<
 *             self.coarse_ghosts_bool[mi1] = 0
 *         self.refined_ghosts_list._fill_bool(mm_g)
*/
  __pyx_t_1 = __pyx_v_self->s1;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_mi1 = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":1797
 *         mm_g._set_coarse_array_ptr(&self.coarse_ghosts_bool[0])
 *         for mi1 in range(self.s1):
 *             self.coarse_ghosts_bool[mi1] = 0             # <<<<<<<<<<<<<<
 *         self.refined_ghosts_list._fill_bool(mm_g)
 *         mm_g._append(self.ghosts_ewah)
*/
    if (unlikely(!__pyx_v_self->coarse_ghosts_bool.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1797, __pyx_L1_error)}
    __pyx_t_5 = __pyx_v_mi1;
    *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->coarse_ghosts_bool.data + __pyx_t_5 * __pyx_v_self->coarse_ghosts_bool.strides[0]) )) = 0;
  }

  /* "yt/geometry/particle_oct_container.pyx":1798
 *         for mi1 in range(self.s1):
 *             self.coarse_ghosts_bool[mi1] = 0
 *         self.refined_ghosts_list._fill_bool(mm_g)             # <<<<<<<<<<<<<<
 *         mm_g._append(self.ghosts_ewah)
 * 
*/
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *)__pyx_v_self->refined_ghosts_list->__pyx_vtab)->_fill_bool(__pyx_v_self->refined_ghosts_list, __pyx_v_mm_g); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1798, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1799
 *             self.coarse_ghosts_bool[mi1] = 0
 *         self.refined_ghosts_list._fill_bool(mm_g)
 *         mm_g._append(self.ghosts_ewah)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __pyx_t_11 = ((PyObject *)__pyx_v_self->ghosts_ewah);
  __Pyx_INCREF(__pyx_t_11);
  ((struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_v_mm_g->__pyx_vtab)->_append(__pyx_v_mm_g, ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)__pyx_t_11)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1799, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1775
 *             self.refined_ghosts_bool[mi2] = 0
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.add_ghost_zones", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "yt/geometry/particle_oct_container.pyx":1801
 *         mm_g._append(self.ghosts_ewah)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static int __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_fill_subcells_mi1(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_nlevel, __pyx_t_5numpy_uint64_t *__pyx_v_ind1) {
  __pyx_t_5numpy_uint64_t __pyx_v_imi;
  __pyx_t_5numpy_uint64_t __pyx_v_fmi;
  __pyx_t_5numpy_uint64_t __pyx_v_mi;
  __pyx_t_5numpy_uint64_t __pyx_v_shift_by;
  int __pyx_r;
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  __pyx_t_5numpy_uint64_t __pyx_t_2;
  __pyx_t_5numpy_uint64_t __pyx_t_3;
  struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_coarse __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1809
 *         cdef np.uint64_t imi, fmi
 *         cdef np.uint64_t mi
 *         cdef np.uint64_t shift_by = 3 * (self.bitmap.index_order1 - nlevel)             # <<<<<<<<<<<<<<
 *         imi = encode_morton_64bit(ind1[0], ind1[1], ind1[2]) << shift_by
 *         fmi = imi + (1 << shift_by)
*/
  __pyx_v_shift_by = (3 * (__pyx_v_self->bitmap->index_order1 - __pyx_v_nlevel));

  /* "yt/geometry/particle_oct_container.pyx":1810
 *         cdef np.uint64_t mi
 *         cdef np.uint64_t shift_by = 3 * (self.bitmap.index_order1 - nlevel)
 *         imi = encode_morton_64bit(ind1[0], ind1[1], ind1[2]) << shift_by             # <<<<<<<<<<<<<<
 *         fmi = imi + (1 << shift_by)
 *         for mi in range(imi, fmi):
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit((__pyx_v_ind1[0]), (__pyx_v_ind1[1]), (__pyx_v_ind1[2])); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1810, __pyx_L1_error)
  __pyx_v_imi = (__pyx_t_1 << __pyx_v_shift_by);

  /* "yt/geometry/particle_oct_container.pyx":1811
 *         cdef np.uint64_t shift_by = 3 * (self.bitmap.index_order1 - nlevel)
 *         imi = encode_morton_64bit(ind1[0], ind1[1], ind1[2]) << shift_by
 *         fmi = imi + (1 << shift_by)             # <<<<<<<<<<<<<<
 *         for mi in range(imi, fmi):
 *             self.add_coarse(mi, 1)
*/
  __pyx_v_fmi = (__pyx_v_imi + (1 << __pyx_v_shift_by));

  /* "yt/geometry/particle_oct_container.pyx":1812
 *         imi = encode_morton_64bit(ind1[0], ind1[1], ind1[2]) << shift_by
 *         fmi = imi + (1 << shift_by)
 *         for mi in range(imi, fmi):             # <<<<<<<<<<<<<<
 *             self.add_coarse(mi, 1)
 * 
*/
  __pyx_t_1 = __pyx_v_fmi;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = __pyx_v_imi; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_mi = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":1813
 *         fmi = imi + (1 << shift_by)
 *         for mi in range(imi, fmi):
 *             self.add_coarse(mi, 1)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
    __pyx_t_4.__pyx_n = 1;
    __pyx_t_4.bbox = 1;
    ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->add_coarse(__pyx_v_self, __pyx_v_mi, &__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1813, __pyx_L1_error)
  }

  /* "yt/geometry/particle_oct_container.pyx":1801
 *         mm_g._append(self.ghosts_ewah)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.fill_subcells_mi1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1815
 *             self.add_coarse(mi, 1)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static int __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_fill_subcells_mi2(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_uint64_t __pyx_v_nlevel, __pyx_t_5numpy_uint64_t __pyx_v_mi1, __pyx_t_5numpy_uint64_t *__pyx_v_ind2) {
  __pyx_t_5numpy_uint64_t __pyx_v_imi;
  __pyx_t_5numpy_uint64_t __pyx_v_fmi;
  __pyx_t_5numpy_uint64_t __pyx_v_shift_by;
  __pyx_t_5numpy_uint64_t __pyx_v_mi2;
  int __pyx_r;
  __pyx_t_5numpy_uint64_t __pyx_t_1;
  __pyx_t_5numpy_uint64_t __pyx_t_2;
  __pyx_t_5numpy_uint64_t __pyx_t_3;
  int __pyx_t_4;
  struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_refined __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1823
 *                                np.uint64_t ind2[3]) except -1:
 *         cdef np.uint64_t imi, fmi
 *         cdef np.uint64_t shift_by = 3 * ((self.bitmap.index_order2 +             # <<<<<<<<<<<<<<
 *                                           self.bitmap.index_order1) - nlevel)
 *         imi = encode_morton_64bit(ind2[0], ind2[1], ind2[2]) << shift_by
*/
  __pyx_v_shift_by = (3 * ((__pyx_v_self->bitmap->index_order2 + __pyx_v_self->bitmap->index_order1) - __pyx_v_nlevel));

  /* "yt/geometry/particle_oct_container.pyx":1825
 *         cdef np.uint64_t shift_by = 3 * ((self.bitmap.index_order2 +
 *                                           self.bitmap.index_order1) - nlevel)
 *         imi = encode_morton_64bit(ind2[0], ind2[1], ind2[2]) << shift_by             # <<<<<<<<<<<<<<
 *         fmi = imi + (1 << shift_by)
 *         for mi2 in range(imi, fmi):
*/
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit((__pyx_v_ind2[0]), (__pyx_v_ind2[1]), (__pyx_v_ind2[2])); if (unlikely(__pyx_t_1 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1825, __pyx_L1_error)
  __pyx_v_imi = (__pyx_t_1 << __pyx_v_shift_by);

  /* "yt/geometry/particle_oct_container.pyx":1826
 *                                           self.bitmap.index_order1) - nlevel)
 *         imi = encode_morton_64bit(ind2[0], ind2[1], ind2[2]) << shift_by
 *         fmi = imi + (1 << shift_by)             # <<<<<<<<<<<<<<
 *         for mi2 in range(imi, fmi):
 *             self.add_refined(mi1, mi2, 1)
*/
  __pyx_v_fmi = (__pyx_v_imi + (1 << __pyx_v_shift_by));

  /* "yt/geometry/particle_oct_container.pyx":1827
 *         imi = encode_morton_64bit(ind2[0], ind2[1], ind2[2]) << shift_by
 *         fmi = imi + (1 << shift_by)
 *         for mi2 in range(imi, fmi):             # <<<<<<<<<<<<<<
 *             self.add_refined(mi1, mi2, 1)
 * 
*/
  __pyx_t_1 = __pyx_v_fmi;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = __pyx_v_imi; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_mi2 = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":1828
 *         fmi = imi + (1 << shift_by)
 *         for mi2 in range(imi, fmi):
 *             self.add_refined(mi1, mi2, 1)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
    __pyx_t_5.__pyx_n = 1;
    __pyx_t_5.bbox = 1;
    __pyx_t_4 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->add_refined(__pyx_v_self, __pyx_v_mi1, __pyx_v_mi2, &__pyx_t_5); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 1828, __pyx_L1_error)
  }

  /* "yt/geometry/particle_oct_container.pyx":1815
 *             self.add_coarse(mi, 1)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.fill_subcells_mi2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1830
 *             self.add_refined(mi1, mi2, 1)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static int __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_recursive_morton_mask(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_int32_t __pyx_v_level, __pyx_t_5numpy_float64_t *__pyx_v_pos, __pyx_t_5numpy_float64_t *__pyx_v_dds, __pyx_t_5numpy_uint64_t __pyx_v_mi1, __pyx_t_5numpy_uint64_t *__pyx_v_cur_ind) {
  __pyx_t_5numpy_uint64_t __pyx_v_mi2;
  __pyx_t_5numpy_float64_t __pyx_v_npos[3];
  __pyx_t_5numpy_float64_t __pyx_v_rpos[3];
  __pyx_t_5numpy_float64_t __pyx_v_ndds[3];
  __pyx_t_5numpy_uint64_t __pyx_v_nlevel;
  __pyx_t_5numpy_uint64_t __pyx_v_ncur_ind[3];
  __pyx_t_5numpy_uint64_t *__pyx_v_zeros;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_sbbox;
  int __pyx_r;
  __pyx_t_5numpy_uint64_t __pyx_t_1[3];
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __pyx_t_5numpy_uint64_t __pyx_t_7;
  int __pyx_t_8;
  struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_coarse __pyx_t_9;
  struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_refined __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1842
 *         cdef np.uint64_t nlevel
 *         cdef np.uint64_t ncur_ind[3]
 *         cdef np.uint64_t* zeros = [0, 0, 0]             # <<<<<<<<<<<<<<
 *         cdef int i, j, k, sbbox
 *         PyErr_CheckSignals()
*/
  __pyx_t_1[0] = 0;
  __pyx_t_1[1] = 0;
  __pyx_t_1[2] = 0;
  __pyx_v_zeros = __pyx_t_1;

  /* "yt/geometry/particle_oct_container.pyx":1844
 *         cdef np.uint64_t* zeros = [0, 0, 0]
 *         cdef int i, j, k, sbbox
 *         PyErr_CheckSignals()             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             ndds[i] = dds[i]/2
*/
  __pyx_t_2 = PyErr_CheckSignals(); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 1844, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1845
 *         cdef int i, j, k, sbbox
 *         PyErr_CheckSignals()
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             ndds[i] = dds[i]/2
 *         nlevel = level + 1
*/
  for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "yt/geometry/particle_oct_container.pyx":1846
 *         PyErr_CheckSignals()
 *         for i in range(3):
 *             ndds[i] = dds[i]/2             # <<<<<<<<<<<<<<
 *         nlevel = level + 1
 *         # Loop over octs
*/
    (__pyx_v_ndds[__pyx_v_i]) = ((__pyx_v_dds[__pyx_v_i]) / 2.0);
  }

  /* "yt/geometry/particle_oct_container.pyx":1847
 *         for i in range(3):
 *             ndds[i] = dds[i]/2
 *         nlevel = level + 1             # <<<<<<<<<<<<<<
 *         # Loop over octs
 *         for i in range(2):
*/
  __pyx_v_nlevel = (__pyx_v_level + 1);

  /* "yt/geometry/particle_oct_container.pyx":1849
 *         nlevel = level + 1
 *         # Loop over octs
 *         for i in range(2):             # <<<<<<<<<<<<<<
 *             npos[0] = pos[0] + i*ndds[0]
 *             rpos[0] = npos[0] + ndds[0]
*/
  for (__pyx_t_2 = 0; __pyx_t_2 < 2; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "yt/geometry/particle_oct_container.pyx":1850
 *         # Loop over octs
 *         for i in range(2):
 *             npos[0] = pos[0] + i*ndds[0]             # <<<<<<<<<<<<<<
 *             rpos[0] = npos[0] + ndds[0]
 *             ncur_ind[0] = (cur_ind[0] << 1) + i
*/
    (__pyx_v_npos[0]) = ((__pyx_v_pos[0]) + (__pyx_v_i * (__pyx_v_ndds[0])));

    /* "yt/geometry/particle_oct_container.pyx":1851
 *         for i in range(2):
 *             npos[0] = pos[0] + i*ndds[0]
 *             rpos[0] = npos[0] + ndds[0]             # <<<<<<<<<<<<<<
 *             ncur_ind[0] = (cur_ind[0] << 1) + i
 *             for j in range(2):
*/
    (__pyx_v_rpos[0]) = ((__pyx_v_npos[0]) + (__pyx_v_ndds[0]));

    /* "yt/geometry/particle_oct_container.pyx":1852
 *             npos[0] = pos[0] + i*ndds[0]
 *             rpos[0] = npos[0] + ndds[0]
 *             ncur_ind[0] = (cur_ind[0] << 1) + i             # <<<<<<<<<<<<<<
 *             for j in range(2):
 *                 npos[1] = pos[1] + j*ndds[1]
*/
    (__pyx_v_ncur_ind[0]) = (((__pyx_v_cur_ind[0]) << 1) + __pyx_v_i);

    /* "yt/geometry/particle_oct_container.pyx":1853
 *             rpos[0] = npos[0] + ndds[0]
 *             ncur_ind[0] = (cur_ind[0] << 1) + i
 *             for j in range(2):             # <<<<<<<<<<<<<<
 *                 npos[1] = pos[1] + j*ndds[1]
 *                 rpos[1] = npos[1] + ndds[1]
*/
    for (__pyx_t_3 = 0; __pyx_t_3 < 2; __pyx_t_3+=1) {
      __pyx_v_j = __pyx_t_3;

      /* "yt/geometry/particle_oct_container.pyx":1854
 *             ncur_ind[0] = (cur_ind[0] << 1) + i
 *             for j in range(2):
 *                 npos[1] = pos[1] + j*ndds[1]             # <<<<<<<<<<<<<<
 *                 rpos[1] = npos[1] + ndds[1]
 *                 ncur_ind[1] = (cur_ind[1] << 1) + j
*/
      (__pyx_v_npos[1]) = ((__pyx_v_pos[1]) + (__pyx_v_j * (__pyx_v_ndds[1])));

      /* "yt/geometry/particle_oct_container.pyx":1855
 *             for j in range(2):
 *                 npos[1] = pos[1] + j*ndds[1]
 *                 rpos[1] = npos[1] + ndds[1]             # <<<<<<<<<<<<<<
 *                 ncur_ind[1] = (cur_ind[1] << 1) + j
 *                 for k in range(2):
*/
      (__pyx_v_rpos[1]) = ((__pyx_v_npos[1]) + (__pyx_v_ndds[1]));

      /* "yt/geometry/particle_oct_container.pyx":1856
 *                 npos[1] = pos[1] + j*ndds[1]
 *                 rpos[1] = npos[1] + ndds[1]
 *                 ncur_ind[1] = (cur_ind[1] << 1) + j             # <<<<<<<<<<<<<<
 *                 for k in range(2):
 *                     npos[2] = pos[2] + k*ndds[2]
*/
      (__pyx_v_ncur_ind[1]) = (((__pyx_v_cur_ind[1]) << 1) + __pyx_v_j);

      /* "yt/geometry/particle_oct_container.pyx":1857
 *                 rpos[1] = npos[1] + ndds[1]
 *                 ncur_ind[1] = (cur_ind[1] << 1) + j
 *                 for k in range(2):             # <<<<<<<<<<<<<<
 *                     npos[2] = pos[2] + k*ndds[2]
 *                     rpos[2] = npos[2] + ndds[2]
*/
      for (__pyx_t_4 = 0; __pyx_t_4 < 2; __pyx_t_4+=1) {
        __pyx_v_k = __pyx_t_4;

        /* "yt/geometry/particle_oct_container.pyx":1858
 *                 ncur_ind[1] = (cur_ind[1] << 1) + j
 *                 for k in range(2):
 *                     npos[2] = pos[2] + k*ndds[2]             # <<<<<<<<<<<<<<
 *                     rpos[2] = npos[2] + ndds[2]
 *                     ncur_ind[2] = (cur_ind[2] << 1) + k
*/
        (__pyx_v_npos[2]) = ((__pyx_v_pos[2]) + (__pyx_v_k * (__pyx_v_ndds[2])));

        /* "yt/geometry/particle_oct_container.pyx":1859
 *                 for k in range(2):
 *                     npos[2] = pos[2] + k*ndds[2]
 *                     rpos[2] = npos[2] + ndds[2]             # <<<<<<<<<<<<<<
 *                     ncur_ind[2] = (cur_ind[2] << 1) + k
 *                     # Only recurse into selected cells
*/
        (__pyx_v_rpos[2]) = ((__pyx_v_npos[2]) + (__pyx_v_ndds[2]));

        /* "yt/geometry/particle_oct_container.pyx":1860
 *                     npos[2] = pos[2] + k*ndds[2]
 *                     rpos[2] = npos[2] + ndds[2]
 *                     ncur_ind[2] = (cur_ind[2] << 1) + k             # <<<<<<<<<<<<<<
 *                     # Only recurse into selected cells
 *                     sbbox = self.selector.select_bbox_edge(npos, rpos)
*/
        (__pyx_v_ncur_ind[2]) = (((__pyx_v_cur_ind[2]) << 1) + __pyx_v_k);

        /* "yt/geometry/particle_oct_container.pyx":1862
 *                     ncur_ind[2] = (cur_ind[2] << 1) + k
 *                     # Only recurse into selected cells
 *                     sbbox = self.selector.select_bbox_edge(npos, rpos)             # <<<<<<<<<<<<<<
 *                     if sbbox == 0:
 *                         continue
*/
        __pyx_v_sbbox = ((struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject *)__pyx_v_self->selector->__pyx_vtab)->select_bbox_edge(__pyx_v_self->selector, __pyx_v_npos, __pyx_v_rpos);

        /* "yt/geometry/particle_oct_container.pyx":1863
 *                     # Only recurse into selected cells
 *                     sbbox = self.selector.select_bbox_edge(npos, rpos)
 *                     if sbbox == 0:             # <<<<<<<<<<<<<<
 *                         continue
 *                     if nlevel < self.order1:
*/
        __pyx_t_5 = (__pyx_v_sbbox == 0);
        if (__pyx_t_5) {

          /* "yt/geometry/particle_oct_container.pyx":1864
 *                     sbbox = self.selector.select_bbox_edge(npos, rpos)
 *                     if sbbox == 0:
 *                         continue             # <<<<<<<<<<<<<<
 *                     if nlevel < self.order1:
 *                         if sbbox == 1:
*/
          goto __pyx_L9_continue;

          /* "yt/geometry/particle_oct_container.pyx":1863
 *                     # Only recurse into selected cells
 *                     sbbox = self.selector.select_bbox_edge(npos, rpos)
 *                     if sbbox == 0:             # <<<<<<<<<<<<<<
 *                         continue
 *                     if nlevel < self.order1:
*/
        }

        /* "yt/geometry/particle_oct_container.pyx":1865
 *                     if sbbox == 0:
 *                         continue
 *                     if nlevel < self.order1:             # <<<<<<<<<<<<<<
 *                         if sbbox == 1:
 *                             self.fill_subcells_mi1(nlevel, ncur_ind)
*/
        __pyx_t_5 = (__pyx_v_nlevel < __pyx_v_self->order1);
        if (__pyx_t_5) {

          /* "yt/geometry/particle_oct_container.pyx":1866
 *                         continue
 *                     if nlevel < self.order1:
 *                         if sbbox == 1:             # <<<<<<<<<<<<<<
 *                             self.fill_subcells_mi1(nlevel, ncur_ind)
 *                         else:
*/
          __pyx_t_5 = (__pyx_v_sbbox == 1);
          if (__pyx_t_5) {

            /* "yt/geometry/particle_oct_container.pyx":1867
 *                     if nlevel < self.order1:
 *                         if sbbox == 1:
 *                             self.fill_subcells_mi1(nlevel, ncur_ind)             # <<<<<<<<<<<<<<
 *                         else:
 *                             self.recursive_morton_mask(
*/
            __pyx_t_6 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->fill_subcells_mi1(__pyx_v_self, __pyx_v_nlevel, __pyx_v_ncur_ind); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1867, __pyx_L1_error)

            /* "yt/geometry/particle_oct_container.pyx":1866
 *                         continue
 *                     if nlevel < self.order1:
 *                         if sbbox == 1:             # <<<<<<<<<<<<<<
 *                             self.fill_subcells_mi1(nlevel, ncur_ind)
 *                         else:
*/
            goto __pyx_L13;
          }

          /* "yt/geometry/particle_oct_container.pyx":1869
 *                             self.fill_subcells_mi1(nlevel, ncur_ind)
 *                         else:
 *                             self.recursive_morton_mask(             # <<<<<<<<<<<<<<
 *                                 nlevel, npos, ndds, mi1, ncur_ind)
 *                     elif nlevel == self.order1:
*/
          /*else*/ {

            /* "yt/geometry/particle_oct_container.pyx":1870
 *                         else:
 *                             self.recursive_morton_mask(
 *                                 nlevel, npos, ndds, mi1, ncur_ind)             # <<<<<<<<<<<<<<
 *                     elif nlevel == self.order1:
 *                         mi1 = encode_morton_64bit(
*/
            __pyx_t_6 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->recursive_morton_mask(__pyx_v_self, __pyx_v_nlevel, __pyx_v_npos, __pyx_v_ndds, __pyx_v_mi1, __pyx_v_ncur_ind); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1869, __pyx_L1_error)
          }
          __pyx_L13:;

          /* "yt/geometry/particle_oct_container.pyx":1865
 *                     if sbbox == 0:
 *                         continue
 *                     if nlevel < self.order1:             # <<<<<<<<<<<<<<
 *                         if sbbox == 1:
 *                             self.fill_subcells_mi1(nlevel, ncur_ind)
*/
          goto __pyx_L12;
        }

        /* "yt/geometry/particle_oct_container.pyx":1871
 *                             self.recursive_morton_mask(
 *                                 nlevel, npos, ndds, mi1, ncur_ind)
 *                     elif nlevel == self.order1:             # <<<<<<<<<<<<<<
 *                         mi1 = encode_morton_64bit(
 *                             ncur_ind[0], ncur_ind[1], ncur_ind[2])
*/
        __pyx_t_5 = (__pyx_v_nlevel == __pyx_v_self->order1);
        if (__pyx_t_5) {

          /* "yt/geometry/particle_oct_container.pyx":1872
 *                                 nlevel, npos, ndds, mi1, ncur_ind)
 *                     elif nlevel == self.order1:
 *                         mi1 = encode_morton_64bit(             # <<<<<<<<<<<<<<
 *                             ncur_ind[0], ncur_ind[1], ncur_ind[2])
 *                         if sbbox == 2: # an edge cell
*/
          __pyx_t_7 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit((__pyx_v_ncur_ind[0]), (__pyx_v_ncur_ind[1]), (__pyx_v_ncur_ind[2])); if (unlikely(__pyx_t_7 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1872, __pyx_L1_error)
          __pyx_v_mi1 = __pyx_t_7;

          /* "yt/geometry/particle_oct_container.pyx":1874
 *                         mi1 = encode_morton_64bit(
 *                             ncur_ind[0], ncur_ind[1], ncur_ind[2])
 *                         if sbbox == 2: # an edge cell             # <<<<<<<<<<<<<<
 *                             if self.is_refined(mi1) == 1:
 *                                 # note we pass zeros here in the last argument
*/
          __pyx_t_5 = (__pyx_v_sbbox == 2);
          if (__pyx_t_5) {

            /* "yt/geometry/particle_oct_container.pyx":1875
 *                             ncur_ind[0], ncur_ind[1], ncur_ind[2])
 *                         if sbbox == 2: # an edge cell
 *                             if self.is_refined(mi1) == 1:             # <<<<<<<<<<<<<<
 *                                 # note we pass zeros here in the last argument
 *                                 # this is because we now need to generate
*/
            __pyx_t_5 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->is_refined(__pyx_v_self, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1875, __pyx_L1_error)
            __pyx_t_8 = (__pyx_t_5 == 1);
            if (__pyx_t_8) {

              /* "yt/geometry/particle_oct_container.pyx":1885
 *                                 # calculated in each stack frame) so this is
 *                                 # safe
 *                                 self.recursive_morton_mask(             # <<<<<<<<<<<<<<
 *                                     nlevel, npos, ndds, mi1, zeros)
 *                         self.add_coarse(mi1, sbbox)
*/
              __pyx_t_6 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->recursive_morton_mask(__pyx_v_self, __pyx_v_nlevel, __pyx_v_npos, __pyx_v_ndds, __pyx_v_mi1, __pyx_v_zeros); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1885, __pyx_L1_error)

              /* "yt/geometry/particle_oct_container.pyx":1875
 *                             ncur_ind[0], ncur_ind[1], ncur_ind[2])
 *                         if sbbox == 2: # an edge cell
 *                             if self.is_refined(mi1) == 1:             # <<<<<<<<<<<<<<
 *                                 # note we pass zeros here in the last argument
 *                                 # this is because we now need to generate
*/
            }

            /* "yt/geometry/particle_oct_container.pyx":1874
 *                         mi1 = encode_morton_64bit(
 *                             ncur_ind[0], ncur_ind[1], ncur_ind[2])
 *                         if sbbox == 2: # an edge cell             # <<<<<<<<<<<<<<
 *                             if self.is_refined(mi1) == 1:
 *                                 # note we pass zeros here in the last argument
*/
          }

          /* "yt/geometry/particle_oct_container.pyx":1887
 *                                 self.recursive_morton_mask(
 *                                     nlevel, npos, ndds, mi1, zeros)
 *                         self.add_coarse(mi1, sbbox)             # <<<<<<<<<<<<<<
 *                         self.push_refined_bool(mi1)
 *                     elif nlevel < (self.order1 + self.order2):
*/
          __pyx_t_9.__pyx_n = 1;
          __pyx_t_9.bbox = __pyx_v_sbbox;
          ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->add_coarse(__pyx_v_self, __pyx_v_mi1, &__pyx_t_9); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1887, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":1888
 *                                     nlevel, npos, ndds, mi1, zeros)
 *                         self.add_coarse(mi1, sbbox)
 *                         self.push_refined_bool(mi1)             # <<<<<<<<<<<<<<
 *                     elif nlevel < (self.order1 + self.order2):
 *                         if sbbox == 1:
*/
          ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->push_refined_bool(__pyx_v_self, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1888, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":1871
 *                             self.recursive_morton_mask(
 *                                 nlevel, npos, ndds, mi1, ncur_ind)
 *                     elif nlevel == self.order1:             # <<<<<<<<<<<<<<
 *                         mi1 = encode_morton_64bit(
 *                             ncur_ind[0], ncur_ind[1], ncur_ind[2])
*/
          goto __pyx_L12;
        }

        /* "yt/geometry/particle_oct_container.pyx":1889
 *                         self.add_coarse(mi1, sbbox)
 *                         self.push_refined_bool(mi1)
 *                     elif nlevel < (self.order1 + self.order2):             # <<<<<<<<<<<<<<
 *                         if sbbox == 1:
 *                             self.fill_subcells_mi2(nlevel, mi1, ncur_ind)
*/
        __pyx_t_8 = (__pyx_v_nlevel < (__pyx_v_self->order1 + __pyx_v_self->order2));
        if (__pyx_t_8) {

          /* "yt/geometry/particle_oct_container.pyx":1890
 *                         self.push_refined_bool(mi1)
 *                     elif nlevel < (self.order1 + self.order2):
 *                         if sbbox == 1:             # <<<<<<<<<<<<<<
 *                             self.fill_subcells_mi2(nlevel, mi1, ncur_ind)
 *                         else:
*/
          __pyx_t_8 = (__pyx_v_sbbox == 1);
          if (__pyx_t_8) {

            /* "yt/geometry/particle_oct_container.pyx":1891
 *                     elif nlevel < (self.order1 + self.order2):
 *                         if sbbox == 1:
 *                             self.fill_subcells_mi2(nlevel, mi1, ncur_ind)             # <<<<<<<<<<<<<<
 *                         else:
 *                             self.recursive_morton_mask(
*/
            __pyx_t_6 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->fill_subcells_mi2(__pyx_v_self, __pyx_v_nlevel, __pyx_v_mi1, __pyx_v_ncur_ind); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1891, __pyx_L1_error)

            /* "yt/geometry/particle_oct_container.pyx":1890
 *                         self.push_refined_bool(mi1)
 *                     elif nlevel < (self.order1 + self.order2):
 *                         if sbbox == 1:             # <<<<<<<<<<<<<<
 *                             self.fill_subcells_mi2(nlevel, mi1, ncur_ind)
 *                         else:
*/
            goto __pyx_L16;
          }

          /* "yt/geometry/particle_oct_container.pyx":1893
 *                             self.fill_subcells_mi2(nlevel, mi1, ncur_ind)
 *                         else:
 *                             self.recursive_morton_mask(             # <<<<<<<<<<<<<<
 *                                 nlevel, npos, ndds, mi1, ncur_ind)
 *                     elif nlevel == (self.order1 + self.order2):
*/
          /*else*/ {

            /* "yt/geometry/particle_oct_container.pyx":1894
 *                         else:
 *                             self.recursive_morton_mask(
 *                                 nlevel, npos, ndds, mi1, ncur_ind)             # <<<<<<<<<<<<<<
 *                     elif nlevel == (self.order1 + self.order2):
 *                         mi2 = encode_morton_64bit(
*/
            __pyx_t_6 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->recursive_morton_mask(__pyx_v_self, __pyx_v_nlevel, __pyx_v_npos, __pyx_v_ndds, __pyx_v_mi1, __pyx_v_ncur_ind); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1893, __pyx_L1_error)
          }
          __pyx_L16:;

          /* "yt/geometry/particle_oct_container.pyx":1889
 *                         self.add_coarse(mi1, sbbox)
 *                         self.push_refined_bool(mi1)
 *                     elif nlevel < (self.order1 + self.order2):             # <<<<<<<<<<<<<<
 *                         if sbbox == 1:
 *                             self.fill_subcells_mi2(nlevel, mi1, ncur_ind)
*/
          goto __pyx_L12;
        }

        /* "yt/geometry/particle_oct_container.pyx":1895
 *                             self.recursive_morton_mask(
 *                                 nlevel, npos, ndds, mi1, ncur_ind)
 *                     elif nlevel == (self.order1 + self.order2):             # <<<<<<<<<<<<<<
 *                         mi2 = encode_morton_64bit(
 *                             ncur_ind[0], ncur_ind[1], ncur_ind[2])
*/
        __pyx_t_8 = (__pyx_v_nlevel == (__pyx_v_self->order1 + __pyx_v_self->order2));
        if (__pyx_t_8) {

          /* "yt/geometry/particle_oct_container.pyx":1896
 *                                 nlevel, npos, ndds, mi1, ncur_ind)
 *                     elif nlevel == (self.order1 + self.order2):
 *                         mi2 = encode_morton_64bit(             # <<<<<<<<<<<<<<
 *                             ncur_ind[0], ncur_ind[1], ncur_ind[2])
 *                         self.add_refined(mi1, mi2, sbbox)
*/
          __pyx_t_7 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit((__pyx_v_ncur_ind[0]), (__pyx_v_ncur_ind[1]), (__pyx_v_ncur_ind[2])); if (unlikely(__pyx_t_7 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1896, __pyx_L1_error)
          __pyx_v_mi2 = __pyx_t_7;

          /* "yt/geometry/particle_oct_container.pyx":1898
 *                         mi2 = encode_morton_64bit(
 *                             ncur_ind[0], ncur_ind[1], ncur_ind[2])
 *                         self.add_refined(mi1, mi2, sbbox)             # <<<<<<<<<<<<<<
 *         return 0
 * 
*/
          __pyx_t_10.__pyx_n = 1;
          __pyx_t_10.bbox = __pyx_v_sbbox;
          __pyx_t_6 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->add_refined(__pyx_v_self, __pyx_v_mi1, __pyx_v_mi2, &__pyx_t_10); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1898, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":1895
 *                             self.recursive_morton_mask(
 *                                 nlevel, npos, ndds, mi1, ncur_ind)
 *                     elif nlevel == (self.order1 + self.order2):             # <<<<<<<<<<<<<<
 *                         mi2 = encode_morton_64bit(
 *                             ncur_ind[0], ncur_ind[1], ncur_ind[2])
*/
        }
        __pyx_L12:;
        __pyx_L9_continue:;
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":1899
 *                             ncur_ind[0], ncur_ind[1], ncur_ind[2])
 *                         self.add_refined(mi1, mi2, sbbox)
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  __pyx_r = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":1830
 *             self.add_refined(mi1, mi2, 1)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.recursive_morton_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1901
 *         return 0
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_recursive_morton_files(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, __pyx_t_5numpy_int32_t __pyx_v_level, __pyx_t_5numpy_float64_t *__pyx_v_pos, __pyx_t_5numpy_float64_t *__pyx_v_dds, __pyx_t_5numpy_uint64_t __pyx_v_mi1) {
  __pyx_t_5numpy_uint64_t __pyx_v_mi2;
  __pyx_t_5numpy_float64_t __pyx_v_npos[3];
  __pyx_t_5numpy_float64_t __pyx_v_rpos[3];
  __pyx_t_5numpy_float64_t __pyx_v_ndds[3];
  __pyx_t_5numpy_uint64_t __pyx_v_nlevel;
  __pyx_t_5numpy_float64_t __pyx_v_DLE[3];
  __pyx_t_5numpy_uint64_t __pyx_v_ind1[3];
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_m;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __pyx_t_5numpy_uint64_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":1914
 *         cdef np.uint64_t ind1[3]
 *         cdef int i, j, k, m
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             ndds[i] = dds[i]/2
 *         nlevel = level + 1
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":1915
 *         cdef int i, j, k, m
 *         for i in range(3):
 *             ndds[i] = dds[i]/2             # <<<<<<<<<<<<<<
 *         nlevel = level + 1
 *         # Loop over octs
*/
    (__pyx_v_ndds[__pyx_v_i]) = ((__pyx_v_dds[__pyx_v_i]) / 2.0);
  }

  /* "yt/geometry/particle_oct_container.pyx":1916
 *         for i in range(3):
 *             ndds[i] = dds[i]/2
 *         nlevel = level + 1             # <<<<<<<<<<<<<<
 *         # Loop over octs
 *         for i in range(2):
*/
  __pyx_v_nlevel = (__pyx_v_level + 1);

  /* "yt/geometry/particle_oct_container.pyx":1918
 *         nlevel = level + 1
 *         # Loop over octs
 *         for i in range(2):             # <<<<<<<<<<<<<<
 *             npos[0] = pos[0] + i*ndds[0]
 *             rpos[0] = npos[0] + ndds[0]
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 2; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":1919
 *         # Loop over octs
 *         for i in range(2):
 *             npos[0] = pos[0] + i*ndds[0]             # <<<<<<<<<<<<<<
 *             rpos[0] = npos[0] + ndds[0]
 *             for j in range(2):
*/
    (__pyx_v_npos[0]) = ((__pyx_v_pos[0]) + (__pyx_v_i * (__pyx_v_ndds[0])));

    /* "yt/geometry/particle_oct_container.pyx":1920
 *         for i in range(2):
 *             npos[0] = pos[0] + i*ndds[0]
 *             rpos[0] = npos[0] + ndds[0]             # <<<<<<<<<<<<<<
 *             for j in range(2):
 *                 npos[1] = pos[1] + j*ndds[1]
*/
    (__pyx_v_rpos[0]) = ((__pyx_v_npos[0]) + (__pyx_v_ndds[0]));

    /* "yt/geometry/particle_oct_container.pyx":1921
 *             npos[0] = pos[0] + i*ndds[0]
 *             rpos[0] = npos[0] + ndds[0]
 *             for j in range(2):             # <<<<<<<<<<<<<<
 *                 npos[1] = pos[1] + j*ndds[1]
 *                 rpos[1] = npos[1] + ndds[1]
*/
    for (__pyx_t_2 = 0; __pyx_t_2 < 2; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "yt/geometry/particle_oct_container.pyx":1922
 *             rpos[0] = npos[0] + ndds[0]
 *             for j in range(2):
 *                 npos[1] = pos[1] + j*ndds[1]             # <<<<<<<<<<<<<<
 *                 rpos[1] = npos[1] + ndds[1]
 *                 for k in range(2):
*/
      (__pyx_v_npos[1]) = ((__pyx_v_pos[1]) + (__pyx_v_j * (__pyx_v_ndds[1])));

      /* "yt/geometry/particle_oct_container.pyx":1923
 *             for j in range(2):
 *                 npos[1] = pos[1] + j*ndds[1]
 *                 rpos[1] = npos[1] + ndds[1]             # <<<<<<<<<<<<<<
 *                 for k in range(2):
 *                     npos[2] = pos[2] + k*ndds[2]
*/
      (__pyx_v_rpos[1]) = ((__pyx_v_npos[1]) + (__pyx_v_ndds[1]));

      /* "yt/geometry/particle_oct_container.pyx":1924
 *                 npos[1] = pos[1] + j*ndds[1]
 *                 rpos[1] = npos[1] + ndds[1]
 *                 for k in range(2):             # <<<<<<<<<<<<<<
 *                     npos[2] = pos[2] + k*ndds[2]
 *                     rpos[2] = npos[2] + ndds[2]
*/
      for (__pyx_t_3 = 0; __pyx_t_3 < 2; __pyx_t_3+=1) {
        __pyx_v_k = __pyx_t_3;

        /* "yt/geometry/particle_oct_container.pyx":1925
 *                 rpos[1] = npos[1] + ndds[1]
 *                 for k in range(2):
 *                     npos[2] = pos[2] + k*ndds[2]             # <<<<<<<<<<<<<<
 *                     rpos[2] = npos[2] + ndds[2]
 *                     # Only recurse into selected cells
*/
        (__pyx_v_npos[2]) = ((__pyx_v_pos[2]) + (__pyx_v_k * (__pyx_v_ndds[2])));

        /* "yt/geometry/particle_oct_container.pyx":1926
 *                 for k in range(2):
 *                     npos[2] = pos[2] + k*ndds[2]
 *                     rpos[2] = npos[2] + ndds[2]             # <<<<<<<<<<<<<<
 *                     # Only recurse into selected cells
 *                     if not self.selector.select_bbox(npos, rpos): continue
*/
        (__pyx_v_rpos[2]) = ((__pyx_v_npos[2]) + (__pyx_v_ndds[2]));

        /* "yt/geometry/particle_oct_container.pyx":1928
 *                     rpos[2] = npos[2] + ndds[2]
 *                     # Only recurse into selected cells
 *                     if not self.selector.select_bbox(npos, rpos): continue             # <<<<<<<<<<<<<<
 *                     if nlevel < self.order1:
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)
*/
        __pyx_t_4 = (!(((struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject *)__pyx_v_self->selector->__pyx_vtab)->select_bbox(__pyx_v_self->selector, __pyx_v_npos, __pyx_v_rpos) != 0));
        if (__pyx_t_4) {
          goto __pyx_L9_continue;
        }

        /* "yt/geometry/particle_oct_container.pyx":1929
 *                     # Only recurse into selected cells
 *                     if not self.selector.select_bbox(npos, rpos): continue
 *                     if nlevel < self.order1:             # <<<<<<<<<<<<<<
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                     elif nlevel == self.order1:
*/
        __pyx_t_4 = (__pyx_v_nlevel < __pyx_v_self->order1);
        if (__pyx_t_4) {

          /* "yt/geometry/particle_oct_container.pyx":1930
 *                     if not self.selector.select_bbox(npos, rpos): continue
 *                     if nlevel < self.order1:
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)             # <<<<<<<<<<<<<<
 *                     elif nlevel == self.order1:
 *                         mi1 = bounded_morton_dds(npos[0], npos[1], npos[2], self.DLE, ndds)
*/
          ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->recursive_morton_files(__pyx_v_self, __pyx_v_nlevel, __pyx_v_npos, __pyx_v_ndds, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1930, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":1929
 *                     # Only recurse into selected cells
 *                     if not self.selector.select_bbox(npos, rpos): continue
 *                     if nlevel < self.order1:             # <<<<<<<<<<<<<<
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                     elif nlevel == self.order1:
*/
          goto __pyx_L12;
        }

        /* "yt/geometry/particle_oct_container.pyx":1931
 *                     if nlevel < self.order1:
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                     elif nlevel == self.order1:             # <<<<<<<<<<<<<<
 *                         mi1 = bounded_morton_dds(npos[0], npos[1], npos[2], self.DLE, ndds)
 *                         if self.is_refined_files(mi1):
*/
        __pyx_t_4 = (__pyx_v_nlevel == __pyx_v_self->order1);
        if (__pyx_t_4) {

          /* "yt/geometry/particle_oct_container.pyx":1932
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                     elif nlevel == self.order1:
 *                         mi1 = bounded_morton_dds(npos[0], npos[1], npos[2], self.DLE, ndds)             # <<<<<<<<<<<<<<
 *                         if self.is_refined_files(mi1):
 *                             self.recursive_morton_files(nlevel, npos, ndds, mi1)
*/
          __pyx_t_5 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_dds((__pyx_v_npos[0]), (__pyx_v_npos[1]), (__pyx_v_npos[2]), __pyx_v_self->DLE, __pyx_v_ndds); if (unlikely(__pyx_t_5 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1932, __pyx_L1_error)
          __pyx_v_mi1 = __pyx_t_5;

          /* "yt/geometry/particle_oct_container.pyx":1933
 *                     elif nlevel == self.order1:
 *                         mi1 = bounded_morton_dds(npos[0], npos[1], npos[2], self.DLE, ndds)
 *                         if self.is_refined_files(mi1):             # <<<<<<<<<<<<<<
 *                             self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                         self.set_files_coarse(mi1)
*/
          __pyx_t_4 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->is_refined_files(__pyx_v_self, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1933, __pyx_L1_error)
          if (__pyx_t_4) {

            /* "yt/geometry/particle_oct_container.pyx":1934
 *                         mi1 = bounded_morton_dds(npos[0], npos[1], npos[2], self.DLE, ndds)
 *                         if self.is_refined_files(mi1):
 *                             self.recursive_morton_files(nlevel, npos, ndds, mi1)             # <<<<<<<<<<<<<<
 *                         self.set_files_coarse(mi1)
 *                     elif nlevel < (self.order1 + self.order2):
*/
            ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->recursive_morton_files(__pyx_v_self, __pyx_v_nlevel, __pyx_v_npos, __pyx_v_ndds, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1934, __pyx_L1_error)

            /* "yt/geometry/particle_oct_container.pyx":1933
 *                     elif nlevel == self.order1:
 *                         mi1 = bounded_morton_dds(npos[0], npos[1], npos[2], self.DLE, ndds)
 *                         if self.is_refined_files(mi1):             # <<<<<<<<<<<<<<
 *                             self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                         self.set_files_coarse(mi1)
*/
          }

          /* "yt/geometry/particle_oct_container.pyx":1935
 *                         if self.is_refined_files(mi1):
 *                             self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                         self.set_files_coarse(mi1)             # <<<<<<<<<<<<<<
 *                     elif nlevel < (self.order1 + self.order2):
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)
*/
          ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->set_files_coarse(__pyx_v_self, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1935, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":1931
 *                     if nlevel < self.order1:
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                     elif nlevel == self.order1:             # <<<<<<<<<<<<<<
 *                         mi1 = bounded_morton_dds(npos[0], npos[1], npos[2], self.DLE, ndds)
 *                         if self.is_refined_files(mi1):
*/
          goto __pyx_L12;
        }

        /* "yt/geometry/particle_oct_container.pyx":1936
 *                             self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                         self.set_files_coarse(mi1)
 *                     elif nlevel < (self.order1 + self.order2):             # <<<<<<<<<<<<<<
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                     elif nlevel == (self.order1 + self.order2):
*/
        __pyx_t_4 = (__pyx_v_nlevel < (__pyx_v_self->order1 + __pyx_v_self->order2));
        if (__pyx_t_4) {

          /* "yt/geometry/particle_oct_container.pyx":1937
 *                         self.set_files_coarse(mi1)
 *                     elif nlevel < (self.order1 + self.order2):
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)             # <<<<<<<<<<<<<<
 *                     elif nlevel == (self.order1 + self.order2):
 *                         decode_morton_64bit(mi1,ind1)
*/
          ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->recursive_morton_files(__pyx_v_self, __pyx_v_nlevel, __pyx_v_npos, __pyx_v_ndds, __pyx_v_mi1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1937, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":1936
 *                             self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                         self.set_files_coarse(mi1)
 *                     elif nlevel < (self.order1 + self.order2):             # <<<<<<<<<<<<<<
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                     elif nlevel == (self.order1 + self.order2):
*/
          goto __pyx_L12;
        }

        /* "yt/geometry/particle_oct_container.pyx":1938
 *                     elif nlevel < (self.order1 + self.order2):
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                     elif nlevel == (self.order1 + self.order2):             # <<<<<<<<<<<<<<
 *                         decode_morton_64bit(mi1,ind1)
 *                         for m in range(3):
*/
        __pyx_t_4 = (__pyx_v_nlevel == (__pyx_v_self->order1 + __pyx_v_self->order2));
        if (__pyx_t_4) {

          /* "yt/geometry/particle_oct_container.pyx":1939
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                     elif nlevel == (self.order1 + self.order2):
 *                         decode_morton_64bit(mi1,ind1)             # <<<<<<<<<<<<<<
 *                         for m in range(3):
 *                             DLE[m] = self.DLE[m] + ndds[m]*ind1[m]*self.max_index2
*/
          __pyx_f_2yt_9utilities_3lib_14geometry_utils_decode_morton_64bit(__pyx_v_mi1, __pyx_v_ind1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1939, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":1940
 *                     elif nlevel == (self.order1 + self.order2):
 *                         decode_morton_64bit(mi1,ind1)
 *                         for m in range(3):             # <<<<<<<<<<<<<<
 *                             DLE[m] = self.DLE[m] + ndds[m]*ind1[m]*self.max_index2
 *                         mi2 = bounded_morton_dds(npos[0], npos[1], npos[2], DLE, ndds)
*/
          for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {
            __pyx_v_m = __pyx_t_6;

            /* "yt/geometry/particle_oct_container.pyx":1941
 *                         decode_morton_64bit(mi1,ind1)
 *                         for m in range(3):
 *                             DLE[m] = self.DLE[m] + ndds[m]*ind1[m]*self.max_index2             # <<<<<<<<<<<<<<
 *                         mi2 = bounded_morton_dds(npos[0], npos[1], npos[2], DLE, ndds)
 *                         self.set_files_refined(mi1,mi2)
*/
            (__pyx_v_DLE[__pyx_v_m]) = ((__pyx_v_self->DLE[__pyx_v_m]) + (((__pyx_v_ndds[__pyx_v_m]) * (__pyx_v_ind1[__pyx_v_m])) * __pyx_v_self->max_index2));
          }

          /* "yt/geometry/particle_oct_container.pyx":1942
 *                         for m in range(3):
 *                             DLE[m] = self.DLE[m] + ndds[m]*ind1[m]*self.max_index2
 *                         mi2 = bounded_morton_dds(npos[0], npos[1], npos[2], DLE, ndds)             # <<<<<<<<<<<<<<
 *                         self.set_files_refined(mi1,mi2)
 * 
*/
          __pyx_t_5 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_dds((__pyx_v_npos[0]), (__pyx_v_npos[1]), (__pyx_v_npos[2]), __pyx_v_DLE, __pyx_v_ndds); if (unlikely(__pyx_t_5 == ((__pyx_t_5numpy_uint64_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1942, __pyx_L1_error)
          __pyx_v_mi2 = __pyx_t_5;

          /* "yt/geometry/particle_oct_container.pyx":1943
 *                             DLE[m] = self.DLE[m] + ndds[m]*ind1[m]*self.max_index2
 *                         mi2 = bounded_morton_dds(npos[0], npos[1], npos[2], DLE, ndds)
 *                         self.set_files_refined(mi1,mi2)             # <<<<<<<<<<<<<<
 * 
 * cdef class ParticleBitmapOctreeContainer(SparseOctreeContainer):
*/
          ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self->__pyx_vtab)->set_files_refined(__pyx_v_self, __pyx_v_mi1, __pyx_v_mi2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1943, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":1938
 *                     elif nlevel < (self.order1 + self.order2):
 *                         self.recursive_morton_files(nlevel, npos, ndds, mi1)
 *                     elif nlevel == (self.order1 + self.order2):             # <<<<<<<<<<<<<<
 *                         decode_morton_64bit(mi1,ind1)
 *                         for m in range(3):
*/
        }
        __pyx_L12:;
        __pyx_L9_continue:;
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":1901
 *         return 0
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.recursive_morton_files", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_6__reduce_cython__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_8__setstate_cython__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapSelector.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1956
 *     cdef np.uint64_t[:] _octs_per_root
 *     cdef public int overlap_cells
 *     def __init__(self, domain_dimensions, domain_left_edge, domain_right_edge,             # <<<<<<<<<<<<<<
 *                  int num_root, num_zones = 2):
 *         super(ParticleBitmapOctreeContainer, self).__init__(
*/

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_domain_dimensions = 0;
  PyObject *__pyx_v_domain_left_edge = 0;
  PyObject *__pyx_v_domain_right_edge = 0;
  int __pyx_v_num_root;
  PyObject *__pyx_v_num_zones = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_domain_dimensions,&__pyx_mstate_global->__pyx_n_u_domain_left_edge,&__pyx_mstate_global->__pyx_n_u_domain_right_edge,&__pyx_mstate_global->__pyx_n_u_num_root,&__pyx_mstate_global->__pyx_n_u_num_zones,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1956, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1956, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1956, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1956, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1956, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1956, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__init__", 0) < 0) __PYX_ERR(0, 1956, __pyx_L3_error)
      if (!values[4]) values[4] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_int_2));
      for (Py_ssize_t i = __pyx_nargs; i < 4; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, i); __PYX_ERR(0, 1956, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 1956, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1956, __pyx_L3_error)
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1956, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1956, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1956, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[4]) values[4] = __Pyx_NewRef(((PyObject *)__pyx_mstate_global->__pyx_int_2));
    }
    __pyx_v_domain_dimensions = values[0];
    __pyx_v_domain_left_edge = values[1];
    __pyx_v_domain_right_edge = values[2];
    __pyx_v_num_root = __Pyx_PyLong_As_int(values[3]); if (unlikely((__pyx_v_num_root == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1957, __pyx_L3_error)
    __pyx_v_num_zones = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 5, __pyx_nargs); __PYX_ERR(0, 1956, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer___init__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self), __pyx_v_domain_dimensions, __pyx_v_domain_left_edge, __pyx_v_domain_right_edge, __pyx_v_num_root, __pyx_v_num_zones);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer___init__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyObject *__pyx_v_domain_dimensions, PyObject *__pyx_v_domain_left_edge, PyObject *__pyx_v_domain_right_edge, int __pyx_v_num_root, PyObject *__pyx_v_num_zones) {
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  __pyx_t_5numpy_uint8_t *__pyx_t_10;
  struct __pyx_array_obj *__pyx_t_11 = NULL;
  char *__pyx_t_12;
  __Pyx_memviewslice __pyx_t_13 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_uint64_t *__pyx_t_14;
  __Pyx_memviewslice __pyx_t_15 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "yt/geometry/particle_oct_container.pyx":1958
 *     def __init__(self, domain_dimensions, domain_left_edge, domain_right_edge,
 *                  int num_root, num_zones = 2):
 *         super(ParticleBitmapOctreeContainer, self).__init__(             # <<<<<<<<<<<<<<
 *             domain_dimensions, domain_left_edge, domain_right_edge,
 *             num_zones)
*/
  __pyx_t_4 = NULL;
  __Pyx_INCREF(__pyx_builtin_super);
  __pyx_t_5 = __pyx_builtin_super; 
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer), ((PyObject *)__pyx_v_self)};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_t_2 = __pyx_t_3;
  __Pyx_INCREF(__pyx_t_2);

  /* "yt/geometry/particle_oct_container.pyx":1960
 *         super(ParticleBitmapOctreeContainer, self).__init__(
 *             domain_dimensions, domain_left_edge, domain_right_edge,
 *             num_zones)             # <<<<<<<<<<<<<<
 *         self.loaded = 0
 *         self.fill_style = "o"
*/
  __pyx_t_6 = 0;
  {
    PyObject *__pyx_callargs[5] = {__pyx_t_2, __pyx_v_domain_dimensions, __pyx_v_domain_left_edge, __pyx_v_domain_right_edge, __pyx_v_num_zones};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_init, __pyx_callargs+__pyx_t_6, (5-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1961
 *             domain_dimensions, domain_left_edge, domain_right_edge,
 *             num_zones)
 *         self.loaded = 0             # <<<<<<<<<<<<<<
 *         self.fill_style = "o"
 *         self.partial_coverage = 2
*/
  __pyx_v_self->loaded = 0;

  /* "yt/geometry/particle_oct_container.pyx":1962
 *             num_zones)
 *         self.loaded = 0
 *         self.fill_style = "o"             # <<<<<<<<<<<<<<
 *         self.partial_coverage = 2
 *         self.overlap_cells = 0
*/
  __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_o);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_n_u_o);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base.fill_style);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.__pyx_base.fill_style);
  __pyx_v_self->__pyx_base.__pyx_base.fill_style = __pyx_mstate_global->__pyx_n_u_o;

  /* "yt/geometry/particle_oct_container.pyx":1963
 *         self.loaded = 0
 *         self.fill_style = "o"
 *         self.partial_coverage = 2             # <<<<<<<<<<<<<<
 *         self.overlap_cells = 0
 *         # Now the overrides
*/
  __pyx_v_self->__pyx_base.__pyx_base.partial_coverage = 2;

  /* "yt/geometry/particle_oct_container.pyx":1964
 *         self.fill_style = "o"
 *         self.partial_coverage = 2
 *         self.overlap_cells = 0             # <<<<<<<<<<<<<<
 *         # Now the overrides
 *         self.max_level = -1
*/
  __pyx_v_self->overlap_cells = 0;

  /* "yt/geometry/particle_oct_container.pyx":1966
 *         self.overlap_cells = 0
 *         # Now the overrides
 *         self.max_level = -1             # <<<<<<<<<<<<<<
 *         self.max_root = num_root
 *         self.root_nodes = <OctKey*> malloc(sizeof(OctKey) * num_root)
*/
  __pyx_v_self->__pyx_base.__pyx_base.max_level = -1;

  /* "yt/geometry/particle_oct_container.pyx":1967
 *         # Now the overrides
 *         self.max_level = -1
 *         self.max_root = num_root             # <<<<<<<<<<<<<<
 *         self.root_nodes = <OctKey*> malloc(sizeof(OctKey) * num_root)
 *         self._ptr_index_base_roots = <np.uint8_t*> malloc(sizeof(np.uint8_t) * num_root)
*/
  __pyx_v_self->__pyx_base.max_root = __pyx_v_num_root;

  /* "yt/geometry/particle_oct_container.pyx":1968
 *         self.max_level = -1
 *         self.max_root = num_root
 *         self.root_nodes = <OctKey*> malloc(sizeof(OctKey) * num_root)             # <<<<<<<<<<<<<<
 *         self._ptr_index_base_roots = <np.uint8_t*> malloc(sizeof(np.uint8_t) * num_root)
 *         self._ptr_octs_per_root = <np.uint64_t*> malloc(sizeof(np.uint64_t) * num_root)
*/
  __pyx_v_self->__pyx_base.root_nodes = ((struct __pyx_t_2yt_8geometry_13oct_container_OctKey *)malloc(((sizeof(struct __pyx_t_2yt_8geometry_13oct_container_OctKey)) * __pyx_v_num_root)));

  /* "yt/geometry/particle_oct_container.pyx":1969
 *         self.max_root = num_root
 *         self.root_nodes = <OctKey*> malloc(sizeof(OctKey) * num_root)
 *         self._ptr_index_base_roots = <np.uint8_t*> malloc(sizeof(np.uint8_t) * num_root)             # <<<<<<<<<<<<<<
 *         self._ptr_octs_per_root = <np.uint64_t*> malloc(sizeof(np.uint64_t) * num_root)
 *         for i in range(num_root):
*/
  __pyx_v_self->_ptr_index_base_roots = ((__pyx_t_5numpy_uint8_t *)malloc(((sizeof(__pyx_t_5numpy_uint8_t)) * __pyx_v_num_root)));

  /* "yt/geometry/particle_oct_container.pyx":1970
 *         self.root_nodes = <OctKey*> malloc(sizeof(OctKey) * num_root)
 *         self._ptr_index_base_roots = <np.uint8_t*> malloc(sizeof(np.uint8_t) * num_root)
 *         self._ptr_octs_per_root = <np.uint64_t*> malloc(sizeof(np.uint64_t) * num_root)             # <<<<<<<<<<<<<<
 *         for i in range(num_root):
 *             self.root_nodes[i].key = -1
*/
  __pyx_v_self->_ptr_octs_per_root = ((__pyx_t_5numpy_uint64_t *)malloc(((sizeof(__pyx_t_5numpy_uint64_t)) * __pyx_v_num_root)));

  /* "yt/geometry/particle_oct_container.pyx":1971
 *         self._ptr_index_base_roots = <np.uint8_t*> malloc(sizeof(np.uint8_t) * num_root)
 *         self._ptr_octs_per_root = <np.uint64_t*> malloc(sizeof(np.uint64_t) * num_root)
 *         for i in range(num_root):             # <<<<<<<<<<<<<<
 *             self.root_nodes[i].key = -1
 *             self.root_nodes[i].node = NULL
*/
  __pyx_t_7 = __pyx_v_num_root;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "yt/geometry/particle_oct_container.pyx":1972
 *         self._ptr_octs_per_root = <np.uint64_t*> malloc(sizeof(np.uint64_t) * num_root)
 *         for i in range(num_root):
 *             self.root_nodes[i].key = -1             # <<<<<<<<<<<<<<
 *             self.root_nodes[i].node = NULL
 *             self._ptr_index_base_roots[i] = 1
*/
    (__pyx_v_self->__pyx_base.root_nodes[__pyx_v_i]).key = -1LL;

    /* "yt/geometry/particle_oct_container.pyx":1973
 *         for i in range(num_root):
 *             self.root_nodes[i].key = -1
 *             self.root_nodes[i].node = NULL             # <<<<<<<<<<<<<<
 *             self._ptr_index_base_roots[i] = 1
 *             self._ptr_octs_per_root[i] = 0
*/
    (__pyx_v_self->__pyx_base.root_nodes[__pyx_v_i]).node = NULL;

    /* "yt/geometry/particle_oct_container.pyx":1974
 *             self.root_nodes[i].key = -1
 *             self.root_nodes[i].node = NULL
 *             self._ptr_index_base_roots[i] = 1             # <<<<<<<<<<<<<<
 *             self._ptr_octs_per_root[i] = 0
 *         self._index_base_roots = <np.uint8_t[:num_root]> self._ptr_index_base_roots
*/
    (__pyx_v_self->_ptr_index_base_roots[__pyx_v_i]) = 1;

    /* "yt/geometry/particle_oct_container.pyx":1975
 *             self.root_nodes[i].node = NULL
 *             self._ptr_index_base_roots[i] = 1
 *             self._ptr_octs_per_root[i] = 0             # <<<<<<<<<<<<<<
 *         self._index_base_roots = <np.uint8_t[:num_root]> self._ptr_index_base_roots
 *         self._octs_per_root = <np.uint64_t[:num_root]> self._ptr_octs_per_root
*/
    (__pyx_v_self->_ptr_octs_per_root[__pyx_v_i]) = 0;
  }

  /* "yt/geometry/particle_oct_container.pyx":1976
 *             self._ptr_index_base_roots[i] = 1
 *             self._ptr_octs_per_root[i] = 0
 *         self._index_base_roots = <np.uint8_t[:num_root]> self._ptr_index_base_roots             # <<<<<<<<<<<<<<
 *         self._octs_per_root = <np.uint64_t[:num_root]> self._ptr_octs_per_root
 * 
*/
  __pyx_t_10 = __pyx_v_self->_ptr_index_base_roots;
  if (!__pyx_t_10) {
    PyErr_SetString(PyExc_ValueError,"Cannot create cython.array from NULL pointer");
    __PYX_ERR(0, 1976, __pyx_L1_error)
  }
  __pyx_t_3 = __pyx_format_from_typeinfo(&__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = Py_BuildValue("("  __PYX_BUILD_PY_SSIZE_T  ")", ((Py_ssize_t)__pyx_v_num_root)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_12 = PyBytes_AsString(__pyx_t_3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1976, __pyx_L1_error)
  #else
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_3);
  #endif
  __pyx_t_11 = __pyx_array_new(__pyx_t_1, sizeof(__pyx_t_5numpy_uint8_t), __pyx_t_12, "c", (char *) __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1976, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_13 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(((PyObject *)__pyx_t_11), PyBUF_WRITABLE); if (unlikely(!__pyx_t_13.memview)) __PYX_ERR(0, 1976, __pyx_L1_error)
  __Pyx_DECREF((PyObject *)__pyx_t_11); __pyx_t_11 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->_index_base_roots, 0);
  __pyx_v_self->_index_base_roots = __pyx_t_13;
  __pyx_t_13.memview = NULL;
  __pyx_t_13.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1977
 *             self._ptr_octs_per_root[i] = 0
 *         self._index_base_roots = <np.uint8_t[:num_root]> self._ptr_index_base_roots
 *         self._octs_per_root = <np.uint64_t[:num_root]> self._ptr_octs_per_root             # <<<<<<<<<<<<<<
 * 
 *     def allocate_domains(self, counts = None):
*/
  __pyx_t_14 = __pyx_v_self->_ptr_octs_per_root;
  if (!__pyx_t_14) {
    PyErr_SetString(PyExc_ValueError,"Cannot create cython.array from NULL pointer");
    __PYX_ERR(0, 1977, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_format_from_typeinfo(&__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = Py_BuildValue("("  __PYX_BUILD_PY_SSIZE_T  ")", ((Py_ssize_t)__pyx_v_num_root)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_12 = PyBytes_AsString(__pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1977, __pyx_L1_error)
  #else
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_1);
  #endif
  __pyx_t_11 = __pyx_array_new(__pyx_t_3, sizeof(__pyx_t_5numpy_uint64_t), __pyx_t_12, "c", (char *) __pyx_t_14); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1977, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_15 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint64_t(((PyObject *)__pyx_t_11), PyBUF_WRITABLE); if (unlikely(!__pyx_t_15.memview)) __PYX_ERR(0, 1977, __pyx_L1_error)
  __Pyx_DECREF((PyObject *)__pyx_t_11); __pyx_t_11 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->_octs_per_root, 0);
  __pyx_v_self->_octs_per_root = __pyx_t_15;
  __pyx_t_15.memview = NULL;
  __pyx_t_15.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1956
 *     cdef np.uint64_t[:] _octs_per_root
 *     cdef public int overlap_cells
 *     def __init__(self, domain_dimensions, domain_left_edge, domain_right_edge,             # <<<<<<<<<<<<<<
 *                  int num_root, num_zones = 2):
 *         super(ParticleBitmapOctreeContainer, self).__init__(
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF((PyObject *)__pyx_t_11);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_13, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_15, 1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1979
 *         self._octs_per_root = <np.uint64_t[:num_root]> self._ptr_octs_per_root
 * 
 *     def allocate_domains(self, counts = None):             # <<<<<<<<<<<<<<
 *         if counts is None:
 *             counts = [self.max_root]
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_3allocate_domains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_3allocate_domains = {"allocate_domains", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_3allocate_domains, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_3allocate_domains(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_counts = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("allocate_domains (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_counts,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1979, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1979, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "allocate_domains", 0) < 0) __PYX_ERR(0, 1979, __pyx_L3_error)
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_None));
    } else {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1979, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_None));
    }
    __pyx_v_counts = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("allocate_domains", 0, 0, 1, __pyx_nargs); __PYX_ERR(0, 1979, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.allocate_domains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_2allocate_domains(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self), __pyx_v_counts);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_2allocate_domains(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyObject *__pyx_v_counts) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("allocate_domains", 0);
  __Pyx_INCREF(__pyx_v_counts);

  /* "yt/geometry/particle_oct_container.pyx":1980
 * 
 *     def allocate_domains(self, counts = None):
 *         if counts is None:             # <<<<<<<<<<<<<<
 *             counts = [self.max_root]
 *         OctreeContainer.allocate_domains(self, counts)
*/
  __pyx_t_1 = (__pyx_v_counts == Py_None);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_oct_container.pyx":1981
 *     def allocate_domains(self, counts = None):
 *         if counts is None:
 *             counts = [self.max_root]             # <<<<<<<<<<<<<<
 *         OctreeContainer.allocate_domains(self, counts)
 * 
*/
    __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_self->__pyx_base.max_root); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2) != (0)) __PYX_ERR(0, 1981, __pyx_L1_error);
    __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_counts, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "yt/geometry/particle_oct_container.pyx":1980
 * 
 *     def allocate_domains(self, counts = None):
 *         if counts is None:             # <<<<<<<<<<<<<<
 *             counts = [self.max_root]
 *         OctreeContainer.allocate_domains(self, counts)
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":1982
 *         if counts is None:
 *             counts = [self.max_root]
 *         OctreeContainer.allocate_domains(self, counts)             # <<<<<<<<<<<<<<
 * 
 *     def finalize(self):
*/
  __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_4 = 0;
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, ((PyObject *)__pyx_v_self), __pyx_v_counts};
    __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_allocate_domains, __pyx_callargs+__pyx_t_4, (3-__pyx_t_4) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1982, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1979
 *         self._octs_per_root = <np.uint64_t[:num_root]> self._ptr_octs_per_root
 * 
 *     def allocate_domains(self, counts = None):             # <<<<<<<<<<<<<<
 *         if counts is None:
 *             counts = [self.max_root]
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.allocate_domains", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_counts);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1984
 *         OctreeContainer.allocate_domains(self, counts)
 * 
 *     def finalize(self):             # <<<<<<<<<<<<<<
 *         # Assign domain ind
 *         cdef SelectorObject selector = AlwaysSelector(None)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5finalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5finalize = {"finalize", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5finalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5finalize(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("finalize (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("finalize", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("finalize", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_4finalize(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_4finalize(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self) {
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector = 0;
  struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd *__pyx_v_visitor = 0;
  __pyx_t_5numpy_int64_t __pyx_v_nprev_octs;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __pyx_t_5numpy_uint8_t *__pyx_t_7;
  struct __pyx_array_obj *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  __Pyx_memviewslice __pyx_t_10 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("finalize", 0);

  /* "yt/geometry/particle_oct_container.pyx":1986
 *     def finalize(self):
 *         # Assign domain ind
 *         cdef SelectorObject selector = AlwaysSelector(None)             # <<<<<<<<<<<<<<
 *         selector.overlap_cells = self.overlap_cells
 *         cdef oct_visitors.AssignDomainInd visitor
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, Py_None};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1986, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_selector = ((struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1987
 *         # Assign domain ind
 *         cdef SelectorObject selector = AlwaysSelector(None)
 *         selector.overlap_cells = self.overlap_cells             # <<<<<<<<<<<<<<
 *         cdef oct_visitors.AssignDomainInd visitor
 *         visitor = oct_visitors.AssignDomainInd(self)
*/
  __pyx_t_5 = __pyx_v_self->overlap_cells;
  __pyx_v_selector->overlap_cells = __pyx_t_5;

  /* "yt/geometry/particle_oct_container.pyx":1989
 *         selector.overlap_cells = self.overlap_cells
 *         cdef oct_visitors.AssignDomainInd visitor
 *         visitor = oct_visitors.AssignDomainInd(self)             # <<<<<<<<<<<<<<
 *         self.visit_all_octs(selector, visitor)
 *         assert ((visitor.global_index+1)*visitor.nz == visitor.index)
*/
  __pyx_t_3 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_12oct_visitors_AssignDomainInd);
  __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_12oct_visitors_AssignDomainInd); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1989, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_visitor = ((struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1990
 *         cdef oct_visitors.AssignDomainInd visitor
 *         visitor = oct_visitors.AssignDomainInd(self)
 *         self.visit_all_octs(selector, visitor)             # <<<<<<<<<<<<<<
 *         assert ((visitor.global_index+1)*visitor.nz == visitor.index)
 *         # Copy indexes
*/
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.visit_all_octs(((struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *)__pyx_v_self), __pyx_v_selector, ((struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *)__pyx_v_visitor), NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1990, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":1991
 *         visitor = oct_visitors.AssignDomainInd(self)
 *         self.visit_all_octs(selector, visitor)
 *         assert ((visitor.global_index+1)*visitor.nz == visitor.index)             # <<<<<<<<<<<<<<
 *         # Copy indexes
 *         self._ptr_index_base_octs = <np.uint8_t*> malloc(sizeof(np.uint8_t)*self.nocts)
*/
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_6 = (((__pyx_v_visitor->__pyx_base.global_index + 1) * __pyx_v_visitor->__pyx_base.nz) == __pyx_v_visitor->__pyx_base.index);
    if (unlikely(!__pyx_t_6)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 1991, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1991, __pyx_L1_error)
  #endif

  /* "yt/geometry/particle_oct_container.pyx":1993
 *         assert ((visitor.global_index+1)*visitor.nz == visitor.index)
 *         # Copy indexes
 *         self._ptr_index_base_octs = <np.uint8_t*> malloc(sizeof(np.uint8_t)*self.nocts)             # <<<<<<<<<<<<<<
 *         self._index_base_octs = <np.uint8_t[:self.nocts]> self._ptr_index_base_octs
 *         cdef np.int64_t nprev_octs = 0
*/
  __pyx_v_self->_ptr_index_base_octs = ((__pyx_t_5numpy_uint8_t *)malloc(((sizeof(__pyx_t_5numpy_uint8_t)) * __pyx_v_self->__pyx_base.__pyx_base.nocts)));

  /* "yt/geometry/particle_oct_container.pyx":1994
 *         # Copy indexes
 *         self._ptr_index_base_octs = <np.uint8_t*> malloc(sizeof(np.uint8_t)*self.nocts)
 *         self._index_base_octs = <np.uint8_t[:self.nocts]> self._ptr_index_base_octs             # <<<<<<<<<<<<<<
 *         cdef np.int64_t nprev_octs = 0
 *         cdef int i
*/
  __pyx_t_7 = __pyx_v_self->_ptr_index_base_octs;
  if (!__pyx_t_7) {
    PyErr_SetString(PyExc_ValueError,"Cannot create cython.array from NULL pointer");
    __PYX_ERR(0, 1994, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_format_from_typeinfo(&__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = Py_BuildValue("("  __PYX_BUILD_PY_SSIZE_T  ")", ((Py_ssize_t)__pyx_v_self->__pyx_base.__pyx_base.nocts)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_9 = PyBytes_AsString(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1994, __pyx_L1_error)
  #else
  __pyx_t_9 = PyBytes_AS_STRING(__pyx_t_2);
  #endif
  __pyx_t_8 = __pyx_array_new(__pyx_t_1, sizeof(__pyx_t_5numpy_uint8_t), __pyx_t_9, "c", (char *) __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1994, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(((PyObject *)__pyx_t_8), PyBUF_WRITABLE); if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(0, 1994, __pyx_L1_error)
  __Pyx_DECREF((PyObject *)__pyx_t_8); __pyx_t_8 = 0;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->_index_base_octs, 0);
  __pyx_v_self->_index_base_octs = __pyx_t_10;
  __pyx_t_10.memview = NULL;
  __pyx_t_10.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":1995
 *         self._ptr_index_base_octs = <np.uint8_t*> malloc(sizeof(np.uint8_t)*self.nocts)
 *         self._index_base_octs = <np.uint8_t[:self.nocts]> self._ptr_index_base_octs
 *         cdef np.int64_t nprev_octs = 0             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(self.num_root):
*/
  __pyx_v_nprev_octs = 0;

  /* "yt/geometry/particle_oct_container.pyx":1997
 *         cdef np.int64_t nprev_octs = 0
 *         cdef int i
 *         for i in range(self.num_root):             # <<<<<<<<<<<<<<
 *             self._index_base_octs[nprev_octs:(nprev_octs+self._octs_per_root[i])] = self._index_base_roots[i]
 *             nprev_octs += self._octs_per_root[i]
*/
  __pyx_t_5 = __pyx_v_self->__pyx_base.num_root;
  __pyx_t_11 = __pyx_t_5;
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
    __pyx_v_i = __pyx_t_12;

    /* "yt/geometry/particle_oct_container.pyx":1998
 *         cdef int i
 *         for i in range(self.num_root):
 *             self._index_base_octs[nprev_octs:(nprev_octs+self._octs_per_root[i])] = self._index_base_roots[i]             # <<<<<<<<<<<<<<
 *             nprev_octs += self._octs_per_root[i]
 * 
*/
    if (unlikely(!__pyx_v_self->_index_base_roots.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1998, __pyx_L1_error)}
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_14 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_self->_index_base_roots.shape[0];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_14 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_self->_index_base_roots.shape[0])) __pyx_t_14 = 0;
    if (unlikely(__pyx_t_14 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_14);
      __PYX_ERR(0, 1998, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->_index_base_octs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1998, __pyx_L1_error)}
    if (unlikely(!__pyx_v_self->_octs_per_root.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1998, __pyx_L1_error)}
    __pyx_t_15 = __pyx_v_i;
    __pyx_t_14 = -1;
    if (__pyx_t_15 < 0) {
      __pyx_t_15 += __pyx_v_self->_octs_per_root.shape[0];
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_14 = 0;
    } else if (unlikely(__pyx_t_15 >= __pyx_v_self->_octs_per_root.shape[0])) __pyx_t_14 = 0;
    if (unlikely(__pyx_t_14 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_14);
      __PYX_ERR(0, 1998, __pyx_L1_error)
    }
    __pyx_t_10.data = __pyx_v_self->_index_base_octs.data;
    __pyx_t_10.memview = __pyx_v_self->_index_base_octs.memview;
    __PYX_INC_MEMVIEW(&__pyx_t_10, 1);
    __pyx_t_14 = -1;
    if (unlikely(__pyx_memoryview_slice_memviewslice(
    &__pyx_t_10,
    __pyx_v_self->_index_base_octs.shape[0], __pyx_v_self->_index_base_octs.strides[0], __pyx_v_self->_index_base_octs.suboffsets[0],
    0,
    0,
    &__pyx_t_14,
    __pyx_v_nprev_octs,
    (__pyx_v_nprev_octs + (*((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_self->_octs_per_root.data + __pyx_t_15 * __pyx_v_self->_octs_per_root.strides[0]) )))),
    0,
    1,
    1,
    0,
    1) < 0))
{
    __PYX_ERR(0, 1998, __pyx_L1_error)
}

{
        __pyx_t_5numpy_uint8_t __pyx_temp_scalar = (*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->_index_base_roots.data + __pyx_t_13 * __pyx_v_self->_index_base_roots.strides[0]) )));
        {
            Py_ssize_t __pyx_temp_extent_0 = __pyx_t_10.shape[0];
            Py_ssize_t __pyx_temp_stride_0 = __pyx_t_10.strides[0];
            char *__pyx_temp_pointer_0;
            Py_ssize_t __pyx_temp_idx_0;
            __pyx_temp_pointer_0 = __pyx_t_10.data;
            for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
              *((__pyx_t_5numpy_uint8_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
              __pyx_temp_pointer_0 += __pyx_temp_stride_0;
            }
        }
    }
    __PYX_XCLEAR_MEMVIEW(&__pyx_t_10, 1);
    __pyx_t_10.memview = NULL; __pyx_t_10.data = NULL;

    /* "yt/geometry/particle_oct_container.pyx":1999
 *         for i in range(self.num_root):
 *             self._index_base_octs[nprev_octs:(nprev_octs+self._octs_per_root[i])] = self._index_base_roots[i]
 *             nprev_octs += self._octs_per_root[i]             # <<<<<<<<<<<<<<
 * 
 *     cdef visit_assign(self, Oct *o, np.int64_t *lpos, int level, int *max_level,
*/
    if (unlikely(!__pyx_v_self->_octs_per_root.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1999, __pyx_L1_error)}
    __pyx_t_13 = __pyx_v_i;
    __pyx_t_14 = -1;
    if (__pyx_t_13 < 0) {
      __pyx_t_13 += __pyx_v_self->_octs_per_root.shape[0];
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_14 = 0;
    } else if (unlikely(__pyx_t_13 >= __pyx_v_self->_octs_per_root.shape[0])) __pyx_t_14 = 0;
    if (unlikely(__pyx_t_14 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_14);
      __PYX_ERR(0, 1999, __pyx_L1_error)
    }
    __pyx_v_nprev_octs = (__pyx_v_nprev_octs + (*((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_self->_octs_per_root.data + __pyx_t_13 * __pyx_v_self->_octs_per_root.strides[0]) ))));
  }

  /* "yt/geometry/particle_oct_container.pyx":1984
 *         OctreeContainer.allocate_domains(self, counts)
 * 
 *     def finalize(self):             # <<<<<<<<<<<<<<
 *         # Assign domain ind
 *         cdef SelectorObject selector = AlwaysSelector(None)
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF((PyObject *)__pyx_t_8);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_10, 1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.finalize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_selector);
  __Pyx_XDECREF((PyObject *)__pyx_v_visitor);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":2001
 *             nprev_octs += self._octs_per_root[i]
 * 
 *     cdef visit_assign(self, Oct *o, np.int64_t *lpos, int level, int *max_level,             # <<<<<<<<<<<<<<
 *                       np.int64_t index_root):
 *         cdef int i, j, k
*/

static PyObject *__pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_visit_assign(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_int64_t *__pyx_v_lpos, int __pyx_v_level, int *__pyx_v_max_level, __pyx_t_5numpy_int64_t __pyx_v_index_root) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_5numpy_int64_t __pyx_t_2;
  int __pyx_t_3;
  __pyx_t_5numpy_int64_t __pyx_t_4;
  long __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("visit_assign", 0);

  /* "yt/geometry/particle_oct_container.pyx":2004
 *                       np.int64_t index_root):
 *         cdef int i, j, k
 *         if o.children == NULL:             # <<<<<<<<<<<<<<
 *             self.oct_list[lpos[0]] = o
 *             self._index_base_octs[lpos[0]] = self._index_base_roots[index_root]
*/
  __pyx_t_1 = (__pyx_v_o->children == NULL);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_oct_container.pyx":2005
 *         cdef int i, j, k
 *         if o.children == NULL:
 *             self.oct_list[lpos[0]] = o             # <<<<<<<<<<<<<<
 *             self._index_base_octs[lpos[0]] = self._index_base_roots[index_root]
 *             lpos[0] += 1
*/
    (__pyx_v_self->oct_list[(__pyx_v_lpos[0])]) = __pyx_v_o;

    /* "yt/geometry/particle_oct_container.pyx":2006
 *         if o.children == NULL:
 *             self.oct_list[lpos[0]] = o
 *             self._index_base_octs[lpos[0]] = self._index_base_roots[index_root]             # <<<<<<<<<<<<<<
 *             lpos[0] += 1
 *         max_level[0] = imax(max_level[0], level)
*/
    if (unlikely(!__pyx_v_self->_index_base_roots.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2006, __pyx_L1_error)}
    __pyx_t_2 = __pyx_v_index_root;
    __pyx_t_3 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_self->_index_base_roots.shape[0];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_self->_index_base_roots.shape[0])) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(0, 2006, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->_index_base_octs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2006, __pyx_L1_error)}
    __pyx_t_4 = (__pyx_v_lpos[0]);
    __pyx_t_3 = -1;
    if (__pyx_t_4 < 0) {
      __pyx_t_4 += __pyx_v_self->_index_base_octs.shape[0];
      if (unlikely(__pyx_t_4 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_4 >= __pyx_v_self->_index_base_octs.shape[0])) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(0, 2006, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->_index_base_octs.data + __pyx_t_4 * __pyx_v_self->_index_base_octs.strides[0]) )) = (*((__pyx_t_5numpy_uint8_t *) ( /* dim=0 */ (__pyx_v_self->_index_base_roots.data + __pyx_t_2 * __pyx_v_self->_index_base_roots.strides[0]) )));

    /* "yt/geometry/particle_oct_container.pyx":2007
 *             self.oct_list[lpos[0]] = o
 *             self._index_base_octs[lpos[0]] = self._index_base_roots[index_root]
 *             lpos[0] += 1             # <<<<<<<<<<<<<<
 *         max_level[0] = imax(max_level[0], level)
 *         for i in range(2):
*/
    __pyx_t_5 = 0;
    (__pyx_v_lpos[__pyx_t_5]) = ((__pyx_v_lpos[__pyx_t_5]) + 1);

    /* "yt/geometry/particle_oct_container.pyx":2004
 *                       np.int64_t index_root):
 *         cdef int i, j, k
 *         if o.children == NULL:             # <<<<<<<<<<<<<<
 *             self.oct_list[lpos[0]] = o
 *             self._index_base_octs[lpos[0]] = self._index_base_roots[index_root]
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":2008
 *             self._index_base_octs[lpos[0]] = self._index_base_roots[index_root]
 *             lpos[0] += 1
 *         max_level[0] = imax(max_level[0], level)             # <<<<<<<<<<<<<<
 *         for i in range(2):
 *             for j in range(2):
*/
  (__pyx_v_max_level[0]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_imax((__pyx_v_max_level[0]), __pyx_v_level);

  /* "yt/geometry/particle_oct_container.pyx":2009
 *             lpos[0] += 1
 *         max_level[0] = imax(max_level[0], level)
 *         for i in range(2):             # <<<<<<<<<<<<<<
 *             for j in range(2):
 *                 for k in range(2):
*/
  for (__pyx_t_3 = 0; __pyx_t_3 < 2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":2010
 *         max_level[0] = imax(max_level[0], level)
 *         for i in range(2):
 *             for j in range(2):             # <<<<<<<<<<<<<<
 *                 for k in range(2):
 *                     if o.children != NULL \
*/
    for (__pyx_t_6 = 0; __pyx_t_6 < 2; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "yt/geometry/particle_oct_container.pyx":2011
 *         for i in range(2):
 *             for j in range(2):
 *                 for k in range(2):             # <<<<<<<<<<<<<<
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:
*/
      for (__pyx_t_7 = 0; __pyx_t_7 < 2; __pyx_t_7+=1) {
        __pyx_v_k = __pyx_t_7;

        /* "yt/geometry/particle_oct_container.pyx":2012
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,
*/
        __pyx_t_8 = (__pyx_v_o->children != NULL);
        if (__pyx_t_8) {
        } else {
          __pyx_t_1 = __pyx_t_8;
          goto __pyx_L11_bool_binop_done;
        }

        /* "yt/geometry/particle_oct_container.pyx":2013
 *                 for k in range(2):
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:             # <<<<<<<<<<<<<<
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,
 *                                           level + 1, max_level, index_root)
*/
        __pyx_t_9 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_9 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2013, __pyx_L1_error)
        __pyx_t_8 = ((__pyx_v_o->children[__pyx_t_9]) != NULL);
        __pyx_t_1 = __pyx_t_8;
        __pyx_L11_bool_binop_done:;

        /* "yt/geometry/particle_oct_container.pyx":2012
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,
*/
        if (__pyx_t_1) {

          /* "yt/geometry/particle_oct_container.pyx":2014
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,             # <<<<<<<<<<<<<<
 *                                           level + 1, max_level, index_root)
 *         return
*/
          __pyx_t_9 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_9 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2014, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":2015
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,
 *                                           level + 1, max_level, index_root)             # <<<<<<<<<<<<<<
 *         return
 * 
*/
          __pyx_t_10 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->visit_assign(__pyx_v_self, (__pyx_v_o->children[__pyx_t_9]), __pyx_v_lpos, (__pyx_v_level + 1), __pyx_v_max_level, __pyx_v_index_root); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2014, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

          /* "yt/geometry/particle_oct_container.pyx":2012
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,
*/
        }
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":2016
 *                         self.visit_assign(o.children[cind(i,j,k)], lpos,
 *                                           level + 1, max_level, index_root)
 *         return             # <<<<<<<<<<<<<<
 * 
 *     cdef Oct* allocate_oct(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":2001
 *             nprev_octs += self._octs_per_root[i]
 * 
 *     cdef visit_assign(self, Oct *o, np.int64_t *lpos, int level, int *max_level,             # <<<<<<<<<<<<<<
 *                       np.int64_t index_root):
 *         cdef int i, j, k
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.visit_assign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":2018
 *         return
 * 
 *     cdef Oct* allocate_oct(self):             # <<<<<<<<<<<<<<
 *         #Allocate the memory, set to NULL or -1
 *         #We reserve space for n_ref particles, but keep
*/

static struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_allocate_oct(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self) {
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_my_oct;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_r;

  /* "yt/geometry/particle_oct_container.pyx":2022
 *         #We reserve space for n_ref particles, but keep
 *         #track of how many are used with np initially 0
 *         self.nocts += 1             # <<<<<<<<<<<<<<
 *         cdef Oct *my_oct = <Oct*> malloc(sizeof(Oct))
 *         my_oct.domain = -1
*/
  __pyx_v_self->__pyx_base.__pyx_base.nocts = (__pyx_v_self->__pyx_base.__pyx_base.nocts + 1);

  /* "yt/geometry/particle_oct_container.pyx":2023
 *         #track of how many are used with np initially 0
 *         self.nocts += 1
 *         cdef Oct *my_oct = <Oct*> malloc(sizeof(Oct))             # <<<<<<<<<<<<<<
 *         my_oct.domain = -1
 *         my_oct.file_ind = 0
*/
  __pyx_v_my_oct = ((struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *)malloc((sizeof(struct __pyx_t_2yt_8geometry_12oct_visitors_Oct))));

  /* "yt/geometry/particle_oct_container.pyx":2024
 *         self.nocts += 1
 *         cdef Oct *my_oct = <Oct*> malloc(sizeof(Oct))
 *         my_oct.domain = -1             # <<<<<<<<<<<<<<
 *         my_oct.file_ind = 0
 *         my_oct.domain_ind = self.nocts - 1
*/
  __pyx_v_my_oct->domain = -1LL;

  /* "yt/geometry/particle_oct_container.pyx":2025
 *         cdef Oct *my_oct = <Oct*> malloc(sizeof(Oct))
 *         my_oct.domain = -1
 *         my_oct.file_ind = 0             # <<<<<<<<<<<<<<
 *         my_oct.domain_ind = self.nocts - 1
 *         my_oct.children = NULL
*/
  __pyx_v_my_oct->file_ind = 0;

  /* "yt/geometry/particle_oct_container.pyx":2026
 *         my_oct.domain = -1
 *         my_oct.file_ind = 0
 *         my_oct.domain_ind = self.nocts - 1             # <<<<<<<<<<<<<<
 *         my_oct.children = NULL
 *         return my_oct
*/
  __pyx_v_my_oct->domain_ind = (__pyx_v_self->__pyx_base.__pyx_base.nocts - 1);

  /* "yt/geometry/particle_oct_container.pyx":2027
 *         my_oct.file_ind = 0
 *         my_oct.domain_ind = self.nocts - 1
 *         my_oct.children = NULL             # <<<<<<<<<<<<<<
 *         return my_oct
 * 
*/
  __pyx_v_my_oct->children = NULL;

  /* "yt/geometry/particle_oct_container.pyx":2028
 *         my_oct.domain_ind = self.nocts - 1
 *         my_oct.children = NULL
 *         return my_oct             # <<<<<<<<<<<<<<
 * 
 *     def get_index_base_octs(self, np.int64_t[:] domain_ind):
*/
  __pyx_r = __pyx_v_my_oct;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":2018
 *         return
 * 
 *     cdef Oct* allocate_oct(self):             # <<<<<<<<<<<<<<
 *         #Allocate the memory, set to NULL or -1
 *         #We reserve space for n_ref particles, but keep
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":2030
 *         return my_oct
 * 
 *     def get_index_base_octs(self, np.int64_t[:] domain_ind):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t ndst = np.max(domain_ind) + 1
 *         ind = np.zeros(ndst, 'int64') - 1
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_7get_index_base_octs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_7get_index_base_octs = {"get_index_base_octs", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_7get_index_base_octs, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_7get_index_base_octs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __Pyx_memviewslice __pyx_v_domain_ind = { 0, 0, { 0 }, { 0 }, { 0 } };
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_index_base_octs (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_domain_ind,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 2030, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 2030, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "get_index_base_octs", 0) < 0) __PYX_ERR(0, 2030, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("get_index_base_octs", 1, 1, 1, i); __PYX_ERR(0, 2030, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 2030, __pyx_L3_error)
    }
    __pyx_v_domain_ind = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_domain_ind.memview)) __PYX_ERR(0, 2030, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_index_base_octs", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 2030, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_domain_ind, 1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.get_index_base_octs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_6get_index_base_octs(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self), __pyx_v_domain_ind);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_domain_ind, 1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_6get_index_base_octs(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, __Pyx_memviewslice __pyx_v_domain_ind) {
  __pyx_t_5numpy_int64_t __pyx_v_ndst;
  PyObject *__pyx_v_ind = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  __pyx_t_5numpy_int64_t __pyx_t_6;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_index_base_octs", 0);

  /* "yt/geometry/particle_oct_container.pyx":2031
 * 
 *     def get_index_base_octs(self, np.int64_t[:] domain_ind):
 *         cdef np.int64_t ndst = np.max(domain_ind) + 1             # <<<<<<<<<<<<<<
 *         ind = np.zeros(ndst, 'int64') - 1
 *         self._get_index_base_octs(ind, domain_ind)
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_max); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_domain_ind, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_int64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_int64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyLong_AddObjC(__pyx_t_1, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyLong_As_npy_int64(__pyx_t_4); if (unlikely((__pyx_t_6 == ((npy_int64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2031, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_ndst = __pyx_t_6;

  /* "yt/geometry/particle_oct_container.pyx":2032
 *     def get_index_base_octs(self, np.int64_t[:] domain_ind):
 *         cdef np.int64_t ndst = np.max(domain_ind) + 1
 *         ind = np.zeros(ndst, 'int64') - 1             # <<<<<<<<<<<<<<
 *         self._get_index_base_octs(ind, domain_ind)
 *         return ind[ind >= 0]
*/
  __pyx_t_1 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_npy_int64(__pyx_v_ndst); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    assert(__pyx_t_1);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_2, __pyx__function);
    __pyx_t_5 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_t_3, __pyx_mstate_global->__pyx_n_u_int64};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_t_2 = __Pyx_PyLong_SubtractObjC(__pyx_t_4, __pyx_mstate_global->__pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_ind = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "yt/geometry/particle_oct_container.pyx":2033
 *         cdef np.int64_t ndst = np.max(domain_ind) + 1
 *         ind = np.zeros(ndst, 'int64') - 1
 *         self._get_index_base_octs(ind, domain_ind)             # <<<<<<<<<<<<<<
 *         return ind[ind >= 0]
 * 
*/
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(__pyx_v_ind, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 2033, __pyx_L1_error)
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->_get_index_base_octs(__pyx_v_self, __pyx_t_7, __pyx_v_domain_ind); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2033, __pyx_L1_error)
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_7, 1);
  __pyx_t_7.memview = NULL; __pyx_t_7.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":2034
 *         ind = np.zeros(ndst, 'int64') - 1
 *         self._get_index_base_octs(ind, domain_ind)
 *         return ind[ind >= 0]             # <<<<<<<<<<<<<<
 * 
 *     cdef void _get_index_base_octs(self, np.int64_t[:] ind, np.int64_t[:] domain_ind):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_ind, __pyx_mstate_global->__pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2034, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_ind, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":2030
 *         return my_oct
 * 
 *     def get_index_base_octs(self, np.int64_t[:] domain_ind):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t ndst = np.max(domain_ind) + 1
 *         ind = np.zeros(ndst, 'int64') - 1
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.get_index_base_octs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ind);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":2036
 *         return ind[ind >= 0]
 * 
 *     cdef void _get_index_base_octs(self, np.int64_t[:] ind, np.int64_t[:] domain_ind):             # <<<<<<<<<<<<<<
 *         cdef SelectorObject selector = AlwaysSelector(None)
 *         selector.overlap_cells = self.overlap_cells
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer__get_index_base_octs(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, __Pyx_memviewslice __pyx_v_ind, __Pyx_memviewslice __pyx_v_domain_ind) {
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *__pyx_v_selector = 0;
  struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts *__pyx_v_visitor = 0;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  int __pyx_t_5;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_index_base_octs", 0);

  /* "yt/geometry/particle_oct_container.pyx":2037
 * 
 *     cdef void _get_index_base_octs(self, np.int64_t[:] ind, np.int64_t[:] domain_ind):
 *         cdef SelectorObject selector = AlwaysSelector(None)             # <<<<<<<<<<<<<<
 *         selector.overlap_cells = self.overlap_cells
 *         cdef oct_visitors.IndexMaskMapOcts visitor
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, Py_None};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2037, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_selector = ((struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":2038
 *     cdef void _get_index_base_octs(self, np.int64_t[:] ind, np.int64_t[:] domain_ind):
 *         cdef SelectorObject selector = AlwaysSelector(None)
 *         selector.overlap_cells = self.overlap_cells             # <<<<<<<<<<<<<<
 *         cdef oct_visitors.IndexMaskMapOcts visitor
 *         visitor = oct_visitors.IndexMaskMapOcts(self)
*/
  __pyx_t_5 = __pyx_v_self->overlap_cells;
  __pyx_v_selector->overlap_cells = __pyx_t_5;

  /* "yt/geometry/particle_oct_container.pyx":2040
 *         selector.overlap_cells = self.overlap_cells
 *         cdef oct_visitors.IndexMaskMapOcts visitor
 *         visitor = oct_visitors.IndexMaskMapOcts(self)             # <<<<<<<<<<<<<<
 *         visitor.oct_mask = self._index_base_octs
 *         visitor.oct_index = ind
*/
  __pyx_t_3 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_12oct_visitors_IndexMaskMapOcts);
  __pyx_t_2 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_12oct_visitors_IndexMaskMapOcts); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, ((PyObject *)__pyx_v_self)};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2040, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_visitor = ((struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/geometry/particle_oct_container.pyx":2041
 *         cdef oct_visitors.IndexMaskMapOcts visitor
 *         visitor = oct_visitors.IndexMaskMapOcts(self)
 *         visitor.oct_mask = self._index_base_octs             # <<<<<<<<<<<<<<
 *         visitor.oct_index = ind
 *         visitor.map_domain_ind = domain_ind
*/
  if (unlikely(!__pyx_v_self->_index_base_octs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2041, __pyx_L1_error)}
  __pyx_t_6 = __pyx_v_self->_index_base_octs;
  __PYX_INC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_visitor->oct_mask, 0);
  __pyx_v_visitor->oct_mask = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "yt/geometry/particle_oct_container.pyx":2042
 *         visitor = oct_visitors.IndexMaskMapOcts(self)
 *         visitor.oct_mask = self._index_base_octs
 *         visitor.oct_index = ind             # <<<<<<<<<<<<<<
 *         visitor.map_domain_ind = domain_ind
 *         self.visit_all_octs(selector, visitor)
*/
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_visitor->oct_index, 0);
  __PYX_INC_MEMVIEW(&__pyx_v_ind, 1);
  __pyx_v_visitor->oct_index = __pyx_v_ind;

  /* "yt/geometry/particle_oct_container.pyx":2043
 *         visitor.oct_mask = self._index_base_octs
 *         visitor.oct_index = ind
 *         visitor.map_domain_ind = domain_ind             # <<<<<<<<<<<<<<
 *         self.visit_all_octs(selector, visitor)
 * 
*/
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_visitor->map_domain_ind, 0);
  __PYX_INC_MEMVIEW(&__pyx_v_domain_ind, 1);
  __pyx_v_visitor->map_domain_ind = __pyx_v_domain_ind;

  /* "yt/geometry/particle_oct_container.pyx":2044
 *         visitor.oct_index = ind
 *         visitor.map_domain_ind = domain_ind
 *         self.visit_all_octs(selector, visitor)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
*/
  ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.visit_all_octs(((struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *)__pyx_v_self), __pyx_v_selector, ((struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *)__pyx_v_visitor), NULL); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2044, __pyx_L1_error)

  /* "yt/geometry/particle_oct_container.pyx":2036
 *         return ind[ind >= 0]
 * 
 *     cdef void _get_index_base_octs(self, np.int64_t[:] ind, np.int64_t[:] domain_ind):             # <<<<<<<<<<<<<<
 *         cdef SelectorObject selector = AlwaysSelector(None)
 *         selector.overlap_cells = self.overlap_cells
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer._get_index_base_octs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_selector);
  __Pyx_XDECREF((PyObject *)__pyx_v_visitor);
  __Pyx_RefNannyFinishContext();
}

/* "yt/geometry/particle_oct_container.pyx":2046
 *         self.visit_all_octs(selector, visitor)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         #Call the freemem ops on every ocy
 *         #of the root mesh recursively
*/

/* Python wrapper */
static void __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_9__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_9__dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_8__dealloc__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_8__dealloc__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self) {
  int __pyx_v_i;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":2050
 *         #of the root mesh recursively
 *         cdef int i
 *         if self.root_nodes== NULL: return             # <<<<<<<<<<<<<<
 *         if self.loaded == 0:
 *             for i in range(self.max_root):
*/
  __pyx_t_1 = (__pyx_v_self->__pyx_base.root_nodes == NULL);
  if (__pyx_t_1) {
    goto __pyx_L0;
  }

  /* "yt/geometry/particle_oct_container.pyx":2051
 *         cdef int i
 *         if self.root_nodes== NULL: return
 *         if self.loaded == 0:             # <<<<<<<<<<<<<<
 *             for i in range(self.max_root):
 *                 if self.root_nodes[i].node == NULL: continue
*/
  __pyx_t_1 = (__pyx_v_self->loaded == 0);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_oct_container.pyx":2052
 *         if self.root_nodes== NULL: return
 *         if self.loaded == 0:
 *             for i in range(self.max_root):             # <<<<<<<<<<<<<<
 *                 if self.root_nodes[i].node == NULL: continue
 *                 self.visit_free(&self.root_nodes.node[i], 0)
*/
    __pyx_t_2 = __pyx_v_self->__pyx_base.max_root;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "yt/geometry/particle_oct_container.pyx":2053
 *         if self.loaded == 0:
 *             for i in range(self.max_root):
 *                 if self.root_nodes[i].node == NULL: continue             # <<<<<<<<<<<<<<
 *                 self.visit_free(&self.root_nodes.node[i], 0)
 *             self.root_nodes = NULL
*/
      __pyx_t_1 = ((__pyx_v_self->__pyx_base.root_nodes[__pyx_v_i]).node == NULL);
      if (__pyx_t_1) {
        goto __pyx_L5_continue;
      }

      /* "yt/geometry/particle_oct_container.pyx":2054
 *             for i in range(self.max_root):
 *                 if self.root_nodes[i].node == NULL: continue
 *                 self.visit_free(&self.root_nodes.node[i], 0)             # <<<<<<<<<<<<<<
 *             self.root_nodes = NULL
 *         free(self.oct_list)
*/
      ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->visit_free(__pyx_v_self, (&(__pyx_v_self->__pyx_base.root_nodes->node[__pyx_v_i])), 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2054, __pyx_L1_error)
      __pyx_L5_continue:;
    }

    /* "yt/geometry/particle_oct_container.pyx":2055
 *                 if self.root_nodes[i].node == NULL: continue
 *                 self.visit_free(&self.root_nodes.node[i], 0)
 *             self.root_nodes = NULL             # <<<<<<<<<<<<<<
 *         free(self.oct_list)
 *         free(self._ptr_index_base_roots)
*/
    __pyx_v_self->__pyx_base.root_nodes = NULL;

    /* "yt/geometry/particle_oct_container.pyx":2051
 *         cdef int i
 *         if self.root_nodes== NULL: return
 *         if self.loaded == 0:             # <<<<<<<<<<<<<<
 *             for i in range(self.max_root):
 *                 if self.root_nodes[i].node == NULL: continue
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":2056
 *                 self.visit_free(&self.root_nodes.node[i], 0)
 *             self.root_nodes = NULL
 *         free(self.oct_list)             # <<<<<<<<<<<<<<
 *         free(self._ptr_index_base_roots)
 *         free(self._ptr_index_base_octs)
*/
  free(__pyx_v_self->oct_list);

  /* "yt/geometry/particle_oct_container.pyx":2057
 *             self.root_nodes = NULL
 *         free(self.oct_list)
 *         free(self._ptr_index_base_roots)             # <<<<<<<<<<<<<<
 *         free(self._ptr_index_base_octs)
 *         free(self._ptr_octs_per_root)
*/
  free(__pyx_v_self->_ptr_index_base_roots);

  /* "yt/geometry/particle_oct_container.pyx":2058
 *         free(self.oct_list)
 *         free(self._ptr_index_base_roots)
 *         free(self._ptr_index_base_octs)             # <<<<<<<<<<<<<<
 *         free(self._ptr_octs_per_root)
 *         self.oct_list = NULL
*/
  free(__pyx_v_self->_ptr_index_base_octs);

  /* "yt/geometry/particle_oct_container.pyx":2059
 *         free(self._ptr_index_base_roots)
 *         free(self._ptr_index_base_octs)
 *         free(self._ptr_octs_per_root)             # <<<<<<<<<<<<<<
 *         self.oct_list = NULL
 * 
*/
  free(__pyx_v_self->_ptr_octs_per_root);

  /* "yt/geometry/particle_oct_container.pyx":2060
 *         free(self._ptr_index_base_octs)
 *         free(self._ptr_octs_per_root)
 *         self.oct_list = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef void visit_free(self, Oct *o, int free_this):
*/
  __pyx_v_self->oct_list = NULL;

  /* "yt/geometry/particle_oct_container.pyx":2046
 *         self.visit_all_octs(selector, visitor)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         #Call the freemem ops on every ocy
 *         #of the root mesh recursively
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":2062
 *         self.oct_list = NULL
 * 
 *     cdef void visit_free(self, Oct *o, int free_this):             # <<<<<<<<<<<<<<
 *         #Free the memory for this oct recursively
 *         cdef int i, j, k
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_visit_free(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, int __pyx_v_free_this) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":2065
 *         #Free the memory for this oct recursively
 *         cdef int i, j, k
 *         for i in range(2):             # <<<<<<<<<<<<<<
 *             for j in range(2):
 *                 for k in range(2):
*/
  for (__pyx_t_1 = 0; __pyx_t_1 < 2; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/geometry/particle_oct_container.pyx":2066
 *         cdef int i, j, k
 *         for i in range(2):
 *             for j in range(2):             # <<<<<<<<<<<<<<
 *                 for k in range(2):
 *                     if o.children != NULL \
*/
    for (__pyx_t_2 = 0; __pyx_t_2 < 2; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "yt/geometry/particle_oct_container.pyx":2067
 *         for i in range(2):
 *             for j in range(2):
 *                 for k in range(2):             # <<<<<<<<<<<<<<
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:
*/
      for (__pyx_t_3 = 0; __pyx_t_3 < 2; __pyx_t_3+=1) {
        __pyx_v_k = __pyx_t_3;

        /* "yt/geometry/particle_oct_container.pyx":2068
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_free(o.children[cind(i,j,k)], 1)
*/
        __pyx_t_5 = (__pyx_v_o->children != NULL);
        if (__pyx_t_5) {
        } else {
          __pyx_t_4 = __pyx_t_5;
          goto __pyx_L10_bool_binop_done;
        }

        /* "yt/geometry/particle_oct_container.pyx":2069
 *                 for k in range(2):
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:             # <<<<<<<<<<<<<<
 *                         self.visit_free(o.children[cind(i,j,k)], 1)
 *         if o.children != NULL:
*/
        __pyx_t_6 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2069, __pyx_L1_error)
        __pyx_t_5 = ((__pyx_v_o->children[__pyx_t_6]) != NULL);
        __pyx_t_4 = __pyx_t_5;
        __pyx_L10_bool_binop_done:;

        /* "yt/geometry/particle_oct_container.pyx":2068
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_free(o.children[cind(i,j,k)], 1)
*/
        if (__pyx_t_4) {

          /* "yt/geometry/particle_oct_container.pyx":2070
 *                     if o.children != NULL \
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_free(o.children[cind(i,j,k)], 1)             # <<<<<<<<<<<<<<
 *         if o.children != NULL:
 *             free(o.children)
*/
          __pyx_t_6 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2070, __pyx_L1_error)
          ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->visit_free(__pyx_v_self, (__pyx_v_o->children[__pyx_t_6]), 1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2070, __pyx_L1_error)

          /* "yt/geometry/particle_oct_container.pyx":2068
 *             for j in range(2):
 *                 for k in range(2):
 *                     if o.children != NULL \             # <<<<<<<<<<<<<<
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_free(o.children[cind(i,j,k)], 1)
*/
        }
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":2071
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_free(o.children[cind(i,j,k)], 1)
 *         if o.children != NULL:             # <<<<<<<<<<<<<<
 *             free(o.children)
 *         if free_this == 1:
*/
  __pyx_t_4 = (__pyx_v_o->children != NULL);
  if (__pyx_t_4) {

    /* "yt/geometry/particle_oct_container.pyx":2072
 *                         self.visit_free(o.children[cind(i,j,k)], 1)
 *         if o.children != NULL:
 *             free(o.children)             # <<<<<<<<<<<<<<
 *         if free_this == 1:
 *             free(o)
*/
    free(__pyx_v_o->children);

    /* "yt/geometry/particle_oct_container.pyx":2071
 *                        and o.children[cind(i,j,k)] != NULL:
 *                         self.visit_free(o.children[cind(i,j,k)], 1)
 *         if o.children != NULL:             # <<<<<<<<<<<<<<
 *             free(o.children)
 *         if free_this == 1:
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":2073
 *         if o.children != NULL:
 *             free(o.children)
 *         if free_this == 1:             # <<<<<<<<<<<<<<
 *             free(o)
 * 
*/
  __pyx_t_4 = (__pyx_v_free_this == 1);
  if (__pyx_t_4) {

    /* "yt/geometry/particle_oct_container.pyx":2074
 *             free(o.children)
 *         if free_this == 1:
 *             free(o)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
    free(__pyx_v_o);

    /* "yt/geometry/particle_oct_container.pyx":2073
 *         if o.children != NULL:
 *             free(o.children)
 *         if free_this == 1:             # <<<<<<<<<<<<<<
 *             free(o)
 * 
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":2062
 *         self.oct_list = NULL
 * 
 *     cdef void visit_free(self, Oct *o, int free_this):             # <<<<<<<<<<<<<<
 *         #Free the memory for this oct recursively
 *         cdef int i, j, k
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.visit_free", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "yt/geometry/particle_oct_container.pyx":2076
 *             free(o)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_recursive_add(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, PyArrayObject *__pyx_v_indices, int __pyx_v_level, int *__pyx_v_max_level, int __pyx_v_domain_id, int *__pyx_v_count) {
  __pyx_t_5numpy_int64_t __pyx_v_no;
  __pyx_t_5numpy_int64_t __pyx_v_beg;
  __pyx_t_5numpy_int64_t __pyx_v_end;
  __pyx_t_5numpy_int64_t __pyx_v_nind;
  __pyx_t_5numpy_int64_t __pyx_v_index;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_ind[3];
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_noct;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_indices;
  __Pyx_Buffer __pyx_pybuffer_indices;
  __Pyx_RefNannyDeclarations
  npy_intp *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  __pyx_t_5numpy_int64_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  size_t __pyx_t_12;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_t_13;
  long __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("recursive_add", 0);
  __pyx_pybuffer_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_indices.refcount = 0;
  __pyx_pybuffernd_indices.data = NULL;
  __pyx_pybuffernd_indices.rcbuffer = &__pyx_pybuffer_indices;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 2076, __pyx_L1_error)
  }
  __pyx_pybuffernd_indices.diminfo[0].strides = __pyx_pybuffernd_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indices.diminfo[0].shape = __pyx_pybuffernd_indices.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":2081
 *     cdef void recursive_add(self, Oct *o, np.ndarray[np.uint64_t, ndim=1] indices,
 *                             int level, int *max_level, int domain_id, int *count):
 *         cdef np.int64_t no = indices.shape[0], beg, end, nind             # <<<<<<<<<<<<<<
 *         cdef np.int64_t index
 *         cdef int i, j, k
*/
  __pyx_t_1 = __pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_indices)); if (unlikely(__pyx_t_1 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 2081, __pyx_L1_error)
  __pyx_v_no = (__pyx_t_1[0]);

  /* "yt/geometry/particle_oct_container.pyx":2086
 *         cdef int ind[3]
 *         cdef Oct *noct
 *         beg = end = 0             # <<<<<<<<<<<<<<
 *         if level > max_level[0]: max_level[0] = level
 *         # Initialize children
*/
  __pyx_v_beg = 0;
  __pyx_v_end = 0;

  /* "yt/geometry/particle_oct_container.pyx":2087
 *         cdef Oct *noct
 *         beg = end = 0
 *         if level > max_level[0]: max_level[0] = level             # <<<<<<<<<<<<<<
 *         # Initialize children
 *         if o.children == NULL:
*/
  __pyx_t_2 = (__pyx_v_level > (__pyx_v_max_level[0]));
  if (__pyx_t_2) {
    (__pyx_v_max_level[0]) = __pyx_v_level;
  }

  /* "yt/geometry/particle_oct_container.pyx":2089
 *         if level > max_level[0]: max_level[0] = level
 *         # Initialize children
 *         if o.children == NULL:             # <<<<<<<<<<<<<<
 *             o.children = <Oct **> malloc(sizeof(Oct *)*8)
 *             for i in range(2):
*/
  __pyx_t_2 = (__pyx_v_o->children == NULL);
  if (__pyx_t_2) {

    /* "yt/geometry/particle_oct_container.pyx":2090
 *         # Initialize children
 *         if o.children == NULL:
 *             o.children = <Oct **> malloc(sizeof(Oct *)*8)             # <<<<<<<<<<<<<<
 *             for i in range(2):
 *                 for j in range(2):
*/
    __pyx_v_o->children = ((struct __pyx_t_2yt_8geometry_12oct_visitors_Oct **)malloc(((sizeof(struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *)) * 8)));

    /* "yt/geometry/particle_oct_container.pyx":2091
 *         if o.children == NULL:
 *             o.children = <Oct **> malloc(sizeof(Oct *)*8)
 *             for i in range(2):             # <<<<<<<<<<<<<<
 *                 for j in range(2):
 *                     for k in range(2):
*/
    for (__pyx_t_3 = 0; __pyx_t_3 < 2; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "yt/geometry/particle_oct_container.pyx":2092
 *             o.children = <Oct **> malloc(sizeof(Oct *)*8)
 *             for i in range(2):
 *                 for j in range(2):             # <<<<<<<<<<<<<<
 *                     for k in range(2):
 *                         o.children[cind(i,j,k)] = NULL
*/
      for (__pyx_t_4 = 0; __pyx_t_4 < 2; __pyx_t_4+=1) {
        __pyx_v_j = __pyx_t_4;

        /* "yt/geometry/particle_oct_container.pyx":2093
 *             for i in range(2):
 *                 for j in range(2):
 *                     for k in range(2):             # <<<<<<<<<<<<<<
 *                         o.children[cind(i,j,k)] = NULL
 *                         # noct = self.allocate_oct()
*/
        for (__pyx_t_5 = 0; __pyx_t_5 < 2; __pyx_t_5+=1) {
          __pyx_v_k = __pyx_t_5;

          /* "yt/geometry/particle_oct_container.pyx":2094
 *                 for j in range(2):
 *                     for k in range(2):
 *                         o.children[cind(i,j,k)] = NULL             # <<<<<<<<<<<<<<
 *                         # noct = self.allocate_oct()
 *                         # noct.domain = o.domain
*/
          __pyx_t_6 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_6 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2094, __pyx_L1_error)
          (__pyx_v_o->children[__pyx_t_6]) = NULL;
        }
      }
    }

    /* "yt/geometry/particle_oct_container.pyx":2089
 *         if level > max_level[0]: max_level[0] = level
 *         # Initialize children
 *         if o.children == NULL:             # <<<<<<<<<<<<<<
 *             o.children = <Oct **> malloc(sizeof(Oct *)*8)
 *             for i in range(2):
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":2100
 *                         # o.children[cind(i,j,k)] = noct
 *         # Loop through sets of particles with matching prefix at this level
 *         while end < no:             # <<<<<<<<<<<<<<
 *             beg = end
 *             index = (indices[beg] >> ((ORDER_MAX - level)*3))
*/
  while (1) {
    __pyx_t_2 = (__pyx_v_end < __pyx_v_no);
    if (!__pyx_t_2) break;

    /* "yt/geometry/particle_oct_container.pyx":2101
 *         # Loop through sets of particles with matching prefix at this level
 *         while end < no:
 *             beg = end             # <<<<<<<<<<<<<<
 *             index = (indices[beg] >> ((ORDER_MAX - level)*3))
 *             while (end < no) and (index == (indices[end] >> ((ORDER_MAX - level)*3))):
*/
    __pyx_v_beg = __pyx_v_end;

    /* "yt/geometry/particle_oct_container.pyx":2102
 *         while end < no:
 *             beg = end
 *             index = (indices[beg] >> ((ORDER_MAX - level)*3))             # <<<<<<<<<<<<<<
 *             while (end < no) and (index == (indices[end] >> ((ORDER_MAX - level)*3))):
 *                 end += 1
*/
    __pyx_t_7 = __pyx_v_beg;
    __pyx_v_index = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_indices.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_indices.diminfo[0].strides)) >> ((__pyx_v_2yt_8geometry_13oct_container_ORDER_MAX - __pyx_v_level) * 3));

    /* "yt/geometry/particle_oct_container.pyx":2103
 *             beg = end
 *             index = (indices[beg] >> ((ORDER_MAX - level)*3))
 *             while (end < no) and (index == (indices[end] >> ((ORDER_MAX - level)*3))):             # <<<<<<<<<<<<<<
 *                 end += 1
 *             nind = (end - beg)
*/
    while (1) {
      __pyx_t_8 = (__pyx_v_end < __pyx_v_no);
      if (__pyx_t_8) {
      } else {
        __pyx_t_2 = __pyx_t_8;
        goto __pyx_L15_bool_binop_done;
      }
      __pyx_t_7 = __pyx_v_end;
      __pyx_t_8 = (__pyx_v_index == ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_indices.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_indices.diminfo[0].strides)) >> ((__pyx_v_2yt_8geometry_13oct_container_ORDER_MAX - __pyx_v_level) * 3)));
      __pyx_t_2 = __pyx_t_8;
      __pyx_L15_bool_binop_done:;
      if (!__pyx_t_2) break;

      /* "yt/geometry/particle_oct_container.pyx":2104
 *             index = (indices[beg] >> ((ORDER_MAX - level)*3))
 *             while (end < no) and (index == (indices[end] >> ((ORDER_MAX - level)*3))):
 *                 end += 1             # <<<<<<<<<<<<<<
 *             nind = (end - beg)
 *             # Add oct
*/
      __pyx_v_end = (__pyx_v_end + 1);
    }

    /* "yt/geometry/particle_oct_container.pyx":2105
 *             while (end < no) and (index == (indices[end] >> ((ORDER_MAX - level)*3))):
 *                 end += 1
 *             nind = (end - beg)             # <<<<<<<<<<<<<<
 *             # Add oct
 *             for i in range(3):
*/
    __pyx_v_nind = (__pyx_v_end - __pyx_v_beg);

    /* "yt/geometry/particle_oct_container.pyx":2107
 *             nind = (end - beg)
 *             # Add oct
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 ind[i] = ((index >> (2 - i)) & 1)
 *             # noct = o.children[cind(ind[0],ind[1],ind[2])]
*/
    for (__pyx_t_3 = 0; __pyx_t_3 < 3; __pyx_t_3+=1) {
      __pyx_v_i = __pyx_t_3;

      /* "yt/geometry/particle_oct_container.pyx":2108
 *             # Add oct
 *             for i in range(3):
 *                 ind[i] = ((index >> (2 - i)) & 1)             # <<<<<<<<<<<<<<
 *             # noct = o.children[cind(ind[0],ind[1],ind[2])]
 *             if o.children[cind(ind[0],ind[1],ind[2])] != NULL:
*/
      (__pyx_v_ind[__pyx_v_i]) = ((__pyx_v_index >> (2 - __pyx_v_i)) & 1);
    }

    /* "yt/geometry/particle_oct_container.pyx":2110
 *                 ind[i] = ((index >> (2 - i)) & 1)
 *             # noct = o.children[cind(ind[0],ind[1],ind[2])]
 *             if o.children[cind(ind[0],ind[1],ind[2])] != NULL:             # <<<<<<<<<<<<<<
 *                 raise Exception('Child was already initialized...')
 *             noct = self.allocate_oct()
*/
    __pyx_t_3 = __pyx_f_2yt_8geometry_12oct_visitors_cind((__pyx_v_ind[0]), (__pyx_v_ind[1]), (__pyx_v_ind[2])); if (unlikely(__pyx_t_3 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2110, __pyx_L1_error)
    __pyx_t_2 = ((__pyx_v_o->children[__pyx_t_3]) != NULL);
    if (unlikely(__pyx_t_2)) {

      /* "yt/geometry/particle_oct_container.pyx":2111
 *             # noct = o.children[cind(ind[0],ind[1],ind[2])]
 *             if o.children[cind(ind[0],ind[1],ind[2])] != NULL:
 *                 raise Exception('Child was already initialized...')             # <<<<<<<<<<<<<<
 *             noct = self.allocate_oct()
 *             noct.domain = o.domain
*/
      __pyx_t_10 = NULL;
      __Pyx_INCREF((PyObject *)(((PyTypeObject*)PyExc_Exception)));
      __pyx_t_11 = ((PyObject *)(((PyTypeObject*)PyExc_Exception))); 
      __pyx_t_12 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_mstate_global->__pyx_kp_u_Child_was_already_initialized};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_12, (2-__pyx_t_12) | (__pyx_t_12*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2111, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(0, 2111, __pyx_L1_error)

      /* "yt/geometry/particle_oct_container.pyx":2110
 *                 ind[i] = ((index >> (2 - i)) & 1)
 *             # noct = o.children[cind(ind[0],ind[1],ind[2])]
 *             if o.children[cind(ind[0],ind[1],ind[2])] != NULL:             # <<<<<<<<<<<<<<
 *                 raise Exception('Child was already initialized...')
 *             noct = self.allocate_oct()
*/
    }

    /* "yt/geometry/particle_oct_container.pyx":2112
 *             if o.children[cind(ind[0],ind[1],ind[2])] != NULL:
 *                 raise Exception('Child was already initialized...')
 *             noct = self.allocate_oct()             # <<<<<<<<<<<<<<
 *             noct.domain = o.domain
 *             o.children[cind(ind[0],ind[1],ind[2])] = noct
*/
    __pyx_t_13 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->allocate_oct(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2112, __pyx_L1_error)
    __pyx_v_noct = __pyx_t_13;

    /* "yt/geometry/particle_oct_container.pyx":2113
 *                 raise Exception('Child was already initialized...')
 *             noct = self.allocate_oct()
 *             noct.domain = o.domain             # <<<<<<<<<<<<<<
 *             o.children[cind(ind[0],ind[1],ind[2])] = noct
 *             # Don't add it to the list if it will be refined
*/
    __pyx_t_7 = __pyx_v_o->domain;
    __pyx_v_noct->domain = __pyx_t_7;

    /* "yt/geometry/particle_oct_container.pyx":2114
 *             noct = self.allocate_oct()
 *             noct.domain = o.domain
 *             o.children[cind(ind[0],ind[1],ind[2])] = noct             # <<<<<<<<<<<<<<
 *             # Don't add it to the list if it will be refined
 *             if nind > self.n_ref and level < ORDER_MAX:
*/
    __pyx_t_3 = __pyx_f_2yt_8geometry_12oct_visitors_cind((__pyx_v_ind[0]), (__pyx_v_ind[1]), (__pyx_v_ind[2])); if (unlikely(__pyx_t_3 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2114, __pyx_L1_error)
    (__pyx_v_o->children[__pyx_t_3]) = __pyx_v_noct;

    /* "yt/geometry/particle_oct_container.pyx":2116
 *             o.children[cind(ind[0],ind[1],ind[2])] = noct
 *             # Don't add it to the list if it will be refined
 *             if nind > self.n_ref and level < ORDER_MAX:             # <<<<<<<<<<<<<<
 *                 self.nocts -= 1
 *                 noct.domain_ind = -1 # overwritten by finalize
*/
    __pyx_t_8 = (__pyx_v_nind > __pyx_v_self->n_ref);
    if (__pyx_t_8) {
    } else {
      __pyx_t_2 = __pyx_t_8;
      goto __pyx_L21_bool_binop_done;
    }
    __pyx_t_8 = (__pyx_v_level < __pyx_v_2yt_8geometry_13oct_container_ORDER_MAX);
    __pyx_t_2 = __pyx_t_8;
    __pyx_L21_bool_binop_done:;
    if (__pyx_t_2) {

      /* "yt/geometry/particle_oct_container.pyx":2117
 *             # Don't add it to the list if it will be refined
 *             if nind > self.n_ref and level < ORDER_MAX:
 *                 self.nocts -= 1             # <<<<<<<<<<<<<<
 *                 noct.domain_ind = -1 # overwritten by finalize
 *             else:
*/
      __pyx_v_self->__pyx_base.__pyx_base.nocts = (__pyx_v_self->__pyx_base.__pyx_base.nocts - 1);

      /* "yt/geometry/particle_oct_container.pyx":2118
 *             if nind > self.n_ref and level < ORDER_MAX:
 *                 self.nocts -= 1
 *                 noct.domain_ind = -1 # overwritten by finalize             # <<<<<<<<<<<<<<
 *             else:
 *                 count[0] += 1
*/
      __pyx_v_noct->domain_ind = -1LL;

      /* "yt/geometry/particle_oct_container.pyx":2116
 *             o.children[cind(ind[0],ind[1],ind[2])] = noct
 *             # Don't add it to the list if it will be refined
 *             if nind > self.n_ref and level < ORDER_MAX:             # <<<<<<<<<<<<<<
 *                 self.nocts -= 1
 *                 noct.domain_ind = -1 # overwritten by finalize
*/
      goto __pyx_L20;
    }

    /* "yt/geometry/particle_oct_container.pyx":2120
 *                 noct.domain_ind = -1 # overwritten by finalize
 *             else:
 *                 count[0] += 1             # <<<<<<<<<<<<<<
 *             noct.file_ind = o.file_ind
 *             # noct.file_ind = nind
*/
    /*else*/ {
      __pyx_t_14 = 0;
      (__pyx_v_count[__pyx_t_14]) = ((__pyx_v_count[__pyx_t_14]) + 1);
    }
    __pyx_L20:;

    /* "yt/geometry/particle_oct_container.pyx":2121
 *             else:
 *                 count[0] += 1
 *             noct.file_ind = o.file_ind             # <<<<<<<<<<<<<<
 *             # noct.file_ind = nind
 *             # o.file_ind = self.n_ref + 1
*/
    __pyx_t_7 = __pyx_v_o->file_ind;
    __pyx_v_noct->file_ind = __pyx_t_7;

    /* "yt/geometry/particle_oct_container.pyx":2125
 *             # o.file_ind = self.n_ref + 1
 *             # Refine oct or add its children
 *             if nind > self.n_ref and level < ORDER_MAX:             # <<<<<<<<<<<<<<
 *                 self.recursive_add(noct, indices[beg:end], level+1,
 *                                    max_level, domain_id, count)
*/
    __pyx_t_8 = (__pyx_v_nind > __pyx_v_self->n_ref);
    if (__pyx_t_8) {
    } else {
      __pyx_t_2 = __pyx_t_8;
      goto __pyx_L24_bool_binop_done;
    }
    __pyx_t_8 = (__pyx_v_level < __pyx_v_2yt_8geometry_13oct_container_ORDER_MAX);
    __pyx_t_2 = __pyx_t_8;
    __pyx_L24_bool_binop_done:;
    if (__pyx_t_2) {

      /* "yt/geometry/particle_oct_container.pyx":2126
 *             # Refine oct or add its children
 *             if nind > self.n_ref and level < ORDER_MAX:
 *                 self.recursive_add(noct, indices[beg:end], level+1,             # <<<<<<<<<<<<<<
 *                                    max_level, domain_id, count)
 * 
*/
      __pyx_t_9 = __Pyx_PyLong_From_npy_int64(__pyx_v_beg); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_11 = __Pyx_PyLong_From_npy_int64(__pyx_v_end); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_10 = PySlice_New(__pyx_t_9, __pyx_t_11, Py_None); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 2126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_indices), __pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2126, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2126, __pyx_L1_error)

      /* "yt/geometry/particle_oct_container.pyx":2127
 *             if nind > self.n_ref and level < ORDER_MAX:
 *                 self.recursive_add(noct, indices[beg:end], level+1,
 *                                    max_level, domain_id, count)             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
      ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->recursive_add(__pyx_v_self, __pyx_v_noct, ((PyArrayObject *)__pyx_t_11), (__pyx_v_level + 1), __pyx_v_max_level, __pyx_v_domain_id, __pyx_v_count); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2126, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "yt/geometry/particle_oct_container.pyx":2125
 *             # o.file_ind = self.n_ref + 1
 *             # Refine oct or add its children
 *             if nind > self.n_ref and level < ORDER_MAX:             # <<<<<<<<<<<<<<
 *                 self.recursive_add(noct, indices[beg:end], level+1,
 *                                    max_level, domain_id, count)
*/
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":2076
 *             free(o)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.recursive_add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
}

/* "yt/geometry/particle_oct_container.pyx":2129
 *                                    max_level, domain_id, count)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_11add(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_11add = {"add", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_11add, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_11add(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyArrayObject *__pyx_v_indices = 0;
  CYTHON_UNUSED __pyx_t_5numpy_uint64_t __pyx_v_order1;
  int __pyx_v_domain_id;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_indices,&__pyx_mstate_global->__pyx_n_u_order1,&__pyx_mstate_global->__pyx_n_u_domain_id,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 2129, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 2129, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 2129, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 2129, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "add", 0) < 0) __PYX_ERR(0, 2129, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("add", 0, 2, 3, i); __PYX_ERR(0, 2129, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 2129, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 2129, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 2129, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_indices = ((PyArrayObject *)values[0]);
    __pyx_v_order1 = __Pyx_PyLong_As_npy_uint64(values[1]); if (unlikely((__pyx_v_order1 == ((npy_uint64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 2133, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_domain_id = __Pyx_PyLong_As_int(values[2]); if (unlikely((__pyx_v_domain_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2133, __pyx_L3_error)
    } else {
      __pyx_v_domain_id = ((int)-1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 2129, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_indices), __pyx_mstate_global->__pyx_ptype_5numpy_ndarray, 1, "indices", 0))) __PYX_ERR(0, 2132, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_10add(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self), __pyx_v_indices, __pyx_v_order1, __pyx_v_domain_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_10add(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyArrayObject *__pyx_v_indices, CYTHON_UNUSED __pyx_t_5numpy_uint64_t __pyx_v_order1, int __pyx_v_domain_id) {
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_root;
  __pyx_t_5numpy_int64_t __pyx_v_no;
  __pyx_t_5numpy_int64_t __pyx_v_beg;
  __pyx_t_5numpy_int64_t __pyx_v_end;
  __pyx_t_5numpy_int64_t __pyx_v_index;
  int __pyx_v_i;
  int __pyx_v_ind[3];
  __pyx_t_5numpy_uint64_t __pyx_v_ind64[3];
  int __pyx_v_max_level;
  __pyx_t_5numpy_int64_t __pyx_v_index_root;
  int __pyx_v_root_count;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_indices;
  __Pyx_Buffer __pyx_pybuffer_indices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  npy_intp *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  __pyx_t_5numpy_int64_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  size_t __pyx_t_14;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);
  __pyx_pybuffer_indices.pybuffer.buf = NULL;
  __pyx_pybuffer_indices.refcount = 0;
  __pyx_pybuffernd_indices.data = NULL;
  __pyx_pybuffernd_indices.rcbuffer = &__pyx_pybuffer_indices;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 2129, __pyx_L1_error)
  }
  __pyx_pybuffernd_indices.diminfo[0].strides = __pyx_pybuffernd_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_indices.diminfo[0].shape = __pyx_pybuffernd_indices.rcbuffer->pybuffer.shape[0];

  /* "yt/geometry/particle_oct_container.pyx":2137
 *         #Then if that oct has children, add it to them recursively
 *         #If the child needs to be refined because of max particles, do so
 *         cdef Oct *root = NULL             # <<<<<<<<<<<<<<
 *         cdef np.int64_t no = indices.shape[0], beg, end, index
 *         cdef int i
*/
  __pyx_v_root = NULL;

  /* "yt/geometry/particle_oct_container.pyx":2138
 *         #If the child needs to be refined because of max particles, do so
 *         cdef Oct *root = NULL
 *         cdef np.int64_t no = indices.shape[0], beg, end, index             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef int ind[3]
*/
  __pyx_t_1 = __pyx_f_5numpy_7ndarray_5shape_shape(((PyArrayObject *)__pyx_v_indices)); if (unlikely(__pyx_t_1 == ((npy_intp *)0) && PyErr_Occurred())) __PYX_ERR(0, 2138, __pyx_L1_error)
  __pyx_v_no = (__pyx_t_1[0]);

  /* "yt/geometry/particle_oct_container.pyx":2142
 *         cdef int ind[3]
 *         cdef np.uint64_t ind64[3]
 *         cdef int max_level = self.max_level             # <<<<<<<<<<<<<<
 *         # Note what we're doing here: we have decided the root will always be
 *         # zero, since we're in a forest of octrees, where the root_mesh node is
*/
  __pyx_t_2 = __pyx_v_self->__pyx_base.__pyx_base.max_level;
  __pyx_v_max_level = __pyx_t_2;

  /* "yt/geometry/particle_oct_container.pyx":2148
 *         # respect to that, which means we need to keep a few different arrays
 *         # of them.
 *         cdef np.int64_t index_root = 0             # <<<<<<<<<<<<<<
 *         cdef int root_count
 *         beg = end = 0
*/
  __pyx_v_index_root = 0;

  /* "yt/geometry/particle_oct_container.pyx":2150
 *         cdef np.int64_t index_root = 0
 *         cdef int root_count
 *         beg = end = 0             # <<<<<<<<<<<<<<
 *         self._octs_per_root[:] = 1 # Roots count regardless
 *         while end < no:
*/
  __pyx_v_beg = 0;
  __pyx_v_end = 0;

  /* "yt/geometry/particle_oct_container.pyx":2151
 *         cdef int root_count
 *         beg = end = 0
 *         self._octs_per_root[:] = 1 # Roots count regardless             # <<<<<<<<<<<<<<
 *         while end < no:
 *             # Determine number of octs with this prefix
*/
  if (unlikely(!__pyx_v_self->_octs_per_root.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2151, __pyx_L1_error)}
  {
      __pyx_t_5numpy_uint64_t __pyx_temp_scalar = 1;
      {
          Py_ssize_t __pyx_temp_extent_0 = __pyx_v_self->_octs_per_root.shape[0];
          Py_ssize_t __pyx_temp_stride_0 = __pyx_v_self->_octs_per_root.strides[0];
          char *__pyx_temp_pointer_0;
          Py_ssize_t __pyx_temp_idx_0;
          __pyx_temp_pointer_0 = __pyx_v_self->_octs_per_root.data;
          for (__pyx_temp_idx_0 = 0; __pyx_temp_idx_0 < __pyx_temp_extent_0; __pyx_temp_idx_0++) {
            *((__pyx_t_5numpy_uint64_t *) __pyx_temp_pointer_0) = __pyx_temp_scalar;
            __pyx_temp_pointer_0 += __pyx_temp_stride_0;
          }
      }
  }

  /* "yt/geometry/particle_oct_container.pyx":2152
 *         beg = end = 0
 *         self._octs_per_root[:] = 1 # Roots count regardless
 *         while end < no:             # <<<<<<<<<<<<<<
 *             # Determine number of octs with this prefix
 *             beg = end
*/
  while (1) {
    __pyx_t_3 = (__pyx_v_end < __pyx_v_no);
    if (!__pyx_t_3) break;

    /* "yt/geometry/particle_oct_container.pyx":2154
 *         while end < no:
 *             # Determine number of octs with this prefix
 *             beg = end             # <<<<<<<<<<<<<<
 *             index = (indices[beg] >> ((ORDER_MAX - self.level_offset)*3))
 *             while (end < no) and (index == (indices[end] >> ((ORDER_MAX - self.level_offset)*3))):
*/
    __pyx_v_beg = __pyx_v_end;

    /* "yt/geometry/particle_oct_container.pyx":2155
 *             # Determine number of octs with this prefix
 *             beg = end
 *             index = (indices[beg] >> ((ORDER_MAX - self.level_offset)*3))             # <<<<<<<<<<<<<<
 *             while (end < no) and (index == (indices[end] >> ((ORDER_MAX - self.level_offset)*3))):
 *                 end += 1
*/
    __pyx_t_4 = __pyx_v_beg;
    __pyx_v_index = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_indices.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_indices.diminfo[0].strides)) >> ((__pyx_v_2yt_8geometry_13oct_container_ORDER_MAX - __pyx_v_self->__pyx_base.__pyx_base.level_offset) * 3));

    /* "yt/geometry/particle_oct_container.pyx":2156
 *             beg = end
 *             index = (indices[beg] >> ((ORDER_MAX - self.level_offset)*3))
 *             while (end < no) and (index == (indices[end] >> ((ORDER_MAX - self.level_offset)*3))):             # <<<<<<<<<<<<<<
 *                 end += 1
 *             # Find root for prefix
*/
    while (1) {
      __pyx_t_5 = (__pyx_v_end < __pyx_v_no);
      if (__pyx_t_5) {
      } else {
        __pyx_t_3 = __pyx_t_5;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_4 = __pyx_v_end;
      __pyx_t_5 = (__pyx_v_index == ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_uint64_t *, __pyx_pybuffernd_indices.rcbuffer->pybuffer.buf, __pyx_t_4, __pyx_pybuffernd_indices.diminfo[0].strides)) >> ((__pyx_v_2yt_8geometry_13oct_container_ORDER_MAX - __pyx_v_self->__pyx_base.__pyx_base.level_offset) * 3)));
      __pyx_t_3 = __pyx_t_5;
      __pyx_L7_bool_binop_done:;
      if (!__pyx_t_3) break;

      /* "yt/geometry/particle_oct_container.pyx":2157
 *             index = (indices[beg] >> ((ORDER_MAX - self.level_offset)*3))
 *             while (end < no) and (index == (indices[end] >> ((ORDER_MAX - self.level_offset)*3))):
 *                 end += 1             # <<<<<<<<<<<<<<
 *             # Find root for prefix
 *             decode_morton_64bit(index, ind64)
*/
      __pyx_v_end = (__pyx_v_end + 1);
    }

    /* "yt/geometry/particle_oct_container.pyx":2159
 *                 end += 1
 *             # Find root for prefix
 *             decode_morton_64bit(index, ind64)             # <<<<<<<<<<<<<<
 *             for i in range(3):
 *                 ind[i] = ind64[i]
*/
    __pyx_f_2yt_9utilities_3lib_14geometry_utils_decode_morton_64bit(__pyx_v_index, __pyx_v_ind64); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2159, __pyx_L1_error)

    /* "yt/geometry/particle_oct_container.pyx":2160
 *             # Find root for prefix
 *             decode_morton_64bit(index, ind64)
 *             for i in range(3):             # <<<<<<<<<<<<<<
 *                 ind[i] = ind64[i]
 *             while (index_root < self.num_root) and \
*/
    for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {
      __pyx_v_i = __pyx_t_2;

      /* "yt/geometry/particle_oct_container.pyx":2161
 *             decode_morton_64bit(index, ind64)
 *             for i in range(3):
 *                 ind[i] = ind64[i]             # <<<<<<<<<<<<<<
 *             while (index_root < self.num_root) and \
 *                   (self.ipos_to_key(ind) != self.root_nodes[index_root].key):
*/
      (__pyx_v_ind[__pyx_v_i]) = (__pyx_v_ind64[__pyx_v_i]);
    }

    /* "yt/geometry/particle_oct_container.pyx":2162
 *             for i in range(3):
 *                 ind[i] = ind64[i]
 *             while (index_root < self.num_root) and \             # <<<<<<<<<<<<<<
 *                   (self.ipos_to_key(ind) != self.root_nodes[index_root].key):
 *                 index_root += 1
*/
    while (1) {
      __pyx_t_5 = (__pyx_v_index_root < __pyx_v_self->__pyx_base.num_root);
      if (__pyx_t_5) {
      } else {
        __pyx_t_3 = __pyx_t_5;
        goto __pyx_L13_bool_binop_done;
      }

      /* "yt/geometry/particle_oct_container.pyx":2163
 *                 ind[i] = ind64[i]
 *             while (index_root < self.num_root) and \
 *                   (self.ipos_to_key(ind) != self.root_nodes[index_root].key):             # <<<<<<<<<<<<<<
 *                 index_root += 1
 *             if index_root >= self.num_root:
*/
      __pyx_t_4 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.ipos_to_key(((struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer *)__pyx_v_self), __pyx_v_ind); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2163, __pyx_L1_error)
      __pyx_t_5 = (__pyx_t_4 != (__pyx_v_self->__pyx_base.root_nodes[__pyx_v_index_root]).key);
      __pyx_t_3 = __pyx_t_5;
      __pyx_L13_bool_binop_done:;
      if (!__pyx_t_3) break;

      /* "yt/geometry/particle_oct_container.pyx":2164
 *             while (index_root < self.num_root) and \
 *                   (self.ipos_to_key(ind) != self.root_nodes[index_root].key):
 *                 index_root += 1             # <<<<<<<<<<<<<<
 *             if index_root >= self.num_root:
 *                 raise Exception('No root found for {},{},{}'.format(ind[0],ind[1],ind[2]))
*/
      __pyx_v_index_root = (__pyx_v_index_root + 1);
    }

    /* "yt/geometry/particle_oct_container.pyx":2165
 *                   (self.ipos_to_key(ind) != self.root_nodes[index_root].key):
 *                 index_root += 1
 *             if index_root >= self.num_root:             # <<<<<<<<<<<<<<
 *                 raise Exception('No root found for {},{},{}'.format(ind[0],ind[1],ind[2]))
 *             root = self.root_nodes[index_root].node
*/
    __pyx_t_3 = (__pyx_v_index_root >= __pyx_v_self->__pyx_base.num_root);
    if (unlikely(__pyx_t_3)) {

      /* "yt/geometry/particle_oct_container.pyx":2166
 *                 index_root += 1
 *             if index_root >= self.num_root:
 *                 raise Exception('No root found for {},{},{}'.format(ind[0],ind[1],ind[2]))             # <<<<<<<<<<<<<<
 *             root = self.root_nodes[index_root].node
 *             # self.get_root(ind, &root)
*/
      __pyx_t_7 = NULL;
      __Pyx_INCREF((PyObject *)(((PyTypeObject*)PyExc_Exception)));
      __pyx_t_8 = ((PyObject *)(((PyTypeObject*)PyExc_Exception))); 
      __pyx_t_10 = __pyx_mstate_global->__pyx_kp_u_No_root_found_for;
      __Pyx_INCREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyLong_From_int((__pyx_v_ind[0])); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 2166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = __Pyx_PyLong_From_int((__pyx_v_ind[1])); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 2166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = __Pyx_PyLong_From_int((__pyx_v_ind[2])); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_14 = 0;
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13};
        __pyx_t_9 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_14, (4-__pyx_t_14) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2166, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __pyx_t_14 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_9};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_14, (2-__pyx_t_14) | (__pyx_t_14*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2166, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(0, 2166, __pyx_L1_error)

      /* "yt/geometry/particle_oct_container.pyx":2165
 *                   (self.ipos_to_key(ind) != self.root_nodes[index_root].key):
 *                 index_root += 1
 *             if index_root >= self.num_root:             # <<<<<<<<<<<<<<
 *                 raise Exception('No root found for {},{},{}'.format(ind[0],ind[1],ind[2]))
 *             root = self.root_nodes[index_root].node
*/
    }

    /* "yt/geometry/particle_oct_container.pyx":2167
 *             if index_root >= self.num_root:
 *                 raise Exception('No root found for {},{},{}'.format(ind[0],ind[1],ind[2]))
 *             root = self.root_nodes[index_root].node             # <<<<<<<<<<<<<<
 *             # self.get_root(ind, &root)
 *             # if root == NULL:
*/
    __pyx_t_15 = (__pyx_v_self->__pyx_base.root_nodes[__pyx_v_index_root]).node;
    __pyx_v_root = __pyx_t_15;

    /* "yt/geometry/particle_oct_container.pyx":2171
 *             # if root == NULL:
 *             #     raise Exception('No root found for {},{},{}'.format(ind[0],ind[1],ind[2]))
 *             root.file_ind = index_root             # <<<<<<<<<<<<<<
 *             # Refine root as necessary
 *             if (end - beg) > self.n_ref:
*/
    __pyx_v_root->file_ind = __pyx_v_index_root;

    /* "yt/geometry/particle_oct_container.pyx":2173
 *             root.file_ind = index_root
 *             # Refine root as necessary
 *             if (end - beg) > self.n_ref:             # <<<<<<<<<<<<<<
 *                 root_count = 0
 *                 self.nocts -= 1
*/
    __pyx_t_3 = ((__pyx_v_end - __pyx_v_beg) > __pyx_v_self->n_ref);
    if (__pyx_t_3) {

      /* "yt/geometry/particle_oct_container.pyx":2174
 *             # Refine root as necessary
 *             if (end - beg) > self.n_ref:
 *                 root_count = 0             # <<<<<<<<<<<<<<
 *                 self.nocts -= 1
 *                 self.recursive_add(root, indices[beg:end], self.level_offset+1,
*/
      __pyx_v_root_count = 0;

      /* "yt/geometry/particle_oct_container.pyx":2175
 *             if (end - beg) > self.n_ref:
 *                 root_count = 0
 *                 self.nocts -= 1             # <<<<<<<<<<<<<<
 *                 self.recursive_add(root, indices[beg:end], self.level_offset+1,
 *                                    &max_level, domain_id, &root_count)
*/
      __pyx_v_self->__pyx_base.__pyx_base.nocts = (__pyx_v_self->__pyx_base.__pyx_base.nocts - 1);

      /* "yt/geometry/particle_oct_container.pyx":2176
 *                 root_count = 0
 *                 self.nocts -= 1
 *                 self.recursive_add(root, indices[beg:end], self.level_offset+1,             # <<<<<<<<<<<<<<
 *                                    &max_level, domain_id, &root_count)
 *                 self._octs_per_root[index_root] = <np.uint64_t>root_count
*/
      __pyx_t_6 = __Pyx_PyLong_From_npy_int64(__pyx_v_beg); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyLong_From_npy_int64(__pyx_v_end); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PySlice_New(__pyx_t_6, __pyx_t_8, Py_None); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_indices), __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_mstate_global->__pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2176, __pyx_L1_error)

      /* "yt/geometry/particle_oct_container.pyx":2177
 *                 self.nocts -= 1
 *                 self.recursive_add(root, indices[beg:end], self.level_offset+1,
 *                                    &max_level, domain_id, &root_count)             # <<<<<<<<<<<<<<
 *                 self._octs_per_root[index_root] = <np.uint64_t>root_count
 *         self.max_level = max_level
*/
      ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->recursive_add(__pyx_v_self, __pyx_v_root, ((PyArrayObject *)__pyx_t_8), (__pyx_v_self->__pyx_base.__pyx_base.level_offset + 1), (&__pyx_v_max_level), __pyx_v_domain_id, (&__pyx_v_root_count)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2176, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "yt/geometry/particle_oct_container.pyx":2178
 *                 self.recursive_add(root, indices[beg:end], self.level_offset+1,
 *                                    &max_level, domain_id, &root_count)
 *                 self._octs_per_root[index_root] = <np.uint64_t>root_count             # <<<<<<<<<<<<<<
 *         self.max_level = max_level
 *         assert(self.nocts == np.sum(self._octs_per_root))
*/
      if (unlikely(!__pyx_v_self->_octs_per_root.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2178, __pyx_L1_error)}
      __pyx_t_4 = __pyx_v_index_root;
      *((__pyx_t_5numpy_uint64_t *) ( /* dim=0 */ (__pyx_v_self->_octs_per_root.data + __pyx_t_4 * __pyx_v_self->_octs_per_root.strides[0]) )) = ((__pyx_t_5numpy_uint64_t)__pyx_v_root_count);

      /* "yt/geometry/particle_oct_container.pyx":2173
 *             root.file_ind = index_root
 *             # Refine root as necessary
 *             if (end - beg) > self.n_ref:             # <<<<<<<<<<<<<<
 *                 root_count = 0
 *                 self.nocts -= 1
*/
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":2179
 *                                    &max_level, domain_id, &root_count)
 *                 self._octs_per_root[index_root] = <np.uint64_t>root_count
 *         self.max_level = max_level             # <<<<<<<<<<<<<<
 *         assert(self.nocts == np.sum(self._octs_per_root))
 * 
*/
  __pyx_v_self->__pyx_base.__pyx_base.max_level = __pyx_v_max_level;

  /* "yt/geometry/particle_oct_container.pyx":2180
 *                 self._octs_per_root[index_root] = <np.uint64_t>root_count
 *         self.max_level = max_level
 *         assert(self.nocts == np.sum(self._octs_per_root))             # <<<<<<<<<<<<<<
 * 
 *     @cython.boundscheck(False)
*/
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_8 = __Pyx_PyLong_From_npy_int64(__pyx_v_self->__pyx_base.__pyx_base.nocts); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_sum); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_v_self->_octs_per_root.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 2180, __pyx_L1_error)}
    __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_v_self->_octs_per_root, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_uint64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_uint64_t, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_13);
      assert(__pyx_t_6);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_13, __pyx__function);
      __pyx_t_14 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_7};
      __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+__pyx_t_14, (2-__pyx_t_14) | (__pyx_t_14*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2180, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
    }
    __pyx_t_13 = PyObject_RichCompare(__pyx_t_8, __pyx_t_9, Py_EQ); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 2180, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 2180, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_3)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 2180, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 2180, __pyx_L1_error)
  #endif

  /* "yt/geometry/particle_oct_container.pyx":2129
 *                                    max_level, domain_id, count)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_indices.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":2182
 *         assert(self.nocts == np.sum(self._octs_per_root))
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

static struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_refine_oct(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_uint64_t __pyx_v_index, int __pyx_v_level) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_ind[3];
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_noct;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_t_5;
  __pyx_t_5numpy_int64_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "yt/geometry/particle_oct_container.pyx":2194
 * 
 *         # Initialize empty children
 *         if o.children == NULL:             # <<<<<<<<<<<<<<
 *             o.children = <Oct **> malloc(sizeof(Oct *)*8)
 * 
*/
  __pyx_t_1 = (__pyx_v_o->children == NULL);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_oct_container.pyx":2195
 *         # Initialize empty children
 *         if o.children == NULL:
 *             o.children = <Oct **> malloc(sizeof(Oct *)*8)             # <<<<<<<<<<<<<<
 * 
 *         # This version can be used to just add the child containing the index
*/
    __pyx_v_o->children = ((struct __pyx_t_2yt_8geometry_12oct_visitors_Oct **)malloc(((sizeof(struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *)) * 8)));

    /* "yt/geometry/particle_oct_container.pyx":2194
 * 
 *         # Initialize empty children
 *         if o.children == NULL:             # <<<<<<<<<<<<<<
 *             o.children = <Oct **> malloc(sizeof(Oct *)*8)
 * 
*/
  }

  /* "yt/geometry/particle_oct_container.pyx":2213
 * 
 * 
 *         for i in range(2):             # <<<<<<<<<<<<<<
 *             for j in range(2):
 *                 for k in range(2):
*/
  for (__pyx_t_2 = 0; __pyx_t_2 < 2; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "yt/geometry/particle_oct_container.pyx":2214
 * 
 *         for i in range(2):
 *             for j in range(2):             # <<<<<<<<<<<<<<
 *                 for k in range(2):
 *                     noct = self.allocate_oct()
*/
    for (__pyx_t_3 = 0; __pyx_t_3 < 2; __pyx_t_3+=1) {
      __pyx_v_j = __pyx_t_3;

      /* "yt/geometry/particle_oct_container.pyx":2215
 *         for i in range(2):
 *             for j in range(2):
 *                 for k in range(2):             # <<<<<<<<<<<<<<
 *                     noct = self.allocate_oct()
 *                     noct.domain = o.domain
*/
      for (__pyx_t_4 = 0; __pyx_t_4 < 2; __pyx_t_4+=1) {
        __pyx_v_k = __pyx_t_4;

        /* "yt/geometry/particle_oct_container.pyx":2216
 *             for j in range(2):
 *                 for k in range(2):
 *                     noct = self.allocate_oct()             # <<<<<<<<<<<<<<
 *                     noct.domain = o.domain
 *                     noct.file_ind = 0
*/
        __pyx_t_5 = ((struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->allocate_oct(__pyx_v_self); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2216, __pyx_L1_error)
        __pyx_v_noct = __pyx_t_5;

        /* "yt/geometry/particle_oct_container.pyx":2217
 *                 for k in range(2):
 *                     noct = self.allocate_oct()
 *                     noct.domain = o.domain             # <<<<<<<<<<<<<<
 *                     noct.file_ind = 0
 *                     o.children[cind(i,j,k)] = noct
*/
        __pyx_t_6 = __pyx_v_o->domain;
        __pyx_v_noct->domain = __pyx_t_6;

        /* "yt/geometry/particle_oct_container.pyx":2218
 *                     noct = self.allocate_oct()
 *                     noct.domain = o.domain
 *                     noct.file_ind = 0             # <<<<<<<<<<<<<<
 *                     o.children[cind(i,j,k)] = noct
 *         o.file_ind = self.n_ref + 1
*/
        __pyx_v_noct->file_ind = 0;

        /* "yt/geometry/particle_oct_container.pyx":2219
 *                     noct.domain = o.domain
 *                     noct.file_ind = 0
 *                     o.children[cind(i,j,k)] = noct             # <<<<<<<<<<<<<<
 *         o.file_ind = self.n_ref + 1
 *         for i in range(3):
*/
        __pyx_t_7 = __pyx_f_2yt_8geometry_12oct_visitors_cind(__pyx_v_i, __pyx_v_j, __pyx_v_k); if (unlikely(__pyx_t_7 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2219, __pyx_L1_error)
        (__pyx_v_o->children[__pyx_t_7]) = __pyx_v_noct;
      }
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":2220
 *                     noct.file_ind = 0
 *                     o.children[cind(i,j,k)] = noct
 *         o.file_ind = self.n_ref + 1             # <<<<<<<<<<<<<<
 *         for i in range(3):
 *             ind[i] = (index >> ((ORDER_MAX - level)*3 + (2 - i))) & 1
*/
  __pyx_v_o->file_ind = (__pyx_v_self->n_ref + 1);

  /* "yt/geometry/particle_oct_container.pyx":2221
 *                     o.children[cind(i,j,k)] = noct
 *         o.file_ind = self.n_ref + 1
 *         for i in range(3):             # <<<<<<<<<<<<<<
 *             ind[i] = (index >> ((ORDER_MAX - level)*3 + (2 - i))) & 1
 *         noct = o.children[cind(ind[0],ind[1],ind[2])]
*/
  for (__pyx_t_2 = 0; __pyx_t_2 < 3; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "yt/geometry/particle_oct_container.pyx":2222
 *         o.file_ind = self.n_ref + 1
 *         for i in range(3):
 *             ind[i] = (index >> ((ORDER_MAX - level)*3 + (2 - i))) & 1             # <<<<<<<<<<<<<<
 *         noct = o.children[cind(ind[0],ind[1],ind[2])]
 *         return noct
*/
    (__pyx_v_ind[__pyx_v_i]) = ((__pyx_v_index >> (((__pyx_v_2yt_8geometry_13oct_container_ORDER_MAX - __pyx_v_level) * 3) + (2 - __pyx_v_i))) & 1);
  }

  /* "yt/geometry/particle_oct_container.pyx":2223
 *         for i in range(3):
 *             ind[i] = (index >> ((ORDER_MAX - level)*3 + (2 - i))) & 1
 *         noct = o.children[cind(ind[0],ind[1],ind[2])]             # <<<<<<<<<<<<<<
 *         return noct
 * 
*/
  __pyx_t_2 = __pyx_f_2yt_8geometry_12oct_visitors_cind((__pyx_v_ind[0]), (__pyx_v_ind[1]), (__pyx_v_ind[2])); if (unlikely(__pyx_t_2 == ((int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2223, __pyx_L1_error)
  __pyx_v_noct = (__pyx_v_o->children[__pyx_t_2]);

  /* "yt/geometry/particle_oct_container.pyx":2224
 *             ind[i] = (index >> ((ORDER_MAX - level)*3 + (2 - i))) & 1
 *         noct = o.children[cind(ind[0],ind[1],ind[2])]
 *         return noct             # <<<<<<<<<<<<<<
 * 
 *     cdef void filter_particles(self, Oct *o, np.uint64_t *data, np.int64_t p,
*/
  __pyx_r = __pyx_v_noct;
  goto __pyx_L0;

  /* "yt/geometry/particle_oct_container.pyx":2182
 *         assert(self.nocts == np.sum(self._octs_per_root))
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.refine_oct", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":2226
 *         return noct
 * 
 *     cdef void filter_particles(self, Oct *o, np.uint64_t *data, np.int64_t p,             # <<<<<<<<<<<<<<
 *                                int level):
 *         # Now we look at the last nref particles to decide where they go.
*/

static void __pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_filter_particles(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *__pyx_v_o, __pyx_t_5numpy_uint64_t *__pyx_v_data, __pyx_t_5numpy_int64_t __pyx_v_p, int __pyx_v_level) {
  int __pyx_v_n;
  __pyx_t_5numpy_uint64_t *__pyx_v_arr;
  __pyx_t_5numpy_uint64_t __pyx_v_prefix1;
  int __pyx_v_i;
  __pyx_t_5numpy_uint64_t __pyx_v_prefix2;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "yt/geometry/particle_oct_container.pyx":2229
 *                                int level):
 *         # Now we look at the last nref particles to decide where they go.
 *         cdef int n = imin(p, self.n_ref)             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t *arr = data + imax(p - self.n_ref, 0)
 *         # Now we figure out our prefix, which is the oct address at this level.
*/
  __pyx_v_n = __pyx_f_2yt_9utilities_3lib_8fp_utils_imin(__pyx_v_p, __pyx_v_self->n_ref);

  /* "yt/geometry/particle_oct_container.pyx":2230
 *         # Now we look at the last nref particles to decide where they go.
 *         cdef int n = imin(p, self.n_ref)
 *         cdef np.uint64_t *arr = data + imax(p - self.n_ref, 0)             # <<<<<<<<<<<<<<
 *         # Now we figure out our prefix, which is the oct address at this level.
 *         # As long as we're actually in Morton order, we do not need to worry
*/
  __pyx_v_arr = (__pyx_v_data + __pyx_f_2yt_9utilities_3lib_8fp_utils_imax((__pyx_v_p - __pyx_v_self->n_ref), 0));

  /* "yt/geometry/particle_oct_container.pyx":2234
 *         # As long as we're actually in Morton order, we do not need to worry
 *         # about *any* of the other children of the oct.
 *         prefix1 = data[p] >> (ORDER_MAX - level)*3             # <<<<<<<<<<<<<<
 *         for i in range(n):
 *             prefix2 = arr[i] >> (ORDER_MAX - level)*3
*/
  __pyx_v_prefix1 = ((__pyx_v_data[__pyx_v_p]) >> ((__pyx_v_2yt_8geometry_13oct_container_ORDER_MAX - __pyx_v_level) * 3));

  /* "yt/geometry/particle_oct_container.pyx":2235
 *         # about *any* of the other children of the oct.
 *         prefix1 = data[p] >> (ORDER_MAX - level)*3
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             prefix2 = arr[i] >> (ORDER_MAX - level)*3
 *             if (prefix1 == prefix2):
*/
  __pyx_t_1 = __pyx_v_n;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/geometry/particle_oct_container.pyx":2236
 *         prefix1 = data[p] >> (ORDER_MAX - level)*3
 *         for i in range(n):
 *             prefix2 = arr[i] >> (ORDER_MAX - level)*3             # <<<<<<<<<<<<<<
 *             if (prefix1 == prefix2):
 *                 o.file_ind += 1
*/
    __pyx_v_prefix2 = ((__pyx_v_arr[__pyx_v_i]) >> ((__pyx_v_2yt_8geometry_13oct_container_ORDER_MAX - __pyx_v_level) * 3));

    /* "yt/geometry/particle_oct_container.pyx":2237
 *         for i in range(n):
 *             prefix2 = arr[i] >> (ORDER_MAX - level)*3
 *             if (prefix1 == prefix2):             # <<<<<<<<<<<<<<
 *                 o.file_ind += 1
*/
    __pyx_t_4 = (__pyx_v_prefix1 == __pyx_v_prefix2);
    if (__pyx_t_4) {

      /* "yt/geometry/particle_oct_container.pyx":2238
 *             prefix2 = arr[i] >> (ORDER_MAX - level)*3
 *             if (prefix1 == prefix2):
 *                 o.file_ind += 1             # <<<<<<<<<<<<<<
*/
      __pyx_v_o->file_ind = (__pyx_v_o->file_ind + 1);

      /* "yt/geometry/particle_oct_container.pyx":2237
 *         for i in range(n):
 *             prefix2 = arr[i] >> (ORDER_MAX - level)*3
 *             if (prefix1 == prefix2):             # <<<<<<<<<<<<<<
 *                 o.file_ind += 1
*/
    }
  }

  /* "yt/geometry/particle_oct_container.pyx":2226
 *         return noct
 * 
 *     cdef void filter_particles(self, Oct *o, np.uint64_t *data, np.int64_t p,             # <<<<<<<<<<<<<<
 *                                int level):
 *         # Now we look at the last nref particles to decide where they go.
*/

  /* function exit code */
}

/* "yt/geometry/particle_oct_container.pyx":1947
 * cdef class ParticleBitmapOctreeContainer(SparseOctreeContainer):
 *     cdef Oct** oct_list
 *     cdef public int n_ref             # <<<<<<<<<<<<<<
 *     cdef int loaded # Loaded with load_octree?
 *     cdef np.uint8_t* _ptr_index_base_roots
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5n_ref_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5n_ref_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5n_ref___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5n_ref___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_self->n_ref); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.n_ref.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5n_ref_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5n_ref_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5n_ref_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5n_ref_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyLong_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1947, __pyx_L1_error)
  __pyx_v_self->n_ref = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.n_ref.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1952
 *     cdef np.uint8_t* _ptr_index_base_octs
 *     cdef np.uint64_t* _ptr_octs_per_root
 *     cdef public np.uint8_t[:] _index_base_roots             # <<<<<<<<<<<<<<
 *     cdef public np.uint8_t[:] _index_base_octs
 *     cdef np.uint64_t[:] _octs_per_root
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_17_index_base_roots_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_17_index_base_roots_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_17_index_base_roots___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_17_index_base_roots___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->_index_base_roots.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1952, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->_index_base_roots, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_uint8_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_uint8_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer._index_base_roots.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_17_index_base_roots_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_17_index_base_roots_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_17_index_base_roots_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_17_index_base_roots_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 1952, __pyx_L1_error)
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->_index_base_roots, 0);
  __pyx_v_self->_index_base_roots = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer._index_base_roots.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1953
 *     cdef np.uint64_t* _ptr_octs_per_root
 *     cdef public np.uint8_t[:] _index_base_roots
 *     cdef public np.uint8_t[:] _index_base_octs             # <<<<<<<<<<<<<<
 *     cdef np.uint64_t[:] _octs_per_root
 *     cdef public int overlap_cells
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_16_index_base_octs_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_16_index_base_octs_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_16_index_base_octs___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_16_index_base_octs___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_self->_index_base_octs.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1953, __pyx_L1_error)}
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_self->_index_base_octs, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_uint8_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_uint8_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer._index_base_octs.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_16_index_base_octs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_16_index_base_octs_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_16_index_base_octs_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_16_index_base_octs_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(__pyx_v_value, PyBUF_WRITABLE); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 1953, __pyx_L1_error)
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_self->_index_base_octs, 0);
  __pyx_v_self->_index_base_octs = __pyx_t_1;
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer._index_base_octs.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_oct_container.pyx":1955
 *     cdef public np.uint8_t[:] _index_base_octs
 *     cdef np.uint64_t[:] _octs_per_root
 *     cdef public int overlap_cells             # <<<<<<<<<<<<<<
 *     def __init__(self, domain_dimensions, domain_left_edge, domain_right_edge,
 *                  int num_root, num_zones = 2):
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13overlap_cells_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13overlap_cells_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13overlap_cells___get__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13overlap_cells___get__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_self->overlap_cells); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.overlap_cells.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13overlap_cells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13overlap_cells_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13overlap_cells_2__set__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13overlap_cells_2__set__(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __pyx_t_1 = __Pyx_PyLong_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1955, __pyx_L1_error)
  __pyx_v_self->overlap_cells = __pyx_t_1;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.overlap_cells.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_12__reduce_cython__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_self__ptr_octs_per_root_self_oct, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling"
*/

/* Python wrapper */
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_15__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_15__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_15__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_15__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_14__setstate_cython__(((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_self__ptr_octs_per_root_self_oct, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
/* #### Code section: module_exttypes ### */
static struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer;

static PyObject *__pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctreeContainer*)__pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer;
  return o;
}

static void __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_3__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  if (PyType_IS_GC(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer)) PyObject_GC_Track(o);
  #if !CYTHON_USE_MODULE_STATE
  if (likely(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer)) __Pyx_PyType_GetSlot(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer, tp_dealloc, destructor)(o); else
  #endif
  __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer);
}

static int __pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer(PyObject *o, visitproc v, void *a) {
  int e;
  #if !CYTHON_USE_MODULE_STATE
  e = 0;
  if (likely(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer)) {
    traverseproc traverse = __Pyx_PyType_GetSlot(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer, tp_traverse, traverseproc);
    if (traverse) { e = traverse(o, v, a); }
  } else
  #endif
  { e = __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer); }
  if (e) return e;
  {
    e = __Pyx_call_type_traverse(o, 0, v, a);
    if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer(PyObject *o) {
  #if !CYTHON_USE_MODULE_STATE
  if (likely(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer)) {
    inquiry clear = __Pyx_PyType_GetSlot(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer, tp_clear, inquiry);
    if (clear) clear(o);
  } else
  #endif
  { __Pyx_call_next_tp_clear(o, __pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer); }
  return 0;
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_n_ref(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5n_ref_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_n_ref(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5n_ref_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer[] = {
  {"allocate_root", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_1allocate_root, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"clear_fileind", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5clear_fileind, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"allocate_domains", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_10allocate_domains, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"finalize", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_12finalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"add", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_14add, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"recursively_count", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_16recursively_count, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"apply_domain", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_18apply_domain, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"domain_ind", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_20domain_ind, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_22__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_24__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer[] = {
  {"n_ref", __pyx_getprop_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_n_ref, __pyx_setprop_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_n_ref, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer},
  {Py_tp_clear, (void *)__pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer},
  {Py_tp_iter, (void *)__pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_7__iter__},
  {Py_tp_methods, (void *)__pyx_methods_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer},
  {Py_tp_getset, (void *)__pyx_getsets_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer},
  {Py_tp_new, (void *)__pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer},
  {0, 0},
};
static PyType_Spec __pyx_type_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer_spec = {
  "yt.geometry.particle_oct_container.ParticleOctreeContainer",
  sizeof(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer_slots,
};
#else

static PyTypeObject __pyx_type_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.geometry.particle_oct_container.""ParticleOctreeContainer", /*tp_name*/
  sizeof(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, /*tp_traverse*/
  __pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_7__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmap __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmap;

static PyObject *__pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleBitmap(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)o);
  p->__pyx_vtab = __pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleBitmap;
  p->masks = Py_None; Py_INCREF(Py_None);
  p->particle_counts = Py_None; Py_INCREF(Py_None);
  p->counts = Py_None; Py_INCREF(Py_None);
  p->max_count = Py_None; Py_INCREF(Py_None);
  p->_last_selector = Py_None; Py_INCREF(Py_None);
  p->_last_return_values = Py_None; Py_INCREF(Py_None);
  p->_cached_octrees = Py_None; Py_INCREF(Py_None);
  p->_last_octree_subset = Py_None; Py_INCREF(Py_None);
  p->_last_oct_handler = Py_None; Py_INCREF(Py_None);
  p->_prev_octree_subset = Py_None; Py_INCREF(Py_None);
  p->_prev_oct_handler = Py_None; Py_INCREF(Py_None);
  p->bitmasks = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)Py_None); Py_INCREF(Py_None);
  p->collisions = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleBitmap(PyObject *o) {
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *p = (struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleBitmap) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->masks);
  Py_CLEAR(p->particle_counts);
  Py_CLEAR(p->counts);
  Py_CLEAR(p->max_count);
  Py_CLEAR(p->_last_selector);
  Py_CLEAR(p->_last_return_values);
  Py_CLEAR(p->_cached_octrees);
  Py_CLEAR(p->_last_octree_subset);
  Py_CLEAR(p->_last_oct_handler);
  Py_CLEAR(p->_prev_octree_subset);
  Py_CLEAR(p->_prev_oct_handler);
  Py_CLEAR(p->bitmasks);
  Py_CLEAR(p->collisions);
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleBitmap(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *p = (struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->masks) {
    e = (*v)(p->masks, a); if (e) return e;
  }
  if (p->particle_counts) {
    e = (*v)(p->particle_counts, a); if (e) return e;
  }
  if (p->counts) {
    e = (*v)(p->counts, a); if (e) return e;
  }
  if (p->max_count) {
    e = (*v)(p->max_count, a); if (e) return e;
  }
  if (p->_last_selector) {
    e = (*v)(p->_last_selector, a); if (e) return e;
  }
  if (p->_last_return_values) {
    e = (*v)(p->_last_return_values, a); if (e) return e;
  }
  if (p->_cached_octrees) {
    e = (*v)(p->_cached_octrees, a); if (e) return e;
  }
  if (p->_last_octree_subset) {
    e = (*v)(p->_last_octree_subset, a); if (e) return e;
  }
  if (p->_last_oct_handler) {
    e = (*v)(p->_last_oct_handler, a); if (e) return e;
  }
  if (p->_prev_octree_subset) {
    e = (*v)(p->_prev_octree_subset, a); if (e) return e;
  }
  if (p->_prev_oct_handler) {
    e = (*v)(p->_prev_oct_handler, a); if (e) return e;
  }
  if (p->bitmasks) {
    e = (*v)(((PyObject *)p->bitmasks), a); if (e) return e;
  }
  if (p->collisions) {
    e = (*v)(((PyObject *)p->collisions), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleBitmap(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *p = (struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)o;
  tmp = ((PyObject*)p->masks);
  p->masks = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->particle_counts);
  p->particle_counts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->counts);
  p->counts = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->max_count);
  p->max_count = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_last_selector);
  p->_last_selector = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_last_return_values);
  p->_last_return_values = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_cached_octrees);
  p->_cached_octrees = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_last_octree_subset);
  p->_last_octree_subset = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_last_oct_handler);
  p->_last_oct_handler = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_prev_octree_subset);
  p->_prev_octree_subset = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_prev_oct_handler);
  p->_prev_oct_handler = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->bitmasks);
  p->bitmasks = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->collisions);
  p->collisions = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_nfiles(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6nfiles_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_nfiles(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6nfiles_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_index_order1(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order1_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_index_order1(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order1_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_index_order2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order2_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_index_order2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_12index_order2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_masks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_masks(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5masks_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_particle_counts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_particle_counts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15particle_counts_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_counts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_counts(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6counts_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_max_count(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_max_count(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9max_count_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_selector(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_selector(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_14_last_selector_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_return_values(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_return_values(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_return_values_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__cached_octrees(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__cached_octrees(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_cached_octrees_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_octree_subset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_octree_subset(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_last_octree_subset_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_oct_handler(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_oct_handler(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_last_oct_handler_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__prev_octree_subset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__prev_octree_subset(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19_prev_octree_subset_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__prev_oct_handler(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__prev_oct_handler(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17_prev_oct_handler_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_bitmasks(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_bitmasks(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_8bitmasks_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_collisions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_collisions(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_10collisions_5__del__(o);
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__used_mi2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_used_mi2_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__used_mi2(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_used_mi2_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_2yt_8geometry_22particle_oct_container_ParticleBitmap[] = {
  {"_bitmask_logicaland", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_3_bitmask_logicaland, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_bitmask_intersects", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5_bitmask_intersects, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"update_mi2", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_7update_mi2, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2yt_8geometry_22particle_oct_container_14ParticleBitmap_6update_mi2},
  {"_set_coarse_index_data_file", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_11_set_coarse_index_data_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_set_refined_index_data_file", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_set_refined_index_data_file, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"find_collisions", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17find_collisions, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"find_collisions_coarse", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19find_collisions_coarse, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"find_uncontaminated", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_21find_uncontaminated, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"find_contaminated", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_23find_contaminated, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"find_collisions_refined", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_25find_collisions_refined, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_bitmasks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_27get_bitmasks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"iseq_bitmask", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_29iseq_bitmask, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"save_bitmasks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_31save_bitmasks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"check_bitmasks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_33check_bitmasks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"reset_bitmasks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_35reset_bitmasks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"load_bitmasks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_37load_bitmasks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"print_info", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_39print_info, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"count_coarse", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_41count_coarse, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2yt_8geometry_22particle_oct_container_14ParticleBitmap_40count_coarse},
  {"count_refined", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_43count_refined, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2yt_8geometry_22particle_oct_container_14ParticleBitmap_42count_refined},
  {"count_total", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_45count_total, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_2yt_8geometry_22particle_oct_container_14ParticleBitmap_44count_total},
  {"check", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_47check, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"primary_indices", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_49primary_indices, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"file_ownership_mask", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_51file_ownership_mask, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"finalize", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_53finalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_DLE", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_55get_DLE, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_DRE", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_57get_DRE, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_ghost_zones", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_59get_ghost_zones, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"selector2mask", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_61selector2mask, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"mask2files", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_63mask2files, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"mask2filemasks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_65mask2filemasks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"filemasks2addfiles", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_67filemasks2addfiles, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"identify_file_masks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_69identify_file_masks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"identify_data_files", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_71identify_data_files, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"mask_to_files", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_73mask_to_files, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"masks_to_files", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_75masks_to_files, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"construct_octree", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_77construct_octree, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__pyx_fuse_0_coarse_index_data_file", (PyCFunction)(void(*)(void))(PyCFunctionWithKeywords)__pyx_fuse_0__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_79_coarse_index_data_file, METH_VARARGS|METH_KEYWORDS, 0},
  {"__pyx_fuse_1_coarse_index_data_file", (PyCFunction)(void(*)(void))(PyCFunctionWithKeywords)__pyx_fuse_1__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_81_coarse_index_data_file, METH_VARARGS|METH_KEYWORDS, 0},
  {"__pyx_fuse_0_refined_index_data_file", (PyCFunction)(void(*)(void))(PyCFunctionWithKeywords)__pyx_fuse_0__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_85_refined_index_data_file, METH_VARARGS|METH_KEYWORDS, 0},
  {"__pyx_fuse_1_refined_index_data_file", (PyCFunction)(void(*)(void))(PyCFunctionWithKeywords)__pyx_fuse_1__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_87_refined_index_data_file, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_91__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_93__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_2yt_8geometry_22particle_oct_container_ParticleBitmap[] = {
  {"nfiles", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_nfiles, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_nfiles, 0, 0},
  {"index_order1", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_index_order1, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_index_order1, 0, 0},
  {"index_order2", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_index_order2, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_index_order2, 0, 0},
  {"masks", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_masks, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_masks, 0, 0},
  {"particle_counts", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_particle_counts, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_particle_counts, 0, 0},
  {"counts", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_counts, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_counts, 0, 0},
  {"max_count", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_max_count, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_max_count, 0, 0},
  {"_last_selector", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_selector, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_selector, 0, 0},
  {"_last_return_values", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_return_values, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_return_values, 0, 0},
  {"_cached_octrees", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__cached_octrees, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__cached_octrees, 0, 0},
  {"_last_octree_subset", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_octree_subset, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_octree_subset, 0, 0},
  {"_last_oct_handler", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_oct_handler, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__last_oct_handler, 0, 0},
  {"_prev_octree_subset", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__prev_octree_subset, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__prev_octree_subset, 0, 0},
  {"_prev_oct_handler", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__prev_oct_handler, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__prev_oct_handler, 0, 0},
  {"bitmasks", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_bitmasks, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_bitmasks, 0, 0},
  {"collisions", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_collisions, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap_collisions, 0, 0},
  {"_used_mi2", __pyx_getprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__used_mi2, __pyx_setprop_2yt_8geometry_22particle_oct_container_14ParticleBitmap__used_mi2, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmap_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleBitmap},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleBitmap},
  {Py_tp_clear, (void *)__pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleBitmap},
  {Py_tp_methods, (void *)__pyx_methods_2yt_8geometry_22particle_oct_container_ParticleBitmap},
  {Py_tp_getset, (void *)__pyx_getsets_2yt_8geometry_22particle_oct_container_ParticleBitmap},
  {Py_tp_init, (void *)__pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleBitmap},
  {0, 0},
};
static PyType_Spec __pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmap_spec = {
  "yt.geometry.particle_oct_container.ParticleBitmap",
  sizeof(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmap_slots,
};
#else

static PyTypeObject __pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmap = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.geometry.particle_oct_container.""ParticleBitmap", /*tp_name*/
  sizeof(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleBitmap, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleBitmap, /*tp_traverse*/
  __pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleBitmap, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2yt_8geometry_22particle_oct_container_ParticleBitmap, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_2yt_8geometry_22particle_oct_container_ParticleBitmap, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_2yt_8geometry_22particle_oct_container_14ParticleBitmap_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleBitmap, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector;

static PyObject *__pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)o);
  p->__pyx_vtab = __pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector;
  p->selector = ((struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *)Py_None); Py_INCREF(Py_None);
  p->bitmap = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)Py_None); Py_INCREF(Py_None);
  p->refined_ghosts_list = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *)Py_None); Py_INCREF(Py_None);
  p->select_ewah = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)Py_None); Py_INCREF(Py_None);
  p->ghosts_ewah = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)Py_None); Py_INCREF(Py_None);
  p->ind1_n.data = NULL;
  p->ind1_n.memview = NULL;
  p->ind2_n.data = NULL;
  p->ind2_n.memview = NULL;
  p->neighbors.data = NULL;
  p->neighbors.memview = NULL;
  p->neighbor_list1.data = NULL;
  p->neighbor_list1.memview = NULL;
  p->neighbor_list2.data = NULL;
  p->neighbor_list2.memview = NULL;
  p->file_mask_p.data = NULL;
  p->file_mask_p.memview = NULL;
  p->file_mask_g.data = NULL;
  p->file_mask_g.memview = NULL;
  p->refined_select_bool.data = NULL;
  p->refined_select_bool.memview = NULL;
  p->refined_ghosts_bool.data = NULL;
  p->refined_ghosts_bool.memview = NULL;
  p->coarse_select_bool.data = NULL;
  p->coarse_select_bool.memview = NULL;
  p->coarse_ghosts_bool.data = NULL;
  p->coarse_ghosts_bool.memview = NULL;
  if (unlikely(__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector(PyObject *o) {
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *p = (struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->selector);
  Py_CLEAR(p->bitmap);
  Py_CLEAR(p->refined_ghosts_list);
  Py_CLEAR(p->select_ewah);
  Py_CLEAR(p->ghosts_ewah);
  __PYX_XCLEAR_MEMVIEW(&p->ind1_n, 1);
  p->ind1_n.memview = NULL; p->ind1_n.data = NULL;
  __PYX_XCLEAR_MEMVIEW(&p->ind2_n, 1);
  p->ind2_n.memview = NULL; p->ind2_n.data = NULL;
  __PYX_XCLEAR_MEMVIEW(&p->neighbors, 1);
  p->neighbors.memview = NULL; p->neighbors.data = NULL;
  __PYX_XCLEAR_MEMVIEW(&p->neighbor_list1, 1);
  p->neighbor_list1.memview = NULL; p->neighbor_list1.data = NULL;
  __PYX_XCLEAR_MEMVIEW(&p->neighbor_list2, 1);
  p->neighbor_list2.memview = NULL; p->neighbor_list2.data = NULL;
  __PYX_XCLEAR_MEMVIEW(&p->file_mask_p, 1);
  p->file_mask_p.memview = NULL; p->file_mask_p.data = NULL;
  __PYX_XCLEAR_MEMVIEW(&p->file_mask_g, 1);
  p->file_mask_g.memview = NULL; p->file_mask_g.data = NULL;
  __PYX_XCLEAR_MEMVIEW(&p->refined_select_bool, 1);
  p->refined_select_bool.memview = NULL; p->refined_select_bool.data = NULL;
  __PYX_XCLEAR_MEMVIEW(&p->refined_ghosts_bool, 1);
  p->refined_ghosts_bool.memview = NULL; p->refined_ghosts_bool.data = NULL;
  __PYX_XCLEAR_MEMVIEW(&p->coarse_select_bool, 1);
  p->coarse_select_bool.memview = NULL; p->coarse_select_bool.data = NULL;
  __PYX_XCLEAR_MEMVIEW(&p->coarse_ghosts_bool, 1);
  p->coarse_ghosts_bool.memview = NULL; p->coarse_ghosts_bool.data = NULL;
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *p = (struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->selector) {
    e = (*v)(((PyObject *)p->selector), a); if (e) return e;
  }
  if (p->bitmap) {
    e = (*v)(((PyObject *)p->bitmap), a); if (e) return e;
  }
  if (p->refined_ghosts_list) {
    e = (*v)(((PyObject *)p->refined_ghosts_list), a); if (e) return e;
  }
  if (p->select_ewah) {
    e = (*v)(((PyObject *)p->select_ewah), a); if (e) return e;
  }
  if (p->ghosts_ewah) {
    e = (*v)(((PyObject *)p->ghosts_ewah), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *p = (struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *)o;
  tmp = ((PyObject*)p->selector);
  p->selector = ((struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->bitmap);
  p->bitmap = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->refined_ghosts_list);
  p->refined_ghosts_list = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->select_ewah);
  p->select_ewah = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->ghosts_ewah);
  p->ghosts_ewah = ((struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector[] = {
  {"fill_masks", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_3fill_masks, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"find_files", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_5find_files, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector},
  {Py_tp_clear, (void *)__pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector},
  {Py_tp_methods, (void *)__pyx_methods_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector},
  {Py_tp_new, (void *)__pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector},
  {0, 0},
};
static PyType_Spec __pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector_spec = {
  "yt.geometry.particle_oct_container.ParticleBitmapSelector",
  sizeof(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector_slots,
};
#else

static PyTypeObject __pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.geometry.particle_oct_container.""ParticleBitmapSelector", /*tp_name*/
  sizeof(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector, /*tp_traverse*/
  __pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer;

static PyObject *__pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *p;
  PyObject *o = __Pyx_PyType_GetSlot(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer, tp_new, newfunc)(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctreeContainer*)__pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer;
  p->_index_base_roots.data = NULL;
  p->_index_base_roots.memview = NULL;
  p->_index_base_octs.data = NULL;
  p->_index_base_octs.memview = NULL;
  p->_octs_per_root.data = NULL;
  p->_octs_per_root.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer(PyObject *o) {
  struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *p = (struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_9__dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __PYX_XCLEAR_MEMVIEW(&p->_index_base_roots, 1);
  p->_index_base_roots.memview = NULL; p->_index_base_roots.data = NULL;
  __PYX_XCLEAR_MEMVIEW(&p->_index_base_octs, 1);
  p->_index_base_octs.memview = NULL; p->_index_base_octs.data = NULL;
  __PYX_XCLEAR_MEMVIEW(&p->_octs_per_root, 1);
  p->_octs_per_root.memview = NULL; p->_octs_per_root.data = NULL;
  if (PyType_IS_GC(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer)) PyObject_GC_Track(o);
  #if !CYTHON_USE_MODULE_STATE
  if (likely(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer)) __Pyx_PyType_GetSlot(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer, tp_dealloc, destructor)(o); else
  #endif
  __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer);
}

static int __pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer(PyObject *o, visitproc v, void *a) {
  int e;
  #if !CYTHON_USE_MODULE_STATE
  e = 0;
  if (likely(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer)) {
    traverseproc traverse = __Pyx_PyType_GetSlot(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer, tp_traverse, traverseproc);
    if (traverse) { e = traverse(o, v, a); }
  } else
  #endif
  { e = __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer); }
  if (e) return e;
  {
    e = __Pyx_call_type_traverse(o, 0, v, a);
    if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer(PyObject *o) {
  #if !CYTHON_USE_MODULE_STATE
  if (likely(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer)) {
    inquiry clear = __Pyx_PyType_GetSlot(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer, tp_clear, inquiry);
    if (clear) clear(o);
  } else
  #endif
  { __Pyx_call_next_tp_clear(o, __pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer); }
  return 0;
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_n_ref(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5n_ref_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_n_ref(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5n_ref_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer__index_base_roots(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_17_index_base_roots_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer__index_base_roots(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_17_index_base_roots_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer__index_base_octs(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_16_index_base_octs_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer__index_base_octs(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_16_index_base_octs_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_overlap_cells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13overlap_cells_1__get__(o);
}

static int __pyx_setprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_overlap_cells(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13overlap_cells_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer[] = {
  {"allocate_domains", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_3allocate_domains, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"finalize", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5finalize, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_index_base_octs", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_7get_index_base_octs, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"add", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_11add, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_15__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer[] = {
  {"n_ref", __pyx_getprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_n_ref, __pyx_setprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_n_ref, 0, 0},
  {"_index_base_roots", __pyx_getprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer__index_base_roots, __pyx_setprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer__index_base_roots, 0, 0},
  {"_index_base_octs", __pyx_getprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer__index_base_octs, __pyx_setprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer__index_base_octs, 0, 0},
  {"overlap_cells", __pyx_getprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_overlap_cells, __pyx_setprop_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_overlap_cells, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer},
  {Py_tp_clear, (void *)__pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer},
  {Py_tp_methods, (void *)__pyx_methods_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer},
  {Py_tp_getset, (void *)__pyx_getsets_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer},
  {Py_tp_init, (void *)__pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer},
  {0, 0},
};
static PyType_Spec __pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer_spec = {
  "yt.geometry.particle_oct_container.ParticleBitmapOctreeContainer",
  sizeof(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer_slots,
};
#else

static PyTypeObject __pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.geometry.particle_oct_container.""ParticleBitmapOctreeContainer", /*tp_name*/
  sizeof(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer, /*tp_traverse*/
  __pyx_tp_clear_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_pw_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  #if CYTHON_USE_FREELISTS
  if (likely((int)(__pyx_mstate_global->__pyx_freecount_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ > 0) & (int)(t->tp_basicsize == sizeof(struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__)))) {
    o = (PyObject*)__pyx_mstate_global->__pyx_freelist_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__[--__pyx_mstate_global->__pyx_freecount_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__];
    memset(o, 0, sizeof(struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else
  #endif
  {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

static void __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__(PyObject *o) {
  struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ *p = (struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  #if CYTHON_USE_FREELISTS
  if (((int)(__pyx_mstate_global->__pyx_freecount_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ < 8) & (int)(Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__)))) {
    __pyx_mstate_global->__pyx_freelist_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__[__pyx_mstate_global->__pyx_freecount_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__++] = ((struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ *)o);
  } else
  #endif
  {
    #if CYTHON_USE_TYPE_SLOTS
    (*Py_TYPE(o)->tp_free)(o);
    #else
    {
      freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
      if (tp_free) tp_free(o);
    }
    #endif
  }
}

static int __pyx_tp_traverse_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ *p = (struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter___slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__},
  {Py_tp_new, (void *)__pyx_tp_new_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__},
  {0, 0},
};
static PyType_Spec __pyx_type_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter___spec = {
  "yt.geometry.particle_oct_container.__pyx_scope_struct____iter__",
  sizeof(struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE,
  __pyx_type_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter___slots,
};
#else

static PyTypeObject __pyx_type_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.geometry.particle_oct_container.""__pyx_scope_struct____iter__", /*tp_name*/
  sizeof(struct __pyx_obj_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_FINALIZE, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_array) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyLong_FromSsize_t(i); if(!x) return 0;
  #if CYTHON_USE_TYPE_SLOTS || (!CYTHON_USE_TYPE_SPECS && __PYX_LIMITED_VERSION_HEX < 0x030A0000)
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  #else
  r = ((binaryfunc)PyType_GetSlot(Py_TYPE(o), Py_mp_subscript))(o, x);
  #endif
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    __Pyx_TypeName o_type_name;
    o_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(o));
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by " __Pyx_FMT_TYPENAME, o_type_name);
    __Pyx_DECREF_TypeName(o_type_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_array_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_array_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {"memview", __pyx_getprop___pyx_array_memview, 0, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
#if !CYTHON_COMPILING_IN_LIMITED_API

static PyBufferProcs __pyx_tp_as_buffer_array = {
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};
#endif
static PyType_Slot __pyx_type___pyx_array_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_array},
  {Py_sq_length, (void *)__pyx_array___len__},
  {Py_sq_item, (void *)__pyx_sq_item_array},
  {Py_mp_length, (void *)__pyx_array___len__},
  {Py_mp_subscript, (void *)__pyx_array___getitem__},
  {Py_mp_ass_subscript, (void *)__pyx_mp_ass_subscript_array},
  {Py_tp_getattro, (void *)__pyx_tp_getattro_array},
  #if defined(Py_bf_getbuffer)
  {Py_bf_getbuffer, (void *)__pyx_array_getbuffer},
  #endif
  {Py_tp_methods, (void *)__pyx_methods_array},
  {Py_tp_getset, (void *)__pyx_getsets_array},
  {Py_tp_new, (void *)__pyx_tp_new_array},
  {0, 0},
};
static PyType_Spec __pyx_type___pyx_array_spec = {
  "yt.geometry.particle_oct_container.array",
  sizeof(struct __pyx_array_obj),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_SEQUENCE,
  __pyx_type___pyx_array_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.geometry.particle_oct_container.""array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_SEQUENCE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_Enum) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type___pyx_MemviewEnum_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_Enum},
  {Py_tp_repr, (void *)__pyx_MemviewEnum___repr__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_Enum},
  {Py_tp_clear, (void *)__pyx_tp_clear_Enum},
  {Py_tp_methods, (void *)__pyx_methods_Enum},
  {Py_tp_init, (void *)__pyx_MemviewEnum___init__},
  {Py_tp_new, (void *)__pyx_tp_new_Enum},
  {0, 0},
};
static PyType_Spec __pyx_type___pyx_MemviewEnum_spec = {
  "yt.geometry.particle_oct_container.Enum",
  sizeof(struct __pyx_MemviewEnum_obj),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type___pyx_MemviewEnum_slots,
};
#else

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.geometry.particle_oct_container.""Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_memoryview) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  {
    e = __Pyx_call_type_traverse(o, 1, v, a);
    if (e) return e;
  }
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}

static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyLong_FromSsize_t(i); if(!x) return 0;
  #if CYTHON_USE_TYPE_SLOTS || (!CYTHON_USE_TYPE_SPECS && __PYX_LIMITED_VERSION_HEX < 0x030A0000)
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  #else
  r = ((binaryfunc)PyType_GetSlot(Py_TYPE(o), Py_mp_subscript))(o, x);
  #endif
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    __Pyx_TypeName o_type_name;
    o_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(o));
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by " __Pyx_FMT_TYPENAME, o_type_name);
    __Pyx_DECREF_TypeName(o_type_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_is_c_contig, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"is_f_contig", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_is_f_contig, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"copy", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"copy_fortran", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_copy_fortran, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryview_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryview_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {"T", __pyx_getprop___pyx_memoryview_T, 0, 0, 0},
  {"base", __pyx_getprop___pyx_memoryview_base, 0, 0, 0},
  {"shape", __pyx_getprop___pyx_memoryview_shape, 0, 0, 0},
  {"strides", __pyx_getprop___pyx_memoryview_strides, 0, 0, 0},
  {"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, 0, 0},
  {"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, 0, 0},
  {"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, 0, 0},
  {"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, 0, 0},
  {"size", __pyx_getprop___pyx_memoryview_size, 0, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
#if !CYTHON_COMPILING_IN_LIMITED_API

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};
#endif
static PyType_Slot __pyx_type___pyx_memoryview_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_memoryview},
  {Py_tp_repr, (void *)__pyx_memoryview___repr__},
  {Py_sq_length, (void *)__pyx_memoryview___len__},
  {Py_sq_item, (void *)__pyx_sq_item_memoryview},
  {Py_mp_length, (void *)__pyx_memoryview___len__},
  {Py_mp_subscript, (void *)__pyx_memoryview___getitem__},
  {Py_mp_ass_subscript, (void *)__pyx_mp_ass_subscript_memoryview},
  {Py_tp_str, (void *)__pyx_memoryview___str__},
  #if defined(Py_bf_getbuffer)
  {Py_bf_getbuffer, (void *)__pyx_memoryview_getbuffer},
  #endif
  {Py_tp_traverse, (void *)__pyx_tp_traverse_memoryview},
  {Py_tp_clear, (void *)__pyx_tp_clear_memoryview},
  {Py_tp_methods, (void *)__pyx_methods_memoryview},
  {Py_tp_getset, (void *)__pyx_getsets_memoryview},
  {Py_tp_new, (void *)__pyx_tp_new_memoryview},
  {0, 0},
};
static PyType_Spec __pyx_type___pyx_memoryview_spec = {
  "yt.geometry.particle_oct_container.memoryview",
  sizeof(struct __pyx_memoryview_obj),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type___pyx_memoryview_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.geometry.particle_oct_container.""memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  __Pyx_default_placement_construct(&(p->from_slice));
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc__memoryviewslice) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->from_slice);
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XCLEAR_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type___pyx_memoryviewslice_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc__memoryviewslice},
  {Py_tp_doc, (void *)PyDoc_STR("Internal class for passing memoryview slices to Python")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse__memoryviewslice},
  {Py_tp_clear, (void *)__pyx_tp_clear__memoryviewslice},
  {Py_tp_methods, (void *)__pyx_methods__memoryviewslice},
  {Py_tp_new, (void *)__pyx_tp_new__memoryviewslice},
  {0, 0},
};
static PyType_Spec __pyx_type___pyx_memoryviewslice_spec = {
  "yt.geometry.particle_oct_container._memoryviewslice",
  sizeof(struct __pyx_memoryviewslice_obj),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_SEQUENCE,
  __pyx_type___pyx_memoryviewslice_slots,
};
#else

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.geometry.particle_oct_container.""_memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_SEQUENCE, /*tp_flags*/
  PyDoc_STR("Internal class for passing memoryview slices to Python"), /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
/* #### Code section: initfunc_declarations ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate); /*proto*/
/* #### Code section: init_module ### */

static int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_collections_abc_Sequence = Py_None; Py_INCREF(Py_None);
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("yt.geometry.oct_container"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_container", "OctreeContainer",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_13oct_container_OctreeContainer = (struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctreeContainer*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer); if (unlikely(!__pyx_vtabptr_2yt_8geometry_13oct_container_OctreeContainer)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer = &__pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer.__pyx_base = *__pyx_vtabptr_2yt_8geometry_13oct_container_OctreeContainer;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer.__pyx_base.get_domain_offset = (__pyx_t_5numpy_int64_t (*)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, int))__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_get_domain_offset;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer.visit_free = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *))__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit_free;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer.visit_clear = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *))__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit_clear;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer.visit_assign = (PyObject *(*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_int64_t *, int, int *))__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit_assign;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer.allocate_oct = (struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *))__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_allocate_oct;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer.refine_oct = (struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_uint64_t, int, __pyx_t_5numpy_uint8_t))__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_refine_oct;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer.filter_particles = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_uint64_t *, __pyx_t_5numpy_int64_t, int, __pyx_t_5numpy_uint8_t))__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_filter_particles;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer.visit = (PyObject *(*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_int64_t *, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit *__pyx_optional_args))__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_visit;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer.get_from_index = (struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer *, __pyx_t_5numpy_uint64_t, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_get_from_index *__pyx_optional_args))__pyx_f_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_get_from_index;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer)) __PYX_ERR(0, 74, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer_spec, __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer = &__pyx_type_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer->tp_base = __pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer->tp_dictoffset && __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, __pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_ParticleOctreeContainer, (PyObject *) __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleBitmap = &__pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmap;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmap._update_mi2 = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, __pyx_t_5numpy_uint64_t))__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__update_mi2;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmap._ParticleBitmap__set_coarse_index_data_file = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, __pyx_t_5numpy_uint64_t))__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__set_coarse_index_data_file;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmap._ParticleBitmap__fill_refined_ranges = (__pyx_t_5numpy_int64_t (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_float64_t *, __pyx_t_15ewah_bool_utils_15ewah_bool_array_bool_array &))__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__fill_refined_ranges;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmap._ParticleBitmap__set_refined_index_data_file = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_int64_t))__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__set_refined_index_data_file;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmap.__pyx_fuse_0_ParticleBitmap__coarse_index_data_file = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t))__pyx_fuse_0__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__coarse_index_data_file;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmap.__pyx_fuse_1_ParticleBitmap__coarse_index_data_file = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t))__pyx_fuse_1__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__coarse_index_data_file;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmap.__pyx_fuse_0_ParticleBitmap__refined_index_data_file = (struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *(*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, PyArrayObject *, PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint8_t))__pyx_fuse_0__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__refined_index_data_file;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmap.__pyx_fuse_1_ParticleBitmap__refined_index_data_file = (struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *(*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmap *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection *, PyArrayObject *, PyArrayObject *, PyArrayObject *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint8_t))__pyx_fuse_1__pyx_f_2yt_8geometry_22particle_oct_container_14ParticleBitmap__ParticleBitmap__refined_index_data_file;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmap_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap)) __PYX_ERR(0, 416, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmap_spec, __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap) < 0) __PYX_ERR(0, 416, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap = &__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmap;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap) < 0) __PYX_ERR(0, 416, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap->tp_dictoffset && __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleBitmap) < 0) __PYX_ERR(0, 416, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap) < 0) __PYX_ERR(0, 416, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_ParticleBitmap, (PyObject *) __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap) < 0) __PYX_ERR(0, 416, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap) < 0) __PYX_ERR(0, 416, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector = &__pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.is_refined = (int (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_is_refined;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.is_refined_files = (int (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_is_refined_files;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.add_coarse = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_coarse *__pyx_optional_args))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_coarse;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.set_files_coarse = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_files_coarse;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.add_refined = (int (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, struct __pyx_opt_args_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_refined *__pyx_optional_args))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_refined;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.set_files_refined = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_files_refined;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.add_neighbors_coarse = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_neighbors_coarse;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.set_files_neighbors_coarse = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_files_neighbors_coarse;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.add_neighbors_refined = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_neighbors_refined;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.set_files_neighbors_refined = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_files_neighbors_refined;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.set_coarse_list = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_coarse_list;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.set_refined_list = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_refined_list;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.set_coarse_bool = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_coarse_bool;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.set_refined_bool = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_set_refined_bool;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.push_refined_bool = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_push_refined_bool;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.add_ghost_zones = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *, struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed *))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_add_ghost_zones;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.fill_subcells_mi1 = (int (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t *))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_fill_subcells_mi1;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.fill_subcells_mi2 = (int (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t *))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_fill_subcells_mi2;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.recursive_morton_mask = (int (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_int32_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t *))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_recursive_morton_mask;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector.recursive_morton_files = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector *, __pyx_t_5numpy_int32_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_uint64_t))__pyx_f_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_recursive_morton_files;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector)) __PYX_ERR(0, 1419, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector_spec, __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector) < 0) __PYX_ERR(0, 1419, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector = &__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector) < 0) __PYX_ERR(0, 1419, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector->tp_dictoffset && __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector, __pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector) < 0) __PYX_ERR(0, 1419, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector) < 0) __PYX_ERR(0, 1419, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_ParticleBitmapSelector, (PyObject *) __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector) < 0) __PYX_ERR(0, 1419, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector) < 0) __PYX_ERR(0, 1419, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_container", "SparseOctreeContainer",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_13oct_container_SparseOctreeContainer = (struct __pyx_vtabstruct_2yt_8geometry_13oct_container_SparseOctreeContainer*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer); if (unlikely(!__pyx_vtabptr_2yt_8geometry_13oct_container_SparseOctreeContainer)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer = &__pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer.__pyx_base = *__pyx_vtabptr_2yt_8geometry_13oct_container_SparseOctreeContainer;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer.visit_assign = (PyObject *(*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_int64_t *, int, int *, __pyx_t_5numpy_int64_t))__pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_visit_assign;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer.allocate_oct = (struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *))__pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_allocate_oct;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer._get_index_base_octs = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *, __Pyx_memviewslice, __Pyx_memviewslice))__pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer__get_index_base_octs;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer.visit_free = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, int))__pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_visit_free;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer.recursive_add = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, PyArrayObject *, int, int *, int, int *))__pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_recursive_add;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer.refine_oct = (struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_uint64_t, int))__pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_refine_oct;
  __pyx_vtable_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer.filter_particles = (void (*)(struct __pyx_obj_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_uint64_t *, __pyx_t_5numpy_int64_t, int))__pyx_f_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_filter_particles;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer)) __PYX_ERR(0, 1945, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer_spec, __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer) < 0) __PYX_ERR(0, 1945, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer = &__pyx_type_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer->tp_base = __pyx_mstate_global->__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer) < 0) __PYX_ERR(0, 1945, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer->tp_dictoffset && __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer, __pyx_vtabptr_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer) < 0) __PYX_ERR(0, 1945, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer) < 0) __PYX_ERR(0, 1945, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_ParticleBitmapOctreeContainer, (PyObject *) __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer) < 0) __PYX_ERR(0, 1945, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer) < 0) __PYX_ERR(0, 1945, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter___spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__)) __PYX_ERR(0, 135, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter___spec, __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__ = &__pyx_type_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__) < 0) __PYX_ERR(0, 135, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__->tp_dictoffset && __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_2yt_8geometry_22particle_oct_container___pyx_scope_struct____iter__->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_array_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_array_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_array_type)) __PYX_ERR(1, 110, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_mstate->__pyx_array_type->tp_as_buffer = &__pyx_tp_as_buffer_array;
  if (!__pyx_mstate->__pyx_array_type->tp_as_buffer->bf_releasebuffer && __pyx_mstate->__pyx_array_type->tp_base->tp_as_buffer && __pyx_mstate->__pyx_array_type->tp_base->tp_as_buffer->bf_releasebuffer) {
    __pyx_mstate->__pyx_array_type->tp_as_buffer->bf_releasebuffer = __pyx_mstate->__pyx_array_type->tp_base->tp_as_buffer->bf_releasebuffer;
  }
  #elif defined(Py_bf_getbuffer) && defined(Py_bf_releasebuffer)
  /* PY_VERSION_HEX >= 0x03090000 || Py_LIMITED_API >= 0x030B0000 */
  #elif defined(_MSC_VER)
  #pragma message ("The buffer protocol is not supported in the Limited C-API < 3.11.")
  #else
  #warning "The buffer protocol is not supported in the Limited C-API < 3.11."
  #endif
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_array_spec, __pyx_mstate->__pyx_array_type) < 0) __PYX_ERR(1, 110, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_array_type = &__pyx_type___pyx_array;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_array_type) < 0) __PYX_ERR(1, 110, __pyx_L1_error)
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_array_type, __pyx_vtabptr_array) < 0) __PYX_ERR(1, 110, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_array_type) < 0) __PYX_ERR(1, 110, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_array_type) < 0) __PYX_ERR(1, 110, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_MemviewEnum_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_MemviewEnum_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_MemviewEnum_type)) __PYX_ERR(1, 299, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_MemviewEnum_spec, __pyx_mstate->__pyx_MemviewEnum_type) < 0) __PYX_ERR(1, 299, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_MemviewEnum_type) < 0) __PYX_ERR(1, 299, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_MemviewEnum_type->tp_dictoffset && __pyx_mstate->__pyx_MemviewEnum_type->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_MemviewEnum_type->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_MemviewEnum_type) < 0) __PYX_ERR(1, 299, __pyx_L1_error)
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  __pyx_vtable_memoryview._get_base = (PyObject *(*)(struct __pyx_memoryview_obj *))__pyx_memoryview__get_base;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_memoryview_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_memoryview_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_memoryview_type)) __PYX_ERR(1, 334, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_mstate->__pyx_memoryview_type->tp_as_buffer = &__pyx_tp_as_buffer_memoryview;
  if (!__pyx_mstate->__pyx_memoryview_type->tp_as_buffer->bf_releasebuffer && __pyx_mstate->__pyx_memoryview_type->tp_base->tp_as_buffer && __pyx_mstate->__pyx_memoryview_type->tp_base->tp_as_buffer->bf_releasebuffer) {
    __pyx_mstate->__pyx_memoryview_type->tp_as_buffer->bf_releasebuffer = __pyx_mstate->__pyx_memoryview_type->tp_base->tp_as_buffer->bf_releasebuffer;
  }
  #elif defined(Py_bf_getbuffer) && defined(Py_bf_releasebuffer)
  /* PY_VERSION_HEX >= 0x03090000 || Py_LIMITED_API >= 0x030B0000 */
  #elif defined(_MSC_VER)
  #pragma message ("The buffer protocol is not supported in the Limited C-API < 3.11.")
  #else
  #warning "The buffer protocol is not supported in the Limited C-API < 3.11."
  #endif
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_memoryview_spec, __pyx_mstate->__pyx_memoryview_type) < 0) __PYX_ERR(1, 334, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_memoryview_type) < 0) __PYX_ERR(1, 334, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_memoryview_type->tp_dictoffset && __pyx_mstate->__pyx_memoryview_type->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_memoryview_type->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_memoryview_type, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(1, 334, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_memoryview_type) < 0) __PYX_ERR(1, 334, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_memoryview_type) < 0) __PYX_ERR(1, 334, __pyx_L1_error)
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_vtable__memoryviewslice.__pyx_base._get_base = (PyObject *(*)(struct __pyx_memoryview_obj *))__pyx_memoryviewslice__get_base;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_mstate_global->__pyx_memoryview_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_mstate->__pyx_memoryviewslice_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_memoryviewslice_spec, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_mstate->__pyx_memoryviewslice_type)) __PYX_ERR(1, 950, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_memoryviewslice_spec, __pyx_mstate->__pyx_memoryviewslice_type) < 0) __PYX_ERR(1, 950, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_mstate_global->__pyx_memoryviewslice_type->tp_base = __pyx_mstate_global->__pyx_memoryview_type;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_memoryviewslice_type) < 0) __PYX_ERR(1, 950, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_memoryviewslice_type->tp_dictoffset && __pyx_mstate->__pyx_memoryviewslice_type->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_memoryviewslice_type->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_memoryviewslice_type, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(1, 950, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_memoryviewslice_type) < 0) __PYX_ERR(1, 950, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_memoryviewslice_type) < 0) __PYX_ERR(1, 950, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_1_2(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  0, 0,
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_7cpython_4type_type) __PYX_ERR(5, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_5numpy_dtype = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "dtype",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyArray_Descr),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyArray_Descr),
  #else
  sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyArray_Descr),
  #endif
  __Pyx_ImportType_CheckSize_Ignore_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 202, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_flatiter = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "flatiter",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyArrayIterObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyArrayIterObject),
  #else
  sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyArrayIterObject),
  #endif
  __Pyx_ImportType_CheckSize_Ignore_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 225, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_broadcast = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "broadcast",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyArrayMultiIterObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyArrayMultiIterObject),
  #else
  sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyArrayMultiIterObject),
  #endif
  __Pyx_ImportType_CheckSize_Ignore_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 229, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_ndarray = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "ndarray",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyArrayObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyArrayObject),
  #else
  sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyArrayObject),
  #endif
  __Pyx_ImportType_CheckSize_Ignore_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 238, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_generic = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "generic",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_generic) __PYX_ERR(2, 809, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_number = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "number",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_number) __PYX_ERR(2, 811, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_integer = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "integer",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_integer) __PYX_ERR(2, 813, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "signedinteger",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 815, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "unsignedinteger",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 817, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_inexact = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "inexact",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 819, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_floating = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "floating",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_floating) __PYX_ERR(2, 821, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "complexfloating",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 823, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_flexible = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "flexible",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 825, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_character = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "character",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #else
  sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_character) __PYX_ERR(2, 827, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_5numpy_ufunc = __Pyx_ImportType_3_1_2(__pyx_t_1, "numpy", "ufunc",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyUFuncObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyUFuncObject),
  #else
  sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(PyUFuncObject),
  #endif
  __Pyx_ImportType_CheckSize_Ignore_3_1_2); if (!__pyx_mstate->__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.geometry.selection_routines"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.selection_routines", "SelectorObject",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject) __PYX_ERR(6, 25, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_18selection_routines_SelectorObject = (struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject); if (unlikely(!__pyx_vtabptr_2yt_8geometry_18selection_routines_SelectorObject)) __PYX_ERR(6, 25, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.selection_routines", "AlwaysSelector",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_AlwaysSelector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_18selection_routines_AlwaysSelector),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_AlwaysSelector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_18selection_routines_AlwaysSelector),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_AlwaysSelector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_18selection_routines_AlwaysSelector),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector) __PYX_ERR(6, 77, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_18selection_routines_AlwaysSelector = (struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_AlwaysSelector*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector); if (unlikely(!__pyx_vtabptr_2yt_8geometry_18selection_routines_AlwaysSelector)) __PYX_ERR(6, 77, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_18selection_routines_OctreeSubsetSelector = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.selection_routines", "OctreeSubsetSelector",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_OctreeSubsetSelector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_18selection_routines_OctreeSubsetSelector),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_OctreeSubsetSelector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_18selection_routines_OctreeSubsetSelector),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_OctreeSubsetSelector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_18selection_routines_OctreeSubsetSelector),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_18selection_routines_OctreeSubsetSelector) __PYX_ERR(6, 80, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_18selection_routines_OctreeSubsetSelector = (struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_OctreeSubsetSelector*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_18selection_routines_OctreeSubsetSelector); if (unlikely(!__pyx_vtabptr_2yt_8geometry_18selection_routines_OctreeSubsetSelector)) __PYX_ERR(6, 80, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_18selection_routines_BooleanSelector = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.selection_routines", "BooleanSelector",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_BooleanSelector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_18selection_routines_BooleanSelector),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_BooleanSelector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_18selection_routines_BooleanSelector),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_BooleanSelector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_18selection_routines_BooleanSelector),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_18selection_routines_BooleanSelector) __PYX_ERR(6, 84, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_18selection_routines_BooleanSelector = (struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_BooleanSelector*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_18selection_routines_BooleanSelector); if (unlikely(!__pyx_vtabptr_2yt_8geometry_18selection_routines_BooleanSelector)) __PYX_ERR(6, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.utilities.lib.allocation_container"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_2yt_9utilities_3lib_20allocation_container_ObjectPool = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.utilities.lib.allocation_container", "ObjectPool",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool),
  #else
  sizeof(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_9utilities_3lib_20allocation_container_ObjectPool) __PYX_ERR(7, 20, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_20allocation_container_ObjectPool = (struct __pyx_vtabstruct_2yt_9utilities_3lib_20allocation_container_ObjectPool*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_9utilities_3lib_20allocation_container_ObjectPool); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_20allocation_container_ObjectPool)) __PYX_ERR(7, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.geometry.oct_container"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_2yt_8geometry_13oct_container_OctObjectPool = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_container", "OctObjectPool",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_13oct_container_OctObjectPool) __PYX_ERR(8, 46, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_13oct_container_OctObjectPool = (struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctObjectPool*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_13oct_container_OctObjectPool); if (unlikely(!__pyx_vtabptr_2yt_8geometry_13oct_container_OctObjectPool)) __PYX_ERR(8, 46, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_13oct_container_RAMSESOctreeContainer = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_container", "RAMSESOctreeContainer",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_RAMSESOctreeContainer), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_13oct_container_RAMSESOctreeContainer),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_RAMSESOctreeContainer), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_13oct_container_RAMSESOctreeContainer),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_RAMSESOctreeContainer), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_13oct_container_RAMSESOctreeContainer),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_13oct_container_RAMSESOctreeContainer) __PYX_ERR(8, 93, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_13oct_container_RAMSESOctreeContainer = (struct __pyx_vtabstruct_2yt_8geometry_13oct_container_RAMSESOctreeContainer*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_13oct_container_RAMSESOctreeContainer); if (unlikely(!__pyx_vtabptr_2yt_8geometry_13oct_container_RAMSESOctreeContainer)) __PYX_ERR(8, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.geometry.oct_visitors"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_OctVisitor = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "OctVisitor",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_OctVisitor) __PYX_ERR(9, 33, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_OctVisitor = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_OctVisitor); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_OctVisitor)) __PYX_ERR(9, 33, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalOcts = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "CountTotalOcts",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalOcts),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalOcts),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalOcts),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalOcts) __PYX_ERR(9, 59, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_CountTotalOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountTotalOcts*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalOcts); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_CountTotalOcts)) __PYX_ERR(9, 59, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalCells = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "CountTotalCells",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalCells), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalCells),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalCells), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalCells),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalCells), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalCells),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalCells) __PYX_ERR(9, 62, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_CountTotalCells = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountTotalCells*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalCells); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_CountTotalCells)) __PYX_ERR(9, 62, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_MarkOcts = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "MarkOcts",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MarkOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_MarkOcts),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MarkOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_MarkOcts),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MarkOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_MarkOcts),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_MarkOcts) __PYX_ERR(9, 65, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_MarkOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MarkOcts*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_MarkOcts); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_MarkOcts)) __PYX_ERR(9, 65, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_MaskOcts = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "MaskOcts",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskOcts),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskOcts),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskOcts),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_MaskOcts) __PYX_ERR(9, 69, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_MaskOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MaskOcts*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_MaskOcts); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_MaskOcts)) __PYX_ERR(9, 69, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_IndexOcts = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "IndexOcts",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexOcts),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexOcts),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexOcts),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_IndexOcts) __PYX_ERR(9, 72, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_IndexOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IndexOcts*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_IndexOcts); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_IndexOcts)) __PYX_ERR(9, 72, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_MaskedIndexOcts = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "MaskedIndexOcts",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_MaskedIndexOcts) __PYX_ERR(9, 75, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_MaskedIndexOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MaskedIndexOcts*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_MaskedIndexOcts); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_MaskedIndexOcts)) __PYX_ERR(9, 75, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_IndexMaskMapOcts = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "IndexMaskMapOcts",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_IndexMaskMapOcts) __PYX_ERR(9, 79, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_IndexMaskMapOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IndexMaskMapOcts*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_IndexMaskMapOcts); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_IndexMaskMapOcts)) __PYX_ERR(9, 79, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_ICoordsOcts = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "ICoordsOcts",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_ICoordsOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_ICoordsOcts),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_ICoordsOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_ICoordsOcts),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_ICoordsOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_ICoordsOcts),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_ICoordsOcts) __PYX_ERR(9, 85, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_ICoordsOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_ICoordsOcts*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_ICoordsOcts); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_ICoordsOcts)) __PYX_ERR(9, 85, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_IResOcts = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "IResOcts",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IResOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_IResOcts),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IResOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_IResOcts),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IResOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_IResOcts),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_IResOcts) __PYX_ERR(9, 88, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_IResOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IResOcts*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_IResOcts); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_IResOcts)) __PYX_ERR(9, 88, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_FCoordsOcts = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "FCoordsOcts",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FCoordsOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_FCoordsOcts),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FCoordsOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_FCoordsOcts),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FCoordsOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_FCoordsOcts),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_FCoordsOcts) __PYX_ERR(9, 91, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_FCoordsOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FCoordsOcts*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_FCoordsOcts); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_FCoordsOcts)) __PYX_ERR(9, 91, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_FWidthOcts = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "FWidthOcts",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FWidthOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_FWidthOcts),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FWidthOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_FWidthOcts),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FWidthOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_FWidthOcts),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_FWidthOcts) __PYX_ERR(9, 94, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_FWidthOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FWidthOcts*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_FWidthOcts); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_FWidthOcts)) __PYX_ERR(9, 94, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayI64 = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "CopyArrayI64",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayI64), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayI64),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayI64), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayI64),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayI64), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayI64),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayI64) __PYX_ERR(9, 97, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyArrayI64 = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyArrayI64*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayI64); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyArrayI64)) __PYX_ERR(9, 97, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayF64 = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "CopyArrayF64",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayF64), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayF64),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayF64), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayF64),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayF64), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayF64),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayF64) __PYX_ERR(9, 101, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyArrayF64 = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyArrayF64*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayF64); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyArrayF64)) __PYX_ERR(9, 101, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8 = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "CopyFileIndArrayI8",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8) __PYX_ERR(9, 105, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8 = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8)) __PYX_ERR(9, 105, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_IdentifyOcts = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "IdentifyOcts",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IdentifyOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_IdentifyOcts),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IdentifyOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_IdentifyOcts),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IdentifyOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_IdentifyOcts),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_IdentifyOcts) __PYX_ERR(9, 110, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_IdentifyOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IdentifyOcts*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_IdentifyOcts); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_IdentifyOcts)) __PYX_ERR(9, 110, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_AssignDomainInd = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "AssignDomainInd",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_AssignDomainInd) __PYX_ERR(9, 113, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_AssignDomainInd = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_AssignDomainInd*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_AssignDomainInd); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_AssignDomainInd)) __PYX_ERR(9, 113, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesO = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "FillFileIndicesO",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesO), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesO),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesO), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesO),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesO), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesO),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesO) __PYX_ERR(9, 116, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_FillFileIndicesO = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FillFileIndicesO*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesO); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_FillFileIndicesO)) __PYX_ERR(9, 116, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesR = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "FillFileIndicesR",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesR), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesR),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesR), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesR),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesR), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesR),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesR) __PYX_ERR(9, 121, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_FillFileIndicesR = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FillFileIndicesR*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesR); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_FillFileIndicesR)) __PYX_ERR(9, 121, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CountByDomain = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "CountByDomain",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountByDomain), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountByDomain),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountByDomain), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountByDomain),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountByDomain), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountByDomain),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CountByDomain) __PYX_ERR(9, 126, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_CountByDomain = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountByDomain*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_CountByDomain); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_CountByDomain)) __PYX_ERR(9, 126, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_StoreOctree = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "StoreOctree",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreOctree), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreOctree),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreOctree), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreOctree),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreOctree), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreOctree),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_StoreOctree) __PYX_ERR(9, 129, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_StoreOctree = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_StoreOctree*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_StoreOctree); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_StoreOctree)) __PYX_ERR(9, 129, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_LoadOctree = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "LoadOctree",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_LoadOctree), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_LoadOctree),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_LoadOctree), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_LoadOctree),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_LoadOctree), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_LoadOctree),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_LoadOctree) __PYX_ERR(9, 132, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_LoadOctree = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_LoadOctree*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_LoadOctree); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_LoadOctree)) __PYX_ERR(9, 132, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_MortonIndexOcts = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "MortonIndexOcts",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MortonIndexOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_MortonIndexOcts),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MortonIndexOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_MortonIndexOcts),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MortonIndexOcts), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_MortonIndexOcts),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_MortonIndexOcts) __PYX_ERR(9, 139, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_MortonIndexOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MortonIndexOcts*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_MortonIndexOcts); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_MortonIndexOcts)) __PYX_ERR(9, 139, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_StoreIndex = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "StoreIndex",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreIndex), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreIndex),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreIndex), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreIndex),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreIndex), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreIndex),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_StoreIndex) __PYX_ERR(9, 150, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_StoreIndex = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_StoreIndex*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_StoreIndex); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_StoreIndex)) __PYX_ERR(9, 150, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "BaseNeighbourVisitor",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor) __PYX_ERR(9, 154, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor)) __PYX_ERR(9, 154, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "NeighbourCellIndexVisitor",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor) __PYX_ERR(9, 170, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor)) __PYX_ERR(9, 170, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellVisitor = __Pyx_ImportType_3_1_2(__pyx_t_1, "yt.geometry.oct_visitors", "NeighbourCellVisitor",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellVisitor), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellVisitor),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellVisitor), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellVisitor),
  #else
  sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellVisitor), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellVisitor),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellVisitor) __PYX_ERR(9, 174, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_NeighbourCellVisitor = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_NeighbourCellVisitor*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellVisitor); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_NeighbourCellVisitor)) __PYX_ERR(9, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("ewah_bool_utils.ewah_bool_wrap"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks = __Pyx_ImportType_3_1_2(__pyx_t_1, "ewah_bool_utils.ewah_bool_wrap", "FileBitmasks",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks),
  #else
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks) __PYX_ERR(10, 16, __pyx_L1_error)
  __pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks = (struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks); if (unlikely(!__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_FileBitmasks)) __PYX_ERR(10, 16, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection = __Pyx_ImportType_3_1_2(__pyx_t_1, "ewah_bool_utils.ewah_bool_wrap", "BoolArrayCollection",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection),
  #else
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection) __PYX_ERR(10, 58, __pyx_L1_error)
  __pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection = (struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection); if (unlikely(!__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollection)) __PYX_ERR(10, 58, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed = __Pyx_ImportType_3_1_2(__pyx_t_1, "ewah_bool_utils.ewah_bool_wrap", "BoolArrayCollectionUncompressed",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed),
  #else
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed) __PYX_ERR(10, 98, __pyx_L1_error)
  __pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed = (struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed); if (unlikely(!__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_BoolArrayCollectionUncompressed)) __PYX_ERR(10, 98, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet = __Pyx_ImportType_3_1_2(__pyx_t_1, "ewah_bool_utils.ewah_bool_wrap", "SparseUnorderedBitmaskSet",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet),
  #else
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet) __PYX_ERR(10, 123, __pyx_L1_error)
  __pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet = (struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet); if (unlikely(!__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskSet)) __PYX_ERR(10, 123, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector = __Pyx_ImportType_3_1_2(__pyx_t_1, "ewah_bool_utils.ewah_bool_wrap", "SparseUnorderedBitmaskVector",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector),
  #else
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector) __PYX_ERR(10, 132, __pyx_L1_error)
  __pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector = (struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector); if (unlikely(!__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedBitmaskVector)) __PYX_ERR(10, 132, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet = __Pyx_ImportType_3_1_2(__pyx_t_1, "ewah_bool_utils.ewah_bool_wrap", "SparseUnorderedRefinedBitmaskSet",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet),
  #else
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet) __PYX_ERR(10, 144, __pyx_L1_error)
  __pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet = (struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet); if (unlikely(!__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskSet)) __PYX_ERR(10, 144, __pyx_L1_error)
  __pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector = __Pyx_ImportType_3_1_2(__pyx_t_1, "ewah_bool_utils.ewah_bool_wrap", "SparseUnorderedRefinedBitmaskVector",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector),
  #else
  sizeof(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector), __PYX_GET_STRUCT_ALIGNMENT_3_1_2(struct __pyx_obj_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_2); if (!__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector) __PYX_ERR(10, 153, __pyx_L1_error)
  __pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector = (struct __pyx_vtabstruct_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector*)__Pyx_GetVtable(__pyx_mstate->__pyx_ptype_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector); if (unlikely(!__pyx_vtabptr_15ewah_bool_utils_14ewah_bool_wrap_SparseUnorderedRefinedBitmaskVector)) __PYX_ERR(10, 153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("yt.geometry.oct_container"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr_3_1_2(__pyx_t_1, "ORDER_MAX", (void **)&__pyx_vp_2yt_8geometry_13oct_container_ORDER_MAX, "int") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("yt.geometry.grid_visitors"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_1_2(__pyx_t_1, "check_child_masked", (void (**)(void))&__pyx_f_2yt_8geometry_13grid_visitors_check_child_masked, "__pyx_t_5numpy_uint8_t (struct __pyx_t_2yt_8geometry_13grid_visitors_GridVisitorData *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.utilities.lib.geometry_utils"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_1_2(__pyx_t_1, "morton_neighbors_coarse", (void (**)(void))&__pyx_f_2yt_9utilities_3lib_14geometry_utils_morton_neighbors_coarse, "__pyx_t_5numpy_uint32_t (__pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, int *, __pyx_t_5numpy_uint32_t, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_1_2(__pyx_t_1, "morton_neighbors_refined", (void (**)(void))&__pyx_f_2yt_9utilities_3lib_14geometry_utils_morton_neighbors_refined, "__pyx_t_5numpy_uint32_t (__pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, int *, __pyx_t_5numpy_uint32_t, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.utilities.lib.fnv_hash"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_1_2(__pyx_t_1, "c_fnv_hash", (void (**)(void))&__pyx_f_2yt_9utilities_3lib_8fnv_hash_c_fnv_hash, "__pyx_t_5numpy_int64_t (__Pyx_memviewslice)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_particle_oct_container(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_particle_oct_container},
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  {Py_mod_gil, Py_MOD_GIL_USED},
  #endif
  #if PY_VERSION_HEX >= 0x030C0000 && CYTHON_USE_MODULE_STATE
  {Py_mod_multiple_interpreters, Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED},
  #endif
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "particle_oct_container",
      __pyx_k_Oct_container_tuned_for_Particl, /* m_doc */
    #if CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstatetype), /* m_size */
    #else
      (CYTHON_PEP489_MULTI_PHASE_INIT) ? 0 : -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif

/* PyModInitFuncType */
#ifndef CYTHON_NO_PYINIT_EXPORT
  #define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#else
  #ifdef __cplusplus
  #define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
  #else
  #define __Pyx_PyMODINIT_FUNC PyObject *
  #endif
#endif

__Pyx_PyMODINIT_FUNC PyInit_particle_oct_container(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_particle_oct_container(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
/* ModuleCreationPEP489 */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000
static PY_INT64_T __Pyx_GetCurrentInterpreterId(void) {
    {
        PyObject *module = PyImport_ImportModule("_interpreters"); // 3.13+ I think
        if (!module) {
            PyErr_Clear(); // just try the 3.8-3.12 version
            module = PyImport_ImportModule("_xxsubinterpreters");
            if (!module) goto bad;
        }
        PyObject *current = PyObject_CallMethod(module, "get_current", NULL);
        Py_DECREF(module);
        if (!current) goto bad;
        if (PyTuple_Check(current)) {
            PyObject *new_current = PySequence_GetItem(current, 0);
            Py_DECREF(current);
            current = new_current;
            if (!new_current) goto bad;
        }
        long long as_c_int = PyLong_AsLongLong(current);
        Py_DECREF(current);
        return as_c_int;
    }
  bad:
    PySys_WriteStderr("__Pyx_GetCurrentInterpreterId failed. Try setting the C define CYTHON_PEP489_MULTI_PHASE_INIT=0\n");
    return -1;
}
#endif
#if !CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    static PY_INT64_T main_interpreter_id = -1;
#if CYTHON_COMPILING_IN_GRAAL
    PY_INT64_T current_id = PyInterpreterState_GetIDFromThreadState(PyThreadState_Get());
#elif CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX >= 0x03090000
    PY_INT64_T current_id = PyInterpreterState_GetID(PyInterpreterState_Get());
#elif CYTHON_COMPILING_IN_LIMITED_API
    PY_INT64_T current_id = __Pyx_GetCurrentInterpreterId();
#else
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
#endif
    if (unlikely(current_id == -1)) {
        return -1;
    }
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return 0;
    } else if (unlikely(main_interpreter_id != current_id)) {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#endif
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    #if !CYTHON_USE_MODULE_STATE
    if (__Pyx_check_single_interpreter())
        return NULL;
    #endif
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_particle_oct_container(PyObject *__pyx_pyinit_module)
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  __pyx_mstatetype *__pyx_mstate = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  static PyThread_type_lock __pyx_t_8[8];
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'particle_oct_container' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #else
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_t_1 = __pyx_pyinit_module;
  Py_INCREF(__pyx_t_1);
  #else
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #if CYTHON_USE_MODULE_STATE
  {
    int add_module_result = __Pyx_State_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "particle_oct_container" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = __pyx_t_1;
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  PyUnstable_Module_SetGIL(__pyx_m, Py_MOD_GIL_USED);
  #endif
  __pyx_mstate = __pyx_mstate_global;
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_mstate->__pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_mstate->__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_mstate->__pyx_d);
  __pyx_mstate->__pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_mstate->__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_cython_runtime = __Pyx_PyImport_AddModuleRef("cython_runtime"); if (unlikely(!__pyx_mstate->__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_mstate->__pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /* ImportRefnannyAPI */
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif

__Pyx_RefNannySetupContext("PyInit_particle_oct_container", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_mstate->__pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_mstate->__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if 0 || defined(__Pyx_CyFunction_USED) || defined(__Pyx_FusedFunction_USED) || defined(__Pyx_Coroutine_USED) || defined(__Pyx_Generator_USED) || defined(__Pyx_AsyncGen_USED)
  if (__pyx_CommonTypesMetaclass_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  if (__pyx_module_is_main_yt__geometry__particle_oct_container) {
    if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_name_2, __pyx_mstate_global->__pyx_n_u_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "yt.geometry.particle_oct_container")) {
      if (unlikely((PyDict_SetItemString(modules, "yt.geometry.particle_oct_container", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_CreateCodeObjects(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code(__pyx_mstate);
  (void)__Pyx_modinit_variable_export_code(__pyx_mstate);
  (void)__Pyx_modinit_function_export_code(__pyx_mstate);
  if (unlikely((__Pyx_modinit_type_init_code(__pyx_mstate) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code(__pyx_mstate) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_variable_import_code(__pyx_mstate) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_function_import_code(__pyx_mstate) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/

  /* "View.MemoryView":100
 * 
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:             # <<<<<<<<<<<<<<
 *     __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 * except:
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "View.MemoryView":101
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:
 *     __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence             # <<<<<<<<<<<<<<
 * except:
 * 
*/
      __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_builtin___import__);
      __pyx_t_6 = __pyx_builtin___import__; 
      __pyx_t_7 = 1;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_mstate_global->__pyx_kp_u_collections_abc};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 101, __pyx_L2_error)
        __Pyx_GOTREF(__pyx_t_4);
      }
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_abc); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 101, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_Sequence); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 101, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XGOTREF(__pyx_collections_abc_Sequence);
      __Pyx_DECREF_SET(__pyx_collections_abc_Sequence, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_t_4 = 0;

      /* "View.MemoryView":100
 * 
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:             # <<<<<<<<<<<<<<
 *     __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 * except:
*/
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "View.MemoryView":102
 * try:
 *     __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 * except:             # <<<<<<<<<<<<<<
 * 
 *     __pyx_collections_abc_Sequence = None
*/
    /*except:*/ {
      __Pyx_AddTraceback("View.MemoryView", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(1, 102, __pyx_L4_except_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);

      /* "View.MemoryView":104
 * except:
 * 
 *     __pyx_collections_abc_Sequence = None             # <<<<<<<<<<<<<<
 * 
 * 
*/
      __Pyx_INCREF(Py_None);
      __Pyx_XGOTREF(__pyx_collections_abc_Sequence);
      __Pyx_DECREF_SET(__pyx_collections_abc_Sequence, Py_None);
      __Pyx_GIVEREF(Py_None);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L3_exception_handled;
    }

    /* "View.MemoryView":100
 * 
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:             # <<<<<<<<<<<<<<
 *     __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 * except:
*/
    __pyx_L4_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L7_try_end:;
  }

  /* "View.MemoryView":239
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "View.MemoryView":240
 * 
 *     try:
 *         count = __pyx_collections_abc_Sequence.count             # <<<<<<<<<<<<<<
 *         index = __pyx_collections_abc_Sequence.index
 *     except:
*/
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_mstate_global->__pyx_n_u_count); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 240, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_array_type, __pyx_mstate_global->__pyx_n_u_count, __pyx_t_5) < 0) __PYX_ERR(1, 240, __pyx_L10_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "View.MemoryView":241
 *     try:
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index             # <<<<<<<<<<<<<<
 *     except:
 *         pass
*/
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_mstate_global->__pyx_n_u_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 241, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_array_type, __pyx_mstate_global->__pyx_n_u_index, __pyx_t_5) < 0) __PYX_ERR(1, 241, __pyx_L10_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "View.MemoryView":239
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
*/
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L15_try_end;
    __pyx_L10_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "View.MemoryView":242
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 *     except:             # <<<<<<<<<<<<<<
 *         pass
 * 
*/
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L11_exception_handled;
    }
    __pyx_L11_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L15_try_end:;
  }

  /* "View.MemoryView":307
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
*/
  __pyx_t_6 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_MemviewEnum_type);
  __pyx_t_4 = ((PyObject *)__pyx_mstate_global->__pyx_MemviewEnum_type); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_strided_and_direct_or_indirect};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 307, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_5);
  }
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "View.MemoryView":308
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
*/
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_MemviewEnum_type);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_MemviewEnum_type); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_strided_and_direct};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 308, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_5);
  }
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "View.MemoryView":309
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_t_6 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_MemviewEnum_type);
  __pyx_t_4 = ((PyObject *)__pyx_mstate_global->__pyx_MemviewEnum_type); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_strided_and_indirect};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 309, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_5);
  }
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "View.MemoryView":312
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
*/
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_MemviewEnum_type);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_MemviewEnum_type); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_kp_u_contiguous_and_direct};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 312, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_5);
  }
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "View.MemoryView":313
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_t_6 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_MemviewEnum_type);
  __pyx_t_4 = ((PyObject *)__pyx_mstate_global->__pyx_MemviewEnum_type); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_mstate_global->__pyx_kp_u_contiguous_and_indirect};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 313, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_5);
  }
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, ((PyObject *)__pyx_t_5));
  __Pyx_GIVEREF((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "View.MemoryView":321
 * 
 * 
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[8] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
*/
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":322
 * 
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[8] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
*/
  __pyx_t_8[0] = PyThread_allocate_lock();
  __pyx_t_8[1] = PyThread_allocate_lock();
  __pyx_t_8[2] = PyThread_allocate_lock();
  __pyx_t_8[3] = PyThread_allocate_lock();
  __pyx_t_8[4] = PyThread_allocate_lock();
  __pyx_t_8[5] = PyThread_allocate_lock();
  __pyx_t_8[6] = PyThread_allocate_lock();
  __pyx_t_8[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_8, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":982
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "View.MemoryView":983
 * 
 *     try:
 *         count = __pyx_collections_abc_Sequence.count             # <<<<<<<<<<<<<<
 *         index = __pyx_collections_abc_Sequence.index
 *     except:
*/
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_mstate_global->__pyx_n_u_count); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 983, __pyx_L18_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_memoryviewslice_type, __pyx_mstate_global->__pyx_n_u_count, __pyx_t_5) < 0) __PYX_ERR(1, 983, __pyx_L18_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "View.MemoryView":984
 *     try:
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index             # <<<<<<<<<<<<<<
 *     except:
 *         pass
*/
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_mstate_global->__pyx_n_u_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 984, __pyx_L18_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_memoryviewslice_type, __pyx_mstate_global->__pyx_n_u_index, __pyx_t_5) < 0) __PYX_ERR(1, 984, __pyx_L18_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "View.MemoryView":982
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
*/
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L23_try_end;
    __pyx_L18_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "View.MemoryView":985
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 *     except:             # <<<<<<<<<<<<<<
 *         pass
 * 
*/
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L19_exception_handled;
    }
    __pyx_L19_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L23_try_end:;
  }

  /* "View.MemoryView":988
 *         pass
 * 
 * try:             # <<<<<<<<<<<<<<
 *     if __pyx_collections_abc_Sequence:
 * 
*/
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "View.MemoryView":989
 * 
 * try:
 *     if __pyx_collections_abc_Sequence:             # <<<<<<<<<<<<<<
 * 
 * 
*/
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_collections_abc_Sequence); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(1, 989, __pyx_L26_error)
      if (__pyx_t_9) {

        /* "View.MemoryView":993
 * 
 * 
 *         __pyx_collections_abc_Sequence.register(_memoryviewslice)             # <<<<<<<<<<<<<<
 *         __pyx_collections_abc_Sequence.register(array)
 * except:
*/
        __pyx_t_4 = __pyx_collections_abc_Sequence;
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_7 = 0;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, ((PyObject *)__pyx_mstate_global->__pyx_memoryviewslice_type)};
          __pyx_t_5 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_register, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 993, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "View.MemoryView":994
 * 
 *         __pyx_collections_abc_Sequence.register(_memoryviewslice)
 *         __pyx_collections_abc_Sequence.register(array)             # <<<<<<<<<<<<<<
 * except:
 *     pass  # ignore failure, it's a minor issue
*/
        __pyx_t_4 = __pyx_collections_abc_Sequence;
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_7 = 0;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, ((PyObject *)__pyx_mstate_global->__pyx_array_type)};
          __pyx_t_5 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_register, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 994, __pyx_L26_error)
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "View.MemoryView":989
 * 
 * try:
 *     if __pyx_collections_abc_Sequence:             # <<<<<<<<<<<<<<
 * 
 * 
*/
      }

      /* "View.MemoryView":988
 *         pass
 * 
 * try:             # <<<<<<<<<<<<<<
 *     if __pyx_collections_abc_Sequence:
 * 
*/
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L31_try_end;
    __pyx_L26_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "View.MemoryView":995
 *         __pyx_collections_abc_Sequence.register(_memoryviewslice)
 *         __pyx_collections_abc_Sequence.register(array)
 * except:             # <<<<<<<<<<<<<<
 *     pass  # ignore failure, it's a minor issue
 * 
*/
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L27_exception_handled;
    }
    __pyx_L27_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L31_try_end:;
  }

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
*/
  __pyx_t_5 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_mstate_global->__pyx_n_u_View_MemoryView); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_pyx_unpickle_Enum, __pyx_t_5) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "yt/geometry/particle_oct_container.pyx":24
 * from libcpp.vector cimport vector
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * cimport cython
*/
  __pyx_t_5 = __Pyx_ImportDottedModuleRelFirst(__pyx_mstate_global->__pyx_n_u_numpy, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_np, __pyx_t_5) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "yt/geometry/particle_oct_container.pyx":55
 * from .selection_routines cimport AlwaysSelector, SelectorObject
 * 
 * from yt.funcs import get_pbar             # <<<<<<<<<<<<<<
 * 
 * from ewah_bool_utils.ewah_bool_wrap cimport BoolArrayCollection
*/
  __pyx_t_5 = __Pyx_PyList_Pack(1, __pyx_mstate_global->__pyx_n_u_get_pbar); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_yt_funcs, __pyx_t_5, -1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_get_pbar); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_get_pbar, __pyx_t_5) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":59
 * from ewah_bool_utils.ewah_bool_wrap cimport BoolArrayCollection
 * 
 * import os             # <<<<<<<<<<<<<<
 * 
 * from ewah_bool_utils.ewah_bool_wrap cimport (
*/
  __pyx_t_4 = __Pyx_ImportDottedModuleRelFirst(__pyx_mstate_global->__pyx_n_u_os, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_os, __pyx_t_4) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":68
 * 
 * 
 * _bitmask_version = np.uint64(5)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __pyx_t_5 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_uint64); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_mstate_global->__pyx_int_5};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_bitmask_version, __pyx_t_4) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":81
 *     cdef public int n_ref
 * 
 *     def allocate_root(self):             # <<<<<<<<<<<<<<
 *         cdef int i, j, k
 *         cdef Oct *cur
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_1allocate_root, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleOctreeContainer_allocate, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[1])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, __pyx_mstate_global->__pyx_n_u_allocate_root, __pyx_t_4) < 0) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":117
 *         free(o)
 * 
 *     def clear_fileind(self):             # <<<<<<<<<<<<<<
 *         cdef int i, j, k
 *         for i in range(self.nn[0]):
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_5clear_fileind, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleOctreeContainer_clear_fi, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[2])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, __pyx_mstate_global->__pyx_n_u_clear_fileind, __pyx_t_4) < 0) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":145
 *             yield (o.file_ind, o.domain_ind, o.domain)
 * 
 *     def allocate_domains(self, domain_counts):             # <<<<<<<<<<<<<<
 *         pass
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_10allocate_domains, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleOctreeContainer_allocate_2, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[3])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, __pyx_mstate_global->__pyx_n_u_allocate_domains, __pyx_t_4) < 0) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":148
 *         pass
 * 
 *     def finalize(self, int domain_id = 0):             # <<<<<<<<<<<<<<
 *         #This will sort the octs in the oct list
 *         #so that domains appear consecutively
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_12finalize, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleOctreeContainer_finalize, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[4])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[5]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, __pyx_mstate_global->__pyx_n_u_finalize, __pyx_t_4) < 0) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":202
 *     @cython.cdivision(True)
 *     def add(self, np.ndarray[np.uint64_t, ndim=1] indices,
 *             np.uint8_t order = ORDER_MAX):             # <<<<<<<<<<<<<<
 *         #Add this particle to the root oct
 *         #Then if that oct has children, add it to them recursively
*/
  __pyx_mstate_global->__pyx_k__12 = __pyx_v_2yt_8geometry_13oct_container_ORDER_MAX;

  /* "yt/geometry/particle_oct_container.pyx":198
 *         return my_oct
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_PyLong_From_int(__pyx_v_2yt_8geometry_13oct_container_ORDER_MAX); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = PyTuple_Pack(1, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_14add, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleOctreeContainer_add, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[5])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_10);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, __pyx_mstate_global->__pyx_n_u_add, __pyx_t_4) < 0) __PYX_ERR(0, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":292
 *                 o.file_ind += 1 # Says how many morton indices are in this octant?
 * 
 *     def recursively_count(self):             # <<<<<<<<<<<<<<
 *         #Visit every cell, accumulate the # of cells per level
 *         cdef int i, j, k
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_16recursively_count, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleOctreeContainer_recursiv, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[6])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, __pyx_mstate_global->__pyx_n_u_recursively_count, __pyx_t_4) < 0) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":322
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
 *     cdef Oct *get_from_index(self, np.uint64_t mi, np.uint8_t order = ORDER_MAX,             # <<<<<<<<<<<<<<
 *                              int max_level = 99):
 *         cdef Oct *cur
*/
  __pyx_mstate_global->__pyx_k__13 = __pyx_v_2yt_8geometry_13oct_container_ORDER_MAX;

  /* "yt/geometry/particle_oct_container.pyx":361
 *         return cur
 * 
 *     def apply_domain(self, int domain_id, BoolArrayCollection mask,             # <<<<<<<<<<<<<<
 *                      int masklevel):
 *         cdef SelectorObject selector = AlwaysSelector(None)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_18apply_domain, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleOctreeContainer_apply_do, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[7])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, __pyx_mstate_global->__pyx_n_u_apply_domain, __pyx_t_4) < 0) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":370
 *         super(ParticleOctreeContainer,self).domain_ind(selector, domain_id = domain_id)
 * 
 *     def domain_ind(self, selector, int domain_id = -1,             # <<<<<<<<<<<<<<
 *                    BoolArrayCollection mask = None, int masklevel = 99):
 *         if mask is None:
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_20domain_ind, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleOctreeContainer_domain_i, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[8])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[6]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleOctreeContainer, __pyx_mstate_global->__pyx_n_u_domain_ind, __pyx_t_4) < 0) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_22__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleOctreeContainer___reduce, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[9])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.dom_offsets,self.oct_list,self.root_mesh cannot be converted to a Python object for pickling"
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_23ParticleOctreeContainer_24__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleOctreeContainer___setsta, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[10])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":413
 *                 _mask_children(mask, cur.children[cind(i,j,k)])
 * 
 * cdef np.uint64_t ONEBIT=1             # <<<<<<<<<<<<<<
 * cdef np.uint64_t FLAG = ~(<np.uint64_t>0)
 * 
*/
  __pyx_v_2yt_8geometry_22particle_oct_container_ONEBIT = 1;

  /* "yt/geometry/particle_oct_container.pyx":414
 * 
 * cdef np.uint64_t ONEBIT=1
 * cdef np.uint64_t FLAG = ~(<np.uint64_t>0)             # <<<<<<<<<<<<<<
 * 
 * cdef class ParticleBitmap:
*/
  __pyx_v_2yt_8geometry_22particle_oct_container_FLAG = (~((__pyx_t_5numpy_uint64_t)0));

  /* "yt/geometry/particle_oct_container.pyx":491
 *         self.hash_value = fnv_hash(hash_data)
 * 
 *     def _bitmask_logicaland(self, ifile, bcoll, out):             # <<<<<<<<<<<<<<
 *         self.bitmasks._logicaland(ifile, bcoll, out)
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_3_bitmask_logicaland, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap__bitmask_logicala, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[11])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_bitmask_logicaland, __pyx_t_4) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":494
 *         self.bitmasks._logicaland(ifile, bcoll, out)
 * 
 *     def _bitmask_intersects(self, ifile, bcoll):             # <<<<<<<<<<<<<<
 *         return self.bitmasks._intersects(ifile, bcoll)
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_5_bitmask_intersects, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap__bitmask_intersec, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[12])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_bitmask_intersects, __pyx_t_4) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":497
 *         return self.bitmasks._intersects(ifile, bcoll)
 * 
 *     def update_mi2(self, np.float64_t characteristic_size,             # <<<<<<<<<<<<<<
 *                    np.uint64_t max_index_order2 = 6):
 *         """
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_7update_mi2, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_update_mi2, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[13])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[7]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_update_mi2, __pyx_t_4) < 0) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":530
 *             self.dds_mi2[i] = self.dds_mi1[i] / (1<<index_order2)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_PyList_Pack(1, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_mstate_global->__pyx_k__14 = __pyx_t_4;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = __pyx_FusedFunction_New(&__pyx_fuse_0__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_79_coarse_index_data_file, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap__coarse_index_dat, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[14])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_10, __pyx_mstate_global->__pyx_empty_tuple);
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_float, __pyx_t_10) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __pyx_FusedFunction_New(&__pyx_fuse_1__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_81_coarse_index_data_file, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap__coarse_index_dat, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[15])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_10, __pyx_mstate_global->__pyx_empty_tuple);
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_double, __pyx_t_10) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __pyx_FusedFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_9_coarse_index_data_file, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap__coarse_index_dat_2, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[16])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_10, __pyx_mstate_global->__pyx_empty_tuple);
  ((__pyx_FusedFunctionObject *) __pyx_t_10)->__signatures__ = __pyx_t_4;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_coarse_index_data_file, __pyx_t_10) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "yt/geometry/particle_oct_container.pyx":640
 *                                             f"max ({msize})")
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_10 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_11_set_coarse_index_data_file, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap__set_coarse_index, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[17])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_set_coarse_index_data_file, __pyx_t_10) < 0) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "yt/geometry/particle_oct_container.pyx":658
 *                 bitmasks._set_coarse(file_id, i)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_10 = __Pyx_PyList_Pack(1, Py_None); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_mstate_global->__pyx_k__17 = __pyx_t_10;
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_4 = __pyx_FusedFunction_New(&__pyx_fuse_0__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_85_refined_index_data_file, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap__refined_index_da, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[18])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[8]);
  if (PyDict_SetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_float, __pyx_t_4) < 0) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_FusedFunction_New(&__pyx_fuse_1__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_87_refined_index_data_file, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap__refined_index_da, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[19])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[8]);
  if (PyDict_SetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_double, __pyx_t_4) < 0) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_FusedFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_13_refined_index_data_file, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap__refined_index_da_2, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[20])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[8]);
  ((__pyx_FusedFunctionObject *) __pyx_t_4)->__signatures__ = __pyx_t_10;
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_10 = 0;
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_refined_index_data_file, __pyx_t_4) < 0) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":918
 *         return refined_set.numberOfOnes() - old_nsub
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_15_set_refined_index_data_file, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap__set_refined_inde, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[21])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_set_refined_index_data_file, __pyx_t_4) < 0) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":940
 *         bitmasks._set_refined_index_array(file_id, nsub_mi, sub_mi1, sub_mi2)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_17find_collisions, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_find_collisions, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[22])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[9]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_find_collisions, __pyx_t_4) < 0) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":949
 *         return cc, rc
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_19find_collisions_coarse, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_find_collisions_c, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[23])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[10]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_find_collisions_coarse, __pyx_t_4) < 0) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":958
 *         return nc, nm
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_21find_uncontaminated, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_find_uncontaminat, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[24])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[11]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_find_uncontaminated, __pyx_t_4) < 0) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":969
 *         return arr
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_23find_contaminated, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_find_contaminated, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[25])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[11]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_find_contaminated, __pyx_t_4) < 0) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":982
 *         return arr, np.where(sfiles)[0].astype('uint32')
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_25find_collisions_refined, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_find_collisions_r, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[26])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[9]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_find_collisions_refined, __pyx_t_4) < 0) __PYX_ERR(0, 982, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":991
 *         return nc, nm
 * 
 *     def get_bitmasks(self):             # <<<<<<<<<<<<<<
 *         return self.bitmasks
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_27get_bitmasks, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_get_bitmasks, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[27])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_get_bitmasks, __pyx_t_4) < 0) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":994
 *         return self.bitmasks
 * 
 *     def iseq_bitmask(self, solf):             # <<<<<<<<<<<<<<
 *         return self.bitmasks._iseq(solf.get_bitmasks())
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_29iseq_bitmask, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_iseq_bitmask, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[28])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_iseq_bitmask, __pyx_t_4) < 0) __PYX_ERR(0, 994, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":997
 *         return self.bitmasks._iseq(solf.get_bitmasks())
 * 
 *     def save_bitmasks(self, fname, max_hsml):             # <<<<<<<<<<<<<<
 *         import h5py
 *         cdef bytes serial_BAC
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_31save_bitmasks, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_save_bitmasks, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[29])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_save_bitmasks, __pyx_t_4) < 0) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1025
 *             grp.create_dataset("collisions", data=np.void(serial_BAC))
 * 
 *     def check_bitmasks(self):             # <<<<<<<<<<<<<<
 *         return self.bitmasks._check()
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_33check_bitmasks, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_check_bitmasks, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[30])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_check_bitmasks, __pyx_t_4) < 0) __PYX_ERR(0, 1025, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1028
 *         return self.bitmasks._check()
 * 
 *     def reset_bitmasks(self):             # <<<<<<<<<<<<<<
 *         self.bitmasks._reset()
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_35reset_bitmasks, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_reset_bitmasks, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[31])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_reset_bitmasks, __pyx_t_4) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1031
 *         self.bitmasks._reset()
 * 
 *     def load_bitmasks(self, fname):             # <<<<<<<<<<<<<<
 *         import h5py
 *         cdef bint read_flag = 1
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_37load_bitmasks, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_load_bitmasks, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[32])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_load_bitmasks, __pyx_t_4) < 0) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1077
 *         return read_flag, max_hsml
 * 
 *     def print_info(self):             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t ifile
 *         for ifile in range(self.nfiles):
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_39print_info, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_print_info, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[33])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_print_info, __pyx_t_4) < 0) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1082
 *             self.bitmasks.print_info(ifile, "File: %03d" % ifile)
 * 
 *     def count_coarse(self, ifile):             # <<<<<<<<<<<<<<
 *         r"""Get the number of coarse cells set for a file."""
 *         return self.bitmasks.count_coarse(ifile)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_41count_coarse, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_count_coarse, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[34])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_count_coarse, __pyx_t_4) < 0) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1086
 *         return self.bitmasks.count_coarse(ifile)
 * 
 *     def count_refined(self, ifile):             # <<<<<<<<<<<<<<
 *         r"""Get the number of cells refined for a file."""
 *         return self.bitmasks.count_refined(ifile)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_43count_refined, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_count_refined, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[35])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_count_refined, __pyx_t_4) < 0) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1090
 *         return self.bitmasks.count_refined(ifile)
 * 
 *     def count_total(self, ifile):             # <<<<<<<<<<<<<<
 *         r"""Get the total number of cells set for a file."""
 *         return self.bitmasks.count_total(ifile)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_45count_total, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_count_total, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[36])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_count_total, __pyx_t_4) < 0) __PYX_ERR(0, 1090, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1094
 *         return self.bitmasks.count_total(ifile)
 * 
 *     def check(self):             # <<<<<<<<<<<<<<
 *         cdef np.uint64_t mi1
 *         cdef ewah_bool_array arr_totref, arr_tottwo
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_47check, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_check, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[37])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_check, __pyx_t_4) < 0) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1128
 *         print("Total of %s / %s collisions (% 3.5f%%)" % (nc, nm, 100.0*float(nc)/nm))
 * 
 *     def primary_indices(self):             # <<<<<<<<<<<<<<
 *         mi = (<ewah_bool_array*> self.collisions.ewah_keys)[0].toArray()
 *         return np.array(mi,'uint64')
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_49primary_indices, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_primary_indices, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[38])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_primary_indices, __pyx_t_4) < 0) __PYX_ERR(0, 1128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1132
 *         return np.array(mi,'uint64')
 * 
 *     def file_ownership_mask(self, fid):             # <<<<<<<<<<<<<<
 *         cdef BoolArrayCollection out
 *         out = self.bitmasks._get_bitmask(<np.uint32_t> fid)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_51file_ownership_mask, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_file_ownership_ma, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[39])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_file_ownership_mask, __pyx_t_4) < 0) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1137
 *         return out
 * 
 *     def finalize(self):             # <<<<<<<<<<<<<<
 *         return
 *         # self.index_octree = ParticleOctreeContainer([1,1,1],
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_53finalize, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_finalize, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[40])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_finalize, __pyx_t_4) < 0) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1151
 *         # self.index_octree.finalize()
 * 
 *     def get_DLE(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef np.ndarray[np.float64_t, ndim=1] DLE
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_55get_DLE, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_get_DLE, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[41])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_get_DLE, __pyx_t_4) < 0) __PYX_ERR(0, 1151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1158
 *             DLE[i] = self.left_edge[i]
 *         return DLE
 *     def get_DRE(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         cdef np.ndarray[np.float64_t, ndim=1] DRE
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_57get_DRE, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_get_DRE, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[42])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_get_DRE, __pyx_t_4) < 0) __PYX_ERR(0, 1158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1166
 *         return DRE
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_59get_ghost_zones, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_get_ghost_zones, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[43])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[12]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_get_ghost_zones, __pyx_t_4) < 0) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1190
 *         return gfiles, out
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_61selector2mask, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_selector2mask, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[44])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_selector2mask, __pyx_t_4) < 0) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1200
 *         return cmask
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_63mask2files, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_mask2files, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[45])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_mask2files, __pyx_t_4) < 0) __PYX_ERR(0, 1200, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1208
 *         return file_idx
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_65mask2filemasks, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_mask2filemasks, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[46])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_mask2filemasks, __pyx_t_4) < 0) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1223
 *         return file_masks
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_67filemasks2addfiles, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_filemasks2addfile, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[47])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_filemasks2addfiles, __pyx_t_4) < 0) __PYX_ERR(0, 1223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1233
 *         return addfile_idx
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_69identify_file_masks, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_identify_file_mas, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[48])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_identify_file_masks, __pyx_t_4) < 0) __PYX_ERR(0, 1233, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1257
 *         return file_idx.astype('uint32'), file_masks, addfile_idx
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_71identify_data_files, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_identify_data_fil, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[49])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[5]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_identify_data_files, __pyx_t_4) < 0) __PYX_ERR(0, 1257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1269
 *         return self.masks_to_files(cmask_s, cmask_g), (cmask_s, cmask_g)
 * 
 *     def mask_to_files(self, BoolArrayCollection mm_s):             # <<<<<<<<<<<<<<
 *         cdef FileBitmasks mm_d = self.bitmasks
 *         cdef np.uint32_t ifile
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_73mask_to_files, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_mask_to_files, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[50])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_mask_to_files, __pyx_t_4) < 0) __PYX_ERR(0, 1269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1284
 *         return file_idx_p.astype('uint32')
 * 
 *     def masks_to_files(self, BoolArrayCollection mm_s, BoolArrayCollection mm_g):             # <<<<<<<<<<<<<<
 *         cdef FileBitmasks mm_d = self.bitmasks
 *         cdef np.uint32_t ifile
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_75masks_to_files, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_masks_to_files, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[51])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_masks_to_files, __pyx_t_4) < 0) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1306
 *         return file_idx_p.astype('uint32'), file_idx_g.astype('uint32')
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_77construct_octree, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap_construct_octree, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[52])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[11]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmap, __pyx_mstate_global->__pyx_n_u_construct_octree, __pyx_t_4) < 0) __PYX_ERR(0, 1306, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.file_markers cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_91__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[53])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self.file_markers cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self.file_markers cannot be converted to a Python object for pickling"
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_14ParticleBitmap_93__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmap___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[54])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1492
 *         self.ghosts_ewah = BoolArrayColl(self.s1, self.s2)
 * 
 *     def fill_masks(self, BoolArrayCollection mm_s, BoolArrayCollection mm_g = None):             # <<<<<<<<<<<<<<
 *         # Normal variables
 *         cdef int i
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_3fill_masks, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmapSelector_fill_mask, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[55])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[11]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector, __pyx_mstate_global->__pyx_n_u_fill_masks, __pyx_t_4) < 0) __PYX_ERR(0, 1492, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1532
 *         mm_g0._compress(mm_g)
 * 
 *     def find_files(self,             # <<<<<<<<<<<<<<
 *                    np.ndarray[np.uint8_t, ndim=1] file_mask_p,
 *                    np.ndarray[np.uint8_t, ndim=1] file_mask_g):
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_5find_files, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmapSelector_find_file, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[56])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapSelector, __pyx_mstate_global->__pyx_n_u_find_files, __pyx_t_4) < 0) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmapSelector___reduce, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[57])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_22ParticleBitmapSelector_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmapSelector___setstat, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[58])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1979
 *         self._octs_per_root = <np.uint64_t[:num_root]> self._ptr_octs_per_root
 * 
 *     def allocate_domains(self, counts = None):             # <<<<<<<<<<<<<<
 *         if counts is None:
 *             counts = [self.max_root]
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_3allocate_domains, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmapOctreeContainer_al, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[59])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[11]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer, __pyx_mstate_global->__pyx_n_u_allocate_domains, __pyx_t_4) < 0) __PYX_ERR(0, 1979, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1984
 *         OctreeContainer.allocate_domains(self, counts)
 * 
 *     def finalize(self):             # <<<<<<<<<<<<<<
 *         # Assign domain ind
 *         cdef SelectorObject selector = AlwaysSelector(None)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_5finalize, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmapOctreeContainer_fi, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[60])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer, __pyx_mstate_global->__pyx_n_u_finalize, __pyx_t_4) < 0) __PYX_ERR(0, 1984, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":2030
 *         return my_oct
 * 
 *     def get_index_base_octs(self, np.int64_t[:] domain_ind):             # <<<<<<<<<<<<<<
 *         cdef np.int64_t ndst = np.max(domain_ind) + 1
 *         ind = np.zeros(ndst, 'int64') - 1
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_7get_index_base_octs, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmapOctreeContainer_ge, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[61])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer, __pyx_mstate_global->__pyx_n_u_get_index_base_octs, __pyx_t_4) < 0) __PYX_ERR(0, 2030, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":2129
 *                                    max_level, domain_id, count)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_11add, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmapOctreeContainer_ad, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[62])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[0]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_2yt_8geometry_22particle_oct_container_ParticleBitmapOctreeContainer, __pyx_mstate_global->__pyx_n_u_add, __pyx_t_4) < 0) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_13__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmapOctreeContainer_2, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[63])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._ptr_octs_per_root,self.oct_list,self.root_mesh,self.root_nodes,self.tree_root cannot be converted to a Python object for pickling"
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_2yt_8geometry_22particle_oct_container_29ParticleBitmapOctreeContainer_15__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_ParticleBitmapOctreeContainer_3, NULL, __pyx_mstate_global->__pyx_n_u_yt_geometry_particle_oct_contain, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[64])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/geometry/particle_oct_container.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * # distutils: extra_compile_args = CPP14_FLAG
 * # distutils: include_dirs = LIB_DIR
*/
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  if (__pyx_m) {
    if (__pyx_mstate->__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init yt.geometry.particle_oct_container", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init yt.geometry.particle_oct_container");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #else
  return __pyx_m;
  #endif
}
/* #### Code section: pystring_table ### */

typedef struct {
    const char *s;
#if 179 <= 65535
    const unsigned short n;
#elif 179 / 2 < INT_MAX
    const unsigned int n;
#elif 179 / 2 < LONG_MAX
    const unsigned long n;
#else
    const Py_ssize_t n;
#endif
#if 1 <= 31
    const unsigned int encoding : 5;
#elif 1 <= 255
    const unsigned char encoding;
#elif 1 <= 65535
    const unsigned short encoding;
#else
    const Py_ssize_t encoding;
#endif
    const unsigned int is_unicode : 1;
    const unsigned int intern : 1;
} __Pyx_StringTabEntry;
static const char * const __pyx_string_tab_encodings[] = { 0 };
static const __Pyx_StringTabEntry __pyx_string_tab[] = {
  {__pyx_k_, sizeof(__pyx_k_), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_ */
  {__pyx_k_05, sizeof(__pyx_k_05), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_05 */
  {__pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ASCII */
  {__pyx_k_All_dimensions_preceding_dimensi, sizeof(__pyx_k_All_dimensions_preceding_dimensi), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_All_dimensions_preceding_dimensi */
  {__pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AssertionError */
  {__pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Buffer_view_does_not_expose_stri */
  {__pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Can_only_create_a_buffer_that_is */
  {__pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Cannot_assign_to_read_only_memor */
  {__pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Cannot_create_writable_memory_vi */
  {__pyx_k_Cannot_index_with_type, sizeof(__pyx_k_Cannot_index_with_type), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Cannot_index_with_type */
  {__pyx_k_Cannot_transpose_memoryview_with, sizeof(__pyx_k_Cannot_transpose_memoryview_with), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Cannot_transpose_memoryview_with */
  {__pyx_k_Child_was_already_initialized, sizeof(__pyx_k_Child_was_already_initialized), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Child_was_already_initialized */
  {__pyx_k_DLE, sizeof(__pyx_k_DLE), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DLE */
  {__pyx_k_DRE, sizeof(__pyx_k_DRE), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DRE */
  {__pyx_k_Dimension_d_is_not_direct, sizeof(__pyx_k_Dimension_d_is_not_direct), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Dimension_d_is_not_direct */
  {__pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Ellipsis */
  {__pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Empty_shape_tuple_for_cython_arr */
  {__pyx_k_Expected_at_least, sizeof(__pyx_k_Expected_at_least), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Expected_at_least */
  {__pyx_k_File, sizeof(__pyx_k_File), 0, 1, 1}, /* PyObject cname: __pyx_n_u_File */
  {__pyx_k_File_03d, sizeof(__pyx_k_File_03d), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_File_03d */
  {__pyx_k_Function_call_with_ambiguous_arg, sizeof(__pyx_k_Function_call_with_ambiguous_arg), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Function_call_with_ambiguous_arg */
  {__pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ImportError */
  {__pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Incompatible_checksums_0x_x_vs_0 */
  {__pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_IndexError */
  {__pyx_k_Index_for_a_softening_region, sizeof(__pyx_k_Index_for_a_softening_region), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Index_for_a_softening_region */
  {__pyx_k_Index_not_found_in_the, sizeof(__pyx_k_Index_not_found_in_the), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Index_not_found_in_the */
  {__pyx_k_Index_out_of_bounds_axis_d, sizeof(__pyx_k_Index_out_of_bounds_axis_d), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Index_out_of_bounds_axis_d */
  {__pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Indirect_dimensions_not_supporte */
  {__pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Invalid_mode_expected_c_or_fortr */
  {__pyx_k_Invalid_shape_in_axis, sizeof(__pyx_k_Invalid_shape_in_axis), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Invalid_shape_in_axis */
  {__pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_KeyError */
  {__pyx_k_Loading_particle_index, sizeof(__pyx_k_Loading_particle_index), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Loading_particle_index */
  {__pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_MemoryError */
  {__pyx_k_MemoryView_of, sizeof(__pyx_k_MemoryView_of), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_MemoryView_of */
  {__pyx_k_No_matching_signature_found, sizeof(__pyx_k_No_matching_signature_found), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_No_matching_signature_found */
  {__pyx_k_No_root_found_for, sizeof(__pyx_k_No_root_found_for), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_No_root_found_for */
  {__pyx_k_Note_that_Cython_is_deliberately, sizeof(__pyx_k_Note_that_Cython_is_deliberately), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Note_that_Cython_is_deliberately */
  {__pyx_k_O, sizeof(__pyx_k_O), 0, 0, 1}, /* PyObject cname: __pyx_n_b_O */
  {__pyx_k_OSError, sizeof(__pyx_k_OSError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_OSError */
  {__pyx_k_Octree_does_not_have_roots_along, sizeof(__pyx_k_Octree_does_not_have_roots_along), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Octree_does_not_have_roots_along */
  {__pyx_k_Octree_must_have_the_same_number, sizeof(__pyx_k_Octree_must_have_the_same_number), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Octree_must_have_the_same_number */
  {__pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Out_of_bounds_on_buffer_access_a */
  {__pyx_k_ParticleBitmap, sizeof(__pyx_k_ParticleBitmap), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap */
  {__pyx_k_ParticleBitmapOctreeContainer, sizeof(__pyx_k_ParticleBitmapOctreeContainer), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmapOctreeContainer */
  {__pyx_k_ParticleBitmapOctreeContainer_2, sizeof(__pyx_k_ParticleBitmapOctreeContainer_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmapOctreeContainer_2 */
  {__pyx_k_ParticleBitmapOctreeContainer_3, sizeof(__pyx_k_ParticleBitmapOctreeContainer_3), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmapOctreeContainer_3 */
  {__pyx_k_ParticleBitmapOctreeContainer_ad, sizeof(__pyx_k_ParticleBitmapOctreeContainer_ad), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmapOctreeContainer_ad */
  {__pyx_k_ParticleBitmapOctreeContainer_al, sizeof(__pyx_k_ParticleBitmapOctreeContainer_al), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmapOctreeContainer_al */
  {__pyx_k_ParticleBitmapOctreeContainer_fi, sizeof(__pyx_k_ParticleBitmapOctreeContainer_fi), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmapOctreeContainer_fi */
  {__pyx_k_ParticleBitmapOctreeContainer_ge, sizeof(__pyx_k_ParticleBitmapOctreeContainer_ge), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmapOctreeContainer_ge */
  {__pyx_k_ParticleBitmapSelector, sizeof(__pyx_k_ParticleBitmapSelector), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmapSelector */
  {__pyx_k_ParticleBitmapSelector___reduce, sizeof(__pyx_k_ParticleBitmapSelector___reduce), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmapSelector___reduce */
  {__pyx_k_ParticleBitmapSelector___setstat, sizeof(__pyx_k_ParticleBitmapSelector___setstat), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmapSelector___setstat */
  {__pyx_k_ParticleBitmapSelector_fill_mask, sizeof(__pyx_k_ParticleBitmapSelector_fill_mask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmapSelector_fill_mask */
  {__pyx_k_ParticleBitmapSelector_find_file, sizeof(__pyx_k_ParticleBitmapSelector_find_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmapSelector_find_file */
  {__pyx_k_ParticleBitmap___reduce_cython, sizeof(__pyx_k_ParticleBitmap___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap___reduce_cython */
  {__pyx_k_ParticleBitmap___setstate_cython, sizeof(__pyx_k_ParticleBitmap___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap___setstate_cython */
  {__pyx_k_ParticleBitmap__bitmask_intersec, sizeof(__pyx_k_ParticleBitmap__bitmask_intersec), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap__bitmask_intersec */
  {__pyx_k_ParticleBitmap__bitmask_logicala, sizeof(__pyx_k_ParticleBitmap__bitmask_logicala), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap__bitmask_logicala */
  {__pyx_k_ParticleBitmap__coarse_index_dat, sizeof(__pyx_k_ParticleBitmap__coarse_index_dat), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap__coarse_index_dat */
  {__pyx_k_ParticleBitmap__coarse_index_dat_2, sizeof(__pyx_k_ParticleBitmap__coarse_index_dat_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap__coarse_index_dat_2 */
  {__pyx_k_ParticleBitmap__refined_index_da, sizeof(__pyx_k_ParticleBitmap__refined_index_da), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap__refined_index_da */
  {__pyx_k_ParticleBitmap__refined_index_da_2, sizeof(__pyx_k_ParticleBitmap__refined_index_da_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap__refined_index_da_2 */
  {__pyx_k_ParticleBitmap__set_coarse_index, sizeof(__pyx_k_ParticleBitmap__set_coarse_index), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap__set_coarse_index */
  {__pyx_k_ParticleBitmap__set_refined_inde, sizeof(__pyx_k_ParticleBitmap__set_refined_inde), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap__set_refined_inde */
  {__pyx_k_ParticleBitmap_check, sizeof(__pyx_k_ParticleBitmap_check), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_check */
  {__pyx_k_ParticleBitmap_check_bitmasks, sizeof(__pyx_k_ParticleBitmap_check_bitmasks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_check_bitmasks */
  {__pyx_k_ParticleBitmap_construct_octree, sizeof(__pyx_k_ParticleBitmap_construct_octree), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_construct_octree */
  {__pyx_k_ParticleBitmap_count_coarse, sizeof(__pyx_k_ParticleBitmap_count_coarse), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_count_coarse */
  {__pyx_k_ParticleBitmap_count_refined, sizeof(__pyx_k_ParticleBitmap_count_refined), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_count_refined */
  {__pyx_k_ParticleBitmap_count_total, sizeof(__pyx_k_ParticleBitmap_count_total), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_count_total */
  {__pyx_k_ParticleBitmap_file_ownership_ma, sizeof(__pyx_k_ParticleBitmap_file_ownership_ma), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_file_ownership_ma */
  {__pyx_k_ParticleBitmap_filemasks2addfile, sizeof(__pyx_k_ParticleBitmap_filemasks2addfile), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_filemasks2addfile */
  {__pyx_k_ParticleBitmap_finalize, sizeof(__pyx_k_ParticleBitmap_finalize), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_finalize */
  {__pyx_k_ParticleBitmap_find_collisions, sizeof(__pyx_k_ParticleBitmap_find_collisions), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_find_collisions */
  {__pyx_k_ParticleBitmap_find_collisions_c, sizeof(__pyx_k_ParticleBitmap_find_collisions_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_find_collisions_c */
  {__pyx_k_ParticleBitmap_find_collisions_r, sizeof(__pyx_k_ParticleBitmap_find_collisions_r), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_find_collisions_r */
  {__pyx_k_ParticleBitmap_find_contaminated, sizeof(__pyx_k_ParticleBitmap_find_contaminated), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_find_contaminated */
  {__pyx_k_ParticleBitmap_find_uncontaminat, sizeof(__pyx_k_ParticleBitmap_find_uncontaminat), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_find_uncontaminat */
  {__pyx_k_ParticleBitmap_get_DLE, sizeof(__pyx_k_ParticleBitmap_get_DLE), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_get_DLE */
  {__pyx_k_ParticleBitmap_get_DRE, sizeof(__pyx_k_ParticleBitmap_get_DRE), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_get_DRE */
  {__pyx_k_ParticleBitmap_get_bitmasks, sizeof(__pyx_k_ParticleBitmap_get_bitmasks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_get_bitmasks */
  {__pyx_k_ParticleBitmap_get_ghost_zones, sizeof(__pyx_k_ParticleBitmap_get_ghost_zones), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_get_ghost_zones */
  {__pyx_k_ParticleBitmap_identify_data_fil, sizeof(__pyx_k_ParticleBitmap_identify_data_fil), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_identify_data_fil */
  {__pyx_k_ParticleBitmap_identify_file_mas, sizeof(__pyx_k_ParticleBitmap_identify_file_mas), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_identify_file_mas */
  {__pyx_k_ParticleBitmap_iseq_bitmask, sizeof(__pyx_k_ParticleBitmap_iseq_bitmask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_iseq_bitmask */
  {__pyx_k_ParticleBitmap_load_bitmasks, sizeof(__pyx_k_ParticleBitmap_load_bitmasks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_load_bitmasks */
  {__pyx_k_ParticleBitmap_mask2filemasks, sizeof(__pyx_k_ParticleBitmap_mask2filemasks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_mask2filemasks */
  {__pyx_k_ParticleBitmap_mask2files, sizeof(__pyx_k_ParticleBitmap_mask2files), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_mask2files */
  {__pyx_k_ParticleBitmap_mask_to_files, sizeof(__pyx_k_ParticleBitmap_mask_to_files), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_mask_to_files */
  {__pyx_k_ParticleBitmap_masks_to_files, sizeof(__pyx_k_ParticleBitmap_masks_to_files), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_masks_to_files */
  {__pyx_k_ParticleBitmap_primary_indices, sizeof(__pyx_k_ParticleBitmap_primary_indices), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_primary_indices */
  {__pyx_k_ParticleBitmap_print_info, sizeof(__pyx_k_ParticleBitmap_print_info), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_print_info */
  {__pyx_k_ParticleBitmap_reset_bitmasks, sizeof(__pyx_k_ParticleBitmap_reset_bitmasks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_reset_bitmasks */
  {__pyx_k_ParticleBitmap_save_bitmasks, sizeof(__pyx_k_ParticleBitmap_save_bitmasks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_save_bitmasks */
  {__pyx_k_ParticleBitmap_selector2mask, sizeof(__pyx_k_ParticleBitmap_selector2mask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_selector2mask */
  {__pyx_k_ParticleBitmap_update_mi2, sizeof(__pyx_k_ParticleBitmap_update_mi2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleBitmap_update_mi2 */
  {__pyx_k_ParticleOctreeContainer, sizeof(__pyx_k_ParticleOctreeContainer), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleOctreeContainer */
  {__pyx_k_ParticleOctreeContainer___iter, sizeof(__pyx_k_ParticleOctreeContainer___iter), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleOctreeContainer___iter */
  {__pyx_k_ParticleOctreeContainer___reduce, sizeof(__pyx_k_ParticleOctreeContainer___reduce), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleOctreeContainer___reduce */
  {__pyx_k_ParticleOctreeContainer___setsta, sizeof(__pyx_k_ParticleOctreeContainer___setsta), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleOctreeContainer___setsta */
  {__pyx_k_ParticleOctreeContainer_add, sizeof(__pyx_k_ParticleOctreeContainer_add), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleOctreeContainer_add */
  {__pyx_k_ParticleOctreeContainer_allocate, sizeof(__pyx_k_ParticleOctreeContainer_allocate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleOctreeContainer_allocate */
  {__pyx_k_ParticleOctreeContainer_allocate_2, sizeof(__pyx_k_ParticleOctreeContainer_allocate_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleOctreeContainer_allocate_2 */
  {__pyx_k_ParticleOctreeContainer_apply_do, sizeof(__pyx_k_ParticleOctreeContainer_apply_do), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleOctreeContainer_apply_do */
  {__pyx_k_ParticleOctreeContainer_clear_fi, sizeof(__pyx_k_ParticleOctreeContainer_clear_fi), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleOctreeContainer_clear_fi */
  {__pyx_k_ParticleOctreeContainer_domain_i, sizeof(__pyx_k_ParticleOctreeContainer_domain_i), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleOctreeContainer_domain_i */
  {__pyx_k_ParticleOctreeContainer_finalize, sizeof(__pyx_k_ParticleOctreeContainer_finalize), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleOctreeContainer_finalize */
  {__pyx_k_ParticleOctreeContainer_recursiv, sizeof(__pyx_k_ParticleOctreeContainer_recursiv), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ParticleOctreeContainer_recursiv */
  {__pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_PickleError */
  {__pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_RuntimeError */
  {__pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 1, 1}, /* PyObject cname: __pyx_n_u_Sequence */
  {__pyx_k_Smoothing_length_for_particle, sizeof(__pyx_k_Smoothing_length_for_particle), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Smoothing_length_for_particle */
  {__pyx_k_Step_may_not_be_zero_axis_d, sizeof(__pyx_k_Step_may_not_be_zero_axis_d), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Step_may_not_be_zero_axis_d */
  {__pyx_k_T, sizeof(__pyx_k_T), 0, 0, 0}, /* PyObject cname: __pyx_kp_b_T */
  {__pyx_k_The_file_format_of_the_index_has, sizeof(__pyx_k_The_file_format_of_the_index_has), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_The_file_format_of_the_index_has */
  {__pyx_k_Total_of_s_s_collisions_3_5f, sizeof(__pyx_k_Total_of_s_s_collisions_3_5f), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Total_of_s_s_collisions_3_5f */
  {__pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_TypeError */
  {__pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Unable_to_convert_item_to_object */
  {__pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ValueError */
  {__pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 1, 1}, /* PyObject cname: __pyx_n_u_View_MemoryView */
  {__pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__10 */
  {__pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__11 */
  {__pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__15 */
  {__pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__16 */
  {__pyx_k__18, sizeof(__pyx_k__18), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__18 */
  {__pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__2 */
  {__pyx_k__3, sizeof(__pyx_k__3), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__3 */
  {__pyx_k__4, sizeof(__pyx_k__4), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__4 */
  {__pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__5 */
  {__pyx_k__6, sizeof(__pyx_k__6), 0, 0, 0}, /* PyObject cname: __pyx_kp_b__6 */
  {__pyx_k__7, sizeof(__pyx_k__7), 0, 0, 0}, /* PyObject cname: __pyx_kp_b__7 */
  {__pyx_k__8, sizeof(__pyx_k__8), 0, 0, 0}, /* PyObject cname: __pyx_kp_b__8 */
  {__pyx_k__9, sizeof(__pyx_k__9), 0, 0, 0}, /* PyObject cname: __pyx_kp_b__9 */
  {__pyx_k_a, sizeof(__pyx_k_a), 0, 1, 1}, /* PyObject cname: __pyx_n_u_a */
  {__pyx_k_abc, sizeof(__pyx_k_abc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_abc */
  {__pyx_k_add, sizeof(__pyx_k_add), 0, 1, 1}, /* PyObject cname: __pyx_n_u_add */
  {__pyx_k_add_note, sizeof(__pyx_k_add_note), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_add_note */
  {__pyx_k_addfile_idx, sizeof(__pyx_k_addfile_idx), 0, 1, 1}, /* PyObject cname: __pyx_n_u_addfile_idx */
  {__pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 1, 1}, /* PyObject cname: __pyx_n_u_allocate_buffer */
  {__pyx_k_allocate_domains, sizeof(__pyx_k_allocate_domains), 0, 1, 1}, /* PyObject cname: __pyx_n_u_allocate_domains */
  {__pyx_k_allocate_root, sizeof(__pyx_k_allocate_root), 0, 1, 1}, /* PyObject cname: __pyx_n_u_allocate_root */
  {__pyx_k_and, sizeof(__pyx_k_and), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_and */
  {__pyx_k_apply_domain, sizeof(__pyx_k_apply_domain), 0, 1, 1}, /* PyObject cname: __pyx_n_u_apply_domain */
  {__pyx_k_args, sizeof(__pyx_k_args), 0, 1, 1}, /* PyObject cname: __pyx_n_u_args */
  {__pyx_k_argsort, sizeof(__pyx_k_argsort), 0, 1, 1}, /* PyObject cname: __pyx_n_u_argsort */
  {__pyx_k_arguments_got, sizeof(__pyx_k_arguments_got), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_arguments_got */
  {__pyx_k_arr, sizeof(__pyx_k_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_arr */
  {__pyx_k_arr_any, sizeof(__pyx_k_arr_any), 0, 1, 1}, /* PyObject cname: __pyx_n_u_arr_any */
  {__pyx_k_arr_swap, sizeof(__pyx_k_arr_swap), 0, 1, 1}, /* PyObject cname: __pyx_n_u_arr_swap */
  {__pyx_k_arr_totref, sizeof(__pyx_k_arr_totref), 0, 1, 1}, /* PyObject cname: __pyx_n_u_arr_totref */
  {__pyx_k_arr_tottwo, sizeof(__pyx_k_arr_tottwo), 0, 1, 1}, /* PyObject cname: __pyx_n_u_arr_tottwo */
  {__pyx_k_arr_two, sizeof(__pyx_k_arr_two), 0, 1, 1}, /* PyObject cname: __pyx_n_u_arr_two */
  {__pyx_k_arr_view, sizeof(__pyx_k_arr_view), 0, 1, 1}, /* PyObject cname: __pyx_n_u_arr_view */
  {__pyx_k_array, sizeof(__pyx_k_array), 0, 1, 1}, /* PyObject cname: __pyx_n_u_array */
  {__pyx_k_astype, sizeof(__pyx_k_astype), 0, 1, 1}, /* PyObject cname: __pyx_n_u_astype */
  {__pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 1, 1}, /* PyObject cname: __pyx_n_u_asyncio_coroutines */
  {__pyx_k_at_0x, sizeof(__pyx_k_at_0x), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_at_0x */
  {__pyx_k_attrs, sizeof(__pyx_k_attrs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_attrs */
  {__pyx_k_base, sizeof(__pyx_k_base), 0, 1, 1}, /* PyObject cname: __pyx_n_u_base */
  {__pyx_k_base_mask, sizeof(__pyx_k_base_mask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_base_mask */
  {__pyx_k_base_pcount, sizeof(__pyx_k_base_pcount), 0, 1, 1}, /* PyObject cname: __pyx_n_u_base_pcount */
  {__pyx_k_bcoll, sizeof(__pyx_k_bcoll), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bcoll */
  {__pyx_k_beg, sizeof(__pyx_k_beg), 0, 1, 1}, /* PyObject cname: __pyx_n_u_beg */
  {__pyx_k_bitmap, sizeof(__pyx_k_bitmap), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bitmap */
  {__pyx_k_bitmask_intersects, sizeof(__pyx_k_bitmask_intersects), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bitmask_intersects */
  {__pyx_k_bitmask_logicaland, sizeof(__pyx_k_bitmask_logicaland), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bitmask_logicaland */
  {__pyx_k_bitmask_version, sizeof(__pyx_k_bitmask_version), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bitmask_version */
  {__pyx_k_bitmask_version_2, sizeof(__pyx_k_bitmask_version_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bitmask_version_2 */
  {__pyx_k_bitsize, sizeof(__pyx_k_bitsize), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bitsize */
  {__pyx_k_c, sizeof(__pyx_k_c), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c */
  {__pyx_k_cc, sizeof(__pyx_k_cc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cc */
  {__pyx_k_characteristic_size, sizeof(__pyx_k_characteristic_size), 0, 1, 1}, /* PyObject cname: __pyx_n_u_characteristic_size */
  {__pyx_k_check, sizeof(__pyx_k_check), 0, 1, 1}, /* PyObject cname: __pyx_n_u_check */
  {__pyx_k_check_bitmasks, sizeof(__pyx_k_check_bitmasks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_check_bitmasks */
  {__pyx_k_class, sizeof(__pyx_k_class), 0, 1, 1}, /* PyObject cname: __pyx_n_u_class */
  {__pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 1, 1}, /* PyObject cname: __pyx_n_u_class_getitem */
  {__pyx_k_clear, sizeof(__pyx_k_clear), 0, 1, 1}, /* PyObject cname: __pyx_n_u_clear */
  {__pyx_k_clear_fileind, sizeof(__pyx_k_clear_fileind), 0, 1, 1}, /* PyObject cname: __pyx_n_u_clear_fileind */
  {__pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cline_in_traceback */
  {__pyx_k_close, sizeof(__pyx_k_close), 0, 1, 1}, /* PyObject cname: __pyx_n_u_close */
  {__pyx_k_cmask, sizeof(__pyx_k_cmask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cmask */
  {__pyx_k_cmask_g, sizeof(__pyx_k_cmask_g), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cmask_g */
  {__pyx_k_cmask_s, sizeof(__pyx_k_cmask_s), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cmask_s */
  {__pyx_k_cmi, sizeof(__pyx_k_cmi), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cmi */
  {__pyx_k_coarse_ghosts, sizeof(__pyx_k_coarse_ghosts), 0, 1, 1}, /* PyObject cname: __pyx_n_u_coarse_ghosts */
  {__pyx_k_coarse_ghosts_list, sizeof(__pyx_k_coarse_ghosts_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_coarse_ghosts_list */
  {__pyx_k_coarse_index_data_file, sizeof(__pyx_k_coarse_index_data_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_coarse_index_data_file */
  {__pyx_k_coarse_index_data_file_ndarray, sizeof(__pyx_k_coarse_index_data_file_ndarray), 0, 1, 1}, /* PyObject cname: __pyx_n_u_coarse_index_data_file_ndarray */
  {__pyx_k_coarse_select_list, sizeof(__pyx_k_coarse_select_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_coarse_select_list */
  {__pyx_k_coct, sizeof(__pyx_k_coct), 0, 1, 1}, /* PyObject cname: __pyx_n_u_coct */
  {__pyx_k_code_length, sizeof(__pyx_k_code_length), 0, 1, 1}, /* PyObject cname: __pyx_n_u_code_length */
  {__pyx_k_collections_abc, sizeof(__pyx_k_collections_abc), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_collections_abc */
  {__pyx_k_collisions, sizeof(__pyx_k_collisions), 0, 1, 1}, /* PyObject cname: __pyx_n_u_collisions */
  {__pyx_k_construct_octree, sizeof(__pyx_k_construct_octree), 0, 1, 1}, /* PyObject cname: __pyx_n_u_construct_octree */
  {__pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_contiguous_and_direct */
  {__pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_contiguous_and_indirect */
  {__pyx_k_convert_to_units, sizeof(__pyx_k_convert_to_units), 0, 1, 1}, /* PyObject cname: __pyx_n_u_convert_to_units */
  {__pyx_k_copy, sizeof(__pyx_k_copy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_copy */
  {__pyx_k_count, sizeof(__pyx_k_count), 0, 1, 1}, /* PyObject cname: __pyx_n_u_count */
  {__pyx_k_count_coarse, sizeof(__pyx_k_count_coarse), 0, 1, 1}, /* PyObject cname: __pyx_n_u_count_coarse */
  {__pyx_k_count_refined, sizeof(__pyx_k_count_refined), 0, 1, 1}, /* PyObject cname: __pyx_n_u_count_refined */
  {__pyx_k_count_threshold, sizeof(__pyx_k_count_threshold), 0, 1, 1}, /* PyObject cname: __pyx_n_u_count_threshold */
  {__pyx_k_count_total, sizeof(__pyx_k_count_total), 0, 1, 1}, /* PyObject cname: __pyx_n_u_count_total */
  {__pyx_k_counts, sizeof(__pyx_k_counts), 0, 1, 1}, /* PyObject cname: __pyx_n_u_counts */
  {__pyx_k_create_dataset, sizeof(__pyx_k_create_dataset), 0, 1, 1}, /* PyObject cname: __pyx_n_u_create_dataset */
  {__pyx_k_create_group, sizeof(__pyx_k_create_group), 0, 1, 1}, /* PyObject cname: __pyx_n_u_create_group */
  {__pyx_k_croot, sizeof(__pyx_k_croot), 0, 1, 1}, /* PyObject cname: __pyx_n_u_croot */
  {__pyx_k_cur, sizeof(__pyx_k_cur), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cur */
  {__pyx_k_cur_ind, sizeof(__pyx_k_cur_ind), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cur_ind */
  {__pyx_k_d, sizeof(__pyx_k_d), 0, 1, 1}, /* PyObject cname: __pyx_n_u_d */
  {__pyx_k_data, sizeof(__pyx_k_data), 0, 1, 1}, /* PyObject cname: __pyx_n_u_data */
  {__pyx_k_data_file, sizeof(__pyx_k_data_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_data_file */
  {__pyx_k_data_files, sizeof(__pyx_k_data_files), 0, 1, 1}, /* PyObject cname: __pyx_n_u_data_files */
  {__pyx_k_dataset, sizeof(__pyx_k_dataset), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dataset */
  {__pyx_k_dds, sizeof(__pyx_k_dds), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dds */
  {__pyx_k_defaults, sizeof(__pyx_k_defaults), 0, 1, 1}, /* PyObject cname: __pyx_n_u_defaults */
  {__pyx_k_dfiles, sizeof(__pyx_k_dfiles), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dfiles */
  {__pyx_k_dict, sizeof(__pyx_k_dict), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dict */
  {__pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_disable */
  {__pyx_k_dmask, sizeof(__pyx_k_dmask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dmask */
  {__pyx_k_domain_counts, sizeof(__pyx_k_domain_counts), 0, 1, 1}, /* PyObject cname: __pyx_n_u_domain_counts */
  {__pyx_k_domain_dimensions, sizeof(__pyx_k_domain_dimensions), 0, 1, 1}, /* PyObject cname: __pyx_n_u_domain_dimensions */
  {__pyx_k_domain_id, sizeof(__pyx_k_domain_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_domain_id */
  {__pyx_k_domain_ind, sizeof(__pyx_k_domain_ind), 0, 1, 1}, /* PyObject cname: __pyx_n_u_domain_ind */
  {__pyx_k_domain_left_edge, sizeof(__pyx_k_domain_left_edge), 0, 1, 1}, /* PyObject cname: __pyx_n_u_domain_left_edge */
  {__pyx_k_domain_right_edge, sizeof(__pyx_k_domain_right_edge), 0, 1, 1}, /* PyObject cname: __pyx_n_u_domain_right_edge */
  {__pyx_k_double, sizeof(__pyx_k_double), 0, 1, 1}, /* PyObject cname: __pyx_n_u_double */
  {__pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype */
  {__pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_object */
  {__pyx_k_empty, sizeof(__pyx_k_empty), 0, 1, 1}, /* PyObject cname: __pyx_n_u_empty */
  {__pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_enable */
  {__pyx_k_encode, sizeof(__pyx_k_encode), 0, 1, 1}, /* PyObject cname: __pyx_n_u_encode */
  {__pyx_k_end, sizeof(__pyx_k_end), 0, 1, 1}, /* PyObject cname: __pyx_n_u_end */
  {__pyx_k_enter, sizeof(__pyx_k_enter), 0, 1, 1}, /* PyObject cname: __pyx_n_u_enter */
  {__pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_enumerate */
  {__pyx_k_error, sizeof(__pyx_k_error), 0, 1, 1}, /* PyObject cname: __pyx_n_u_error */
  {__pyx_k_ewah_base, sizeof(__pyx_k_ewah_base), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ewah_base */
  {__pyx_k_ewah_slct, sizeof(__pyx_k_ewah_slct), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ewah_slct */
  {__pyx_k_exceeds_max, sizeof(__pyx_k_exceeds_max), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_exceeds_max */
  {__pyx_k_exit, sizeof(__pyx_k_exit), 0, 1, 1}, /* PyObject cname: __pyx_n_u_exit */
  {__pyx_k_extend, sizeof(__pyx_k_extend), 0, 1, 1}, /* PyObject cname: __pyx_n_u_extend */
  {__pyx_k_fid, sizeof(__pyx_k_fid), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fid */
  {__pyx_k_file, sizeof(__pyx_k_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_file */
  {__pyx_k_file_hash, sizeof(__pyx_k_file_hash), 0, 1, 1}, /* PyObject cname: __pyx_n_u_file_hash */
  {__pyx_k_file_id, sizeof(__pyx_k_file_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_file_id */
  {__pyx_k_file_idx, sizeof(__pyx_k_file_idx), 0, 1, 1}, /* PyObject cname: __pyx_n_u_file_idx */
  {__pyx_k_file_idx_g, sizeof(__pyx_k_file_idx_g), 0, 1, 1}, /* PyObject cname: __pyx_n_u_file_idx_g */
  {__pyx_k_file_idx_p, sizeof(__pyx_k_file_idx_p), 0, 1, 1}, /* PyObject cname: __pyx_n_u_file_idx_p */
  {__pyx_k_file_list, sizeof(__pyx_k_file_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_file_list */
  {__pyx_k_file_mask_g, sizeof(__pyx_k_file_mask_g), 0, 1, 1}, /* PyObject cname: __pyx_n_u_file_mask_g */
  {__pyx_k_file_mask_p, sizeof(__pyx_k_file_mask_p), 0, 1, 1}, /* PyObject cname: __pyx_n_u_file_mask_p */
  {__pyx_k_file_masks, sizeof(__pyx_k_file_masks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_file_masks */
  {__pyx_k_file_ownership_mask, sizeof(__pyx_k_file_ownership_mask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_file_ownership_mask */
  {__pyx_k_filemasks2addfiles, sizeof(__pyx_k_filemasks2addfiles), 0, 1, 1}, /* PyObject cname: __pyx_n_u_filemasks2addfiles */
  {__pyx_k_files_touched, sizeof(__pyx_k_files_touched), 0, 1, 1}, /* PyObject cname: __pyx_n_u_files_touched */
  {__pyx_k_fill_bool, sizeof(__pyx_k_fill_bool), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fill_bool */
  {__pyx_k_fill_masks, sizeof(__pyx_k_fill_masks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fill_masks */
  {__pyx_k_finalize, sizeof(__pyx_k_finalize), 0, 1, 1}, /* PyObject cname: __pyx_n_u_finalize */
  {__pyx_k_find_collisions, sizeof(__pyx_k_find_collisions), 0, 1, 1}, /* PyObject cname: __pyx_n_u_find_collisions */
  {__pyx_k_find_collisions_coarse, sizeof(__pyx_k_find_collisions_coarse), 0, 1, 1}, /* PyObject cname: __pyx_n_u_find_collisions_coarse */
  {__pyx_k_find_collisions_refined, sizeof(__pyx_k_find_collisions_refined), 0, 1, 1}, /* PyObject cname: __pyx_n_u_find_collisions_refined */
  {__pyx_k_find_contaminated, sizeof(__pyx_k_find_contaminated), 0, 1, 1}, /* PyObject cname: __pyx_n_u_find_contaminated */
  {__pyx_k_find_files, sizeof(__pyx_k_find_files), 0, 1, 1}, /* PyObject cname: __pyx_n_u_find_files */
  {__pyx_k_find_uncontaminated, sizeof(__pyx_k_find_uncontaminated), 0, 1, 1}, /* PyObject cname: __pyx_n_u_find_uncontaminated */
  {__pyx_k_finish, sizeof(__pyx_k_finish), 0, 1, 1}, /* PyObject cname: __pyx_n_u_finish */
  {__pyx_k_flags, sizeof(__pyx_k_flags), 0, 1, 1}, /* PyObject cname: __pyx_n_u_flags */
  {__pyx_k_float, sizeof(__pyx_k_float), 0, 1, 1}, /* PyObject cname: __pyx_n_u_float */
  {__pyx_k_float32, sizeof(__pyx_k_float32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_float32 */
  {__pyx_k_float64, sizeof(__pyx_k_float64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_float64 */
  {__pyx_k_fmask, sizeof(__pyx_k_fmask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fmask */
  {__pyx_k_fname, sizeof(__pyx_k_fname), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fname */
  {__pyx_k_format, sizeof(__pyx_k_format), 0, 1, 1}, /* PyObject cname: __pyx_n_u_format */
  {__pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fortran */
  {__pyx_k_fp, sizeof(__pyx_k_fp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fp */
  {__pyx_k_func, sizeof(__pyx_k_func), 0, 1, 1}, /* PyObject cname: __pyx_n_u_func */
  {__pyx_k_fused_sigindex_ref, sizeof(__pyx_k_fused_sigindex_ref), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fused_sigindex_ref */
  {__pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_gc */
  {__pyx_k_get, sizeof(__pyx_k_get), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get */
  {__pyx_k_get_DLE, sizeof(__pyx_k_get_DLE), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_DLE */
  {__pyx_k_get_DRE, sizeof(__pyx_k_get_DRE), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_DRE */
  {__pyx_k_get_bitmasks, sizeof(__pyx_k_get_bitmasks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_bitmasks */
  {__pyx_k_get_ghost_zones, sizeof(__pyx_k_get_ghost_zones), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_ghost_zones */
  {__pyx_k_get_index_base_octs, sizeof(__pyx_k_get_index_base_octs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_index_base_octs */
  {__pyx_k_get_pbar, sizeof(__pyx_k_get_pbar), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_pbar */
  {__pyx_k_get_periodicity, sizeof(__pyx_k_get_periodicity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_periodicity */
  {__pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_getstate */
  {__pyx_k_gfiles, sizeof(__pyx_k_gfiles), 0, 1, 1}, /* PyObject cname: __pyx_n_u_gfiles */
  {__pyx_k_gmask, sizeof(__pyx_k_gmask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_gmask */
  {__pyx_k_gmask2, sizeof(__pyx_k_gmask2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_gmask2 */
  {__pyx_k_got, sizeof(__pyx_k_got), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_got */
  {__pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_got_differing_extents_in_dimensi */
  {__pyx_k_grp, sizeof(__pyx_k_grp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_grp */
  {__pyx_k_h5py, sizeof(__pyx_k_h5py), 0, 1, 1}, /* PyObject cname: __pyx_n_u_h5py */
  {__pyx_k_hsml, sizeof(__pyx_k_hsml), 0, 1, 1}, /* PyObject cname: __pyx_n_u_hsml */
  {__pyx_k_i, sizeof(__pyx_k_i), 0, 1, 1}, /* PyObject cname: __pyx_n_u_i */
  {__pyx_k_id, sizeof(__pyx_k_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_id */
  {__pyx_k_identify_data_files, sizeof(__pyx_k_identify_data_files), 0, 1, 1}, /* PyObject cname: __pyx_n_u_identify_data_files */
  {__pyx_k_identify_file_masks, sizeof(__pyx_k_identify_file_masks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_identify_file_masks */
  {__pyx_k_ifile, sizeof(__pyx_k_ifile), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ifile */
  {__pyx_k_import, sizeof(__pyx_k_import), 0, 1, 1}, /* PyObject cname: __pyx_n_u_import */
  {__pyx_k_in_coll, sizeof(__pyx_k_in_coll), 0, 1, 1}, /* PyObject cname: __pyx_n_u_in_coll */
  {__pyx_k_in_collection, sizeof(__pyx_k_in_collection), 0, 1, 1}, /* PyObject cname: __pyx_n_u_in_collection */
  {__pyx_k_ind, sizeof(__pyx_k_ind), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ind */
  {__pyx_k_ind64, sizeof(__pyx_k_ind64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ind64 */
  {__pyx_k_index, sizeof(__pyx_k_index), 0, 1, 1}, /* PyObject cname: __pyx_n_u_index */
  {__pyx_k_index_order1, sizeof(__pyx_k_index_order1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_index_order1 */
  {__pyx_k_index_order2, sizeof(__pyx_k_index_order2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_index_order2 */
  {__pyx_k_index_root, sizeof(__pyx_k_index_root), 0, 1, 1}, /* PyObject cname: __pyx_n_u_index_root */
  {__pyx_k_indices, sizeof(__pyx_k_indices), 0, 1, 1}, /* PyObject cname: __pyx_n_u_indices */
  {__pyx_k_init, sizeof(__pyx_k_init), 0, 1, 1}, /* PyObject cname: __pyx_n_u_init */
  {__pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initializing */
  {__pyx_k_int32, sizeof(__pyx_k_int32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_int32 */
  {__pyx_k_int64, sizeof(__pyx_k_int64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_int64 */
  {__pyx_k_io_handler, sizeof(__pyx_k_io_handler), 0, 1, 1}, /* PyObject cname: __pyx_n_u_io_handler */
  {__pyx_k_irflag, sizeof(__pyx_k_irflag), 0, 1, 1}, /* PyObject cname: __pyx_n_u_irflag */
  {__pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_coroutine */
  {__pyx_k_is_negative_with_value, sizeof(__pyx_k_is_negative_with_value), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_is_negative_with_value */
  {__pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_isenabled */
  {__pyx_k_iseq_bitmask, sizeof(__pyx_k_iseq_bitmask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_iseq_bitmask */
  {__pyx_k_isfile, sizeof(__pyx_k_isfile), 0, 1, 1}, /* PyObject cname: __pyx_n_u_isfile */
  {__pyx_k_it_mi1, sizeof(__pyx_k_it_mi1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_it_mi1 */
  {__pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 1, 1}, /* PyObject cname: __pyx_n_u_itemsize */
  {__pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_itemsize_0_for_cython_array */
  {__pyx_k_iter, sizeof(__pyx_k_iter), 0, 1, 1}, /* PyObject cname: __pyx_n_u_iter */
  {__pyx_k_iter_end, sizeof(__pyx_k_iter_end), 0, 1, 1}, /* PyObject cname: __pyx_n_u_iter_end */
  {__pyx_k_iter_set, sizeof(__pyx_k_iter_set), 0, 1, 1}, /* PyObject cname: __pyx_n_u_iter_set */
  {__pyx_k_j, sizeof(__pyx_k_j), 0, 1, 1}, /* PyObject cname: __pyx_n_u_j */
  {__pyx_k_join, sizeof(__pyx_k_join), 0, 1, 1}, /* PyObject cname: __pyx_n_u_join */
  {__pyx_k_k, sizeof(__pyx_k_k), 0, 1, 1}, /* PyObject cname: __pyx_n_u_k */
  {__pyx_k_kind, sizeof(__pyx_k_kind), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kind */
  {__pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kwargs */
  {__pyx_k_left_edge, sizeof(__pyx_k_left_edge), 0, 1, 1}, /* PyObject cname: __pyx_n_u_left_edge */
  {__pyx_k_level, sizeof(__pyx_k_level), 0, 1, 1}, /* PyObject cname: __pyx_n_u_level */
  {__pyx_k_level_counts, sizeof(__pyx_k_level_counts), 0, 1, 1}, /* PyObject cname: __pyx_n_u_level_counts */
  {__pyx_k_little, sizeof(__pyx_k_little), 0, 1, 1}, /* PyObject cname: __pyx_n_u_little */
  {__pyx_k_load_bitmasks, sizeof(__pyx_k_load_bitmasks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_load_bitmasks */
  {__pyx_k_log2, sizeof(__pyx_k_log2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_log2 */
  {__pyx_k_lpos, sizeof(__pyx_k_lpos), 0, 1, 1}, /* PyObject cname: __pyx_n_u_lpos */
  {__pyx_k_main, sizeof(__pyx_k_main), 0, 1, 1}, /* PyObject cname: __pyx_n_u_main */
  {__pyx_k_mask, sizeof(__pyx_k_mask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mask */
  {__pyx_k_mask2, sizeof(__pyx_k_mask2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mask2 */
  {__pyx_k_mask2filemasks, sizeof(__pyx_k_mask2filemasks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mask2filemasks */
  {__pyx_k_mask2files, sizeof(__pyx_k_mask2files), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mask2files */
  {__pyx_k_mask_threshold, sizeof(__pyx_k_mask_threshold), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mask_threshold */
  {__pyx_k_mask_to_files, sizeof(__pyx_k_mask_to_files), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mask_to_files */
  {__pyx_k_masklevel, sizeof(__pyx_k_masklevel), 0, 1, 1}, /* PyObject cname: __pyx_n_u_masklevel */
  {__pyx_k_masks_to_files, sizeof(__pyx_k_masks_to_files), 0, 1, 1}, /* PyObject cname: __pyx_n_u_masks_to_files */
  {__pyx_k_max, sizeof(__pyx_k_max), 0, 1, 1}, /* PyObject cname: __pyx_n_u_max */
  {__pyx_k_max_hsml, sizeof(__pyx_k_max_hsml), 0, 1, 1}, /* PyObject cname: __pyx_n_u_max_hsml */
  {__pyx_k_max_hsml_not_found_in_the, sizeof(__pyx_k_max_hsml_not_found_in_the), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_max_hsml_not_found_in_the */
  {__pyx_k_max_index_order2, sizeof(__pyx_k_max_index_order2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_max_index_order2 */
  {__pyx_k_max_level, sizeof(__pyx_k_max_level), 0, 1, 1}, /* PyObject cname: __pyx_n_u_max_level */
  {__pyx_k_memview, sizeof(__pyx_k_memview), 0, 1, 1}, /* PyObject cname: __pyx_n_u_memview */
  {__pyx_k_mi, sizeof(__pyx_k_mi), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mi */
  {__pyx_k_mi1, sizeof(__pyx_k_mi1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mi1 */
  {__pyx_k_mi_root, sizeof(__pyx_k_mi_root), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mi_root */
  {__pyx_k_mm_d, sizeof(__pyx_k_mm_d), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mm_d */
  {__pyx_k_mm_g, sizeof(__pyx_k_mm_g), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mm_g */
  {__pyx_k_mm_g0, sizeof(__pyx_k_mm_g0), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mm_g0 */
  {__pyx_k_mm_s, sizeof(__pyx_k_mm_s), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mm_s */
  {__pyx_k_mm_s0, sizeof(__pyx_k_mm_s0), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mm_s0 */
  {__pyx_k_mode, sizeof(__pyx_k_mode), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mode */
  {__pyx_k_module, sizeof(__pyx_k_module), 0, 1, 1}, /* PyObject cname: __pyx_n_u_module */
  {__pyx_k_morton_ind, sizeof(__pyx_k_morton_ind), 0, 1, 1}, /* PyObject cname: __pyx_n_u_morton_ind */
  {__pyx_k_morton_selector, sizeof(__pyx_k_morton_selector), 0, 1, 1}, /* PyObject cname: __pyx_n_u_morton_selector */
  {__pyx_k_n_ref, sizeof(__pyx_k_n_ref), 0, 1, 1}, /* PyObject cname: __pyx_n_u_n_ref */
  {__pyx_k_name, sizeof(__pyx_k_name), 0, 1, 1}, /* PyObject cname: __pyx_n_u_name */
  {__pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_name_2 */
  {__pyx_k_nbitmasks, sizeof(__pyx_k_nbitmasks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nbitmasks */
  {__pyx_k_nc, sizeof(__pyx_k_nc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nc */
  {__pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ndim */
  {__pyx_k_ndst, sizeof(__pyx_k_ndst), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ndst */
  {__pyx_k_new, sizeof(__pyx_k_new), 0, 1, 1}, /* PyObject cname: __pyx_n_u_new */
  {__pyx_k_next, sizeof(__pyx_k_next), 0, 1, 1}, /* PyObject cname: __pyx_n_u_next */
  {__pyx_k_nfile, sizeof(__pyx_k_nfile), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nfile */
  {__pyx_k_nfiles, sizeof(__pyx_k_nfiles), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nfiles */
  {__pyx_k_ngz, sizeof(__pyx_k_ngz), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ngz */
  {__pyx_k_nm, sizeof(__pyx_k_nm), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nm */
  {__pyx_k_no, sizeof(__pyx_k_no), 0, 1, 1}, /* PyObject cname: __pyx_n_u_no */
  {__pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_no_default___reduce___due_to_non */
  {__pyx_k_np, sizeof(__pyx_k_np), 0, 1, 1}, /* PyObject cname: __pyx_n_u_np */
  {__pyx_k_nprev_octs, sizeof(__pyx_k_nprev_octs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nprev_octs */
  {__pyx_k_nroot, sizeof(__pyx_k_nroot), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nroot */
  {__pyx_k_nsub_mi, sizeof(__pyx_k_nsub_mi), 0, 1, 1}, /* PyObject cname: __pyx_n_u_nsub_mi */
  {__pyx_k_num_root, sizeof(__pyx_k_num_root), 0, 1, 1}, /* PyObject cname: __pyx_n_u_num_root */
  {__pyx_k_num_zones, sizeof(__pyx_k_num_zones), 0, 1, 1}, /* PyObject cname: __pyx_n_u_num_zones */
  {__pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_numpy */
  {__pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_numpy_core_multiarray_failed_to */
  {__pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_numpy_core_umath_failed_to_impor */
  {__pyx_k_o, sizeof(__pyx_k_o), 0, 1, 1}, /* PyObject cname: __pyx_n_u_o */
  {__pyx_k_obj, sizeof(__pyx_k_obj), 0, 1, 1}, /* PyObject cname: __pyx_n_u_obj */
  {__pyx_k_object, sizeof(__pyx_k_object), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_object */
  {__pyx_k_object_2, sizeof(__pyx_k_object_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_object_2 */
  {__pyx_k_oct_mask, sizeof(__pyx_k_oct_mask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_oct_mask */
  {__pyx_k_octree, sizeof(__pyx_k_octree), 0, 1, 1}, /* PyObject cname: __pyx_n_u_octree */
  {__pyx_k_oi, sizeof(__pyx_k_oi), 0, 1, 1}, /* PyObject cname: __pyx_n_u_oi */
  {__pyx_k_order, sizeof(__pyx_k_order), 0, 1, 1}, /* PyObject cname: __pyx_n_u_order */
  {__pyx_k_order1, sizeof(__pyx_k_order1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_order1 */
  {__pyx_k_os, sizeof(__pyx_k_os), 0, 1, 1}, /* PyObject cname: __pyx_n_u_os */
  {__pyx_k_out, sizeof(__pyx_k_out), 0, 1, 1}, /* PyObject cname: __pyx_n_u_out */
  {__pyx_k_out_collection, sizeof(__pyx_k_out_collection), 0, 1, 1}, /* PyObject cname: __pyx_n_u_out_collection */
  {__pyx_k_overwrite, sizeof(__pyx_k_overwrite), 0, 1, 1}, /* PyObject cname: __pyx_n_u_overwrite */
  {__pyx_k_p, sizeof(__pyx_k_p), 0, 1, 1}, /* PyObject cname: __pyx_n_u_p */
  {__pyx_k_pack, sizeof(__pyx_k_pack), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pack */
  {__pyx_k_path, sizeof(__pyx_k_path), 0, 1, 1}, /* PyObject cname: __pyx_n_u_path */
  {__pyx_k_pb, sizeof(__pyx_k_pb), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pb */
  {__pyx_k_periodic, sizeof(__pyx_k_periodic), 0, 1, 1}, /* PyObject cname: __pyx_n_u_periodic */
  {__pyx_k_periodicity, sizeof(__pyx_k_periodicity), 0, 1, 1}, /* PyObject cname: __pyx_n_u_periodicity */
  {__pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pickle */
  {__pyx_k_pop, sizeof(__pyx_k_pop), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pop */
  {__pyx_k_pos, sizeof(__pyx_k_pos), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pos */
  {__pyx_k_pos32, sizeof(__pyx_k_pos32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pos32 */
  {__pyx_k_pos64, sizeof(__pyx_k_pos64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pos64 */
  {__pyx_k_ppos, sizeof(__pyx_k_ppos), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ppos */
  {__pyx_k_primary_indices, sizeof(__pyx_k_primary_indices), 0, 1, 1}, /* PyObject cname: __pyx_n_u_primary_indices */
  {__pyx_k_print, sizeof(__pyx_k_print), 0, 1, 1}, /* PyObject cname: __pyx_n_u_print */
  {__pyx_k_print_info, sizeof(__pyx_k_print_info), 0, 1, 1}, /* PyObject cname: __pyx_n_u_print_info */
  {__pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyx_checksum */
  {__pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyx_state */
  {__pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyx_type */
  {__pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyx_unpickle_Enum */
  {__pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyx_vtable */
  {__pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 1, 1}, /* PyObject cname: __pyx_n_u_qualname */
  {__pyx_k_r, sizeof(__pyx_k_r), 0, 1, 1}, /* PyObject cname: __pyx_n_u_r */
  {__pyx_k_range, sizeof(__pyx_k_range), 0, 1, 1}, /* PyObject cname: __pyx_n_u_range */
  {__pyx_k_rc, sizeof(__pyx_k_rc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_rc */
  {__pyx_k_read_flag, sizeof(__pyx_k_read_flag), 0, 1, 1}, /* PyObject cname: __pyx_n_u_read_flag */
  {__pyx_k_recursively_count, sizeof(__pyx_k_recursively_count), 0, 1, 1}, /* PyObject cname: __pyx_n_u_recursively_count */
  {__pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce */
  {__pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce_cython */
  {__pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce_ex */
  {__pyx_k_refined_index_data_file, sizeof(__pyx_k_refined_index_data_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_refined_index_data_file */
  {__pyx_k_refined_index_data_file_ndarray, sizeof(__pyx_k_refined_index_data_file_ndarray), 0, 1, 1}, /* PyObject cname: __pyx_n_u_refined_index_data_file_ndarray */
  {__pyx_k_register, sizeof(__pyx_k_register), 0, 1, 1}, /* PyObject cname: __pyx_n_u_register */
  {__pyx_k_reset_bitmasks, sizeof(__pyx_k_reset_bitmasks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reset_bitmasks */
  {__pyx_k_right_edge, sizeof(__pyx_k_right_edge), 0, 1, 1}, /* PyObject cname: __pyx_n_u_right_edge */
  {__pyx_k_root, sizeof(__pyx_k_root), 0, 1, 1}, /* PyObject cname: __pyx_n_u_root */
  {__pyx_k_root_count, sizeof(__pyx_k_root_count), 0, 1, 1}, /* PyObject cname: __pyx_n_u_root_count */
  {__pyx_k_rpos, sizeof(__pyx_k_rpos), 0, 1, 1}, /* PyObject cname: __pyx_n_u_rpos */
  {__pyx_k_save_bitmasks, sizeof(__pyx_k_save_bitmasks), 0, 1, 1}, /* PyObject cname: __pyx_n_u_save_bitmasks */
  {__pyx_k_sbbox, sizeof(__pyx_k_sbbox), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sbbox */
  {__pyx_k_selector, sizeof(__pyx_k_selector), 0, 1, 1}, /* PyObject cname: __pyx_n_u_selector */
  {__pyx_k_selector2mask, sizeof(__pyx_k_selector2mask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_selector2mask */
  {__pyx_k_selector_mask, sizeof(__pyx_k_selector_mask), 0, 1, 1}, /* PyObject cname: __pyx_n_u_selector_mask */
  {__pyx_k_self, sizeof(__pyx_k_self), 0, 1, 1}, /* PyObject cname: __pyx_n_u_self */
  {__pyx_k_self__ptr_octs_per_root_self_oct, sizeof(__pyx_k_self__ptr_octs_per_root_self_oct), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_self__ptr_octs_per_root_self_oct */
  {__pyx_k_self_dom_offsets_self_oct_list_s, sizeof(__pyx_k_self_dom_offsets_self_oct_list_s), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_self_dom_offsets_self_oct_list_s */
  {__pyx_k_self_file_markers_cannot_be_conv, sizeof(__pyx_k_self_file_markers_cannot_be_conv), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_self_file_markers_cannot_be_conv */
  {__pyx_k_send, sizeof(__pyx_k_send), 0, 1, 1}, /* PyObject cname: __pyx_n_u_send */
  {__pyx_k_serial_BAC, sizeof(__pyx_k_serial_BAC), 0, 1, 1}, /* PyObject cname: __pyx_n_u_serial_BAC */
  {__pyx_k_set_coarse_index_data_file, sizeof(__pyx_k_set_coarse_index_data_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_set_coarse_index_data_file */
  {__pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 1, 1}, /* PyObject cname: __pyx_n_u_set_name */
  {__pyx_k_set_refined_index_data_file, sizeof(__pyx_k_set_refined_index_data_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_set_refined_index_data_file */
  {__pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setstate */
  {__pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setstate_cython */
  {__pyx_k_sfiles, sizeof(__pyx_k_sfiles), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sfiles */
  {__pyx_k_sfiles_view, sizeof(__pyx_k_sfiles_view), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sfiles_view */
  {__pyx_k_shape, sizeof(__pyx_k_shape), 0, 1, 1}, /* PyObject cname: __pyx_n_u_shape */
  {__pyx_k_signed, sizeof(__pyx_k_signed), 0, 1, 1}, /* PyObject cname: __pyx_n_u_signed */
  {__pyx_k_size, sizeof(__pyx_k_size), 0, 1, 1}, /* PyObject cname: __pyx_n_u_size */
  {__pyx_k_slct_arr, sizeof(__pyx_k_slct_arr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_slct_arr */
  {__pyx_k_solf, sizeof(__pyx_k_solf), 0, 1, 1}, /* PyObject cname: __pyx_n_u_solf */
  {__pyx_k_sort, sizeof(__pyx_k_sort), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sort */
  {__pyx_k_spec, sizeof(__pyx_k_spec), 0, 1, 1}, /* PyObject cname: __pyx_n_u_spec */
  {__pyx_k_split, sizeof(__pyx_k_split), 0, 1, 1}, /* PyObject cname: __pyx_n_u_split */
  {__pyx_k_start, sizeof(__pyx_k_start), 0, 1, 1}, /* PyObject cname: __pyx_n_u_start */
  {__pyx_k_step, sizeof(__pyx_k_step), 0, 1, 1}, /* PyObject cname: __pyx_n_u_step */
  {__pyx_k_stop, sizeof(__pyx_k_stop), 0, 1, 1}, /* PyObject cname: __pyx_n_u_stop */
  {__pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_strided_and_direct */
  {__pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_strided_and_direct_or_indirect */
  {__pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_strided_and_indirect */
  {__pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_stringsource */
  {__pyx_k_strip, sizeof(__pyx_k_strip), 0, 1, 1}, /* PyObject cname: __pyx_n_u_strip */
  {__pyx_k_struct, sizeof(__pyx_k_struct), 0, 1, 1}, /* PyObject cname: __pyx_n_u_struct */
  {__pyx_k_sub_mi1, sizeof(__pyx_k_sub_mi1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sub_mi1 */
  {__pyx_k_sub_mi2, sizeof(__pyx_k_sub_mi2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sub_mi2 */
  {__pyx_k_sum, sizeof(__pyx_k_sum), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sum */
  {__pyx_k_super, sizeof(__pyx_k_super), 0, 1, 1}, /* PyObject cname: __pyx_n_u_super */
  {__pyx_k_test, sizeof(__pyx_k_test), 0, 1, 1}, /* PyObject cname: __pyx_n_u_test */
  {__pyx_k_throw, sizeof(__pyx_k_throw), 0, 1, 1}, /* PyObject cname: __pyx_n_u_throw */
  {__pyx_k_to_bytes, sizeof(__pyx_k_to_bytes), 0, 1, 1}, /* PyObject cname: __pyx_n_u_to_bytes */
  {__pyx_k_tobytes, sizeof(__pyx_k_tobytes), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tobytes */
  {__pyx_k_total_particles, sizeof(__pyx_k_total_particles), 0, 1, 1}, /* PyObject cname: __pyx_n_u_total_particles */
  {__pyx_k_total_pcount, sizeof(__pyx_k_total_pcount), 0, 1, 1}, /* PyObject cname: __pyx_n_u_total_pcount */
  {__pyx_k_u8, sizeof(__pyx_k_u8), 0, 1, 1}, /* PyObject cname: __pyx_n_u_u8 */
  {__pyx_k_uint32, sizeof(__pyx_k_uint32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_uint32 */
  {__pyx_k_uint64, sizeof(__pyx_k_uint64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_uint64 */
  {__pyx_k_uint8, sizeof(__pyx_k_uint8), 0, 1, 1}, /* PyObject cname: __pyx_n_u_uint8 */
  {__pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_unable_to_allocate_array_data */
  {__pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_unable_to_allocate_shape_and_str */
  {__pyx_k_units, sizeof(__pyx_k_units), 0, 1, 1}, /* PyObject cname: __pyx_n_u_units */
  {__pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 1, 1}, /* PyObject cname: __pyx_n_u_unpack */
  {__pyx_k_update, sizeof(__pyx_k_update), 0, 1, 1}, /* PyObject cname: __pyx_n_u_update */
  {__pyx_k_update_mi2, sizeof(__pyx_k_update_mi2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_update_mi2 */
  {__pyx_k_value, sizeof(__pyx_k_value), 0, 1, 1}, /* PyObject cname: __pyx_n_u_value */
  {__pyx_k_values, sizeof(__pyx_k_values), 0, 1, 1}, /* PyObject cname: __pyx_n_u_values */
  {__pyx_k_vec_totref, sizeof(__pyx_k_vec_totref), 0, 1, 1}, /* PyObject cname: __pyx_n_u_vec_totref */
  {__pyx_k_ver, sizeof(__pyx_k_ver), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ver */
  {__pyx_k_verbose, sizeof(__pyx_k_verbose), 0, 1, 1}, /* PyObject cname: __pyx_n_u_verbose */
  {__pyx_k_visitor, sizeof(__pyx_k_visitor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_visitor */
  {__pyx_k_void, sizeof(__pyx_k_void), 0, 1, 1}, /* PyObject cname: __pyx_n_u_void */
  {__pyx_k_where, sizeof(__pyx_k_where), 0, 1, 1}, /* PyObject cname: __pyx_n_u_where */
  {__pyx_k_x, sizeof(__pyx_k_x), 0, 1, 1}, /* PyObject cname: __pyx_n_u_x */
  {__pyx_k_yield_coordinates, sizeof(__pyx_k_yield_coordinates), 0, 1, 1}, /* PyObject cname: __pyx_n_u_yield_coordinates */
  {__pyx_k_yt_funcs, sizeof(__pyx_k_yt_funcs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_yt_funcs */
  {__pyx_k_yt_geometry_particle_oct_contain, sizeof(__pyx_k_yt_geometry_particle_oct_contain), 0, 1, 1}, /* PyObject cname: __pyx_n_u_yt_geometry_particle_oct_contain */
  {__pyx_k_yt_geometry_particle_oct_contain_2, sizeof(__pyx_k_yt_geometry_particle_oct_contain_2), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_yt_geometry_particle_oct_contain_2 */
  {__pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 1, 1}, /* PyObject cname: __pyx_n_u_zeros */
  {__pyx_k_zip, sizeof(__pyx_k_zip), 0, 1, 1}, /* PyObject cname: __pyx_n_u_zip */
  {0, 0, 0, 0, 0}
};
/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names);

/* #### Code section: cached_builtins ### */

static int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_range); if (!__pyx_builtin_range) __PYX_ERR(0, 84, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 163, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 226, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_super); if (!__pyx_builtin_super) __PYX_ERR(0, 368, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 530, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 635, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 1005, __pyx_L1_error)
  __pyx_builtin_OSError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_OSError); if (!__pyx_builtin_OSError) __PYX_ERR(0, 1039, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 1219, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 1219, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 1374, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 79, __pyx_L1_error)
  __pyx_builtin___import__ = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_import); if (!__pyx_builtin___import__) __PYX_ERR(1, 101, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(1, 408, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_id); if (!__pyx_builtin_id) __PYX_ERR(1, 618, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 984, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "View.MemoryView":582
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
*/
  __pyx_mstate_global->__pyx_tuple[0] = PyTuple_New(1); if (unlikely(!__pyx_mstate_global->__pyx_tuple[0])) __PYX_ERR(1, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[0]);
  __Pyx_INCREF(__pyx_mstate_global->__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_int_neg_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_mstate_global->__pyx_tuple[0], 0, __pyx_mstate_global->__pyx_int_neg_1) != (0)) __PYX_ERR(1, 582, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[0]);

  /* "View.MemoryView":679
 *     tup = <tuple>index if isinstance(index, tuple) else (index,)
 * 
 *     result = [slice(None)] * ndim             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
*/
  __pyx_mstate_global->__pyx_slice[0] = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_slice[0])) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_slice[0]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_slice[0]);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
*/
  __pyx_mstate_global->__pyx_tuple[1] = PyTuple_Pack(3, __pyx_mstate_global->__pyx_int_136983863, __pyx_mstate_global->__pyx_int_112105877, __pyx_mstate_global->__pyx_int_184977713); if (unlikely(!__pyx_mstate_global->__pyx_tuple[1])) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[1]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[1]);

  /* "yt/geometry/particle_oct_container.pyx":482
 *         self.collisions = BoolArrayCollection()
 *         hash_data = bytearray()
 *         hash_data.extend(self.file_hash.to_bytes(8, "little", signed=True))             # <<<<<<<<<<<<<<
 *         hash_data.extend(np.array(self.left_edge).tobytes())
 *         hash_data.extend(np.array(self.right_edge).tobytes())
*/
  __pyx_mstate_global->__pyx_tuple[2] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_8, __pyx_mstate_global->__pyx_n_u_little); if (unlikely(!__pyx_mstate_global->__pyx_tuple[2])) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[2]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[2]);

  /* "yt/geometry/particle_oct_container.pyx":487
 *         hash_data.extend(np.array(self.periodicity).tobytes())
 *         hash_data.extend(self.nfiles.to_bytes(8, "little", signed=False))
 *         hash_data.extend(self.index_order1.to_bytes(4, "little", signed=True))             # <<<<<<<<<<<<<<
 *         hash_data.extend(self.index_order2.to_bytes(4, "little", signed=True))
 *         self.hash_value = fnv_hash(hash_data)
*/
  __pyx_mstate_global->__pyx_tuple[3] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_4, __pyx_mstate_global->__pyx_n_u_little); if (unlikely(!__pyx_mstate_global->__pyx_tuple[3])) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[3]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[3]);

  /* "yt/geometry/particle_oct_container.pyx":744
 *             sorted_order = np.argsort(morton_indices).astype(np.uint64, copy=False)
 *         else:
 *             sorted_order = np.argsort(hsml)[::-1].astype(np.uint64, copy=False)             # <<<<<<<<<<<<<<
 *         for sorted_ind in range(sorted_order.shape[0]):
 *             p = sorted_order[sorted_ind]
*/
  __pyx_mstate_global->__pyx_slice[1] = PySlice_New(Py_None, Py_None, __pyx_mstate_global->__pyx_int_neg_1); if (unlikely(!__pyx_mstate_global->__pyx_slice[1])) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_slice[1]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_slice[1]);
  __pyx_mstate_global->__pyx_slice[2] = PySlice_New(Py_None, Py_None, __pyx_mstate_global->__pyx_int_neg_1); if (unlikely(!__pyx_mstate_global->__pyx_slice[2])) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_slice[2]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_slice[2]);

  /* "yt/geometry/particle_oct_container.pyx":1001
 *         cdef bytes serial_BAC
 *         cdef np.uint64_t ifile
 *         with h5py.File(fname, mode="a") as fp:             # <<<<<<<<<<<<<<
 *             try:
 *                 grp = fp[str(self.hash_value)]
*/
  __pyx_mstate_global->__pyx_tuple[4] = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[4])) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[4]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[4]);

  /* "yt/geometry/particle_oct_container.pyx":148
 *         pass
 * 
 *     def finalize(self, int domain_id = 0):             # <<<<<<<<<<<<<<
 *         #This will sort the octs in the oct list
 *         #so that domains appear consecutively
*/
  __pyx_mstate_global->__pyx_tuple[5] = PyTuple_Pack(1, __pyx_mstate_global->__pyx_int_0); if (unlikely(!__pyx_mstate_global->__pyx_tuple[5])) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[5]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[5]);

  /* "yt/geometry/particle_oct_container.pyx":370
 *         super(ParticleOctreeContainer,self).domain_ind(selector, domain_id = domain_id)
 * 
 *     def domain_ind(self, selector, int domain_id = -1,             # <<<<<<<<<<<<<<
 *                    BoolArrayCollection mask = None, int masklevel = 99):
 *         if mask is None:
*/
  __pyx_mstate_global->__pyx_tuple[6] = PyTuple_Pack(3, __pyx_mstate_global->__pyx_int_neg_1, Py_None, __pyx_mstate_global->__pyx_int_99); if (unlikely(!__pyx_mstate_global->__pyx_tuple[6])) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[6]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[6]);

  /* "yt/geometry/particle_oct_container.pyx":497
 *         return self.bitmasks._intersects(ifile, bcoll)
 * 
 *     def update_mi2(self, np.float64_t characteristic_size,             # <<<<<<<<<<<<<<
 *                    np.uint64_t max_index_order2 = 6):
 *         """
*/
  __pyx_mstate_global->__pyx_tuple[7] = PyTuple_Pack(1, __pyx_mstate_global->__pyx_int_6); if (unlikely(!__pyx_mstate_global->__pyx_tuple[7])) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[7]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[7]);

  /* "yt/geometry/particle_oct_container.pyx":658
 *                 bitmasks._set_coarse(file_id, i)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_mstate_global->__pyx_tuple[8] = PyTuple_Pack(2, __pyx_mstate_global->__pyx_int_128, __pyx_mstate_global->__pyx_int_2); if (unlikely(!__pyx_mstate_global->__pyx_tuple[8])) __PYX_ERR(0, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[8]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[8]);

  /* "yt/geometry/particle_oct_container.pyx":940
 *         bitmasks._set_refined_index_array(file_id, nsub_mi, sub_mi1, sub_mi2)
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_mstate_global->__pyx_tuple[9] = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_mstate_global->__pyx_tuple[9])) __PYX_ERR(0, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[9]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[9]);

  /* "yt/geometry/particle_oct_container.pyx":949
 *         return cc, rc
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_mstate_global->__pyx_tuple[10] = PyTuple_Pack(2, Py_False, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[10])) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[10]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[10]);

  /* "yt/geometry/particle_oct_container.pyx":958
 *         return nc, nm
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_mstate_global->__pyx_tuple[11] = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[11])) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[11]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[11]);

  /* "yt/geometry/particle_oct_container.pyx":1166
 *         return DRE
 * 
 *     @cython.boundscheck(False)             # <<<<<<<<<<<<<<
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
*/
  __pyx_mstate_global->__pyx_tuple[12] = PyTuple_Pack(2, Py_None, Py_False); if (unlikely(!__pyx_mstate_global->__pyx_tuple[12])) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[12]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[12]);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __pyx_mstate->__pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_mstate->__pyx_umethod_PyDict_Type_get.method_name = &__pyx_mstate->__pyx_n_u_get;
  __pyx_mstate->__pyx_umethod_PyDict_Type_pop.type = (PyObject*)&PyDict_Type;
  __pyx_mstate->__pyx_umethod_PyDict_Type_pop.method_name = &__pyx_mstate->__pyx_n_u_pop;
  __pyx_mstate->__pyx_umethod_PyDict_Type_values.type = (PyObject*)&PyDict_Type;
  __pyx_mstate->__pyx_umethod_PyDict_Type_values.method_name = &__pyx_mstate->__pyx_n_u_values;
  __pyx_mstate->__pyx_umethod_PyByteArray_Type__extend.type = (PyObject*)(&PyByteArray_Type);
  __pyx_mstate->__pyx_umethod_PyByteArray_Type__extend.method_name = &__pyx_mstate->__pyx_n_u_extend;
  if (__Pyx_InitStrings(__pyx_string_tab, __pyx_mstate->__pyx_string_tab, __pyx_string_tab_encodings) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_mstate->__pyx_int_0 = PyLong_FromLong(0); if (unlikely(!__pyx_mstate->__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_1 = PyLong_FromLong(1); if (unlikely(!__pyx_mstate->__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_2 = PyLong_FromLong(2); if (unlikely(!__pyx_mstate->__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_3 = PyLong_FromLong(3); if (unlikely(!__pyx_mstate->__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_4 = PyLong_FromLong(4); if (unlikely(!__pyx_mstate->__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_5 = PyLong_FromLong(5); if (unlikely(!__pyx_mstate->__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_6 = PyLong_FromLong(6); if (unlikely(!__pyx_mstate->__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_8 = PyLong_FromLong(8); if (unlikely(!__pyx_mstate->__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_99 = PyLong_FromLong(99); if (unlikely(!__pyx_mstate->__pyx_int_99)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_128 = PyLong_FromLong(128); if (unlikely(!__pyx_mstate->__pyx_int_128)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_112105877 = PyLong_FromLong(112105877L); if (unlikely(!__pyx_mstate->__pyx_int_112105877)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_136983863 = PyLong_FromLong(136983863L); if (unlikely(!__pyx_mstate->__pyx_int_136983863)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_184977713 = PyLong_FromLong(184977713L); if (unlikely(!__pyx_mstate->__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_int_neg_1 = PyLong_FromLong(-1); if (unlikely(!__pyx_mstate->__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_codeobjects ### */
\
        typedef struct {
            unsigned int argcount : 4;
            unsigned int num_posonly_args : 1;
            unsigned int num_kwonly_args : 1;
            unsigned int nlocals : 6;
            unsigned int flags : 10;
            unsigned int first_line : 12;
            unsigned int line_table_length : 15;
        } __Pyx_PyCode_New_function_description;
/* NewCodeObj.proto */
static PyObject* __Pyx_PyCode_New(
        const __Pyx_PyCode_New_function_description descr,
        PyObject * const *varnames,
        PyObject *filename,
        PyObject *funcname,
        const char *line_table,
        PyObject *tuple_dedup_map
);


static int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate) {
  PyObject* tuple_dedup_map = PyDict_New();
  if (unlikely(!tuple_dedup_map)) return -1;
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS|CO_GENERATOR), 135, 2};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_oi, __pyx_mstate->__pyx_n_u_o};
    __pyx_mstate_global->__pyx_codeobj_tab[0] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_iter, __pyx_k_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[0])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 81, 83};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_j, __pyx_mstate->__pyx_n_u_k, __pyx_mstate->__pyx_n_u_cur};
    __pyx_mstate_global->__pyx_codeobj_tab[1] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_allocate_root, __pyx_k_A_E_at3aq_U_4s_1_E_at3aq_m1_2Qb, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[1])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 117, 76};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_j, __pyx_mstate->__pyx_n_u_k};
    __pyx_mstate_global->__pyx_codeobj_tab[2] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_clear_fileind, __pyx_k_A_E_at3aq_U_4s_1_E_at3aq_AT_1Bar, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[2])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 145, 2};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_domain_counts};
    __pyx_mstate_global->__pyx_codeobj_tab[3] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_allocate_domains, __pyx_k_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[3])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 148, 182};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_domain_id, __pyx_mstate->__pyx_n_u_max_level, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_lpos, __pyx_mstate->__pyx_n_u_j, __pyx_mstate->__pyx_n_u_k};
    __pyx_mstate_global->__pyx_codeobj_tab[4] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_finalize, __pyx_k_q_Q_L_a_1D_Ja_E_at3aq_U_4s_1_E, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[4])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 11, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 198, 409};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_indices, __pyx_mstate->__pyx_n_u_order, __pyx_mstate->__pyx_n_u_no, __pyx_mstate->__pyx_n_u_p, __pyx_mstate->__pyx_n_u_index, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_level, __pyx_mstate->__pyx_n_u_ind, __pyx_mstate->__pyx_n_u_data, __pyx_mstate->__pyx_n_u_cur};
    __pyx_mstate_global->__pyx_codeobj_tab[5] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_add, __pyx_k_A_WF_1_4z_ARq_3fD_a_1_E_aq_A_G1A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[5])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 292, 171};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_j, __pyx_mstate->__pyx_n_u_k, __pyx_mstate->__pyx_n_u_counts, __pyx_mstate->__pyx_n_u_level_counts};
    __pyx_mstate_global->__pyx_codeobj_tab[6] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_recursively_count, __pyx_k_A_E_avV1E_E_at3aq_U_4s_1_E_at3aq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[6])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 361, 91};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_domain_id, __pyx_mstate->__pyx_n_u_mask, __pyx_mstate->__pyx_n_u_masklevel, __pyx_mstate->__pyx_n_u_selector, __pyx_mstate->__pyx_n_u_ind, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[7] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_apply_domain, __pyx_k_A_Qa_d_Qj_v_E_at1_s_3b_1_Ja_Q_e, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[7])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 15, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 370, 259};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_selector, __pyx_mstate->__pyx_n_u_domain_id, __pyx_mstate->__pyx_n_u_mask, __pyx_mstate->__pyx_n_u_masklevel, __pyx_mstate->__pyx_n_u_ewah_slct, __pyx_mstate->__pyx_n_u_iter_set, __pyx_mstate->__pyx_n_u_iter_end, __pyx_mstate->__pyx_n_u_oct_mask, __pyx_mstate->__pyx_n_u_o, __pyx_mstate->__pyx_n_u_coct, __pyx_mstate->__pyx_n_u_cmi, __pyx_mstate->__pyx_n_u_mi, __pyx_mstate->__pyx_n_u_ind, __pyx_mstate->__pyx_n_u_visitor};
    __pyx_mstate_global->__pyx_codeobj_tab[8] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_domain_ind, __pyx_k_4A_DA_5_1_5_1_k_LXY_d_B_9ARvUV, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[8])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[9] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[9])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[10] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[10])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 491, 17};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_ifile, __pyx_mstate->__pyx_n_u_bcoll, __pyx_mstate->__pyx_n_u_out};
    __pyx_mstate_global->__pyx_codeobj_tab[11] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_bitmask_logicaland, __pyx_k_A_I, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[11])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 494, 17};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_ifile, __pyx_mstate->__pyx_n_u_bcoll};
    __pyx_mstate_global->__pyx_codeobj_tab[12] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_bitmask_intersects, __pyx_k_A_t9L, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[12])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 497, 120};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_characteristic_size, __pyx_mstate->__pyx_n_u_max_index_order2, __pyx_mstate->__pyx_n_u_index_order2, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[13] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_update_mi2, __pyx_k_A23_4_A_4q_E_aq_t81Cr_6a_a_4q_AT, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[13])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 530, 20};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pos, __pyx_mstate->__pyx_n_u_hsml, __pyx_mstate->__pyx_n_u_file_id};
    __pyx_mstate_global->__pyx_codeobj_tab[14] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_coarse_index_data_file_ndarray, __pyx_k_A_t_AU, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[14])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 530, 20};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pos, __pyx_mstate->__pyx_n_u_hsml, __pyx_mstate->__pyx_n_u_file_id};
    __pyx_mstate_global->__pyx_codeobj_tab[15] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_coarse_index_data_file_ndarray, __pyx_k_A_t_AU, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[15])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 530, 20};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pos, __pyx_mstate->__pyx_n_u_hsml, __pyx_mstate->__pyx_n_u_file_id};
    __pyx_mstate_global->__pyx_codeobj_tab[16] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_coarse_index_data_file_ndarray, __pyx_k_A_t_AU, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[16])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 640, 16};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_file_id};
    __pyx_mstate_global->__pyx_codeobj_tab[17] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_set_coarse_index_data_file, __pyx_k_A_t_0, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[17])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {11, 0, 0, 11, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 658, 71};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_in_collection, __pyx_mstate->__pyx_n_u_pos, __pyx_mstate->__pyx_n_u_hsml, __pyx_mstate->__pyx_n_u_mask, __pyx_mstate->__pyx_n_u_sub_mi1, __pyx_mstate->__pyx_n_u_sub_mi2, __pyx_mstate->__pyx_n_u_file_id, __pyx_mstate->__pyx_n_u_nsub_mi, __pyx_mstate->__pyx_n_u_count_threshold, __pyx_mstate->__pyx_n_u_mask_threshold};
    __pyx_mstate_global->__pyx_codeobj_tab[18] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_refined_index_data_file_ndarray, __pyx_k_A_A_M_A_q_A_7q_vQ_q_s, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[18])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {11, 0, 0, 11, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 658, 71};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_in_collection, __pyx_mstate->__pyx_n_u_pos, __pyx_mstate->__pyx_n_u_hsml, __pyx_mstate->__pyx_n_u_mask, __pyx_mstate->__pyx_n_u_sub_mi1, __pyx_mstate->__pyx_n_u_sub_mi2, __pyx_mstate->__pyx_n_u_file_id, __pyx_mstate->__pyx_n_u_nsub_mi, __pyx_mstate->__pyx_n_u_count_threshold, __pyx_mstate->__pyx_n_u_mask_threshold};
    __pyx_mstate_global->__pyx_codeobj_tab[19] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_refined_index_data_file_ndarray, __pyx_k_A_A_M_A_q_A_7q_vQ_q_s, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[19])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {11, 0, 0, 13, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 658, 71};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_in_collection, __pyx_mstate->__pyx_n_u_pos, __pyx_mstate->__pyx_n_u_hsml, __pyx_mstate->__pyx_n_u_mask, __pyx_mstate->__pyx_n_u_sub_mi1, __pyx_mstate->__pyx_n_u_sub_mi2, __pyx_mstate->__pyx_n_u_file_id, __pyx_mstate->__pyx_n_u_nsub_mi, __pyx_mstate->__pyx_n_u_count_threshold, __pyx_mstate->__pyx_n_u_mask_threshold, __pyx_mstate->__pyx_n_u_in_coll, __pyx_mstate->__pyx_n_u_out_collection};
    __pyx_mstate_global->__pyx_codeobj_tab[20] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_refined_index_data_file_ndarray, __pyx_k_A_A_M_A_q_A_7q_vQ_q_s, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[20])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 918, 23};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_sub_mi1, __pyx_mstate->__pyx_n_u_sub_mi2, __pyx_mstate->__pyx_n_u_file_id, __pyx_mstate->__pyx_n_u_nsub_mi};
    __pyx_mstate_global->__pyx_codeobj_tab[21] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_set_refined_index_data_file, __pyx_k_A_t_1_12_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[21])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 940, 34};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_verbose, __pyx_mstate->__pyx_n_u_cc, __pyx_mstate->__pyx_n_u_rc};
    __pyx_mstate_global->__pyx_codeobj_tab[22] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_find_collisions, __pyx_k_A_E_Y_q_L_t1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[22])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 949, 40};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_verbose, __pyx_mstate->__pyx_n_u_file_list, __pyx_mstate->__pyx_n_u_nc, __pyx_mstate->__pyx_n_u_nm};
    __pyx_mstate_global->__pyx_codeobj_tab[23] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_find_collisions_coarse, __pyx_k_A_A_E_Y_6at_QR_t1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[23])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 958, 61};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_ifile, __pyx_mstate->__pyx_n_u_mask, __pyx_mstate->__pyx_n_u_mask2, __pyx_mstate->__pyx_n_u_arr, __pyx_mstate->__pyx_n_u_arr_view};
    __pyx_mstate_global->__pyx_codeobj_tab[24] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_find_uncontaminated, __pyx_k_A_9_2_F_Bd_nTVVZZ_a_I_AWF_A_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[24])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 8, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 969, 101};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_ifile, __pyx_mstate->__pyx_n_u_mask, __pyx_mstate->__pyx_n_u_mask2, __pyx_mstate->__pyx_n_u_arr, __pyx_mstate->__pyx_n_u_arr_view, __pyx_mstate->__pyx_n_u_sfiles, __pyx_mstate->__pyx_n_u_sfiles_view};
    __pyx_mstate_global->__pyx_codeobj_tab[25] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_find_contaminated, __pyx_k_A_78_2_F_Bd_nTVVZZ_a_5RvQd_I_7_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[25])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 982, 34};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_verbose, __pyx_mstate->__pyx_n_u_nc, __pyx_mstate->__pyx_n_u_nm};
    __pyx_mstate_global->__pyx_codeobj_tab[26] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_find_collisions_refined, __pyx_k_A_0_E_Y_7q_L_t1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[26])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 991, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[27] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_get_bitmasks, __pyx_k_A_t1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[27])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 994, 19};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_solf};
    __pyx_mstate_global->__pyx_codeobj_tab[28] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_iseq_bitmask, __pyx_k_A_t9F_4_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[28])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 8, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 997, 264};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_fname, __pyx_mstate->__pyx_n_u_max_hsml, __pyx_mstate->__pyx_n_u_h5py, __pyx_mstate->__pyx_n_u_serial_BAC, __pyx_mstate->__pyx_n_u_ifile, __pyx_mstate->__pyx_n_u_fp, __pyx_mstate->__pyx_n_u_grp};
    __pyx_mstate_global->__pyx_codeobj_tab[29] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_save_bitmasks, __pyx_k_A_awe81_b_AT_6_b_Qc_a_vQ_1_vQl_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[29])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1025, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[30] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_check_bitmasks, __pyx_k_A_t9G1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[30])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1028, 11};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[31] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_reset_bitmasks, __pyx_k_A_IWA, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[31])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 12, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1031, 340};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_fname, __pyx_mstate->__pyx_n_u_h5py, __pyx_mstate->__pyx_n_u_read_flag, __pyx_mstate->__pyx_n_u_irflag, __pyx_mstate->__pyx_n_u_ver, __pyx_mstate->__pyx_n_u_overwrite, __pyx_mstate->__pyx_n_u_fp, __pyx_mstate->__pyx_n_u_grp, __pyx_mstate->__pyx_n_u_max_hsml, __pyx_mstate->__pyx_n_u_pb, __pyx_mstate->__pyx_n_u_ifile};
    __pyx_mstate_global->__pyx_codeobj_tab[32] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_load_bitmasks, __pyx_k_A_a_a_4r_gQa_awe81_b_AT_gQb_1_V1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[32])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1077, 32};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_ifile};
    __pyx_mstate_global->__pyx_codeobj_tab[33] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_print_info, __pyx_k_A_IU_4q_AWM_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[33])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1082, 15};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_ifile};
    __pyx_mstate_global->__pyx_codeobj_tab[34] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_count_coarse, __pyx_k_A_t9M, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[34])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1086, 15};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_ifile};
    __pyx_mstate_global->__pyx_codeobj_tab[35] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_count_refined, __pyx_k_A_t9N_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[35])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1090, 15};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_ifile};
    __pyx_mstate_global->__pyx_codeobj_tab[36] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_count_total, __pyx_k_A_t9L_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[36])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 14, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1094, 273};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_mi1, __pyx_mstate->__pyx_n_u_arr_totref, __pyx_mstate->__pyx_n_u_arr_tottwo, __pyx_mstate->__pyx_n_u_arr, __pyx_mstate->__pyx_n_u_arr_any, __pyx_mstate->__pyx_n_u_arr_two, __pyx_mstate->__pyx_n_u_arr_swap, __pyx_mstate->__pyx_n_u_vec_totref, __pyx_mstate->__pyx_n_u_it_mi1, __pyx_mstate->__pyx_n_u_nm, __pyx_mstate->__pyx_n_u_nc, __pyx_mstate->__pyx_n_u_ifile, __pyx_mstate->__pyx_n_u_nbitmasks};
    __pyx_mstate_global->__pyx_codeobj_tab[37] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_check, __pyx_k_A_ha_Cq_A_IU_4q_t9Kq_aq_j_Q_Zxq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[37])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1128, 35};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_mi};
    __pyx_mstate_global->__pyx_codeobj_tab[38] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_primary_indices, __pyx_k_A_1Bha_r_q_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[38])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1132, 22};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_fid, __pyx_mstate->__pyx_n_u_out};
    __pyx_mstate_global->__pyx_codeobj_tab[39] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_file_ownership_mask, __pyx_k_A_d_q_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[39])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1137, 5};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[40] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_finalize, __pyx_k_A_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[40])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1151, 50};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_DLE};
    __pyx_mstate_global->__pyx_codeobj_tab[41] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_get_DLE, __pyx_k_A_b_as_E_aq_q_T_1A_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[41])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1158, 50};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_DRE};
    __pyx_mstate_global->__pyx_codeobj_tab[42] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_get_DRE, __pyx_k_A_b_as_E_aq_q_T_AQ_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[42])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 14, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1166, 172};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_selector, __pyx_mstate->__pyx_n_u_ngz, __pyx_mstate->__pyx_n_u_dmask, __pyx_mstate->__pyx_n_u_coarse_ghosts, __pyx_mstate->__pyx_n_u_gmask, __pyx_mstate->__pyx_n_u_gmask2, __pyx_mstate->__pyx_n_u_out, __pyx_mstate->__pyx_n_u_periodic, __pyx_mstate->__pyx_n_u_periodicity, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_morton_selector, __pyx_mstate->__pyx_n_u_dfiles, __pyx_mstate->__pyx_n_u_gfiles};
    __pyx_mstate_global->__pyx_codeobj_tab[43] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_get_ghost_zones, __pyx_k_A_5P_q_7x_Oq_E_aq_q_XQa_6_A_q_4A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[43])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1190, 42};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_selector, __pyx_mstate->__pyx_n_u_cmask, __pyx_mstate->__pyx_n_u_morton_selector};
    __pyx_mstate_global->__pyx_codeobj_tab[44] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_selector2mask, __pyx_k_A_A_0_t1_1_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[44])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1200, 20};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_cmask, __pyx_mstate->__pyx_n_u_file_idx};
    __pyx_mstate_global->__pyx_codeobj_tab[45] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_mask2files, __pyx_k_A_4_Qa_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[45])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1208, 82};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_cmask, __pyx_mstate->__pyx_n_u_file_idx, __pyx_mstate->__pyx_n_u_fmask, __pyx_mstate->__pyx_n_u_fid, __pyx_mstate->__pyx_n_u_file_masks, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[46] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_mask2filemasks, __pyx_k_A_RvQa_2_T_e1Cq_A_D_Zy_AYa_QnE_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[46])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1223, 58};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_file_masks, __pyx_mstate->__pyx_n_u_addfile_idx, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_fmask};
    __pyx_mstate_global->__pyx_codeobj_tab[47] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_filemasks2addfiles, __pyx_k_A_c_Qaq_Cy_q_T_q_gQa_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[47])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 10, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1233, 174};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_selector, __pyx_mstate->__pyx_n_u_cmask, __pyx_mstate->__pyx_n_u_fmask, __pyx_mstate->__pyx_n_u_fid, __pyx_mstate->__pyx_n_u_file_masks, __pyx_mstate->__pyx_n_u_file_idx, __pyx_mstate->__pyx_n_u_addfile_idx, __pyx_mstate->__pyx_n_u_morton_selector, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[48] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_identify_file_masks, __pyx_k_A_A_0_6_Q_1_4_Qa_RvQa_2_T_e1Cq_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[48])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1257, 71};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_selector, __pyx_mstate->__pyx_n_u_ngz, __pyx_mstate->__pyx_n_u_cmask_s, __pyx_mstate->__pyx_n_u_cmask_g, __pyx_mstate->__pyx_n_u_morton_selector};
    __pyx_mstate_global->__pyx_codeobj_tab[49] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_identify_data_files, __pyx_k_A_F_G_a_a_0_6_Q_9A_t_9Ky, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[49])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1269, 108};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_mm_s, __pyx_mstate->__pyx_n_u_mm_d, __pyx_mstate->__pyx_n_u_ifile, __pyx_mstate->__pyx_n_u_file_mask_p, __pyx_mstate->__pyx_n_u_file_idx_p};
    __pyx_mstate_global->__pyx_codeobj_tab[50] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_mask_to_files, __pyx_k_A_Q_b_at9F_IU_4q_7_Q_4_1G1_q_RvQ, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[50])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 9, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1284, 185};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_mm_s, __pyx_mstate->__pyx_n_u_mm_g, __pyx_mstate->__pyx_n_u_mm_d, __pyx_mstate->__pyx_n_u_ifile, __pyx_mstate->__pyx_n_u_file_mask_p, __pyx_mstate->__pyx_n_u_file_mask_g, __pyx_mstate->__pyx_n_u_file_idx_p, __pyx_mstate->__pyx_n_u_file_idx_g};
    __pyx_mstate_global->__pyx_codeobj_tab[51] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_masks_to_files, __pyx_k_A_Q_b_at9F_b_at9F_IU_4q_7_Q_4_1G, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[51])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {7, 0, 0, 34, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1306, 938};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_index, __pyx_mstate->__pyx_n_u_io_handler, __pyx_mstate->__pyx_n_u_data_files, __pyx_mstate->__pyx_n_u_num_zones, __pyx_mstate->__pyx_n_u_selector_mask, __pyx_mstate->__pyx_n_u_base_mask, __pyx_mstate->__pyx_n_u_total_pcount, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_j, __pyx_mstate->__pyx_n_u_k, __pyx_mstate->__pyx_n_u_ind, __pyx_mstate->__pyx_n_u_ind64, __pyx_mstate->__pyx_n_u_octree, __pyx_mstate->__pyx_n_u_mi, __pyx_mstate->__pyx_n_u_mi_root, __pyx_mstate->__pyx_n_u_pos, __pyx_mstate->__pyx_n_u_pos32, __pyx_mstate->__pyx_n_u_pos64, __pyx_mstate->__pyx_n_u_ppos, __pyx_mstate->__pyx_n_u_DLE, __pyx_mstate->__pyx_n_u_DRE, __pyx_mstate->__pyx_n_u_bitsize, __pyx_mstate->__pyx_n_u_morton_ind, __pyx_mstate->__pyx_n_u_nroot, __pyx_mstate->__pyx_n_u_croot, __pyx_mstate->__pyx_n_u_ewah_slct, __pyx_mstate->__pyx_n_u_ewah_base, __pyx_mstate->__pyx_n_u_iter_set, __pyx_mstate->__pyx_n_u_iter_end, __pyx_mstate->__pyx_n_u_slct_arr, __pyx_mstate->__pyx_n_u_files_touched, __pyx_mstate->__pyx_n_u_data_file, __pyx_mstate->__pyx_n_u_base_pcount};
    __pyx_mstate_global->__pyx_codeobj_tab[52] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_construct_octree, __pyx_k_A_1_E_aq_q_T_1A_q_T_AQ_m1_a_at4u, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[52])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[53] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[53])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[54] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[54])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 13, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1492, 309};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_mm_s, __pyx_mstate->__pyx_n_u_mm_g, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_level, __pyx_mstate->__pyx_n_u_mi1, __pyx_mstate->__pyx_n_u_pos, __pyx_mstate->__pyx_n_u_dds, __pyx_mstate->__pyx_n_u_cur_ind, __pyx_mstate->__pyx_n_u_mm_s0, __pyx_mstate->__pyx_n_u_mm_g0, __pyx_mstate->__pyx_n_u_rpos, __pyx_mstate->__pyx_n_u_sbbox};
    __pyx_mstate_global->__pyx_codeobj_tab[55] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_fill_masks, __pyx_k_Na_b_Q_E_aq_1E_q_T_Qa_q_T_Qc_4t, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[55])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 8, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1532, 191};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_file_mask_p, __pyx_mstate->__pyx_n_u_file_mask_g, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_level, __pyx_mstate->__pyx_n_u_mi1, __pyx_mstate->__pyx_n_u_pos, __pyx_mstate->__pyx_n_u_dds};
    __pyx_mstate_global->__pyx_codeobj_tab[56] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_find_files, __pyx_k_A_b_Q_E_aq_q_T_Qa_q_T_Qc_4t1A_E, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[56])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[57] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[57])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[58] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[58])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1979, 35};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_counts};
    __pyx_mstate_global->__pyx_codeobj_tab[59] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_allocate_domains, __pyx_k_7_Q_Qd_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[59])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1984, 166};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_selector, __pyx_mstate->__pyx_n_u_visitor, __pyx_mstate->__pyx_n_u_nprev_octs, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[60] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_finalize, __pyx_k_A_Qa_Q_aq_O1Ja_Qb_Cwa_N_9K1DPQ_T, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[60])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 2030, 59};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_domain_ind, __pyx_mstate->__pyx_n_u_ndst, __pyx_mstate->__pyx_n_u_ind};
    __pyx_mstate_global->__pyx_codeobj_tab[61] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_get_index_base_octs, __pyx_k_A_r_Ql_A_b_avYb_q_s_4s, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[61])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 15, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 2129, 378};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_indices, __pyx_mstate->__pyx_n_u_order1, __pyx_mstate->__pyx_n_u_domain_id, __pyx_mstate->__pyx_n_u_root, __pyx_mstate->__pyx_n_u_no, __pyx_mstate->__pyx_n_u_beg, __pyx_mstate->__pyx_n_u_end, __pyx_mstate->__pyx_n_u_index, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_ind, __pyx_mstate->__pyx_n_u_ind64, __pyx_mstate->__pyx_n_u_max_level, __pyx_mstate->__pyx_n_u_index_root, __pyx_mstate->__pyx_n_u_root_count};
    __pyx_mstate_global->__pyx_codeobj_tab[62] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yt_geometry_particle_oct_contain_2, __pyx_mstate->__pyx_n_u_add, __pyx_k_A_34_WF_1_T_Q_fA_O6_d_A_WAU_z_4, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[62])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[63] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[63])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[64] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[64])) goto bad;
  }
  Py_DECREF(tuple_dedup_map);
  return 0;
  bad:
  Py_DECREF(tuple_dedup_map);
  return -1;
}
/* #### Code section: init_globals ### */

static int __Pyx_InitGlobals(void) {
  /* PythonCompatibility.init */
  if (likely(__Pyx_init_co_variables() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  /* AssertionsEnabled.init */
  if (likely(__Pyx_init_assertions_enabled() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  /* NumpyImportArray.init */
  /*
 * Cython has automatically inserted a call to _import_array since
 * you didn't include one when you cimported numpy. To disable this
 * add the line
 *   <void>numpy._import_array
 */
#ifdef NPY_FEATURE_VERSION
#ifndef NO_IMPORT_ARRAY
if (unlikely(_import_array() == -1)) {
    PyErr_SetString(PyExc_ImportError, "numpy.core.multiarray failed to import "
    "(auto-generated because you didn't call 'numpy.import_array()' after cimporting numpy; "
    "use '<void>numpy._import_array' to disable if you are certain you don't need it).");
}
#endif
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  /* CachedMethodType.init */
  #if CYTHON_COMPILING_IN_LIMITED_API
{
    PyObject *typesModule=NULL;
    typesModule = PyImport_ImportModule("types");
    if (typesModule) {
        __pyx_mstate_global->__Pyx_CachedMethodType = PyObject_GetAttrString(typesModule, "MethodType");
        Py_DECREF(typesModule);
    }
} // error handling follows
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d0000
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
            "name '%U' is not defined", name);
    }
    return result;
}

/* TupleAndListFromArray */
#if !CYTHON_COMPILING_IN_CPYTHON && CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    Py_ssize_t i;
    if (n <= 0) {
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    for (i = 0; i < n; i++) {
        if (unlikely(__Pyx_PyTuple_SET_ITEM(res, i, src[i]) < 0)) {
            Py_DECREF(res);
            return NULL;
        }
        Py_INCREF(src[i]);
    }
    return res;
}
#elif CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL ||\
        !(CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS)
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length, length2;
        int kind;
        void *data1, *data2;
        #if !CYTHON_COMPILING_IN_LIMITED_API
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        #endif
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(length < 0)) return -1;
        #endif
        length2 = __Pyx_PyUnicode_GET_LENGTH(s2);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(length2 < 0)) return -1;
        #endif
        if (length != length2) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    return (equals == Py_EQ);
return_ne:
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = __Pyx_PyTuple_GET_SIZE(kwnames);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely(n == -1)) return NULL;
    #endif
    for (i = 0; i < n; i++)
    {
        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!namei)) return NULL;
        #endif
        if (s == namei) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!namei)) return NULL;
        #endif
        int eq = __Pyx_PyUnicode_Equals(s, namei, Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs;
    PyObject *dict;
#if !CYTHON_ASSUME_SAFE_SIZE
    nkwargs = PyTuple_Size(kwnames);
    if (unlikely(nkwargs < 0)) return NULL;
#else
    nkwargs = PyTuple_GET_SIZE(kwnames);
#endif
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
#if !CYTHON_ASSUME_SAFE_MACROS
        PyObject *key = PyTuple_GetItem(kwnames, i);
        if (!key) goto bad;
#else
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
#endif
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject *const *args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
    PyObject *kwdefs;
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    if (
            co->co_kwonlyargcount == 0 &&
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) != (0)) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
#if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API
  #if PY_VERSION_HEX < 0x03090000
    #define __Pyx_PyVectorcall_Function(callable) _PyVectorcall_Function(callable)
  #elif CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE vectorcallfunc __Pyx_PyVectorcall_Function(PyObject *callable) {
    PyTypeObject *tp = Py_TYPE(callable);
    #if defined(__Pyx_CyFunction_USED)
    if (__Pyx_CyFunction_CheckExact(callable)) {
        return __Pyx_CyFunction_func_vectorcall(callable);
    }
    #endif
    if (!PyType_HasFeature(tp, Py_TPFLAGS_HAVE_VECTORCALL)) {
        return NULL;
    }
    assert(PyCallable_Check(callable));
    Py_ssize_t offset = tp->tp_vectorcall_offset;
    assert(offset > 0);
    vectorcallfunc ptr;
    memcpy(&ptr, (char *) callable + offset, sizeof(ptr));
    return ptr;
}
  #else
    #define __Pyx_PyVectorcall_Function(callable) PyVectorcall_Function(callable)
  #endif
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject *const *args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API
        vectorcallfunc f = __Pyx_PyVectorcall_Function(func);
        if (f) {
            return f(func, args, _nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, _nargs, NULL);
        }
        #elif CYTHON_COMPILING_IN_LIMITED_API && CYTHON_VECTORCALL
        return PyObject_Vectorcall(func, args, _nargs, NULL);
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_mstate_global->__pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* UnpackUnboundCMethod */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030C0000
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
#elif CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03090000
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject **args, Py_ssize_t nargs, PyObject *kwnames) {
        return _PyObject_Vectorcall
            (method, args ? args+1 : NULL, nargs ? nargs-1 : 0, kwnames);
}
#else
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *const *args, Py_ssize_t nargs, PyObject *kwnames) {
    return
#if PY_VERSION_HEX < 0x03090000
    _PyObject_Vectorcall
#else
    PyObject_Vectorcall
#endif
        (method, args ? args+1 : NULL, nargs ? (size_t) nargs-1 : 0, kwnames);
}
#endif
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030C0000
     METH_VARARGS | METH_KEYWORDS,
#else
     METH_FASTCALL | METH_KEYWORDS,
#endif
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method, *result=NULL;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    result = method;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            result = unbound_method;
        }
    }
#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    if (unlikely(target->method)) {
        Py_DECREF(result);
    } else
#endif
    target->method = result;
    return 0;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    int was_initialized = __Pyx_CachedCFunction_GetAndSetInitializing(cfunc);
    if (likely(was_initialized == 2 && cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            return __Pyx_CallCFunctionFast(cfunc, self, args, 2);
        }
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, 2, NULL);
    }
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    else if (unlikely(was_initialized == 1)) {
        __Pyx_CachedCFunction tmp_cfunc = {
#ifndef __cplusplus
            0
#endif
        };
        tmp_cfunc.type = cfunc->type;
        tmp_cfunc.method_name = cfunc->method_name;
        return __Pyx__CallUnboundCMethod2(&tmp_cfunc, self, arg1, arg2);
    }
#endif
    PyObject *result = __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
    __Pyx_CachedCFunction_SetFinishedInitializing(cfunc);
    return result;
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        PyObject *result = NULL;
        PyObject *args = PyTuple_New(2);
        if (unlikely(!args)) return NULL;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = __Pyx_CallCFunctionWithKeywords(cfunc, self, args, NULL);
        else
            result = __Pyx_CallCFunction(cfunc, self, args);
        Py_DECREF(args);
        return result;
    }
#endif
    {
        PyObject *args[4] = {NULL, self, arg1, arg2};
        return __Pyx_PyObject_FastCall(cfunc->method, args+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
    }
}

/* ParseKeywords */
static int __Pyx_ValidateDuplicatePosArgs(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    const char* function_name)
{
    PyObject ** const *name = argnames;
    while (name != first_kw_arg) {
        PyObject *key = **name;
        int found = PyDict_Contains(kwds, key);
        if (unlikely(found)) {
            if (found == 1) __Pyx_RaiseDoubleKeywordsError(function_name, key);
            goto bad;
        }
        name++;
    }
    return 0;
bad:
    return -1;
}
#if CYTHON_USE_UNICODE_INTERNALS
static CYTHON_INLINE int __Pyx_UnicodeKeywordsEqual(PyObject *s1, PyObject *s2) {
    int kind;
    Py_ssize_t len = PyUnicode_GET_LENGTH(s1);
    if (len != PyUnicode_GET_LENGTH(s2)) return 0;
    kind = PyUnicode_KIND(s1);
    if (kind != PyUnicode_KIND(s2)) return 0;
    const void *data1 = PyUnicode_DATA(s1);
    const void *data2 = PyUnicode_DATA(s2);
    return (memcmp(data1, data2, (size_t) len * (size_t) kind) == 0);
}
#endif
static int __Pyx_MatchKeywordArg_str(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    PyObject ** const *name;
    #if CYTHON_USE_UNICODE_INTERNALS
    Py_hash_t key_hash = ((PyASCIIObject*)key)->hash;
    if (unlikely(key_hash == -1)) {
        key_hash = PyObject_Hash(key);
        if (unlikely(key_hash == -1))
            goto bad;
    }
    #endif
    name = first_kw_arg;
    while (*name) {
        PyObject *name_str = **name;
        #if CYTHON_USE_UNICODE_INTERNALS
        if (key_hash == ((PyASCIIObject*)name_str)->hash && __Pyx_UnicodeKeywordsEqual(name_str, key)) {
            *index_found = (size_t) (name - argnames);
            return 1;
        }
        #else
        #if CYTHON_ASSUME_SAFE_SIZE
        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))
        #endif
        {
            int cmp = PyUnicode_Compare(name_str, key);
            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
            if (cmp == 0) {
                *index_found = (size_t) (name - argnames);
                return 1;
            }
        }
        #endif
        name++;
    }
    name = argnames;
    while (name != first_kw_arg) {
        PyObject *name_str = **name;
        #if CYTHON_USE_UNICODE_INTERNALS
        if (unlikely(key_hash == ((PyASCIIObject*)name_str)->hash)) {
            if (__Pyx_UnicodeKeywordsEqual(name_str, key))
                goto arg_passed_twice;
        }
        #else
        #if CYTHON_ASSUME_SAFE_SIZE
        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))
        #endif
        {
            if (unlikely(name_str == key)) goto arg_passed_twice;
            int cmp = PyUnicode_Compare(name_str, key);
            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
            if (cmp == 0) goto arg_passed_twice;
        }
        #endif
        name++;
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
bad:
    return -1;
}
static int __Pyx_MatchKeywordArg_nostr(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    PyObject ** const *name;
    if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;
    name = first_kw_arg;
    while (*name) {
        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);
        if (cmp == 1) {
            *index_found = (size_t) (name - argnames);
            return 1;
        }
        if (unlikely(cmp == -1)) goto bad;
        name++;
    }
    name = argnames;
    while (name != first_kw_arg) {
        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);
        if (unlikely(cmp != 0)) {
            if (cmp == 1) goto arg_passed_twice;
            else goto bad;
        }
        name++;
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
bad:
    return -1;
}
static CYTHON_INLINE int __Pyx_MatchKeywordArg(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    return likely(PyUnicode_CheckExact(key)) ?
        __Pyx_MatchKeywordArg_str(key, argnames, first_kw_arg, index_found, function_name) :
        __Pyx_MatchKeywordArg_nostr(key, argnames, first_kw_arg, index_found, function_name);
}
static void __Pyx_RejectUnknownKeyword(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    const char *function_name)
{
    Py_ssize_t pos = 0;
    PyObject *key = NULL;
    __Pyx_BEGIN_CRITICAL_SECTION(kwds);
    while (PyDict_Next(kwds, &pos, &key, NULL)) {
        PyObject** const *name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (!*name) {
            #if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
            #endif
            size_t index_found = 0;
            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);
            if (cmp != 1) {
                if (cmp == 0) {
                    PyErr_Format(PyExc_TypeError,
                        "%s() got an unexpected keyword argument '%U'",
                        function_name, key);
                }
                #if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(key);
                #endif
                break;
            }
            #if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(key);
            #endif
        }
    }
    __Pyx_END_CRITICAL_SECTION();
    assert(PyErr_Occurred());
}
static int __Pyx_ParseKeywordDict(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    PyObject** const *name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    Py_ssize_t extracted = 0;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;
#endif
    name = first_kw_arg;
    while (*name && num_kwargs > extracted) {
        PyObject * key = **name;
        PyObject *value;
        int found = 0;
        #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
        found = PyDict_GetItemRef(kwds, key, &value);
        #else
        value = PyDict_GetItemWithError(kwds, key);
        if (value) {
            Py_INCREF(value);
            found = 1;
        } else {
            if (unlikely(PyErr_Occurred())) goto bad;
        }
        #endif
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
            extracted++;
        }
        name++;
    }
    if (num_kwargs > extracted) {
        if (ignore_unknown_kwargs) {
            if (unlikely(__Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name) == -1))
                goto bad;
        } else {
            __Pyx_RejectUnknownKeyword(kwds, argnames, first_kw_arg, function_name);
            goto bad;
        }
    }
    return 0;
bad:
    return -1;
}
static int __Pyx_ParseKeywordDictToDict(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject** const *name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    Py_ssize_t len;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;
#endif
    if (PyDict_Update(kwds2, kwds) < 0) goto bad;
    name = first_kw_arg;
    while (*name) {
        PyObject *key = **name;
        PyObject *value;
#if !CYTHON_COMPILING_IN_LIMITED_API && (PY_VERSION_HEX >= 0x030d00A2 || defined(PyDict_Pop))
        int found = PyDict_Pop(kwds2, key, &value);
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
        }
#elif __PYX_LIMITED_VERSION_HEX >= 0x030d0000
        int found = PyDict_GetItemRef(kwds2, key, &value);
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
            if (unlikely(PyDict_DelItem(kwds2, key) < 0)) goto bad;
        }
#else
    #if CYTHON_COMPILING_IN_CPYTHON
        value = _PyDict_Pop(kwds2, key, kwds2);
    #else
        value = __Pyx_CallUnboundCMethod2(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_pop, kwds2, key, kwds2);
    #endif
        if (value == kwds2) {
            Py_DECREF(value);
        } else {
            if (unlikely(!value)) goto bad;
            values[name-argnames] = value;
        }
#endif
        name++;
    }
    len = PyDict_Size(kwds2);
    if (len > 0) {
        return __Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name);
    } else if (unlikely(len == -1)) {
        goto bad;
    }
    return 0;
bad:
    return -1;
}
static int __Pyx_ParseKeywordsTuple(
    PyObject *kwds,
    PyObject * const *kwvalues,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    PyObject *key = NULL;
    PyObject** const * name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    for (Py_ssize_t pos = 0; pos < num_kwargs; pos++) {
#if CYTHON_AVOID_BORROWED_REFS
        key = __Pyx_PySequence_ITEM(kwds, pos);
#else
        key = __Pyx_PyTuple_GET_ITEM(kwds, pos);
#endif
#if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!key)) goto bad;
#endif
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            PyObject *value = kwvalues[pos];
            values[name-argnames] = __Pyx_NewRef(value);
        } else {
            size_t index_found = 0;
            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);
            if (cmp == 1) {
                PyObject *value = kwvalues[pos];
                values[index_found] = __Pyx_NewRef(value);
            } else {
                if (unlikely(cmp == -1)) goto bad;
                if (kwds2) {
                    PyObject *value = kwvalues[pos];
                    if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                } else if (!ignore_unknown_kwargs) {
                    goto invalid_keyword;
                }
            }
        }
        #if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(key);
        key = NULL;
        #endif
    }
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    goto bad;
bad:
    #if CYTHON_AVOID_BORROWED_REFS
    Py_XDECREF(key);
    #endif
    return -1;
}
static int __Pyx_ParseKeywords(
    PyObject *kwds,
    PyObject * const *kwvalues,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds)))
        return __Pyx_ParseKeywordsTuple(kwds, kwvalues, argnames, kwds2, values, num_pos_args, num_kwargs, function_name, ignore_unknown_kwargs);
    else if (kwds2)
        return __Pyx_ParseKeywordDictToDict(kwds, argnames, kwds2, values, num_pos_args, function_name);
    else
        return __Pyx_ParseKeywordDict(kwds, argnames, values, num_pos_args, num_kwargs, function_name, ignore_unknown_kwargs);
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    PyObject *extra_info = __pyx_mstate_global->__pyx_empty_unicode;
    int from_annotation_subclass = 0;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (!exact) {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    } else if (exact == 2) {
        if (__Pyx_TypeCheck(obj, type)) {
            from_annotation_subclass = 1;
            extra_info = __pyx_mstate_global->__pyx_kp_u_Note_that_Cython_is_deliberately;
        }
    }
    type_name = __Pyx_PyType_GetFullyQualifiedName(type);
    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")"
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
        "%s%U"
#endif
        , name, type_name, obj_type_name
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
        , (from_annotation_subclass ? ". " : ""), extra_info
#endif
        );
#if __PYX_LIMITED_VERSION_HEX >= 0x030C0000
    if (exact == 2 && from_annotation_subclass) {
        PyObject *res;
        PyObject *vargs[2];
        vargs[0] = PyErr_GetRaisedException();
        vargs[1] = extra_info;
        res = PyObject_VectorcallMethod(__pyx_mstate_global->__pyx_kp_u_add_note, vargs, 2, NULL);
        Py_XDECREF(res);
        PyErr_SetRaisedException(vargs[0]);
    }
#endif
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* RaiseException */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
#elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}

/* PyObjectFastCallMethod */
#if !CYTHON_VECTORCALL || PY_VERSION_HEX < 0x03090000
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf) {
    PyObject *result;
    PyObject *attr = PyObject_GetAttr(args[0], name);
    if (unlikely(!attr))
        return NULL;
    result = __Pyx_PyObject_FastCall(attr, args+1, nargsf - 1);
    Py_DECREF(attr);
    return result;
}
#endif

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, const char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp = PySequence_Repeat(padding, uoffset - prepend_sign);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyUnicode_Concat(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyUnicode_Concat(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* COrdinalToPyUnicode */
static CYTHON_INLINE int __Pyx_CheckUnicodeValue(int value) {
    return value <= 1114111;
}
static PyObject* __Pyx_PyUnicode_FromOrdinal_Padded(int value, Py_ssize_t ulength, char padding_char) {
    if (likely(ulength <= 250)) {
        char chars[256];
        if (value <= 255) {
            memset(chars, padding_char, (size_t) (ulength - 1));
            chars[ulength-1] = (char) value;
            return PyUnicode_DecodeLatin1(chars, ulength, NULL);
        }
        char *cpos = chars + sizeof(chars);
        if (value < 0x800) {
            *--cpos = (char) (0x80 | (value & 0x3f));
            value >>= 6;
            *--cpos = (char) (0xc0 | (value & 0x1f));
        } else if (value < 0x10000) {
            *--cpos = (char) (0x80 | (value & 0x3f));
            value >>= 6;
            *--cpos = (char) (0x80 | (value & 0x3f));
            value >>= 6;
            *--cpos = (char) (0xe0 | (value & 0x0f));
        } else {
            *--cpos = (char) (0x80 | (value & 0x3f));
            value >>= 6;
            *--cpos = (char) (0x80 | (value & 0x3f));
            value >>= 6;
            *--cpos = (char) (0x80 | (value & 0x3f));
            value >>= 6;
            *--cpos = (char) (0xf0 | (value & 0x07));
        }
        cpos -= ulength;
        memset(cpos, padding_char, (size_t) (ulength - 1));
        return PyUnicode_DecodeUTF8(cpos, chars + sizeof(chars) - cpos, NULL);
    }
    if (value <= 127 && CYTHON_USE_UNICODE_INTERNALS) {
        const char chars[1] = {(char) value};
        return __Pyx_PyUnicode_BuildFromAscii(ulength, chars, 1, 0, padding_char);
    }
    {
        PyObject *uchar, *padding_uchar, *padding, *result;
        padding_uchar = PyUnicode_FromOrdinal(padding_char);
        if (unlikely(!padding_uchar)) return NULL;
        padding = PySequence_Repeat(padding_uchar, ulength - 1);
        Py_DECREF(padding_uchar);
        if (unlikely(!padding)) return NULL;
        uchar = PyUnicode_FromOrdinal(value);
        if (unlikely(!uchar)) {
            Py_DECREF(padding);
            return NULL;
        }
        result = PyUnicode_Concat(padding, uchar);
        Py_DECREF(padding);
        Py_DECREF(uchar);
        return result;
    }
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'c') {
        if (unlikely(!(is_unsigned || value == 0 || value > 0) ||
                     !(sizeof(value) <= 2 || value & ~ (int) 0x01fffff || __Pyx_CheckUnicodeValue((int) value)))) {
            PyErr_SetString(PyExc_OverflowError, "%c arg not in range(0x110000)");
            return NULL;
        }
        if (width <= 1) {
            return PyUnicode_FromOrdinal((int) value);
        }
        return __Pyx_PyUnicode_FromOrdinal_Padded((int) value, width, padding_char);
    }
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'c') {
        if (unlikely(!(is_unsigned || value == 0 || value > 0) ||
                     !(sizeof(value) <= 2 || value & ~ (Py_ssize_t) 0x01fffff || __Pyx_CheckUnicodeValue((int) value)))) {
            PyErr_SetString(PyExc_OverflowError, "%c arg not in range(0x110000)");
            return NULL;
        }
        if (width <= 1) {
            return PyUnicode_FromOrdinal((int) value);
        }
        return __Pyx_PyUnicode_FromOrdinal_Padded((int) value, width, padding_char);
    }
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject** values, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    if (max_char > 1114111) max_char = 1114111;
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - result_ulength < 0))
        goto overflow;
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = values[i];
        #if !CYTHON_COMPILING_IN_LIMITED_API
        if (__Pyx_PyUnicode_READY(uval) == (-1))
            goto bad;
        #endif
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(ulength < 0)) goto bad;
        #endif
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    Py_ssize_t i;
    PyObject *result = NULL;
    PyObject *value_tuple = PyTuple_New(value_count);
    if (unlikely(!value_tuple)) return NULL;
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    for (i=0; i<value_count; i++) {
        if (__Pyx_PyTuple_SET_ITEM(value_tuple, i, values[i]) != (0)) goto bad;
        Py_INCREF(values[i]);
    }
    result = PyUnicode_Join(__pyx_mstate_global->__pyx_empty_unicode, value_tuple);
bad:
    Py_DECREF(value_tuple);
    return result;
#endif
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
    if (likely(PyUnicode_Check(n)))
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && !CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            return __Pyx_PyList_GetItemRef(o, n);
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyLong_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_mstate_global->__pyx_n_u_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* RejectKeywords */
static void __Pyx_RejectKeywords(const char* function_name, PyObject *kwds) {
    PyObject *key = NULL;
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds))) {
        key = __Pyx_PySequence_ITEM(kwds, 0);
    } else {
        Py_ssize_t pos = 0;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
        if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return;
#endif
        PyDict_Next(kwds, &pos, &key, NULL);
        Py_INCREF(key);
    }
    if (likely(key)) {
        PyErr_Format(PyExc_TypeError,
            "%s() got an unexpected keyword argument '%U'",
            function_name, key);
        Py_DECREF(key);
    }
}

/* DivInt[Py_ssize_t] */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b, int b_is_constant) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    Py_ssize_t adapt_python = (b_is_constant ?
        ((r != 0) & ((r < 0) ^ (b < 0))) :
        ((r != 0) & ((r ^ b) < 0))
    );
    return q - adapt_python;
}

/* GetAttr3 */
#if __PYX_LIMITED_VERSION_HEX < 0x030d0000
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    int res = PyObject_GetOptionalAttr(o, n, &r);
    return (res != 0) ? r : __Pyx_NewRef(d);
#else
  #if CYTHON_USE_TYPE_SLOTS
    if (likely(PyUnicode_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
  #endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
#endif
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        if (!PyErr_Occurred())
            PyErr_SetNone(PyExc_NameError);
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
    PyErr_Clear();
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    if (unlikely(__Pyx_PyDict_GetItemRef(__pyx_mstate_global->__pyx_d, name, &result) == -1)) PyErr_Clear();
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return result;
    }
#else
    result = _PyDict_GetItem_KnownHash(__pyx_mstate_global->__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetFullyQualifiedName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C0000
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#elif __PYX_LIMITED_VERSION_HEX > 0x030C0000
    local_value = PyErr_GetRaisedException();
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
#if __PYX_LIMITED_VERSION_HEX > 0x030C0000
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
#else
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
#endif // __PYX_LIMITED_VERSION_HEX > 0x030C0000
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#elif __PYX_LIMITED_VERSION_HEX >= 0x030b0000
    PyErr_SetHandledException(local_value);
    Py_XDECREF(local_value);
    Py_XDECREF(local_type);
    Py_XDECREF(local_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
#if __PYX_LIMITED_VERSION_HEX <= 0x030C0000
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
#endif
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    if (level == -1) {
        const char* package_sep = strchr(__Pyx_MODULE_NAME, '.');
        if (package_sep != (0)) {
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, 1);
            if (unlikely(!module)) {
                if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                    goto bad;
                PyErr_Clear();
            }
        }
        level = 0;
    }
    if (!module) {
        module = PyImport_ImportModuleLevelObject(
            name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, level);
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    return module;
}

/* ImportDottedModule */
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    Py_ssize_t size;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
#if CYTHON_ASSUME_SAFE_SIZE
    size = PyTuple_GET_SIZE(parts_tuple);
#else
    size = PyTuple_Size(parts_tuple);
    if (size < 0) goto bad;
#endif
    if (likely(size == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
        PyExc_ModuleNotFoundError,
        "No module named '%U'", partial_name);
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400) ||\
        CYTHON_COMPILING_IN_GRAAL
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
#if CYTHON_ASSUME_SAFE_SIZE
    nparts = PyTuple_GET_SIZE(parts_tuple);
#else
    nparts = PyTuple_Size(parts_tuple);
    if (nparts < 0) return NULL;
#endif
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = __Pyx_PySequence_ITEM(parts_tuple, i);
        if (!part) return NULL;
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_mstate_global->__pyx_n_u_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_mstate_global->__pyx_n_u_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PySequenceMultiply */
static PyObject* __Pyx_PySequence_Multiply_Generic(PyObject *seq, Py_ssize_t mul) {
    PyObject *result, *pymul = PyLong_FromSsize_t(mul);
    if (unlikely(!pymul))
        return NULL;
    result = PyNumber_Multiply(seq, pymul);
    Py_DECREF(pymul);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PySequence_Multiply(PyObject *seq, Py_ssize_t mul) {
#if CYTHON_USE_TYPE_SLOTS
    PyTypeObject *type = Py_TYPE(seq);
    if (likely(type->tp_as_sequence && type->tp_as_sequence->sq_repeat)) {
        return type->tp_as_sequence->sq_repeat(seq, mul);
    } else
#endif
    {
        return __Pyx_PySequence_Multiply_Generic(seq, mul);
    }
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result;
    if (unlikely(!s)) return NULL;
    result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* PyObjectFormat */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {
    int ret;
    _PyUnicodeWriter writer;
    if (likely(PyFloat_CheckExact(obj))) {
        _PyUnicodeWriter_Init(&writer);
        ret = _PyFloat_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else if (likely(PyLong_CheckExact(obj))) {
        _PyUnicodeWriter_Init(&writer);
        ret = _PyLong_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else {
        return PyObject_Format(obj, format_spec);
    }
    if (unlikely(ret == -1)) {
        _PyUnicodeWriter_Dealloc(&writer);
        return NULL;
    }
    return _PyUnicodeWriter_Finish(&writer);
}
#endif

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (unlikely(!j)) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            Py_INCREF(v);
#if CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
            PyList_SetItem(o, n, v);
#else
            PyObject* old = PyList_GET_ITEM(o, n);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
#endif
            return 1;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_ass_subscript) {
            int r;
            PyObject *key = PyLong_FromSsize_t(i);
            if (unlikely(!key)) return -1;
            r = mm->mp_ass_subscript(o, key, v);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return sm->sq_ass_item(o, i, v);
        }
    }
#else
    if (is_list || !PyMapping_Check(o))
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyLong_FromSsize_t(i), v);
}

/* RaiseUnboundLocalError */
static void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* DivInt[long] */
static CYTHON_INLINE long __Pyx_div_long(long a, long b, int b_is_constant) {
    long q = a / b;
    long r = a - q*b;
    long adapt_python = (b_is_constant ?
        ((r != 0) & ((r < 0) ^ (b < 0))) :
        ((r != 0) & ((r ^ b) < 0))
    );
    return q - adapt_python;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_mstate_global->__pyx_kp_u__2);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400) ||\
                CYTHON_COMPILING_IN_GRAAL
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError, "cannot import name %S", name);
    }
    return value;
}

/* HasAttr */
#if __PYX_LIMITED_VERSION_HEX < 0x030d0000
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!PyUnicode_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_PyObject_GetAttrStrNoError(o, n);
    if (!r) {
        return (unlikely(PyErr_Occurred())) ? -1 : 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}
#endif

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetFullyQualifiedName(tp);
    PyErr_Format(PyExc_AttributeError,
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
#if !(CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C0000)
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
#endif
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
#if CYTHON_VECTORCALL && __PYX_LIMITED_VERSION_HEX >= 0x030C0000
    PyObject *args[2] = {obj, arg};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_Call2Args;
    return PyObject_VectorcallMethod(method_name, args, 2 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
#endif
}

/* StringJoin */
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    (void) __Pyx_PyObject_CallMethod1;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030e0000 || defined(PyBytes_Join)
    return PyBytes_Join(sep, values);
#elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyBytes_Join)
    return _PyBytes_Join(sep, values);
#else
    return __Pyx_PyObject_CallMethod1(sep, __pyx_mstate_global->__pyx_n_u_join, values);
#endif
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_size_t(size_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(size_t)*3+2];
    char *dpos, *end = digits + sizeof(size_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    size_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'c') {
        if (unlikely(!(is_unsigned || value == 0 || value > 0) ||
                     !(sizeof(value) <= 2 || value & ~ (size_t) 0x01fffff || __Pyx_CheckUnicodeValue((int) value)))) {
            PyErr_SetString(PyExc_OverflowError, "%c arg not in range(0x110000)");
            return NULL;
        }
        if (width <= 1) {
            return PyUnicode_FromOrdinal((int) value);
        }
        return __Pyx_PyUnicode_FromOrdinal_Padded((int) value, width, padding_char);
    }
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (size_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (size_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (size_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* BufferIndexError */
static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(0);
    }
    ctx = PyUnicode_FromString(name);
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
    if (nogil)
        PyGILState_Release(state);
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              const __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparsable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    const __Pyx_StructField* field = ctx->head->field;
    const __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    const __Pyx_StructField* field = ctx->head->field;
    const __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static int
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return -1;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return -1;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return -1;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i]) {
            PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
            return -1;
        }
        if (*ts != ',' && *ts != ')') {
            PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
            return -1;
        }
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim) {
        PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
        return -1;
    }
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return -1;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return 0;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (__pyx_buffmt_parse_array(ctx, &ts) < 0) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  PyBuffer_Release(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  const __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(PyObject_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* PyLongBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_Fallback___Pyx_PyLong_AddObjC(PyObject *op1, PyObject *op2, int inplace) {
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject* __Pyx_Unpacked___Pyx_PyLong_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    long a, x;
#ifdef HAVE_LONG_LONG
    const PY_LONG_LONG llb = intval;
    PY_LONG_LONG lla, llx;
#endif
    if (unlikely(__Pyx_PyLong_IsZero(op1))) {
        return __Pyx_NewRef(op2);
    }
    if (likely(__Pyx_PyLong_IsCompact(op1))) {
        a = __Pyx_PyLong_CompactValue(op1);
    } else {
        const digit* digits = __Pyx_PyLong_Digits(op1);
        const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
        switch (size) {
            case -2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                    a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                    lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                    a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                    lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                    a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                    lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                    a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                    lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                    a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                    lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                    a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                    lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
        }
    }
            x = a + b;
        return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
    long_long:
            llx = lla + llb;
        return PyLong_FromLongLong(llx);
#endif
    return __Pyx_Fallback___Pyx_PyLong_AddObjC(op1, op2, inplace);
    
    
}
#endif
static PyObject* __Pyx_Float___Pyx_PyLong_AddObjC(PyObject *float_val, long intval, int zerodivision_check) {
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    double a = __Pyx_PyFloat_AS_DOUBLE(float_val);
        double result;
        
        result = ((double)a) + (double)b;
        return PyFloat_FromDouble(result);
}
static CYTHON_INLINE PyObject* __Pyx_PyLong_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        return __Pyx_Unpacked___Pyx_PyLong_AddObjC(op1, op2, intval, inplace, zerodivision_check);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        return __Pyx_Float___Pyx_PyLong_AddObjC(op1, intval, zerodivision_check);
    }
    return __Pyx_Fallback___Pyx_PyLong_AddObjC(op1, op2, inplace);
}
#endif

/* PyObjectVectorCallKwBuilder */
  #if CYTHON_VECTORCALL
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_PyObject_FastCallDict;
    if (__Pyx_PyTuple_SET_ITEM(builder, n, key) != (0)) return -1;
    Py_INCREF(key);
    args[n] = value;
    return 0;
}
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_VectorcallBuilder_AddArgStr;
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n);
}
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    PyObject *pyKey = PyUnicode_FromString(key);
    if (!pyKey) return -1;
    return __Pyx_VectorcallBuilder_AddArg(pyKey, value, builder, args, n);
}
#else // CYTHON_VECTORCALL
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, CYTHON_UNUSED PyObject **args, CYTHON_UNUSED int n) {
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return PyDict_SetItem(builder, key, value);
}
#endif

/* PyObjectVectorCallMethodKwBuilder */
  #if !CYTHON_VECTORCALL || PY_VERSION_HEX < 0x03090000
static PyObject *__Pyx_Object_VectorcallMethod_CallFromBuilder(PyObject *name, PyObject *const *args, size_t nargsf, PyObject *kwnames) {
    PyObject *result;
    PyObject *obj = PyObject_GetAttr(args[0], name);
    if (unlikely(!obj))
        return NULL;
    result = __Pyx_Object_Vectorcall_CallFromBuilder(obj, args+1, nargsf-1, kwnames);
    Py_DECREF(obj);
    return result;
}
#endif

/* BufferFallbackError */
  static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* PyLongBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_Fallback___Pyx_PyLong_SubtractObjC(PyObject *op1, PyObject *op2, int inplace) {
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject* __Pyx_Unpacked___Pyx_PyLong_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    long a, x;
#ifdef HAVE_LONG_LONG
    const PY_LONG_LONG llb = intval;
    PY_LONG_LONG lla, llx;
#endif
    if (unlikely(__Pyx_PyLong_IsZero(op1))) {
        return PyLong_FromLong(-intval);
    }
    if (likely(__Pyx_PyLong_IsCompact(op1))) {
        a = __Pyx_PyLong_CompactValue(op1);
    } else {
        const digit* digits = __Pyx_PyLong_Digits(op1);
        const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
        switch (size) {
            case -2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                    a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                    lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                    a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                    lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                    a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                    lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                    a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                    lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                    a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                    lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                    a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                    lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
        }
    }
            x = a - b;
        return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
    long_long:
            llx = lla - llb;
        return PyLong_FromLongLong(llx);
#endif
    return __Pyx_Fallback___Pyx_PyLong_SubtractObjC(op1, op2, inplace);
    
    
}
#endif
static PyObject* __Pyx_Float___Pyx_PyLong_SubtractObjC(PyObject *float_val, long intval, int zerodivision_check) {
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    double a = __Pyx_PyFloat_AS_DOUBLE(float_val);
        double result;
        
        result = ((double)a) - (double)b;
        return PyFloat_FromDouble(result);
}
static CYTHON_INLINE PyObject* __Pyx_PyLong_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        return __Pyx_Unpacked___Pyx_PyLong_SubtractObjC(op1, op2, intval, inplace, zerodivision_check);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        return __Pyx_Float___Pyx_PyLong_SubtractObjC(op1, intval, zerodivision_check);
    }
    return __Pyx_Fallback___Pyx_PyLong_SubtractObjC(op1, op2, inplace);
}
#endif

/* PyLongBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_Fallback___Pyx_PyLong_MultiplyObjC(PyObject *op1, PyObject *op2, int inplace) {
    return (inplace ? PyNumber_InPlaceMultiply : PyNumber_Multiply)(op1, op2);
}
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject* __Pyx_Unpacked___Pyx_PyLong_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    long a, x;
#ifdef HAVE_LONG_LONG
    const PY_LONG_LONG llb = intval;
    PY_LONG_LONG lla, llx;
#endif
    if (unlikely(__Pyx_PyLong_IsZero(op1))) {
        return __Pyx_NewRef(op1);
    }
    if (likely(__Pyx_PyLong_IsCompact(op1))) {
        a = __Pyx_PyLong_CompactValue(op1);
    } else {
        const digit* digits = __Pyx_PyLong_Digits(op1);
        const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op1);
        switch (size) {
            case -2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                    a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                    lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                    a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                    lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                    a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                    lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                    a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                    lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                    a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                    lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                    a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                    lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            default: return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
        }
    }
            CYTHON_UNUSED_VAR(a);
            CYTHON_UNUSED_VAR(b);
            #ifdef HAVE_LONG_LONG
            lla = a;
            goto long_long;
            #else
            return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
            #endif
        return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
    long_long:
            llx = lla * llb;
        return PyLong_FromLongLong(llx);
#endif
    return __Pyx_Fallback___Pyx_PyLong_MultiplyObjC(op1, op2, inplace);
    
    
}
#endif
static PyObject* __Pyx_Float___Pyx_PyLong_MultiplyObjC(PyObject *float_val, long intval, int zerodivision_check) {
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long b = intval;
    double a = __Pyx_PyFloat_AS_DOUBLE(float_val);
        double result;
        
        result = ((double)a) * (double)b;
        return PyFloat_FromDouble(result);
}
static CYTHON_INLINE PyObject* __Pyx_PyLong_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        return __Pyx_Unpacked___Pyx_PyLong_MultiplyObjC(op1, op2, intval, inplace, zerodivision_check);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        return __Pyx_Float___Pyx_PyLong_MultiplyObjC(op1, intval, zerodivision_check);
    }
    return __Pyx_Fallback___Pyx_PyLong_MultiplyObjC(op1, op2, inplace);
}
#endif

/* CallUnboundCMethod1 */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    int was_initialized =  __Pyx_CachedCFunction_GetAndSetInitializing(cfunc);
    if (likely(was_initialized == 2 && cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return __Pyx_CallCFunction(cfunc, self, arg);
        } else if (flag == METH_FASTCALL) {
            return __Pyx_CallCFunctionFast(cfunc, self, &arg, 1);
        } else if (flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return __Pyx_CallCFunctionFastWithKeywords(cfunc, self, &arg, 1, NULL);
        }
    }
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    else if (unlikely(was_initialized == 1)) {
        __Pyx_CachedCFunction tmp_cfunc = {
#ifndef __cplusplus
            0
#endif
        };
        tmp_cfunc.type = cfunc->type;
        tmp_cfunc.method_name = cfunc->method_name;
        return __Pyx__CallUnboundCMethod1(&tmp_cfunc, self, arg);
    }
#endif
    PyObject* result = __Pyx__CallUnboundCMethod1(cfunc, self, arg);
    __Pyx_CachedCFunction_SetFinishedInitializing(cfunc);
    return result;
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        PyObject *args = PyTuple_New(1);
        if (unlikely(!args)) return NULL;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = __Pyx_CallCFunctionWithKeywords(cfunc, self, args, NULL);
        else
            result = __Pyx_CallCFunction(cfunc, self, args);
        Py_DECREF(args);
    } else
#endif
    {
        result = __Pyx_PyObject_Call2Args(cfunc->method, self, arg);
    }
    return result;
}

/* DictGetItem */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    if (unlikely(__Pyx_PyDict_GetItemRef(d, key, &value) == 0)) { // no value, no error
        if (unlikely(PyTuple_Check(key))) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args)) {
                PyErr_SetObject(PyExc_KeyError, args);
                Py_DECREF(args);
            }
        } else {
            PyErr_SetObject(PyExc_KeyError, key);
        }
    }
    return value;
}
#endif

/* CIntToPyUnicode */
  static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_long(long value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(long)*3+2];
    char *dpos, *end = digits + sizeof(long)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    long remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'c') {
        if (unlikely(!(is_unsigned || value == 0 || value > 0) ||
                     !(sizeof(value) <= 2 || value & ~ (long) 0x01fffff || __Pyx_CheckUnicodeValue((int) value)))) {
            PyErr_SetString(PyExc_OverflowError, "%c arg not in range(0x110000)");
            return NULL;
        }
        if (width <= 1) {
            return PyUnicode_FromOrdinal((int) value);
        }
        return __Pyx_PyUnicode_FromOrdinal_Padded((int) value, width, padding_char);
    }
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (long) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (long) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (long) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* UnicodeAsUCS4 */
  static void __Pyx_PyUnicode_AsPy_UCS4_error(Py_ssize_t length) {
    if (likely(length >= 0)) {
        PyErr_Format(PyExc_ValueError,
                     "only single character unicode strings can be converted to Py_UCS4, "
                     "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
    }
}
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
    Py_ssize_t length = __Pyx_PyUnicode_GET_LENGTH(x);
    if (unlikely(length != 1)) {
        __Pyx_PyUnicode_AsPy_UCS4_error(length);
        return (Py_UCS4)-1;
    }
    return __Pyx_PyUnicode_READ_CHAR(x, 0);
}

/* object_ord */
  static long __Pyx__PyObject_Ord(PyObject* c) {
    Py_ssize_t size;
    if (PyBytes_Check(c)) {
        size = __Pyx_PyBytes_GET_SIZE(c);
        if (likely(size == 1)) {
#if CYTHON_ASSUME_SAFE_MACROS
            return (unsigned char) PyBytes_AS_STRING(c)[0];
#else
            char *data = PyBytes_AsString(c);
            if (unlikely(!data)) return -1;
            return (unsigned char) data[0];
#endif
        }
#if !CYTHON_ASSUME_SAFE_SIZE
        else if (unlikely(size < 0)) return -1;
#endif
    } else if (PyByteArray_Check(c)) {
        size = __Pyx_PyByteArray_GET_SIZE(c);
        if (likely(size == 1)) {
#if CYTHON_ASSUME_SAFE_MACROS
            return (unsigned char) PyByteArray_AS_STRING(c)[0];
#else
            char *data = PyByteArray_AsString(c);
            if (unlikely(!data)) return -1;
            return (unsigned char) data[0];
#endif
        }
#if !CYTHON_ASSUME_SAFE_SIZE
        else if (unlikely(size < 0)) return -1;
#endif
    } else {
        __Pyx_TypeName c_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(c));
        PyErr_Format(PyExc_TypeError,
            "ord() expected string of length 1, but " __Pyx_FMT_TYPENAME " found",
            c_type_name);
        __Pyx_DECREF_TypeName(c_type_name);
        return (long)(Py_UCS4)-1;
    }
    PyErr_Format(PyExc_TypeError,
        "ord() expected a character, but string of length %zd found", size);
    return (long)(Py_UCS4)-1;
}

/* memoryview_get_from_buffer */
  #if !CYTHON_COMPILING_IN_LIMITED_API
#else
static Py_ssize_t __Pyx_PyMemoryView_Get_itemsize(PyObject *obj) {
    Py_ssize_t result;
    PyObject *attr = PyObject_GetAttr(obj, __pyx_mstate_global->__pyx_n_u_itemsize);
    if (!attr) {
        goto bad;
    }
    result = PyLong_AsSsize_t(attr);
    Py_DECREF(attr);
    return result;
    bad:
    Py_XDECREF(attr);
    return -1;
}
#endif

/* memoryview_get_from_buffer */
  #if !CYTHON_COMPILING_IN_LIMITED_API
#else
static int __Pyx_PyMemoryView_Get_ndim(PyObject *obj) {
    int result;
    PyObject *attr = PyObject_GetAttr(obj, __pyx_mstate_global->__pyx_n_u_ndim);
    if (!attr) {
        goto bad;
    }
    result = PyLong_AsLong(attr);
    Py_DECREF(attr);
    return result;
    bad:
    Py_XDECREF(attr);
    return -1;
}
#endif

/* IterFinish */
  static CYTHON_INLINE int __Pyx_IterFinish(void) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_CurrentExceptionType();
    if (unlikely(exc_type)) {
        if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return -1;
        __Pyx_PyErr_Clear();
        return 0;
    }
    return 0;
}

/* PyObjectCallNoArg */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallMethod0 */
  static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* UnpackItemEndCheck */
  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* UnpackTupleError */
  static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else {
      Py_ssize_t size = __Pyx_PyTuple_GET_SIZE(t);
 #if !CYTHON_ASSUME_SAFE_SIZE
      if (unlikely(size < 0)) return;
 #endif
      if (size < index) {
        __Pyx_RaiseNeedMoreValuesError(size);
      } else {
        __Pyx_RaiseTooManyValuesError(index);
      }
    }
}

/* UnpackTuple2 */
  static CYTHON_INLINE int __Pyx_unpack_tuple2(
        PyObject* tuple, PyObject** value1, PyObject** value2, int is_tuple, int has_known_size, int decref_tuple) {
    if (likely(is_tuple || PyTuple_Check(tuple))) {
        Py_ssize_t size;
        if (has_known_size) {
            return __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple);
        }
        size = __Pyx_PyTuple_GET_SIZE(tuple);
        if (likely(size == 2)) {
            return __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple);
        }
        if (size >= 0) {
            __Pyx_UnpackTupleError(tuple, 2);
        }
        return -1;
    } else {
        return __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple);
    }
}
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
    value1 = __Pyx_PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = __Pyx_PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = __Pyx_PyObject_GetIterNextFunc(iter);
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
  #if CYTHON_COMPILING_IN_PYPY
#include <string.h>
#endif
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#else
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
#if !CYTHON_COMPILING_IN_PYPY
static CYTHON_INLINE int __Pyx_dict_iter_next_source_is_dict(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem) {
    PyObject *key, *value;
    if (unlikely(orig_length != PyDict_Size(iter_obj))) {
        PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
        return -1;
    }
    if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
        return 0;
    }
    if (pitem) {
        PyObject* tuple = PyTuple_New(2);
        if (unlikely(!tuple)) {
            return -1;
        }
        Py_INCREF(key);
        Py_INCREF(value);
        #if CYTHON_ASSUME_SAFE_MACROS
        PyTuple_SET_ITEM(tuple, 0, key);
        PyTuple_SET_ITEM(tuple, 1, value);
        #else
        if (unlikely(PyTuple_SetItem(tuple, 0, key) < 0)) {
            Py_DECREF(value);
            Py_DECREF(tuple);
            return -1;
        }
        if (unlikely(PyTuple_SetItem(tuple, 1, value) < 0)) {
            Py_DECREF(tuple);
            return -1;
        }
        #endif
        *pitem = tuple;
    } else {
        if (pkey) {
            Py_INCREF(key);
            *pkey = key;
        }
        if (pvalue) {
            Py_INCREF(value);
            *pvalue = value;
        }
    }
    return 1;
}
#endif
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        int result;
#if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_BEGIN_CRITICAL_SECTION(iter_obj);
#endif
        result = __Pyx_dict_iter_next_source_is_dict(iter_obj, orig_length, ppos, pkey, pvalue, pitem);
#if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_END_CRITICAL_SECTION();
#endif
        return result;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        Py_ssize_t tuple_size = __Pyx_PyTuple_GET_SIZE(iter_obj);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(tuple_size < 0)) return -1;
        #endif
        if (unlikely(pos >= tuple_size)) return 0;
        *ppos = pos + 1;
        #if CYTHON_ASSUME_SAFE_MACROS
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        #else
        next_item = PyTuple_GetItem(iter_obj, pos);
        if (unlikely(!next_item)) return -1;
        #endif
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        Py_ssize_t list_size = __Pyx_PyList_GET_SIZE(iter_obj);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(list_size < 0)) return -1;
        #endif
        if (unlikely(pos >= list_size)) return 0;
        *ppos = pos + 1;
        #if CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
        next_item = PyList_GetItemRef(iter_obj, pos);
        if (unlikely(!next_item)) return -1;
        #elif CYTHON_ASSUME_SAFE_MACROS
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
        #else
        next_item = PyList_GetItem(iter_obj, pos);
        if (unlikely(!next_item)) return -1;
        Py_INCREF(next_item);
        #endif
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* CallUnboundCMethod0 */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    int was_initialized = __Pyx_CachedCFunction_GetAndSetInitializing(cfunc);
    if (likely(was_initialized == 2 && cfunc->func)) {
        if (likely(cfunc->flag == METH_NOARGS))
            return __Pyx_CallCFunction(cfunc, self, NULL);
        if (likely(cfunc->flag == METH_FASTCALL))
            return __Pyx_CallCFunctionFast(cfunc, self, NULL, 0);
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return __Pyx_CallCFunctionFastWithKeywords(cfunc, self, NULL, 0, NULL);
        if (likely(cfunc->flag == (METH_VARARGS | METH_KEYWORDS)))
            return __Pyx_CallCFunctionWithKeywords(cfunc, self, __pyx_mstate_global->__pyx_empty_tuple, NULL);
        if (cfunc->flag == METH_VARARGS)
            return __Pyx_CallCFunction(cfunc, self, __pyx_mstate_global->__pyx_empty_tuple);
        return __Pyx__CallUnboundCMethod0(cfunc, self);
    }
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    else if (unlikely(was_initialized == 1)) {
        __Pyx_CachedCFunction tmp_cfunc = {
#ifndef __cplusplus
            0
#endif
        };
        tmp_cfunc.type = cfunc->type;
        tmp_cfunc.method_name = cfunc->method_name;
        return __Pyx__CallUnboundCMethod0(&tmp_cfunc, self);
    }
#endif
    PyObject *result = __Pyx__CallUnboundCMethod0(cfunc, self);
    __Pyx_CachedCFunction_SetFinishedInitializing(cfunc);
    return result;
}
#endif
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *result;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
    result = __Pyx_PyObject_CallOneArg(cfunc->method, self);
    return result;
}

/* py_dict_values */
  static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d) {
    return __Pyx_CallUnboundCMethod0(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_values, d);
}

/* dict_getitem_default */
  static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if !CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyBytes_CheckExact(key) || PyUnicode_CheckExact(key) || PyLong_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* ImportDottedModuleRelFirst */
  static PyObject *__Pyx_ImportDottedModuleRelFirst(PyObject *name, PyObject *parts_tuple) {
    PyObject *module;
    PyObject *from_list = NULL;
    module = __Pyx_Import(name, from_list, -1);
    Py_XDECREF(from_list);
    if (module) {
        if (parts_tuple) {
            module = __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
        }
        return module;
    }
    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
        return NULL;
    PyErr_Clear();
    return __Pyx_ImportDottedModule(name, parts_tuple);
}

/* PyObjectLookupSpecial */
  #if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* PyLongBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_Fallback___Pyx_PyLong_MultiplyCObj(PyObject *op1, PyObject *op2, int inplace) {
    return (inplace ? PyNumber_InPlaceMultiply : PyNumber_Multiply)(op1, op2);
}
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject* __Pyx_Unpacked___Pyx_PyLong_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long a = intval;
    long b, x;
#ifdef HAVE_LONG_LONG
    const PY_LONG_LONG lla = intval;
    PY_LONG_LONG llb, llx;
#endif
    if (unlikely(__Pyx_PyLong_IsZero(op2))) {
        return __Pyx_NewRef(op2);
    }
    if (likely(__Pyx_PyLong_IsCompact(op2))) {
        b = __Pyx_PyLong_CompactValue(op2);
    } else {
        const digit* digits = __Pyx_PyLong_Digits(op2);
        const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(op2);
        switch (size) {
            case -2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                    b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                    llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 2:
                if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                    b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                    llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                    b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                    llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 3:
                if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                    b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                    llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case -4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                    b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                    llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            case 4:
                if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                    b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    break;
                #ifdef HAVE_LONG_LONG
                } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                    llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                    goto long_long;
                #endif
                }
                CYTHON_FALLTHROUGH;
            default: return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
        }
    }
            CYTHON_UNUSED_VAR(a);
            CYTHON_UNUSED_VAR(b);
            #ifdef HAVE_LONG_LONG
            llb = b;
            goto long_long;
            #else
            return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
            #endif
        return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
    long_long:
            llx = lla * llb;
        return PyLong_FromLongLong(llx);
#endif
    return __Pyx_Fallback___Pyx_PyLong_MultiplyCObj(op1, op2, inplace);
    
    
}
#endif
static PyObject* __Pyx_Float___Pyx_PyLong_MultiplyCObj(PyObject *float_val, long intval, int zerodivision_check) {
    CYTHON_UNUSED_VAR(zerodivision_check);
    const long a = intval;
    double b = __Pyx_PyFloat_AS_DOUBLE(float_val);
        double result;
        
        result = ((double)a) * (double)b;
        return PyFloat_FromDouble(result);
}
static CYTHON_INLINE PyObject* __Pyx_PyLong_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        return __Pyx_Unpacked___Pyx_PyLong_MultiplyCObj(op1, op2, intval, inplace, zerodivision_check);
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        return __Pyx_Float___Pyx_PyLong_MultiplyCObj(op2, intval, zerodivision_check);
    }
    return __Pyx_Fallback___Pyx_PyLong_MultiplyCObj(op1, op2, inplace);
}
#endif

/* CallNextTpDealloc */
  static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    destructor tp_dealloc = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_dealloc, destructor) != current_tp_dealloc)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_dealloc = __Pyx_PyType_GetSlot(type, tp_dealloc, destructor)) == current_tp_dealloc)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type)
        tp_dealloc(obj);
}

/* CallNextTpTraverse */
  static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    traverseproc tp_traverse = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc) != current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_traverse = __Pyx_PyType_GetSlot(type, tp_traverse, traverseproc)) == current_tp_traverse)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_traverse)
        return tp_traverse(obj, v, a);
    return 0;
}

/* CallTypeTraverse */
  #if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg) {
    #if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000
    if (__Pyx_get_runtime_version() < 0x03090000) return 0;
    #endif
    if (!always_call) {
        PyTypeObject *base = __Pyx_PyObject_GetSlot(o, tp_base, PyTypeObject*);
        unsigned long flags = PyType_GetFlags(base);
        if (flags & Py_TPFLAGS_HEAPTYPE) {
            return 0;
        }
    }
    Py_VISIT((PyObject*)Py_TYPE(o));
    return 0;
}
#endif

/* CallNextTpClear */
  static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    inquiry tp_clear = NULL;
    while (type && __Pyx_PyType_GetSlot(type, tp_clear, inquiry) != current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    while (type && (tp_clear = __Pyx_PyType_GetSlot(type, tp_clear, inquiry)) == current_tp_clear)
        type = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
    if (type && tp_clear)
        tp_clear(obj);
}

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType_3_1_2
#define __PYX_HAVE_RT_ImportType_3_1_2
static PyTypeObject *__Pyx_ImportType_3_1_2(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_1_2 check_size)
{
    PyObject *result = 0;
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    if (size == 0) {
        return (PyTypeObject *)result;
    }
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_1_2 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_1_2 && (size_t)basicsize > size) {
        if (PyErr_WarnFormat(NULL, 0,
                "%.200s.%.200s size changed, may indicate binary incompatibility. "
                "Expected %zd from C header, got %zd from PyObject",
                module_name, class_name, size, basicsize) < 0) {
            goto bad;
        }
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
  static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_mstate_global->__pyx_n_u_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_mstate_global->__pyx_n_u_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* LimitedApiGetTypeDict */
  #if CYTHON_COMPILING_IN_LIMITED_API
static Py_ssize_t __Pyx_GetTypeDictOffset(void) {
    PyObject *tp_dictoffset_o;
    Py_ssize_t tp_dictoffset;
    tp_dictoffset_o = PyObject_GetAttrString((PyObject*)(&PyType_Type), "__dictoffset__");
    if (unlikely(!tp_dictoffset_o)) return -1;
    tp_dictoffset = PyLong_AsSsize_t(tp_dictoffset_o);
    Py_DECREF(tp_dictoffset_o);
    if (unlikely(tp_dictoffset == 0)) {
        PyErr_SetString(
            PyExc_TypeError,
            "'type' doesn't have a dictoffset");
        return -1;
    } else if (unlikely(tp_dictoffset < 0)) {
        PyErr_SetString(
            PyExc_TypeError,
            "'type' has an unexpected negative dictoffset. "
            "Please report this as Cython bug");
        return -1;
    }
    return tp_dictoffset;
}
static PyObject *__Pyx_GetTypeDict(PyTypeObject *tp) {
    static Py_ssize_t tp_dictoffset = 0;
    if (unlikely(tp_dictoffset == 0)) {
        tp_dictoffset = __Pyx_GetTypeDictOffset();
        if (unlikely(tp_dictoffset == -1 && PyErr_Occurred())) {
            tp_dictoffset = 0; // try again next time?
            return NULL;
        }
    }
    return *(PyObject**)((char*)tp + tp_dictoffset);
}
#endif

/* SetItemOnTypeDict */
  static int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v) {
    int result;
    PyObject *tp_dict;
#if CYTHON_COMPILING_IN_LIMITED_API
    tp_dict = __Pyx_GetTypeDict(tp);
    if (unlikely(!tp_dict)) return -1;
#else
    tp_dict = tp->tp_dict;
#endif
    result = PyDict_SetItem(tp_dict, k, v);
    if (likely(!result)) {
        PyType_Modified(tp);
        if (unlikely(PyObject_HasAttr(v, __pyx_mstate_global->__pyx_n_u_set_name))) {
            PyObject *setNameResult = PyObject_CallMethodObjArgs(v, __pyx_mstate_global->__pyx_n_u_set_name,  (PyObject *) tp, k, NULL);
            if (!setNameResult) return -1;
            Py_DECREF(setNameResult);
        }
    }
    return result;
}

/* FixUpExtensionType */
  static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if __PYX_LIMITED_VERSION_HEX > 0x030900B1
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
    CYTHON_UNUSED_VAR(__Pyx__SetItemOnTypeDict);
#else
    const PyType_Slot *slot = spec->slots;
    int changed = 0;
#if !CYTHON_COMPILING_IN_LIMITED_API
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
#if !CYTHON_COMPILING_IN_CPYTHON
        const
#endif  // !CYTHON_COMPILING_IN_CPYTHON)
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif  // CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    int set_item_result = PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr);
                    Py_DECREF(descr);
                    if (unlikely(set_item_result < 0)) {
                        return -1;
                    }
                    changed = 1;
                }
            }
            memb++;
        }
    }
#endif  // !CYTHON_COMPILING_IN_LIMITED_API
    slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_getset)
        slot++;
    if (slot && slot->slot == Py_tp_getset) {
        PyGetSetDef *getset = (PyGetSetDef*) slot->pfunc;
        while (getset && getset->name) {
            if (getset->name[0] == '_' && getset->name[1] == '_' && strcmp(getset->name, "__module__") == 0) {
                PyObject *descr = PyDescr_NewGetSet(type, getset);
                if (unlikely(!descr))
                    return -1;
                #if CYTHON_COMPILING_IN_LIMITED_API
                PyObject *pyname = PyUnicode_FromString(getset->name);
                if (unlikely(!pyname)) {
                    Py_DECREF(descr);
                    return -1;
                }
                int set_item_result = __Pyx_SetItemOnTypeDict(type, pyname, descr);
                Py_DECREF(pyname);
                #else
                CYTHON_UNUSED_VAR(__Pyx__SetItemOnTypeDict);
                int set_item_result = PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr);
                #endif
                Py_DECREF(descr);
                if (unlikely(set_item_result < 0)) {
                    return -1;
                }
                changed = 1;
            }
            ++getset;
        }
    }
    if (changed)
        PyType_Modified(type);
#endif  // PY_VERSION_HEX > 0x030900B1
    return 0;
}

/* ValidateBasesTuple */
  #if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_SIZE
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (unlikely(n < 0)) return -1;
#endif
    for (i = 1; i < n; i++)
    {
        PyTypeObject *b;
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetFullyQualifiedName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetFullyQualifiedName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !CYTHON_USE_TYPE_SLOTS
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
  CYTHON_UNUSED static int __Pyx_PyType_HasMultipleInheritance(PyTypeObject *t) {
    while (t) {
        PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
        if (bases) {
            return 1;
        }
        t = __Pyx_PyType_GetSlot(t, tp_base, PyTypeObject*);
    }
    return 0;
}
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !CYTHON_COMPILING_IN_CPYTHON || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    if (!__Pyx_PyType_HasMultipleInheritance(t)) {
        return PyType_Ready(t);
    }
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400) &&\
                !CYTHON_COMPILING_IN_GRAAL
        gc = PyImport_GetModule(__pyx_mstate_global->__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_mstate_global->__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* SetVTable */
  static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_mstate_global->__pyx_n_u_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_mstate_global->__pyx_n_u_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* MergeVTables */
  static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i=0;
    Py_ssize_t size;
    void** base_vtables;
    __Pyx_TypeName tp_base_name = NULL;
    __Pyx_TypeName base_name = NULL;
    void* unknown = (void*)-1;
    PyObject* bases = __Pyx_PyType_GetSlot(type, tp_bases, PyObject*);
    int base_depth = 0;
    {
        PyTypeObject* base = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
        while (base) {
            base_depth += 1;
            base = __Pyx_PyType_GetSlot(base, tp_base, PyTypeObject*);
        }
    }
    base_vtables = (void**) PyMem_Malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
#if CYTHON_COMPILING_IN_LIMITED_API
    size = PyTuple_Size(bases);
    if (size < 0) goto other_failure;
#else
    size = PyTuple_GET_SIZE(bases);
#endif
    for (i = 1; i < size; i++) {
        PyObject *basei;
        void* base_vtable;
#if CYTHON_AVOID_BORROWED_REFS
        basei = PySequence_GetItem(bases, i);
        if (unlikely(!basei)) goto other_failure;
#elif !CYTHON_ASSUME_SAFE_MACROS
        basei = PyTuple_GetItem(bases, i);
        if (unlikely(!basei)) goto other_failure;
#else
        basei = PyTuple_GET_ITEM(bases, i);
#endif
        base_vtable = __Pyx_GetVtable((PyTypeObject*)basei);
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(basei);
#endif
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = __Pyx_PyType_GetSlot(base, tp_base, PyTypeObject*);
            }
        }
    }
    PyErr_Clear();
    PyMem_Free(base_vtables);
    return 0;
bad:
    {
        PyTypeObject* basei = NULL;
        PyTypeObject* tp_base = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
        tp_base_name = __Pyx_PyType_GetFullyQualifiedName(tp_base);
#if CYTHON_AVOID_BORROWED_REFS
        basei = (PyTypeObject*)PySequence_GetItem(bases, i);
        if (unlikely(!basei)) goto really_bad;
#elif !CYTHON_ASSUME_SAFE_MACROS
        basei = (PyTypeObject*)PyTuple_GetItem(bases, i);
        if (unlikely(!basei)) goto really_bad;
#else
        basei = (PyTypeObject*)PyTuple_GET_ITEM(bases, i);
#endif
        base_name = __Pyx_PyType_GetFullyQualifiedName(basei);
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(basei);
#endif
    }
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
#if CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
really_bad: // bad has failed!
#endif
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
other_failure:
#endif
    PyMem_Free(base_vtables);
    return -1;
}

/* DelItemOnTypeDict */
  static int __Pyx__DelItemOnTypeDict(PyTypeObject *tp, PyObject *k) {
    int result;
    PyObject *tp_dict;
#if CYTHON_COMPILING_IN_LIMITED_API
    tp_dict = __Pyx_GetTypeDict(tp);
    if (unlikely(!tp_dict)) return -1;
#else
    tp_dict = tp->tp_dict;
#endif
    result = PyDict_DelItem(tp_dict, k);
    if (likely(!result)) PyType_Modified(tp);
    return result;
}

/* SetupReduce */
  static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_mstate_global->__pyx_n_u_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_mstate_global->__pyx_n_u_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_mstate_global->__pyx_n_u_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_reduce_cython);
            if (likely(reduce_cython)) {
                ret = __Pyx_SetItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = __Pyx_DelItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_mstate_global->__pyx_n_u_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = __Pyx_SetItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = __Pyx_DelItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetFullyQualifiedName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* ListPack */
  static PyObject *__Pyx_PyList_Pack(Py_ssize_t n, ...) {
    va_list va;
    PyObject *l = PyList_New(n);
    va_start(va, n);
    if (unlikely(!l)) goto end;
    for (Py_ssize_t i=0; i<n; ++i) {
        PyObject *arg = va_arg(va, PyObject*);
        Py_INCREF(arg);
        if (__Pyx_PyList_SET_ITEM(l, i, arg) != (0)) {
            Py_CLEAR(l);
            goto end;
        }
    }
    end:
    va_end(va);
    return l;
}

/* FetchSharedCythonModule */
  static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef(__PYX_ABI_MODULE_NAME);
}

/* dict_setdefault */
  static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value,
                                                       int is_safe_type) {
    PyObject* value;
    CYTHON_MAYBE_UNUSED_VAR(is_safe_type);
#if CYTHON_COMPILING_IN_LIMITED_API
    value = PyObject_CallMethod(d, "setdefault", "OO", key, default_value);
#elif PY_VERSION_HEX >= 0x030d0000
    PyDict_SetDefaultRef(d, key, default_value, &value);
#else
    value = PyDict_SetDefault(d, key, default_value);
    if (unlikely(!value)) return NULL;
    Py_INCREF(value);
#endif
    return value;
}

/* FetchCommonType */
  #if __PYX_LIMITED_VERSION_HEX < 0x030C0000
static PyObject* __Pyx_PyType_FromMetaclass(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *result = __Pyx_PyType_FromModuleAndSpec(module, spec, bases);
    if (result && metaclass) {
        PyObject *old_tp = (PyObject*)Py_TYPE(result);
    Py_INCREF((PyObject*)metaclass);
#if __PYX_LIMITED_VERSION_HEX >= 0x03090000
        Py_SET_TYPE(result, metaclass);
#else
        result->ob_type = metaclass;
#endif
        Py_DECREF(old_tp);
    }
    return result;
}
#else
#define __Pyx_PyType_FromMetaclass(me, mo, s, b) PyType_FromMetaclass(me, mo, s, b)
#endif
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t expected_basicsize) {
    Py_ssize_t basicsize;
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (expected_basicsize == 0) {
        return 0; // size is inherited, nothing useful to check
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
    if (unlikely(!py_basicsize)) return -1;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = NULL;
    if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) return -1;
#else
    basicsize = ((PyTypeObject*) cached_type)->tp_basicsize;
#endif
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module = NULL, *cached_type = NULL, *abi_module_dict, *new_cached_type, *py_object_name;
    int get_item_ref_result;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    py_object_name = PyUnicode_FromString(object_name);
    if (!py_object_name) return NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) goto done;
    abi_module_dict = PyModule_GetDict(abi_module);
    if (!abi_module_dict) goto done;
    get_item_ref_result = __Pyx_PyDict_GetItemRef(abi_module_dict, py_object_name, &cached_type);
    if (get_item_ref_result == 1) {
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    } else if (unlikely(get_item_ref_result == -1)) {
        goto bad;
    }
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromMetaclass(metaclass, abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    new_cached_type = __Pyx_PyDict_SetDefault(abi_module_dict, py_object_name, cached_type, 1);
    if (unlikely(new_cached_type != cached_type)) {
        if (unlikely(!new_cached_type)) goto bad;
        Py_DECREF(cached_type);
        cached_type = new_cached_type;
        if (__Pyx_VerifyCachedType(
                cached_type,
                object_name,
                spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    } else {
        Py_DECREF(new_cached_type);
    }
done:
    Py_XDECREF(abi_module);
    Py_DECREF(py_object_name);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CommonTypesMetaclass */
  PyObject* __pyx_CommonTypesMetaclass_get_module(CYTHON_UNUSED PyObject *self, CYTHON_UNUSED void* context) {
    return PyUnicode_FromString(__PYX_ABI_MODULE_NAME);
}
static PyGetSetDef __pyx_CommonTypesMetaclass_getset[] = {
    {"__module__", __pyx_CommonTypesMetaclass_get_module, NULL, NULL, NULL},
    {0, 0, 0, 0, 0}
};
static PyType_Slot __pyx_CommonTypesMetaclass_slots[] = {
    {Py_tp_getset, (void *)__pyx_CommonTypesMetaclass_getset},
    {0, 0}
};
static PyType_Spec __pyx_CommonTypesMetaclass_spec = {
    __PYX_TYPE_MODULE_PREFIX "_common_types_metatype",
    0,
    0,
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
    Py_TPFLAGS_DISALLOW_INSTANTIATION |
#endif
    Py_TPFLAGS_DEFAULT,
    __pyx_CommonTypesMetaclass_slots
};
static int __pyx_CommonTypesMetaclass_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    PyObject *bases = PyTuple_Pack(1, &PyType_Type);
    if (unlikely(!bases)) {
        return -1;
    }
    mstate->__pyx_CommonTypesMetaclassType = __Pyx_FetchCommonTypeFromSpec(NULL, module, &__pyx_CommonTypesMetaclass_spec, bases);
    if (unlikely(mstate->__pyx_CommonTypesMetaclassType == NULL)) {
        return -1;
    }
    return 0;
}

/* PyMethodNew */
  #if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *result;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    #if __PYX_LIMITED_VERSION_HEX >= 0x030C0000
    {
        PyObject *args[] = {func, self};
        result = PyObject_Vectorcall(__pyx_mstate_global->__Pyx_CachedMethodType, args, 2, NULL);
    }
    #else
    result = PyObject_CallFunctionObjArgs(__pyx_mstate_global->__Pyx_CachedMethodType, func, self, NULL);
    #endif
    return result;
}
#else
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#endif

/* PyVectorcallFastCallDict */
  #if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    #if !CYTHON_ASSUME_SAFE_SIZE
    Py_ssize_t nkw = PyDict_Size(kw);
    if (unlikely(nkw == -1)) return NULL;
    #else
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    #endif
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &=
        #if CYTHON_COMPILING_IN_LIMITED_API
            PyType_GetFlags(Py_TYPE(key));
        #else
            Py_TYPE(key)->tp_flags;
        #endif
        Py_INCREF(key);
        Py_INCREF(value);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(PyTuple_SetItem(kwnames, i, key) < 0)) goto cleanup;
        #else
        PyTuple_SET_ITEM(kwnames, i, key);
        #endif
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    Py_ssize_t kw_size =
        likely(kw == NULL) ?
        0 :
#if !CYTHON_ASSUME_SAFE_SIZE
        PyDict_Size(kw);
#else
        PyDict_GET_SIZE(kw);
#endif
    if (kw_size == 0) {
        return vc(func, args, nargs, NULL);
    }
#if !CYTHON_ASSUME_SAFE_SIZE
    else if (unlikely(kw_size == -1)) {
        return NULL;
    }
#endif
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
  #if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunctionNoMethod(PyObject *func, void (*cfunc)(void)) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void)) {
    if ((PyObject*)Py_TYPE(func) == __pyx_mstate_global->__Pyx_CachedMethodType) {
        int result;
        PyObject *newFunc = PyObject_GetAttr(func, __pyx_mstate_global->__pyx_n_u_func);
        if (unlikely(!newFunc)) {
            PyErr_Clear(); // It's only an optimization, so don't throw an error
            return 0;
        }
        result = __Pyx__IsSameCyOrCFunctionNoMethod(newFunc, cfunc);
        Py_DECREF(newFunc);
        return result;
    }
    return __Pyx__IsSameCyOrCFunctionNoMethod(func, cfunc);
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void)) {
    if (PyMethod_Check(func)) {
        func = PyMethod_GET_FUNCTION(func);
    }
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure) {
    PyObject *result;
    CYTHON_UNUSED_VAR(closure);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_doc_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#else
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    PyObject *result = NULL;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_name_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    PyObject *result;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    Py_INCREF(op->func_qualname);
    result = op->func_qualname;
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    PyObject *result;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_dict_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = NULL;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_defaults_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_kwdefaults_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject *result;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_annotations_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine_value(__pyx_CyFunctionObject *op) {
    int is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
    if (is_coroutine) {
        PyObject *is_coroutine_value, *module, *fromlist, *marker = __pyx_mstate_global->__pyx_n_u_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_mstate_global->__pyx_n_u_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        is_coroutine_value = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(is_coroutine_value)) {
            return is_coroutine_value;
        }
ignore:
        PyErr_Clear();
    }
    return __Pyx_PyBool_FromLong(is_coroutine);
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    PyObject *result;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    result = __Pyx_CyFunction_get_is_coroutine_value(op);
    if (unlikely(!result))
        return NULL;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    if (op->func_is_coroutine) {
        Py_DECREF(result);
        result = __Pyx_NewRef(op->func_is_coroutine);
    } else {
        op->func_is_coroutine = __Pyx_NewRef(result);
    }
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static void __Pyx_CyFunction_raise_argument_count_error(__pyx_CyFunctionObject *func, const char* message, Py_ssize_t size) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);
    if (!py_name) return;
    PyErr_Format(PyExc_TypeError,
        "%.200S() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",
        py_name, message, size);
    Py_DECREF(py_name);
#else
    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;
    PyErr_Format(PyExc_TypeError,
        "%.200s() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",
        name, message, size);
#endif
}
static void __Pyx_CyFunction_raise_type_error(__pyx_CyFunctionObject *func, const char* message) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);
    if (!py_name) return;
    PyErr_Format(PyExc_TypeError,
        "%.200S() %s",
        py_name, message);
    Py_DECREF(py_name);
#else
    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;
    PyErr_Format(PyExc_TypeError,
        "%.200s() %s",
        name, message);
#endif
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {"func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {"__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {"func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {"__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {"__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {"func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {"__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {"func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {"__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {"func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {"__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {"func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {"__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {"func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {"__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {"__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {"__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {"_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
    {"__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
    {"__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
    {"__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {"__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    PyObject *result = NULL;
    CYTHON_UNUSED_VAR(args);
    __Pyx_BEGIN_CRITICAL_SECTION(m);
    Py_INCREF(m->func_qualname);
    result = m->func_qualname;
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    Py_CLEAR(m->defaults);
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    {
        int e = __Pyx_call_type_traverse((PyObject*)m, 1, visit, arg);
        if (e) return e;
    }
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    __Pyx_VISIT_CONST(m->func_name);
    __Pyx_VISIT_CONST(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    __Pyx_VISIT_CONST(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    Py_VISIT(m->defaults);
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
    PyObject *repr;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    repr = PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
    __Pyx_END_CRITICAL_SECTION();
    return repr;
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void(*)(void))meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_SIZE
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
            __Pyx_CyFunction_raise_argument_count_error(
                (__pyx_CyFunctionObject*)func,
                "takes no arguments", size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_SIZE
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            __Pyx_CyFunction_raise_argument_count_error(
                (__pyx_CyFunctionObject*)func,
                "takes exactly one argument", size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    __Pyx_CyFunction_raise_type_error(
        (__pyx_CyFunctionObject*)func, "takes no keyword arguments");
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_SIZE
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(argc < 0)) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            __Pyx_CyFunction_raise_type_error(
                cyfunc, "needs an argument");
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(__Pyx_PyTuple_GET_SIZE(kwnames))) {
        __Pyx_CyFunction_raise_type_error(
            cyfunc, "takes no keyword arguments");
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        __Pyx_CyFunction_raise_argument_count_error(
            cyfunc, "takes no arguments", nargs);
        return NULL;
    }
    return meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        __Pyx_CyFunction_raise_argument_count_error(
            cyfunc, "takes exactly one argument", nargs);
        return NULL;
    }
    return meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if CYTHON_METH_FASTCALL
#if defined(Py_TPFLAGS_HAVE_VECTORCALL)
    Py_TPFLAGS_HAVE_VECTORCALL |
#elif defined(_Py_TPFLAGS_HAVE_VECTORCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
#endif // CYTHON_METH_FASTCALL
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
static int __pyx_CyFunction_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    mstate->__pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(
        mstate->__pyx_CommonTypesMetaclassType, module, &__pyx_CyFunctionType_spec, NULL);
    if (unlikely(mstate->__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func, PyTypeObject *defaults_type) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_CallObject((PyObject*)defaults_type, NULL); // _PyObject_New(defaults_type);
    if (unlikely(!m->defaults))
        return NULL;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
  static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_mstate_global->__pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* FusedFunction */
  static PyObject *
__pyx_FusedFunction_New(PyMethodDef *ml, int flags,
                        PyObject *qualname, PyObject *closure,
                        PyObject *module, PyObject *globals,
                        PyObject *code)
{
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_mstate_global->__pyx_FusedFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        __pyx_FusedFunctionObject *fusedfunc = (__pyx_FusedFunctionObject *) op;
        fusedfunc->__signatures__ = NULL;
        fusedfunc->self = NULL;
        #if CYTHON_COMPILING_IN_LIMITED_API
        fusedfunc->ml = ml;
        #endif
        PyObject_GC_Track(op);
    }
    return op;
}
static void
__pyx_FusedFunction_dealloc(__pyx_FusedFunctionObject *self)
{
    PyObject_GC_UnTrack(self);
    Py_CLEAR(self->self);
    Py_CLEAR(self->__signatures__);
    __Pyx__CyFunction_dealloc((__pyx_CyFunctionObject *) self);
}
static int
__pyx_FusedFunction_traverse(__pyx_FusedFunctionObject *self,
                             visitproc visit,
                             void *arg)
{
    Py_VISIT(self->self);
    Py_VISIT(self->__signatures__);
    return __Pyx_CyFunction_traverse((__pyx_CyFunctionObject *) self, visit, arg);
}
static int
__pyx_FusedFunction_clear(__pyx_FusedFunctionObject *self)
{
    Py_CLEAR(self->self);
    Py_CLEAR(self->__signatures__);
    return __Pyx_CyFunction_clear((__pyx_CyFunctionObject *) self);
}
static __pyx_FusedFunctionObject *
__pyx_FusedFunction_descr_get_locked(__pyx_FusedFunctionObject *func, PyObject *obj)
{
    PyObject *module;
    __pyx_FusedFunctionObject *meth;
    #if CYTHON_COMPILING_IN_LIMITED_API
    module = __Pyx_CyFunction_get_module((__pyx_CyFunctionObject *) func, NULL);
    if ((unlikely(!module))) return NULL;
    #else
    module = ((PyCFunctionObject *) func)->m_module;
    #endif
    meth = (__pyx_FusedFunctionObject *) __pyx_FusedFunction_New(
        #if CYTHON_COMPILING_IN_LIMITED_API
                    func->ml,
        #else
                    ((PyCFunctionObject *) func)->m_ml,
        #endif
                    ((__pyx_CyFunctionObject *) func)->flags,
                    ((__pyx_CyFunctionObject *) func)->func_qualname,
                    ((__pyx_CyFunctionObject *) func)->func_closure,
                    module,
                    ((__pyx_CyFunctionObject *) func)->func_globals,
                    ((__pyx_CyFunctionObject *) func)->func_code);
    #if CYTHON_COMPILING_IN_LIMITED_API
    Py_DECREF(module);
    #endif
    if (unlikely(!meth))
        return NULL;
    Py_XINCREF(func->func.defaults);
    meth->func.defaults = func->func.defaults;
    __Pyx_CyFunction_SetClassObj(meth, __Pyx_CyFunction_GetClassObj(func));
    Py_XINCREF(func->__signatures__);
    meth->__signatures__ = func->__signatures__;
    Py_XINCREF(func->func.defaults_tuple);
    meth->func.defaults_tuple = func->func.defaults_tuple;
    Py_XINCREF(obj);
    meth->self = obj;
    return meth;
}
static PyObject *
__pyx_FusedFunction_descr_get(PyObject *self, PyObject *obj, PyObject *type)
{
    __pyx_FusedFunctionObject *func, *meth;
    func = (__pyx_FusedFunctionObject *) self;
    if (func->self || func->func.flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(self);
        return self;
    }
    if (obj == Py_None)
        obj = NULL;
    if (func->func.flags & __Pyx_CYFUNCTION_CLASSMETHOD)
        obj = type;
    if (obj == NULL) {
        Py_INCREF(self);
        return self;
    }
    __Pyx_BEGIN_CRITICAL_SECTION(func);
    meth = __pyx_FusedFunction_descr_get_locked(func, obj);
    __Pyx_END_CRITICAL_SECTION()
    return (PyObject *) meth;
}
static PyObject *
_obj_to_string(PyObject *obj)
{
    if (PyUnicode_CheckExact(obj))
        return __Pyx_NewRef(obj);
    else if (PyType_Check(obj))
        return PyObject_GetAttr(obj, __pyx_mstate_global->__pyx_n_u_name_2);
    else
        return PyObject_Str(obj);
}
static PyObject *
__pyx_FusedFunction_getitem(__pyx_FusedFunctionObject *self, PyObject *idx)
{
    PyObject *signature = NULL;
    PyObject *unbound_result_func;
    PyObject *result_func = NULL;
    if (unlikely(self->__signatures__ == NULL)) {
        PyErr_SetString(PyExc_TypeError, "Function is not fused");
        return NULL;
    }
    if (PyTuple_Check(idx)) {
        Py_ssize_t n = __Pyx_PyTuple_GET_SIZE(idx);
        PyObject *list;
        int i;
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(n < 0)) return NULL;
        #endif
        list = PyList_New(n);
        if (unlikely(!list))
            return NULL;
        for (i = 0; i < n; i++) {
            PyObject *string;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            PyObject *item = PyTuple_GET_ITEM(idx, i);
#else
            PyObject *item = __Pyx_PySequence_ITEM(idx, i);  if (unlikely(!item)) goto __pyx_err;
#endif
            string = _obj_to_string(item);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
            Py_DECREF(item);
#endif
            if (unlikely(!string)) goto __pyx_err;
	    if (__Pyx_PyList_SET_ITEM(list, i, string) < 0) goto __pyx_err;
        }
        signature = PyUnicode_Join(__pyx_mstate_global->__pyx_kp_u__16, list);
__pyx_err:;
        Py_DECREF(list);
    } else {
        signature = _obj_to_string(idx);
    }
    if (unlikely(!signature))
        return NULL;
    unbound_result_func = PyObject_GetItem(self->__signatures__, signature);
    if (likely(unbound_result_func)) {
        if (self->self) {
            __pyx_FusedFunctionObject *unbound = (__pyx_FusedFunctionObject *) unbound_result_func;
            __Pyx_CyFunction_SetClassObj(unbound, __Pyx_CyFunction_GetClassObj(self));
            result_func = __pyx_FusedFunction_descr_get(unbound_result_func,
                                                        self->self, self->self);
        } else {
            result_func = unbound_result_func;
            Py_INCREF(result_func);
        }
    }
    Py_DECREF(signature);
    Py_XDECREF(unbound_result_func);
    return result_func;
}
static PyObject *
__pyx_FusedFunction_callfunction(PyObject *func, PyObject *args, PyObject *kw)
{
     __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    int static_specialized = (cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD &&
                              !((__pyx_FusedFunctionObject *) func)->__signatures__);
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !static_specialized) {
        return __Pyx_CyFunction_CallAsMethod(func, args, kw);
    } else {
        return __Pyx_CyFunction_Call(func, args, kw);
    }
}
static PyObject *
__pyx_FusedFunction_call(PyObject *func, PyObject *args, PyObject *kw)
{
    __pyx_FusedFunctionObject *binding_func = (__pyx_FusedFunctionObject *) func;
    Py_ssize_t argc = __Pyx_PyTuple_GET_SIZE(args);
    PyObject *new_args = NULL;
    __pyx_FusedFunctionObject *new_func = NULL;
    PyObject *result = NULL;
    int is_staticmethod = binding_func->func.flags & __Pyx_CYFUNCTION_STATICMETHOD;
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely(argc < 0)) return NULL;
    #endif
    if (binding_func->self) {
        PyObject *self;
        Py_ssize_t i;
        new_args = PyTuple_New(argc + 1);
        if (unlikely(!new_args))
            return NULL;
        self = binding_func->self;
        Py_INCREF(self);
        if (__Pyx_PyTuple_SET_ITEM(new_args, 0, self)) goto bad;
        self = NULL;
        for (i = 0; i < argc; i++) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            PyObject *item = PyTuple_GET_ITEM(args, i);
            Py_INCREF(item);
#else
            PyObject *item = __Pyx_PySequence_ITEM(args, i);  if (unlikely(!item)) goto bad;
#endif
        if (__Pyx_PyTuple_SET_ITEM(new_args, i + 1, item)) goto bad;
        }
        args = new_args;
    }
    if (binding_func->__signatures__) {
        PyObject *tup;
        if (is_staticmethod && binding_func->func.flags & __Pyx_CYFUNCTION_CCLASS) {
            tup = PyTuple_Pack(3, args,
                               kw == NULL ? Py_None : kw,
                               binding_func->func.defaults_tuple);
            if (unlikely(!tup)) goto bad;
            new_func = (__pyx_FusedFunctionObject *) __Pyx_CyFunction_CallMethod(
                func, binding_func->__signatures__, tup, NULL);
        } else {
            tup = PyTuple_Pack(4, binding_func->__signatures__, args,
                               kw == NULL ? Py_None : kw,
                               binding_func->func.defaults_tuple);
            if (unlikely(!tup)) goto bad;
            new_func = (__pyx_FusedFunctionObject *) __pyx_FusedFunction_callfunction(func, tup, NULL);
        }
        Py_DECREF(tup);
        if (unlikely(!new_func))
            goto bad;
        __Pyx_CyFunction_SetClassObj(new_func, __Pyx_CyFunction_GetClassObj(binding_func));
        func = (PyObject *) new_func;
    }
    result = __pyx_FusedFunction_callfunction(func, args, kw);
bad:
    Py_XDECREF(new_args);
    Py_XDECREF((PyObject *) new_func);
    return result;
}
static PyMemberDef __pyx_FusedFunction_members[] = {
    {"__signatures__",
     T_OBJECT,
     offsetof(__pyx_FusedFunctionObject, __signatures__),
     READONLY,
     0},
    {"__self__", T_OBJECT_EX, offsetof(__pyx_FusedFunctionObject, self), READONLY, 0},
    #if !CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
    #endif
    {0, 0, 0, 0, 0},
};
static PyGetSetDef __pyx_FusedFunction_getsets[] = {
    {"__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    #if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
    #endif
    {0, 0, 0, 0, 0}
};
static PyType_Slot __pyx_FusedFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__pyx_FusedFunction_dealloc},
    {Py_tp_call, (void *)__pyx_FusedFunction_call},
    {Py_tp_traverse, (void *)__pyx_FusedFunction_traverse},
    {Py_tp_clear, (void *)__pyx_FusedFunction_clear},
    {Py_tp_members, (void *)__pyx_FusedFunction_members},
    {Py_tp_getset, (void *)__pyx_FusedFunction_getsets},
    {Py_tp_descr_get, (void *)__pyx_FusedFunction_descr_get},
    {Py_mp_subscript, (void *)__pyx_FusedFunction_getitem},
    {0, 0},
};
static PyType_Spec __pyx_FusedFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "fused_cython_function",
    sizeof(__pyx_FusedFunctionObject),
    0,
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    __pyx_FusedFunctionType_slots
};
static int __pyx_FusedFunction_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    PyObject *bases = PyTuple_Pack(1, mstate->__pyx_CyFunctionType);
    if (unlikely(!bases)) {
        return -1;
    }
    mstate->__pyx_FusedFunctionType = __Pyx_FetchCommonTypeFromSpec(
        mstate->__pyx_CommonTypesMetaclassType, module, &__pyx_FusedFunctionType_spec, bases);
    Py_DECREF(bases);
    if (unlikely(mstate->__pyx_FusedFunctionType == NULL)) {
        return -1;
    }
    return 0;
}

/* CLineInTraceback */
  #if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_mstate_global->__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_mstate_global->__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __Pyx_BEGIN_CRITICAL_SECTION(*cython_runtime_dict);
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_mstate_global->__pyx_n_u_cline_in_traceback))
        Py_XINCREF(use_cline);
        __Pyx_END_CRITICAL_SECTION();
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_INCREF(use_cline);
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    Py_XDECREF(use_cline);
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static __Pyx_CachedCodeObjectType *__pyx__find_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line) {
    __Pyx_CachedCodeObjectType* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!code_cache->entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);
    if (unlikely(pos >= code_cache->count) || unlikely(code_cache->entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = code_cache->entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line) {
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS
    (void)__pyx__find_code_object;
    return NULL; // Most implementation should have atomics. But otherwise, don't make it thread-safe, just miss.
#else
    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_nonatomic_int_type old_count = __pyx_atomic_incr_acq_rel(&code_cache->accessor_count);
    if (old_count < 0) {
        __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);
        return NULL;
    }
#endif
    __Pyx_CachedCodeObjectType *result = __pyx__find_code_object(code_cache, code_line);
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);
#endif
    return result;
#endif
}
static void __pyx__insert_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line, __Pyx_CachedCodeObjectType* code_object)
{
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = code_cache->entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            code_cache->entries = entries;
            code_cache->max_count = 64;
            code_cache->count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);
    if ((pos < code_cache->count) && unlikely(code_cache->entries[pos].code_line == code_line)) {
        __Pyx_CachedCodeObjectType* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_INCREF(code_object);
        Py_DECREF(tmp);
        return;
    }
    if (code_cache->count == code_cache->max_count) {
        int new_max = code_cache->max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            code_cache->entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        code_cache->entries = entries;
        code_cache->max_count = new_max;
    }
    for (i=code_cache->count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    code_cache->count++;
    Py_INCREF(code_object);
}
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object) {
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS
    (void)__pyx__insert_code_object;
    return; // Most implementation should have atomics. But otherwise, don't make it thread-safe, just fail.
#else
    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_nonatomic_int_type expected = 0;
    if (!__pyx_atomic_int_cmp_exchange(&code_cache->accessor_count, &expected, INT_MIN)) {
        return;
    }
#endif
    __pyx__insert_code_object(code_cache, code_line, code_object);
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_sub(&code_cache->accessor_count, INT_MIN);
#endif
#endif
}

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result = PyObject_Call(replace, __pyx_mstate_global->__pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!code_object) {
        code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
        if (unlikely(!code_object)) goto bad;
        py_py_line = PyLong_FromLong(py_line);
        if (unlikely(!py_py_line)) goto bad;
        py_funcname = PyUnicode_FromString(funcname);
        if (unlikely(!py_funcname)) goto bad;
        dict = PyDict_New();
        if (unlikely(!dict)) goto bad;
        {
            PyObject *old_code_object = code_object;
            code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
            Py_DECREF(old_code_object);
        }
        if (unlikely(!code_object)) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, code_object);
    } else {
        dict = PyDict_New();
    }
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    if (c_line) {
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
    }
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_mstate_global->__pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* MemviewSliceIsContig */
  static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
  static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* TypeInfoCompare */
  static int
__pyx_typeinfo_cmp(const __Pyx_TypeInfo *a, const __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                const __Pyx_StructField *field_a = a->fields + i;
                const __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (unlikely(buf->strides[dim] != sizeof(void *))) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (unlikely(buf->strides[dim] != buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (unlikely(stride < buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (unlikely(spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(spec & (__Pyx_MEMVIEW_PTR))) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(buf->suboffsets)) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, int ndim, int spec)
{
    CYTHON_UNUSED_VAR(ndim);
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (unlikely(buf->suboffsets && buf->suboffsets[dim] >= 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (unlikely(!buf->suboffsets || (buf->suboffsets[dim] < 0))) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                const __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (unlikely(buf->ndim != ndim)) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (unlikely(!__Pyx_BufFmt_CheckString(&ctx, buf->format))) goto fail;
    }
    if (unlikely((unsigned) buf->itemsize != dtype->size)) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    if (buf->len > 0) {
        for (i = 0; i < ndim; i++) {
            spec = axes_specs[i];
            if (unlikely(!__pyx_check_strides(buf, i, ndim, spec)))
                goto fail;
            if (unlikely(!__pyx_check_suboffsets(buf, i, ndim, spec)))
                goto fail;
        }
        if (unlikely(buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag)))
            goto fail;
    }
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF((PyObject*)new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_float(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_float, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_double(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_double, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int64_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint8_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint8_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_unsigned_char(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_unsigned_char, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* PyUCS4InUnicode */
  static CYTHON_INLINE int __Pyx_UnicodeContainsUCS4(PyObject* unicode, Py_UCS4 character) {
    Py_ssize_t idx = PyUnicode_FindChar(unicode, character, 0, PY_SSIZE_T_MAX, 1);
    if (unlikely(idx == -2)) return -1;
    return idx >= 0;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_uint64_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* Print */
  static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_mstate_global->__pyx_print)) {
        __pyx_mstate_global->__pyx_print = PyObject_GetAttr(__pyx_mstate_global->__pyx_b, __pyx_mstate_global->__pyx_n_u_print);
        if (!__pyx_mstate_global->__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_mstate_global->__pyx_n_u_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_mstate_global->__pyx_n_u_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_mstate_global->__pyx_print_kwargs)) {
            __pyx_mstate_global->__pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_mstate_global->__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_mstate_global->__pyx_print_kwargs, __pyx_mstate_global->__pyx_n_u_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_mstate_global->__pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_mstate_global->__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_mstate_global->__pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_mstate_global->__pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_5numpy_uint8_t(const char *itemp) {
    return (PyObject *) __Pyx_PyLong_From_npy_uint8(*(__pyx_t_5numpy_uint8_t *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_5numpy_uint8_t(const char *itemp, PyObject *obj) {
    __pyx_t_5numpy_uint8_t value = __Pyx_PyLong_As_npy_uint8(obj);
    if (unlikely((value == ((npy_uint8)-1)) && PyErr_Occurred()))
        return 0;
    *(__pyx_t_5numpy_uint8_t *) itemp = value;
    return 1;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_uint32_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint32_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_uint64_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_uint64_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_5numpy_int64_t(const char *itemp) {
    return (PyObject *) __Pyx_PyLong_From_npy_int64(*(__pyx_t_5numpy_int64_t *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_5numpy_int64_t(const char *itemp, PyObject *obj) {
    __pyx_t_5numpy_int64_t value = __Pyx_PyLong_As_npy_int64(obj);
    if (unlikely((value == ((npy_int64)-1)) && PyErr_Occurred()))
        return 0;
    *(__pyx_t_5numpy_int64_t *) itemp = value;
    return 1;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_5numpy_uint64_t(const char *itemp) {
    return (PyObject *) __Pyx_PyLong_From_npy_uint64(*(__pyx_t_5numpy_uint64_t *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_5numpy_uint64_t(const char *itemp, PyObject *obj) {
    __pyx_t_5numpy_uint64_t value = __Pyx_PyLong_As_npy_uint64(obj);
    if (unlikely((value == ((npy_uint64)-1)) && PyErr_Occurred()))
        return 0;
    *(__pyx_t_5numpy_uint64_t *) itemp = value;
    return 1;
}

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* MemviewSliceCopyTemplate */
  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyLong_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
#if CYTHON_ASSUME_SAFE_MACROS
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
#else
            if (PyTuple_SetItem(shape_tuple, i, temp_int) < 0) {
                goto fail;
            }
#endif
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF((PyObject *) new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF((PyObject *) array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* MemviewSliceInit */
  static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF((PyObject*)memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#if PY_VERSION_HEX >= 0x030A0000 || defined(HAVE_STDARG_PROTOTYPES)
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int_type *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int_type *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    __pyx_nonatomic_int_type old_acquisition_count;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        return;
    }
    old_acquisition_count = __pyx_add_acquisition_count(memview);
    if (unlikely(old_acquisition_count <= 0)) {
        if (likely(old_acquisition_count == 0)) {
            if (have_gil) {
                Py_INCREF((PyObject *) memview);
            } else {
                PyGILState_STATE _gilstate = PyGILState_Ensure();
                Py_INCREF((PyObject *) memview);
                PyGILState_Release(_gilstate);
            }
        } else {
            __pyx_fatalerror("Acquisition count is %d (line %d)",
                             old_acquisition_count+1, lineno);
        }
    }
}
static CYTHON_INLINE void __Pyx_XCLEAR_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    __pyx_nonatomic_int_type old_acquisition_count;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    old_acquisition_count = __pyx_sub_acquisition_count(memview);
    memslice->data = NULL;
    if (likely(old_acquisition_count > 1)) {
        memslice->memview = NULL;
    } else if (likely(old_acquisition_count == 1)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         old_acquisition_count-1, lineno);
    }
}

/* ImportNumPyArray */
  static PyObject* __Pyx__ImportNumPyArray(void) {
    PyObject *numpy_module, *ndarray_object = NULL;
    numpy_module = __Pyx_Import(__pyx_mstate_global->__pyx_n_u_numpy, NULL, 0);
    if (likely(numpy_module)) {
        ndarray_object = PyObject_GetAttrString(numpy_module, "ndarray");
        Py_DECREF(numpy_module);
    }
    if (unlikely(!ndarray_object)) {
        PyErr_Clear();
    }
    if (unlikely(!ndarray_object || !PyObject_TypeCheck(ndarray_object, &PyType_Type))) {
        Py_XDECREF(ndarray_object);
        Py_INCREF(Py_None);
        ndarray_object = Py_None;
    }
    return ndarray_object;
}
static CYTHON_INLINE PyObject* __Pyx__ImportNumPyArrayTypeIfAvailable(void) {
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    static PyMutex ndarray_mutex = {0};
#endif
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS
    PyObject *result = (PyObject*)__pyx_atomic_pointer_load_relaxed(&__pyx_mstate_global->__pyx_numpy_ndarray);
    if (unlikely(!result)) {
        PyMutex_Lock(&ndarray_mutex);
        result = (PyObject*)__pyx_atomic_pointer_load_acquire(&__pyx_mstate_global->__pyx_numpy_ndarray);
        if (!result) {
            result = __Pyx__ImportNumPyArray();
            __pyx_atomic_pointer_exchange(&__pyx_mstate_global->__pyx_numpy_ndarray, result);
        }
        PyMutex_Unlock(&ndarray_mutex);
    }
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING // but not atomics
    PyMutex_Lock(&ndarray_mutex);
#endif
    if (unlikely(!__pyx_mstate_global->__pyx_numpy_ndarray))
    {
        __pyx_mstate_global->__pyx_numpy_ndarray = __Pyx__ImportNumPyArray();
    }
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING // but not atomics
    PyMutex_Unlock(&ndarray_mutex);
#endif
    return __pyx_mstate_global->__pyx_numpy_ndarray;
#endif
}
static CYTHON_INLINE PyObject* __Pyx_ImportNumPyArrayTypeIfAvailable(void) {
    PyObject *result = __Pyx__ImportNumPyArrayTypeIfAvailable();
    Py_INCREF(result);
    return result;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyLong_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE npy_uint8 __Pyx_PyLong_As_npy_uint8(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_uint8 neg_one = (npy_uint8) -1, const_zero = (npy_uint8) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        npy_uint8 val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (npy_uint8) -1;
        val = __Pyx_PyLong_As_npy_uint8(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(npy_uint8, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(npy_uint8) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint8, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint8) >= 2 * PyLong_SHIFT)) {
                            return (npy_uint8) (((((npy_uint8)digits[1]) << PyLong_SHIFT) | (npy_uint8)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(npy_uint8) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint8, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint8) >= 3 * PyLong_SHIFT)) {
                            return (npy_uint8) (((((((npy_uint8)digits[2]) << PyLong_SHIFT) | (npy_uint8)digits[1]) << PyLong_SHIFT) | (npy_uint8)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(npy_uint8) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint8, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint8) >= 4 * PyLong_SHIFT)) {
                            return (npy_uint8) (((((((((npy_uint8)digits[3]) << PyLong_SHIFT) | (npy_uint8)digits[2]) << PyLong_SHIFT) | (npy_uint8)digits[1]) << PyLong_SHIFT) | (npy_uint8)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (npy_uint8) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(npy_uint8) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_uint8, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(npy_uint8) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_uint8, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(npy_uint8, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(npy_uint8) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint8, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint8) - 1 > 2 * PyLong_SHIFT)) {
                            return (npy_uint8) (((npy_uint8)-1)*(((((npy_uint8)digits[1]) << PyLong_SHIFT) | (npy_uint8)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(npy_uint8) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint8, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint8) - 1 > 2 * PyLong_SHIFT)) {
                            return (npy_uint8) ((((((npy_uint8)digits[1]) << PyLong_SHIFT) | (npy_uint8)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(npy_uint8) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint8, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint8) - 1 > 3 * PyLong_SHIFT)) {
                            return (npy_uint8) (((npy_uint8)-1)*(((((((npy_uint8)digits[2]) << PyLong_SHIFT) | (npy_uint8)digits[1]) << PyLong_SHIFT) | (npy_uint8)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(npy_uint8) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint8, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint8) - 1 > 3 * PyLong_SHIFT)) {
                            return (npy_uint8) ((((((((npy_uint8)digits[2]) << PyLong_SHIFT) | (npy_uint8)digits[1]) << PyLong_SHIFT) | (npy_uint8)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(npy_uint8) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint8, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint8) - 1 > 4 * PyLong_SHIFT)) {
                            return (npy_uint8) (((npy_uint8)-1)*(((((((((npy_uint8)digits[3]) << PyLong_SHIFT) | (npy_uint8)digits[2]) << PyLong_SHIFT) | (npy_uint8)digits[1]) << PyLong_SHIFT) | (npy_uint8)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(npy_uint8) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint8, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint8) - 1 > 4 * PyLong_SHIFT)) {
                            return (npy_uint8) ((((((((((npy_uint8)digits[3]) << PyLong_SHIFT) | (npy_uint8)digits[2]) << PyLong_SHIFT) | (npy_uint8)digits[1]) << PyLong_SHIFT) | (npy_uint8)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(npy_uint8) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_uint8, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(npy_uint8) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_uint8, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        npy_uint8 val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (npy_uint8) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (npy_uint8) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (npy_uint8) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (npy_uint8) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(npy_uint8) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((npy_uint8) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(npy_uint8) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((npy_uint8) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((npy_uint8) 1) << (sizeof(npy_uint8) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (npy_uint8) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_uint8");
    return (npy_uint8) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_uint8");
    return (npy_uint8) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
  static CYTHON_INLINE npy_uint64 __Pyx_PyLong_As_npy_uint64(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_uint64 neg_one = (npy_uint64) -1, const_zero = (npy_uint64) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        npy_uint64 val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (npy_uint64) -1;
        val = __Pyx_PyLong_As_npy_uint64(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(npy_uint64, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(npy_uint64) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint64) >= 2 * PyLong_SHIFT)) {
                            return (npy_uint64) (((((npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(npy_uint64) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint64) >= 3 * PyLong_SHIFT)) {
                            return (npy_uint64) (((((((npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(npy_uint64) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint64) >= 4 * PyLong_SHIFT)) {
                            return (npy_uint64) (((((((((npy_uint64)digits[3]) << PyLong_SHIFT) | (npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (npy_uint64) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(npy_uint64) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_uint64, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(npy_uint64) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_uint64, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(npy_uint64, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(npy_uint64) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint64) - 1 > 2 * PyLong_SHIFT)) {
                            return (npy_uint64) (((npy_uint64)-1)*(((((npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(npy_uint64) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint64) - 1 > 2 * PyLong_SHIFT)) {
                            return (npy_uint64) ((((((npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(npy_uint64) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint64) - 1 > 3 * PyLong_SHIFT)) {
                            return (npy_uint64) (((npy_uint64)-1)*(((((((npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(npy_uint64) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint64) - 1 > 3 * PyLong_SHIFT)) {
                            return (npy_uint64) ((((((((npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(npy_uint64) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint64) - 1 > 4 * PyLong_SHIFT)) {
                            return (npy_uint64) (((npy_uint64)-1)*(((((((((npy_uint64)digits[3]) << PyLong_SHIFT) | (npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(npy_uint64) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint64) - 1 > 4 * PyLong_SHIFT)) {
                            return (npy_uint64) ((((((((((npy_uint64)digits[3]) << PyLong_SHIFT) | (npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(npy_uint64) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_uint64, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(npy_uint64) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_uint64, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        npy_uint64 val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (npy_uint64) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (npy_uint64) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (npy_uint64) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (npy_uint64) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(npy_uint64) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((npy_uint64) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(npy_uint64) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((npy_uint64) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((npy_uint64) 1) << (sizeof(npy_uint64) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (npy_uint64) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_uint64");
    return (npy_uint64) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_uint64");
    return (npy_uint64) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE npy_int64 __Pyx_PyLong_As_npy_int64(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_int64 neg_one = (npy_int64) -1, const_zero = (npy_int64) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        npy_int64 val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (npy_int64) -1;
        val = __Pyx_PyLong_As_npy_int64(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(npy_int64, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(npy_int64) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int64) >= 2 * PyLong_SHIFT)) {
                            return (npy_int64) (((((npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(npy_int64) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int64) >= 3 * PyLong_SHIFT)) {
                            return (npy_int64) (((((((npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(npy_int64) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int64) >= 4 * PyLong_SHIFT)) {
                            return (npy_int64) (((((((((npy_int64)digits[3]) << PyLong_SHIFT) | (npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (npy_int64) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(npy_int64) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_int64, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(npy_int64) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_int64, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(npy_int64, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(npy_int64) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int64) - 1 > 2 * PyLong_SHIFT)) {
                            return (npy_int64) (((npy_int64)-1)*(((((npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(npy_int64) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int64) - 1 > 2 * PyLong_SHIFT)) {
                            return (npy_int64) ((((((npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(npy_int64) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int64) - 1 > 3 * PyLong_SHIFT)) {
                            return (npy_int64) (((npy_int64)-1)*(((((((npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(npy_int64) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int64) - 1 > 3 * PyLong_SHIFT)) {
                            return (npy_int64) ((((((((npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(npy_int64) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int64) - 1 > 4 * PyLong_SHIFT)) {
                            return (npy_int64) (((npy_int64)-1)*(((((((((npy_int64)digits[3]) << PyLong_SHIFT) | (npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(npy_int64) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int64) - 1 > 4 * PyLong_SHIFT)) {
                            return (npy_int64) ((((((((((npy_int64)digits[3]) << PyLong_SHIFT) | (npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(npy_int64) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_int64, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(npy_int64) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_int64, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        npy_int64 val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (npy_int64) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (npy_int64) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (npy_int64) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (npy_int64) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(npy_int64) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((npy_int64) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(npy_int64) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((npy_int64) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((npy_int64) 1) << (sizeof(npy_int64) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (npy_int64) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_int64");
    return (npy_int64) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_int64");
    return (npy_int64) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE npy_uint32 __Pyx_PyLong_As_npy_uint32(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_uint32 neg_one = (npy_uint32) -1, const_zero = (npy_uint32) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        npy_uint32 val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (npy_uint32) -1;
        val = __Pyx_PyLong_As_npy_uint32(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(npy_uint32, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(npy_uint32) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint32) >= 2 * PyLong_SHIFT)) {
                            return (npy_uint32) (((((npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(npy_uint32) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint32) >= 3 * PyLong_SHIFT)) {
                            return (npy_uint32) (((((((npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(npy_uint32) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint32) >= 4 * PyLong_SHIFT)) {
                            return (npy_uint32) (((((((((npy_uint32)digits[3]) << PyLong_SHIFT) | (npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (npy_uint32) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(npy_uint32) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(npy_uint32) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(npy_uint32, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(npy_uint32) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint32) - 1 > 2 * PyLong_SHIFT)) {
                            return (npy_uint32) (((npy_uint32)-1)*(((((npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(npy_uint32) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint32) - 1 > 2 * PyLong_SHIFT)) {
                            return (npy_uint32) ((((((npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(npy_uint32) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint32) - 1 > 3 * PyLong_SHIFT)) {
                            return (npy_uint32) (((npy_uint32)-1)*(((((((npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(npy_uint32) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint32) - 1 > 3 * PyLong_SHIFT)) {
                            return (npy_uint32) ((((((((npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(npy_uint32) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint32) - 1 > 4 * PyLong_SHIFT)) {
                            return (npy_uint32) (((npy_uint32)-1)*(((((((((npy_uint32)digits[3]) << PyLong_SHIFT) | (npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(npy_uint32) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_uint32) - 1 > 4 * PyLong_SHIFT)) {
                            return (npy_uint32) ((((((((((npy_uint32)digits[3]) << PyLong_SHIFT) | (npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(npy_uint32) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(npy_uint32) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        npy_uint32 val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (npy_uint32) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (npy_uint32) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (npy_uint32) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (npy_uint32) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(npy_uint32) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((npy_uint32) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(npy_uint32) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((npy_uint32) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((npy_uint32) 1) << (sizeof(npy_uint32) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (npy_uint32) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_uint32");
    return (npy_uint32) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_uint32");
    return (npy_uint32) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyLong_From_npy_int64(npy_int64 value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_int64 neg_one = (npy_int64) -1, const_zero = (npy_int64) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_int64) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(npy_int64) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(npy_int64) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_int64) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_int64) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(npy_int64),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(npy_int64));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
  static CYTHON_INLINE npy_int32 __Pyx_PyLong_As_npy_int32(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_int32 neg_one = (npy_int32) -1, const_zero = (npy_int32) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        npy_int32 val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (npy_int32) -1;
        val = __Pyx_PyLong_As_npy_int32(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(npy_int32, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(npy_int32) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int32) >= 2 * PyLong_SHIFT)) {
                            return (npy_int32) (((((npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(npy_int32) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int32) >= 3 * PyLong_SHIFT)) {
                            return (npy_int32) (((((((npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(npy_int32) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int32) >= 4 * PyLong_SHIFT)) {
                            return (npy_int32) (((((((((npy_int32)digits[3]) << PyLong_SHIFT) | (npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (npy_int32) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(npy_int32) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_int32, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(npy_int32) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_int32, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(npy_int32, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(npy_int32) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int32) - 1 > 2 * PyLong_SHIFT)) {
                            return (npy_int32) (((npy_int32)-1)*(((((npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(npy_int32) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int32) - 1 > 2 * PyLong_SHIFT)) {
                            return (npy_int32) ((((((npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(npy_int32) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int32) - 1 > 3 * PyLong_SHIFT)) {
                            return (npy_int32) (((npy_int32)-1)*(((((((npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(npy_int32) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int32) - 1 > 3 * PyLong_SHIFT)) {
                            return (npy_int32) ((((((((npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(npy_int32) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int32) - 1 > 4 * PyLong_SHIFT)) {
                            return (npy_int32) (((npy_int32)-1)*(((((((((npy_int32)digits[3]) << PyLong_SHIFT) | (npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(npy_int32) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(npy_int32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(npy_int32) - 1 > 4 * PyLong_SHIFT)) {
                            return (npy_int32) ((((((((((npy_int32)digits[3]) << PyLong_SHIFT) | (npy_int32)digits[2]) << PyLong_SHIFT) | (npy_int32)digits[1]) << PyLong_SHIFT) | (npy_int32)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(npy_int32) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_int32, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(npy_int32) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(npy_int32, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        npy_int32 val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (npy_int32) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (npy_int32) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (npy_int32) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (npy_int32) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(npy_int32) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((npy_int32) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(npy_int32) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((npy_int32) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((npy_int32) 1) << (sizeof(npy_int32) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (npy_int32) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_int32");
    return (npy_int32) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_int32");
    return (npy_int32) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyLong_From_npy_int32(npy_int32 value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_int32 neg_one = (npy_int32) -1, const_zero = (npy_int32) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_int32) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(npy_int32) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(npy_int32) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_int32) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_int32) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(npy_int32),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(npy_int32));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyLong_From_npy_uint64(npy_uint64 value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_uint64 neg_one = (npy_uint64) -1, const_zero = (npy_uint64) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_uint64) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(npy_uint64) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(npy_uint64) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_uint64) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_uint64) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(npy_uint64),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(npy_uint64));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyLong_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyLong_From_Py_intptr_t(Py_intptr_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(Py_intptr_t) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(Py_intptr_t));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyLong_From_npy_uint8(npy_uint8 value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_uint8 neg_one = (npy_uint8) -1, const_zero = (npy_uint8) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_uint8) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(npy_uint8) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(npy_uint8) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_uint8) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_uint8) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(npy_uint8),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(npy_uint8));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* TypeInfoToFormat */
  static struct __pyx_typeinfo_string __Pyx_TypeInfoToFormat(const __Pyx_TypeInfo *type) {
    struct __pyx_typeinfo_string result = { {0} };
    char *buf = (char *) result.string;
    size_t size = type->size;
    switch (type->typegroup) {
        case 'H':
            *buf = 'c';
            break;
        case 'I':
        case 'U':
            if (size == 1)
                *buf = (type->is_unsigned) ? 'B' : 'b';
            else if (size == 2)
                *buf = (type->is_unsigned) ? 'H' : 'h';
            else if (size == 4)
                *buf = (type->is_unsigned) ? 'I' : 'i';
            else if (size == 8)
                *buf = (type->is_unsigned) ? 'Q' : 'q';
            break;
        case 'P':
            *buf = 'P';
            break;
        case 'C':
         {
            __Pyx_TypeInfo complex_type = *type;
            complex_type.typegroup = 'R';
            complex_type.size /= 2;
            *buf++ = 'Z';
            *buf = __Pyx_TypeInfoToFormat(&complex_type).string[0];
            break;
         }
        case 'R':
            if (size == 4)
                *buf = 'f';
            else if (size == 8)
                *buf = 'd';
            else
                *buf = 'g';
            break;
    }
    return result;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyLong_From_npy_uint32(npy_uint32 value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_uint32 neg_one = (npy_uint32) -1, const_zero = (npy_uint32) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_uint32) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(npy_uint32) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(npy_uint32) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_uint32) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_uint32) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(npy_uint32),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(npy_uint32));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* PrintOne */
  static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}

/* CIntFromPy */
  static CYTHON_INLINE size_t __Pyx_PyLong_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyLong_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (size_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(size_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(size_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        size_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (size_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (size_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (size_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (size_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((size_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((size_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (size_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyLong_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        char val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyLong_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(char, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) >= 2 * PyLong_SHIFT)) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) >= 3 * PyLong_SHIFT)) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) >= 4 * PyLong_SHIFT)) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (char) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(char) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(char) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(char, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(char) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(char) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(char) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        char val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (char) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (char) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (char) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (char) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(char) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((char) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(char) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((char) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((char) 1) << (sizeof(char) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (char) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* FormatTypeName */
  #if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030d0000
static __Pyx_TypeName
__Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp)
{
    PyObject *module = NULL, *name = NULL, *result = NULL;
    #if __PYX_LIMITED_VERSION_HEX < 0x030b0000
    name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_mstate_global->__pyx_n_u_qualname);
    #else
    name = PyType_GetQualName(tp);
    #endif
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) goto bad;
    module = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_mstate_global->__pyx_n_u_module);
    if (unlikely(module == NULL) || unlikely(!PyUnicode_Check(module))) goto bad;
    if (PyUnicode_CompareWithASCIIString(module, "builtins") == 0) {
        result = name;
        name = NULL;
        goto done;
    }
    result = PyUnicode_FromFormat("%U.%U", module, name);
    if (unlikely(result == NULL)) goto bad;
  done:
    Py_XDECREF(name);
    Py_XDECREF(module);
    return result;
  bad:
    PyErr_Clear();
    if (name) {
        result = name;
        name = NULL;
    } else {
        result = __Pyx_NewRef(__pyx_mstate_global->__pyx_kp_u__18);
    }
    goto done;
}
#endif

/* IterNextPlain */
  #if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
static PyObject *__Pyx_GetBuiltinNext_LimitedAPI(void) {
    if (unlikely(!__pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache))
        __pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache = __Pyx_GetBuiltinName(__pyx_mstate_global->__pyx_n_u_next);
    return __pyx_mstate_global->__Pyx_GetBuiltinNext_LimitedAPI_cache;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next_Plain(PyObject *iterator) {
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030A0000
    PyObject *result;
    PyObject *next = __Pyx_GetBuiltinNext_LimitedAPI();
    if (unlikely(!next)) return NULL;
    result = PyObject_CallFunctionObjArgs(next, iterator, NULL);
    return result;
#else
    (void)__Pyx_GetBuiltinName; // only for early limited API
    iternextfunc iternext = __Pyx_PyObject_GetIterNextFunc(iterator);
    assert(iternext);
    return iternext(iterator);
#endif
}

/* ReturnWithStopIteration */
  static void __Pyx__ReturnWithStopIteration(PyObject* value, int async);
static CYTHON_INLINE void __Pyx_ReturnWithStopIteration(PyObject* value, int async, int iternext) {
    if (value == Py_None) {
        if (async || !iternext)
            PyErr_SetNone(async ? PyExc_StopAsyncIteration : PyExc_StopIteration);
        return;
    }
    __Pyx__ReturnWithStopIteration(value, async);
}
static void __Pyx__ReturnWithStopIteration(PyObject* value, int async) {
#if CYTHON_COMPILING_IN_CPYTHON
    __Pyx_PyThreadState_declare
#endif
    PyObject *exc;
    PyObject *exc_type = async ? PyExc_StopAsyncIteration : PyExc_StopIteration;
#if CYTHON_COMPILING_IN_CPYTHON
    if ((PY_VERSION_HEX >= (0x030C00A6)) || unlikely(PyTuple_Check(value) || PyExceptionInstance_Check(value))) {
        if (PY_VERSION_HEX >= (0x030e00A1)) {
            exc = __Pyx_PyObject_CallOneArg(exc_type, value);
        } else {
            PyObject *args_tuple = PyTuple_New(1);
            if (unlikely(!args_tuple)) return;
            Py_INCREF(value);
            PyTuple_SET_ITEM(args_tuple, 0, value);
            exc = PyObject_Call(exc_type, args_tuple, NULL);
            Py_DECREF(args_tuple);
        }
        if (unlikely(!exc)) return;
    } else {
        Py_INCREF(value);
        exc = value;
    }
    #if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    #if CYTHON_USE_EXC_INFO_STACK
    if (!__pyx_tstate->exc_info->exc_value)
    #else
    if (!__pyx_tstate->exc_type)
    #endif
    {
        Py_INCREF(exc_type);
        __Pyx_ErrRestore(exc_type, exc, NULL);
        return;
    }
    #endif
#else
    exc = __Pyx_PyObject_CallOneArg(exc_type, value);
    if (unlikely(!exc)) return;
#endif
    PyErr_SetObject(exc_type, exc);
    Py_DECREF(exc);
}

/* CoroutineBase */
  #if !CYTHON_COMPILING_IN_LIMITED_API
#include <frameobject.h>
#if PY_VERSION_HEX >= 0x030b00a6 && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#endif // CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void
__Pyx_Coroutine_Undelegate(__pyx_CoroutineObject *gen) {
#if CYTHON_USE_AM_SEND
    gen->yieldfrom_am_send = NULL;
#endif
    Py_CLEAR(gen->yieldfrom);
}
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {
            #if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL
            value = PyObject_GetAttr(ev, __pyx_mstate_global->__pyx_n_u_value);
            if (unlikely(!value)) goto limited_api_failure;
            #else
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            #endif
            Py_DECREF(ev);
        }
        else if (unlikely(PyTuple_Check(ev))) {
            Py_ssize_t tuple_size = __Pyx_PyTuple_GET_SIZE(ev);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely(tuple_size < 0)) {
                Py_XDECREF(tb);
                Py_DECREF(ev);
                Py_DECREF(et);
                return -1;
            }
            #endif
            if (tuple_size >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#elif CYTHON_ASSUME_SAFE_MACROS
                value = PySequence_ITEM(ev, 0);
#else
                value = PySequence_GetItem(ev, 0);
                if (!value) goto limited_api_failure;
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if CYTHON_COMPILING_IN_LIMITED_API
    value = PyObject_GetAttr(ev, __pyx_mstate_global->__pyx_n_u_value);
#else
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
#endif
    Py_DECREF(ev);
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!value)) return -1;
#endif
    *pvalue = value;
    return 0;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL || !CYTHON_ASSUME_SAFE_MACROS
  limited_api_failure:
    Py_XDECREF(et);
    Py_XDECREF(tb);
    Py_XDECREF(ev);
    return -1;
#endif
}
static CYTHON_INLINE
__Pyx_PySendResult __Pyx_Coroutine_status_from_result(PyObject **retval) {
    if (*retval) {
        return PYGEN_NEXT;
    } else if (likely(__Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, retval) == 0)) {
        return PYGEN_RETURN;
    } else {
        return PYGEN_ERROR;
    }
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_CLEAR(exc_state->exc_value);
#else
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
#endif
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
static void __Pyx_Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    CYTHON_MAYBE_UNUSED_VAR(closing);
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
__Pyx_PySendResult __Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, PyObject **result, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(__Pyx_Coroutine_get_is_running(self));  // Callers should ensure is_running
    if (unlikely(self->resume_label == -1)) {
        __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
        return PYGEN_ERROR;
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_value) {
        #if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        #else
        PyObject *exc_tb;
        #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
        exc_tb = PyException_GetTraceback(exc_state->exc_value);
        #elif PY_VERSION_HEX >= 0x030B00a4
        exc_tb = ((PyBaseExceptionObject*) exc_state->exc_value)->traceback;
        #else
        exc_tb = exc_state->exc_traceback;
        #endif
        if (exc_tb) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
            #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_CPYTHON
            Py_DECREF(exc_tb);
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    retval = self->body(self, tstate, value);
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    *result = retval;
    if (self->resume_label == -1) {
        return likely(retval) ? PYGEN_RETURN : PYGEN_ERROR;
    }
    return PYGEN_NEXT;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(exc_state);
#else
    PyObject *exc_tb;
    #if PY_VERSION_HEX >= 0x030B00a4
    if (!exc_state->exc_value) return;
    exc_tb = PyException_GetTraceback(exc_state->exc_value);
    #else
    exc_tb = exc_state->exc_traceback;
    #endif
    if (likely(exc_tb)) {
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
        #if PY_VERSION_HEX >= 0x030B00a4
        Py_DECREF(exc_tb);
        #endif
    }
#endif
}
#define __Pyx_Coroutine_MethodReturnFromResult(gen, result, retval, iternext)\
    ((result) == PYGEN_NEXT ? (retval) : __Pyx__Coroutine_MethodReturnFromResult(gen, result, retval, iternext))
static PyObject *
__Pyx__Coroutine_MethodReturnFromResult(PyObject* gen, __Pyx_PySendResult result, PyObject *retval, int iternext) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if (likely(result == PYGEN_RETURN)) {
        int is_async = 0;
        #ifdef __Pyx_AsyncGen_USED
        is_async = __Pyx_AsyncGen_CheckExact(gen);
        #endif
        __Pyx_ReturnWithStopIteration(retval, is_async, iternext);
        Py_XDECREF(retval);
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
#if PY_VERSION_HEX < 0x030d00A1
            _PyGen_SetStopIterationValue(result);
#else
            if (!PyTuple_Check(result) && !PyExceptionInstance_Check(result)) {
                PyErr_SetObject(PyExc_StopIteration, result);
            } else {
                PyObject *exc = __Pyx_PyObject_CallOneArg(PyExc_StopIteration, result);
                if (likely(exc != NULL)) {
                    PyErr_SetObject(PyExc_StopIteration, exc);
                    Py_DECREF(exc);
                }
            }
#endif
        }
        Py_DECREF(result);
        result = NULL;
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE __Pyx_PySendResult
__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen, PyObject** retval) {
    __Pyx_PySendResult result;
    PyObject *val = NULL;
    assert(__Pyx_Coroutine_get_is_running(gen));
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    result = __Pyx_Coroutine_SendEx(gen, val, retval, 0);
    Py_XDECREF(val);
    return result;
}
#if CYTHON_USE_AM_SEND
static __Pyx_PySendResult
__Pyx_Coroutine_SendToDelegate(__pyx_CoroutineObject *gen, __Pyx_pyiter_sendfunc gen_am_send, PyObject *value, PyObject **retval) {
    PyObject *ret = NULL;
    __Pyx_PySendResult delegate_result, result;
    assert(__Pyx_Coroutine_get_is_running(gen));
    delegate_result = gen_am_send(gen->yieldfrom, value, &ret);
    if (delegate_result == PYGEN_NEXT) {
        assert (ret != NULL);
        *retval = ret;
        return PYGEN_NEXT;
    }
    assert (delegate_result != PYGEN_ERROR || ret == NULL);
    __Pyx_Coroutine_Undelegate(gen);
    result = __Pyx_Coroutine_SendEx(gen, ret, retval, 0);
    Py_XDECREF(ret);
    return result;
}
#endif
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval = NULL;
    __Pyx_PySendResult result = __Pyx_Coroutine_AmSend(self, value, &retval);
    return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 0);
}
static __Pyx_PySendResult
__Pyx_Coroutine_AmSend(PyObject *self, PyObject *value, PyObject **retval) {
    __Pyx_PySendResult result;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        *retval = __Pyx_Coroutine_AlreadyRunningError(gen);
        return PYGEN_ERROR;
    }
    #if CYTHON_USE_AM_SEND
    if (gen->yieldfrom_am_send) {
        result = __Pyx_Coroutine_SendToDelegate(gen, gen->yieldfrom_am_send, value, retval);
    } else
    #endif
    if (gen->yieldfrom) {
        PyObject *yf = gen->yieldfrom;
        PyObject *ret;
      #if !CYTHON_USE_AM_SEND
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
      #endif
        {
            #if !CYTHON_COMPILING_IN_LIMITED_API || __PYX_LIMITED_VERSION_HEX >= 0x03080000
            if (value == Py_None && PyIter_Check(yf))
                ret = __Pyx_PyIter_Next_Plain(yf);
            else
            #endif
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_mstate_global->__pyx_n_u_send, value);
        }
        if (likely(ret)) {
            __Pyx_Coroutine_unset_is_running(gen);
            *retval = ret;
            return PYGEN_NEXT;
        }
        result = __Pyx_Coroutine_FinishDelegation(gen, retval);
    } else {
        result = __Pyx_Coroutine_SendEx(gen, value, retval, 0);
    }
    __Pyx_Coroutine_unset_is_running(gen);
    return result;
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    __Pyx_PySendResult result;
    PyObject *retval = NULL;
    CYTHON_UNUSED_VAR(gen);
    assert(__Pyx_Coroutine_get_is_running(gen));
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        result = __Pyx_Coroutine_Close(yf, &retval);
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        result = __Pyx_Coroutine_Close(yf, &retval);
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        result = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf);
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
        result = PYGEN_RETURN;
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
        result = PYGEN_RETURN;
    } else
    #endif
    {
        PyObject *meth;
        result = PYGEN_RETURN;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_mstate_global->__pyx_n_u_close);
        if (unlikely(!meth)) {
            if (unlikely(PyErr_Occurred())) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(meth);
            if (unlikely(!retval)) {
                result = PYGEN_ERROR;
            }
        }
    }
    Py_XDECREF(retval);
    return result == PYGEN_ERROR ? -1 : 0;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __Pyx_PySendResult result;
    PyObject *retval = NULL;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    }
    #if CYTHON_USE_AM_SEND
    if (gen->yieldfrom_am_send) {
        result = __Pyx_Coroutine_SendToDelegate(gen, gen->yieldfrom_am_send, Py_None, &retval);
    } else
    #endif
    if (gen->yieldfrom) {
        PyObject *yf = gen->yieldfrom;
        PyObject *ret;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && (PY_VERSION_HEX < 0x030A00A3 || !CYTHON_USE_AM_SEND)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
            ret = __Pyx_PyIter_Next_Plain(yf);
        if (likely(ret)) {
            __Pyx_Coroutine_unset_is_running(gen);
            return ret;
        }
        result = __Pyx_Coroutine_FinishDelegation(gen, &retval);
    } else {
        result = __Pyx_Coroutine_SendEx(gen, Py_None, &retval, 0);
    }
    __Pyx_Coroutine_unset_is_running(gen);
    return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 1);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    PyObject *retval = NULL;
    __Pyx_PySendResult result;
    CYTHON_UNUSED_VAR(arg);
    result = __Pyx_Coroutine_Close(self, &retval);
    if (unlikely(result == PYGEN_ERROR))
        return NULL;
    Py_XDECREF(retval);
    Py_RETURN_NONE;
}
static __Pyx_PySendResult
__Pyx_Coroutine_Close(PyObject *self, PyObject **retval) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PySendResult result;
    PyObject *yf;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        *retval = __Pyx_Coroutine_AlreadyRunningError(gen);
        return PYGEN_ERROR;
    }
    yf = gen->yieldfrom;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    result = __Pyx_Coroutine_SendEx(gen, NULL, retval, 1);
    if (result == PYGEN_ERROR) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_Coroutine_unset_is_running(gen);
        if (!__Pyx_PyErr_Occurred()) {
            return PYGEN_RETURN;
        } else if (likely(__Pyx_PyErr_ExceptionMatches2(PyExc_GeneratorExit, PyExc_StopIteration))) {
            __Pyx_PyErr_Clear();
            return PYGEN_RETURN;
        }
        return PYGEN_ERROR;
    } else if (likely(result == PYGEN_RETURN && *retval == Py_None)) {
        __Pyx_Coroutine_unset_is_running(gen);
        return PYGEN_RETURN;
    } else {
        const char *msg;
        Py_DECREF(*retval);
        *retval = NULL;
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
            msg = "async generator ignored GeneratorExit";
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        __Pyx_Coroutine_unset_is_running(gen);
        return PYGEN_ERROR;
    }
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen)))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    yf = gen->yieldfrom;
    if (yf) {
        __Pyx_PySendResult result;
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                goto propagate_exception;
            goto throw_here;
        }
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_mstate_global->__pyx_n_u_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (unlikely(PyErr_Occurred())) {
                    __Pyx_Coroutine_unset_is_running(gen);
                    return NULL;
                }
                __Pyx_Coroutine_Undelegate(gen);
                goto throw_here;
            }
            if (likely(args)) {
                ret = __Pyx_PyObject_Call(meth, args, NULL);
            } else {
                PyObject *cargs[4] = {NULL, typ, val, tb};
                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
            }
            Py_DECREF(meth);
        }
        Py_DECREF(yf);
        if (ret) {
            __Pyx_Coroutine_unset_is_running(gen);
            return ret;
        }
        result = __Pyx_Coroutine_FinishDelegation(gen, &ret);
        __Pyx_Coroutine_unset_is_running(gen);
        return __Pyx_Coroutine_MethodReturnFromResult(self, result, ret, 0);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
propagate_exception:
    {
        PyObject *retval = NULL;
        __Pyx_PySendResult result = __Pyx_Coroutine_SendEx(gen, NULL, &retval, 0);
        __Pyx_Coroutine_unset_is_running(gen);
        return __Pyx_Coroutine_MethodReturnFromResult(self, result, retval, 0);
    }
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (unlikely(!PyArg_UnpackTuple(args, "throw", 1, 3, &typ, &val, &tb)))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
#if PY_VERSION_HEX >= 0x030B00a4
    Py_VISIT(exc_state->exc_value);
#else
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
#endif
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    {
        int e = __Pyx_call_type_traverse((PyObject*)gen, 1, visit, arg);
        if (e) return e;
    }
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if CYTHON_USE_TP_FINALIZE
        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))
#else
        {
            destructor del = __Pyx_PyObject_GetSlot(gen, tp_del, destructor);
            if (del) del(self);
        }
        if (unlikely(Py_REFCNT(self) > 0))
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    __Pyx_PyHeapTypeObject_GC_Del(gen);
}
#if CYTHON_USE_TP_FINALIZE
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *retval = NULL;
        __Pyx_PySendResult result = __Pyx_Coroutine_Close(self, &retval);
        if (result == PYGEN_ERROR) {
            PyErr_WriteUnraisable(self);
        } else {
            Py_XDECREF(retval);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
}
#endif
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_name, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);
    return 0;
}
static PyObject *
__Pyx__Coroutine_get_frame(__pyx_CoroutineObject *self)
{
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyObject *frame;
    #if PY_VERSION_HEX >= 0x030d0000
    Py_BEGIN_CRITICAL_SECTION(self);
    #endif
    frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        PyObject *globals = PyDict_New();
        if (unlikely(!globals)) return NULL;
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            globals,                        /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        Py_DECREF(globals);
        if (unlikely(!frame))
            return NULL;
        if (unlikely(self->gi_frame)) {
            Py_DECREF(frame);
            frame = self->gi_frame;
        } else {
            self->gi_frame = frame;
        }
    }
    Py_INCREF(frame);
    #if PY_VERSION_HEX >= 0x030d0000
    Py_END_CRITICAL_SECTION();
    #endif
    return frame;
#else
    CYTHON_UNUSED_VAR(self);
    Py_RETURN_NONE;
#endif
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context) {
    CYTHON_UNUSED_VAR(context);
    PyObject *frame = self->gi_frame;
    if (frame)
        return __Pyx_NewRef(frame);
    return __Pyx__Coroutine_get_frame(self);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->yieldfrom_am_send = NULL;
    #if PY_VERSION_HEX >= 0x030B00a4 && !CYTHON_COMPILING_IN_LIMITED_API
    gen->gi_exc_state.exc_value = NULL;
    #else
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
    #endif
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}
static char __Pyx_Coroutine_test_and_set_is_running(__pyx_CoroutineObject *gen) {
    char result;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_BEGIN_CRITICAL_SECTION(gen);
    #endif
    result = gen->is_running;
    gen->is_running = 1;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_END_CRITICAL_SECTION();
    #endif
    return result;
}
static void __Pyx_Coroutine_unset_is_running(__pyx_CoroutineObject *gen) {
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_BEGIN_CRITICAL_SECTION(gen);
    #endif
    assert(gen->is_running);
    gen->is_running = 0;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_END_CRITICAL_SECTION();
    #endif
}
static char __Pyx_Coroutine_get_is_running(__pyx_CoroutineObject *gen) {
    char result;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_BEGIN_CRITICAL_SECTION(gen);
    #endif
    result = gen->is_running;
    #if PY_VERSION_HEX >= 0x030d0000 && !CYTHON_COMPILING_IN_LIMITED_API
    Py_END_CRITICAL_SECTION();
    #endif
    return result;
}
static PyObject *__Pyx_Coroutine_get_is_running_getter(PyObject *gen, void *closure) {
    CYTHON_UNUSED_VAR(closure);
    char result = __Pyx_Coroutine_get_is_running((__pyx_CoroutineObject*)gen);
    if (result) Py_RETURN_TRUE;
    else Py_RETURN_FALSE;
}
#if __PYX_HAS_PY_AM_SEND == 2
static void __Pyx_SetBackportTypeAmSend(PyTypeObject *type, __Pyx_PyAsyncMethodsStruct *static_amsend_methods, __Pyx_pyiter_sendfunc am_send) {
    Py_ssize_t ptr_offset = (char*)(type->tp_as_async) - (char*)type;
    if (ptr_offset < 0 || ptr_offset > type->tp_basicsize) {
        return;
    }
    memcpy((void*)static_amsend_methods, (void*)(type->tp_as_async), sizeof(*type->tp_as_async));
    static_amsend_methods->am_send = am_send;
    type->tp_as_async = __Pyx_SlotTpAsAsync(static_amsend_methods);
}
#endif
static PyObject *__Pyx_Coroutine_fail_reduce_ex(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    __Pyx_TypeName self_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE((PyObject*)self));
    PyErr_Format(PyExc_TypeError, "cannot pickle '" __Pyx_FMT_TYPENAME "' object",
                         self_type_name);
    __Pyx_DECREF_TypeName(self_type_name);
    return NULL;
}

/* Generator */
  static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {"__reduce_ex__", (PyCFunction) __Pyx_Coroutine_fail_reduce_ex, METH_O, 0},
    {"__reduce__", (PyCFunction) __Pyx_Coroutine_fail_reduce_ex, METH_NOARGS, 0},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {"gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     PyDoc_STR("object being iterated by 'yield from', or None")},
    {"gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {"__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), 0, 0},
    {"__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CoroutineObject, gi_weakreflist), READONLY, 0},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {"__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     PyDoc_STR("name of the generator"), 0},
    {"__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     PyDoc_STR("qualified name of the generator"), 0},
    {"gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     PyDoc_STR("Frame of the generator"), 0},
    {"gi_running", __Pyx_Coroutine_get_is_running_getter, NULL, NULL, NULL},
    {0, 0, 0, 0, 0}
};
static PyType_Slot __pyx_GeneratorType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_Coroutine_dealloc},
    {Py_tp_traverse, (void *)__Pyx_Coroutine_traverse},
    {Py_tp_iter, (void *)PyObject_SelfIter},
    {Py_tp_iternext, (void *)__Pyx_Generator_Next},
    {Py_tp_methods, (void *)__pyx_Generator_methods},
    {Py_tp_members, (void *)__pyx_Generator_memberlist},
    {Py_tp_getset, (void *)__pyx_Generator_getsets},
    {Py_tp_getattro, (void *) PyObject_GenericGetAttr},
#if CYTHON_USE_TP_FINALIZE
    {Py_tp_finalize, (void *)__Pyx_Coroutine_del},
#endif
#if __PYX_HAS_PY_AM_SEND == 1
    {Py_am_send, (void *)__Pyx_Coroutine_AmSend},
#endif
    {0, 0},
};
static PyType_Spec __pyx_GeneratorType_spec = {
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE | __Pyx_TPFLAGS_HAVE_AM_SEND,
    __pyx_GeneratorType_slots
};
#if __PYX_HAS_PY_AM_SEND == 2
static __Pyx_PyAsyncMethodsStruct __pyx_Generator_as_async;
#endif
static int __pyx_Generator_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    mstate->__pyx_GeneratorType = __Pyx_FetchCommonTypeFromSpec(
        mstate->__pyx_CommonTypesMetaclassType, module, &__pyx_GeneratorType_spec, NULL);
    if (unlikely(!mstate->__pyx_GeneratorType)) {
        return -1;
    }
#if __PYX_HAS_PY_AM_SEND == 2
    __Pyx_SetBackportTypeAmSend(mstate->__pyx_GeneratorType, &__pyx_Generator_as_async, &__Pyx_Coroutine_AmSend);
#endif
    return 0;
}
static PyObject *__Pyx_Generator_GetInlinedResult(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *retval = NULL;
    if (unlikely(__Pyx_Coroutine_test_and_set_is_running(gen))) {
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    }
    __Pyx_PySendResult result = __Pyx_Coroutine_SendEx(gen, Py_None, &retval, 0);
    __Pyx_Coroutine_unset_is_running(gen);
    (void) result;
    assert (result == PYGEN_RETURN || result == PYGEN_ERROR);
    assert ((result == PYGEN_RETURN && retval != NULL) || (result == PYGEN_ERROR && retval == NULL));
    return retval;
}

/* GetRuntimeVersion */
  static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030b0000
    return Py_Version & ~0xFFUL;
#else
    static unsigned long __Pyx_cached_runtime_version = 0;
    if (__Pyx_cached_runtime_version == 0) {
        const char* rt_version = Py_GetVersion();
        unsigned long version = 0;
        unsigned long factor = 0x01000000UL;
        unsigned int digit = 0;
        int i = 0;
        while (factor) {
            while ('0' <= rt_version[i] && rt_version[i] <= '9') {
                digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
                ++i;
            }
            version += factor * digit;
            if (rt_version[i] != '.')
                break;
            digit = 0;
            factor >>= 8;
            ++i;
        }
        __Pyx_cached_runtime_version = version;
    }
    return __Pyx_cached_runtime_version;
#endif
}

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* VoidPtrImport */
  #ifndef __PYX_HAVE_RT_ImportVoidPtr_3_1_2
#define __PYX_HAVE_RT_ImportVoidPtr_3_1_2
static int __Pyx_ImportVoidPtr_3_1_2(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, "__pyx_capi__");
    if (!d)
        goto bad;
#if (defined(Py_LIMITED_API) && Py_LIMITED_API >= 0x030d0000) || (!defined(Py_LIMITED_API) && PY_VERSION_HEX >= 0x030d0000)
    PyDict_GetItemStringRef(d, name, &cobj);
#else
    cobj = PyDict_GetItemString(d, name);
    Py_XINCREF(cobj);
#endif
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    Py_DECREF(cobj);
    return 0;
bad:
    Py_XDECREF(d);
    Py_XDECREF(cobj);
    return -1;
}
#endif

/* FunctionImport */
  #ifndef __PYX_HAVE_RT_ImportFunction_3_1_2
#define __PYX_HAVE_RT_ImportFunction_3_1_2
static int __Pyx_ImportFunction_3_1_2(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, "__pyx_capi__");
    if (!d)
        goto bad;
#if (defined(Py_LIMITED_API) && Py_LIMITED_API >= 0x030d0000) || (!defined(Py_LIMITED_API) && PY_VERSION_HEX >= 0x030d0000)
    PyDict_GetItemStringRef(d, funcname, &cobj);
#else
    cobj = PyDict_GetItemString(d, funcname);
    Py_XINCREF(cobj);
#endif
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    Py_DECREF(cobj);
    return 0;
bad:
    Py_XDECREF(d);
    Py_XDECREF(cobj);
    return -1;
}
#endif

/* NewCodeObj */
  #if CYTHON_COMPILING_IN_LIMITED_API
    static PyObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,
                                       PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                       PyObject *fv, PyObject *cell, PyObject* fn,
                                       PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030b0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030b0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOOOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
#elif PY_VERSION_HEX >= 0x030B0000
  static PyCodeObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,
                                         PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                         PyObject *fv, PyObject *cell, PyObject* fn,
                                         PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, __pyx_mstate_global->__pyx_empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
static PyObject* __Pyx_PyCode_New(
        const __Pyx_PyCode_New_function_description descr,
        PyObject * const *varnames,
        PyObject *filename,
        PyObject *funcname,
        const char *line_table,
        PyObject *tuple_dedup_map
) {
    PyObject *code_obj = NULL, *varnames_tuple_dedup = NULL, *code_bytes = NULL, *line_table_bytes = NULL;
    Py_ssize_t var_count = (Py_ssize_t) descr.nlocals;
    PyObject *varnames_tuple = PyTuple_New(var_count);
    if (unlikely(!varnames_tuple)) return NULL;
    for (Py_ssize_t i=0; i < var_count; i++) {
        Py_INCREF(varnames[i]);
        if (__Pyx_PyTuple_SET_ITEM(varnames_tuple, i, varnames[i]) != (0)) goto done;
    }
    #if CYTHON_COMPILING_IN_LIMITED_API
    varnames_tuple_dedup = PyDict_GetItem(tuple_dedup_map, varnames_tuple);
    if (!varnames_tuple_dedup) {
        if (unlikely(PyDict_SetItem(tuple_dedup_map, varnames_tuple, varnames_tuple) < 0)) goto done;
        varnames_tuple_dedup = varnames_tuple;
    }
    #else
    varnames_tuple_dedup = PyDict_SetDefault(tuple_dedup_map, varnames_tuple, varnames_tuple);
    if (unlikely(!varnames_tuple_dedup)) goto done;
    #endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(varnames_tuple_dedup);
    #endif
    if (__PYX_LIMITED_VERSION_HEX >= (0x030b0000) && line_table != NULL
        && !CYTHON_COMPILING_IN_GRAAL) {
        line_table_bytes = PyBytes_FromStringAndSize(line_table, descr.line_table_length);
        if (unlikely(!line_table_bytes)) goto done;
        Py_ssize_t code_len = (descr.line_table_length * 2 + 4) & ~3;
        code_bytes = PyBytes_FromStringAndSize(NULL, code_len);
        if (unlikely(!code_bytes)) goto done;
        char* c_code_bytes = PyBytes_AsString(code_bytes);
        if (unlikely(!c_code_bytes)) goto done;
        memset(c_code_bytes, 0, (size_t) code_len);
    }
    code_obj = (PyObject*) __Pyx__PyCode_New(
        (int) descr.argcount,
        (int) descr.num_posonly_args,
        (int) descr.num_kwonly_args,
        (int) descr.nlocals,
        0,
        (int) descr.flags,
        code_bytes ? code_bytes : __pyx_mstate_global->__pyx_empty_bytes,
        __pyx_mstate_global->__pyx_empty_tuple,
        __pyx_mstate_global->__pyx_empty_tuple,
        varnames_tuple_dedup,
        __pyx_mstate_global->__pyx_empty_tuple,
        __pyx_mstate_global->__pyx_empty_tuple,
        filename,
        funcname,
        (int) descr.first_line,
        (__PYX_LIMITED_VERSION_HEX >= (0x030b0000) && line_table_bytes) ? line_table_bytes : __pyx_mstate_global->__pyx_empty_bytes
    );
done:
    Py_XDECREF(code_bytes);
    Py_XDECREF(line_table_bytes);
    #if CYTHON_AVOID_BORROWED_REFS
    Py_XDECREF(varnames_tuple_dedup);
    #endif
    Py_DECREF(varnames_tuple);
    return code_obj;
}

/* InitStrings */
  static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names) {
    while (t->s) {
        PyObject *str;
        if (t->is_unicode) {
            if (t->intern) {
                str = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                str = PyUnicode_Decode(t->s, t->n - 1, encoding_names[t->encoding], NULL);
            } else {
                str = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            str = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        if (!str)
            return -1;
        *target = str;
        if (PyObject_Hash(str) == -1)
            return -1;
        ++t;
        ++target;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    {
        const char* result;
        Py_ssize_t unicode_length;
        CYTHON_MAYBE_UNUSED_VAR(unicode_length); // only for __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        #if __PYX_LIMITED_VERSION_HEX < 0x030A0000
        if (unlikely(PyArg_Parse(o, "s#", &result, length) < 0)) return NULL;
        #else
        result = PyUnicode_AsUTF8AndSize(o, length);
        #endif
        #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        unicode_length = PyUnicode_GetLength(o);
        if (unlikely(unicode_length < 0)) return NULL;
        if (unlikely(unicode_length != *length)) {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
        #endif
        return result;
    }
#else
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
}
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
    if (PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
    if (PyByteArray_Check(o)) {
#if (CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS) || (CYTHON_COMPILING_IN_PYPY && (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE)))
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
#else
        *length = PyByteArray_Size(o);
        if (*length == -1) return NULL;
        return PyByteArray_AsString(o);
#endif
    } else
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_LongWrongResultType(PyObject* result) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(result));
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
    PyErr_Format(PyExc_TypeError,
                 "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ")",
                 result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  PyObject *res = NULL;
  if (likely(PyLong_Check(x)))
      return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  if (likely(m && m->nb_int)) {
      res = m->nb_int(x);
  }
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
      res = PyNumber_Long(x);
  }
#endif
  if (likely(res)) {
      if (unlikely(!PyLong_CheckExact(res))) {
          return __Pyx_PyNumber_LongWrongResultType(res);
      }
  }
  else if (!PyErr_Occurred()) {
      PyErr_SetString(PyExc_TypeError,
                      "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyLong_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyLong_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b) {
    CYTHON_UNUSED_VAR(b);
    return __Pyx_NewRef(Py_None);
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t ival) {
    return PyLong_FromSize_t(ival);
}


  /* MultiPhaseInitModuleState */
  #if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)
  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1
#else
  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0
#endif
#endif
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS
#error "Module state with PEP489 requires atomics. Currently that's one of\
 C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics"
#endif
#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
#define __Pyx_ModuleStateLookup_Lock()
#define __Pyx_ModuleStateLookup_Unlock()
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000
static PyMutex __Pyx_ModuleStateLookup_mutex = {0};
#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(__cplusplus) && __cplusplus >= 201103L
#include <mutex>
static std::mutex __Pyx_ModuleStateLookup_mutex;
#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()
#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()
#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)
#include <threads.h>
static mtx_t __Pyx_ModuleStateLookup_mutex;
static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;
static void __Pyx_ModuleStateLookup_initialize_mutex(void) {
    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);
}
#define __Pyx_ModuleStateLookup_Lock()\
  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex);\
  mtx_lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(HAVE_PTHREAD_H)
#include <pthread.h>
static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;
#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(_WIN32)
#include <Windows.h>  // synchapi.h on its own doesn't work
static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;
#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)
#else
#error "No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE.\
 Requires C standard >= C11, or C++ standard >= C++11,\
 or pthreads, or the Windows 32 API, or Python >= 3.13."
#endif
typedef struct {
    int64_t id;
    PyObject *module;
} __Pyx_InterpreterIdAndModule;
typedef struct {
    char interpreter_id_as_index;
    Py_ssize_t count;
    Py_ssize_t allocated;
    __Pyx_InterpreterIdAndModule table[1];
} __Pyx_ModuleStateLookupData;
#define __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE 32
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static __pyx_atomic_int_type __Pyx_ModuleStateLookup_read_counter = 0;
#endif
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static __pyx_atomic_ptr_type __Pyx_ModuleStateLookup_data = 0;
#else
static __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_data = NULL;
#endif
static __Pyx_InterpreterIdAndModule* __Pyx_State_FindModuleStateLookupTableLowerBound(
        __Pyx_InterpreterIdAndModule* table,
        Py_ssize_t count,
        int64_t interpreterId) {
    __Pyx_InterpreterIdAndModule* begin = table;
    __Pyx_InterpreterIdAndModule* end = begin + count;
    if (begin->id == interpreterId) {
        return begin;
    }
    while ((end - begin) > __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {
        __Pyx_InterpreterIdAndModule* halfway = begin + (end - begin)/2;
        if (halfway->id == interpreterId) {
            return halfway;
        }
        if (halfway->id < interpreterId) {
            begin = halfway;
        } else {
            end = halfway;
        }
    }
    for (; begin < end; ++begin) {
        if (begin->id >= interpreterId) return begin;
    }
    return begin;
}
static PyObject *__Pyx_State_FindModule(CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return NULL;
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData* data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);
    {
        __pyx_atomic_incr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
        if (likely(data)) {
            __Pyx_ModuleStateLookupData* new_data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_acquire(&__Pyx_ModuleStateLookup_data);
            if (likely(data == new_data)) {
                goto read_finished;
            }
        }
        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
        __Pyx_ModuleStateLookup_Lock();
        __pyx_atomic_incr_relaxed(&__Pyx_ModuleStateLookup_read_counter);
        data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);
        __Pyx_ModuleStateLookup_Unlock();
    }
  read_finished:;
#else
    __Pyx_ModuleStateLookupData* data = __Pyx_ModuleStateLookup_data;
#endif
    __Pyx_InterpreterIdAndModule* found = NULL;
    if (unlikely(!data)) goto end;
    if (data->interpreter_id_as_index) {
        if (interpreter_id < data->count) {
            found = data->table+interpreter_id;
        }
    } else {
        found = __Pyx_State_FindModuleStateLookupTableLowerBound(
            data->table, data->count, interpreter_id);
    }
  end:
    {
        PyObject *result=NULL;
        if (found && found->id == interpreter_id) {
            result = found->module;
        }
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
#endif
        return result;
    }
}
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static void __Pyx_ModuleStateLookup_wait_until_no_readers(void) {
    while (__pyx_atomic_load(&__Pyx_ModuleStateLookup_read_counter) != 0);
}
#else
#define __Pyx_ModuleStateLookup_wait_until_no_readers()
#endif
static int __Pyx_State_AddModuleInterpIdAsIndex(__Pyx_ModuleStateLookupData **old_data, PyObject* module, int64_t interpreter_id) {
    Py_ssize_t to_allocate = (*old_data)->allocated;
    while (to_allocate <= interpreter_id) {
        if (to_allocate == 0) to_allocate = 1;
        else to_allocate *= 2;
    }
    __Pyx_ModuleStateLookupData *new_data = *old_data;
    if (to_allocate != (*old_data)->allocated) {
         new_data = (__Pyx_ModuleStateLookupData *)realloc(
            *old_data,
            sizeof(__Pyx_ModuleStateLookupData)+(to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));
        if (!new_data) {
            PyErr_NoMemory();
            return -1;
        }
        for (Py_ssize_t i = new_data->allocated; i < to_allocate; ++i) {
            new_data->table[i].id = i;
            new_data->table[i].module = NULL;
        }
        new_data->allocated = to_allocate;
    }
    new_data->table[interpreter_id].module = module;
    if (new_data->count < interpreter_id+1) {
        new_data->count = interpreter_id+1;
    }
    *old_data = new_data;
    return 0;
}
static void __Pyx_State_ConvertFromInterpIdAsIndex(__Pyx_ModuleStateLookupData *data) {
    __Pyx_InterpreterIdAndModule *read = data->table;
    __Pyx_InterpreterIdAndModule *write = data->table;
    __Pyx_InterpreterIdAndModule *end = read + data->count;
    for (; read<end; ++read) {
        if (read->module) {
            write->id = read->id;
            write->module = read->module;
            ++write;
        }
    }
    data->count = write - data->table;
    for (; write<end; ++write) {
        write->id = 0;
        write->module = NULL;
    }
    data->interpreter_id_as_index = 0;
}
static int __Pyx_State_AddModule(PyObject* module, CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return -1;
    int result = 0;
    __Pyx_ModuleStateLookup_Lock();
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData *old_data = (__Pyx_ModuleStateLookupData *)
            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);
#else
    __Pyx_ModuleStateLookupData *old_data = __Pyx_ModuleStateLookup_data;
#endif
    __Pyx_ModuleStateLookupData *new_data = old_data;
    if (!new_data) {
        new_data = (__Pyx_ModuleStateLookupData *)calloc(1, sizeof(__Pyx_ModuleStateLookupData));
        if (!new_data) {
            result = -1;
            PyErr_NoMemory();
            goto end;
        }
        new_data->allocated = 1;
        new_data->interpreter_id_as_index = 1;
    }
    __Pyx_ModuleStateLookup_wait_until_no_readers();
    if (new_data->interpreter_id_as_index) {
        if (interpreter_id < __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {
            result = __Pyx_State_AddModuleInterpIdAsIndex(&new_data, module, interpreter_id);
            goto end;
        }
        __Pyx_State_ConvertFromInterpIdAsIndex(new_data);
    }
    {
        Py_ssize_t insert_at = 0;
        {
            __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(
                new_data->table, new_data->count, interpreter_id);
            assert(lower_bound);
            insert_at = lower_bound - new_data->table;
            if (unlikely(insert_at < new_data->count && lower_bound->id == interpreter_id)) {
                lower_bound->module = module;
                goto end;  // already in table, nothing more to do
            }
        }
        if (new_data->count+1 >= new_data->allocated) {
            Py_ssize_t to_allocate = (new_data->count+1)*2;
            new_data =
                (__Pyx_ModuleStateLookupData*)realloc(
                    new_data,
                    sizeof(__Pyx_ModuleStateLookupData) +
                    (to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));
            if (!new_data) {
                result = -1;
                new_data = old_data;
                PyErr_NoMemory();
                goto end;
            }
            new_data->allocated = to_allocate;
        }
        ++new_data->count;
        int64_t last_id = interpreter_id;
        PyObject *last_module = module;
        for (Py_ssize_t i=insert_at; i<new_data->count; ++i) {
            int64_t current_id = new_data->table[i].id;
            new_data->table[i].id = last_id;
            last_id = current_id;
            PyObject *current_module = new_data->table[i].module;
            new_data->table[i].module = last_module;
            last_module = current_module;
        }
    }
  end:
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, new_data);
#else
    __Pyx_ModuleStateLookup_data = new_data;
#endif
    __Pyx_ModuleStateLookup_Unlock();
    return result;
}
static int __Pyx_State_RemoveModule(CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return -1;
    __Pyx_ModuleStateLookup_Lock();
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData *data = (__Pyx_ModuleStateLookupData *)
            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);
#else
    __Pyx_ModuleStateLookupData *data = __Pyx_ModuleStateLookup_data;
#endif
    if (data->interpreter_id_as_index) {
        if (interpreter_id < data->count) {
            data->table[interpreter_id].module = NULL;
        }
        goto done;
    }
    {
        __Pyx_ModuleStateLookup_wait_until_no_readers();
        __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(
            data->table, data->count, interpreter_id);
        if (!lower_bound) goto done;
        if (lower_bound->id != interpreter_id) goto done;
        __Pyx_InterpreterIdAndModule *end = data->table+data->count;
        for (;lower_bound<end-1; ++lower_bound) {
            lower_bound->id = (lower_bound+1)->id;
            lower_bound->module = (lower_bound+1)->module;
        }
    }
    --data->count;
    if (data->count == 0) {
        free(data);
        data = NULL;
    }
  done:
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, data);
#else
    __Pyx_ModuleStateLookup_data = data;
#endif
    __Pyx_ModuleStateLookup_Unlock();
    return 0;
}
#endif

/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
