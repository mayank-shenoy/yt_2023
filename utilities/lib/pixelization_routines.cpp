/* Generated by Cython 0.29.36 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "yt/utilities/lib/cykdtree/c_kdtree.hpp",
            "yt/utilities/lib/pixelization_constants.hpp",
            "yt/utilities/lib/platform_dep.h",
            "yt/utilities/lib/tsearch.h"
        ],
        "extra_compile_args": [
            "-std=c++14"
        ],
        "extra_link_args": [
            "-std=c++14"
        ],
        "include_dirs": [
            "yt/utilities/lib/",
            "yt/utilities/lib",
            "yt/utilities/lib/cykdtree",
            "./yt/utilities/lib/cykdtree"
        ],
        "language": "c++",
        "libraries": [
            "m"
        ],
        "name": "yt.utilities.lib.pixelization_routines",
        "sources": [
            "yt/utilities/lib/pixelization_routines.pyx",
            "yt/utilities/lib/pixelization_constants.cpp"
        ]
    },
    "module_name": "yt.utilities.lib.pixelization_routines"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_36"
#define CYTHON_HEX_VERSION 0x001D24F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
#elif defined(PY_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030A0000)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS ((PY_VERSION_HEX >= 0x030600B1) && (PY_VERSION_HEX < 0x030C00A5))
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__yt__utilities__lib__pixelization_routines
#define __PYX_HAVE_API__yt__utilities__lib__pixelization_routines
/* Early includes */
#include <math.h>
#include <string.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include <stdlib.h>
#include "numpy/npy_math.h"
#include <float.h>
#include "tsearch.h"
#include "platform_dep.h"
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <vector>
#include <iostream>
#include <fstream>
#include "c_kdtree.hpp"
#include "pixelization_constants.hpp"
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "yt/utilities/lib/pixelization_routines.pyx",
  "stringsource",
  "__init__.pxd",
  "yt/utilities/lib/fp_utils.pxd",
  "yt/utilities/lib/geometry_utils.pxd",
  "yt/geometry/particle_deposit.pxd",
  "type.pxd",
  "yt/geometry/oct_visitors.pxd",
  "yt/geometry/selection_routines.pxd",
  "yt/utilities/lib/allocation_container.pxd",
  "yt/geometry/oct_container.pxd",
  "yt/utilities/lib/element_mappings.pxd",
  "yt/utilities/lib/bounded_priority_queue.pxd",
  "yt/utilities/lib/cykdtree/kdtree.pxd",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_incr_aligned(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && CYTHON_COMPILING_IN_NOGIL
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd)
    #define __pyx_atomic_incr_aligned(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_aligned(value) _InterlockedExchangeAdd(value, -1)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":782
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":789
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":800
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":803
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":807
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":808
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":810
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":811
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":812
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor;
struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalCells;
struct __pyx_obj_2yt_8geometry_12oct_visitors_MarkOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_ICoordsOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_IResOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_FCoordsOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_FWidthOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayI64;
struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayF64;
struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8;
struct __pyx_obj_2yt_8geometry_12oct_visitors_IdentifyOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd;
struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesO;
struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesR;
struct __pyx_obj_2yt_8geometry_12oct_visitors_CountByDomain;
struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreOctree;
struct __pyx_obj_2yt_8geometry_12oct_visitors_LoadOctree;
struct __pyx_obj_2yt_8geometry_12oct_visitors_MortonIndexOcts;
struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreIndex;
struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor;
struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor;
struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellVisitor;
struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject;
struct __pyx_obj_2yt_8geometry_18selection_routines_AlwaysSelector;
struct __pyx_obj_2yt_8geometry_18selection_routines_OctreeSubsetSelector;
struct __pyx_obj_2yt_8geometry_18selection_routines_BooleanSelector;
struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool;
struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool;
struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer;
struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer;
struct __pyx_obj_2yt_8geometry_13oct_container_RAMSESOctreeContainer;
struct __pyx_obj_2yt_8geometry_16particle_deposit_ParticleDepositOperation;
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler;
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_P1Sampler1D;
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_P1Sampler2D;
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_P1Sampler3D;
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D;
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D;
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_W1Sampler3D;
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_S2Sampler3D;
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D;
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D;
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D;
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_T2Sampler2D;
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D;
struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue;
struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList;
struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode;
struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree;
struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":814
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":815
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":816
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":818
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_t_2yt_8geometry_12oct_visitors_Oct;
struct __pyx_t_2yt_8geometry_12oct_visitors_OctInfo;
struct __pyx_t_2yt_8geometry_12oct_visitors_OctPadded;

/* "oct_visitors.pxd":13
 * 
 * 
 * cdef struct Oct             # <<<<<<<<<<<<<<
 * cdef struct Oct:
 *     np.int64_t file_ind     # index with respect to the order in which it was
 */
struct __pyx_t_2yt_8geometry_12oct_visitors_Oct {
  __pyx_t_5numpy_int64_t file_ind;
  __pyx_t_5numpy_int64_t domain_ind;
  __pyx_t_5numpy_int64_t domain;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct **children;
};

/* "oct_visitors.pxd":21
 *     Oct **children          # Up to 8 long
 * 
 * cdef struct OctInfo:             # <<<<<<<<<<<<<<
 *     np.float64_t left_edge[3]
 *     np.float64_t dds[3]
 */
struct __pyx_t_2yt_8geometry_12oct_visitors_OctInfo {
  __pyx_t_5numpy_float64_t left_edge[3];
  __pyx_t_5numpy_float64_t dds[3];
  __pyx_t_5numpy_int64_t ipos[3];
  __pyx_t_5numpy_int32_t level;
};

/* "oct_visitors.pxd":27
 *     np.int32_t level
 * 
 * cdef struct OctPadded:             # <<<<<<<<<<<<<<
 *     np.int64_t file_ind
 *     np.int64_t domain_ind
 */
struct __pyx_t_2yt_8geometry_12oct_visitors_OctPadded {
  __pyx_t_5numpy_int64_t file_ind;
  __pyx_t_5numpy_int64_t domain_ind;
  __pyx_t_5numpy_int64_t domain;
  __pyx_t_5numpy_int64_t padding;
};
struct __pyx_t_2yt_8geometry_13grid_visitors_GridTreeNode;
struct __pyx_t_2yt_8geometry_13grid_visitors_GridTreeNodePadded;
struct __pyx_t_2yt_8geometry_13grid_visitors_GridVisitorData;

/* "yt/geometry/grid_visitors.pxd":13
 * 
 * 
 * cdef struct GridTreeNode:             # <<<<<<<<<<<<<<
 *     np.int32_t num_children
 *     np.int32_t level
 */
struct __pyx_t_2yt_8geometry_13grid_visitors_GridTreeNode {
  __pyx_t_5numpy_int32_t num_children;
  __pyx_t_5numpy_int32_t level;
  __pyx_t_5numpy_int64_t index;
  __pyx_t_5numpy_float64_t left_edge[3];
  __pyx_t_5numpy_float64_t right_edge[3];
  struct __pyx_t_2yt_8geometry_13grid_visitors_GridTreeNode **children;
  __pyx_t_5numpy_int64_t start_index[3];
  __pyx_t_5numpy_int32_t dims[3];
  __pyx_t_5numpy_float64_t dds[3];
};

/* "yt/geometry/grid_visitors.pxd":24
 *     np.float64_t dds[3]
 * 
 * cdef struct GridTreeNodePadded:             # <<<<<<<<<<<<<<
 *     np.int32_t num_children
 *     np.int32_t level
 */
struct __pyx_t_2yt_8geometry_13grid_visitors_GridTreeNodePadded {
  __pyx_t_5numpy_int32_t num_children;
  __pyx_t_5numpy_int32_t level;
  __pyx_t_5numpy_int64_t index;
  __pyx_t_5numpy_float64_t left_edge_x;
  __pyx_t_5numpy_float64_t left_edge_y;
  __pyx_t_5numpy_float64_t left_edge_z;
  __pyx_t_5numpy_float64_t right_edge_x;
  __pyx_t_5numpy_float64_t right_edge_y;
  __pyx_t_5numpy_float64_t right_edge_z;
  __pyx_t_5numpy_int_t children_pointers;
  __pyx_t_5numpy_int64_t start_index_x;
  __pyx_t_5numpy_int64_t start_index_y;
  __pyx_t_5numpy_int64_t start_index_z;
  __pyx_t_5numpy_int32_t dims_x;
  __pyx_t_5numpy_int32_t dims_y;
  __pyx_t_5numpy_int32_t dims_z;
  __pyx_t_5numpy_float64_t dds_x;
  __pyx_t_5numpy_float64_t dds_y;
  __pyx_t_5numpy_float64_t dds_z;
};

/* "yt/geometry/grid_visitors.pxd":45
 *     np.float64_t dds_z
 * 
 * cdef struct GridVisitorData:             # <<<<<<<<<<<<<<
 *     GridTreeNode *grid
 *     np.uint64_t index
 */
struct __pyx_t_2yt_8geometry_13grid_visitors_GridVisitorData {
  struct __pyx_t_2yt_8geometry_13grid_visitors_GridTreeNode *grid;
  __pyx_t_5numpy_uint64_t index;
  __pyx_t_5numpy_uint64_t global_index;
  __pyx_t_5numpy_int64_t pos[3];
  int n_tuples;
  int **child_tuples;
  void *array;
  int ref_factor;
};

/* "yt/geometry/grid_visitors.pxd":61
 * cdef np.uint8_t check_child_masked(GridVisitorData *data) nogil
 * 
 * ctypedef void grid_visitor_function(GridVisitorData *data,             # <<<<<<<<<<<<<<
 *                                          np.uint8_t selected) nogil
 * # This is similar in spirit to the way oct visitor functions work.  However,
 */
typedef void __pyx_t_2yt_8geometry_13grid_visitors_grid_visitor_function(struct __pyx_t_2yt_8geometry_13grid_visitors_GridVisitorData *, __pyx_t_5numpy_uint8_t);
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_recursively_visit_octs;
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_select_grid;
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_select_grid_edge;
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_visit_grid_cells;

/* "selection_routines.pxd":35
 *     cdef np.int64_t _hash
 * 
 *     cdef void recursively_visit_octs(self, Oct *root,             # <<<<<<<<<<<<<<
 *                         np.float64_t pos[3], np.float64_t dds[3],
 *                         int level,
 */
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_recursively_visit_octs {
  int __pyx_n;
  int visit_covered;
};

/* "selection_routines.pxd":43
 *                               np.float64_t spos[3], np.float64_t sdds[3],
 *                               OctVisitor visitor, int i, int j, int k)
 *     cdef int select_grid(self, np.float64_t left_edge[3],             # <<<<<<<<<<<<<<
 *                                np.float64_t right_edge[3],
 *                                np.int32_t level, Oct *o = ?) noexcept nogil
 */
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_select_grid {
  int __pyx_n;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *o;
};

/* "selection_routines.pxd":46
 *                                np.float64_t right_edge[3],
 *                                np.int32_t level, Oct *o = ?) noexcept nogil
 *     cdef int select_grid_edge(self, np.float64_t left_edge[3],             # <<<<<<<<<<<<<<
 *                                     np.float64_t right_edge[3],
 *                                     np.int32_t level, Oct *o = ?) noexcept nogil
 */
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_select_grid_edge {
  int __pyx_n;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *o;
};

/* "selection_routines.pxd":69
 *                                 np.ndarray[np.uint8_t, ndim=3] mask,
 *                                 int level)
 *     cdef void visit_grid_cells(self, GridVisitorData *data,             # <<<<<<<<<<<<<<
 *                     grid_visitor_function *func, np.uint8_t *cached_mask = ?)
 * 
 */
struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_visit_grid_cells {
  int __pyx_n;
  __pyx_t_5numpy_uint8_t *cached_mask;
};
struct __pyx_t_2yt_9utilities_3lib_20allocation_container_AllocationContainer;
struct __pyx_opt_args_2yt_9utilities_3lib_20allocation_container_10ObjectPool_allocate_objs;

/* "yt/utilities/lib/allocation_container.pxd":13
 * 
 * 
 * cdef struct AllocationContainer:             # <<<<<<<<<<<<<<
 *     np.uint64_t n
 *     np.uint64_t n_assigned
 */
struct __pyx_t_2yt_9utilities_3lib_20allocation_container_AllocationContainer {
  __pyx_t_5numpy_uint64_t n;
  __pyx_t_5numpy_uint64_t n_assigned;
  __pyx_t_5numpy_uint64_t offset;
  __pyx_t_5numpy_int64_t con_id;
  void *my_objs;
};

/* "yt/utilities/lib/allocation_container.pxd":24
 *     cdef np.uint64_t n_con
 *     cdef AllocationContainer* containers
 *     cdef void allocate_objs(self, int n_objs, np.int64_t con_id = ?) except *             # <<<<<<<<<<<<<<
 *     cdef void setup_objs(self, void *obj, np.uint64_t count,
 *                          np.uint64_t offset, np.int64_t con_id)
 */
struct __pyx_opt_args_2yt_9utilities_3lib_20allocation_container_10ObjectPool_allocate_objs {
  int __pyx_n;
  __pyx_t_5numpy_int64_t con_id;
};
struct __pyx_t_2yt_8geometry_13oct_container_OctKey;
struct __pyx_t_2yt_8geometry_13oct_container_OctList;
struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer;
struct __pyx_opt_args_2yt_8geometry_13oct_container_15OctreeContainer_get;
struct __pyx_opt_args_2yt_8geometry_13oct_container_15OctreeContainer_visit_all_octs;

/* "oct_container.pxd":24
 * cdef int ORDER_MAX
 * 
 * cdef struct OctKey:             # <<<<<<<<<<<<<<
 *     np.int64_t key
 *     Oct *node
 */
struct __pyx_t_2yt_8geometry_13oct_container_OctKey {
  __pyx_t_5numpy_int64_t key;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *node;
  __pyx_t_5numpy_int64_t *indices;
  __pyx_t_5numpy_int64_t pcount;
};

/* "oct_container.pxd":31
 *     np.int64_t pcount
 * 
 * cdef struct OctList             # <<<<<<<<<<<<<<
 * 
 * cdef struct OctList:
 */
struct __pyx_t_2yt_8geometry_13oct_container_OctList {
  struct __pyx_t_2yt_8geometry_13oct_container_OctList *next;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *o;
};

/* "oct_container.pxd":39
 * # NOTE: This object *has* to be the same size as the AllocationContainer
 * # object.  There's an assert in the __cinit__ function.
 * cdef struct OctAllocationContainer:             # <<<<<<<<<<<<<<
 *     np.uint64_t n
 *     np.uint64_t n_assigned
 */
struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer {
  __pyx_t_5numpy_uint64_t n;
  __pyx_t_5numpy_uint64_t n_assigned;
  __pyx_t_5numpy_uint64_t offset;
  __pyx_t_5numpy_int64_t con_id;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *my_objs;
};

/* "oct_container.pxd":65
 *     cdef public np.int64_t nocts
 *     cdef public int num_domains
 *     cdef Oct *get(self, np.float64_t ppos[3], OctInfo *oinfo = ?,             # <<<<<<<<<<<<<<
 *                   int max_level = ?) nogil
 *     cdef int get_root(self, int ind[3], Oct **o) nogil
 */
struct __pyx_opt_args_2yt_8geometry_13oct_container_15OctreeContainer_get {
  int __pyx_n;
  struct __pyx_t_2yt_8geometry_12oct_visitors_OctInfo *oinfo;
  int max_level;
};

/* "oct_container.pxd":73
 *     # AllocationContainer.offset if such a thing exists.
 *     cdef np.int64_t get_domain_offset(self, int domain_id)
 *     cdef void visit_all_octs(self,             # <<<<<<<<<<<<<<
 *                         selection_routines.SelectorObject selector,
 *                         OctVisitor visitor,
 */
struct __pyx_opt_args_2yt_8geometry_13oct_container_15OctreeContainer_visit_all_octs {
  int __pyx_n;
  int vc;
  __pyx_t_5numpy_int64_t *indices;
};

/* "yt/geometry/particle_deposit.pxd":119
 * # So in order to mimic a registry functionality,
 * # I manually created a function to lookup the kernel functions.
 * ctypedef np.float64_t (*kernel_func) (np.float64_t) nogil             # <<<<<<<<<<<<<<
 * cdef inline kernel_func get_kernel_func(str kernel_name) nogil:
 *     with gil:
 */
typedef __pyx_t_5numpy_float64_t (*__pyx_t_2yt_8geometry_16particle_deposit_kernel_func)(__pyx_t_5numpy_float64_t);

/* "yt/utilities/lib/element_mappings.pxd":99
 * #          once it is converged.
 * #
 * ctypedef void (*func_type)(double* fx,             # <<<<<<<<<<<<<<
 *                            double* x,
 *                            double* vertices,
 */
typedef void (*__pyx_t_2yt_9utilities_3lib_16element_mappings_func_type)(double *, double *, double *, double *);

/* "yt/utilities/lib/element_mappings.pxd":119
 * #     tcol     - the third column of the jaocobian
 * #
 * ctypedef void (*jac_type3D)(double* rcol,             # <<<<<<<<<<<<<<
 *                             double* scol,
 *                             double* tcol,
 */
typedef void (*__pyx_t_2yt_9utilities_3lib_16element_mappings_jac_type3D)(double *, double *, double *, double *, double *, double *);

/* "yt/utilities/lib/element_mappings.pxd":141
 * #     scol     - the second column of the jacobian
 * #
 * ctypedef void (*jac_type2D)(double* rcol,             # <<<<<<<<<<<<<<
 *                             double* scol,
 *                             double* x,
 */
typedef void (*__pyx_t_2yt_9utilities_3lib_16element_mappings_jac_type2D)(double *, double *, double *, double *, double *);
struct __pyx_t_2yt_9utilities_3lib_21particle_kdtree_tools_axes_range;

/* "yt/utilities/lib/particle_kdtree_tools.pxd":8
 * 
 * 
 * cdef struct axes_range:             # <<<<<<<<<<<<<<
 *     int start
 *     int stop
 */
struct __pyx_t_2yt_9utilities_3lib_21particle_kdtree_tools_axes_range {
  int start;
  int stop;
  int step;
};
struct __pyx_defaults;
typedef struct __pyx_defaults __pyx_defaults;
struct __pyx_defaults1;
typedef struct __pyx_defaults1 __pyx_defaults1;
struct __pyx_defaults2;
typedef struct __pyx_defaults2 __pyx_defaults2;
struct __pyx_defaults3;
typedef struct __pyx_defaults3 __pyx_defaults3;
struct __pyx_defaults4;
typedef struct __pyx_defaults4 __pyx_defaults4;
struct __pyx_defaults5;
typedef struct __pyx_defaults5 __pyx_defaults5;
struct __pyx_defaults6;
typedef struct __pyx_defaults6 __pyx_defaults6;
struct __pyx_defaults7;
typedef struct __pyx_defaults7 __pyx_defaults7;
struct __pyx_defaults {
  PyObject *__pyx_arg_period;
  int __pyx_arg_antialias;
  int __pyx_arg_check_period;
  __pyx_t_5numpy_float64_t __pyx_arg_line_width;
};
struct __pyx_defaults1 {
  PyObject *__pyx_arg_period;
  int __pyx_arg_antialias;
  int __pyx_arg_check_period;
  __pyx_t_5numpy_float64_t __pyx_arg_line_width;
};
struct __pyx_defaults2 {
  PyObject *__pyx_arg_period;
  int __pyx_arg_antialias;
  int __pyx_arg_check_period;
  __pyx_t_5numpy_float64_t __pyx_arg_line_width;
};
struct __pyx_defaults3 {
  PyObject *__pyx_arg_period;
  int __pyx_arg_antialias;
  int __pyx_arg_check_period;
  __pyx_t_5numpy_float64_t __pyx_arg_line_width;
};
struct __pyx_defaults4 {
  PyObject *__pyx_arg_kernel_name;
  PyObject *__pyx_arg_weight_field;
  PyObject *__pyx_arg_period;
  int __pyx_arg_check_period;
};
struct __pyx_defaults5 {
  PyObject *__pyx_arg_kernel_name;
  PyObject *__pyx_arg_weight_field;
  PyObject *__pyx_arg_period;
  int __pyx_arg_check_period;
};
struct __pyx_defaults6 {
  PyObject *__pyx_arg_kernel_name;
  PyObject *__pyx_arg_weight_field;
  PyObject *__pyx_arg_period;
  int __pyx_arg_check_period;
};
struct __pyx_defaults7 {
  PyObject *__pyx_arg_kernel_name;
  PyObject *__pyx_arg_weight_field;
  PyObject *__pyx_arg_period;
  int __pyx_arg_check_period;
};

/* "oct_visitors.pxd":33
 *     np.int64_t padding
 * 
 * cdef class OctVisitor:             # <<<<<<<<<<<<<<
 *     cdef np.uint64_t index
 *     cdef np.uint64_t last
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor *__pyx_vtab;
  __pyx_t_5numpy_uint64_t index;
  __pyx_t_5numpy_uint64_t last;
  __pyx_t_5numpy_int64_t global_index;
  __pyx_t_5numpy_int64_t pos[3];
  __pyx_t_5numpy_uint8_t ind[3];
  int dims;
  __pyx_t_5numpy_int32_t domain;
  __pyx_t_5numpy_int8_t level;
  __pyx_t_5numpy_int8_t nz;
  __pyx_t_5numpy_int32_t nzones;
};


/* "oct_visitors.pxd":59
 *         return (((self.ind[2]*d)+self.ind[1])*d+self.ind[0])
 * 
 * cdef class CountTotalOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};


/* "oct_visitors.pxd":62
 *     pass
 * 
 * cdef class CountTotalCells(OctVisitor):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalCells {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};


/* "oct_visitors.pxd":65
 *     pass
 * 
 * cdef class MarkOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     # Unused
 *     cdef np.uint8_t[:,:,:,:] mark
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_MarkOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice mark;
};


/* "oct_visitors.pxd":69
 *     cdef np.uint8_t[:,:,:,:] mark
 * 
 * cdef class MaskOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:,:,:,:] mask
 * 
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice mask;
};


/* "oct_visitors.pxd":72
 *     cdef np.uint8_t[:,:,:,:] mask
 * 
 * cdef class IndexOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] oct_index
 * 
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice oct_index;
};


/* "oct_visitors.pxd":75
 *     cdef np.int64_t[:] oct_index
 * 
 * cdef class MaskedIndexOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] oct_index
 *     cdef np.uint8_t[:] oct_mask
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice oct_index;
  __Pyx_memviewslice oct_mask;
};


/* "oct_visitors.pxd":79
 *     cdef np.uint8_t[:] oct_mask
 * 
 * cdef class IndexMaskMapOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] oct_index
 *     cdef np.uint8_t[:] oct_mask
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice oct_index;
  __Pyx_memviewslice oct_mask;
  __Pyx_memviewslice map_domain_ind;
  __pyx_t_5numpy_uint64_t map_index;
};


/* "oct_visitors.pxd":85
 *     cdef np.uint64_t map_index
 * 
 * cdef class ICoordsOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:,:] icoords
 * 
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_ICoordsOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice icoords;
};


/* "oct_visitors.pxd":88
 *     cdef np.int64_t[:,:] icoords
 * 
 * cdef class IResOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] ires
 * 
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_IResOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice ires;
};


/* "oct_visitors.pxd":91
 *     cdef np.int64_t[:] ires
 * 
 * cdef class FCoordsOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:,:] fcoords
 * 
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_FCoordsOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice fcoords;
};


/* "oct_visitors.pxd":94
 *     cdef np.float64_t[:,:] fcoords
 * 
 * cdef class FWidthOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:,:] fwidth
 * 
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_FWidthOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice fwidth;
};


/* "oct_visitors.pxd":97
 *     cdef np.float64_t[:,:] fwidth
 * 
 * cdef class CopyArrayI64(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:,:,:,:,:,:] source
 *     cdef np.int64_t[:,:] dest
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayI64 {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice source;
  __Pyx_memviewslice dest;
};


/* "oct_visitors.pxd":101
 *     cdef np.int64_t[:,:] dest
 * 
 * cdef class CopyArrayF64(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:,:,:,:,:] source
 *     cdef np.float64_t[:,:] dest
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayF64 {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice source;
  __Pyx_memviewslice dest;
};


/* "oct_visitors.pxd":105
 *     cdef np.float64_t[:,:] dest
 * 
 * cdef class CopyFileIndArrayI8(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t root
 *     cdef np.uint8_t[:] source
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8 {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __pyx_t_5numpy_int64_t root;
  __Pyx_memviewslice source;
  __Pyx_memviewslice dest;
};


/* "oct_visitors.pxd":110
 *     cdef np.uint8_t[:] dest
 * 
 * cdef class IdentifyOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] domain_mask
 * 
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_IdentifyOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice domain_mask;
};


/* "oct_visitors.pxd":113
 *     cdef np.uint8_t[:] domain_mask
 * 
 * cdef class AssignDomainInd(OctVisitor):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};


/* "oct_visitors.pxd":116
 *     pass
 * 
 * cdef class FillFileIndicesO(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] levels
 *     cdef np.int64_t[:] file_inds
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesO {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice levels;
  __Pyx_memviewslice file_inds;
  __Pyx_memviewslice cell_inds;
};


/* "oct_visitors.pxd":121
 *     cdef np.uint8_t[:] cell_inds
 * 
 * cdef class FillFileIndicesR(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] levels
 *     cdef np.int64_t[:] file_inds
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesR {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice levels;
  __Pyx_memviewslice file_inds;
  __Pyx_memviewslice cell_inds;
};


/* "oct_visitors.pxd":126
 *     cdef np.uint8_t[:] cell_inds
 * 
 * cdef class CountByDomain(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] domain_counts
 * 
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_CountByDomain {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice domain_counts;
};


/* "oct_visitors.pxd":129
 *     cdef np.int64_t[:] domain_counts
 * 
 * cdef class StoreOctree(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] ref_mask
 * 
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreOctree {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice ref_mask;
};


/* "oct_visitors.pxd":132
 *     cdef np.uint8_t[:] ref_mask
 * 
 * cdef class LoadOctree(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] ref_mask
 *     cdef Oct* octs
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_LoadOctree {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice ref_mask;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *octs;
  __pyx_t_5numpy_uint64_t *nocts;
  __pyx_t_5numpy_uint64_t *nfinest;
  __pyx_t_5numpy_uint64_t max_level;
};


/* "oct_visitors.pxd":139
 *     cdef np.uint64_t max_level
 * 
 * cdef class MortonIndexOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] level_arr
 *     cdef np.uint64_t[:] morton_ind
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_MortonIndexOcts {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice level_arr;
  __Pyx_memviewslice morton_ind;
};


/* "oct_visitors.pxd":150
 * 
 * 
 * cdef class StoreIndex(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:,:,:,:] cell_inds
 * 
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreIndex {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  __Pyx_memviewslice cell_inds;
};


/* "oct_visitors.pxd":154
 * 
 * # cimport oct_container
 * cdef class BaseNeighbourVisitor(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef int idim      # 0,1,2 for x,y,z
 *     cdef int direction # +1 for +x, -1 for -x
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  int idim;
  int direction;
  __pyx_t_5numpy_uint8_t neigh_ind[3];
  int other_oct;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *neighbour;
  struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *octree;
  struct __pyx_t_2yt_8geometry_12oct_visitors_OctInfo oi;
  int n_ghost_zones;
};


/* "oct_visitors.pxd":170
 *         return (((self.neigh_ind[2]*d)+self.neigh_ind[1])*d+self.neigh_ind[0])
 * 
 * cdef class NeighbourCellIndexVisitor(BaseNeighbourVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[::1] cell_inds
 *     cdef np.int64_t[::1] domain_inds
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor __pyx_base;
  __Pyx_memviewslice cell_inds;
  __Pyx_memviewslice domain_inds;
};


/* "oct_visitors.pxd":174
 *     cdef np.int64_t[::1] domain_inds
 * 
 * cdef class NeighbourCellVisitor(BaseNeighbourVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[::1] levels
 *     cdef np.int64_t[::1] file_inds
 */
struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellVisitor {
  struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor __pyx_base;
  __Pyx_memviewslice levels;
  __Pyx_memviewslice file_inds;
  __Pyx_memviewslice cell_inds;
  __Pyx_memviewslice domains;
};


/* "selection_routines.pxd":25
 * 
 * 
 * cdef class SelectorObject:             # <<<<<<<<<<<<<<
 *     cdef public np.int32_t min_level
 *     cdef public np.int32_t max_level
 */
struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject *__pyx_vtab;
  __pyx_t_5numpy_int32_t min_level;
  __pyx_t_5numpy_int32_t max_level;
  int overlap_cells;
  __pyx_t_5numpy_float64_t domain_width[3];
  __pyx_t_5numpy_float64_t domain_center[3];
  int periodicity[3];
  int _hash_initialized;
  __pyx_t_5numpy_int64_t _hash;
};


/* "selection_routines.pxd":77
 *         self, np.float64_t x1, np.float64_t x2, int d) nogil
 * 
 * cdef class AlwaysSelector(SelectorObject):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_2yt_8geometry_18selection_routines_AlwaysSelector {
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject __pyx_base;
};


/* "selection_routines.pxd":80
 *     pass
 * 
 * cdef class OctreeSubsetSelector(SelectorObject):             # <<<<<<<<<<<<<<
 *     cdef public SelectorObject base_selector
 *     cdef public np.int64_t domain_id
 */
struct __pyx_obj_2yt_8geometry_18selection_routines_OctreeSubsetSelector {
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject __pyx_base;
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *base_selector;
  __pyx_t_5numpy_int64_t domain_id;
};


/* "selection_routines.pxd":84
 *     cdef public np.int64_t domain_id
 * 
 * cdef class BooleanSelector(SelectorObject):             # <<<<<<<<<<<<<<
 *     cdef public SelectorObject sel1
 *     cdef public SelectorObject sel2
 */
struct __pyx_obj_2yt_8geometry_18selection_routines_BooleanSelector {
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject __pyx_base;
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *sel1;
  struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *sel2;
};


/* "yt/utilities/lib/allocation_container.pxd":20
 *     void *my_objs
 * 
 * cdef class ObjectPool:             # <<<<<<<<<<<<<<
 *     cdef public np.uint64_t itemsize
 *     cdef np.uint64_t n_con
 */
struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_9utilities_3lib_20allocation_container_ObjectPool *__pyx_vtab;
  __pyx_t_5numpy_uint64_t itemsize;
  __pyx_t_5numpy_uint64_t n_con;
  struct __pyx_t_2yt_9utilities_3lib_20allocation_container_AllocationContainer *containers;
};


/* "oct_container.pxd":46
 *     Oct *my_objs
 * 
 * cdef class OctObjectPool(ObjectPool):             # <<<<<<<<<<<<<<
 *     cdef inline OctAllocationContainer *get_cont(self, int i):
 *         return <OctAllocationContainer*> (&self.containers[i])
 */
struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool {
  struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool __pyx_base;
};


/* "oct_container.pxd":54
 * cdef void OctList_delete(OctList *list)
 * 
 * cdef class OctreeContainer:             # <<<<<<<<<<<<<<
 *     cdef public OctObjectPool domains
 *     cdef Oct ****root_mesh
 */
struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctreeContainer *__pyx_vtab;
  struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool *domains;
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct ****root_mesh;
  int partial_coverage;
  int level_offset;
  int nn[3];
  __pyx_t_5numpy_uint8_t nz;
  __pyx_t_5numpy_float64_t DLE[3];
  __pyx_t_5numpy_float64_t DRE[3];
  __pyx_t_5numpy_int64_t nocts;
  int num_domains;
  PyObject *fill_style;
  int max_level;
};


/* "oct_container.pxd":85
 *     cdef public int max_level
 * 
 * cdef class SparseOctreeContainer(OctreeContainer):             # <<<<<<<<<<<<<<
 *     cdef OctKey *root_nodes
 *     cdef void *tree_root
 */
struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer {
  struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer __pyx_base;
  struct __pyx_t_2yt_8geometry_13oct_container_OctKey *root_nodes;
  void *tree_root;
  int num_root;
  int max_root;
};


/* "oct_container.pxd":93
 *     cdef np.int64_t ipos_to_key(self, int pos[3]) nogil
 * 
 * cdef class RAMSESOctreeContainer(SparseOctreeContainer):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_2yt_8geometry_13oct_container_RAMSESOctreeContainer {
  struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer __pyx_base;
};


/* "yt/geometry/particle_deposit.pxd":139
 *             raise NotImplementedError
 * 
 * cdef class ParticleDepositOperation:             # <<<<<<<<<<<<<<
 *     # We assume each will allocate and define their own temporary storage
 *     cdef kernel_func sph_kernel
 */
struct __pyx_obj_2yt_8geometry_16particle_deposit_ParticleDepositOperation {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_8geometry_16particle_deposit_ParticleDepositOperation *__pyx_vtab;
  __pyx_t_2yt_8geometry_16particle_deposit_kernel_func sph_kernel;
  PyObject *nvals;
  int update_values;
};


/* "yt/utilities/lib/element_mappings.pxd":10
 * 
 * 
 * cdef class ElementSampler:             # <<<<<<<<<<<<<<
 * 
 *     # how close a point has to be to the element
 */
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler *__pyx_vtab;
  __pyx_t_5numpy_float64_t inclusion_tol;
  int num_mapped_coords;
};


/* "yt/utilities/lib/element_mappings.pxd":39
 * 
 * 
 * cdef class P1Sampler1D(ElementSampler):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_P1Sampler1D {
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler __pyx_base;
};


/* "yt/utilities/lib/element_mappings.pxd":54
 * 
 * 
 * cdef class P1Sampler2D(ElementSampler):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_P1Sampler2D {
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler __pyx_base;
};


/* "yt/utilities/lib/element_mappings.pxd":69
 * 
 * 
 * cdef class P1Sampler3D(ElementSampler):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_P1Sampler3D {
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler __pyx_base;
};


/* "yt/utilities/lib/element_mappings.pxd":148
 * 
 * 
 * cdef class NonlinearSolveSampler3D(ElementSampler):             # <<<<<<<<<<<<<<
 * 
 *     cdef int dim
 */
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D {
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler __pyx_base;
  int dim;
  int max_iter;
  __pyx_t_5numpy_float64_t tolerance;
  __pyx_t_2yt_9utilities_3lib_16element_mappings_func_type func;
  __pyx_t_2yt_9utilities_3lib_16element_mappings_jac_type3D jac;
};


/* "yt/utilities/lib/element_mappings.pxd":162
 * 
 * 
 * cdef class Q1Sampler3D(NonlinearSolveSampler3D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D {
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D __pyx_base;
};


/* "yt/utilities/lib/element_mappings.pxd":179
 * 
 * 
 * cdef class W1Sampler3D(NonlinearSolveSampler3D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_W1Sampler3D {
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D __pyx_base;
};


/* "yt/utilities/lib/element_mappings.pxd":197
 * 
 * 
 * cdef class S2Sampler3D(NonlinearSolveSampler3D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_S2Sampler3D {
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D __pyx_base;
};


/* "yt/utilities/lib/element_mappings.pxd":215
 * 
 * 
 * cdef class NonlinearSolveSampler2D(ElementSampler):             # <<<<<<<<<<<<<<
 * 
 *     cdef int dim
 */
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D {
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler __pyx_base;
  int dim;
  int max_iter;
  __pyx_t_5numpy_float64_t tolerance;
  __pyx_t_2yt_9utilities_3lib_16element_mappings_func_type func;
  __pyx_t_2yt_9utilities_3lib_16element_mappings_jac_type2D jac;
};


/* "yt/utilities/lib/element_mappings.pxd":229
 * 
 * 
 * cdef class Q1Sampler2D(NonlinearSolveSampler2D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D {
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D __pyx_base;
};


/* "yt/utilities/lib/element_mappings.pxd":244
 * 
 * 
 * cdef class Q2Sampler2D(NonlinearSolveSampler2D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D {
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D __pyx_base;
};


/* "yt/utilities/lib/element_mappings.pxd":259
 * 
 * 
 * cdef class T2Sampler2D(NonlinearSolveSampler2D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_T2Sampler2D {
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D __pyx_base;
};


/* "yt/utilities/lib/element_mappings.pxd":273
 *     cdef int check_inside(self, double* mapped_coord) nogil
 * 
 * cdef class Tet2Sampler3D(NonlinearSolveSampler3D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */
struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D {
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D __pyx_base;
};


/* "yt/utilities/lib/bounded_priority_queue.pxd":15
 * 
 * 
 * cdef class BoundedPriorityQueue:             # <<<<<<<<<<<<<<
 *     cdef public np.float64_t[:] heap
 *     cdef np.float64_t* heap_ptr
 */
struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *__pyx_vtab;
  __Pyx_memviewslice heap;
  __pyx_t_5numpy_float64_t *heap_ptr;
  __Pyx_memviewslice pids;
  __pyx_t_5numpy_int64_t *pids_ptr;
  int use_pids;
  __pyx_t_5numpy_intp_t size;
  __pyx_t_5numpy_intp_t max_elements;
};


/* "yt/utilities/lib/bounded_priority_queue.pxd":33
 *     cdef int validate_heap(self) except -1 nogil
 * 
 * cdef class NeighborList:             # <<<<<<<<<<<<<<
 *     cdef public np.float64_t[:] data
 *     cdef np.float64_t* data_ptr
 */
struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList *__pyx_vtab;
  __Pyx_memviewslice data;
  __pyx_t_5numpy_float64_t *data_ptr;
  __Pyx_memviewslice pids;
  __pyx_t_5numpy_int64_t *pids_ptr;
  __pyx_t_5numpy_intp_t size;
  __pyx_t_5numpy_intp_t _max_size;
};


/* "yt/utilities/lib/cykdtree/kdtree.pxd":88
 * 
 * 
 * cdef class PyNode:             # <<<<<<<<<<<<<<
 *     cdef Node *_node
 *     cdef readonly np.uint32_t id
 */
struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode *__pyx_vtab;
  Node *_node;
  __pyx_t_5numpy_uint32_t id;
  __pyx_t_5numpy_uint64_t npts;
  __pyx_t_5numpy_uint32_t ndim;
  __pyx_t_5numpy_uint32_t num_leaves;
  __pyx_t_5numpy_uint64_t start_idx;
  __pyx_t_5numpy_uint64_t stop_idx;
  double *_domain_width;
  PyObject *left_neighbors;
  PyObject *right_neighbors;
};


/* "yt/utilities/lib/cykdtree/kdtree.pxd":101
 *                          double *domain_width)
 * 
 * cdef class PyKDTree:             # <<<<<<<<<<<<<<
 *     cdef KDTree *_tree
 *     cdef readonly uint64_t npts
 */
struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *__pyx_vtab;
  KDTree *_tree;
  uint64_t npts;
  uint32_t ndim;
  uint32_t num_leaves;
  uint32_t leafsize;
  int64_t data_version;
  double *_left_edge;
  double *_right_edge;
  bool *_periodic;
  PyObject *leaves;
  PyObject *_idx;
};


/* "yt/utilities/lib/pixelization_routines.pyx":979
 * kernel_tables = {}
 * 
 * cdef class SPHKernelInterpolationTable:             # <<<<<<<<<<<<<<
 *     cdef public object kernel_name
 *     cdef kernel_func kernel
 */
struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable {
  PyObject_HEAD
  struct __pyx_vtabstruct_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_vtab;
  PyObject *kernel_name;
  __pyx_t_2yt_8geometry_16particle_deposit_kernel_func kernel;
  __Pyx_memviewslice table;
  __Pyx_memviewslice q2_vals;
  __pyx_t_5numpy_float64_t q2_range;
  __pyx_t_5numpy_float64_t iq2_range;
};


/* "View.MemoryView":106
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":280
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":331
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":967
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "View.MemoryView":106
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "oct_visitors.pxd":33
 *     np.int64_t padding
 * 
 * cdef class OctVisitor:             # <<<<<<<<<<<<<<
 *     cdef np.uint64_t index
 *     cdef np.uint64_t last
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor {
  void (*visit)(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_uint8_t);
  int (*oind)(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *);
  int (*rind)(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *);
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor *__pyx_vtabptr_2yt_8geometry_12oct_visitors_OctVisitor;
static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_10OctVisitor_oind(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *);
static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_10OctVisitor_rind(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *);


/* "oct_visitors.pxd":59
 *         return (((self.ind[2]*d)+self.ind[1])*d+self.ind[0])
 * 
 * cdef class CountTotalOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountTotalOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountTotalOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_CountTotalOcts;


/* "oct_visitors.pxd":62
 *     pass
 * 
 * cdef class CountTotalCells(OctVisitor):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountTotalCells {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountTotalCells *__pyx_vtabptr_2yt_8geometry_12oct_visitors_CountTotalCells;


/* "oct_visitors.pxd":65
 *     pass
 * 
 * cdef class MarkOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     # Unused
 *     cdef np.uint8_t[:,:,:,:] mark
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MarkOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MarkOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_MarkOcts;


/* "oct_visitors.pxd":69
 *     cdef np.uint8_t[:,:,:,:] mark
 * 
 * cdef class MaskOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:,:,:,:] mask
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MaskOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MaskOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_MaskOcts;


/* "oct_visitors.pxd":72
 *     cdef np.uint8_t[:,:,:,:] mask
 * 
 * cdef class IndexOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] oct_index
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IndexOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IndexOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_IndexOcts;


/* "oct_visitors.pxd":75
 *     cdef np.int64_t[:] oct_index
 * 
 * cdef class MaskedIndexOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] oct_index
 *     cdef np.uint8_t[:] oct_mask
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MaskedIndexOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MaskedIndexOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_MaskedIndexOcts;


/* "oct_visitors.pxd":79
 *     cdef np.uint8_t[:] oct_mask
 * 
 * cdef class IndexMaskMapOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] oct_index
 *     cdef np.uint8_t[:] oct_mask
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IndexMaskMapOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IndexMaskMapOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_IndexMaskMapOcts;


/* "oct_visitors.pxd":85
 *     cdef np.uint64_t map_index
 * 
 * cdef class ICoordsOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:,:] icoords
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_ICoordsOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_ICoordsOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_ICoordsOcts;


/* "oct_visitors.pxd":88
 *     cdef np.int64_t[:,:] icoords
 * 
 * cdef class IResOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] ires
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IResOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IResOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_IResOcts;


/* "oct_visitors.pxd":91
 *     cdef np.int64_t[:] ires
 * 
 * cdef class FCoordsOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:,:] fcoords
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FCoordsOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FCoordsOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_FCoordsOcts;


/* "oct_visitors.pxd":94
 *     cdef np.float64_t[:,:] fcoords
 * 
 * cdef class FWidthOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:,:] fwidth
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FWidthOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FWidthOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_FWidthOcts;


/* "oct_visitors.pxd":97
 *     cdef np.float64_t[:,:] fwidth
 * 
 * cdef class CopyArrayI64(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:,:,:,:,:,:] source
 *     cdef np.int64_t[:,:] dest
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyArrayI64 {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyArrayI64 *__pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyArrayI64;


/* "oct_visitors.pxd":101
 *     cdef np.int64_t[:,:] dest
 * 
 * cdef class CopyArrayF64(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:,:,:,:,:] source
 *     cdef np.float64_t[:,:] dest
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyArrayF64 {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyArrayF64 *__pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyArrayF64;


/* "oct_visitors.pxd":105
 *     cdef np.float64_t[:,:] dest
 * 
 * cdef class CopyFileIndArrayI8(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t root
 *     cdef np.uint8_t[:] source
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8 {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8 *__pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8;


/* "oct_visitors.pxd":110
 *     cdef np.uint8_t[:] dest
 * 
 * cdef class IdentifyOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] domain_mask
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IdentifyOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IdentifyOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_IdentifyOcts;


/* "oct_visitors.pxd":113
 *     cdef np.uint8_t[:] domain_mask
 * 
 * cdef class AssignDomainInd(OctVisitor):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_AssignDomainInd {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_AssignDomainInd *__pyx_vtabptr_2yt_8geometry_12oct_visitors_AssignDomainInd;


/* "oct_visitors.pxd":116
 *     pass
 * 
 * cdef class FillFileIndicesO(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] levels
 *     cdef np.int64_t[:] file_inds
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FillFileIndicesO {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FillFileIndicesO *__pyx_vtabptr_2yt_8geometry_12oct_visitors_FillFileIndicesO;


/* "oct_visitors.pxd":121
 *     cdef np.uint8_t[:] cell_inds
 * 
 * cdef class FillFileIndicesR(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] levels
 *     cdef np.int64_t[:] file_inds
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FillFileIndicesR {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FillFileIndicesR *__pyx_vtabptr_2yt_8geometry_12oct_visitors_FillFileIndicesR;


/* "oct_visitors.pxd":126
 *     cdef np.uint8_t[:] cell_inds
 * 
 * cdef class CountByDomain(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:] domain_counts
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountByDomain {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountByDomain *__pyx_vtabptr_2yt_8geometry_12oct_visitors_CountByDomain;


/* "oct_visitors.pxd":129
 *     cdef np.int64_t[:] domain_counts
 * 
 * cdef class StoreOctree(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] ref_mask
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_StoreOctree {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_StoreOctree *__pyx_vtabptr_2yt_8geometry_12oct_visitors_StoreOctree;


/* "oct_visitors.pxd":132
 *     cdef np.uint8_t[:] ref_mask
 * 
 * cdef class LoadOctree(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] ref_mask
 *     cdef Oct* octs
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_LoadOctree {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_LoadOctree *__pyx_vtabptr_2yt_8geometry_12oct_visitors_LoadOctree;


/* "oct_visitors.pxd":139
 *     cdef np.uint64_t max_level
 * 
 * cdef class MortonIndexOcts(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[:] level_arr
 *     cdef np.uint64_t[:] morton_ind
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MortonIndexOcts {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MortonIndexOcts *__pyx_vtabptr_2yt_8geometry_12oct_visitors_MortonIndexOcts;


/* "oct_visitors.pxd":150
 * 
 * 
 * cdef class StoreIndex(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.int64_t[:,:,:,:] cell_inds
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_StoreIndex {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_StoreIndex *__pyx_vtabptr_2yt_8geometry_12oct_visitors_StoreIndex;


/* "oct_visitors.pxd":154
 * 
 * # cimport oct_container
 * cdef class BaseNeighbourVisitor(OctVisitor):             # <<<<<<<<<<<<<<
 *     cdef int idim      # 0,1,2 for x,y,z
 *     cdef int direction # +1 for +x, -1 for -x
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor __pyx_base;
  void (*set_neighbour_info)(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, int *);
  __pyx_t_5numpy_uint8_t (*neighbour_rind)(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor *);
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor *__pyx_vtabptr_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor;
static CYTHON_INLINE __pyx_t_5numpy_uint8_t __pyx_f_2yt_8geometry_12oct_visitors_20BaseNeighbourVisitor_neighbour_rind(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor *);


/* "oct_visitors.pxd":170
 *         return (((self.neigh_ind[2]*d)+self.neigh_ind[1])*d+self.neigh_ind[0])
 * 
 * cdef class NeighbourCellIndexVisitor(BaseNeighbourVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[::1] cell_inds
 *     cdef np.int64_t[::1] domain_inds
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor *__pyx_vtabptr_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor;


/* "oct_visitors.pxd":174
 *     cdef np.int64_t[::1] domain_inds
 * 
 * cdef class NeighbourCellVisitor(BaseNeighbourVisitor):             # <<<<<<<<<<<<<<
 *     cdef np.uint8_t[::1] levels
 *     cdef np.int64_t[::1] file_inds
 */

struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_NeighbourCellVisitor {
  struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_NeighbourCellVisitor *__pyx_vtabptr_2yt_8geometry_12oct_visitors_NeighbourCellVisitor;


/* "selection_routines.pxd":25
 * 
 * 
 * cdef class SelectorObject:             # <<<<<<<<<<<<<<
 *     cdef public np.int32_t min_level
 *     cdef public np.int32_t max_level
 */

struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject {
  void (*recursively_visit_octs)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int, struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *, struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_recursively_visit_octs *__pyx_optional_args);
  void (*visit_oct_cells)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *, int, int, int);
  int (*select_grid)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_int32_t, struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_select_grid *__pyx_optional_args);
  int (*select_grid_edge)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_int32_t, struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_select_grid_edge *__pyx_optional_args);
  int (*select_cell)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *);
  int (*select_point)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *);
  int (*select_sphere)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t);
  int (*select_bbox)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *);
  int (*select_bbox_edge)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *);
  int (*fill_mask_selector_regular_grid)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, int *, PyArrayObject *, PyArrayObject *, int);
  int (*fill_mask_selector)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t **, int *, PyArrayObject *, PyArrayObject *, int);
  void (*visit_grid_cells)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, struct __pyx_t_2yt_8geometry_13grid_visitors_GridVisitorData *, __pyx_t_2yt_8geometry_13grid_visitors_grid_visitor_function *, struct __pyx_opt_args_2yt_8geometry_18selection_routines_14SelectorObject_visit_grid_cells *__pyx_optional_args);
  __pyx_t_5numpy_float64_t (*periodic_difference)(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, int);
};
static struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject *__pyx_vtabptr_2yt_8geometry_18selection_routines_SelectorObject;


/* "selection_routines.pxd":77
 *         self, np.float64_t x1, np.float64_t x2, int d) nogil
 * 
 * cdef class AlwaysSelector(SelectorObject):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_AlwaysSelector {
  struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_AlwaysSelector *__pyx_vtabptr_2yt_8geometry_18selection_routines_AlwaysSelector;


/* "selection_routines.pxd":80
 *     pass
 * 
 * cdef class OctreeSubsetSelector(SelectorObject):             # <<<<<<<<<<<<<<
 *     cdef public SelectorObject base_selector
 *     cdef public np.int64_t domain_id
 */

struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_OctreeSubsetSelector {
  struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_OctreeSubsetSelector *__pyx_vtabptr_2yt_8geometry_18selection_routines_OctreeSubsetSelector;


/* "selection_routines.pxd":84
 *     cdef public np.int64_t domain_id
 * 
 * cdef class BooleanSelector(SelectorObject):             # <<<<<<<<<<<<<<
 *     cdef public SelectorObject sel1
 *     cdef public SelectorObject sel2
 */

struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_BooleanSelector {
  struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_BooleanSelector *__pyx_vtabptr_2yt_8geometry_18selection_routines_BooleanSelector;


/* "yt/utilities/lib/allocation_container.pxd":20
 *     void *my_objs
 * 
 * cdef class ObjectPool:             # <<<<<<<<<<<<<<
 *     cdef public np.uint64_t itemsize
 *     cdef np.uint64_t n_con
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_20allocation_container_ObjectPool {
  void (*allocate_objs)(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool *, int, struct __pyx_opt_args_2yt_9utilities_3lib_20allocation_container_10ObjectPool_allocate_objs *__pyx_optional_args);
  void (*setup_objs)(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool *, void *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_int64_t);
  void (*teardown_objs)(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool *, void *, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_int64_t);
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_20allocation_container_ObjectPool *__pyx_vtabptr_2yt_9utilities_3lib_20allocation_container_ObjectPool;


/* "oct_container.pxd":46
 *     Oct *my_objs
 * 
 * cdef class OctObjectPool(ObjectPool):             # <<<<<<<<<<<<<<
 *     cdef inline OctAllocationContainer *get_cont(self, int i):
 *         return <OctAllocationContainer*> (&self.containers[i])
 */

struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctObjectPool {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_20allocation_container_ObjectPool __pyx_base;
  struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer *(*get_cont)(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool *, int);
};
static struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctObjectPool *__pyx_vtabptr_2yt_8geometry_13oct_container_OctObjectPool;
static CYTHON_INLINE struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer *__pyx_f_2yt_8geometry_13oct_container_13OctObjectPool_get_cont(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool *, int);


/* "oct_container.pxd":54
 * cdef void OctList_delete(OctList *list)
 * 
 * cdef class OctreeContainer:             # <<<<<<<<<<<<<<
 *     cdef public OctObjectPool domains
 *     cdef Oct ****root_mesh
 */

struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctreeContainer {
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*get)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, __pyx_t_5numpy_float64_t *, struct __pyx_opt_args_2yt_8geometry_13oct_container_15OctreeContainer_get *__pyx_optional_args);
  int (*get_root)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, int *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct **);
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct **(*neighbors)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, struct __pyx_t_2yt_8geometry_12oct_visitors_OctInfo *, __pyx_t_5numpy_int64_t *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *, int *);
  __pyx_t_5numpy_int64_t (*get_domain_offset)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, int);
  void (*visit_all_octs)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject *, struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *, struct __pyx_opt_args_2yt_8geometry_13oct_container_15OctreeContainer_visit_all_octs *__pyx_optional_args);
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*next_root)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, int, int *);
  struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *(*next_child)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, int, int *, struct __pyx_t_2yt_8geometry_12oct_visitors_Oct *);
  void (*append_domain)(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer *, __pyx_t_5numpy_int64_t);
};
static struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctreeContainer *__pyx_vtabptr_2yt_8geometry_13oct_container_OctreeContainer;


/* "oct_container.pxd":85
 *     cdef public int max_level
 * 
 * cdef class SparseOctreeContainer(OctreeContainer):             # <<<<<<<<<<<<<<
 *     cdef OctKey *root_nodes
 *     cdef void *tree_root
 */

struct __pyx_vtabstruct_2yt_8geometry_13oct_container_SparseOctreeContainer {
  struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctreeContainer __pyx_base;
  void (*key_to_ipos)(struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer *, __pyx_t_5numpy_int64_t, __pyx_t_5numpy_int64_t *);
  __pyx_t_5numpy_int64_t (*ipos_to_key)(struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer *, int *);
};
static struct __pyx_vtabstruct_2yt_8geometry_13oct_container_SparseOctreeContainer *__pyx_vtabptr_2yt_8geometry_13oct_container_SparseOctreeContainer;


/* "oct_container.pxd":93
 *     cdef np.int64_t ipos_to_key(self, int pos[3]) nogil
 * 
 * cdef class RAMSESOctreeContainer(SparseOctreeContainer):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_2yt_8geometry_13oct_container_RAMSESOctreeContainer {
  struct __pyx_vtabstruct_2yt_8geometry_13oct_container_SparseOctreeContainer __pyx_base;
};
static struct __pyx_vtabstruct_2yt_8geometry_13oct_container_RAMSESOctreeContainer *__pyx_vtabptr_2yt_8geometry_13oct_container_RAMSESOctreeContainer;


/* "yt/geometry/particle_deposit.pxd":139
 *             raise NotImplementedError
 * 
 * cdef class ParticleDepositOperation:             # <<<<<<<<<<<<<<
 *     # We assume each will allocate and define their own temporary storage
 *     cdef kernel_func sph_kernel
 */

struct __pyx_vtabstruct_2yt_8geometry_16particle_deposit_ParticleDepositOperation {
  int (*process)(struct __pyx_obj_2yt_8geometry_16particle_deposit_ParticleDepositOperation *, int *, int, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_int64_t, __pyx_t_5numpy_float64_t *, __Pyx_memviewslice, __pyx_t_5numpy_int64_t);
};
static struct __pyx_vtabstruct_2yt_8geometry_16particle_deposit_ParticleDepositOperation *__pyx_vtabptr_2yt_8geometry_16particle_deposit_ParticleDepositOperation;


/* "yt/utilities/lib/element_mappings.pxd":10
 * 
 * 
 * cdef class ElementSampler:             # <<<<<<<<<<<<<<
 * 
 *     # how close a point has to be to the element
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler {
  void (*map_real_to_unit)(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *, double *, double *, double *);
  double (*sample_at_unit_point)(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *, double *, double *);
  double (*sample_at_real_point)(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *, double *, double *, double *);
  int (*check_inside)(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *, double *);
  int (*check_mesh_lines)(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *, double *);
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler *__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_ElementSampler;


/* "yt/utilities/lib/element_mappings.pxd":39
 * 
 * 
 * cdef class P1Sampler1D(ElementSampler):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_P1Sampler1D {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler __pyx_base;
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_P1Sampler1D *__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_P1Sampler1D;


/* "yt/utilities/lib/element_mappings.pxd":54
 * 
 * 
 * cdef class P1Sampler2D(ElementSampler):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_P1Sampler2D {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler __pyx_base;
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_P1Sampler2D *__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_P1Sampler2D;


/* "yt/utilities/lib/element_mappings.pxd":69
 * 
 * 
 * cdef class P1Sampler3D(ElementSampler):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_P1Sampler3D {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler __pyx_base;
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_P1Sampler3D *__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_P1Sampler3D;


/* "yt/utilities/lib/element_mappings.pxd":148
 * 
 * 
 * cdef class NonlinearSolveSampler3D(ElementSampler):             # <<<<<<<<<<<<<<
 * 
 *     cdef int dim
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler __pyx_base;
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D *__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D;


/* "yt/utilities/lib/element_mappings.pxd":162
 * 
 * 
 * cdef class Q1Sampler3D(NonlinearSolveSampler3D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D __pyx_base;
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D *__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D;


/* "yt/utilities/lib/element_mappings.pxd":179
 * 
 * 
 * cdef class W1Sampler3D(NonlinearSolveSampler3D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_W1Sampler3D {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D __pyx_base;
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_W1Sampler3D *__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_W1Sampler3D;


/* "yt/utilities/lib/element_mappings.pxd":197
 * 
 * 
 * cdef class S2Sampler3D(NonlinearSolveSampler3D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_S2Sampler3D {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D __pyx_base;
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_S2Sampler3D *__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_S2Sampler3D;


/* "yt/utilities/lib/element_mappings.pxd":215
 * 
 * 
 * cdef class NonlinearSolveSampler2D(ElementSampler):             # <<<<<<<<<<<<<<
 * 
 *     cdef int dim
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler __pyx_base;
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D *__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D;


/* "yt/utilities/lib/element_mappings.pxd":229
 * 
 * 
 * cdef class Q1Sampler2D(NonlinearSolveSampler2D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D __pyx_base;
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D *__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D;


/* "yt/utilities/lib/element_mappings.pxd":244
 * 
 * 
 * cdef class Q2Sampler2D(NonlinearSolveSampler2D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D __pyx_base;
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D *__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D;


/* "yt/utilities/lib/element_mappings.pxd":259
 * 
 * 
 * cdef class T2Sampler2D(NonlinearSolveSampler2D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_T2Sampler2D {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D __pyx_base;
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_T2Sampler2D *__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_T2Sampler2D;


/* "yt/utilities/lib/element_mappings.pxd":273
 *     cdef int check_inside(self, double* mapped_coord) nogil
 * 
 * cdef class Tet2Sampler3D(NonlinearSolveSampler3D):             # <<<<<<<<<<<<<<
 * 
 *     cdef void map_real_to_unit(self,
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D {
  struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D __pyx_base;
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D *__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D;


/* "yt/utilities/lib/bounded_priority_queue.pxd":15
 * 
 * 
 * cdef class BoundedPriorityQueue:             # <<<<<<<<<<<<<<
 *     cdef public np.float64_t[:] heap
 *     cdef np.float64_t* heap_ptr
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue {
  int (*max_heapify)(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *, __pyx_t_5numpy_intp_t);
  int (*propagate_up)(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *, __pyx_t_5numpy_intp_t);
  int (*add)(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *, __pyx_t_5numpy_float64_t);
  int (*add_pid)(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_int64_t);
  int (*heap_append)(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_int64_t);
  __pyx_t_5numpy_float64_t (*extract_max)(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *);
  int (*validate_heap)(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *);
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *__pyx_vtabptr_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue;


/* "yt/utilities/lib/bounded_priority_queue.pxd":33
 *     cdef int validate_heap(self) except -1 nogil
 * 
 * cdef class NeighborList:             # <<<<<<<<<<<<<<
 *     cdef public np.float64_t[:] data
 *     cdef np.float64_t* data_ptr
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList {
  int (*_update_memview)(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList *);
  int (*_extend)(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList *);
  int (*add_pid)(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList *, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_int64_t);
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList *__pyx_vtabptr_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList;


/* "yt/utilities/lib/cykdtree/kdtree.pxd":88
 * 
 * 
 * cdef class PyNode:             # <<<<<<<<<<<<<<
 *     cdef Node *_node
 *     cdef readonly np.uint32_t id
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode {
  void (*_init_node)(struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode *, Node *, uint32_t, double *);
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode *__pyx_vtabptr_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode;


/* "yt/utilities/lib/cykdtree/kdtree.pxd":101
 *                          double *domain_width)
 * 
 * cdef class PyKDTree:             # <<<<<<<<<<<<<<
 *     cdef KDTree *_tree
 *     cdef readonly uint64_t npts
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree {
  void (*_init_tree)(struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *, KDTree *);
  void (*_make_tree)(struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *, double *, bool);
  void (*_make_leaves)(struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *);
  PyArrayObject *(*_get_neighbor_ids)(struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *, PyArrayObject *);
  PyArrayObject *(*_get_neighbor_ids_3)(struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *, __pyx_t_5numpy_float64_t *);
  struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode *(*_get)(struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *, PyArrayObject *);
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *__pyx_vtabptr_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree;


/* "yt/utilities/lib/pixelization_routines.pyx":979
 * kernel_tables = {}
 * 
 * cdef class SPHKernelInterpolationTable:             # <<<<<<<<<<<<<<
 *     cdef public object kernel_name
 *     cdef kernel_func kernel
 */

struct __pyx_vtabstruct_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable {
  __pyx_t_5numpy_float64_t (*integrate_q2)(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *, __pyx_t_5numpy_float64_t);
  __pyx_t_5numpy_float64_t (*interpolate)(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *, __pyx_t_5numpy_float64_t);
};
static struct __pyx_vtabstruct_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_vtabptr_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable;
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_interpolate(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *, __pyx_t_5numpy_float64_t);


/* "View.MemoryView":331
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":967
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* UnicodeAsUCS4.proto */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject*);

/* object_ord.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyObject_Ord(c)\
    (likely(PyUnicode_Check(c)) ? (long)__Pyx_PyUnicode_AsPy_UCS4(c) : __Pyx__PyObject_Ord(c))
#else
#define __Pyx_PyObject_Ord(c) __Pyx__PyObject_Ord(c)
#endif
static long __Pyx__PyObject_Ord(PyObject* c);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_TrueDivideObjC(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* IncludeStringH.proto */
#include <string.h>

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

#define __Pyx_BufPtrStrided3d(type, buf, i0, s0, i1, s1, i2, s2) (type)((char*)buf + i0 * s0 + i1 * s1 + i2 * s2)
/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* None.proto */
static void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname);

/* DivInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* ModInt[long].proto */
static CYTHON_INLINE long __Pyx_mod_long(long, long);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* AssertionsEnabled.proto */
#define __Pyx_init_assertions_enabled()
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define __pyx_assertions_enabled() (1)
#elif PY_VERSION_HEX < 0x03080000  ||  CYTHON_COMPILING_IN_PYPY  ||  defined(Py_LIMITED_API)
  #define __pyx_assertions_enabled() (!Py_OptimizeFlag)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030900A6
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  #undef __Pyx_init_assertions_enabled
  static void __Pyx_init_assertions_enabled(void) {
    __pyx_assertions_enabled_flag = ! _PyInterpreterState_GetConfig(__Pyx_PyThreadState_Current->interp)->optimization_level;
  }
#else
  #define __pyx_assertions_enabled() (!Py_OptimizeFlag)
#endif

/* DivInt[long].proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_0_29_36
#define __PYX_HAVE_RT_ImportType_proto_0_29_36
#if __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_36(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_0_29_36(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_0_29_36 {
   __Pyx_ImportType_CheckSize_Error_0_29_36 = 0,
   __Pyx_ImportType_CheckSize_Warn_0_29_36 = 1,
   __Pyx_ImportType_CheckSize_Ignore_0_29_36 = 2
};
static PyTypeObject *__Pyx_ImportType_0_29_36(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_36 check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED 1
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_Check(obj)  (__Pyx_TypeCheck(obj, __pyx_CyFunctionType))
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* FusedFunction.proto */
typedef struct {
    __pyx_CyFunctionObject func;
    PyObject *__signatures__;
    PyObject *type;
    PyObject *self;
} __pyx_FusedFunctionObject;
static PyObject *__pyx_FusedFunction_New(PyMethodDef *ml, int flags,
                                         PyObject *qualname, PyObject *closure,
                                         PyObject *module, PyObject *globals,
                                         PyObject *code);
static int __pyx_FusedFunction_clear(__pyx_FusedFunctionObject *self);
static PyTypeObject *__pyx_FusedFunctionType = NULL;
static int __pyx_FusedFunction_init(void);
#define __Pyx_FusedFunction_USED

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(PyObject *, int writable_flag);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int_t(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_d_dc_nn___pyx_t_5numpy_float64_t(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_nn___pyx_t_5numpy_float64_t(PyObject *, int writable_flag);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_5numpy_float64_t(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_5numpy_float64_t(const char *itemp, PyObject *obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dc_nn___pyx_t_5numpy_float64_t(PyObject *, int writable_flag);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_uint8(npy_uint8 value);

/* CIntFromPy.proto */
static CYTHON_INLINE npy_int64 __Pyx_PyInt_As_npy_int64(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int64(npy_int64 value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE npy_uint64 __Pyx_PyInt_As_npy_uint64(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE npy_uint32 __Pyx_PyInt_As_npy_uint32(PyObject *);

/* BytesContains.proto */
static CYTHON_INLINE int __Pyx_BytesContains(PyObject* bytes, char character);

/* ImportNumPyArray.proto */
static PyObject *__pyx_numpy_ndarray = NULL;
static PyObject* __Pyx_ImportNumPyArrayTypeIfAvailable(void);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr_0_29_36(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_0_29_36(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_integrate_q2(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self, __pyx_t_5numpy_float64_t __pyx_v_q2); /* proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_interpolate(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self, __pyx_t_5numpy_float64_t __pyx_v_q2); /* proto*/
static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_10OctVisitor_oind(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_10OctVisitor_rind(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *__pyx_v_self); /* proto*/
static CYTHON_INLINE __pyx_t_5numpy_uint8_t __pyx_f_2yt_8geometry_12oct_visitors_20BaseNeighbourVisitor_neighbour_rind(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor *__pyx_v_self); /* proto*/
static CYTHON_INLINE struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer *__pyx_f_2yt_8geometry_13oct_container_13OctObjectPool_get_cont(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool *__pyx_v_self, int __pyx_v_i); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'cython.view' */

/* Module declarations from 'cython' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'yt.utilities.lib.fp_utils' */
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_fabs(__pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip(__pyx_t_5numpy_int64_t, __pyx_t_5numpy_int64_t, __pyx_t_5numpy_int64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_i64max(__pyx_t_5numpy_int64_t, __pyx_t_5numpy_int64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_i64min(__pyx_t_5numpy_int64_t, __pyx_t_5numpy_int64_t); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_2yt_9utilities_3lib_8fp_utils__ensure_code(PyObject *); /*proto*/

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy.math' */

/* Module declarations from 'yt.geometry' */

/* Module declarations from 'yt.geometry.oct_visitors' */
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_OctVisitor = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalOcts = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalCells = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_MarkOcts = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_MaskOcts = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_IndexOcts = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_MaskedIndexOcts = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_IndexMaskMapOcts = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_ICoordsOcts = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_IResOcts = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_FCoordsOcts = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_FWidthOcts = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayI64 = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayF64 = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8 = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_IdentifyOcts = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_AssignDomainInd = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesO = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesR = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_CountByDomain = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_StoreOctree = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_LoadOctree = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_MortonIndexOcts = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_StoreIndex = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellVisitor = 0;
static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_cind(int, int, int); /*proto*/

/* Module declarations from 'yt.geometry.grid_visitors' */
static __pyx_t_5numpy_uint8_t (*__pyx_f_2yt_8geometry_13grid_visitors_check_child_masked)(struct __pyx_t_2yt_8geometry_13grid_visitors_GridVisitorData *); /*proto*/

/* Module declarations from 'libc.float' */

/* Module declarations from 'yt.utilities.lib.geometry_utils' */
static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_ifrexp(__pyx_t_5numpy_float64_t, __pyx_t_5numpy_int64_t *); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_msdb(__pyx_t_5numpy_int64_t, __pyx_t_5numpy_int64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_xor_msb(__pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_64bits_by2(__pyx_t_5numpy_uint64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_compact_64bits_by2(__pyx_t_5numpy_uint64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t); /*proto*/
static CYTHON_INLINE void __pyx_f_2yt_9utilities_3lib_14geometry_utils_decode_morton_64bit(__pyx_t_5numpy_uint64_t, __pyx_t_5numpy_uint64_t *); /*proto*/

/* Module declarations from 'yt.geometry.selection_routines' */
static PyTypeObject *__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_18selection_routines_OctreeSubsetSelector = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_18selection_routines_BooleanSelector = 0;

/* Module declarations from 'yt.utilities.lib.allocation_container' */
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_20allocation_container_ObjectPool = 0;

/* Module declarations from 'yt.geometry.oct_container' */
static PyTypeObject *__pyx_ptype_2yt_8geometry_13oct_container_OctObjectPool = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer = 0;
static PyTypeObject *__pyx_ptype_2yt_8geometry_13oct_container_RAMSESOctreeContainer = 0;
static int *__pyx_vp_2yt_8geometry_13oct_container_ORDER_MAX = 0;
#define __pyx_v_2yt_8geometry_13oct_container_ORDER_MAX (*__pyx_vp_2yt_8geometry_13oct_container_ORDER_MAX)

/* Module declarations from 'yt.geometry.particle_deposit' */
static PyTypeObject *__pyx_ptype_2yt_8geometry_16particle_deposit_ParticleDepositOperation = 0;
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_cubic(__pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_quartic(__pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_quintic(__pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_wendland2(__pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_wendland4(__pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_wendland6(__pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_dummy(__pyx_t_5numpy_float64_t); /*proto*/
static CYTHON_INLINE __pyx_t_2yt_8geometry_16particle_deposit_kernel_func __pyx_f_2yt_8geometry_16particle_deposit_get_kernel_func(PyObject *); /*proto*/

/* Module declarations from 'yt.utilities.lib.element_mappings' */
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_16element_mappings_ElementSampler = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler1D = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler2D = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler3D = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_16element_mappings_W1Sampler3D = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_16element_mappings_S2Sampler3D = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_16element_mappings_T2Sampler2D = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D = 0;

/* Module declarations from 'yt.utilities.lib.vec3_ops' */
static CYTHON_INLINE double __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_dot(double *, double *); /*proto*/
static CYTHON_INLINE void __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_cross(double *, double *, double *); /*proto*/
static CYTHON_INLINE void __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_subtract(double *, double *, double *); /*proto*/

/* Module declarations from 'yt.utilities.lib.bounded_priority_queue' */
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList = 0;

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'yt.utilities.lib.cykdtree.kdtree' */
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode = 0;
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree = 0;

/* Module declarations from 'yt.utilities.lib.particle_kdtree_tools' */
static int (*__pyx_f_2yt_9utilities_3lib_21particle_kdtree_tools_set_axes_range)(struct __pyx_t_2yt_9utilities_3lib_21particle_kdtree_tools_axes_range *, int); /*proto*/
static int (*__pyx_f_2yt_9utilities_3lib_21particle_kdtree_tools_find_neighbors)(__pyx_t_5numpy_float64_t *, __Pyx_memviewslice, struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *, KDTree *, uint64_t, struct __pyx_t_2yt_9utilities_3lib_21particle_kdtree_tools_axes_range *); /*proto*/

/* Module declarations from 'yt.utilities.lib.pixelization_routines' */
static PyTypeObject *__pyx_ptype_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static int __pyx_v_2yt_9utilities_3lib_21pixelization_routines_TABLE_NVALS;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static int __pyx_f_2yt_9utilities_3lib_21pixelization_routines_aitoff_Lambda_btheta_to_xy(__pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t, __pyx_t_5numpy_float64_t *, __pyx_t_5numpy_float64_t *); /*proto*/
static __Pyx_memviewslice __pyx_f_2yt_9utilities_3lib_21pixelization_routines_rotation_matmul(__Pyx_memviewslice, __Pyx_memviewslice); /*proto*/
static __Pyx_memviewslice __pyx_f_2yt_9utilities_3lib_21pixelization_routines_get_rotation_matrix(__Pyx_memviewslice, __Pyx_memviewslice, int __pyx_skip_dispatch); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t = { "int64_t", NULL, sizeof(__pyx_t_5numpy_int64_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int64_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int64_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t = { "float64_t", NULL, sizeof(__pyx_t_5numpy_float64_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t = { "float32_t", NULL, sizeof(__pyx_t_5numpy_float32_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int_t = { "int_t", NULL, sizeof(__pyx_t_5numpy_int_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int_t), 0 };
#define __Pyx_MODULE_NAME "yt.utilities.lib.pixelization_routines"
extern int __pyx_module_is_main_yt__utilities__lib__pixelization_routines;
int __pyx_module_is_main_yt__utilities__lib__pixelization_routines = 0;

/* Implementation of 'yt.utilities.lib.pixelization_routines' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_[] = "()";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k_LE[] = "LE";
static const char __pyx_k_PI[] = "PI";
static const char __pyx_k_RE[] = "RE";
static const char __pyx_k__2[] = "|";
static const char __pyx_k_ci[] = "ci";
static const char __pyx_k_cj[] = "cj";
static const char __pyx_k_cx[] = "cx";
static const char __pyx_k_cy[] = "cy";
static const char __pyx_k_cz[] = "cz";
static const char __pyx_k_dx[] = "dx";
static const char __pyx_k_dy[] = "dy";
static const char __pyx_k_dz[] = "dz";
static const char __pyx_k_fi[] = "fi";
static const char __pyx_k_i1[] = "i1";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_ii[] = "ii";
static const char __pyx_k_ip[] = "ip";
static const char __pyx_k_jj[] = "jj";
static const char __pyx_k_kk[] = "kk";
static const char __pyx_k_lc[] = "lc";
static const char __pyx_k_lr[] = "lr";
static const char __pyx_k_md[] = "md";
static const char __pyx_k_nf[] = "nf";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_pi[] = "pi";
static const char __pyx_k_pj[] = "pj";
static const char __pyx_k_pk[] = "pk";
static const char __pyx_k_px[] = "px";
static const char __pyx_k_py[] = "py";
static const char __pyx_k_pz[] = "pz";
static const char __pyx_k_r0[] = "r0";
static const char __pyx_k_rc[] = "rc";
static const char __pyx_k_rr[] = "rr";
static const char __pyx_k_s2[] = "s2";
static const char __pyx_k_x0[] = "x0";
static const char __pyx_k_x1[] = "x1";
static const char __pyx_k_xi[] = "xi";
static const char __pyx_k_xp[] = "xp";
static const char __pyx_k_xw[] = "xw";
static const char __pyx_k_y0[] = "y0";
static const char __pyx_k_y1[] = "y1";
static const char __pyx_k_yi[] = "yi";
static const char __pyx_k_yp[] = "yp";
static const char __pyx_k_yw[] = "yw";
static const char __pyx_k_z0[] = "z0";
static const char __pyx_k_z1[] = "z1";
static const char __pyx_k_zb[] = "zb";
static const char __pyx_k_zi[] = "zi";
static const char __pyx_k_dds[] = "dds";
static const char __pyx_k_den[] = "den";
static const char __pyx_k_dot[] = "dot";
static const char __pyx_k_dsp[] = "dsp";
static const char __pyx_k_h_j[] = "h_j";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_idy[] = "idy";
static const char __pyx_k_idz[] = "idz";
static const char __pyx_k_img[] = "img";
static const char __pyx_k_ind[] = "ind";
static const char __pyx_k_inv[] = "inv";
static const char __pyx_k_nan[] = "nan";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_num[] = "num";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_pLE[] = "pLE";
static const char __pyx_k_pRE[] = "pRE";
static const char __pyx_k_pdx[] = "pdx";
static const char __pyx_k_pdy[] = "pdy";
static const char __pyx_k_pdz[] = "pdz";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_r_i[] = "r_i";
static const char __pyx_k_use[] = "use";
static const char __pyx_k_xsp[] = "xsp";
static const char __pyx_k_xxi[] = "xxi";
static const char __pyx_k_ysp[] = "ysp";
static const char __pyx_k_yyi[] = "yyi";
static const char __pyx_k_zsp[] = "zsp";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_axes[] = "axes";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_buff[] = "buff";
static const char __pyx_k_conn[] = "conn";
static const char __pyx_k_cxpx[] = "cxpx";
static const char __pyx_k_cypx[] = "cypx";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_dr_i[] = "dr_i";
static const char __pyx_k_dxsp[] = "dxsp";
static const char __pyx_k_dysp[] = "dysp";
static const char __pyx_k_dzsp[] = "dzsp";
static const char __pyx_k_h_j2[] = "h_j2";
static const char __pyx_k_h_j3[] = "h_j3";
static const char __pyx_k_hsml[] = "hsml";
static const char __pyx_k_idds[] = "idds";
static const char __pyx_k_ih_j[] = "ih_j";
static const char __pyx_k_imax[] = "imax";
static const char __pyx_k_imin[] = "imin";
static const char __pyx_k_itab[] = "itab";
static const char __pyx_k_kind[] = "kind";
static const char __pyx_k_ld_x[] = "ld_x";
static const char __pyx_k_ld_y[] = "ld_y";
static const char __pyx_k_lxpx[] = "lxpx";
static const char __pyx_k_lypx[] = "lypx";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mask[] = "mask";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_none[] = "none";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_oxsp[] = "oxsp";
static const char __pyx_k_oysp[] = "oysp";
static const char __pyx_k_ozsp[] = "ozsp";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_pbar[] = "pbar";
static const char __pyx_k_pend[] = "pend";
static const char __pyx_k_posx[] = "posx";
static const char __pyx_k_posy[] = "posy";
static const char __pyx_k_posz[] = "posz";
static const char __pyx_k_prog[] = "prog";
static const char __pyx_k_pxsp[] = "pxsp";
static const char __pyx_k_pysp[] = "pysp";
static const char __pyx_k_q_ij[] = "q_ij";
static const char __pyx_k_rmax[] = "rmax";
static const char __pyx_k_rmin[] = "rmin";
static const char __pyx_k_rtol[] = "rtol";
static const char __pyx_k_rxpx[] = "rxpx";
static const char __pyx_k_rypx[] = "rypx";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_tmax[] = "tmax";
static const char __pyx_k_tmin[] = "tmin";
static const char __pyx_k_xmax[] = "xmax";
static const char __pyx_k_xmin[] = "xmin";
static const char __pyx_k_ymax[] = "ymax";
static const char __pyx_k_ymin[] = "ymin";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_coord[] = "coord";
static const char __pyx_k_cross[] = "cross";
static const char __pyx_k_ctree[] = "ctree";
static const char __pyx_k_cubic[] = "cubic";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_field[] = "field";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_float[] = "float_";
static const char __pyx_k_ih_j2[] = "ih_j2";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_int64[] = "int64";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_pdens[] = "pdens";
static const char __pyx_k_pmass[] = "pmass";
static const char __pyx_k_px_dx[] = "px_dx";
static const char __pyx_k_px_dy[] = "px_dy";
static const char __pyx_k_q_ij2[] = "q_ij2";
static const char __pyx_k_queue[] = "queue";
static const char __pyx_k_r_inc[] = "r_inc";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_strip[] = "strip";
static const char __pyx_k_theta[] = "theta";
static const char __pyx_k_title[] = "title";
static const char __pyx_k_units[] = "units";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_x_max[] = "x_max";
static const char __pyx_k_x_min[] = "x_min";
static const char __pyx_k_xiter[] = "xiter";
static const char __pyx_k_xsize[] = "xsize";
static const char __pyx_k_y_max[] = "y_max";
static const char __pyx_k_y_min[] = "y_min";
static const char __pyx_k_yiter[] = "yiter";
static const char __pyx_k_ysize[] = "ysize";
static const char __pyx_k_z_max[] = "z_max";
static const char __pyx_k_z_min[] = "z_min";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_ziter[] = "ziter";
static const char __pyx_k_zsize[] = "zsize";
static const char __pyx_k_argmax[] = "argmax";
static const char __pyx_k_argmin[] = "argmin";
static const char __pyx_k_bounds[] = "bounds";
static const char __pyx_k_center[] = "center";
static const char __pyx_k_coords[] = "coords";
static const char __pyx_k_dtheta[] = "dtheta";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_ipx_dx[] = "ipx_dx";
static const char __pyx_k_ipx_dy[] = "ipx_dy";
static const char __pyx_k_kdtree[] = "kdtree";
static const char __pyx_k_kernel[] = "kernel";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_linalg[] = "linalg";
static const char __pyx_k_matmul[] = "matmul";
static const char __pyx_k_maxval[] = "maxval";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_period[] = "period";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_ppoint[] = "ppoint";
static const char __pyx_k_pstart[] = "pstart";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_theta0[] = "theta0";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_xiterv[] = "xiterv";
static const char __pyx_k_y_axis[] = "y_axis";
static const char __pyx_k_yiterv[] = "yiterv";
static const char __pyx_k_z_axis[] = "z_axis";
static const char __pyx_k_ziterv[] = "ziterv";
static const char __pyx_k_Lambda0[] = "Lambda0";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_azimuth[] = "azimuth";
static const char __pyx_k_btheta0[] = "btheta0";
static const char __pyx_k_corners[] = "corners";
static const char __pyx_k_dradius[] = "dradius";
static const char __pyx_k_extents[] = "extents";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_inv_mat[] = "inv_mat";
static const char __pyx_k_isclose[] = "isclose";
static const char __pyx_k_lin_inc[] = "lin_inc";
static const char __pyx_k_lin_vec[] = "lin_vec";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_npoints[] = "npoints";
static const char __pyx_k_pos_ptr[] = "pos_ptr";
static const char __pyx_k_quartic[] = "quartic";
static const char __pyx_k_quintic[] = "quintic";
static const char __pyx_k_rbounds[] = "rbounds";
static const char __pyx_k_sampler[] = "sampler";
static const char __pyx_k_theta_i[] = "theta_i";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_Lambda_p[] = "Lambda_p";
static const char __pyx_k_allclose[] = "allclose";
static const char __pyx_k_btheta_p[] = "btheta_p";
static const char __pyx_k_buff_den[] = "buff_den";
static const char __pyx_k_costheta[] = "costheta";
static const char __pyx_k_dazimuth[] = "dazimuth";
static const char __pyx_k_defaults[] = "defaults";
static const char __pyx_k_dtheta_i[] = "dtheta_i";
static const char __pyx_k_get_pbar[] = "get_pbar";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_identity[] = "identity";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_overlap1[] = "overlap1";
static const char __pyx_k_overlap2[] = "overlap2";
static const char __pyx_k_particle[] = "particle";
static const char __pyx_k_period_x[] = "period_x";
static const char __pyx_k_period_y[] = "period_y";
static const char __pyx_k_period_z[] = "period_z";
static const char __pyx_k_prbounds[] = "prbounds";
static const char __pyx_k_ptbounds[] = "ptbounds";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_sintheta[] = "sintheta";
static const char __pyx_k_vertices[] = "vertices";
static const char __pyx_k_yt_funcs[] = "yt.funcs";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_antialias[] = "antialias";
static const char __pyx_k_buff_size[] = "buff_size";
static const char __pyx_k_dLambda_p[] = "dLambda_p";
static const char __pyx_k_dbtheta_p[] = "dbtheta_p";
static const char __pyx_k_end_point[] = "end_point";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_float32_t[] = "float32_t";
static const char __pyx_k_float64_t[] = "float64_t";
static const char __pyx_k_input_img[] = "input_img";
static const char __pyx_k_num_neigh[] = "num_neigh";
static const char __pyx_k_nvertices[] = "nvertices";
static const char __pyx_k_posx_diff[] = "posx_diff";
static const char __pyx_k_posy_diff[] = "posy_diff";
static const char __pyx_k_posz_diff[] = "posz_diff";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_theta_inc[] = "theta_inc";
static const char __pyx_k_wendland2[] = "wendland2";
static const char __pyx_k_wendland4[] = "wendland4";
static const char __pyx_k_wendland6[] = "wendland6";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_arc_length[] = "arc_length";
static const char __pyx_k_colatitude[] = "colatitude";
static const char __pyx_k_field_vals[] = "field_vals";
static const char __pyx_k_inc_length[] = "inc_length";
static const char __pyx_k_lin_length[] = "lin_length";
static const char __pyx_k_line_width[] = "line_width";
static const char __pyx_k_local_buff[] = "local_buff";
static const char __pyx_k_px_rotated[] = "px_rotated";
static const char __pyx_k_py_rotated[] = "py_rotated";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_signatures[] = "signatures";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_code_length[] = "code_length";
static const char __pyx_k_dcolatitude[] = "dcolatitude";
static const char __pyx_k_kernel_name[] = "kernel_name";
static const char __pyx_k_plot_values[] = "plot_values";
static const char __pyx_k_prefactor_j[] = "prefactor_j";
static const char __pyx_k_start_point[] = "start_point";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_check_period[] = "check_period";
static const char __pyx_k_final_vector[] = "final_vector";
static const char __pyx_k_index_offset[] = "index_offset";
static const char __pyx_k_mapped_coord[] = "mapped_coord";
static const char __pyx_k_north_vector[] = "north_vector";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_sample_point[] = "sample_point";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_weight_field[] = "weight_field";
static const char __pyx_k_kernel_tables[] = "kernel_tables";
static const char __pyx_k_normal_vector[] = "normal_vector";
static const char __pyx_k_num_intervals[] = "num_intervals";
static const char __pyx_k_num_particles[] = "num_particles";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_rot_bounds_x0[] = "rot_bounds_x0";
static const char __pyx_k_rot_bounds_x1[] = "rot_bounds_x1";
static const char __pyx_k_rot_bounds_y0[] = "rot_bounds_y0";
static const char __pyx_k_rot_bounds_y1[] = "rot_bounds_y1";
static const char __pyx_k_azimuth_offset[] = "azimuth_offset";
static const char __pyx_k_num_field_vals[] = "num_field_vals";
static const char __pyx_k_num_plot_nodes[] = "num_plot_nodes";
static const char __pyx_k_populate_table[] = "populate_table";
static const char __pyx_k_rotated_center[] = "rotated_center";
static const char __pyx_k_tree_positions[] = "tree_positions";
static const char __pyx_k_weight_field_2[] = "_weight_field";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_YTPixelizeError[] = "YTPixelizeError";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_field_positions[] = "field_positions";
static const char __pyx_k_particle_masses[] = "particle_masses";
static const char __pyx_k_pixelize_aitoff[] = "pixelize_aitoff";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_rotation_matrix[] = "rotation_matrix";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_convert_to_units[] = "convert_to_units";
static const char __pyx_k_projection_array[] = "projection_array";
static const char __pyx_k_colatitude_offset[] = "colatitude_offset";
static const char __pyx_k_coordinate_matrix[] = "coordinate_matrix";
static const char __pyx_k_lin_sample_points[] = "lin_sample_points";
static const char __pyx_k_pixelize_cylinder[] = "pixelize_cylinder";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_smoothing_lengths[] = "smoothing_lengths";
static const char __pyx_k_use_normalization[] = "use_normalization";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_particle_densities[] = "particle_densities";
static const char __pyx_k_pixelize_cartesian[] = "pixelize_cartesian";
static const char __pyx_k_quantity_to_smooth[] = "quantity_to_smooth";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_rotated_coordinates[] = "rotated_coordinates";
static const char __pyx_k_smoothed_quantity_j[] = "smoothed_quantity_j";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_Pixelization_routines[] = "\nPixelization routines\n\n\n\n";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_north_rotation_matrix[] = "north_rotation_matrix";
static const char __pyx_k_pixelize_element_mesh[] = "pixelize_element_mesh";
static const char __pyx_k_rotate_particle_coord[] = "rotate_particle_coord";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_normal_rotation_matrix[] = "normal_rotation_matrix";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_off_axis_projection_SPH[] = "off_axis_projection_SPH";
static const char __pyx_k_yt_utilities_exceptions[] = "yt.utilities.exceptions";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_normalization_1d_utility[] = "normalization_1d_utility";
static const char __pyx_k_normalization_2d_utility[] = "normalization_2d_utility";
static const char __pyx_k_normalization_3d_utility[] = "normalization_3d_utility";
static const char __pyx_k_pixelize_cartesian_nodal[] = "pixelize_cartesian_nodal";
static const char __pyx_k_transformed_north_vector[] = "transformed_north_vector";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_pixelize_sph_kernel_slice[] = "pixelize_sph_kernel_slice";
static const char __pyx_k_YTElementTypeNotRecognized[] = "YTElementTypeNotRecognized";
static const char __pyx_k_pixelize_element_mesh_line[] = "pixelize_element_mesh_line";
static const char __pyx_k_No_matching_signature_found[] = "No matching signature found";
static const char __pyx_k_SPHKernelInterpolationTable[] = "SPHKernelInterpolationTable";
static const char __pyx_k_interpolate_sph_grid_gather[] = "interpolate_sph_grid_gather";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_pixelize_off_axis_cartesian[] = "pixelize_off_axis_cartesian";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_Interpolating_gather_SPH_field[] = "Interpolating (gather) SPH field";
static const char __pyx_k_pixelize_sph_kernel_projection[] = "pixelize_sph_kernel_projection";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_Arrays_are_not_of_correct_shape[] = "Arrays are not of correct shape.";
static const char __pyx_k_Check_to_see_that_both_starting[] = "Check to see that both starting and ending line points are within the domain of the mesh.";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_self_kernel_cannot_be_converted[] = "self.kernel cannot be converted to a Python object for pickling";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Expected_at_least_d_argument_s_g[] = "Expected at least %d argument%s, got %d";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Function_call_with_ambiguous_arg[] = "Function call with ambiguous argument types";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_Slices_of_2D_datasets_must_be_pe[] = "Slices of 2D datasets must be perpendicular to the 'z' direction.";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_interpolate_sph_positions_gather[] = "interpolate_sph_positions_gather";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_pixelize_sph_kernel_arbitrary_gr[] = "pixelize_sph_kernel_arbitrary_grid";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_yt_utilities_lib_pixelization_ro[] = "yt/utilities/lib/pixelization_routines.pyx";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static const char __pyx_k_yt_utilities_lib_pixelization_ro_2[] = "yt.utilities.lib.pixelization_routines";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_kp_u_Arrays_are_not_of_correct_shape;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_kp_u_Check_to_see_that_both_starting;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_kp_s_Expected_at_least_d_argument_s_g;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_kp_s_Function_call_with_ambiguous_arg;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_u_Interpolating_gather_SPH_field;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_LE;
static PyObject *__pyx_n_s_Lambda0;
static PyObject *__pyx_n_s_Lambda_p;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_kp_s_No_matching_signature_found;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PI;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_RE;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SPHKernelInterpolationTable;
static PyObject *__pyx_kp_u_Slices_of_2D_datasets_must_be_pe;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_n_s_YTElementTypeNotRecognized;
static PyObject *__pyx_n_s_YTPixelizeError;
static PyObject *__pyx_kp_s__2;
static PyObject *__pyx_n_s_allclose;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_antialias;
static PyObject *__pyx_n_s_arc_length;
static PyObject *__pyx_n_s_argmax;
static PyObject *__pyx_n_s_argmin;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_axes;
static PyObject *__pyx_n_s_azimuth;
static PyObject *__pyx_n_s_azimuth_offset;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_bounds;
static PyObject *__pyx_n_s_btheta0;
static PyObject *__pyx_n_s_btheta_p;
static PyObject *__pyx_n_s_buff;
static PyObject *__pyx_n_s_buff_den;
static PyObject *__pyx_n_s_buff_size;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_center;
static PyObject *__pyx_n_s_check_period;
static PyObject *__pyx_n_s_ci;
static PyObject *__pyx_n_s_cj;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_u_code_length;
static PyObject *__pyx_n_s_colatitude;
static PyObject *__pyx_n_s_colatitude_offset;
static PyObject *__pyx_n_s_conn;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_convert_to_units;
static PyObject *__pyx_n_s_coord;
static PyObject *__pyx_n_s_coordinate_matrix;
static PyObject *__pyx_n_s_coords;
static PyObject *__pyx_n_s_corners;
static PyObject *__pyx_n_s_costheta;
static PyObject *__pyx_n_s_cross;
static PyObject *__pyx_n_s_ctree;
static PyObject *__pyx_n_u_cubic;
static PyObject *__pyx_n_s_cx;
static PyObject *__pyx_n_s_cxpx;
static PyObject *__pyx_n_s_cy;
static PyObject *__pyx_n_s_cypx;
static PyObject *__pyx_n_s_cz;
static PyObject *__pyx_n_u_d;
static PyObject *__pyx_n_s_dLambda_p;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_dazimuth;
static PyObject *__pyx_n_s_dbtheta_p;
static PyObject *__pyx_n_s_dcolatitude;
static PyObject *__pyx_n_s_dds;
static PyObject *__pyx_n_s_defaults;
static PyObject *__pyx_n_s_den;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dot;
static PyObject *__pyx_n_s_dr_i;
static PyObject *__pyx_n_s_dradius;
static PyObject *__pyx_n_s_dsp;
static PyObject *__pyx_n_s_dtheta;
static PyObject *__pyx_n_s_dtheta_i;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_dx;
static PyObject *__pyx_n_s_dxsp;
static PyObject *__pyx_n_s_dy;
static PyObject *__pyx_n_s_dysp;
static PyObject *__pyx_n_s_dz;
static PyObject *__pyx_n_s_dzsp;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end_point;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_extents;
static PyObject *__pyx_n_s_fi;
static PyObject *__pyx_n_s_field;
static PyObject *__pyx_n_s_field_positions;
static PyObject *__pyx_n_s_field_vals;
static PyObject *__pyx_n_s_final_vector;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_u_float;
static PyObject *__pyx_n_s_float32_t;
static PyObject *__pyx_n_u_float64;
static PyObject *__pyx_n_s_float64_t;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_get_pbar;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_h_j;
static PyObject *__pyx_n_s_h_j2;
static PyObject *__pyx_n_s_h_j3;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_hsml;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_i1;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_idds;
static PyObject *__pyx_n_s_identity;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_idy;
static PyObject *__pyx_n_s_idz;
static PyObject *__pyx_n_s_ih_j;
static PyObject *__pyx_n_s_ih_j2;
static PyObject *__pyx_n_s_ii;
static PyObject *__pyx_n_s_imax;
static PyObject *__pyx_n_s_img;
static PyObject *__pyx_n_s_imin;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inc_length;
static PyObject *__pyx_n_s_ind;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_index_offset;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_n_s_input_img;
static PyObject *__pyx_n_u_int64;
static PyObject *__pyx_n_s_interpolate_sph_grid_gather;
static PyObject *__pyx_n_s_interpolate_sph_positions_gather;
static PyObject *__pyx_n_s_inv;
static PyObject *__pyx_n_s_inv_mat;
static PyObject *__pyx_n_s_ip;
static PyObject *__pyx_n_s_ipx_dx;
static PyObject *__pyx_n_s_ipx_dy;
static PyObject *__pyx_n_s_isclose;
static PyObject *__pyx_n_s_itab;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_jj;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_kdtree;
static PyObject *__pyx_n_s_kernel;
static PyObject *__pyx_n_s_kernel_name;
static PyObject *__pyx_n_s_kernel_tables;
static PyObject *__pyx_n_s_kind;
static PyObject *__pyx_n_s_kk;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_lc;
static PyObject *__pyx_n_s_ld_x;
static PyObject *__pyx_n_s_ld_y;
static PyObject *__pyx_n_s_lin_inc;
static PyObject *__pyx_n_s_lin_length;
static PyObject *__pyx_n_s_lin_sample_points;
static PyObject *__pyx_n_s_lin_vec;
static PyObject *__pyx_n_s_linalg;
static PyObject *__pyx_n_s_line_width;
static PyObject *__pyx_n_s_local_buff;
static PyObject *__pyx_n_s_lr;
static PyObject *__pyx_n_s_lxpx;
static PyObject *__pyx_n_s_lypx;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mapped_coord;
static PyObject *__pyx_n_s_mask;
static PyObject *__pyx_n_s_matmul;
static PyObject *__pyx_n_s_maxval;
static PyObject *__pyx_n_s_md;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_nan;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_nf;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_u_none;
static PyObject *__pyx_n_s_norm;
static PyObject *__pyx_n_s_normal_rotation_matrix;
static PyObject *__pyx_n_s_normal_vector;
static PyObject *__pyx_n_s_normalization_1d_utility;
static PyObject *__pyx_n_s_normalization_2d_utility;
static PyObject *__pyx_n_s_normalization_3d_utility;
static PyObject *__pyx_n_s_north_rotation_matrix;
static PyObject *__pyx_n_s_north_vector;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_npoints;
static PyObject *__pyx_n_s_num;
static PyObject *__pyx_n_s_num_field_vals;
static PyObject *__pyx_n_s_num_intervals;
static PyObject *__pyx_n_s_num_neigh;
static PyObject *__pyx_n_s_num_particles;
static PyObject *__pyx_n_s_num_plot_nodes;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_nvertices;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_off_axis_projection_SPH;
static PyObject *__pyx_n_s_overlap1;
static PyObject *__pyx_n_s_overlap2;
static PyObject *__pyx_n_s_oxsp;
static PyObject *__pyx_n_s_oysp;
static PyObject *__pyx_n_s_ozsp;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_pLE;
static PyObject *__pyx_n_s_pRE;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_particle;
static PyObject *__pyx_n_s_particle_densities;
static PyObject *__pyx_n_s_particle_masses;
static PyObject *__pyx_n_s_pbar;
static PyObject *__pyx_n_s_pdens;
static PyObject *__pyx_n_s_pdx;
static PyObject *__pyx_n_s_pdy;
static PyObject *__pyx_n_s_pdz;
static PyObject *__pyx_n_s_pend;
static PyObject *__pyx_n_s_period;
static PyObject *__pyx_n_s_period_x;
static PyObject *__pyx_n_s_period_y;
static PyObject *__pyx_n_s_period_z;
static PyObject *__pyx_n_s_pi;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pixelize_aitoff;
static PyObject *__pyx_n_s_pixelize_cartesian;
static PyObject *__pyx_n_s_pixelize_cartesian_nodal;
static PyObject *__pyx_n_s_pixelize_cylinder;
static PyObject *__pyx_n_s_pixelize_element_mesh;
static PyObject *__pyx_n_s_pixelize_element_mesh_line;
static PyObject *__pyx_n_s_pixelize_off_axis_cartesian;
static PyObject *__pyx_n_s_pixelize_sph_kernel_arbitrary_gr;
static PyObject *__pyx_n_s_pixelize_sph_kernel_projection;
static PyObject *__pyx_n_s_pixelize_sph_kernel_slice;
static PyObject *__pyx_n_s_pj;
static PyObject *__pyx_n_s_pk;
static PyObject *__pyx_n_s_plot_values;
static PyObject *__pyx_n_s_pmass;
static PyObject *__pyx_n_s_populate_table;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_pos_ptr;
static PyObject *__pyx_n_s_posx;
static PyObject *__pyx_n_s_posx_diff;
static PyObject *__pyx_n_s_posy;
static PyObject *__pyx_n_s_posy_diff;
static PyObject *__pyx_n_s_posz;
static PyObject *__pyx_n_s_posz_diff;
static PyObject *__pyx_n_s_ppoint;
static PyObject *__pyx_n_s_prbounds;
static PyObject *__pyx_n_s_prefactor_j;
static PyObject *__pyx_n_s_prog;
static PyObject *__pyx_n_s_projection_array;
static PyObject *__pyx_n_s_pstart;
static PyObject *__pyx_n_s_ptbounds;
static PyObject *__pyx_n_s_px;
static PyObject *__pyx_n_s_px_dx;
static PyObject *__pyx_n_s_px_dy;
static PyObject *__pyx_n_s_px_rotated;
static PyObject *__pyx_n_s_pxsp;
static PyObject *__pyx_n_s_py;
static PyObject *__pyx_n_s_py_rotated;
static PyObject *__pyx_n_s_pysp;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_pz;
static PyObject *__pyx_n_s_q_ij;
static PyObject *__pyx_n_s_q_ij2;
static PyObject *__pyx_n_s_quantity_to_smooth;
static PyObject *__pyx_n_u_quartic;
static PyObject *__pyx_n_s_queue;
static PyObject *__pyx_n_u_quintic;
static PyObject *__pyx_n_s_r0;
static PyObject *__pyx_n_s_r_i;
static PyObject *__pyx_n_s_r_inc;
static PyObject *__pyx_n_s_radius;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rbounds;
static PyObject *__pyx_n_s_rc;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_rmax;
static PyObject *__pyx_n_s_rmin;
static PyObject *__pyx_n_s_rot_bounds_x0;
static PyObject *__pyx_n_s_rot_bounds_x1;
static PyObject *__pyx_n_s_rot_bounds_y0;
static PyObject *__pyx_n_s_rot_bounds_y1;
static PyObject *__pyx_n_s_rotate_particle_coord;
static PyObject *__pyx_n_s_rotated_center;
static PyObject *__pyx_n_s_rotated_coordinates;
static PyObject *__pyx_n_s_rotation_matrix;
static PyObject *__pyx_n_s_rr;
static PyObject *__pyx_n_s_rtol;
static PyObject *__pyx_n_s_rxpx;
static PyObject *__pyx_n_s_rypx;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_s2;
static PyObject *__pyx_n_s_sample_point;
static PyObject *__pyx_n_s_sampler;
static PyObject *__pyx_kp_s_self_kernel_cannot_be_converted;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_signatures;
static PyObject *__pyx_n_s_sintheta;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_smoothed_quantity_j;
static PyObject *__pyx_n_s_smoothing_lengths;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_start_point;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_strip;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_theta;
static PyObject *__pyx_n_s_theta0;
static PyObject *__pyx_n_s_theta_i;
static PyObject *__pyx_n_s_theta_inc;
static PyObject *__pyx_n_s_title;
static PyObject *__pyx_n_s_tmax;
static PyObject *__pyx_n_s_tmin;
static PyObject *__pyx_n_s_transformed_north_vector;
static PyObject *__pyx_n_s_tree_positions;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_units;
static PyObject *__pyx_n_u_units;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_use;
static PyObject *__pyx_n_s_use_normalization;
static PyObject *__pyx_n_s_vertices;
static PyObject *__pyx_n_s_weight_field;
static PyObject *__pyx_n_s_weight_field_2;
static PyObject *__pyx_n_u_wendland2;
static PyObject *__pyx_n_u_wendland4;
static PyObject *__pyx_n_u_wendland6;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x0;
static PyObject *__pyx_n_s_x1;
static PyObject *__pyx_n_s_x_max;
static PyObject *__pyx_n_s_x_min;
static PyObject *__pyx_n_s_xi;
static PyObject *__pyx_n_s_xiter;
static PyObject *__pyx_n_s_xiterv;
static PyObject *__pyx_n_s_xmax;
static PyObject *__pyx_n_s_xmin;
static PyObject *__pyx_n_s_xp;
static PyObject *__pyx_n_s_xsize;
static PyObject *__pyx_n_s_xsp;
static PyObject *__pyx_n_s_xw;
static PyObject *__pyx_n_s_xxi;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_y0;
static PyObject *__pyx_n_s_y1;
static PyObject *__pyx_n_s_y_axis;
static PyObject *__pyx_n_s_y_max;
static PyObject *__pyx_n_s_y_min;
static PyObject *__pyx_n_s_yi;
static PyObject *__pyx_n_s_yiter;
static PyObject *__pyx_n_s_yiterv;
static PyObject *__pyx_n_s_ymax;
static PyObject *__pyx_n_s_ymin;
static PyObject *__pyx_n_s_yp;
static PyObject *__pyx_n_s_ysize;
static PyObject *__pyx_n_s_ysp;
static PyObject *__pyx_n_s_yt_funcs;
static PyObject *__pyx_n_s_yt_utilities_exceptions;
static PyObject *__pyx_kp_s_yt_utilities_lib_pixelization_ro;
static PyObject *__pyx_n_s_yt_utilities_lib_pixelization_ro_2;
static PyObject *__pyx_n_s_yw;
static PyObject *__pyx_n_s_yyi;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_n_s_z0;
static PyObject *__pyx_n_s_z1;
static PyObject *__pyx_n_s_z_axis;
static PyObject *__pyx_n_s_z_max;
static PyObject *__pyx_n_s_z_min;
static PyObject *__pyx_n_s_zb;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_n_s_zi;
static PyObject *__pyx_n_s_ziter;
static PyObject *__pyx_n_s_ziterv;
static PyObject *__pyx_n_s_zsize;
static PyObject *__pyx_n_s_zsp;
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_pixelize_cartesian(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_52__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_36pixelize_cartesian(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_px, __Pyx_memviewslice __pyx_v_py, __Pyx_memviewslice __pyx_v_pdx, __Pyx_memviewslice __pyx_v_pdy, __Pyx_memviewslice __pyx_v_data, PyObject *__pyx_v_bounds, int __pyx_v_antialias, PyObject *__pyx_v_period, int __pyx_v_check_period, __pyx_t_5numpy_float64_t __pyx_v_line_width); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_54__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_38pixelize_cartesian(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_px, __Pyx_memviewslice __pyx_v_py, __Pyx_memviewslice __pyx_v_pdx, __Pyx_memviewslice __pyx_v_pdy, __Pyx_memviewslice __pyx_v_data, PyObject *__pyx_v_bounds, int __pyx_v_antialias, PyObject *__pyx_v_period, int __pyx_v_check_period, __pyx_t_5numpy_float64_t __pyx_v_line_width); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_2pixelize_cartesian_nodal(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_px, __Pyx_memviewslice __pyx_v_py, __Pyx_memviewslice __pyx_v_pz, __Pyx_memviewslice __pyx_v_pdx, __Pyx_memviewslice __pyx_v_pdy, __Pyx_memviewslice __pyx_v_pdz, __Pyx_memviewslice __pyx_v_data, __pyx_t_5numpy_float64_t __pyx_v_coord, PyObject *__pyx_v_bounds, CYTHON_UNUSED int __pyx_v_antialias, PyObject *__pyx_v_period, int __pyx_v_check_period); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_4pixelize_off_axis_cartesian(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_x, __Pyx_memviewslice __pyx_v_y, __Pyx_memviewslice __pyx_v_z, __Pyx_memviewslice __pyx_v_px, __Pyx_memviewslice __pyx_v_py, __Pyx_memviewslice __pyx_v_pdx, __Pyx_memviewslice __pyx_v_pdy, __Pyx_memviewslice __pyx_v_pdz, __Pyx_memviewslice __pyx_v_center, __Pyx_memviewslice __pyx_v_inv_mat, __Pyx_memviewslice __pyx_v_indices, __Pyx_memviewslice __pyx_v_data, PyObject *__pyx_v_bounds); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_6pixelize_cylinder(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_radius, __Pyx_memviewslice __pyx_v_dradius, __Pyx_memviewslice __pyx_v_theta, __Pyx_memviewslice __pyx_v_dtheta, __Pyx_memviewslice __pyx_v_field, PyObject *__pyx_v_extents); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_8pixelize_aitoff(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_azimuth, __Pyx_memviewslice __pyx_v_dazimuth, __Pyx_memviewslice __pyx_v_colatitude, __Pyx_memviewslice __pyx_v_dcolatitude, PyObject *__pyx_v_buff_size, __Pyx_memviewslice __pyx_v_field, PyObject *__pyx_v_bounds, PyObject *__pyx_v_input_img, __pyx_t_5numpy_float64_t __pyx_v_azimuth_offset, __pyx_t_5numpy_float64_t __pyx_v_colatitude_offset); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_10pixelize_element_mesh(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_coords, PyArrayObject *__pyx_v_conn, PyObject *__pyx_v_buff_size, PyArrayObject *__pyx_v_field, PyObject *__pyx_v_extents, int __pyx_v_index_offset); /* proto */
static int __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable___init__(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self, PyObject *__pyx_v_kernel_name); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_2populate_table(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_4interpolate_array(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self, __Pyx_memviewslice __pyx_v_q2_vals); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name___get__(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self); /* proto */
static int __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_2__set__(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_4__del__(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_12pixelize_sph_kernel_projection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_60__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_42pixelize_sph_kernel_projection(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_posx, __Pyx_memviewslice __pyx_v_posy, __Pyx_memviewslice __pyx_v_hsml, __Pyx_memviewslice __pyx_v_pmass, __Pyx_memviewslice __pyx_v_pdens, __Pyx_memviewslice __pyx_v_quantity_to_smooth, PyObject *__pyx_v_bounds, PyObject *__pyx_v_kernel_name, PyObject *__pyx_v_weight_field, int __pyx_v_check_period, PyObject *__pyx_v_period); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_62__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_44pixelize_sph_kernel_projection(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_posx, __Pyx_memviewslice __pyx_v_posy, __Pyx_memviewslice __pyx_v_hsml, __Pyx_memviewslice __pyx_v_pmass, __Pyx_memviewslice __pyx_v_pdens, __Pyx_memviewslice __pyx_v_quantity_to_smooth, PyObject *__pyx_v_bounds, PyObject *__pyx_v_kernel_name, PyObject *__pyx_v_weight_field, int __pyx_v_check_period, PyObject *__pyx_v_period); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_14interpolate_sph_positions_gather(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_tree_positions, __Pyx_memviewslice __pyx_v_field_positions, __Pyx_memviewslice __pyx_v_hsml, __Pyx_memviewslice __pyx_v_pmass, __Pyx_memviewslice __pyx_v_pdens, __Pyx_memviewslice __pyx_v_quantity_to_smooth, struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *__pyx_v_kdtree, int __pyx_v_use_normalization, PyObject *__pyx_v_kernel_name, CYTHON_UNUSED PyObject *__pyx_v_pbar, int __pyx_v_num_neigh); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_16interpolate_sph_grid_gather(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_tree_positions, __Pyx_memviewslice __pyx_v_bounds, __Pyx_memviewslice __pyx_v_hsml, __Pyx_memviewslice __pyx_v_pmass, __Pyx_memviewslice __pyx_v_pdens, __Pyx_memviewslice __pyx_v_quantity_to_smooth, struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *__pyx_v_kdtree, int __pyx_v_use_normalization, PyObject *__pyx_v_kernel_name, PyObject *__pyx_v_pbar, int __pyx_v_num_neigh); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_18pixelize_sph_kernel_slice(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_posx, __Pyx_memviewslice __pyx_v_posy, __Pyx_memviewslice __pyx_v_hsml, __Pyx_memviewslice __pyx_v_pmass, __Pyx_memviewslice __pyx_v_pdens, __Pyx_memviewslice __pyx_v_quantity_to_smooth, PyObject *__pyx_v_bounds, PyObject *__pyx_v_kernel_name, int __pyx_v_check_period, PyObject *__pyx_v_period); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_20pixelize_sph_kernel_arbitrary_grid(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_posx, __Pyx_memviewslice __pyx_v_posy, __Pyx_memviewslice __pyx_v_posz, __Pyx_memviewslice __pyx_v_hsml, __Pyx_memviewslice __pyx_v_pmass, __Pyx_memviewslice __pyx_v_pdens, __Pyx_memviewslice __pyx_v_quantity_to_smooth, PyObject *__pyx_v_bounds, PyObject *__pyx_v_pbar, PyObject *__pyx_v_kernel_name, int __pyx_v_check_period, PyObject *__pyx_v_period); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_22pixelize_element_mesh_line(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_coords, PyArrayObject *__pyx_v_conn, PyArrayObject *__pyx_v_start_point, PyArrayObject *__pyx_v_end_point, PyObject *__pyx_v_npoints, PyArrayObject *__pyx_v_field, int __pyx_v_index_offset); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_24rotate_particle_coord(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_px, __Pyx_memviewslice __pyx_v_py, __Pyx_memviewslice __pyx_v_pz, PyObject *__pyx_v_center, PyObject *__pyx_v_width, PyObject *__pyx_v_normal_vector, PyObject *__pyx_v_north_vector); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_26off_axis_projection_SPH(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_px, __Pyx_memviewslice __pyx_v_py, __Pyx_memviewslice __pyx_v_pz, __Pyx_memviewslice __pyx_v_particle_masses, __Pyx_memviewslice __pyx_v_particle_densities, __Pyx_memviewslice __pyx_v_smoothing_lengths, CYTHON_UNUSED PyObject *__pyx_v_bounds, PyObject *__pyx_v_center, PyObject *__pyx_v_width, __Pyx_memviewslice __pyx_v_quantity_to_smooth, __Pyx_memviewslice __pyx_v_projection_array, PyObject *__pyx_v_normal_vector, PyObject *__pyx_v_north_vector, PyObject *__pyx_v_weight_field); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_28get_rotation_matrix(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_normal_vector, __Pyx_memviewslice __pyx_v_final_vector); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_30normalization_3d_utility(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_num, __Pyx_memviewslice __pyx_v_den); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_32normalization_2d_utility(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_num, __Pyx_memviewslice __pyx_v_den); /* proto */
static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_34normalization_1d_utility(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_num, __Pyx_memviewslice __pyx_v_den); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_;
static PyObject *__pyx_float_1_;
static PyObject *__pyx_float_2_0;
static PyObject *__pyx_float_1eneg_09;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_50000;
static PyObject *__pyx_int_112105877;
static PyObject *__pyx_int_136983863;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_slice__5;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__76;
/* Late includes */

/* "yt/utilities/lib/pixelization_routines.pyx":88
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cartesian(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                        any_float[:] px,
 *                        any_float[:] py,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_1pixelize_cartesian(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_1pixelize_cartesian = {"pixelize_cartesian", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_1pixelize_cartesian, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_1pixelize_cartesian(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_signatures = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED PyObject *__pyx_v_defaults = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_fused_cpdef (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_signatures,&__pyx_n_s_args,&__pyx_n_s_kwargs,&__pyx_n_s_defaults,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_signatures)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 1, 4, 4, 1); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kwargs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 1, 4, 4, 2); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_defaults)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 1, 4, 4, 3); __PYX_ERR(0, 88, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_fused_cpdef") < 0)) __PYX_ERR(0, 88, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_signatures = values[0];
    __pyx_v_args = values[1];
    __pyx_v_kwargs = values[2];
    __pyx_v_defaults = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 88, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_pixelize_cartesian(__pyx_self, __pyx_v_signatures, __pyx_v_args, __pyx_v_kwargs, __pyx_v_defaults);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_pixelize_cartesian(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults) {
  PyObject *__pyx_v_dest_sig = NULL;
  Py_ssize_t __pyx_v_i;
  PyTypeObject *__pyx_v_ndarray = 0;
  __Pyx_memviewslice __pyx_v_memslice;
  Py_ssize_t __pyx_v_itemsize;
  CYTHON_UNUSED int __pyx_v_dtype_signed;
  char __pyx_v_kind;
  PyObject *__pyx_v_arg = NULL;
  PyObject *__pyx_v_dtype = NULL;
  PyObject *__pyx_v_arg_base = NULL;
  PyObject *__pyx_v_candidates = NULL;
  PyObject *__pyx_v_sig = NULL;
  int __pyx_v_match_found;
  PyObject *__pyx_v_src_sig = NULL;
  PyObject *__pyx_v_dst_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  long __pyx_t_7;
  __Pyx_memviewslice __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  int __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pixelize_cartesian", 0);
  __Pyx_INCREF(__pyx_v_kwargs);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyList_SET_ITEM(__pyx_t_1, 0, Py_None);
  __pyx_v_dest_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_4) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_kwargs, Py_None);
  }
  __pyx_t_1 = ((PyObject *)__Pyx_ImportNumPyArrayTypeIfAvailable()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ndarray = ((PyTypeObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_itemsize = -1L;
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 88, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_t_2 = ((1 < __pyx_t_5) != 0);
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 88, __pyx_L1_error)
    }
    __pyx_t_1 = PyTuple_GET_ITEM(((PyObject*)__pyx_v_args), 1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 88, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_px, ((PyObject*)__pyx_v_kwargs), Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_kwargs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 88, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_kwargs), __pyx_n_s_px); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  /*else*/ {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 88, __pyx_L1_error)
    }
    __pyx_t_5 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 88, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_int_7);
    __Pyx_GIVEREF(__pyx_int_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_int_7);
    __Pyx_INCREF(__pyx_n_s_s);
    __Pyx_GIVEREF(__pyx_n_s_s);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_s);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Expected_at_least_d_argument_s_g, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 88, __pyx_L1_error)
  }
  __pyx_L6:;
  while (1) {
    __pyx_t_2 = (__pyx_v_ndarray != ((PyTypeObject*)Py_None));
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
      __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_v_ndarray); 
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_v_dtype = __pyx_t_6;
        __pyx_t_6 = 0;
        goto __pyx_L12;
      }
      __pyx_t_2 = __pyx_memoryview_check(__pyx_v_arg); 
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_base); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_v_arg_base = __pyx_t_6;
        __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_arg_base, __pyx_v_ndarray); 
        __pyx_t_2 = (__pyx_t_3 != 0);
        if (__pyx_t_2) {
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg_base, __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_v_dtype = __pyx_t_6;
          __pyx_t_6 = 0;
          goto __pyx_L13;
        }
        /*else*/ {
          __Pyx_INCREF(Py_None);
          __pyx_v_dtype = Py_None;
        }
        __pyx_L13:;
        goto __pyx_L12;
      }
      /*else*/ {
        __Pyx_INCREF(Py_None);
        __pyx_v_dtype = Py_None;
      }
      __pyx_L12:;
      __pyx_v_itemsize = -1L;
      __pyx_t_2 = (__pyx_v_dtype != Py_None);
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_6); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_v_itemsize = __pyx_t_5;
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_n_s_kind); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_Ord(__pyx_t_6); if (unlikely(__pyx_t_7 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_v_kind = __pyx_t_7;
        __pyx_v_dtype_signed = (__pyx_v_kind == 'i');
        switch (__pyx_v_kind) {
          case 'i':
          case 'u':
          break;
          case 'f':
          __pyx_t_2 = (((sizeof(__pyx_t_5numpy_float32_t)) == __pyx_v_itemsize) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_3 = __pyx_t_2;
            goto __pyx_L16_bool_binop_done;
          }
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_ndim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_6); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_2 = ((((Py_ssize_t)__pyx_t_5) == 1) != 0);
          __pyx_t_3 = __pyx_t_2;
          __pyx_L16_bool_binop_done:;
          if (__pyx_t_3) {
            if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_float32_t, long, 1, __Pyx_PyInt_From_long, 1, 0, 0) < 0)) __PYX_ERR(0, 88, __pyx_L1_error)
            goto __pyx_L10_break;
          }
          __pyx_t_2 = (((sizeof(__pyx_t_5numpy_float64_t)) == __pyx_v_itemsize) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_3 = __pyx_t_2;
            goto __pyx_L19_bool_binop_done;
          }
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_ndim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_6); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 88, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_2 = ((((Py_ssize_t)__pyx_t_5) == 1) != 0);
          __pyx_t_3 = __pyx_t_2;
          __pyx_L19_bool_binop_done:;
          if (__pyx_t_3) {
            if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_float64_t, long, 1, __Pyx_PyInt_From_long, 1, 0, 0) < 0)) __PYX_ERR(0, 88, __pyx_L1_error)
            goto __pyx_L10_break;
          }
          break;
          case 'c':
          break;
          case 'O':
          break;
          default: break;
        }
      }
    }
    __pyx_t_2 = ((__pyx_v_itemsize == -1L) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L22_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_itemsize == (sizeof(__pyx_t_5numpy_float32_t))) != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L22_bool_binop_done:;
    if (__pyx_t_3) {
      __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(__pyx_v_arg, 0); 
      __pyx_v_memslice = __pyx_t_8;
      __pyx_t_3 = (__pyx_v_memslice.memview != 0);
      if (__pyx_t_3) {
        __PYX_XDEC_MEMVIEW((&__pyx_v_memslice), 1); 
        if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_float32_t, long, 1, __Pyx_PyInt_From_long, 1, 0, 0) < 0)) __PYX_ERR(0, 88, __pyx_L1_error)
        goto __pyx_L10_break;
      }
      /*else*/ {
        PyErr_Clear(); 
      }
    }
    __pyx_t_2 = ((__pyx_v_itemsize == -1L) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L26_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_itemsize == (sizeof(__pyx_t_5numpy_float64_t))) != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L26_bool_binop_done:;
    if (__pyx_t_3) {
      __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_v_arg, 0); 
      __pyx_v_memslice = __pyx_t_8;
      __pyx_t_3 = (__pyx_v_memslice.memview != 0);
      if (__pyx_t_3) {
        __PYX_XDEC_MEMVIEW((&__pyx_v_memslice), 1); 
        if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_float64_t, long, 1, __Pyx_PyInt_From_long, 1, 0, 0) < 0)) __PYX_ERR(0, 88, __pyx_L1_error)
        goto __pyx_L10_break;
      }
      /*else*/ {
        PyErr_Clear(); 
      }
    }
    if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, Py_None, long, 1, __Pyx_PyInt_From_long, 1, 0, 0) < 0)) __PYX_ERR(0, 88, __pyx_L1_error)
    goto __pyx_L10_break;
  }
  __pyx_L10_break:;
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_candidates = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_signatures == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 88, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_dict_iterator(((PyObject*)__pyx_v_signatures), 1, ((PyObject *)NULL), (&__pyx_t_9), (&__pyx_t_10)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __pyx_t_6 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_11 = __Pyx_dict_iter_next(__pyx_t_6, __pyx_t_9, &__pyx_t_5, &__pyx_t_1, NULL, NULL, __pyx_t_10);
    if (unlikely(__pyx_t_11 == 0)) break;
    if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_sig, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_v_match_found = 0;
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_sig, __pyx_n_s_strip); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
      }
    }
    __pyx_t_12 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_14, __pyx_kp_s_) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_kp_s_);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_split); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
      }
    }
    __pyx_t_1 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_12, __pyx_kp_s__2) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_kp_s__2);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF_SET(__pyx_v_src_sig, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_15 = PyList_GET_SIZE(__pyx_v_dest_sig); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 88, __pyx_L1_error)
    __pyx_t_16 = __pyx_t_15;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_i = __pyx_t_17;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_v_dest_sig, __pyx_v_i);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_dst_type, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_3 = (__pyx_v_dst_type != Py_None);
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_src_sig, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = PyObject_RichCompare(__pyx_t_1, __pyx_v_dst_type, Py_EQ); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 88, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (__pyx_t_2) {
          __pyx_v_match_found = 1;
          goto __pyx_L34;
        }
        /*else*/ {
          __pyx_v_match_found = 0;
          goto __pyx_L32_break;
        }
        __pyx_L34:;
      }
    }
    __pyx_L32_break:;
    __pyx_t_2 = (__pyx_v_match_found != 0);
    if (__pyx_t_2) {
      __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_candidates, __pyx_v_sig); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(0, 88, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = (PyList_GET_SIZE(__pyx_v_candidates) != 0);
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 88, __pyx_L1_error)
  }
  __pyx_t_9 = PyList_GET_SIZE(__pyx_v_candidates); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_9 > 1) != 0);
  if (__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 88, __pyx_L1_error)
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_signatures == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 88, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_signatures), PyList_GET_ITEM(__pyx_v_candidates, 0)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dest_sig);
  __Pyx_XDECREF(__pyx_v_ndarray);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XDECREF(__pyx_v_arg_base);
  __Pyx_XDECREF(__pyx_v_candidates);
  __Pyx_XDECREF(__pyx_v_sig);
  __Pyx_XDECREF(__pyx_v_src_sig);
  __Pyx_XDECREF(__pyx_v_dst_type);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_52__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_antialias); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_check_period); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_line_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_period);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_period);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self)->__pyx_arg_period);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 1, Py_None);
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_0__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_37pixelize_cartesian(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_0__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_37pixelize_cartesian = {"__pyx_fuse_0pixelize_cartesian", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_0__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_37pixelize_cartesian, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_fuse_0__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_37pixelize_cartesian(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_buff = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_px = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_py = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdx = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdy = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_data = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_bounds = 0;
  int __pyx_v_antialias;
  PyObject *__pyx_v_period = 0;
  int __pyx_v_check_period;
  __pyx_t_5numpy_float64_t __pyx_v_line_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pixelize_cartesian (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buff,&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pdx,&__pyx_n_s_pdy,&__pyx_n_s_data,&__pyx_n_s_bounds,&__pyx_n_s_antialias,&__pyx_n_s_period,&__pyx_n_s_check_period,&__pyx_n_s_line_width,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    __pyx_defaults2 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_self);
    values[8] = __pyx_dynamic_args->__pyx_arg_period;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, 1); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, 2); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, 3); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, 4); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, 5); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, 6); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_antialias);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_period);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_check_period);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_line_width);
          if (value) { values[10] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pixelize_cartesian") < 0)) __PYX_ERR(0, 88, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buff = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_buff.memview)) __PYX_ERR(0, 88, __pyx_L3_error)
    __pyx_v_px = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_px.memview)) __PYX_ERR(0, 89, __pyx_L3_error)
    __pyx_v_py = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_py.memview)) __PYX_ERR(0, 90, __pyx_L3_error)
    __pyx_v_pdx = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdx.memview)) __PYX_ERR(0, 91, __pyx_L3_error)
    __pyx_v_pdy = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdy.memview)) __PYX_ERR(0, 92, __pyx_L3_error)
    __pyx_v_data = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_data.memview)) __PYX_ERR(0, 93, __pyx_L3_error)
    __pyx_v_bounds = values[6];
    if (values[7]) {
      __pyx_v_antialias = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_antialias == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L3_error)
    } else {
      __pyx_v_antialias = __pyx_dynamic_args->__pyx_arg_antialias;
    }
    __pyx_v_period = values[8];
    if (values[9]) {
      __pyx_v_check_period = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_check_period == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L3_error)
    } else {
      __pyx_v_check_period = __pyx_dynamic_args->__pyx_arg_check_period;
    }
    if (values[10]) {
      __pyx_v_line_width = __pyx_PyFloat_AsDouble(values[10]); if (unlikely((__pyx_v_line_width == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L3_error)
    } else {
      __pyx_v_line_width = __pyx_dynamic_args->__pyx_arg_line_width;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 88, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_cartesian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_36pixelize_cartesian(__pyx_self, __pyx_v_buff, __pyx_v_px, __pyx_v_py, __pyx_v_pdx, __pyx_v_pdy, __pyx_v_data, __pyx_v_bounds, __pyx_v_antialias, __pyx_v_period, __pyx_v_check_period, __pyx_v_line_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_36pixelize_cartesian(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_px, __Pyx_memviewslice __pyx_v_py, __Pyx_memviewslice __pyx_v_pdx, __Pyx_memviewslice __pyx_v_pdy, __Pyx_memviewslice __pyx_v_data, PyObject *__pyx_v_bounds, int __pyx_v_antialias, PyObject *__pyx_v_period, int __pyx_v_check_period, __pyx_t_5numpy_float64_t __pyx_v_line_width) {
  __pyx_t_5numpy_float64_t __pyx_v_x_min;
  __pyx_t_5numpy_float64_t __pyx_v_x_max;
  __pyx_t_5numpy_float64_t __pyx_v_y_min;
  __pyx_t_5numpy_float64_t __pyx_v_y_max;
  __pyx_t_5numpy_float64_t __pyx_v_period_x;
  __pyx_t_5numpy_float64_t __pyx_v_period_y;
  __pyx_t_5numpy_float64_t __pyx_v_width;
  __pyx_t_5numpy_float64_t __pyx_v_height;
  __pyx_t_5numpy_float64_t __pyx_v_px_dx;
  __pyx_t_5numpy_float64_t __pyx_v_px_dy;
  __pyx_t_5numpy_float64_t __pyx_v_ipx_dx;
  __pyx_t_5numpy_float64_t __pyx_v_ipx_dy;
  __pyx_t_5numpy_float64_t __pyx_v_ld_x;
  __pyx_t_5numpy_float64_t __pyx_v_ld_y;
  __pyx_t_5numpy_float64_t __pyx_v_cx;
  __pyx_t_5numpy_float64_t __pyx_v_cy;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_p;
  int __pyx_v_xi;
  int __pyx_v_yi;
  int __pyx_v_lc;
  int __pyx_v_lr;
  int __pyx_v_rc;
  int __pyx_v_rr;
  __pyx_t_5numpy_float64_t __pyx_v_lypx;
  __pyx_t_5numpy_float64_t __pyx_v_rypx;
  __pyx_t_5numpy_float64_t __pyx_v_lxpx;
  __pyx_t_5numpy_float64_t __pyx_v_rxpx;
  __pyx_t_5numpy_float64_t __pyx_v_overlap1;
  __pyx_t_5numpy_float64_t __pyx_v_overlap2;
  __pyx_t_5numpy_float64_t __pyx_v_oxsp;
  __pyx_t_5numpy_float64_t __pyx_v_oysp;
  __pyx_t_5numpy_float64_t __pyx_v_xsp;
  __pyx_t_5numpy_float64_t __pyx_v_ysp;
  __pyx_t_5numpy_float64_t __pyx_v_dxsp;
  __pyx_t_5numpy_float64_t __pyx_v_dysp;
  __pyx_t_5numpy_float64_t __pyx_v_dsp;
  int __pyx_v_xiter[2];
  int __pyx_v_yiter[2];
  __pyx_t_5numpy_float64_t __pyx_v_xiterv[2];
  __pyx_t_5numpy_float64_t __pyx_v_yiterv[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_5numpy_float64_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0pixelize_cartesian", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":100
 *                        np.float64_t line_width = 0.0):
 *     cdef np.float64_t x_min, x_max, y_min, y_max
 *     cdef np.float64_t period_x = 0.0, period_y = 0.0             # <<<<<<<<<<<<<<
 *     cdef np.float64_t width, height, px_dx, px_dy, ipx_dx, ipx_dy
 *     cdef np.float64_t ld_x, ld_y, cx, cy
 */
  __pyx_v_period_x = 0.0;
  __pyx_v_period_y = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":113
 *     cdef np.float64_t xiterv[2]
 *     cdef np.float64_t yiterv[2]
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  __pyx_t_1 = (__pyx_v_period != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/pixelization_routines.pyx":114
 *     cdef np.float64_t yiterv[2]
 *     if period is not None:
 *         period_x = period[0]             # <<<<<<<<<<<<<<
 *         period_y = period[1]
 *     x_min = bounds[0]
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_period, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_period_x = __pyx_t_4;

    /* "yt/utilities/lib/pixelization_routines.pyx":115
 *     if period is not None:
 *         period_x = period[0]
 *         period_y = period[1]             # <<<<<<<<<<<<<<
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_period, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_period_y = __pyx_t_4;

    /* "yt/utilities/lib/pixelization_routines.pyx":113
 *     cdef np.float64_t xiterv[2]
 *     cdef np.float64_t yiterv[2]
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":116
 *         period_x = period[0]
 *         period_y = period[1]
 *     x_min = bounds[0]             # <<<<<<<<<<<<<<
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x_min = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":117
 *         period_y = period[1]
 *     x_min = bounds[0]
 *     x_max = bounds[1]             # <<<<<<<<<<<<<<
 *     y_min = bounds[2]
 *     y_max = bounds[3]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x_max = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":118
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 *     y_min = bounds[2]             # <<<<<<<<<<<<<<
 *     y_max = bounds[3]
 *     width = x_max - x_min
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_y_min = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":119
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 *     y_max = bounds[3]             # <<<<<<<<<<<<<<
 *     width = x_max - x_min
 *     height = y_max - y_min
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_y_max = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":120
 *     y_min = bounds[2]
 *     y_max = bounds[3]
 *     width = x_max - x_min             # <<<<<<<<<<<<<<
 *     height = y_max - y_min
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 */
  __pyx_v_width = (__pyx_v_x_max - __pyx_v_x_min);

  /* "yt/utilities/lib/pixelization_routines.pyx":121
 *     y_max = bounds[3]
 *     width = x_max - x_min
 *     height = y_max - y_min             # <<<<<<<<<<<<<<
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 */
  __pyx_v_height = (__pyx_v_y_max - __pyx_v_y_min);

  /* "yt/utilities/lib/pixelization_routines.pyx":122
 *     width = x_max - x_min
 *     height = y_max - y_min
 *     px_dx = width / (<np.float64_t> buff.shape[1])             # <<<<<<<<<<<<<<
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 *     ipx_dx = 1.0 / px_dx
 */
  __pyx_v_px_dx = (__pyx_v_width / ((__pyx_t_5numpy_float64_t)(__pyx_v_buff.shape[1])));

  /* "yt/utilities/lib/pixelization_routines.pyx":123
 *     height = y_max - y_min
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 *     px_dy = height / (<np.float64_t> buff.shape[0])             # <<<<<<<<<<<<<<
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 */
  __pyx_v_px_dy = (__pyx_v_height / ((__pyx_t_5numpy_float64_t)(__pyx_v_buff.shape[0])));

  /* "yt/utilities/lib/pixelization_routines.pyx":124
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 *     ipx_dx = 1.0 / px_dx             # <<<<<<<<<<<<<<
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \
 */
  __pyx_v_ipx_dx = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_px_dx);

  /* "yt/utilities/lib/pixelization_routines.pyx":125
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy             # <<<<<<<<<<<<<<
 *     if px.shape[0] != py.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \
 */
  __pyx_v_ipx_dy = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_px_dy);

  /* "yt/utilities/lib/pixelization_routines.pyx":126
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_py.shape[0])) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":127
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdy.shape[0] or \
 *        px.shape[0] != data.shape[0]:
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_pdx.shape[0])) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":128
 *     if px.shape[0] != py.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != data.shape[0]:
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_pdy.shape[0])) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":129
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 *        px.shape[0] != data.shape[0]:             # <<<<<<<<<<<<<<
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 *     xiter[0] = yiter[0] = 0
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_data.shape[0])) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L5_bool_binop_done:;

  /* "yt/utilities/lib/pixelization_routines.pyx":126
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 */
  if (unlikely(__pyx_t_2)) {

    /* "yt/utilities/lib/pixelization_routines.pyx":130
 *        px.shape[0] != pdy.shape[0] or \
 *        px.shape[0] != data.shape[0]:
 *         raise YTPixelizeError("Arrays are not of correct shape.")             # <<<<<<<<<<<<<<
 *     xiter[0] = yiter[0] = 0
 *     xiterv[0] = yiterv[0] = 0.0
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_YTPixelizeError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_kp_u_Arrays_are_not_of_correct_shape) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_u_Arrays_are_not_of_correct_shape);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 130, __pyx_L1_error)

    /* "yt/utilities/lib/pixelization_routines.pyx":126
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":131
 *        px.shape[0] != data.shape[0]:
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 *     xiter[0] = yiter[0] = 0             # <<<<<<<<<<<<<<
 *     xiterv[0] = yiterv[0] = 0.0
 *     # Here's a basic outline of what we're going to do here.  The xiter and
 */
  (__pyx_v_xiter[0]) = 0;
  (__pyx_v_yiter[0]) = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":132
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 *     xiter[0] = yiter[0] = 0
 *     xiterv[0] = yiterv[0] = 0.0             # <<<<<<<<<<<<<<
 *     # Here's a basic outline of what we're going to do here.  The xiter and
 *     # yiter variables govern whether or not we should check periodicity -- are
 */
  (__pyx_v_xiterv[0]) = 0.0;
  (__pyx_v_yiterv[0]) = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":176
 *     #       first axis : y_min .. y_max
 *     #       second axis: x_min .. x_max
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for p in range(px.shape[0]):
 *             xiter[1] = yiter[1] = 999
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "yt/utilities/lib/pixelization_routines.pyx":177
 *     #       second axis: x_min .. x_max
 *     with nogil:
 *         for p in range(px.shape[0]):             # <<<<<<<<<<<<<<
 *             xiter[1] = yiter[1] = 999
 *             xiterv[1] = yiterv[1] = 0.0
 */
        __pyx_t_7 = (__pyx_v_px.shape[0]);
        __pyx_t_8 = __pyx_t_7;
        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
          __pyx_v_p = __pyx_t_9;

          /* "yt/utilities/lib/pixelization_routines.pyx":178
 *     with nogil:
 *         for p in range(px.shape[0]):
 *             xiter[1] = yiter[1] = 999             # <<<<<<<<<<<<<<
 *             xiterv[1] = yiterv[1] = 0.0
 *             oxsp = px[p]
 */
          (__pyx_v_xiter[1]) = 0x3E7;
          (__pyx_v_yiter[1]) = 0x3E7;

          /* "yt/utilities/lib/pixelization_routines.pyx":179
 *         for p in range(px.shape[0]):
 *             xiter[1] = yiter[1] = 999
 *             xiterv[1] = yiterv[1] = 0.0             # <<<<<<<<<<<<<<
 *             oxsp = px[p]
 *             oysp = py[p]
 */
          (__pyx_v_xiterv[1]) = 0.0;
          (__pyx_v_yiterv[1]) = 0.0;

          /* "yt/utilities/lib/pixelization_routines.pyx":180
 *             xiter[1] = yiter[1] = 999
 *             xiterv[1] = yiterv[1] = 0.0
 *             oxsp = px[p]             # <<<<<<<<<<<<<<
 *             oysp = py[p]
 *             dxsp = pdx[p]
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_oxsp = (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_px.data + __pyx_t_10 * __pyx_v_px.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":181
 *             xiterv[1] = yiterv[1] = 0.0
 *             oxsp = px[p]
 *             oysp = py[p]             # <<<<<<<<<<<<<<
 *             dxsp = pdx[p]
 *             dysp = pdy[p]
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_oysp = (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_py.data + __pyx_t_10 * __pyx_v_py.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":182
 *             oxsp = px[p]
 *             oysp = py[p]
 *             dxsp = pdx[p]             # <<<<<<<<<<<<<<
 *             dysp = pdy[p]
 *             dsp = data[p]
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_dxsp = (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_pdx.data + __pyx_t_10 * __pyx_v_pdx.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":183
 *             oysp = py[p]
 *             dxsp = pdx[p]
 *             dysp = pdy[p]             # <<<<<<<<<<<<<<
 *             dsp = data[p]
 *             if check_period == 1:
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_dysp = (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_pdy.data + __pyx_t_10 * __pyx_v_pdy.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":184
 *             dxsp = pdx[p]
 *             dysp = pdy[p]
 *             dsp = data[p]             # <<<<<<<<<<<<<<
 *             if check_period == 1:
 *                 if (oxsp - dxsp < x_min):
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_dsp = (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_data.data + __pyx_t_10 * __pyx_v_data.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":185
 *             dysp = pdy[p]
 *             dsp = data[p]
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if (oxsp - dxsp < x_min):
 *                     xiter[1] = +1
 */
          __pyx_t_2 = ((__pyx_v_check_period == 1) != 0);
          if (__pyx_t_2) {

            /* "yt/utilities/lib/pixelization_routines.pyx":186
 *             dsp = data[p]
 *             if check_period == 1:
 *                 if (oxsp - dxsp < x_min):             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
            __pyx_t_2 = (((__pyx_v_oxsp - __pyx_v_dxsp) < __pyx_v_x_min) != 0);
            if (__pyx_t_2) {

              /* "yt/utilities/lib/pixelization_routines.pyx":187
 *             if check_period == 1:
 *                 if (oxsp - dxsp < x_min):
 *                     xiter[1] = +1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = period_x
 *                 elif (oxsp + dxsp > x_max):
 */
              (__pyx_v_xiter[1]) = 1;

              /* "yt/utilities/lib/pixelization_routines.pyx":188
 *                 if (oxsp - dxsp < x_min):
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x             # <<<<<<<<<<<<<<
 *                 elif (oxsp + dxsp > x_max):
 *                     xiter[1] = -1
 */
              (__pyx_v_xiterv[1]) = __pyx_v_period_x;

              /* "yt/utilities/lib/pixelization_routines.pyx":186
 *             dsp = data[p]
 *             if check_period == 1:
 *                 if (oxsp - dxsp < x_min):             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
              goto __pyx_L15;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":189
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif (oxsp + dxsp > x_max):             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
            __pyx_t_2 = (((__pyx_v_oxsp + __pyx_v_dxsp) > __pyx_v_x_max) != 0);
            if (__pyx_t_2) {

              /* "yt/utilities/lib/pixelization_routines.pyx":190
 *                     xiterv[1] = period_x
 *                 elif (oxsp + dxsp > x_max):
 *                     xiter[1] = -1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = -period_x
 *                 if (oysp - dysp < y_min):
 */
              (__pyx_v_xiter[1]) = -1;

              /* "yt/utilities/lib/pixelization_routines.pyx":191
 *                 elif (oxsp + dxsp > x_max):
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x             # <<<<<<<<<<<<<<
 *                 if (oysp - dysp < y_min):
 *                     yiter[1] = +1
 */
              (__pyx_v_xiterv[1]) = (-__pyx_v_period_x);

              /* "yt/utilities/lib/pixelization_routines.pyx":189
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif (oxsp + dxsp > x_max):             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
            }
            __pyx_L15:;

            /* "yt/utilities/lib/pixelization_routines.pyx":192
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if (oysp - dysp < y_min):             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
            __pyx_t_2 = (((__pyx_v_oysp - __pyx_v_dysp) < __pyx_v_y_min) != 0);
            if (__pyx_t_2) {

              /* "yt/utilities/lib/pixelization_routines.pyx":193
 *                     xiterv[1] = -period_x
 *                 if (oysp - dysp < y_min):
 *                     yiter[1] = +1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = period_y
 *                 elif (oysp + dysp > y_max):
 */
              (__pyx_v_yiter[1]) = 1;

              /* "yt/utilities/lib/pixelization_routines.pyx":194
 *                 if (oysp - dysp < y_min):
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y             # <<<<<<<<<<<<<<
 *                 elif (oysp + dysp > y_max):
 *                     yiter[1] = -1
 */
              (__pyx_v_yiterv[1]) = __pyx_v_period_y;

              /* "yt/utilities/lib/pixelization_routines.pyx":192
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if (oysp - dysp < y_min):             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
              goto __pyx_L16;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":195
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif (oysp + dysp > y_max):             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
            __pyx_t_2 = (((__pyx_v_oysp + __pyx_v_dysp) > __pyx_v_y_max) != 0);
            if (__pyx_t_2) {

              /* "yt/utilities/lib/pixelization_routines.pyx":196
 *                     yiterv[1] = period_y
 *                 elif (oysp + dysp > y_max):
 *                     yiter[1] = -1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = -period_y
 *             overlap1 = overlap2 = 1.0
 */
              (__pyx_v_yiter[1]) = -1;

              /* "yt/utilities/lib/pixelization_routines.pyx":197
 *                 elif (oysp + dysp > y_max):
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y             # <<<<<<<<<<<<<<
 *             overlap1 = overlap2 = 1.0
 *             for xi in range(2):
 */
              (__pyx_v_yiterv[1]) = (-__pyx_v_period_y);

              /* "yt/utilities/lib/pixelization_routines.pyx":195
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif (oysp + dysp > y_max):             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
            }
            __pyx_L16:;

            /* "yt/utilities/lib/pixelization_routines.pyx":185
 *             dysp = pdy[p]
 *             dsp = data[p]
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if (oxsp - dxsp < x_min):
 *                     xiter[1] = +1
 */
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":198
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 *             overlap1 = overlap2 = 1.0             # <<<<<<<<<<<<<<
 *             for xi in range(2):
 *                 if xiter[xi] == 999: continue
 */
          __pyx_v_overlap1 = 1.0;
          __pyx_v_overlap2 = 1.0;

          /* "yt/utilities/lib/pixelization_routines.pyx":199
 *                     yiterv[1] = -period_y
 *             overlap1 = overlap2 = 1.0
 *             for xi in range(2):             # <<<<<<<<<<<<<<
 *                 if xiter[xi] == 999: continue
 *                 xsp = oxsp + xiterv[xi]
 */
          for (__pyx_t_11 = 0; __pyx_t_11 < 2; __pyx_t_11+=1) {
            __pyx_v_xi = __pyx_t_11;

            /* "yt/utilities/lib/pixelization_routines.pyx":200
 *             overlap1 = overlap2 = 1.0
 *             for xi in range(2):
 *                 if xiter[xi] == 999: continue             # <<<<<<<<<<<<<<
 *                 xsp = oxsp + xiterv[xi]
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue
 */
            __pyx_t_2 = (((__pyx_v_xiter[__pyx_v_xi]) == 0x3E7) != 0);
            if (__pyx_t_2) {
              goto __pyx_L17_continue;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":201
 *             for xi in range(2):
 *                 if xiter[xi] == 999: continue
 *                 xsp = oxsp + xiterv[xi]             # <<<<<<<<<<<<<<
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue
 *                 for yi in range(2):
 */
            __pyx_v_xsp = (__pyx_v_oxsp + (__pyx_v_xiterv[__pyx_v_xi]));

            /* "yt/utilities/lib/pixelization_routines.pyx":202
 *                 if xiter[xi] == 999: continue
 *                 xsp = oxsp + xiterv[xi]
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue             # <<<<<<<<<<<<<<
 *                 for yi in range(2):
 *                     if yiter[yi] == 999: continue
 */
            __pyx_t_1 = (((__pyx_v_xsp + __pyx_v_dxsp) < __pyx_v_x_min) != 0);
            if (!__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L21_bool_binop_done;
            }
            __pyx_t_1 = (((__pyx_v_xsp - __pyx_v_dxsp) > __pyx_v_x_max) != 0);
            __pyx_t_2 = __pyx_t_1;
            __pyx_L21_bool_binop_done:;
            if (__pyx_t_2) {
              goto __pyx_L17_continue;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":203
 *                 xsp = oxsp + xiterv[xi]
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue
 *                 for yi in range(2):             # <<<<<<<<<<<<<<
 *                     if yiter[yi] == 999: continue
 *                     ysp = oysp + yiterv[yi]
 */
            for (__pyx_t_12 = 0; __pyx_t_12 < 2; __pyx_t_12+=1) {
              __pyx_v_yi = __pyx_t_12;

              /* "yt/utilities/lib/pixelization_routines.pyx":204
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue
 *                 for yi in range(2):
 *                     if yiter[yi] == 999: continue             # <<<<<<<<<<<<<<
 *                     ysp = oysp + yiterv[yi]
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue
 */
              __pyx_t_2 = (((__pyx_v_yiter[__pyx_v_yi]) == 0x3E7) != 0);
              if (__pyx_t_2) {
                goto __pyx_L23_continue;
              }

              /* "yt/utilities/lib/pixelization_routines.pyx":205
 *                 for yi in range(2):
 *                     if yiter[yi] == 999: continue
 *                     ysp = oysp + yiterv[yi]             # <<<<<<<<<<<<<<
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue
 *                     lc = <int> fmax(((xsp-dxsp-x_min)*ipx_dx),0)
 */
              __pyx_v_ysp = (__pyx_v_oysp + (__pyx_v_yiterv[__pyx_v_yi]));

              /* "yt/utilities/lib/pixelization_routines.pyx":206
 *                     if yiter[yi] == 999: continue
 *                     ysp = oysp + yiterv[yi]
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue             # <<<<<<<<<<<<<<
 *                     lc = <int> fmax(((xsp-dxsp-x_min)*ipx_dx),0)
 *                     lr = <int> fmax(((ysp-dysp-y_min)*ipx_dy),0)
 */
              __pyx_t_1 = (((__pyx_v_ysp + __pyx_v_dysp) < __pyx_v_y_min) != 0);
              if (!__pyx_t_1) {
              } else {
                __pyx_t_2 = __pyx_t_1;
                goto __pyx_L27_bool_binop_done;
              }
              __pyx_t_1 = (((__pyx_v_ysp - __pyx_v_dysp) > __pyx_v_y_max) != 0);
              __pyx_t_2 = __pyx_t_1;
              __pyx_L27_bool_binop_done:;
              if (__pyx_t_2) {
                goto __pyx_L23_continue;
              }

              /* "yt/utilities/lib/pixelization_routines.pyx":207
 *                     ysp = oysp + yiterv[yi]
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue
 *                     lc = <int> fmax(((xsp-dxsp-x_min)*ipx_dx),0)             # <<<<<<<<<<<<<<
 *                     lr = <int> fmax(((ysp-dysp-y_min)*ipx_dy),0)
 *                     # NOTE: This is a different way of doing it than in the C
 */
              __pyx_v_lc = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmax((((__pyx_v_xsp - __pyx_v_dxsp) - __pyx_v_x_min) * __pyx_v_ipx_dx), 0.0));

              /* "yt/utilities/lib/pixelization_routines.pyx":208
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue
 *                     lc = <int> fmax(((xsp-dxsp-x_min)*ipx_dx),0)
 *                     lr = <int> fmax(((ysp-dysp-y_min)*ipx_dy),0)             # <<<<<<<<<<<<<<
 *                     # NOTE: This is a different way of doing it than in the C
 *                     # routines.  In C, we were implicitly casting the
 */
              __pyx_v_lr = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmax((((__pyx_v_ysp - __pyx_v_dysp) - __pyx_v_y_min) * __pyx_v_ipx_dy), 0.0));

              /* "yt/utilities/lib/pixelization_routines.pyx":218
 *                     # comparison of j to rc (double).  So give ourselves a
 *                     # bonus row and bonus column here.
 *                     rc = <int> fmin(((xsp+dxsp-x_min)*ipx_dx + 1), buff.shape[1])             # <<<<<<<<<<<<<<
 *                     rr = <int> fmin(((ysp+dysp-y_min)*ipx_dy + 1), buff.shape[0])
 *                     # Note that we're iterating here over *y* in the i
 */
              __pyx_v_rc = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(((((__pyx_v_xsp + __pyx_v_dxsp) - __pyx_v_x_min) * __pyx_v_ipx_dx) + 1.0), (__pyx_v_buff.shape[1])));

              /* "yt/utilities/lib/pixelization_routines.pyx":219
 *                     # bonus row and bonus column here.
 *                     rc = <int> fmin(((xsp+dxsp-x_min)*ipx_dx + 1), buff.shape[1])
 *                     rr = <int> fmin(((ysp+dysp-y_min)*ipx_dy + 1), buff.shape[0])             # <<<<<<<<<<<<<<
 *                     # Note that we're iterating here over *y* in the i
 *                     # direction.  See the note above about this.
 */
              __pyx_v_rr = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(((((__pyx_v_ysp + __pyx_v_dysp) - __pyx_v_y_min) * __pyx_v_ipx_dy) + 1.0), (__pyx_v_buff.shape[0])));

              /* "yt/utilities/lib/pixelization_routines.pyx":222
 *                     # Note that we're iterating here over *y* in the i
 *                     # direction.  See the note above about this.
 *                     for i in range(lr, rr):             # <<<<<<<<<<<<<<
 *                         lypx = px_dy * i + y_min
 *                         rypx = px_dy * (i+1) + y_min
 */
              __pyx_t_13 = __pyx_v_rr;
              __pyx_t_14 = __pyx_t_13;
              for (__pyx_t_15 = __pyx_v_lr; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
                __pyx_v_i = __pyx_t_15;

                /* "yt/utilities/lib/pixelization_routines.pyx":223
 *                     # direction.  See the note above about this.
 *                     for i in range(lr, rr):
 *                         lypx = px_dy * i + y_min             # <<<<<<<<<<<<<<
 *                         rypx = px_dy * (i+1) + y_min
 *                         if antialias == 1:
 */
                __pyx_v_lypx = ((__pyx_v_px_dy * __pyx_v_i) + __pyx_v_y_min);

                /* "yt/utilities/lib/pixelization_routines.pyx":224
 *                     for i in range(lr, rr):
 *                         lypx = px_dy * i + y_min
 *                         rypx = px_dy * (i+1) + y_min             # <<<<<<<<<<<<<<
 *                         if antialias == 1:
 *                             overlap2 = ((fmin(rypx, ysp+dysp)
 */
                __pyx_v_rypx = ((__pyx_v_px_dy * (__pyx_v_i + 1)) + __pyx_v_y_min);

                /* "yt/utilities/lib/pixelization_routines.pyx":225
 *                         lypx = px_dy * i + y_min
 *                         rypx = px_dy * (i+1) + y_min
 *                         if antialias == 1:             # <<<<<<<<<<<<<<
 *                             overlap2 = ((fmin(rypx, ysp+dysp)
 *                                        - fmax(lypx, (ysp-dysp)))*ipx_dy)
 */
                __pyx_t_2 = ((__pyx_v_antialias == 1) != 0);
                if (__pyx_t_2) {

                  /* "yt/utilities/lib/pixelization_routines.pyx":227
 *                         if antialias == 1:
 *                             overlap2 = ((fmin(rypx, ysp+dysp)
 *                                        - fmax(lypx, (ysp-dysp)))*ipx_dy)             # <<<<<<<<<<<<<<
 *                         if overlap2 < 0.0: continue
 *                         for j in range(lc, rc):
 */
                  __pyx_v_overlap2 = ((__pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_rypx, (__pyx_v_ysp + __pyx_v_dysp)) - __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_lypx, (__pyx_v_ysp - __pyx_v_dysp))) * __pyx_v_ipx_dy);

                  /* "yt/utilities/lib/pixelization_routines.pyx":225
 *                         lypx = px_dy * i + y_min
 *                         rypx = px_dy * (i+1) + y_min
 *                         if antialias == 1:             # <<<<<<<<<<<<<<
 *                             overlap2 = ((fmin(rypx, ysp+dysp)
 *                                        - fmax(lypx, (ysp-dysp)))*ipx_dy)
 */
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":228
 *                             overlap2 = ((fmin(rypx, ysp+dysp)
 *                                        - fmax(lypx, (ysp-dysp)))*ipx_dy)
 *                         if overlap2 < 0.0: continue             # <<<<<<<<<<<<<<
 *                         for j in range(lc, rc):
 *                             lxpx = px_dx * j + x_min
 */
                __pyx_t_2 = ((__pyx_v_overlap2 < 0.0) != 0);
                if (__pyx_t_2) {
                  goto __pyx_L29_continue;
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":229
 *                                        - fmax(lypx, (ysp-dysp)))*ipx_dy)
 *                         if overlap2 < 0.0: continue
 *                         for j in range(lc, rc):             # <<<<<<<<<<<<<<
 *                             lxpx = px_dx * j + x_min
 *                             rxpx = px_dx * (j+1) + x_min
 */
                __pyx_t_16 = __pyx_v_rc;
                __pyx_t_17 = __pyx_t_16;
                for (__pyx_t_18 = __pyx_v_lc; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
                  __pyx_v_j = __pyx_t_18;

                  /* "yt/utilities/lib/pixelization_routines.pyx":230
 *                         if overlap2 < 0.0: continue
 *                         for j in range(lc, rc):
 *                             lxpx = px_dx * j + x_min             # <<<<<<<<<<<<<<
 *                             rxpx = px_dx * (j+1) + x_min
 *                             if line_width > 0:
 */
                  __pyx_v_lxpx = ((__pyx_v_px_dx * __pyx_v_j) + __pyx_v_x_min);

                  /* "yt/utilities/lib/pixelization_routines.pyx":231
 *                         for j in range(lc, rc):
 *                             lxpx = px_dx * j + x_min
 *                             rxpx = px_dx * (j+1) + x_min             # <<<<<<<<<<<<<<
 *                             if line_width > 0:
 *                                 # Here, we figure out if we're within
 */
                  __pyx_v_rxpx = ((__pyx_v_px_dx * (__pyx_v_j + 1)) + __pyx_v_x_min);

                  /* "yt/utilities/lib/pixelization_routines.pyx":232
 *                             lxpx = px_dx * j + x_min
 *                             rxpx = px_dx * (j+1) + x_min
 *                             if line_width > 0:             # <<<<<<<<<<<<<<
 *                                 # Here, we figure out if we're within
 *                                 # line_width*px_dx of the cell edge
 */
                  __pyx_t_2 = ((__pyx_v_line_width > 0.0) != 0);
                  if (__pyx_t_2) {

                    /* "yt/utilities/lib/pixelization_routines.pyx":236
 *                                 # line_width*px_dx of the cell edge
 *                                 # Midpoint of x:
 *                                 cx = (rxpx+lxpx)*0.5             # <<<<<<<<<<<<<<
 *                                 ld_x = fmin(fabs(cx - (xsp+dxsp)),
 *                                             fabs(cx - (xsp-dxsp)))
 */
                    __pyx_v_cx = ((__pyx_v_rxpx + __pyx_v_lxpx) * 0.5);

                    /* "yt/utilities/lib/pixelization_routines.pyx":237
 *                                 # Midpoint of x:
 *                                 cx = (rxpx+lxpx)*0.5
 *                                 ld_x = fmin(fabs(cx - (xsp+dxsp)),             # <<<<<<<<<<<<<<
 *                                             fabs(cx - (xsp-dxsp)))
 *                                 ld_x *= ipx_dx
 */
                    __pyx_v_ld_x = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_f_2yt_9utilities_3lib_8fp_utils_fabs((__pyx_v_cx - (__pyx_v_xsp + __pyx_v_dxsp))), __pyx_f_2yt_9utilities_3lib_8fp_utils_fabs((__pyx_v_cx - (__pyx_v_xsp - __pyx_v_dxsp))));

                    /* "yt/utilities/lib/pixelization_routines.pyx":239
 *                                 ld_x = fmin(fabs(cx - (xsp+dxsp)),
 *                                             fabs(cx - (xsp-dxsp)))
 *                                 ld_x *= ipx_dx             # <<<<<<<<<<<<<<
 *                                 # Midpoint of y:
 *                                 cy = (rypx+lypx)*0.5
 */
                    __pyx_v_ld_x = (__pyx_v_ld_x * __pyx_v_ipx_dx);

                    /* "yt/utilities/lib/pixelization_routines.pyx":241
 *                                 ld_x *= ipx_dx
 *                                 # Midpoint of y:
 *                                 cy = (rypx+lypx)*0.5             # <<<<<<<<<<<<<<
 *                                 ld_y = fmin(fabs(cy - (ysp+dysp)),
 *                                             fabs(cy - (ysp-dysp)))
 */
                    __pyx_v_cy = ((__pyx_v_rypx + __pyx_v_lypx) * 0.5);

                    /* "yt/utilities/lib/pixelization_routines.pyx":242
 *                                 # Midpoint of y:
 *                                 cy = (rypx+lypx)*0.5
 *                                 ld_y = fmin(fabs(cy - (ysp+dysp)),             # <<<<<<<<<<<<<<
 *                                             fabs(cy - (ysp-dysp)))
 *                                 ld_y *= ipx_dy
 */
                    __pyx_v_ld_y = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_f_2yt_9utilities_3lib_8fp_utils_fabs((__pyx_v_cy - (__pyx_v_ysp + __pyx_v_dysp))), __pyx_f_2yt_9utilities_3lib_8fp_utils_fabs((__pyx_v_cy - (__pyx_v_ysp - __pyx_v_dysp))));

                    /* "yt/utilities/lib/pixelization_routines.pyx":244
 *                                 ld_y = fmin(fabs(cy - (ysp+dysp)),
 *                                             fabs(cy - (ysp-dysp)))
 *                                 ld_y *= ipx_dy             # <<<<<<<<<<<<<<
 *                                 if ld_x <= line_width or ld_y <= line_width:
 *                                     buff[i,j] = 1.0
 */
                    __pyx_v_ld_y = (__pyx_v_ld_y * __pyx_v_ipx_dy);

                    /* "yt/utilities/lib/pixelization_routines.pyx":245
 *                                             fabs(cy - (ysp-dysp)))
 *                                 ld_y *= ipx_dy
 *                                 if ld_x <= line_width or ld_y <= line_width:             # <<<<<<<<<<<<<<
 *                                     buff[i,j] = 1.0
 *                             elif antialias == 1:
 */
                    __pyx_t_1 = ((__pyx_v_ld_x <= __pyx_v_line_width) != 0);
                    if (!__pyx_t_1) {
                    } else {
                      __pyx_t_2 = __pyx_t_1;
                      goto __pyx_L37_bool_binop_done;
                    }
                    __pyx_t_1 = ((__pyx_v_ld_y <= __pyx_v_line_width) != 0);
                    __pyx_t_2 = __pyx_t_1;
                    __pyx_L37_bool_binop_done:;
                    if (__pyx_t_2) {

                      /* "yt/utilities/lib/pixelization_routines.pyx":246
 *                                 ld_y *= ipx_dy
 *                                 if ld_x <= line_width or ld_y <= line_width:
 *                                     buff[i,j] = 1.0             # <<<<<<<<<<<<<<
 *                             elif antialias == 1:
 *                                 overlap1 = ((fmin(rxpx, xsp+dxsp)
 */
                      __pyx_t_10 = __pyx_v_i;
                      __pyx_t_19 = __pyx_v_j;
                      *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_10 * __pyx_v_buff.strides[0]) ) + __pyx_t_19 * __pyx_v_buff.strides[1]) )) = 1.0;

                      /* "yt/utilities/lib/pixelization_routines.pyx":245
 *                                             fabs(cy - (ysp-dysp)))
 *                                 ld_y *= ipx_dy
 *                                 if ld_x <= line_width or ld_y <= line_width:             # <<<<<<<<<<<<<<
 *                                     buff[i,j] = 1.0
 *                             elif antialias == 1:
 */
                    }

                    /* "yt/utilities/lib/pixelization_routines.pyx":232
 *                             lxpx = px_dx * j + x_min
 *                             rxpx = px_dx * (j+1) + x_min
 *                             if line_width > 0:             # <<<<<<<<<<<<<<
 *                                 # Here, we figure out if we're within
 *                                 # line_width*px_dx of the cell edge
 */
                    goto __pyx_L35;
                  }

                  /* "yt/utilities/lib/pixelization_routines.pyx":247
 *                                 if ld_x <= line_width or ld_y <= line_width:
 *                                     buff[i,j] = 1.0
 *                             elif antialias == 1:             # <<<<<<<<<<<<<<
 *                                 overlap1 = ((fmin(rxpx, xsp+dxsp)
 *                                            - fmax(lxpx, (xsp-dxsp)))*ipx_dx)
 */
                  __pyx_t_2 = ((__pyx_v_antialias == 1) != 0);
                  if (__pyx_t_2) {

                    /* "yt/utilities/lib/pixelization_routines.pyx":249
 *                             elif antialias == 1:
 *                                 overlap1 = ((fmin(rxpx, xsp+dxsp)
 *                                            - fmax(lxpx, (xsp-dxsp)))*ipx_dx)             # <<<<<<<<<<<<<<
 *                                 if overlap1 < 0.0: continue
 *                                 # This next line is not commented out because
 */
                    __pyx_v_overlap1 = ((__pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_rxpx, (__pyx_v_xsp + __pyx_v_dxsp)) - __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_lxpx, (__pyx_v_xsp - __pyx_v_dxsp))) * __pyx_v_ipx_dx);

                    /* "yt/utilities/lib/pixelization_routines.pyx":250
 *                                 overlap1 = ((fmin(rxpx, xsp+dxsp)
 *                                            - fmax(lxpx, (xsp-dxsp)))*ipx_dx)
 *                                 if overlap1 < 0.0: continue             # <<<<<<<<<<<<<<
 *                                 # This next line is not commented out because
 *                                 # it's an oddity; we actually want to skip
 */
                    __pyx_t_2 = ((__pyx_v_overlap1 < 0.0) != 0);
                    if (__pyx_t_2) {
                      goto __pyx_L33_continue;
                    }

                    /* "yt/utilities/lib/pixelization_routines.pyx":258
 *                                 # This will reduce artifacts if we ever move to
 *                                 # compositing instead of replacing bitmaps.
 *                                 if overlap1 * overlap2 < 1.e-6: continue             # <<<<<<<<<<<<<<
 *                                 # make sure pixel value is not a NaN before incrementing it
 *                                 if buff[i,j] != buff[i,j]: buff[i,j] = 0.0
 */
                    __pyx_t_2 = (((__pyx_v_overlap1 * __pyx_v_overlap2) < 1.e-6) != 0);
                    if (__pyx_t_2) {
                      goto __pyx_L33_continue;
                    }

                    /* "yt/utilities/lib/pixelization_routines.pyx":260
 *                                 if overlap1 * overlap2 < 1.e-6: continue
 *                                 # make sure pixel value is not a NaN before incrementing it
 *                                 if buff[i,j] != buff[i,j]: buff[i,j] = 0.0             # <<<<<<<<<<<<<<
 *                                 buff[i,j] += (dsp * overlap1) * overlap2
 *                             else:
 */
                    __pyx_t_19 = __pyx_v_i;
                    __pyx_t_10 = __pyx_v_j;
                    __pyx_t_20 = __pyx_v_i;
                    __pyx_t_21 = __pyx_v_j;
                    __pyx_t_2 = (((*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_19 * __pyx_v_buff.strides[0]) ) + __pyx_t_10 * __pyx_v_buff.strides[1]) ))) != (*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_20 * __pyx_v_buff.strides[0]) ) + __pyx_t_21 * __pyx_v_buff.strides[1]) )))) != 0);
                    if (__pyx_t_2) {
                      __pyx_t_21 = __pyx_v_i;
                      __pyx_t_20 = __pyx_v_j;
                      *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_21 * __pyx_v_buff.strides[0]) ) + __pyx_t_20 * __pyx_v_buff.strides[1]) )) = 0.0;
                    }

                    /* "yt/utilities/lib/pixelization_routines.pyx":261
 *                                 # make sure pixel value is not a NaN before incrementing it
 *                                 if buff[i,j] != buff[i,j]: buff[i,j] = 0.0
 *                                 buff[i,j] += (dsp * overlap1) * overlap2             # <<<<<<<<<<<<<<
 *                             else:
 *                                 buff[i,j] = dsp
 */
                    __pyx_t_20 = __pyx_v_i;
                    __pyx_t_21 = __pyx_v_j;
                    *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_20 * __pyx_v_buff.strides[0]) ) + __pyx_t_21 * __pyx_v_buff.strides[1]) )) += ((__pyx_v_dsp * __pyx_v_overlap1) * __pyx_v_overlap2);

                    /* "yt/utilities/lib/pixelization_routines.pyx":247
 *                                 if ld_x <= line_width or ld_y <= line_width:
 *                                     buff[i,j] = 1.0
 *                             elif antialias == 1:             # <<<<<<<<<<<<<<
 *                                 overlap1 = ((fmin(rxpx, xsp+dxsp)
 *                                            - fmax(lxpx, (xsp-dxsp)))*ipx_dx)
 */
                    goto __pyx_L35;
                  }

                  /* "yt/utilities/lib/pixelization_routines.pyx":263
 *                                 buff[i,j] += (dsp * overlap1) * overlap2
 *                             else:
 *                                 buff[i,j] = dsp             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
                  /*else*/ {
                    __pyx_t_21 = __pyx_v_i;
                    __pyx_t_20 = __pyx_v_j;
                    *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_21 * __pyx_v_buff.strides[0]) ) + __pyx_t_20 * __pyx_v_buff.strides[1]) )) = __pyx_v_dsp;
                  }
                  __pyx_L35:;
                  __pyx_L33_continue:;
                }
                __pyx_L29_continue:;
              }
              __pyx_L23_continue:;
            }
            __pyx_L17_continue:;
          }
        }
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":176
 *     #       first axis : y_min .. y_max
 *     #       second axis: x_min .. x_max
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for p in range(px.shape[0]):
 *             xiter[1] = yiter[1] = 999
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L11;
        }
        __pyx_L11:;
      }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":88
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cartesian(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                        any_float[:] px,
 *                        any_float[:] py,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_cartesian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_buff, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_px, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_py, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdx, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdy, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_data, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_54__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_antialias); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_check_period); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_line_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_period);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_period);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self)->__pyx_arg_period);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 1, Py_None);
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_1__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_39pixelize_cartesian(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_1__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_39pixelize_cartesian = {"__pyx_fuse_1pixelize_cartesian", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_1__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_39pixelize_cartesian, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_fuse_1__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_39pixelize_cartesian(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_buff = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_px = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_py = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdx = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdy = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_data = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_bounds = 0;
  int __pyx_v_antialias;
  PyObject *__pyx_v_period = 0;
  int __pyx_v_check_period;
  __pyx_t_5numpy_float64_t __pyx_v_line_width;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pixelize_cartesian (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buff,&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pdx,&__pyx_n_s_pdy,&__pyx_n_s_data,&__pyx_n_s_bounds,&__pyx_n_s_antialias,&__pyx_n_s_period,&__pyx_n_s_check_period,&__pyx_n_s_line_width,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    __pyx_defaults3 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_self);
    values[8] = __pyx_dynamic_args->__pyx_arg_period;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, 1); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, 2); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, 3); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, 4); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, 5); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, 6); __PYX_ERR(0, 88, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_antialias);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_period);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_check_period);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_line_width);
          if (value) { values[10] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pixelize_cartesian") < 0)) __PYX_ERR(0, 88, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buff = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_buff.memview)) __PYX_ERR(0, 88, __pyx_L3_error)
    __pyx_v_px = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_px.memview)) __PYX_ERR(0, 89, __pyx_L3_error)
    __pyx_v_py = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_py.memview)) __PYX_ERR(0, 90, __pyx_L3_error)
    __pyx_v_pdx = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdx.memview)) __PYX_ERR(0, 91, __pyx_L3_error)
    __pyx_v_pdy = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdy.memview)) __PYX_ERR(0, 92, __pyx_L3_error)
    __pyx_v_data = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_data.memview)) __PYX_ERR(0, 93, __pyx_L3_error)
    __pyx_v_bounds = values[6];
    if (values[7]) {
      __pyx_v_antialias = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_antialias == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 95, __pyx_L3_error)
    } else {
      __pyx_v_antialias = __pyx_dynamic_args->__pyx_arg_antialias;
    }
    __pyx_v_period = values[8];
    if (values[9]) {
      __pyx_v_check_period = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_check_period == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 97, __pyx_L3_error)
    } else {
      __pyx_v_check_period = __pyx_dynamic_args->__pyx_arg_check_period;
    }
    if (values[10]) {
      __pyx_v_line_width = __pyx_PyFloat_AsDouble(values[10]); if (unlikely((__pyx_v_line_width == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L3_error)
    } else {
      __pyx_v_line_width = __pyx_dynamic_args->__pyx_arg_line_width;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pixelize_cartesian", 0, 7, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 88, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_cartesian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_38pixelize_cartesian(__pyx_self, __pyx_v_buff, __pyx_v_px, __pyx_v_py, __pyx_v_pdx, __pyx_v_pdy, __pyx_v_data, __pyx_v_bounds, __pyx_v_antialias, __pyx_v_period, __pyx_v_check_period, __pyx_v_line_width);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_38pixelize_cartesian(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_px, __Pyx_memviewslice __pyx_v_py, __Pyx_memviewslice __pyx_v_pdx, __Pyx_memviewslice __pyx_v_pdy, __Pyx_memviewslice __pyx_v_data, PyObject *__pyx_v_bounds, int __pyx_v_antialias, PyObject *__pyx_v_period, int __pyx_v_check_period, __pyx_t_5numpy_float64_t __pyx_v_line_width) {
  __pyx_t_5numpy_float64_t __pyx_v_x_min;
  __pyx_t_5numpy_float64_t __pyx_v_x_max;
  __pyx_t_5numpy_float64_t __pyx_v_y_min;
  __pyx_t_5numpy_float64_t __pyx_v_y_max;
  __pyx_t_5numpy_float64_t __pyx_v_period_x;
  __pyx_t_5numpy_float64_t __pyx_v_period_y;
  __pyx_t_5numpy_float64_t __pyx_v_width;
  __pyx_t_5numpy_float64_t __pyx_v_height;
  __pyx_t_5numpy_float64_t __pyx_v_px_dx;
  __pyx_t_5numpy_float64_t __pyx_v_px_dy;
  __pyx_t_5numpy_float64_t __pyx_v_ipx_dx;
  __pyx_t_5numpy_float64_t __pyx_v_ipx_dy;
  __pyx_t_5numpy_float64_t __pyx_v_ld_x;
  __pyx_t_5numpy_float64_t __pyx_v_ld_y;
  __pyx_t_5numpy_float64_t __pyx_v_cx;
  __pyx_t_5numpy_float64_t __pyx_v_cy;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_p;
  int __pyx_v_xi;
  int __pyx_v_yi;
  int __pyx_v_lc;
  int __pyx_v_lr;
  int __pyx_v_rc;
  int __pyx_v_rr;
  __pyx_t_5numpy_float64_t __pyx_v_lypx;
  __pyx_t_5numpy_float64_t __pyx_v_rypx;
  __pyx_t_5numpy_float64_t __pyx_v_lxpx;
  __pyx_t_5numpy_float64_t __pyx_v_rxpx;
  __pyx_t_5numpy_float64_t __pyx_v_overlap1;
  __pyx_t_5numpy_float64_t __pyx_v_overlap2;
  __pyx_t_5numpy_float64_t __pyx_v_oxsp;
  __pyx_t_5numpy_float64_t __pyx_v_oysp;
  __pyx_t_5numpy_float64_t __pyx_v_xsp;
  __pyx_t_5numpy_float64_t __pyx_v_ysp;
  __pyx_t_5numpy_float64_t __pyx_v_dxsp;
  __pyx_t_5numpy_float64_t __pyx_v_dysp;
  __pyx_t_5numpy_float64_t __pyx_v_dsp;
  int __pyx_v_xiter[2];
  int __pyx_v_yiter[2];
  __pyx_t_5numpy_float64_t __pyx_v_xiterv[2];
  __pyx_t_5numpy_float64_t __pyx_v_yiterv[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_5numpy_float64_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1pixelize_cartesian", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":100
 *                        np.float64_t line_width = 0.0):
 *     cdef np.float64_t x_min, x_max, y_min, y_max
 *     cdef np.float64_t period_x = 0.0, period_y = 0.0             # <<<<<<<<<<<<<<
 *     cdef np.float64_t width, height, px_dx, px_dy, ipx_dx, ipx_dy
 *     cdef np.float64_t ld_x, ld_y, cx, cy
 */
  __pyx_v_period_x = 0.0;
  __pyx_v_period_y = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":113
 *     cdef np.float64_t xiterv[2]
 *     cdef np.float64_t yiterv[2]
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  __pyx_t_1 = (__pyx_v_period != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/pixelization_routines.pyx":114
 *     cdef np.float64_t yiterv[2]
 *     if period is not None:
 *         period_x = period[0]             # <<<<<<<<<<<<<<
 *         period_y = period[1]
 *     x_min = bounds[0]
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_period, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 114, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_period_x = __pyx_t_4;

    /* "yt/utilities/lib/pixelization_routines.pyx":115
 *     if period is not None:
 *         period_x = period[0]
 *         period_y = period[1]             # <<<<<<<<<<<<<<
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_period, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_period_y = __pyx_t_4;

    /* "yt/utilities/lib/pixelization_routines.pyx":113
 *     cdef np.float64_t xiterv[2]
 *     cdef np.float64_t yiterv[2]
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":116
 *         period_x = period[0]
 *         period_y = period[1]
 *     x_min = bounds[0]             # <<<<<<<<<<<<<<
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x_min = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":117
 *         period_y = period[1]
 *     x_min = bounds[0]
 *     x_max = bounds[1]             # <<<<<<<<<<<<<<
 *     y_min = bounds[2]
 *     y_max = bounds[3]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x_max = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":118
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 *     y_min = bounds[2]             # <<<<<<<<<<<<<<
 *     y_max = bounds[3]
 *     width = x_max - x_min
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_y_min = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":119
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 *     y_max = bounds[3]             # <<<<<<<<<<<<<<
 *     width = x_max - x_min
 *     height = y_max - y_min
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_y_max = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":120
 *     y_min = bounds[2]
 *     y_max = bounds[3]
 *     width = x_max - x_min             # <<<<<<<<<<<<<<
 *     height = y_max - y_min
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 */
  __pyx_v_width = (__pyx_v_x_max - __pyx_v_x_min);

  /* "yt/utilities/lib/pixelization_routines.pyx":121
 *     y_max = bounds[3]
 *     width = x_max - x_min
 *     height = y_max - y_min             # <<<<<<<<<<<<<<
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 */
  __pyx_v_height = (__pyx_v_y_max - __pyx_v_y_min);

  /* "yt/utilities/lib/pixelization_routines.pyx":122
 *     width = x_max - x_min
 *     height = y_max - y_min
 *     px_dx = width / (<np.float64_t> buff.shape[1])             # <<<<<<<<<<<<<<
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 *     ipx_dx = 1.0 / px_dx
 */
  __pyx_v_px_dx = (__pyx_v_width / ((__pyx_t_5numpy_float64_t)(__pyx_v_buff.shape[1])));

  /* "yt/utilities/lib/pixelization_routines.pyx":123
 *     height = y_max - y_min
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 *     px_dy = height / (<np.float64_t> buff.shape[0])             # <<<<<<<<<<<<<<
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 */
  __pyx_v_px_dy = (__pyx_v_height / ((__pyx_t_5numpy_float64_t)(__pyx_v_buff.shape[0])));

  /* "yt/utilities/lib/pixelization_routines.pyx":124
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 *     ipx_dx = 1.0 / px_dx             # <<<<<<<<<<<<<<
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \
 */
  __pyx_v_ipx_dx = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_px_dx);

  /* "yt/utilities/lib/pixelization_routines.pyx":125
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy             # <<<<<<<<<<<<<<
 *     if px.shape[0] != py.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \
 */
  __pyx_v_ipx_dy = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_px_dy);

  /* "yt/utilities/lib/pixelization_routines.pyx":126
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_py.shape[0])) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":127
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdy.shape[0] or \
 *        px.shape[0] != data.shape[0]:
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_pdx.shape[0])) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":128
 *     if px.shape[0] != py.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != data.shape[0]:
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_pdy.shape[0])) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":129
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 *        px.shape[0] != data.shape[0]:             # <<<<<<<<<<<<<<
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 *     xiter[0] = yiter[0] = 0
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_data.shape[0])) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L5_bool_binop_done:;

  /* "yt/utilities/lib/pixelization_routines.pyx":126
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 */
  if (unlikely(__pyx_t_2)) {

    /* "yt/utilities/lib/pixelization_routines.pyx":130
 *        px.shape[0] != pdy.shape[0] or \
 *        px.shape[0] != data.shape[0]:
 *         raise YTPixelizeError("Arrays are not of correct shape.")             # <<<<<<<<<<<<<<
 *     xiter[0] = yiter[0] = 0
 *     xiterv[0] = yiterv[0] = 0.0
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_YTPixelizeError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_kp_u_Arrays_are_not_of_correct_shape) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_u_Arrays_are_not_of_correct_shape);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 130, __pyx_L1_error)

    /* "yt/utilities/lib/pixelization_routines.pyx":126
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":131
 *        px.shape[0] != data.shape[0]:
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 *     xiter[0] = yiter[0] = 0             # <<<<<<<<<<<<<<
 *     xiterv[0] = yiterv[0] = 0.0
 *     # Here's a basic outline of what we're going to do here.  The xiter and
 */
  (__pyx_v_xiter[0]) = 0;
  (__pyx_v_yiter[0]) = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":132
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 *     xiter[0] = yiter[0] = 0
 *     xiterv[0] = yiterv[0] = 0.0             # <<<<<<<<<<<<<<
 *     # Here's a basic outline of what we're going to do here.  The xiter and
 *     # yiter variables govern whether or not we should check periodicity -- are
 */
  (__pyx_v_xiterv[0]) = 0.0;
  (__pyx_v_yiterv[0]) = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":176
 *     #       first axis : y_min .. y_max
 *     #       second axis: x_min .. x_max
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for p in range(px.shape[0]):
 *             xiter[1] = yiter[1] = 999
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "yt/utilities/lib/pixelization_routines.pyx":177
 *     #       second axis: x_min .. x_max
 *     with nogil:
 *         for p in range(px.shape[0]):             # <<<<<<<<<<<<<<
 *             xiter[1] = yiter[1] = 999
 *             xiterv[1] = yiterv[1] = 0.0
 */
        __pyx_t_7 = (__pyx_v_px.shape[0]);
        __pyx_t_8 = __pyx_t_7;
        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
          __pyx_v_p = __pyx_t_9;

          /* "yt/utilities/lib/pixelization_routines.pyx":178
 *     with nogil:
 *         for p in range(px.shape[0]):
 *             xiter[1] = yiter[1] = 999             # <<<<<<<<<<<<<<
 *             xiterv[1] = yiterv[1] = 0.0
 *             oxsp = px[p]
 */
          (__pyx_v_xiter[1]) = 0x3E7;
          (__pyx_v_yiter[1]) = 0x3E7;

          /* "yt/utilities/lib/pixelization_routines.pyx":179
 *         for p in range(px.shape[0]):
 *             xiter[1] = yiter[1] = 999
 *             xiterv[1] = yiterv[1] = 0.0             # <<<<<<<<<<<<<<
 *             oxsp = px[p]
 *             oysp = py[p]
 */
          (__pyx_v_xiterv[1]) = 0.0;
          (__pyx_v_yiterv[1]) = 0.0;

          /* "yt/utilities/lib/pixelization_routines.pyx":180
 *             xiter[1] = yiter[1] = 999
 *             xiterv[1] = yiterv[1] = 0.0
 *             oxsp = px[p]             # <<<<<<<<<<<<<<
 *             oysp = py[p]
 *             dxsp = pdx[p]
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_oxsp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_px.data + __pyx_t_10 * __pyx_v_px.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":181
 *             xiterv[1] = yiterv[1] = 0.0
 *             oxsp = px[p]
 *             oysp = py[p]             # <<<<<<<<<<<<<<
 *             dxsp = pdx[p]
 *             dysp = pdy[p]
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_oysp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_py.data + __pyx_t_10 * __pyx_v_py.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":182
 *             oxsp = px[p]
 *             oysp = py[p]
 *             dxsp = pdx[p]             # <<<<<<<<<<<<<<
 *             dysp = pdy[p]
 *             dsp = data[p]
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_dxsp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pdx.data + __pyx_t_10 * __pyx_v_pdx.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":183
 *             oysp = py[p]
 *             dxsp = pdx[p]
 *             dysp = pdy[p]             # <<<<<<<<<<<<<<
 *             dsp = data[p]
 *             if check_period == 1:
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_dysp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pdy.data + __pyx_t_10 * __pyx_v_pdy.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":184
 *             dxsp = pdx[p]
 *             dysp = pdy[p]
 *             dsp = data[p]             # <<<<<<<<<<<<<<
 *             if check_period == 1:
 *                 if (oxsp - dxsp < x_min):
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_dsp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_data.data + __pyx_t_10 * __pyx_v_data.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":185
 *             dysp = pdy[p]
 *             dsp = data[p]
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if (oxsp - dxsp < x_min):
 *                     xiter[1] = +1
 */
          __pyx_t_2 = ((__pyx_v_check_period == 1) != 0);
          if (__pyx_t_2) {

            /* "yt/utilities/lib/pixelization_routines.pyx":186
 *             dsp = data[p]
 *             if check_period == 1:
 *                 if (oxsp - dxsp < x_min):             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
            __pyx_t_2 = (((__pyx_v_oxsp - __pyx_v_dxsp) < __pyx_v_x_min) != 0);
            if (__pyx_t_2) {

              /* "yt/utilities/lib/pixelization_routines.pyx":187
 *             if check_period == 1:
 *                 if (oxsp - dxsp < x_min):
 *                     xiter[1] = +1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = period_x
 *                 elif (oxsp + dxsp > x_max):
 */
              (__pyx_v_xiter[1]) = 1;

              /* "yt/utilities/lib/pixelization_routines.pyx":188
 *                 if (oxsp - dxsp < x_min):
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x             # <<<<<<<<<<<<<<
 *                 elif (oxsp + dxsp > x_max):
 *                     xiter[1] = -1
 */
              (__pyx_v_xiterv[1]) = __pyx_v_period_x;

              /* "yt/utilities/lib/pixelization_routines.pyx":186
 *             dsp = data[p]
 *             if check_period == 1:
 *                 if (oxsp - dxsp < x_min):             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
              goto __pyx_L15;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":189
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif (oxsp + dxsp > x_max):             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
            __pyx_t_2 = (((__pyx_v_oxsp + __pyx_v_dxsp) > __pyx_v_x_max) != 0);
            if (__pyx_t_2) {

              /* "yt/utilities/lib/pixelization_routines.pyx":190
 *                     xiterv[1] = period_x
 *                 elif (oxsp + dxsp > x_max):
 *                     xiter[1] = -1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = -period_x
 *                 if (oysp - dysp < y_min):
 */
              (__pyx_v_xiter[1]) = -1;

              /* "yt/utilities/lib/pixelization_routines.pyx":191
 *                 elif (oxsp + dxsp > x_max):
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x             # <<<<<<<<<<<<<<
 *                 if (oysp - dysp < y_min):
 *                     yiter[1] = +1
 */
              (__pyx_v_xiterv[1]) = (-__pyx_v_period_x);

              /* "yt/utilities/lib/pixelization_routines.pyx":189
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif (oxsp + dxsp > x_max):             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
            }
            __pyx_L15:;

            /* "yt/utilities/lib/pixelization_routines.pyx":192
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if (oysp - dysp < y_min):             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
            __pyx_t_2 = (((__pyx_v_oysp - __pyx_v_dysp) < __pyx_v_y_min) != 0);
            if (__pyx_t_2) {

              /* "yt/utilities/lib/pixelization_routines.pyx":193
 *                     xiterv[1] = -period_x
 *                 if (oysp - dysp < y_min):
 *                     yiter[1] = +1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = period_y
 *                 elif (oysp + dysp > y_max):
 */
              (__pyx_v_yiter[1]) = 1;

              /* "yt/utilities/lib/pixelization_routines.pyx":194
 *                 if (oysp - dysp < y_min):
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y             # <<<<<<<<<<<<<<
 *                 elif (oysp + dysp > y_max):
 *                     yiter[1] = -1
 */
              (__pyx_v_yiterv[1]) = __pyx_v_period_y;

              /* "yt/utilities/lib/pixelization_routines.pyx":192
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if (oysp - dysp < y_min):             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
              goto __pyx_L16;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":195
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif (oysp + dysp > y_max):             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
            __pyx_t_2 = (((__pyx_v_oysp + __pyx_v_dysp) > __pyx_v_y_max) != 0);
            if (__pyx_t_2) {

              /* "yt/utilities/lib/pixelization_routines.pyx":196
 *                     yiterv[1] = period_y
 *                 elif (oysp + dysp > y_max):
 *                     yiter[1] = -1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = -period_y
 *             overlap1 = overlap2 = 1.0
 */
              (__pyx_v_yiter[1]) = -1;

              /* "yt/utilities/lib/pixelization_routines.pyx":197
 *                 elif (oysp + dysp > y_max):
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y             # <<<<<<<<<<<<<<
 *             overlap1 = overlap2 = 1.0
 *             for xi in range(2):
 */
              (__pyx_v_yiterv[1]) = (-__pyx_v_period_y);

              /* "yt/utilities/lib/pixelization_routines.pyx":195
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif (oysp + dysp > y_max):             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
            }
            __pyx_L16:;

            /* "yt/utilities/lib/pixelization_routines.pyx":185
 *             dysp = pdy[p]
 *             dsp = data[p]
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if (oxsp - dxsp < x_min):
 *                     xiter[1] = +1
 */
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":198
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 *             overlap1 = overlap2 = 1.0             # <<<<<<<<<<<<<<
 *             for xi in range(2):
 *                 if xiter[xi] == 999: continue
 */
          __pyx_v_overlap1 = 1.0;
          __pyx_v_overlap2 = 1.0;

          /* "yt/utilities/lib/pixelization_routines.pyx":199
 *                     yiterv[1] = -period_y
 *             overlap1 = overlap2 = 1.0
 *             for xi in range(2):             # <<<<<<<<<<<<<<
 *                 if xiter[xi] == 999: continue
 *                 xsp = oxsp + xiterv[xi]
 */
          for (__pyx_t_11 = 0; __pyx_t_11 < 2; __pyx_t_11+=1) {
            __pyx_v_xi = __pyx_t_11;

            /* "yt/utilities/lib/pixelization_routines.pyx":200
 *             overlap1 = overlap2 = 1.0
 *             for xi in range(2):
 *                 if xiter[xi] == 999: continue             # <<<<<<<<<<<<<<
 *                 xsp = oxsp + xiterv[xi]
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue
 */
            __pyx_t_2 = (((__pyx_v_xiter[__pyx_v_xi]) == 0x3E7) != 0);
            if (__pyx_t_2) {
              goto __pyx_L17_continue;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":201
 *             for xi in range(2):
 *                 if xiter[xi] == 999: continue
 *                 xsp = oxsp + xiterv[xi]             # <<<<<<<<<<<<<<
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue
 *                 for yi in range(2):
 */
            __pyx_v_xsp = (__pyx_v_oxsp + (__pyx_v_xiterv[__pyx_v_xi]));

            /* "yt/utilities/lib/pixelization_routines.pyx":202
 *                 if xiter[xi] == 999: continue
 *                 xsp = oxsp + xiterv[xi]
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue             # <<<<<<<<<<<<<<
 *                 for yi in range(2):
 *                     if yiter[yi] == 999: continue
 */
            __pyx_t_1 = (((__pyx_v_xsp + __pyx_v_dxsp) < __pyx_v_x_min) != 0);
            if (!__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L21_bool_binop_done;
            }
            __pyx_t_1 = (((__pyx_v_xsp - __pyx_v_dxsp) > __pyx_v_x_max) != 0);
            __pyx_t_2 = __pyx_t_1;
            __pyx_L21_bool_binop_done:;
            if (__pyx_t_2) {
              goto __pyx_L17_continue;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":203
 *                 xsp = oxsp + xiterv[xi]
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue
 *                 for yi in range(2):             # <<<<<<<<<<<<<<
 *                     if yiter[yi] == 999: continue
 *                     ysp = oysp + yiterv[yi]
 */
            for (__pyx_t_12 = 0; __pyx_t_12 < 2; __pyx_t_12+=1) {
              __pyx_v_yi = __pyx_t_12;

              /* "yt/utilities/lib/pixelization_routines.pyx":204
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue
 *                 for yi in range(2):
 *                     if yiter[yi] == 999: continue             # <<<<<<<<<<<<<<
 *                     ysp = oysp + yiterv[yi]
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue
 */
              __pyx_t_2 = (((__pyx_v_yiter[__pyx_v_yi]) == 0x3E7) != 0);
              if (__pyx_t_2) {
                goto __pyx_L23_continue;
              }

              /* "yt/utilities/lib/pixelization_routines.pyx":205
 *                 for yi in range(2):
 *                     if yiter[yi] == 999: continue
 *                     ysp = oysp + yiterv[yi]             # <<<<<<<<<<<<<<
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue
 *                     lc = <int> fmax(((xsp-dxsp-x_min)*ipx_dx),0)
 */
              __pyx_v_ysp = (__pyx_v_oysp + (__pyx_v_yiterv[__pyx_v_yi]));

              /* "yt/utilities/lib/pixelization_routines.pyx":206
 *                     if yiter[yi] == 999: continue
 *                     ysp = oysp + yiterv[yi]
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue             # <<<<<<<<<<<<<<
 *                     lc = <int> fmax(((xsp-dxsp-x_min)*ipx_dx),0)
 *                     lr = <int> fmax(((ysp-dysp-y_min)*ipx_dy),0)
 */
              __pyx_t_1 = (((__pyx_v_ysp + __pyx_v_dysp) < __pyx_v_y_min) != 0);
              if (!__pyx_t_1) {
              } else {
                __pyx_t_2 = __pyx_t_1;
                goto __pyx_L27_bool_binop_done;
              }
              __pyx_t_1 = (((__pyx_v_ysp - __pyx_v_dysp) > __pyx_v_y_max) != 0);
              __pyx_t_2 = __pyx_t_1;
              __pyx_L27_bool_binop_done:;
              if (__pyx_t_2) {
                goto __pyx_L23_continue;
              }

              /* "yt/utilities/lib/pixelization_routines.pyx":207
 *                     ysp = oysp + yiterv[yi]
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue
 *                     lc = <int> fmax(((xsp-dxsp-x_min)*ipx_dx),0)             # <<<<<<<<<<<<<<
 *                     lr = <int> fmax(((ysp-dysp-y_min)*ipx_dy),0)
 *                     # NOTE: This is a different way of doing it than in the C
 */
              __pyx_v_lc = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmax((((__pyx_v_xsp - __pyx_v_dxsp) - __pyx_v_x_min) * __pyx_v_ipx_dx), 0.0));

              /* "yt/utilities/lib/pixelization_routines.pyx":208
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue
 *                     lc = <int> fmax(((xsp-dxsp-x_min)*ipx_dx),0)
 *                     lr = <int> fmax(((ysp-dysp-y_min)*ipx_dy),0)             # <<<<<<<<<<<<<<
 *                     # NOTE: This is a different way of doing it than in the C
 *                     # routines.  In C, we were implicitly casting the
 */
              __pyx_v_lr = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmax((((__pyx_v_ysp - __pyx_v_dysp) - __pyx_v_y_min) * __pyx_v_ipx_dy), 0.0));

              /* "yt/utilities/lib/pixelization_routines.pyx":218
 *                     # comparison of j to rc (double).  So give ourselves a
 *                     # bonus row and bonus column here.
 *                     rc = <int> fmin(((xsp+dxsp-x_min)*ipx_dx + 1), buff.shape[1])             # <<<<<<<<<<<<<<
 *                     rr = <int> fmin(((ysp+dysp-y_min)*ipx_dy + 1), buff.shape[0])
 *                     # Note that we're iterating here over *y* in the i
 */
              __pyx_v_rc = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(((((__pyx_v_xsp + __pyx_v_dxsp) - __pyx_v_x_min) * __pyx_v_ipx_dx) + 1.0), (__pyx_v_buff.shape[1])));

              /* "yt/utilities/lib/pixelization_routines.pyx":219
 *                     # bonus row and bonus column here.
 *                     rc = <int> fmin(((xsp+dxsp-x_min)*ipx_dx + 1), buff.shape[1])
 *                     rr = <int> fmin(((ysp+dysp-y_min)*ipx_dy + 1), buff.shape[0])             # <<<<<<<<<<<<<<
 *                     # Note that we're iterating here over *y* in the i
 *                     # direction.  See the note above about this.
 */
              __pyx_v_rr = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(((((__pyx_v_ysp + __pyx_v_dysp) - __pyx_v_y_min) * __pyx_v_ipx_dy) + 1.0), (__pyx_v_buff.shape[0])));

              /* "yt/utilities/lib/pixelization_routines.pyx":222
 *                     # Note that we're iterating here over *y* in the i
 *                     # direction.  See the note above about this.
 *                     for i in range(lr, rr):             # <<<<<<<<<<<<<<
 *                         lypx = px_dy * i + y_min
 *                         rypx = px_dy * (i+1) + y_min
 */
              __pyx_t_13 = __pyx_v_rr;
              __pyx_t_14 = __pyx_t_13;
              for (__pyx_t_15 = __pyx_v_lr; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
                __pyx_v_i = __pyx_t_15;

                /* "yt/utilities/lib/pixelization_routines.pyx":223
 *                     # direction.  See the note above about this.
 *                     for i in range(lr, rr):
 *                         lypx = px_dy * i + y_min             # <<<<<<<<<<<<<<
 *                         rypx = px_dy * (i+1) + y_min
 *                         if antialias == 1:
 */
                __pyx_v_lypx = ((__pyx_v_px_dy * __pyx_v_i) + __pyx_v_y_min);

                /* "yt/utilities/lib/pixelization_routines.pyx":224
 *                     for i in range(lr, rr):
 *                         lypx = px_dy * i + y_min
 *                         rypx = px_dy * (i+1) + y_min             # <<<<<<<<<<<<<<
 *                         if antialias == 1:
 *                             overlap2 = ((fmin(rypx, ysp+dysp)
 */
                __pyx_v_rypx = ((__pyx_v_px_dy * (__pyx_v_i + 1)) + __pyx_v_y_min);

                /* "yt/utilities/lib/pixelization_routines.pyx":225
 *                         lypx = px_dy * i + y_min
 *                         rypx = px_dy * (i+1) + y_min
 *                         if antialias == 1:             # <<<<<<<<<<<<<<
 *                             overlap2 = ((fmin(rypx, ysp+dysp)
 *                                        - fmax(lypx, (ysp-dysp)))*ipx_dy)
 */
                __pyx_t_2 = ((__pyx_v_antialias == 1) != 0);
                if (__pyx_t_2) {

                  /* "yt/utilities/lib/pixelization_routines.pyx":227
 *                         if antialias == 1:
 *                             overlap2 = ((fmin(rypx, ysp+dysp)
 *                                        - fmax(lypx, (ysp-dysp)))*ipx_dy)             # <<<<<<<<<<<<<<
 *                         if overlap2 < 0.0: continue
 *                         for j in range(lc, rc):
 */
                  __pyx_v_overlap2 = ((__pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_rypx, (__pyx_v_ysp + __pyx_v_dysp)) - __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_lypx, (__pyx_v_ysp - __pyx_v_dysp))) * __pyx_v_ipx_dy);

                  /* "yt/utilities/lib/pixelization_routines.pyx":225
 *                         lypx = px_dy * i + y_min
 *                         rypx = px_dy * (i+1) + y_min
 *                         if antialias == 1:             # <<<<<<<<<<<<<<
 *                             overlap2 = ((fmin(rypx, ysp+dysp)
 *                                        - fmax(lypx, (ysp-dysp)))*ipx_dy)
 */
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":228
 *                             overlap2 = ((fmin(rypx, ysp+dysp)
 *                                        - fmax(lypx, (ysp-dysp)))*ipx_dy)
 *                         if overlap2 < 0.0: continue             # <<<<<<<<<<<<<<
 *                         for j in range(lc, rc):
 *                             lxpx = px_dx * j + x_min
 */
                __pyx_t_2 = ((__pyx_v_overlap2 < 0.0) != 0);
                if (__pyx_t_2) {
                  goto __pyx_L29_continue;
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":229
 *                                        - fmax(lypx, (ysp-dysp)))*ipx_dy)
 *                         if overlap2 < 0.0: continue
 *                         for j in range(lc, rc):             # <<<<<<<<<<<<<<
 *                             lxpx = px_dx * j + x_min
 *                             rxpx = px_dx * (j+1) + x_min
 */
                __pyx_t_16 = __pyx_v_rc;
                __pyx_t_17 = __pyx_t_16;
                for (__pyx_t_18 = __pyx_v_lc; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
                  __pyx_v_j = __pyx_t_18;

                  /* "yt/utilities/lib/pixelization_routines.pyx":230
 *                         if overlap2 < 0.0: continue
 *                         for j in range(lc, rc):
 *                             lxpx = px_dx * j + x_min             # <<<<<<<<<<<<<<
 *                             rxpx = px_dx * (j+1) + x_min
 *                             if line_width > 0:
 */
                  __pyx_v_lxpx = ((__pyx_v_px_dx * __pyx_v_j) + __pyx_v_x_min);

                  /* "yt/utilities/lib/pixelization_routines.pyx":231
 *                         for j in range(lc, rc):
 *                             lxpx = px_dx * j + x_min
 *                             rxpx = px_dx * (j+1) + x_min             # <<<<<<<<<<<<<<
 *                             if line_width > 0:
 *                                 # Here, we figure out if we're within
 */
                  __pyx_v_rxpx = ((__pyx_v_px_dx * (__pyx_v_j + 1)) + __pyx_v_x_min);

                  /* "yt/utilities/lib/pixelization_routines.pyx":232
 *                             lxpx = px_dx * j + x_min
 *                             rxpx = px_dx * (j+1) + x_min
 *                             if line_width > 0:             # <<<<<<<<<<<<<<
 *                                 # Here, we figure out if we're within
 *                                 # line_width*px_dx of the cell edge
 */
                  __pyx_t_2 = ((__pyx_v_line_width > 0.0) != 0);
                  if (__pyx_t_2) {

                    /* "yt/utilities/lib/pixelization_routines.pyx":236
 *                                 # line_width*px_dx of the cell edge
 *                                 # Midpoint of x:
 *                                 cx = (rxpx+lxpx)*0.5             # <<<<<<<<<<<<<<
 *                                 ld_x = fmin(fabs(cx - (xsp+dxsp)),
 *                                             fabs(cx - (xsp-dxsp)))
 */
                    __pyx_v_cx = ((__pyx_v_rxpx + __pyx_v_lxpx) * 0.5);

                    /* "yt/utilities/lib/pixelization_routines.pyx":237
 *                                 # Midpoint of x:
 *                                 cx = (rxpx+lxpx)*0.5
 *                                 ld_x = fmin(fabs(cx - (xsp+dxsp)),             # <<<<<<<<<<<<<<
 *                                             fabs(cx - (xsp-dxsp)))
 *                                 ld_x *= ipx_dx
 */
                    __pyx_v_ld_x = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_f_2yt_9utilities_3lib_8fp_utils_fabs((__pyx_v_cx - (__pyx_v_xsp + __pyx_v_dxsp))), __pyx_f_2yt_9utilities_3lib_8fp_utils_fabs((__pyx_v_cx - (__pyx_v_xsp - __pyx_v_dxsp))));

                    /* "yt/utilities/lib/pixelization_routines.pyx":239
 *                                 ld_x = fmin(fabs(cx - (xsp+dxsp)),
 *                                             fabs(cx - (xsp-dxsp)))
 *                                 ld_x *= ipx_dx             # <<<<<<<<<<<<<<
 *                                 # Midpoint of y:
 *                                 cy = (rypx+lypx)*0.5
 */
                    __pyx_v_ld_x = (__pyx_v_ld_x * __pyx_v_ipx_dx);

                    /* "yt/utilities/lib/pixelization_routines.pyx":241
 *                                 ld_x *= ipx_dx
 *                                 # Midpoint of y:
 *                                 cy = (rypx+lypx)*0.5             # <<<<<<<<<<<<<<
 *                                 ld_y = fmin(fabs(cy - (ysp+dysp)),
 *                                             fabs(cy - (ysp-dysp)))
 */
                    __pyx_v_cy = ((__pyx_v_rypx + __pyx_v_lypx) * 0.5);

                    /* "yt/utilities/lib/pixelization_routines.pyx":242
 *                                 # Midpoint of y:
 *                                 cy = (rypx+lypx)*0.5
 *                                 ld_y = fmin(fabs(cy - (ysp+dysp)),             # <<<<<<<<<<<<<<
 *                                             fabs(cy - (ysp-dysp)))
 *                                 ld_y *= ipx_dy
 */
                    __pyx_v_ld_y = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_f_2yt_9utilities_3lib_8fp_utils_fabs((__pyx_v_cy - (__pyx_v_ysp + __pyx_v_dysp))), __pyx_f_2yt_9utilities_3lib_8fp_utils_fabs((__pyx_v_cy - (__pyx_v_ysp - __pyx_v_dysp))));

                    /* "yt/utilities/lib/pixelization_routines.pyx":244
 *                                 ld_y = fmin(fabs(cy - (ysp+dysp)),
 *                                             fabs(cy - (ysp-dysp)))
 *                                 ld_y *= ipx_dy             # <<<<<<<<<<<<<<
 *                                 if ld_x <= line_width or ld_y <= line_width:
 *                                     buff[i,j] = 1.0
 */
                    __pyx_v_ld_y = (__pyx_v_ld_y * __pyx_v_ipx_dy);

                    /* "yt/utilities/lib/pixelization_routines.pyx":245
 *                                             fabs(cy - (ysp-dysp)))
 *                                 ld_y *= ipx_dy
 *                                 if ld_x <= line_width or ld_y <= line_width:             # <<<<<<<<<<<<<<
 *                                     buff[i,j] = 1.0
 *                             elif antialias == 1:
 */
                    __pyx_t_1 = ((__pyx_v_ld_x <= __pyx_v_line_width) != 0);
                    if (!__pyx_t_1) {
                    } else {
                      __pyx_t_2 = __pyx_t_1;
                      goto __pyx_L37_bool_binop_done;
                    }
                    __pyx_t_1 = ((__pyx_v_ld_y <= __pyx_v_line_width) != 0);
                    __pyx_t_2 = __pyx_t_1;
                    __pyx_L37_bool_binop_done:;
                    if (__pyx_t_2) {

                      /* "yt/utilities/lib/pixelization_routines.pyx":246
 *                                 ld_y *= ipx_dy
 *                                 if ld_x <= line_width or ld_y <= line_width:
 *                                     buff[i,j] = 1.0             # <<<<<<<<<<<<<<
 *                             elif antialias == 1:
 *                                 overlap1 = ((fmin(rxpx, xsp+dxsp)
 */
                      __pyx_t_10 = __pyx_v_i;
                      __pyx_t_19 = __pyx_v_j;
                      *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_10 * __pyx_v_buff.strides[0]) ) + __pyx_t_19 * __pyx_v_buff.strides[1]) )) = 1.0;

                      /* "yt/utilities/lib/pixelization_routines.pyx":245
 *                                             fabs(cy - (ysp-dysp)))
 *                                 ld_y *= ipx_dy
 *                                 if ld_x <= line_width or ld_y <= line_width:             # <<<<<<<<<<<<<<
 *                                     buff[i,j] = 1.0
 *                             elif antialias == 1:
 */
                    }

                    /* "yt/utilities/lib/pixelization_routines.pyx":232
 *                             lxpx = px_dx * j + x_min
 *                             rxpx = px_dx * (j+1) + x_min
 *                             if line_width > 0:             # <<<<<<<<<<<<<<
 *                                 # Here, we figure out if we're within
 *                                 # line_width*px_dx of the cell edge
 */
                    goto __pyx_L35;
                  }

                  /* "yt/utilities/lib/pixelization_routines.pyx":247
 *                                 if ld_x <= line_width or ld_y <= line_width:
 *                                     buff[i,j] = 1.0
 *                             elif antialias == 1:             # <<<<<<<<<<<<<<
 *                                 overlap1 = ((fmin(rxpx, xsp+dxsp)
 *                                            - fmax(lxpx, (xsp-dxsp)))*ipx_dx)
 */
                  __pyx_t_2 = ((__pyx_v_antialias == 1) != 0);
                  if (__pyx_t_2) {

                    /* "yt/utilities/lib/pixelization_routines.pyx":249
 *                             elif antialias == 1:
 *                                 overlap1 = ((fmin(rxpx, xsp+dxsp)
 *                                            - fmax(lxpx, (xsp-dxsp)))*ipx_dx)             # <<<<<<<<<<<<<<
 *                                 if overlap1 < 0.0: continue
 *                                 # This next line is not commented out because
 */
                    __pyx_v_overlap1 = ((__pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_rxpx, (__pyx_v_xsp + __pyx_v_dxsp)) - __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_lxpx, (__pyx_v_xsp - __pyx_v_dxsp))) * __pyx_v_ipx_dx);

                    /* "yt/utilities/lib/pixelization_routines.pyx":250
 *                                 overlap1 = ((fmin(rxpx, xsp+dxsp)
 *                                            - fmax(lxpx, (xsp-dxsp)))*ipx_dx)
 *                                 if overlap1 < 0.0: continue             # <<<<<<<<<<<<<<
 *                                 # This next line is not commented out because
 *                                 # it's an oddity; we actually want to skip
 */
                    __pyx_t_2 = ((__pyx_v_overlap1 < 0.0) != 0);
                    if (__pyx_t_2) {
                      goto __pyx_L33_continue;
                    }

                    /* "yt/utilities/lib/pixelization_routines.pyx":258
 *                                 # This will reduce artifacts if we ever move to
 *                                 # compositing instead of replacing bitmaps.
 *                                 if overlap1 * overlap2 < 1.e-6: continue             # <<<<<<<<<<<<<<
 *                                 # make sure pixel value is not a NaN before incrementing it
 *                                 if buff[i,j] != buff[i,j]: buff[i,j] = 0.0
 */
                    __pyx_t_2 = (((__pyx_v_overlap1 * __pyx_v_overlap2) < 1.e-6) != 0);
                    if (__pyx_t_2) {
                      goto __pyx_L33_continue;
                    }

                    /* "yt/utilities/lib/pixelization_routines.pyx":260
 *                                 if overlap1 * overlap2 < 1.e-6: continue
 *                                 # make sure pixel value is not a NaN before incrementing it
 *                                 if buff[i,j] != buff[i,j]: buff[i,j] = 0.0             # <<<<<<<<<<<<<<
 *                                 buff[i,j] += (dsp * overlap1) * overlap2
 *                             else:
 */
                    __pyx_t_19 = __pyx_v_i;
                    __pyx_t_10 = __pyx_v_j;
                    __pyx_t_20 = __pyx_v_i;
                    __pyx_t_21 = __pyx_v_j;
                    __pyx_t_2 = (((*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_19 * __pyx_v_buff.strides[0]) ) + __pyx_t_10 * __pyx_v_buff.strides[1]) ))) != (*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_20 * __pyx_v_buff.strides[0]) ) + __pyx_t_21 * __pyx_v_buff.strides[1]) )))) != 0);
                    if (__pyx_t_2) {
                      __pyx_t_21 = __pyx_v_i;
                      __pyx_t_20 = __pyx_v_j;
                      *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_21 * __pyx_v_buff.strides[0]) ) + __pyx_t_20 * __pyx_v_buff.strides[1]) )) = 0.0;
                    }

                    /* "yt/utilities/lib/pixelization_routines.pyx":261
 *                                 # make sure pixel value is not a NaN before incrementing it
 *                                 if buff[i,j] != buff[i,j]: buff[i,j] = 0.0
 *                                 buff[i,j] += (dsp * overlap1) * overlap2             # <<<<<<<<<<<<<<
 *                             else:
 *                                 buff[i,j] = dsp
 */
                    __pyx_t_20 = __pyx_v_i;
                    __pyx_t_21 = __pyx_v_j;
                    *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_20 * __pyx_v_buff.strides[0]) ) + __pyx_t_21 * __pyx_v_buff.strides[1]) )) += ((__pyx_v_dsp * __pyx_v_overlap1) * __pyx_v_overlap2);

                    /* "yt/utilities/lib/pixelization_routines.pyx":247
 *                                 if ld_x <= line_width or ld_y <= line_width:
 *                                     buff[i,j] = 1.0
 *                             elif antialias == 1:             # <<<<<<<<<<<<<<
 *                                 overlap1 = ((fmin(rxpx, xsp+dxsp)
 *                                            - fmax(lxpx, (xsp-dxsp)))*ipx_dx)
 */
                    goto __pyx_L35;
                  }

                  /* "yt/utilities/lib/pixelization_routines.pyx":263
 *                                 buff[i,j] += (dsp * overlap1) * overlap2
 *                             else:
 *                                 buff[i,j] = dsp             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
                  /*else*/ {
                    __pyx_t_21 = __pyx_v_i;
                    __pyx_t_20 = __pyx_v_j;
                    *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_21 * __pyx_v_buff.strides[0]) ) + __pyx_t_20 * __pyx_v_buff.strides[1]) )) = __pyx_v_dsp;
                  }
                  __pyx_L35:;
                  __pyx_L33_continue:;
                }
                __pyx_L29_continue:;
              }
              __pyx_L23_continue:;
            }
            __pyx_L17_continue:;
          }
        }
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":176
 *     #       first axis : y_min .. y_max
 *     #       second axis: x_min .. x_max
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for p in range(px.shape[0]):
 *             xiter[1] = yiter[1] = 999
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L11;
        }
        __pyx_L11:;
      }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":88
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cartesian(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                        any_float[:] px,
 *                        any_float[:] py,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_cartesian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_buff, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_px, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_py, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdx, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdy, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_data, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":268
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cartesian_nodal(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                              np.float64_t[:] px,
 *                              np.float64_t[:] py,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_3pixelize_cartesian_nodal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_3pixelize_cartesian_nodal = {"pixelize_cartesian_nodal", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_3pixelize_cartesian_nodal, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_3pixelize_cartesian_nodal(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_buff = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_px = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_py = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pz = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdx = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdy = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdz = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_data = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_float64_t __pyx_v_coord;
  PyObject *__pyx_v_bounds = 0;
  CYTHON_UNUSED int __pyx_v_antialias;
  PyObject *__pyx_v_period = 0;
  int __pyx_v_check_period;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pixelize_cartesian_nodal (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buff,&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pz,&__pyx_n_s_pdx,&__pyx_n_s_pdy,&__pyx_n_s_pdz,&__pyx_n_s_data,&__pyx_n_s_coord,&__pyx_n_s_bounds,&__pyx_n_s_antialias,&__pyx_n_s_period,&__pyx_n_s_check_period,0};
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};

    /* "yt/utilities/lib/pixelization_routines.pyx":279
 *                              bounds,
 *                              int antialias = 1,
 *                              period = None,             # <<<<<<<<<<<<<<
 *                              int check_period = 1):
 *     cdef np.float64_t x_min, x_max, y_min, y_max
 */
    values[11] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian_nodal", 0, 10, 13, 1); __PYX_ERR(0, 268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian_nodal", 0, 10, 13, 2); __PYX_ERR(0, 268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian_nodal", 0, 10, 13, 3); __PYX_ERR(0, 268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian_nodal", 0, 10, 13, 4); __PYX_ERR(0, 268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian_nodal", 0, 10, 13, 5); __PYX_ERR(0, 268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian_nodal", 0, 10, 13, 6); __PYX_ERR(0, 268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian_nodal", 0, 10, 13, 7); __PYX_ERR(0, 268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coord)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian_nodal", 0, 10, 13, 8); __PYX_ERR(0, 268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cartesian_nodal", 0, 10, 13, 9); __PYX_ERR(0, 268, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_antialias);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_period);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_check_period);
          if (value) { values[12] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pixelize_cartesian_nodal") < 0)) __PYX_ERR(0, 268, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buff = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_buff.memview)) __PYX_ERR(0, 268, __pyx_L3_error)
    __pyx_v_px = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_px.memview)) __PYX_ERR(0, 269, __pyx_L3_error)
    __pyx_v_py = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_py.memview)) __PYX_ERR(0, 270, __pyx_L3_error)
    __pyx_v_pz = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pz.memview)) __PYX_ERR(0, 271, __pyx_L3_error)
    __pyx_v_pdx = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdx.memview)) __PYX_ERR(0, 272, __pyx_L3_error)
    __pyx_v_pdy = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdy.memview)) __PYX_ERR(0, 273, __pyx_L3_error)
    __pyx_v_pdz = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdz.memview)) __PYX_ERR(0, 274, __pyx_L3_error)
    __pyx_v_data = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(values[7], PyBUF_WRITABLE); if (unlikely(!__pyx_v_data.memview)) __PYX_ERR(0, 275, __pyx_L3_error)
    __pyx_v_coord = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_coord == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 276, __pyx_L3_error)
    __pyx_v_bounds = values[9];
    if (values[10]) {
      __pyx_v_antialias = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_antialias == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L3_error)
    } else {
      __pyx_v_antialias = ((int)1);
    }
    __pyx_v_period = values[11];
    if (values[12]) {
      __pyx_v_check_period = __Pyx_PyInt_As_int(values[12]); if (unlikely((__pyx_v_check_period == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L3_error)
    } else {
      __pyx_v_check_period = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pixelize_cartesian_nodal", 0, 10, 13, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 268, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_cartesian_nodal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_2pixelize_cartesian_nodal(__pyx_self, __pyx_v_buff, __pyx_v_px, __pyx_v_py, __pyx_v_pz, __pyx_v_pdx, __pyx_v_pdy, __pyx_v_pdz, __pyx_v_data, __pyx_v_coord, __pyx_v_bounds, __pyx_v_antialias, __pyx_v_period, __pyx_v_check_period);

  /* "yt/utilities/lib/pixelization_routines.pyx":268
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cartesian_nodal(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                              np.float64_t[:] px,
 *                              np.float64_t[:] py,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_2pixelize_cartesian_nodal(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_px, __Pyx_memviewslice __pyx_v_py, __Pyx_memviewslice __pyx_v_pz, __Pyx_memviewslice __pyx_v_pdx, __Pyx_memviewslice __pyx_v_pdy, __Pyx_memviewslice __pyx_v_pdz, __Pyx_memviewslice __pyx_v_data, __pyx_t_5numpy_float64_t __pyx_v_coord, PyObject *__pyx_v_bounds, CYTHON_UNUSED int __pyx_v_antialias, PyObject *__pyx_v_period, int __pyx_v_check_period) {
  __pyx_t_5numpy_float64_t __pyx_v_x_min;
  __pyx_t_5numpy_float64_t __pyx_v_x_max;
  __pyx_t_5numpy_float64_t __pyx_v_y_min;
  __pyx_t_5numpy_float64_t __pyx_v_y_max;
  __pyx_t_5numpy_float64_t __pyx_v_period_x;
  __pyx_t_5numpy_float64_t __pyx_v_period_y;
  __pyx_t_5numpy_float64_t __pyx_v_width;
  __pyx_t_5numpy_float64_t __pyx_v_height;
  __pyx_t_5numpy_float64_t __pyx_v_px_dx;
  __pyx_t_5numpy_float64_t __pyx_v_px_dy;
  __pyx_t_5numpy_float64_t __pyx_v_ipx_dx;
  __pyx_t_5numpy_float64_t __pyx_v_ipx_dy;
  __pyx_t_5numpy_float64_t __pyx_v_cx;
  __pyx_t_5numpy_float64_t __pyx_v_cy;
  __pyx_t_5numpy_float64_t __pyx_v_cz;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_p;
  int __pyx_v_xi;
  int __pyx_v_yi;
  int __pyx_v_lc;
  int __pyx_v_lr;
  int __pyx_v_rc;
  int __pyx_v_rr;
  __pyx_t_5numpy_float64_t __pyx_v_lypx;
  __pyx_t_5numpy_float64_t __pyx_v_rypx;
  __pyx_t_5numpy_float64_t __pyx_v_lxpx;
  __pyx_t_5numpy_float64_t __pyx_v_rxpx;
  CYTHON_UNUSED __pyx_t_5numpy_float64_t __pyx_v_overlap1;
  CYTHON_UNUSED __pyx_t_5numpy_float64_t __pyx_v_overlap2;
  __pyx_t_5numpy_float64_t __pyx_v_oxsp;
  __pyx_t_5numpy_float64_t __pyx_v_oysp;
  __pyx_t_5numpy_float64_t __pyx_v_ozsp;
  __pyx_t_5numpy_float64_t __pyx_v_xsp;
  __pyx_t_5numpy_float64_t __pyx_v_ysp;
  __pyx_t_5numpy_float64_t __pyx_v_zsp;
  __pyx_t_5numpy_float64_t __pyx_v_dxsp;
  __pyx_t_5numpy_float64_t __pyx_v_dysp;
  __pyx_t_5numpy_float64_t __pyx_v_dzsp;
  int __pyx_v_xiter[2];
  int __pyx_v_yiter[2];
  int __pyx_v_ii;
  int __pyx_v_jj;
  int __pyx_v_kk;
  int __pyx_v_ind;
  __pyx_t_5numpy_float64_t __pyx_v_xiterv[2];
  __pyx_t_5numpy_float64_t __pyx_v_yiterv[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_5numpy_float64_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pixelize_cartesian_nodal", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":282
 *                              int check_period = 1):
 *     cdef np.float64_t x_min, x_max, y_min, y_max
 *     cdef np.float64_t period_x = 0.0, period_y = 0.0             # <<<<<<<<<<<<<<
 *     cdef np.float64_t width, height, px_dx, px_dy, ipx_dx, ipx_dy
 *     cdef np.float64_t cx, cy, cz
 */
  __pyx_v_period_x = 0.0;
  __pyx_v_period_y = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":298
 *     cdef np.float64_t xiterv[2]
 *     cdef np.float64_t yiterv[2]
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  __pyx_t_1 = (__pyx_v_period != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/pixelization_routines.pyx":299
 *     cdef np.float64_t yiterv[2]
 *     if period is not None:
 *         period_x = period[0]             # <<<<<<<<<<<<<<
 *         period_y = period[1]
 *     x_min = bounds[0]
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_period, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_period_x = __pyx_t_4;

    /* "yt/utilities/lib/pixelization_routines.pyx":300
 *     if period is not None:
 *         period_x = period[0]
 *         period_y = period[1]             # <<<<<<<<<<<<<<
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_period, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_period_y = __pyx_t_4;

    /* "yt/utilities/lib/pixelization_routines.pyx":298
 *     cdef np.float64_t xiterv[2]
 *     cdef np.float64_t yiterv[2]
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":301
 *         period_x = period[0]
 *         period_y = period[1]
 *     x_min = bounds[0]             # <<<<<<<<<<<<<<
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x_min = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":302
 *         period_y = period[1]
 *     x_min = bounds[0]
 *     x_max = bounds[1]             # <<<<<<<<<<<<<<
 *     y_min = bounds[2]
 *     y_max = bounds[3]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x_max = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":303
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 *     y_min = bounds[2]             # <<<<<<<<<<<<<<
 *     y_max = bounds[3]
 *     width = x_max - x_min
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_y_min = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":304
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 *     y_max = bounds[3]             # <<<<<<<<<<<<<<
 *     width = x_max - x_min
 *     height = y_max - y_min
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_y_max = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":305
 *     y_min = bounds[2]
 *     y_max = bounds[3]
 *     width = x_max - x_min             # <<<<<<<<<<<<<<
 *     height = y_max - y_min
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 */
  __pyx_v_width = (__pyx_v_x_max - __pyx_v_x_min);

  /* "yt/utilities/lib/pixelization_routines.pyx":306
 *     y_max = bounds[3]
 *     width = x_max - x_min
 *     height = y_max - y_min             # <<<<<<<<<<<<<<
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 */
  __pyx_v_height = (__pyx_v_y_max - __pyx_v_y_min);

  /* "yt/utilities/lib/pixelization_routines.pyx":307
 *     width = x_max - x_min
 *     height = y_max - y_min
 *     px_dx = width / (<np.float64_t> buff.shape[1])             # <<<<<<<<<<<<<<
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 *     ipx_dx = 1.0 / px_dx
 */
  __pyx_v_px_dx = (__pyx_v_width / ((__pyx_t_5numpy_float64_t)(__pyx_v_buff.shape[1])));

  /* "yt/utilities/lib/pixelization_routines.pyx":308
 *     height = y_max - y_min
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 *     px_dy = height / (<np.float64_t> buff.shape[0])             # <<<<<<<<<<<<<<
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 */
  __pyx_v_px_dy = (__pyx_v_height / ((__pyx_t_5numpy_float64_t)(__pyx_v_buff.shape[0])));

  /* "yt/utilities/lib/pixelization_routines.pyx":309
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 *     ipx_dx = 1.0 / px_dx             # <<<<<<<<<<<<<<
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \
 */
  __pyx_v_ipx_dx = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_px_dx);

  /* "yt/utilities/lib/pixelization_routines.pyx":310
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy             # <<<<<<<<<<<<<<
 *     if px.shape[0] != py.shape[0] or \
 *        px.shape[0] != pz.shape[0] or \
 */
  __pyx_v_ipx_dy = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_px_dy);

  /* "yt/utilities/lib/pixelization_routines.pyx":311
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pz.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_py.shape[0])) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":312
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \
 *        px.shape[0] != pz.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_pz.shape[0])) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":313
 *     if px.shape[0] != py.shape[0] or \
 *        px.shape[0] != pz.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdy.shape[0] or \
 *        px.shape[0] != pdz.shape[0] or \
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_pdx.shape[0])) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":314
 *        px.shape[0] != pz.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdz.shape[0] or \
 *        px.shape[0] != data.shape[0]:
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_pdy.shape[0])) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":315
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 *        px.shape[0] != pdz.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != data.shape[0]:
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_pdz.shape[0])) != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":316
 *        px.shape[0] != pdy.shape[0] or \
 *        px.shape[0] != pdz.shape[0] or \
 *        px.shape[0] != data.shape[0]:             # <<<<<<<<<<<<<<
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 *     xiter[0] = yiter[0] = 0
 */
  __pyx_t_1 = (((__pyx_v_px.shape[0]) != (__pyx_v_data.shape[0])) != 0);
  __pyx_t_2 = __pyx_t_1;
  __pyx_L5_bool_binop_done:;

  /* "yt/utilities/lib/pixelization_routines.pyx":311
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pz.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \
 */
  if (unlikely(__pyx_t_2)) {

    /* "yt/utilities/lib/pixelization_routines.pyx":317
 *        px.shape[0] != pdz.shape[0] or \
 *        px.shape[0] != data.shape[0]:
 *         raise YTPixelizeError("Arrays are not of correct shape.")             # <<<<<<<<<<<<<<
 *     xiter[0] = yiter[0] = 0
 *     xiterv[0] = yiterv[0] = 0.0
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_YTPixelizeError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_kp_u_Arrays_are_not_of_correct_shape) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_u_Arrays_are_not_of_correct_shape);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 317, __pyx_L1_error)

    /* "yt/utilities/lib/pixelization_routines.pyx":311
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pz.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":318
 *        px.shape[0] != data.shape[0]:
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 *     xiter[0] = yiter[0] = 0             # <<<<<<<<<<<<<<
 *     xiterv[0] = yiterv[0] = 0.0
 *     # Here's a basic outline of what we're going to do here.  The xiter and
 */
  (__pyx_v_xiter[0]) = 0;
  (__pyx_v_yiter[0]) = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":319
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 *     xiter[0] = yiter[0] = 0
 *     xiterv[0] = yiterv[0] = 0.0             # <<<<<<<<<<<<<<
 *     # Here's a basic outline of what we're going to do here.  The xiter and
 *     # yiter variables govern whether or not we should check periodicity -- are
 */
  (__pyx_v_xiterv[0]) = 0.0;
  (__pyx_v_yiterv[0]) = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":363
 *     #       first axis : y_min .. y_max
 *     #       second axis: x_min .. x_max
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for p in range(px.shape[0]):
 *             xiter[1] = yiter[1] = 999
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "yt/utilities/lib/pixelization_routines.pyx":364
 *     #       second axis: x_min .. x_max
 *     with nogil:
 *         for p in range(px.shape[0]):             # <<<<<<<<<<<<<<
 *             xiter[1] = yiter[1] = 999
 *             xiterv[1] = yiterv[1] = 0.0
 */
        __pyx_t_7 = (__pyx_v_px.shape[0]);
        __pyx_t_8 = __pyx_t_7;
        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
          __pyx_v_p = __pyx_t_9;

          /* "yt/utilities/lib/pixelization_routines.pyx":365
 *     with nogil:
 *         for p in range(px.shape[0]):
 *             xiter[1] = yiter[1] = 999             # <<<<<<<<<<<<<<
 *             xiterv[1] = yiterv[1] = 0.0
 *             oxsp = px[p]
 */
          (__pyx_v_xiter[1]) = 0x3E7;
          (__pyx_v_yiter[1]) = 0x3E7;

          /* "yt/utilities/lib/pixelization_routines.pyx":366
 *         for p in range(px.shape[0]):
 *             xiter[1] = yiter[1] = 999
 *             xiterv[1] = yiterv[1] = 0.0             # <<<<<<<<<<<<<<
 *             oxsp = px[p]
 *             oysp = py[p]
 */
          (__pyx_v_xiterv[1]) = 0.0;
          (__pyx_v_yiterv[1]) = 0.0;

          /* "yt/utilities/lib/pixelization_routines.pyx":367
 *             xiter[1] = yiter[1] = 999
 *             xiterv[1] = yiterv[1] = 0.0
 *             oxsp = px[p]             # <<<<<<<<<<<<<<
 *             oysp = py[p]
 *             ozsp = pz[p]
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_oxsp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_px.data + __pyx_t_10 * __pyx_v_px.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":368
 *             xiterv[1] = yiterv[1] = 0.0
 *             oxsp = px[p]
 *             oysp = py[p]             # <<<<<<<<<<<<<<
 *             ozsp = pz[p]
 *             dxsp = pdx[p]
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_oysp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_py.data + __pyx_t_10 * __pyx_v_py.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":369
 *             oxsp = px[p]
 *             oysp = py[p]
 *             ozsp = pz[p]             # <<<<<<<<<<<<<<
 *             dxsp = pdx[p]
 *             dysp = pdy[p]
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_ozsp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pz.data + __pyx_t_10 * __pyx_v_pz.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":370
 *             oysp = py[p]
 *             ozsp = pz[p]
 *             dxsp = pdx[p]             # <<<<<<<<<<<<<<
 *             dysp = pdy[p]
 *             dzsp = pdz[p]
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_dxsp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pdx.data + __pyx_t_10 * __pyx_v_pdx.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":371
 *             ozsp = pz[p]
 *             dxsp = pdx[p]
 *             dysp = pdy[p]             # <<<<<<<<<<<<<<
 *             dzsp = pdz[p]
 *             if check_period == 1:
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_dysp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pdy.data + __pyx_t_10 * __pyx_v_pdy.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":372
 *             dxsp = pdx[p]
 *             dysp = pdy[p]
 *             dzsp = pdz[p]             # <<<<<<<<<<<<<<
 *             if check_period == 1:
 *                 if (oxsp - dxsp < x_min):
 */
          __pyx_t_10 = __pyx_v_p;
          __pyx_v_dzsp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pdz.data + __pyx_t_10 * __pyx_v_pdz.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":373
 *             dysp = pdy[p]
 *             dzsp = pdz[p]
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if (oxsp - dxsp < x_min):
 *                     xiter[1] = +1
 */
          __pyx_t_2 = ((__pyx_v_check_period == 1) != 0);
          if (__pyx_t_2) {

            /* "yt/utilities/lib/pixelization_routines.pyx":374
 *             dzsp = pdz[p]
 *             if check_period == 1:
 *                 if (oxsp - dxsp < x_min):             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
            __pyx_t_2 = (((__pyx_v_oxsp - __pyx_v_dxsp) < __pyx_v_x_min) != 0);
            if (__pyx_t_2) {

              /* "yt/utilities/lib/pixelization_routines.pyx":375
 *             if check_period == 1:
 *                 if (oxsp - dxsp < x_min):
 *                     xiter[1] = +1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = period_x
 *                 elif (oxsp + dxsp > x_max):
 */
              (__pyx_v_xiter[1]) = 1;

              /* "yt/utilities/lib/pixelization_routines.pyx":376
 *                 if (oxsp - dxsp < x_min):
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x             # <<<<<<<<<<<<<<
 *                 elif (oxsp + dxsp > x_max):
 *                     xiter[1] = -1
 */
              (__pyx_v_xiterv[1]) = __pyx_v_period_x;

              /* "yt/utilities/lib/pixelization_routines.pyx":374
 *             dzsp = pdz[p]
 *             if check_period == 1:
 *                 if (oxsp - dxsp < x_min):             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
              goto __pyx_L17;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":377
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif (oxsp + dxsp > x_max):             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
            __pyx_t_2 = (((__pyx_v_oxsp + __pyx_v_dxsp) > __pyx_v_x_max) != 0);
            if (__pyx_t_2) {

              /* "yt/utilities/lib/pixelization_routines.pyx":378
 *                     xiterv[1] = period_x
 *                 elif (oxsp + dxsp > x_max):
 *                     xiter[1] = -1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = -period_x
 *                 if (oysp - dysp < y_min):
 */
              (__pyx_v_xiter[1]) = -1;

              /* "yt/utilities/lib/pixelization_routines.pyx":379
 *                 elif (oxsp + dxsp > x_max):
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x             # <<<<<<<<<<<<<<
 *                 if (oysp - dysp < y_min):
 *                     yiter[1] = +1
 */
              (__pyx_v_xiterv[1]) = (-__pyx_v_period_x);

              /* "yt/utilities/lib/pixelization_routines.pyx":377
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif (oxsp + dxsp > x_max):             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
            }
            __pyx_L17:;

            /* "yt/utilities/lib/pixelization_routines.pyx":380
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if (oysp - dysp < y_min):             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
            __pyx_t_2 = (((__pyx_v_oysp - __pyx_v_dysp) < __pyx_v_y_min) != 0);
            if (__pyx_t_2) {

              /* "yt/utilities/lib/pixelization_routines.pyx":381
 *                     xiterv[1] = -period_x
 *                 if (oysp - dysp < y_min):
 *                     yiter[1] = +1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = period_y
 *                 elif (oysp + dysp > y_max):
 */
              (__pyx_v_yiter[1]) = 1;

              /* "yt/utilities/lib/pixelization_routines.pyx":382
 *                 if (oysp - dysp < y_min):
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y             # <<<<<<<<<<<<<<
 *                 elif (oysp + dysp > y_max):
 *                     yiter[1] = -1
 */
              (__pyx_v_yiterv[1]) = __pyx_v_period_y;

              /* "yt/utilities/lib/pixelization_routines.pyx":380
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if (oysp - dysp < y_min):             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
              goto __pyx_L18;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":383
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif (oysp + dysp > y_max):             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
            __pyx_t_2 = (((__pyx_v_oysp + __pyx_v_dysp) > __pyx_v_y_max) != 0);
            if (__pyx_t_2) {

              /* "yt/utilities/lib/pixelization_routines.pyx":384
 *                     yiterv[1] = period_y
 *                 elif (oysp + dysp > y_max):
 *                     yiter[1] = -1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = -period_y
 *             overlap1 = overlap2 = 1.0
 */
              (__pyx_v_yiter[1]) = -1;

              /* "yt/utilities/lib/pixelization_routines.pyx":385
 *                 elif (oysp + dysp > y_max):
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y             # <<<<<<<<<<<<<<
 *             overlap1 = overlap2 = 1.0
 *             zsp = ozsp
 */
              (__pyx_v_yiterv[1]) = (-__pyx_v_period_y);

              /* "yt/utilities/lib/pixelization_routines.pyx":383
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif (oysp + dysp > y_max):             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
            }
            __pyx_L18:;

            /* "yt/utilities/lib/pixelization_routines.pyx":373
 *             dysp = pdy[p]
 *             dzsp = pdz[p]
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if (oxsp - dxsp < x_min):
 *                     xiter[1] = +1
 */
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":386
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 *             overlap1 = overlap2 = 1.0             # <<<<<<<<<<<<<<
 *             zsp = ozsp
 *             for xi in range(2):
 */
          __pyx_v_overlap1 = 1.0;
          __pyx_v_overlap2 = 1.0;

          /* "yt/utilities/lib/pixelization_routines.pyx":387
 *                     yiterv[1] = -period_y
 *             overlap1 = overlap2 = 1.0
 *             zsp = ozsp             # <<<<<<<<<<<<<<
 *             for xi in range(2):
 *                 if xiter[xi] == 999: continue
 */
          __pyx_v_zsp = __pyx_v_ozsp;

          /* "yt/utilities/lib/pixelization_routines.pyx":388
 *             overlap1 = overlap2 = 1.0
 *             zsp = ozsp
 *             for xi in range(2):             # <<<<<<<<<<<<<<
 *                 if xiter[xi] == 999: continue
 *                 xsp = oxsp + xiterv[xi]
 */
          for (__pyx_t_11 = 0; __pyx_t_11 < 2; __pyx_t_11+=1) {
            __pyx_v_xi = __pyx_t_11;

            /* "yt/utilities/lib/pixelization_routines.pyx":389
 *             zsp = ozsp
 *             for xi in range(2):
 *                 if xiter[xi] == 999: continue             # <<<<<<<<<<<<<<
 *                 xsp = oxsp + xiterv[xi]
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue
 */
            __pyx_t_2 = (((__pyx_v_xiter[__pyx_v_xi]) == 0x3E7) != 0);
            if (__pyx_t_2) {
              goto __pyx_L19_continue;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":390
 *             for xi in range(2):
 *                 if xiter[xi] == 999: continue
 *                 xsp = oxsp + xiterv[xi]             # <<<<<<<<<<<<<<
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue
 *                 for yi in range(2):
 */
            __pyx_v_xsp = (__pyx_v_oxsp + (__pyx_v_xiterv[__pyx_v_xi]));

            /* "yt/utilities/lib/pixelization_routines.pyx":391
 *                 if xiter[xi] == 999: continue
 *                 xsp = oxsp + xiterv[xi]
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue             # <<<<<<<<<<<<<<
 *                 for yi in range(2):
 *                     if yiter[yi] == 999: continue
 */
            __pyx_t_1 = (((__pyx_v_xsp + __pyx_v_dxsp) < __pyx_v_x_min) != 0);
            if (!__pyx_t_1) {
            } else {
              __pyx_t_2 = __pyx_t_1;
              goto __pyx_L23_bool_binop_done;
            }
            __pyx_t_1 = (((__pyx_v_xsp - __pyx_v_dxsp) > __pyx_v_x_max) != 0);
            __pyx_t_2 = __pyx_t_1;
            __pyx_L23_bool_binop_done:;
            if (__pyx_t_2) {
              goto __pyx_L19_continue;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":392
 *                 xsp = oxsp + xiterv[xi]
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue
 *                 for yi in range(2):             # <<<<<<<<<<<<<<
 *                     if yiter[yi] == 999: continue
 *                     ysp = oysp + yiterv[yi]
 */
            for (__pyx_t_12 = 0; __pyx_t_12 < 2; __pyx_t_12+=1) {
              __pyx_v_yi = __pyx_t_12;

              /* "yt/utilities/lib/pixelization_routines.pyx":393
 *                 if (xsp + dxsp < x_min) or (xsp - dxsp > x_max): continue
 *                 for yi in range(2):
 *                     if yiter[yi] == 999: continue             # <<<<<<<<<<<<<<
 *                     ysp = oysp + yiterv[yi]
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue
 */
              __pyx_t_2 = (((__pyx_v_yiter[__pyx_v_yi]) == 0x3E7) != 0);
              if (__pyx_t_2) {
                goto __pyx_L25_continue;
              }

              /* "yt/utilities/lib/pixelization_routines.pyx":394
 *                 for yi in range(2):
 *                     if yiter[yi] == 999: continue
 *                     ysp = oysp + yiterv[yi]             # <<<<<<<<<<<<<<
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue
 *                     lc = <int> fmax(((xsp-dxsp-x_min)*ipx_dx),0)
 */
              __pyx_v_ysp = (__pyx_v_oysp + (__pyx_v_yiterv[__pyx_v_yi]));

              /* "yt/utilities/lib/pixelization_routines.pyx":395
 *                     if yiter[yi] == 999: continue
 *                     ysp = oysp + yiterv[yi]
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue             # <<<<<<<<<<<<<<
 *                     lc = <int> fmax(((xsp-dxsp-x_min)*ipx_dx),0)
 *                     lr = <int> fmax(((ysp-dysp-y_min)*ipx_dy),0)
 */
              __pyx_t_1 = (((__pyx_v_ysp + __pyx_v_dysp) < __pyx_v_y_min) != 0);
              if (!__pyx_t_1) {
              } else {
                __pyx_t_2 = __pyx_t_1;
                goto __pyx_L29_bool_binop_done;
              }
              __pyx_t_1 = (((__pyx_v_ysp - __pyx_v_dysp) > __pyx_v_y_max) != 0);
              __pyx_t_2 = __pyx_t_1;
              __pyx_L29_bool_binop_done:;
              if (__pyx_t_2) {
                goto __pyx_L25_continue;
              }

              /* "yt/utilities/lib/pixelization_routines.pyx":396
 *                     ysp = oysp + yiterv[yi]
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue
 *                     lc = <int> fmax(((xsp-dxsp-x_min)*ipx_dx),0)             # <<<<<<<<<<<<<<
 *                     lr = <int> fmax(((ysp-dysp-y_min)*ipx_dy),0)
 *                     # NOTE: This is a different way of doing it than in the C
 */
              __pyx_v_lc = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmax((((__pyx_v_xsp - __pyx_v_dxsp) - __pyx_v_x_min) * __pyx_v_ipx_dx), 0.0));

              /* "yt/utilities/lib/pixelization_routines.pyx":397
 *                     if (ysp + dysp < y_min) or (ysp - dysp > y_max): continue
 *                     lc = <int> fmax(((xsp-dxsp-x_min)*ipx_dx),0)
 *                     lr = <int> fmax(((ysp-dysp-y_min)*ipx_dy),0)             # <<<<<<<<<<<<<<
 *                     # NOTE: This is a different way of doing it than in the C
 *                     # routines.  In C, we were implicitly casting the
 */
              __pyx_v_lr = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmax((((__pyx_v_ysp - __pyx_v_dysp) - __pyx_v_y_min) * __pyx_v_ipx_dy), 0.0));

              /* "yt/utilities/lib/pixelization_routines.pyx":407
 *                     # comparison of j to rc (double).  So give ourselves a
 *                     # bonus row and bonus column here.
 *                     rc = <int> fmin(((xsp+dxsp-x_min)*ipx_dx + 1), buff.shape[1])             # <<<<<<<<<<<<<<
 *                     rr = <int> fmin(((ysp+dysp-y_min)*ipx_dy + 1), buff.shape[0])
 *                     # Note that we're iterating here over *y* in the i
 */
              __pyx_v_rc = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(((((__pyx_v_xsp + __pyx_v_dxsp) - __pyx_v_x_min) * __pyx_v_ipx_dx) + 1.0), (__pyx_v_buff.shape[1])));

              /* "yt/utilities/lib/pixelization_routines.pyx":408
 *                     # bonus row and bonus column here.
 *                     rc = <int> fmin(((xsp+dxsp-x_min)*ipx_dx + 1), buff.shape[1])
 *                     rr = <int> fmin(((ysp+dysp-y_min)*ipx_dy + 1), buff.shape[0])             # <<<<<<<<<<<<<<
 *                     # Note that we're iterating here over *y* in the i
 *                     # direction.  See the note above about this.
 */
              __pyx_v_rr = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(((((__pyx_v_ysp + __pyx_v_dysp) - __pyx_v_y_min) * __pyx_v_ipx_dy) + 1.0), (__pyx_v_buff.shape[0])));

              /* "yt/utilities/lib/pixelization_routines.pyx":411
 *                     # Note that we're iterating here over *y* in the i
 *                     # direction.  See the note above about this.
 *                     for i in range(lr, rr):             # <<<<<<<<<<<<<<
 *                         lypx = px_dy * i + y_min
 *                         rypx = px_dy * (i+1) + y_min
 */
              __pyx_t_13 = __pyx_v_rr;
              __pyx_t_14 = __pyx_t_13;
              for (__pyx_t_15 = __pyx_v_lr; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
                __pyx_v_i = __pyx_t_15;

                /* "yt/utilities/lib/pixelization_routines.pyx":412
 *                     # direction.  See the note above about this.
 *                     for i in range(lr, rr):
 *                         lypx = px_dy * i + y_min             # <<<<<<<<<<<<<<
 *                         rypx = px_dy * (i+1) + y_min
 *                         for j in range(lc, rc):
 */
                __pyx_v_lypx = ((__pyx_v_px_dy * __pyx_v_i) + __pyx_v_y_min);

                /* "yt/utilities/lib/pixelization_routines.pyx":413
 *                     for i in range(lr, rr):
 *                         lypx = px_dy * i + y_min
 *                         rypx = px_dy * (i+1) + y_min             # <<<<<<<<<<<<<<
 *                         for j in range(lc, rc):
 *                             lxpx = px_dx * j + x_min
 */
                __pyx_v_rypx = ((__pyx_v_px_dy * (__pyx_v_i + 1)) + __pyx_v_y_min);

                /* "yt/utilities/lib/pixelization_routines.pyx":414
 *                         lypx = px_dy * i + y_min
 *                         rypx = px_dy * (i+1) + y_min
 *                         for j in range(lc, rc):             # <<<<<<<<<<<<<<
 *                             lxpx = px_dx * j + x_min
 *                             rxpx = px_dx * (j+1) + x_min
 */
                __pyx_t_16 = __pyx_v_rc;
                __pyx_t_17 = __pyx_t_16;
                for (__pyx_t_18 = __pyx_v_lc; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
                  __pyx_v_j = __pyx_t_18;

                  /* "yt/utilities/lib/pixelization_routines.pyx":415
 *                         rypx = px_dy * (i+1) + y_min
 *                         for j in range(lc, rc):
 *                             lxpx = px_dx * j + x_min             # <<<<<<<<<<<<<<
 *                             rxpx = px_dx * (j+1) + x_min
 * 
 */
                  __pyx_v_lxpx = ((__pyx_v_px_dx * __pyx_v_j) + __pyx_v_x_min);

                  /* "yt/utilities/lib/pixelization_routines.pyx":416
 *                         for j in range(lc, rc):
 *                             lxpx = px_dx * j + x_min
 *                             rxpx = px_dx * (j+1) + x_min             # <<<<<<<<<<<<<<
 * 
 *                             cx = (rxpx+lxpx)*0.5
 */
                  __pyx_v_rxpx = ((__pyx_v_px_dx * (__pyx_v_j + 1)) + __pyx_v_x_min);

                  /* "yt/utilities/lib/pixelization_routines.pyx":418
 *                             rxpx = px_dx * (j+1) + x_min
 * 
 *                             cx = (rxpx+lxpx)*0.5             # <<<<<<<<<<<<<<
 *                             cy = (rypx+lypx)*0.5
 *                             cz = coord
 */
                  __pyx_v_cx = ((__pyx_v_rxpx + __pyx_v_lxpx) * 0.5);

                  /* "yt/utilities/lib/pixelization_routines.pyx":419
 * 
 *                             cx = (rxpx+lxpx)*0.5
 *                             cy = (rypx+lypx)*0.5             # <<<<<<<<<<<<<<
 *                             cz = coord
 * 
 */
                  __pyx_v_cy = ((__pyx_v_rypx + __pyx_v_lypx) * 0.5);

                  /* "yt/utilities/lib/pixelization_routines.pyx":420
 *                             cx = (rxpx+lxpx)*0.5
 *                             cy = (rypx+lypx)*0.5
 *                             cz = coord             # <<<<<<<<<<<<<<
 * 
 *                             ii = <int> (cx - xsp + dxsp)
 */
                  __pyx_v_cz = __pyx_v_coord;

                  /* "yt/utilities/lib/pixelization_routines.pyx":422
 *                             cz = coord
 * 
 *                             ii = <int> (cx - xsp + dxsp)             # <<<<<<<<<<<<<<
 *                             jj = <int> (cy - ysp + dysp)
 *                             kk = <int> (cz - zsp + dzsp)
 */
                  __pyx_v_ii = ((int)((__pyx_v_cx - __pyx_v_xsp) + __pyx_v_dxsp));

                  /* "yt/utilities/lib/pixelization_routines.pyx":423
 * 
 *                             ii = <int> (cx - xsp + dxsp)
 *                             jj = <int> (cy - ysp + dysp)             # <<<<<<<<<<<<<<
 *                             kk = <int> (cz - zsp + dzsp)
 * 
 */
                  __pyx_v_jj = ((int)((__pyx_v_cy - __pyx_v_ysp) + __pyx_v_dysp));

                  /* "yt/utilities/lib/pixelization_routines.pyx":424
 *                             ii = <int> (cx - xsp + dxsp)
 *                             jj = <int> (cy - ysp + dysp)
 *                             kk = <int> (cz - zsp + dzsp)             # <<<<<<<<<<<<<<
 * 
 *                             ind = 4*ii + 2*jj + kk
 */
                  __pyx_v_kk = ((int)((__pyx_v_cz - __pyx_v_zsp) + __pyx_v_dzsp));

                  /* "yt/utilities/lib/pixelization_routines.pyx":426
 *                             kk = <int> (cz - zsp + dzsp)
 * 
 *                             ind = 4*ii + 2*jj + kk             # <<<<<<<<<<<<<<
 * 
 *                             buff[i,j] = data[p, ind]
 */
                  __pyx_v_ind = (((4 * __pyx_v_ii) + (2 * __pyx_v_jj)) + __pyx_v_kk);

                  /* "yt/utilities/lib/pixelization_routines.pyx":428
 *                             ind = 4*ii + 2*jj + kk
 * 
 *                             buff[i,j] = data[p, ind]             # <<<<<<<<<<<<<<
 * 
 * 
 */
                  __pyx_t_10 = __pyx_v_p;
                  __pyx_t_19 = __pyx_v_ind;
                  __pyx_t_20 = __pyx_v_i;
                  __pyx_t_21 = __pyx_v_j;
                  *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_20 * __pyx_v_buff.strides[0]) ) + __pyx_t_21 * __pyx_v_buff.strides[1]) )) = (*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_data.data + __pyx_t_10 * __pyx_v_data.strides[0]) ) + __pyx_t_19 * __pyx_v_data.strides[1]) )));
                }
              }
              __pyx_L25_continue:;
            }
            __pyx_L19_continue:;
          }
        }
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":363
 *     #       first axis : y_min .. y_max
 *     #       second axis: x_min .. x_max
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for p in range(px.shape[0]):
 *             xiter[1] = yiter[1] = 999
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L13;
        }
        __pyx_L13:;
      }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":268
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cartesian_nodal(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                              np.float64_t[:] px,
 *                              np.float64_t[:] py,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_cartesian_nodal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_buff, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_px, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_py, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pz, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdx, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdy, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdz, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_data, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":434
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_off_axis_cartesian(             # <<<<<<<<<<<<<<
 *                        np.float64_t[:,:] buff,
 *                        np.float64_t[:] x,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_5pixelize_off_axis_cartesian(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_5pixelize_off_axis_cartesian = {"pixelize_off_axis_cartesian", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_5pixelize_off_axis_cartesian, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_5pixelize_off_axis_cartesian(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_buff = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_x = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_y = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_z = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_px = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_py = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdx = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdy = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdz = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_center = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_inv_mat = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_indices = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_data = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_bounds = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pixelize_off_axis_cartesian (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buff,&__pyx_n_s_x,&__pyx_n_s_y,&__pyx_n_s_z,&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pdx,&__pyx_n_s_pdy,&__pyx_n_s_pdz,&__pyx_n_s_center,&__pyx_n_s_inv_mat,&__pyx_n_s_indices,&__pyx_n_s_data,&__pyx_n_s_bounds,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, 1); __PYX_ERR(0, 434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, 2); __PYX_ERR(0, 434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, 3); __PYX_ERR(0, 434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, 4); __PYX_ERR(0, 434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, 5); __PYX_ERR(0, 434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, 6); __PYX_ERR(0, 434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, 7); __PYX_ERR(0, 434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, 8); __PYX_ERR(0, 434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_center)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, 9); __PYX_ERR(0, 434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inv_mat)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, 10); __PYX_ERR(0, 434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_indices)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, 11); __PYX_ERR(0, 434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, 12); __PYX_ERR(0, 434, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, 13); __PYX_ERR(0, 434, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pixelize_off_axis_cartesian") < 0)) __PYX_ERR(0, 434, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 14) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
    }
    __pyx_v_buff = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_buff.memview)) __PYX_ERR(0, 435, __pyx_L3_error)
    __pyx_v_x = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_x.memview)) __PYX_ERR(0, 436, __pyx_L3_error)
    __pyx_v_y = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_y.memview)) __PYX_ERR(0, 437, __pyx_L3_error)
    __pyx_v_z = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_z.memview)) __PYX_ERR(0, 438, __pyx_L3_error)
    __pyx_v_px = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_px.memview)) __PYX_ERR(0, 439, __pyx_L3_error)
    __pyx_v_py = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_py.memview)) __PYX_ERR(0, 440, __pyx_L3_error)
    __pyx_v_pdx = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdx.memview)) __PYX_ERR(0, 441, __pyx_L3_error)
    __pyx_v_pdy = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[7], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdy.memview)) __PYX_ERR(0, 442, __pyx_L3_error)
    __pyx_v_pdz = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[8], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdz.memview)) __PYX_ERR(0, 443, __pyx_L3_error)
    __pyx_v_center = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[9], PyBUF_WRITABLE); if (unlikely(!__pyx_v_center.memview)) __PYX_ERR(0, 444, __pyx_L3_error)
    __pyx_v_inv_mat = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(values[10], PyBUF_WRITABLE); if (unlikely(!__pyx_v_inv_mat.memview)) __PYX_ERR(0, 445, __pyx_L3_error)
    __pyx_v_indices = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int_t(values[11], PyBUF_WRITABLE); if (unlikely(!__pyx_v_indices.memview)) __PYX_ERR(0, 446, __pyx_L3_error)
    __pyx_v_data = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[12], PyBUF_WRITABLE); if (unlikely(!__pyx_v_data.memview)) __PYX_ERR(0, 447, __pyx_L3_error)
    __pyx_v_bounds = values[13];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pixelize_off_axis_cartesian", 1, 14, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 434, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_off_axis_cartesian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_4pixelize_off_axis_cartesian(__pyx_self, __pyx_v_buff, __pyx_v_x, __pyx_v_y, __pyx_v_z, __pyx_v_px, __pyx_v_py, __pyx_v_pdx, __pyx_v_pdy, __pyx_v_pdz, __pyx_v_center, __pyx_v_inv_mat, __pyx_v_indices, __pyx_v_data, __pyx_v_bounds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_4pixelize_off_axis_cartesian(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_x, __Pyx_memviewslice __pyx_v_y, __Pyx_memviewslice __pyx_v_z, __Pyx_memviewslice __pyx_v_px, __Pyx_memviewslice __pyx_v_py, __Pyx_memviewslice __pyx_v_pdx, __Pyx_memviewslice __pyx_v_pdy, __Pyx_memviewslice __pyx_v_pdz, __Pyx_memviewslice __pyx_v_center, __Pyx_memviewslice __pyx_v_inv_mat, __Pyx_memviewslice __pyx_v_indices, __Pyx_memviewslice __pyx_v_data, PyObject *__pyx_v_bounds) {
  __pyx_t_5numpy_float64_t __pyx_v_x_min;
  __pyx_t_5numpy_float64_t __pyx_v_x_max;
  __pyx_t_5numpy_float64_t __pyx_v_y_min;
  __pyx_t_5numpy_float64_t __pyx_v_y_max;
  __pyx_t_5numpy_float64_t __pyx_v_width;
  __pyx_t_5numpy_float64_t __pyx_v_height;
  __pyx_t_5numpy_float64_t __pyx_v_px_dx;
  __pyx_t_5numpy_float64_t __pyx_v_px_dy;
  __pyx_t_5numpy_float64_t __pyx_v_ipx_dx;
  __pyx_t_5numpy_float64_t __pyx_v_ipx_dy;
  __pyx_t_5numpy_float64_t __pyx_v_md;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_p;
  int __pyx_v_ip;
  int __pyx_v_lc;
  int __pyx_v_lr;
  int __pyx_v_rc;
  int __pyx_v_rr;
  __pyx_t_5numpy_float64_t __pyx_v_xsp;
  __pyx_t_5numpy_float64_t __pyx_v_ysp;
  __pyx_t_5numpy_float64_t __pyx_v_zsp;
  __pyx_t_5numpy_float64_t __pyx_v_dxsp;
  __pyx_t_5numpy_float64_t __pyx_v_dysp;
  __pyx_t_5numpy_float64_t __pyx_v_dzsp;
  __pyx_t_5numpy_float64_t __pyx_v_dsp;
  __pyx_t_5numpy_float64_t __pyx_v_pxsp;
  __pyx_t_5numpy_float64_t __pyx_v_pysp;
  __pyx_t_5numpy_float64_t __pyx_v_cxpx;
  __pyx_t_5numpy_float64_t __pyx_v_cypx;
  __pyx_t_5numpy_float64_t __pyx_v_cx;
  __pyx_t_5numpy_float64_t __pyx_v_cy;
  __pyx_t_5numpy_float64_t __pyx_v_cz;
  PyArrayObject *__pyx_v_mask = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_mask;
  __Pyx_Buffer __pyx_pybuffer_mask;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __pyx_t_5numpy_float64_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyArrayObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pixelize_off_axis_cartesian", 0);
  __pyx_pybuffer_mask.pybuffer.buf = NULL;
  __pyx_pybuffer_mask.refcount = 0;
  __pyx_pybuffernd_mask.data = NULL;
  __pyx_pybuffernd_mask.rcbuffer = &__pyx_pybuffer_mask;

  /* "yt/utilities/lib/pixelization_routines.pyx":458
 *     # Some periodicity helpers
 *     cdef np.ndarray[np.int64_t, ndim=2] mask
 *     x_min = bounds[0]             # <<<<<<<<<<<<<<
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_x_min = __pyx_t_2;

  /* "yt/utilities/lib/pixelization_routines.pyx":459
 *     cdef np.ndarray[np.int64_t, ndim=2] mask
 *     x_min = bounds[0]
 *     x_max = bounds[1]             # <<<<<<<<<<<<<<
 *     y_min = bounds[2]
 *     y_max = bounds[3]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_bounds, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_x_max = __pyx_t_2;

  /* "yt/utilities/lib/pixelization_routines.pyx":460
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 *     y_min = bounds[2]             # <<<<<<<<<<<<<<
 *     y_max = bounds[3]
 *     width = x_max - x_min
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_bounds, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_y_min = __pyx_t_2;

  /* "yt/utilities/lib/pixelization_routines.pyx":461
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 *     y_max = bounds[3]             # <<<<<<<<<<<<<<
 *     width = x_max - x_min
 *     height = y_max - y_min
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_bounds, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_2 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 461, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_y_max = __pyx_t_2;

  /* "yt/utilities/lib/pixelization_routines.pyx":462
 *     y_min = bounds[2]
 *     y_max = bounds[3]
 *     width = x_max - x_min             # <<<<<<<<<<<<<<
 *     height = y_max - y_min
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 */
  __pyx_v_width = (__pyx_v_x_max - __pyx_v_x_min);

  /* "yt/utilities/lib/pixelization_routines.pyx":463
 *     y_max = bounds[3]
 *     width = x_max - x_min
 *     height = y_max - y_min             # <<<<<<<<<<<<<<
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 */
  __pyx_v_height = (__pyx_v_y_max - __pyx_v_y_min);

  /* "yt/utilities/lib/pixelization_routines.pyx":464
 *     width = x_max - x_min
 *     height = y_max - y_min
 *     px_dx = width / (<np.float64_t> buff.shape[1])             # <<<<<<<<<<<<<<
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 *     ipx_dx = 1.0 / px_dx
 */
  __pyx_v_px_dx = (__pyx_v_width / ((__pyx_t_5numpy_float64_t)(__pyx_v_buff.shape[1])));

  /* "yt/utilities/lib/pixelization_routines.pyx":465
 *     height = y_max - y_min
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 *     px_dy = height / (<np.float64_t> buff.shape[0])             # <<<<<<<<<<<<<<
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 */
  __pyx_v_px_dy = (__pyx_v_height / ((__pyx_t_5numpy_float64_t)(__pyx_v_buff.shape[0])));

  /* "yt/utilities/lib/pixelization_routines.pyx":466
 *     px_dx = width / (<np.float64_t> buff.shape[1])
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 *     ipx_dx = 1.0 / px_dx             # <<<<<<<<<<<<<<
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \
 */
  __pyx_v_ipx_dx = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_px_dx);

  /* "yt/utilities/lib/pixelization_routines.pyx":467
 *     px_dy = height / (<np.float64_t> buff.shape[0])
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy             # <<<<<<<<<<<<<<
 *     if px.shape[0] != py.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \
 */
  __pyx_v_ipx_dy = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_px_dy);

  /* "yt/utilities/lib/pixelization_routines.pyx":468
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 */
  __pyx_t_4 = (((__pyx_v_px.shape[0]) != (__pyx_v_py.shape[0])) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":469
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdy.shape[0] or \
 *        px.shape[0] != pdz.shape[0] or \
 */
  __pyx_t_4 = (((__pyx_v_px.shape[0]) != (__pyx_v_pdx.shape[0])) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":470
 *     if px.shape[0] != py.shape[0] or \
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdz.shape[0] or \
 *        px.shape[0] != indices.shape[0] or \
 */
  __pyx_t_4 = (((__pyx_v_px.shape[0]) != (__pyx_v_pdy.shape[0])) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":471
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 *        px.shape[0] != pdz.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != indices.shape[0] or \
 *        px.shape[0] != data.shape[0]:
 */
  __pyx_t_4 = (((__pyx_v_px.shape[0]) != (__pyx_v_pdz.shape[0])) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":472
 *        px.shape[0] != pdy.shape[0] or \
 *        px.shape[0] != pdz.shape[0] or \
 *        px.shape[0] != indices.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != data.shape[0]:
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 */
  __pyx_t_4 = (((__pyx_v_px.shape[0]) != (__pyx_v_indices.shape[0])) != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_3 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":473
 *        px.shape[0] != pdz.shape[0] or \
 *        px.shape[0] != indices.shape[0] or \
 *        px.shape[0] != data.shape[0]:             # <<<<<<<<<<<<<<
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 *     mask = np.zeros((buff.shape[0], buff.shape[1]), "int64")
 */
  __pyx_t_4 = (((__pyx_v_px.shape[0]) != (__pyx_v_data.shape[0])) != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;

  /* "yt/utilities/lib/pixelization_routines.pyx":468
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 */
  if (unlikely(__pyx_t_3)) {

    /* "yt/utilities/lib/pixelization_routines.pyx":474
 *        px.shape[0] != indices.shape[0] or \
 *        px.shape[0] != data.shape[0]:
 *         raise YTPixelizeError("Arrays are not of correct shape.")             # <<<<<<<<<<<<<<
 *     mask = np.zeros((buff.shape[0], buff.shape[1]), "int64")
 *     with nogil:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_YTPixelizeError); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_kp_u_Arrays_are_not_of_correct_shape) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_u_Arrays_are_not_of_correct_shape);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 474, __pyx_L1_error)

    /* "yt/utilities/lib/pixelization_routines.pyx":468
 *     ipx_dx = 1.0 / px_dx
 *     ipx_dy = 1.0 / px_dy
 *     if px.shape[0] != py.shape[0] or \             # <<<<<<<<<<<<<<
 *        px.shape[0] != pdx.shape[0] or \
 *        px.shape[0] != pdy.shape[0] or \
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":475
 *        px.shape[0] != data.shape[0]:
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 *     mask = np.zeros((buff.shape[0], buff.shape[1]), "int64")             # <<<<<<<<<<<<<<
 *     with nogil:
 *         for ip in range(indices.shape[0]):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyInt_FromSsize_t((__pyx_v_buff.shape[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyInt_FromSsize_t((__pyx_v_buff.shape[1])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
      __pyx_t_9 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_8, __pyx_n_u_int64};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
    PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_8, __pyx_n_u_int64};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_9, 2+__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_7) {
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_9, __pyx_t_8);
    __Pyx_INCREF(__pyx_n_u_int64);
    __Pyx_GIVEREF(__pyx_n_u_int64);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_9, __pyx_n_u_int64);
    __pyx_t_8 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 475, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
    __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_mask.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_9 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_mask.rcbuffer->pybuffer, (PyObject*)__pyx_v_mask, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
      __pyx_t_11 = __pyx_t_12 = __pyx_t_13 = 0;
    }
    __pyx_pybuffernd_mask.diminfo[0].strides = __pyx_pybuffernd_mask.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_mask.diminfo[0].shape = __pyx_pybuffernd_mask.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_mask.diminfo[1].strides = __pyx_pybuffernd_mask.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_mask.diminfo[1].shape = __pyx_pybuffernd_mask.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(0, 475, __pyx_L1_error)
  }
  __pyx_t_10 = 0;
  __pyx_v_mask = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":476
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 *     mask = np.zeros((buff.shape[0], buff.shape[1]), "int64")
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for ip in range(indices.shape[0]):
 *             p = indices[ip]
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "yt/utilities/lib/pixelization_routines.pyx":477
 *     mask = np.zeros((buff.shape[0], buff.shape[1]), "int64")
 *     with nogil:
 *         for ip in range(indices.shape[0]):             # <<<<<<<<<<<<<<
 *             p = indices[ip]
 *             xsp = x[p]
 */
        __pyx_t_14 = (__pyx_v_indices.shape[0]);
        __pyx_t_15 = __pyx_t_14;
        for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_15; __pyx_t_9+=1) {
          __pyx_v_ip = __pyx_t_9;

          /* "yt/utilities/lib/pixelization_routines.pyx":478
 *     with nogil:
 *         for ip in range(indices.shape[0]):
 *             p = indices[ip]             # <<<<<<<<<<<<<<
 *             xsp = x[p]
 *             ysp = y[p]
 */
          __pyx_t_16 = __pyx_v_ip;
          __pyx_v_p = (*((__pyx_t_5numpy_int_t *) ( /* dim=0 */ (__pyx_v_indices.data + __pyx_t_16 * __pyx_v_indices.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":479
 *         for ip in range(indices.shape[0]):
 *             p = indices[ip]
 *             xsp = x[p]             # <<<<<<<<<<<<<<
 *             ysp = y[p]
 *             zsp = z[p]
 */
          __pyx_t_16 = __pyx_v_p;
          __pyx_v_xsp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_x.data + __pyx_t_16 * __pyx_v_x.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":480
 *             p = indices[ip]
 *             xsp = x[p]
 *             ysp = y[p]             # <<<<<<<<<<<<<<
 *             zsp = z[p]
 *             pxsp = px[p]
 */
          __pyx_t_16 = __pyx_v_p;
          __pyx_v_ysp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_y.data + __pyx_t_16 * __pyx_v_y.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":481
 *             xsp = x[p]
 *             ysp = y[p]
 *             zsp = z[p]             # <<<<<<<<<<<<<<
 *             pxsp = px[p]
 *             pysp = py[p]
 */
          __pyx_t_16 = __pyx_v_p;
          __pyx_v_zsp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_z.data + __pyx_t_16 * __pyx_v_z.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":482
 *             ysp = y[p]
 *             zsp = z[p]
 *             pxsp = px[p]             # <<<<<<<<<<<<<<
 *             pysp = py[p]
 *             dxsp = pdx[p]
 */
          __pyx_t_16 = __pyx_v_p;
          __pyx_v_pxsp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_px.data + __pyx_t_16 * __pyx_v_px.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":483
 *             zsp = z[p]
 *             pxsp = px[p]
 *             pysp = py[p]             # <<<<<<<<<<<<<<
 *             dxsp = pdx[p]
 *             dysp = pdy[p]
 */
          __pyx_t_16 = __pyx_v_p;
          __pyx_v_pysp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_py.data + __pyx_t_16 * __pyx_v_py.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":484
 *             pxsp = px[p]
 *             pysp = py[p]
 *             dxsp = pdx[p]             # <<<<<<<<<<<<<<
 *             dysp = pdy[p]
 *             dzsp = pdz[p]
 */
          __pyx_t_16 = __pyx_v_p;
          __pyx_v_dxsp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pdx.data + __pyx_t_16 * __pyx_v_pdx.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":485
 *             pysp = py[p]
 *             dxsp = pdx[p]
 *             dysp = pdy[p]             # <<<<<<<<<<<<<<
 *             dzsp = pdz[p]
 *             dsp = data[p]
 */
          __pyx_t_16 = __pyx_v_p;
          __pyx_v_dysp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pdy.data + __pyx_t_16 * __pyx_v_pdy.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":486
 *             dxsp = pdx[p]
 *             dysp = pdy[p]
 *             dzsp = pdz[p]             # <<<<<<<<<<<<<<
 *             dsp = data[p]
 *             # Any point we want to plot is at most this far from the center
 */
          __pyx_t_16 = __pyx_v_p;
          __pyx_v_dzsp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pdz.data + __pyx_t_16 * __pyx_v_pdz.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":487
 *             dysp = pdy[p]
 *             dzsp = pdz[p]
 *             dsp = data[p]             # <<<<<<<<<<<<<<
 *             # Any point we want to plot is at most this far from the center
 *             md = 2.0 * math.sqrt(dxsp*dxsp + dysp*dysp + dzsp*dzsp)
 */
          __pyx_t_16 = __pyx_v_p;
          __pyx_v_dsp = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_data.data + __pyx_t_16 * __pyx_v_data.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":489
 *             dsp = data[p]
 *             # Any point we want to plot is at most this far from the center
 *             md = 2.0 * math.sqrt(dxsp*dxsp + dysp*dysp + dzsp*dzsp)             # <<<<<<<<<<<<<<
 *             if pxsp + md < x_min or \
 *                pxsp - md > x_max or \
 */
          __pyx_v_md = (2.0 * sqrt((((__pyx_v_dxsp * __pyx_v_dxsp) + (__pyx_v_dysp * __pyx_v_dysp)) + (__pyx_v_dzsp * __pyx_v_dzsp))));

          /* "yt/utilities/lib/pixelization_routines.pyx":490
 *             # Any point we want to plot is at most this far from the center
 *             md = 2.0 * math.sqrt(dxsp*dxsp + dysp*dysp + dzsp*dzsp)
 *             if pxsp + md < x_min or \             # <<<<<<<<<<<<<<
 *                pxsp - md > x_max or \
 *                pysp + md < y_min or \
 */
          __pyx_t_4 = (((__pyx_v_pxsp + __pyx_v_md) < __pyx_v_x_min) != 0);
          if (!__pyx_t_4) {
          } else {
            __pyx_t_3 = __pyx_t_4;
            goto __pyx_L16_bool_binop_done;
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":491
 *             md = 2.0 * math.sqrt(dxsp*dxsp + dysp*dysp + dzsp*dzsp)
 *             if pxsp + md < x_min or \
 *                pxsp - md > x_max or \             # <<<<<<<<<<<<<<
 *                pysp + md < y_min or \
 *                pysp - md > y_max:
 */
          __pyx_t_4 = (((__pyx_v_pxsp - __pyx_v_md) > __pyx_v_x_max) != 0);
          if (!__pyx_t_4) {
          } else {
            __pyx_t_3 = __pyx_t_4;
            goto __pyx_L16_bool_binop_done;
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":492
 *             if pxsp + md < x_min or \
 *                pxsp - md > x_max or \
 *                pysp + md < y_min or \             # <<<<<<<<<<<<<<
 *                pysp - md > y_max:
 *                 continue
 */
          __pyx_t_4 = (((__pyx_v_pysp + __pyx_v_md) < __pyx_v_y_min) != 0);
          if (!__pyx_t_4) {
          } else {
            __pyx_t_3 = __pyx_t_4;
            goto __pyx_L16_bool_binop_done;
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":493
 *                pxsp - md > x_max or \
 *                pysp + md < y_min or \
 *                pysp - md > y_max:             # <<<<<<<<<<<<<<
 *                 continue
 *             lc = <int> fmax(((pxsp - md - x_min)*ipx_dx),0)
 */
          __pyx_t_4 = (((__pyx_v_pysp - __pyx_v_md) > __pyx_v_y_max) != 0);
          __pyx_t_3 = __pyx_t_4;
          __pyx_L16_bool_binop_done:;

          /* "yt/utilities/lib/pixelization_routines.pyx":490
 *             # Any point we want to plot is at most this far from the center
 *             md = 2.0 * math.sqrt(dxsp*dxsp + dysp*dysp + dzsp*dzsp)
 *             if pxsp + md < x_min or \             # <<<<<<<<<<<<<<
 *                pxsp - md > x_max or \
 *                pysp + md < y_min or \
 */
          if (__pyx_t_3) {

            /* "yt/utilities/lib/pixelization_routines.pyx":494
 *                pysp + md < y_min or \
 *                pysp - md > y_max:
 *                 continue             # <<<<<<<<<<<<<<
 *             lc = <int> fmax(((pxsp - md - x_min)*ipx_dx),0)
 *             lr = <int> fmax(((pysp - md - y_min)*ipx_dy),0)
 */
            goto __pyx_L13_continue;

            /* "yt/utilities/lib/pixelization_routines.pyx":490
 *             # Any point we want to plot is at most this far from the center
 *             md = 2.0 * math.sqrt(dxsp*dxsp + dysp*dysp + dzsp*dzsp)
 *             if pxsp + md < x_min or \             # <<<<<<<<<<<<<<
 *                pxsp - md > x_max or \
 *                pysp + md < y_min or \
 */
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":495
 *                pysp - md > y_max:
 *                 continue
 *             lc = <int> fmax(((pxsp - md - x_min)*ipx_dx),0)             # <<<<<<<<<<<<<<
 *             lr = <int> fmax(((pysp - md - y_min)*ipx_dy),0)
 *             rc = <int> fmin(((pxsp + md - x_min)*ipx_dx + 1), buff.shape[1])
 */
          __pyx_v_lc = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmax((((__pyx_v_pxsp - __pyx_v_md) - __pyx_v_x_min) * __pyx_v_ipx_dx), 0.0));

          /* "yt/utilities/lib/pixelization_routines.pyx":496
 *                 continue
 *             lc = <int> fmax(((pxsp - md - x_min)*ipx_dx),0)
 *             lr = <int> fmax(((pysp - md - y_min)*ipx_dy),0)             # <<<<<<<<<<<<<<
 *             rc = <int> fmin(((pxsp + md - x_min)*ipx_dx + 1), buff.shape[1])
 *             rr = <int> fmin(((pysp + md - y_min)*ipx_dy + 1), buff.shape[0])
 */
          __pyx_v_lr = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmax((((__pyx_v_pysp - __pyx_v_md) - __pyx_v_y_min) * __pyx_v_ipx_dy), 0.0));

          /* "yt/utilities/lib/pixelization_routines.pyx":497
 *             lc = <int> fmax(((pxsp - md - x_min)*ipx_dx),0)
 *             lr = <int> fmax(((pysp - md - y_min)*ipx_dy),0)
 *             rc = <int> fmin(((pxsp + md - x_min)*ipx_dx + 1), buff.shape[1])             # <<<<<<<<<<<<<<
 *             rr = <int> fmin(((pysp + md - y_min)*ipx_dy + 1), buff.shape[0])
 *             for i in range(lr, rr):
 */
          __pyx_v_rc = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(((((__pyx_v_pxsp + __pyx_v_md) - __pyx_v_x_min) * __pyx_v_ipx_dx) + 1.0), (__pyx_v_buff.shape[1])));

          /* "yt/utilities/lib/pixelization_routines.pyx":498
 *             lr = <int> fmax(((pysp - md - y_min)*ipx_dy),0)
 *             rc = <int> fmin(((pxsp + md - x_min)*ipx_dx + 1), buff.shape[1])
 *             rr = <int> fmin(((pysp + md - y_min)*ipx_dy + 1), buff.shape[0])             # <<<<<<<<<<<<<<
 *             for i in range(lr, rr):
 *                 cypx = px_dy * (i + 0.5) + y_min
 */
          __pyx_v_rr = ((int)__pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(((((__pyx_v_pysp + __pyx_v_md) - __pyx_v_y_min) * __pyx_v_ipx_dy) + 1.0), (__pyx_v_buff.shape[0])));

          /* "yt/utilities/lib/pixelization_routines.pyx":499
 *             rc = <int> fmin(((pxsp + md - x_min)*ipx_dx + 1), buff.shape[1])
 *             rr = <int> fmin(((pysp + md - y_min)*ipx_dy + 1), buff.shape[0])
 *             for i in range(lr, rr):             # <<<<<<<<<<<<<<
 *                 cypx = px_dy * (i + 0.5) + y_min
 *                 for j in range(lc, rc):
 */
          __pyx_t_17 = __pyx_v_rr;
          __pyx_t_18 = __pyx_t_17;
          for (__pyx_t_19 = __pyx_v_lr; __pyx_t_19 < __pyx_t_18; __pyx_t_19+=1) {
            __pyx_v_i = __pyx_t_19;

            /* "yt/utilities/lib/pixelization_routines.pyx":500
 *             rr = <int> fmin(((pysp + md - y_min)*ipx_dy + 1), buff.shape[0])
 *             for i in range(lr, rr):
 *                 cypx = px_dy * (i + 0.5) + y_min             # <<<<<<<<<<<<<<
 *                 for j in range(lc, rc):
 *                     cxpx = px_dx * (j + 0.5) + x_min
 */
            __pyx_v_cypx = ((__pyx_v_px_dy * (__pyx_v_i + 0.5)) + __pyx_v_y_min);

            /* "yt/utilities/lib/pixelization_routines.pyx":501
 *             for i in range(lr, rr):
 *                 cypx = px_dy * (i + 0.5) + y_min
 *                 for j in range(lc, rc):             # <<<<<<<<<<<<<<
 *                     cxpx = px_dx * (j + 0.5) + x_min
 *                     cx = inv_mat[0,0]*cxpx + inv_mat[0,1]*cypx + center[0]
 */
            __pyx_t_20 = __pyx_v_rc;
            __pyx_t_21 = __pyx_t_20;
            for (__pyx_t_22 = __pyx_v_lc; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {
              __pyx_v_j = __pyx_t_22;

              /* "yt/utilities/lib/pixelization_routines.pyx":502
 *                 cypx = px_dy * (i + 0.5) + y_min
 *                 for j in range(lc, rc):
 *                     cxpx = px_dx * (j + 0.5) + x_min             # <<<<<<<<<<<<<<
 *                     cx = inv_mat[0,0]*cxpx + inv_mat[0,1]*cypx + center[0]
 *                     cy = inv_mat[1,0]*cxpx + inv_mat[1,1]*cypx + center[1]
 */
              __pyx_v_cxpx = ((__pyx_v_px_dx * (__pyx_v_j + 0.5)) + __pyx_v_x_min);

              /* "yt/utilities/lib/pixelization_routines.pyx":503
 *                 for j in range(lc, rc):
 *                     cxpx = px_dx * (j + 0.5) + x_min
 *                     cx = inv_mat[0,0]*cxpx + inv_mat[0,1]*cypx + center[0]             # <<<<<<<<<<<<<<
 *                     cy = inv_mat[1,0]*cxpx + inv_mat[1,1]*cypx + center[1]
 *                     cz = inv_mat[2,0]*cxpx + inv_mat[2,1]*cypx + center[2]
 */
              __pyx_t_16 = 0;
              __pyx_t_23 = 0;
              __pyx_t_24 = 0;
              __pyx_t_25 = 1;
              __pyx_t_26 = 0;
              __pyx_v_cx = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_inv_mat.data + __pyx_t_16 * __pyx_v_inv_mat.strides[0]) ) + __pyx_t_23 * __pyx_v_inv_mat.strides[1]) ))) * __pyx_v_cxpx) + ((*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_inv_mat.data + __pyx_t_24 * __pyx_v_inv_mat.strides[0]) ) + __pyx_t_25 * __pyx_v_inv_mat.strides[1]) ))) * __pyx_v_cypx)) + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_26 * __pyx_v_center.strides[0]) ))));

              /* "yt/utilities/lib/pixelization_routines.pyx":504
 *                     cxpx = px_dx * (j + 0.5) + x_min
 *                     cx = inv_mat[0,0]*cxpx + inv_mat[0,1]*cypx + center[0]
 *                     cy = inv_mat[1,0]*cxpx + inv_mat[1,1]*cypx + center[1]             # <<<<<<<<<<<<<<
 *                     cz = inv_mat[2,0]*cxpx + inv_mat[2,1]*cypx + center[2]
 *                     if fabs(xsp - cx) * 0.99 > dxsp or \
 */
              __pyx_t_26 = 1;
              __pyx_t_25 = 0;
              __pyx_t_24 = 1;
              __pyx_t_23 = 1;
              __pyx_t_16 = 1;
              __pyx_v_cy = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_inv_mat.data + __pyx_t_26 * __pyx_v_inv_mat.strides[0]) ) + __pyx_t_25 * __pyx_v_inv_mat.strides[1]) ))) * __pyx_v_cxpx) + ((*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_inv_mat.data + __pyx_t_24 * __pyx_v_inv_mat.strides[0]) ) + __pyx_t_23 * __pyx_v_inv_mat.strides[1]) ))) * __pyx_v_cypx)) + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_16 * __pyx_v_center.strides[0]) ))));

              /* "yt/utilities/lib/pixelization_routines.pyx":505
 *                     cx = inv_mat[0,0]*cxpx + inv_mat[0,1]*cypx + center[0]
 *                     cy = inv_mat[1,0]*cxpx + inv_mat[1,1]*cypx + center[1]
 *                     cz = inv_mat[2,0]*cxpx + inv_mat[2,1]*cypx + center[2]             # <<<<<<<<<<<<<<
 *                     if fabs(xsp - cx) * 0.99 > dxsp or \
 *                        fabs(ysp - cy) * 0.99 > dysp or \
 */
              __pyx_t_16 = 2;
              __pyx_t_23 = 0;
              __pyx_t_24 = 2;
              __pyx_t_25 = 1;
              __pyx_t_26 = 2;
              __pyx_v_cz = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_inv_mat.data + __pyx_t_16 * __pyx_v_inv_mat.strides[0]) ) + __pyx_t_23 * __pyx_v_inv_mat.strides[1]) ))) * __pyx_v_cxpx) + ((*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_inv_mat.data + __pyx_t_24 * __pyx_v_inv_mat.strides[0]) ) + __pyx_t_25 * __pyx_v_inv_mat.strides[1]) ))) * __pyx_v_cypx)) + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_center.data + __pyx_t_26 * __pyx_v_center.strides[0]) ))));

              /* "yt/utilities/lib/pixelization_routines.pyx":506
 *                     cy = inv_mat[1,0]*cxpx + inv_mat[1,1]*cypx + center[1]
 *                     cz = inv_mat[2,0]*cxpx + inv_mat[2,1]*cypx + center[2]
 *                     if fabs(xsp - cx) * 0.99 > dxsp or \             # <<<<<<<<<<<<<<
 *                        fabs(ysp - cy) * 0.99 > dysp or \
 *                        fabs(zsp - cz) * 0.99 > dzsp:
 */
              __pyx_t_4 = (((__pyx_f_2yt_9utilities_3lib_8fp_utils_fabs((__pyx_v_xsp - __pyx_v_cx)) * 0.99) > __pyx_v_dxsp) != 0);
              if (!__pyx_t_4) {
              } else {
                __pyx_t_3 = __pyx_t_4;
                goto __pyx_L25_bool_binop_done;
              }

              /* "yt/utilities/lib/pixelization_routines.pyx":507
 *                     cz = inv_mat[2,0]*cxpx + inv_mat[2,1]*cypx + center[2]
 *                     if fabs(xsp - cx) * 0.99 > dxsp or \
 *                        fabs(ysp - cy) * 0.99 > dysp or \             # <<<<<<<<<<<<<<
 *                        fabs(zsp - cz) * 0.99 > dzsp:
 *                         continue
 */
              __pyx_t_4 = (((__pyx_f_2yt_9utilities_3lib_8fp_utils_fabs((__pyx_v_ysp - __pyx_v_cy)) * 0.99) > __pyx_v_dysp) != 0);
              if (!__pyx_t_4) {
              } else {
                __pyx_t_3 = __pyx_t_4;
                goto __pyx_L25_bool_binop_done;
              }

              /* "yt/utilities/lib/pixelization_routines.pyx":508
 *                     if fabs(xsp - cx) * 0.99 > dxsp or \
 *                        fabs(ysp - cy) * 0.99 > dysp or \
 *                        fabs(zsp - cz) * 0.99 > dzsp:             # <<<<<<<<<<<<<<
 *                         continue
 *                     mask[i, j] += 1
 */
              __pyx_t_4 = (((__pyx_f_2yt_9utilities_3lib_8fp_utils_fabs((__pyx_v_zsp - __pyx_v_cz)) * 0.99) > __pyx_v_dzsp) != 0);
              __pyx_t_3 = __pyx_t_4;
              __pyx_L25_bool_binop_done:;

              /* "yt/utilities/lib/pixelization_routines.pyx":506
 *                     cy = inv_mat[1,0]*cxpx + inv_mat[1,1]*cypx + center[1]
 *                     cz = inv_mat[2,0]*cxpx + inv_mat[2,1]*cypx + center[2]
 *                     if fabs(xsp - cx) * 0.99 > dxsp or \             # <<<<<<<<<<<<<<
 *                        fabs(ysp - cy) * 0.99 > dysp or \
 *                        fabs(zsp - cz) * 0.99 > dzsp:
 */
              if (__pyx_t_3) {

                /* "yt/utilities/lib/pixelization_routines.pyx":509
 *                        fabs(ysp - cy) * 0.99 > dysp or \
 *                        fabs(zsp - cz) * 0.99 > dzsp:
 *                         continue             # <<<<<<<<<<<<<<
 *                     mask[i, j] += 1
 *                     # make sure pixel value is not a NaN before incrementing it
 */
                goto __pyx_L22_continue;

                /* "yt/utilities/lib/pixelization_routines.pyx":506
 *                     cy = inv_mat[1,0]*cxpx + inv_mat[1,1]*cypx + center[1]
 *                     cz = inv_mat[2,0]*cxpx + inv_mat[2,1]*cypx + center[2]
 *                     if fabs(xsp - cx) * 0.99 > dxsp or \             # <<<<<<<<<<<<<<
 *                        fabs(ysp - cy) * 0.99 > dysp or \
 *                        fabs(zsp - cz) * 0.99 > dzsp:
 */
              }

              /* "yt/utilities/lib/pixelization_routines.pyx":510
 *                        fabs(zsp - cz) * 0.99 > dzsp:
 *                         continue
 *                     mask[i, j] += 1             # <<<<<<<<<<<<<<
 *                     # make sure pixel value is not a NaN before incrementing it
 *                     if buff[i,j] != buff[i,j]: buff[i,j] = 0.0
 */
              __pyx_t_26 = __pyx_v_i;
              __pyx_t_25 = __pyx_v_j;
              *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_mask.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_mask.diminfo[0].strides, __pyx_t_25, __pyx_pybuffernd_mask.diminfo[1].strides) += 1;

              /* "yt/utilities/lib/pixelization_routines.pyx":512
 *                     mask[i, j] += 1
 *                     # make sure pixel value is not a NaN before incrementing it
 *                     if buff[i,j] != buff[i,j]: buff[i,j] = 0.0             # <<<<<<<<<<<<<<
 *                     buff[i, j] += dsp
 *     for i in range(buff.shape[0]):
 */
              __pyx_t_25 = __pyx_v_i;
              __pyx_t_26 = __pyx_v_j;
              __pyx_t_24 = __pyx_v_i;
              __pyx_t_23 = __pyx_v_j;
              __pyx_t_3 = (((*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_25 * __pyx_v_buff.strides[0]) ) + __pyx_t_26 * __pyx_v_buff.strides[1]) ))) != (*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_24 * __pyx_v_buff.strides[0]) ) + __pyx_t_23 * __pyx_v_buff.strides[1]) )))) != 0);
              if (__pyx_t_3) {
                __pyx_t_23 = __pyx_v_i;
                __pyx_t_24 = __pyx_v_j;
                *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_23 * __pyx_v_buff.strides[0]) ) + __pyx_t_24 * __pyx_v_buff.strides[1]) )) = 0.0;
              }

              /* "yt/utilities/lib/pixelization_routines.pyx":513
 *                     # make sure pixel value is not a NaN before incrementing it
 *                     if buff[i,j] != buff[i,j]: buff[i,j] = 0.0
 *                     buff[i, j] += dsp             # <<<<<<<<<<<<<<
 *     for i in range(buff.shape[0]):
 *         for j in range(buff.shape[1]):
 */
              __pyx_t_24 = __pyx_v_i;
              __pyx_t_23 = __pyx_v_j;
              *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_24 * __pyx_v_buff.strides[0]) ) + __pyx_t_23 * __pyx_v_buff.strides[1]) )) += __pyx_v_dsp;
              __pyx_L22_continue:;
            }
          }
          __pyx_L13_continue:;
        }
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":476
 *         raise YTPixelizeError("Arrays are not of correct shape.")
 *     mask = np.zeros((buff.shape[0], buff.shape[1]), "int64")
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for ip in range(indices.shape[0]):
 *             p = indices[ip]
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L12;
        }
        __pyx_L12:;
      }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":514
 *                     if buff[i,j] != buff[i,j]: buff[i,j] = 0.0
 *                     buff[i, j] += dsp
 *     for i in range(buff.shape[0]):             # <<<<<<<<<<<<<<
 *         for j in range(buff.shape[1]):
 *             if mask[i,j] == 0: continue
 */
  __pyx_t_14 = (__pyx_v_buff.shape[0]);
  __pyx_t_15 = __pyx_t_14;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_15; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "yt/utilities/lib/pixelization_routines.pyx":515
 *                     buff[i, j] += dsp
 *     for i in range(buff.shape[0]):
 *         for j in range(buff.shape[1]):             # <<<<<<<<<<<<<<
 *             if mask[i,j] == 0: continue
 *             buff[i,j] /= mask[i,j]
 */
    __pyx_t_27 = (__pyx_v_buff.shape[1]);
    __pyx_t_28 = __pyx_t_27;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_28; __pyx_t_17+=1) {
      __pyx_v_j = __pyx_t_17;

      /* "yt/utilities/lib/pixelization_routines.pyx":516
 *     for i in range(buff.shape[0]):
 *         for j in range(buff.shape[1]):
 *             if mask[i,j] == 0: continue             # <<<<<<<<<<<<<<
 *             buff[i,j] /= mask[i,j]
 * 
 */
      __pyx_t_23 = __pyx_v_i;
      __pyx_t_24 = __pyx_v_j;
      __pyx_t_3 = (((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_mask.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_mask.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_mask.diminfo[1].strides)) == 0) != 0);
      if (__pyx_t_3) {
        goto __pyx_L31_continue;
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":517
 *         for j in range(buff.shape[1]):
 *             if mask[i,j] == 0: continue
 *             buff[i,j] /= mask[i,j]             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
      __pyx_t_24 = __pyx_v_i;
      __pyx_t_23 = __pyx_v_j;
      __pyx_t_26 = __pyx_v_i;
      __pyx_t_25 = __pyx_v_j;
      *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_26 * __pyx_v_buff.strides[0]) ) + __pyx_t_25 * __pyx_v_buff.strides[1]) )) /= (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_mask.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_mask.diminfo[0].strides, __pyx_t_23, __pyx_pybuffernd_mask.diminfo[1].strides));
      __pyx_L31_continue:;
    }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":434
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_off_axis_cartesian(             # <<<<<<<<<<<<<<
 *                        np.float64_t[:,:] buff,
 *                        np.float64_t[:] x,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_off_axis_cartesian", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_mask.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mask);
  __PYX_XDEC_MEMVIEW(&__pyx_v_buff, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_x, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_y, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_z, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_px, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_py, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdx, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdy, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdz, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_center, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_inv_mat, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_indices, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_data, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":522
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cylinder(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                       np.float64_t[:] radius,
 *                       np.float64_t[:] dradius,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_7pixelize_cylinder(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_7pixelize_cylinder = {"pixelize_cylinder", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_7pixelize_cylinder, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_7pixelize_cylinder(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_buff = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_radius = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_dradius = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_theta = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_dtheta = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_field = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_extents = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pixelize_cylinder (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buff,&__pyx_n_s_radius,&__pyx_n_s_dradius,&__pyx_n_s_theta,&__pyx_n_s_dtheta,&__pyx_n_s_field,&__pyx_n_s_extents,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cylinder", 1, 7, 7, 1); __PYX_ERR(0, 522, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dradius)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cylinder", 1, 7, 7, 2); __PYX_ERR(0, 522, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_theta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cylinder", 1, 7, 7, 3); __PYX_ERR(0, 522, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtheta)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cylinder", 1, 7, 7, 4); __PYX_ERR(0, 522, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cylinder", 1, 7, 7, 5); __PYX_ERR(0, 522, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_extents)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_cylinder", 1, 7, 7, 6); __PYX_ERR(0, 522, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pixelize_cylinder") < 0)) __PYX_ERR(0, 522, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_buff = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_buff.memview)) __PYX_ERR(0, 522, __pyx_L3_error)
    __pyx_v_radius = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_radius.memview)) __PYX_ERR(0, 523, __pyx_L3_error)
    __pyx_v_dradius = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_dradius.memview)) __PYX_ERR(0, 524, __pyx_L3_error)
    __pyx_v_theta = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_theta.memview)) __PYX_ERR(0, 525, __pyx_L3_error)
    __pyx_v_dtheta = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_dtheta.memview)) __PYX_ERR(0, 526, __pyx_L3_error)
    __pyx_v_field = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_field.memview)) __PYX_ERR(0, 527, __pyx_L3_error)
    __pyx_v_extents = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pixelize_cylinder", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 522, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_cylinder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_6pixelize_cylinder(__pyx_self, __pyx_v_buff, __pyx_v_radius, __pyx_v_dradius, __pyx_v_theta, __pyx_v_dtheta, __pyx_v_field, __pyx_v_extents);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_6pixelize_cylinder(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_radius, __Pyx_memviewslice __pyx_v_dradius, __Pyx_memviewslice __pyx_v_theta, __Pyx_memviewslice __pyx_v_dtheta, __Pyx_memviewslice __pyx_v_field, PyObject *__pyx_v_extents) {
  __pyx_t_5numpy_float64_t __pyx_v_x;
  __pyx_t_5numpy_float64_t __pyx_v_y;
  __pyx_t_5numpy_float64_t __pyx_v_dx;
  __pyx_t_5numpy_float64_t __pyx_v_dy;
  __pyx_t_5numpy_float64_t __pyx_v_r0;
  __pyx_t_5numpy_float64_t __pyx_v_theta0;
  __pyx_t_5numpy_float64_t __pyx_v_rmin;
  __pyx_t_5numpy_float64_t __pyx_v_rmax;
  __pyx_t_5numpy_float64_t __pyx_v_tmin;
  __pyx_t_5numpy_float64_t __pyx_v_tmax;
  __pyx_t_5numpy_float64_t __pyx_v_x0;
  __pyx_t_5numpy_float64_t __pyx_v_y0;
  __pyx_t_5numpy_float64_t __pyx_v_x1;
  __pyx_t_5numpy_float64_t __pyx_v_y1;
  __pyx_t_5numpy_float64_t __pyx_v_xp;
  __pyx_t_5numpy_float64_t __pyx_v_yp;
  __pyx_t_5numpy_float64_t __pyx_v_r_i;
  __pyx_t_5numpy_float64_t __pyx_v_theta_i;
  __pyx_t_5numpy_float64_t __pyx_v_dr_i;
  __pyx_t_5numpy_float64_t __pyx_v_dtheta_i;
  __pyx_t_5numpy_float64_t __pyx_v_r_inc;
  __pyx_t_5numpy_float64_t __pyx_v_theta_inc;
  __pyx_t_5numpy_float64_t __pyx_v_costheta;
  __pyx_t_5numpy_float64_t __pyx_v_sintheta;
  int __pyx_v_i;
  int __pyx_v_i1;
  int __pyx_v_pi;
  int __pyx_v_pj;
  int __pyx_v_imin;
  int __pyx_v_imax;
  __pyx_t_5numpy_float64_t __pyx_v_rbounds[2];
  __pyx_t_5numpy_float64_t __pyx_v_prbounds[2];
  __pyx_t_5numpy_float64_t __pyx_v_ptbounds[2];
  __pyx_t_5numpy_float64_t __pyx_v_corners[8];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  __pyx_t_5numpy_float64_t __pyx_t_10;
  __pyx_t_5numpy_float64_t __pyx_t_11;
  __pyx_t_5numpy_float64_t __pyx_t_12;
  __pyx_t_5numpy_float64_t __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  int __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pixelize_cylinder", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":538
 * 
 *     cdef int imin, imax
 *     imin = np.asarray(radius).argmin()             # <<<<<<<<<<<<<<
 *     imax = np.asarray(radius).argmax()
 *     rmin = radius[imin] - dradius[imin]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_radius, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_argmin); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_imin = __pyx_t_6;

  /* "yt/utilities/lib/pixelization_routines.pyx":539
 *     cdef int imin, imax
 *     imin = np.asarray(radius).argmin()
 *     imax = np.asarray(radius).argmax()             # <<<<<<<<<<<<<<
 *     rmin = radius[imin] - dradius[imin]
 *     rmax = radius[imax] + dradius[imax]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_radius, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_argmax); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallNoArg(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_imax = __pyx_t_6;

  /* "yt/utilities/lib/pixelization_routines.pyx":540
 *     imin = np.asarray(radius).argmin()
 *     imax = np.asarray(radius).argmax()
 *     rmin = radius[imin] - dradius[imin]             # <<<<<<<<<<<<<<
 *     rmax = radius[imax] + dradius[imax]
 * 
 */
  __pyx_t_7 = __pyx_v_imin;
  __pyx_t_8 = __pyx_v_imin;
  __pyx_v_rmin = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_radius.data + __pyx_t_7 * __pyx_v_radius.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_dradius.data + __pyx_t_8 * __pyx_v_dradius.strides[0]) ))));

  /* "yt/utilities/lib/pixelization_routines.pyx":541
 *     imax = np.asarray(radius).argmax()
 *     rmin = radius[imin] - dradius[imin]
 *     rmax = radius[imax] + dradius[imax]             # <<<<<<<<<<<<<<
 * 
 *     imin = np.asarray(theta).argmin()
 */
  __pyx_t_8 = __pyx_v_imax;
  __pyx_t_7 = __pyx_v_imax;
  __pyx_v_rmax = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_radius.data + __pyx_t_8 * __pyx_v_radius.strides[0]) ))) + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_dradius.data + __pyx_t_7 * __pyx_v_dradius.strides[0]) ))));

  /* "yt/utilities/lib/pixelization_routines.pyx":543
 *     rmax = radius[imax] + dradius[imax]
 * 
 *     imin = np.asarray(theta).argmin()             # <<<<<<<<<<<<<<
 *     imax = np.asarray(theta).argmax()
 *     tmin = theta[imin] - dtheta[imin]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_theta, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_argmin); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_imin = __pyx_t_6;

  /* "yt/utilities/lib/pixelization_routines.pyx":544
 * 
 *     imin = np.asarray(theta).argmin()
 *     imax = np.asarray(theta).argmax()             # <<<<<<<<<<<<<<
 *     tmin = theta[imin] - dtheta[imin]
 *     tmax = theta[imax] + dtheta[imax]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_theta, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_argmax); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallNoArg(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_imax = __pyx_t_6;

  /* "yt/utilities/lib/pixelization_routines.pyx":545
 *     imin = np.asarray(theta).argmin()
 *     imax = np.asarray(theta).argmax()
 *     tmin = theta[imin] - dtheta[imin]             # <<<<<<<<<<<<<<
 *     tmax = theta[imax] + dtheta[imax]
 * 
 */
  __pyx_t_7 = __pyx_v_imin;
  __pyx_t_8 = __pyx_v_imin;
  __pyx_v_tmin = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_theta.data + __pyx_t_7 * __pyx_v_theta.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_dtheta.data + __pyx_t_8 * __pyx_v_dtheta.strides[0]) ))));

  /* "yt/utilities/lib/pixelization_routines.pyx":546
 *     imax = np.asarray(theta).argmax()
 *     tmin = theta[imin] - dtheta[imin]
 *     tmax = theta[imax] + dtheta[imax]             # <<<<<<<<<<<<<<
 * 
 *     x0, x1, y0, y1 = extents
 */
  __pyx_t_8 = __pyx_v_imax;
  __pyx_t_7 = __pyx_v_imax;
  __pyx_v_tmax = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_theta.data + __pyx_t_8 * __pyx_v_theta.strides[0]) ))) + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_dtheta.data + __pyx_t_7 * __pyx_v_dtheta.strides[0]) ))));

  /* "yt/utilities/lib/pixelization_routines.pyx":548
 *     tmax = theta[imax] + dtheta[imax]
 * 
 *     x0, x1, y0, y1 = extents             # <<<<<<<<<<<<<<
 *     dx = (x1 - x0) / buff.shape[0]
 *     dy = (y1 - y0) / buff.shape[1]
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_extents))) || (PyList_CheckExact(__pyx_v_extents))) {
    PyObject* sequence = __pyx_v_extents;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 548, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_4,&__pyx_t_2,&__pyx_t_3};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 548, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_1,&__pyx_t_4,&__pyx_t_2,&__pyx_t_3};
    __pyx_t_5 = PyObject_GetIter(__pyx_v_extents); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 548, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = Py_TYPE(__pyx_t_5)->tp_iternext;
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_9(__pyx_t_5); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_5), 4) < 0) __PYX_ERR(0, 548, __pyx_L1_error)
    __pyx_t_9 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 548, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_10 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_11 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_12 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_13 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x0 = __pyx_t_10;
  __pyx_v_x1 = __pyx_t_11;
  __pyx_v_y0 = __pyx_t_12;
  __pyx_v_y1 = __pyx_t_13;

  /* "yt/utilities/lib/pixelization_routines.pyx":549
 * 
 *     x0, x1, y0, y1 = extents
 *     dx = (x1 - x0) / buff.shape[0]             # <<<<<<<<<<<<<<
 *     dy = (y1 - y0) / buff.shape[1]
 *     cdef np.float64_t rbounds[2]
 */
  __pyx_v_dx = ((__pyx_v_x1 - __pyx_v_x0) / ((__pyx_t_5numpy_float64_t)(__pyx_v_buff.shape[0])));

  /* "yt/utilities/lib/pixelization_routines.pyx":550
 *     x0, x1, y0, y1 = extents
 *     dx = (x1 - x0) / buff.shape[0]
 *     dy = (y1 - y0) / buff.shape[1]             # <<<<<<<<<<<<<<
 *     cdef np.float64_t rbounds[2]
 *     cdef np.float64_t prbounds[2]
 */
  __pyx_v_dy = ((__pyx_v_y1 - __pyx_v_y0) / ((__pyx_t_5numpy_float64_t)(__pyx_v_buff.shape[1])));

  /* "yt/utilities/lib/pixelization_routines.pyx":556
 *     cdef np.float64_t corners[8]
 *     # Find our min and max r
 *     corners[0] = x0*x0+y0*y0             # <<<<<<<<<<<<<<
 *     corners[1] = x1*x1+y0*y0
 *     corners[2] = x0*x0+y1*y1
 */
  (__pyx_v_corners[0]) = ((__pyx_v_x0 * __pyx_v_x0) + (__pyx_v_y0 * __pyx_v_y0));

  /* "yt/utilities/lib/pixelization_routines.pyx":557
 *     # Find our min and max r
 *     corners[0] = x0*x0+y0*y0
 *     corners[1] = x1*x1+y0*y0             # <<<<<<<<<<<<<<
 *     corners[2] = x0*x0+y1*y1
 *     corners[3] = x1*x1+y1*y1
 */
  (__pyx_v_corners[1]) = ((__pyx_v_x1 * __pyx_v_x1) + (__pyx_v_y0 * __pyx_v_y0));

  /* "yt/utilities/lib/pixelization_routines.pyx":558
 *     corners[0] = x0*x0+y0*y0
 *     corners[1] = x1*x1+y0*y0
 *     corners[2] = x0*x0+y1*y1             # <<<<<<<<<<<<<<
 *     corners[3] = x1*x1+y1*y1
 *     corners[4] = x0*x0
 */
  (__pyx_v_corners[2]) = ((__pyx_v_x0 * __pyx_v_x0) + (__pyx_v_y1 * __pyx_v_y1));

  /* "yt/utilities/lib/pixelization_routines.pyx":559
 *     corners[1] = x1*x1+y0*y0
 *     corners[2] = x0*x0+y1*y1
 *     corners[3] = x1*x1+y1*y1             # <<<<<<<<<<<<<<
 *     corners[4] = x0*x0
 *     corners[5] = x1*x1
 */
  (__pyx_v_corners[3]) = ((__pyx_v_x1 * __pyx_v_x1) + (__pyx_v_y1 * __pyx_v_y1));

  /* "yt/utilities/lib/pixelization_routines.pyx":560
 *     corners[2] = x0*x0+y1*y1
 *     corners[3] = x1*x1+y1*y1
 *     corners[4] = x0*x0             # <<<<<<<<<<<<<<
 *     corners[5] = x1*x1
 *     corners[6] = y0*y0
 */
  (__pyx_v_corners[4]) = (__pyx_v_x0 * __pyx_v_x0);

  /* "yt/utilities/lib/pixelization_routines.pyx":561
 *     corners[3] = x1*x1+y1*y1
 *     corners[4] = x0*x0
 *     corners[5] = x1*x1             # <<<<<<<<<<<<<<
 *     corners[6] = y0*y0
 *     corners[7] = y1*y1
 */
  (__pyx_v_corners[5]) = (__pyx_v_x1 * __pyx_v_x1);

  /* "yt/utilities/lib/pixelization_routines.pyx":562
 *     corners[4] = x0*x0
 *     corners[5] = x1*x1
 *     corners[6] = y0*y0             # <<<<<<<<<<<<<<
 *     corners[7] = y1*y1
 *     rbounds[0] = rbounds[1] = corners[0]
 */
  (__pyx_v_corners[6]) = (__pyx_v_y0 * __pyx_v_y0);

  /* "yt/utilities/lib/pixelization_routines.pyx":563
 *     corners[5] = x1*x1
 *     corners[6] = y0*y0
 *     corners[7] = y1*y1             # <<<<<<<<<<<<<<
 *     rbounds[0] = rbounds[1] = corners[0]
 *     for i in range(8):
 */
  (__pyx_v_corners[7]) = (__pyx_v_y1 * __pyx_v_y1);

  /* "yt/utilities/lib/pixelization_routines.pyx":564
 *     corners[6] = y0*y0
 *     corners[7] = y1*y1
 *     rbounds[0] = rbounds[1] = corners[0]             # <<<<<<<<<<<<<<
 *     for i in range(8):
 *         rbounds[0] = fmin(rbounds[0], corners[i])
 */
  (__pyx_v_rbounds[0]) = (__pyx_v_corners[0]);
  (__pyx_v_rbounds[1]) = (__pyx_v_corners[0]);

  /* "yt/utilities/lib/pixelization_routines.pyx":565
 *     corners[7] = y1*y1
 *     rbounds[0] = rbounds[1] = corners[0]
 *     for i in range(8):             # <<<<<<<<<<<<<<
 *         rbounds[0] = fmin(rbounds[0], corners[i])
 *         rbounds[1] = fmax(rbounds[1], corners[i])
 */
  for (__pyx_t_6 = 0; __pyx_t_6 < 8; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "yt/utilities/lib/pixelization_routines.pyx":566
 *     rbounds[0] = rbounds[1] = corners[0]
 *     for i in range(8):
 *         rbounds[0] = fmin(rbounds[0], corners[i])             # <<<<<<<<<<<<<<
 *         rbounds[1] = fmax(rbounds[1], corners[i])
 *     rbounds[0] = math.sqrt(rbounds[0])
 */
    (__pyx_v_rbounds[0]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin((__pyx_v_rbounds[0]), (__pyx_v_corners[__pyx_v_i]));

    /* "yt/utilities/lib/pixelization_routines.pyx":567
 *     for i in range(8):
 *         rbounds[0] = fmin(rbounds[0], corners[i])
 *         rbounds[1] = fmax(rbounds[1], corners[i])             # <<<<<<<<<<<<<<
 *     rbounds[0] = math.sqrt(rbounds[0])
 *     rbounds[1] = math.sqrt(rbounds[1])
 */
    (__pyx_v_rbounds[1]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax((__pyx_v_rbounds[1]), (__pyx_v_corners[__pyx_v_i]));
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":568
 *         rbounds[0] = fmin(rbounds[0], corners[i])
 *         rbounds[1] = fmax(rbounds[1], corners[i])
 *     rbounds[0] = math.sqrt(rbounds[0])             # <<<<<<<<<<<<<<
 *     rbounds[1] = math.sqrt(rbounds[1])
 *     # If we include the origin in either direction, we need to have radius of
 */
  (__pyx_v_rbounds[0]) = sqrt((__pyx_v_rbounds[0]));

  /* "yt/utilities/lib/pixelization_routines.pyx":569
 *         rbounds[1] = fmax(rbounds[1], corners[i])
 *     rbounds[0] = math.sqrt(rbounds[0])
 *     rbounds[1] = math.sqrt(rbounds[1])             # <<<<<<<<<<<<<<
 *     # If we include the origin in either direction, we need to have radius of
 *     # zero as our lower bound.
 */
  (__pyx_v_rbounds[1]) = sqrt((__pyx_v_rbounds[1]));

  /* "yt/utilities/lib/pixelization_routines.pyx":572
 *     # If we include the origin in either direction, we need to have radius of
 *     # zero as our lower bound.
 *     if x0 < 0 and x1 > 0:             # <<<<<<<<<<<<<<
 *         rbounds[0] = 0.0
 *     if y0 < 0 and y1 > 0:
 */
  __pyx_t_15 = ((__pyx_v_x0 < 0.0) != 0);
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_15 = ((__pyx_v_x1 > 0.0) != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_14) {

    /* "yt/utilities/lib/pixelization_routines.pyx":573
 *     # zero as our lower bound.
 *     if x0 < 0 and x1 > 0:
 *         rbounds[0] = 0.0             # <<<<<<<<<<<<<<
 *     if y0 < 0 and y1 > 0:
 *         rbounds[0] = 0.0
 */
    (__pyx_v_rbounds[0]) = 0.0;

    /* "yt/utilities/lib/pixelization_routines.pyx":572
 *     # If we include the origin in either direction, we need to have radius of
 *     # zero as our lower bound.
 *     if x0 < 0 and x1 > 0:             # <<<<<<<<<<<<<<
 *         rbounds[0] = 0.0
 *     if y0 < 0 and y1 > 0:
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":574
 *     if x0 < 0 and x1 > 0:
 *         rbounds[0] = 0.0
 *     if y0 < 0 and y1 > 0:             # <<<<<<<<<<<<<<
 *         rbounds[0] = 0.0
 *     r_inc = 0.5 * fmin(dx, dy)
 */
  __pyx_t_15 = ((__pyx_v_y0 < 0.0) != 0);
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L11_bool_binop_done;
  }
  __pyx_t_15 = ((__pyx_v_y1 > 0.0) != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L11_bool_binop_done:;
  if (__pyx_t_14) {

    /* "yt/utilities/lib/pixelization_routines.pyx":575
 *         rbounds[0] = 0.0
 *     if y0 < 0 and y1 > 0:
 *         rbounds[0] = 0.0             # <<<<<<<<<<<<<<
 *     r_inc = 0.5 * fmin(dx, dy)
 * 
 */
    (__pyx_v_rbounds[0]) = 0.0;

    /* "yt/utilities/lib/pixelization_routines.pyx":574
 *     if x0 < 0 and x1 > 0:
 *         rbounds[0] = 0.0
 *     if y0 < 0 and y1 > 0:             # <<<<<<<<<<<<<<
 *         rbounds[0] = 0.0
 *     r_inc = 0.5 * fmin(dx, dy)
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":576
 *     if y0 < 0 and y1 > 0:
 *         rbounds[0] = 0.0
 *     r_inc = 0.5 * fmin(dx, dy)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(radius.shape[0]):
 */
  __pyx_v_r_inc = (0.5 * __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_dx, __pyx_v_dy));

  /* "yt/utilities/lib/pixelization_routines.pyx":578
 *     r_inc = 0.5 * fmin(dx, dy)
 * 
 *     for i in range(radius.shape[0]):             # <<<<<<<<<<<<<<
 *         r0 = radius[i]
 *         theta0 = theta[i]
 */
  __pyx_t_16 = (__pyx_v_radius.shape[0]);
  __pyx_t_17 = __pyx_t_16;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_17; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "yt/utilities/lib/pixelization_routines.pyx":579
 * 
 *     for i in range(radius.shape[0]):
 *         r0 = radius[i]             # <<<<<<<<<<<<<<
 *         theta0 = theta[i]
 *         dr_i = dradius[i]
 */
    __pyx_t_7 = __pyx_v_i;
    __pyx_v_r0 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_radius.data + __pyx_t_7 * __pyx_v_radius.strides[0]) )));

    /* "yt/utilities/lib/pixelization_routines.pyx":580
 *     for i in range(radius.shape[0]):
 *         r0 = radius[i]
 *         theta0 = theta[i]             # <<<<<<<<<<<<<<
 *         dr_i = dradius[i]
 *         dtheta_i = dtheta[i]
 */
    __pyx_t_7 = __pyx_v_i;
    __pyx_v_theta0 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_theta.data + __pyx_t_7 * __pyx_v_theta.strides[0]) )));

    /* "yt/utilities/lib/pixelization_routines.pyx":581
 *         r0 = radius[i]
 *         theta0 = theta[i]
 *         dr_i = dradius[i]             # <<<<<<<<<<<<<<
 *         dtheta_i = dtheta[i]
 *         # Skip out early if we're offsides, for zoomed in plots
 */
    __pyx_t_7 = __pyx_v_i;
    __pyx_v_dr_i = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_dradius.data + __pyx_t_7 * __pyx_v_dradius.strides[0]) )));

    /* "yt/utilities/lib/pixelization_routines.pyx":582
 *         theta0 = theta[i]
 *         dr_i = dradius[i]
 *         dtheta_i = dtheta[i]             # <<<<<<<<<<<<<<
 *         # Skip out early if we're offsides, for zoomed in plots
 *         if r0 + dr_i < rbounds[0] or r0 - dr_i > rbounds[1]:
 */
    __pyx_t_7 = __pyx_v_i;
    __pyx_v_dtheta_i = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_dtheta.data + __pyx_t_7 * __pyx_v_dtheta.strides[0]) )));

    /* "yt/utilities/lib/pixelization_routines.pyx":584
 *         dtheta_i = dtheta[i]
 *         # Skip out early if we're offsides, for zoomed in plots
 *         if r0 + dr_i < rbounds[0] or r0 - dr_i > rbounds[1]:             # <<<<<<<<<<<<<<
 *             continue
 *         theta_i = theta0 - dtheta_i
 */
    __pyx_t_15 = (((__pyx_v_r0 + __pyx_v_dr_i) < (__pyx_v_rbounds[0])) != 0);
    if (!__pyx_t_15) {
    } else {
      __pyx_t_14 = __pyx_t_15;
      goto __pyx_L16_bool_binop_done;
    }
    __pyx_t_15 = (((__pyx_v_r0 - __pyx_v_dr_i) > (__pyx_v_rbounds[1])) != 0);
    __pyx_t_14 = __pyx_t_15;
    __pyx_L16_bool_binop_done:;
    if (__pyx_t_14) {

      /* "yt/utilities/lib/pixelization_routines.pyx":585
 *         # Skip out early if we're offsides, for zoomed in plots
 *         if r0 + dr_i < rbounds[0] or r0 - dr_i > rbounds[1]:
 *             continue             # <<<<<<<<<<<<<<
 *         theta_i = theta0 - dtheta_i
 *         theta_inc = r_inc / (r0 + dr_i)
 */
      goto __pyx_L13_continue;

      /* "yt/utilities/lib/pixelization_routines.pyx":584
 *         dtheta_i = dtheta[i]
 *         # Skip out early if we're offsides, for zoomed in plots
 *         if r0 + dr_i < rbounds[0] or r0 - dr_i > rbounds[1]:             # <<<<<<<<<<<<<<
 *             continue
 *         theta_i = theta0 - dtheta_i
 */
    }

    /* "yt/utilities/lib/pixelization_routines.pyx":586
 *         if r0 + dr_i < rbounds[0] or r0 - dr_i > rbounds[1]:
 *             continue
 *         theta_i = theta0 - dtheta_i             # <<<<<<<<<<<<<<
 *         theta_inc = r_inc / (r0 + dr_i)
 * 
 */
    __pyx_v_theta_i = (__pyx_v_theta0 - __pyx_v_dtheta_i);

    /* "yt/utilities/lib/pixelization_routines.pyx":587
 *             continue
 *         theta_i = theta0 - dtheta_i
 *         theta_inc = r_inc / (r0 + dr_i)             # <<<<<<<<<<<<<<
 * 
 *         while theta_i < theta0 + dtheta_i:
 */
    __pyx_v_theta_inc = (__pyx_v_r_inc / (__pyx_v_r0 + __pyx_v_dr_i));

    /* "yt/utilities/lib/pixelization_routines.pyx":589
 *         theta_inc = r_inc / (r0 + dr_i)
 * 
 *         while theta_i < theta0 + dtheta_i:             # <<<<<<<<<<<<<<
 *             r_i = r0 - dr_i
 *             costheta = math.cos(theta_i)
 */
    while (1) {
      __pyx_t_14 = ((__pyx_v_theta_i < (__pyx_v_theta0 + __pyx_v_dtheta_i)) != 0);
      if (!__pyx_t_14) break;

      /* "yt/utilities/lib/pixelization_routines.pyx":590
 * 
 *         while theta_i < theta0 + dtheta_i:
 *             r_i = r0 - dr_i             # <<<<<<<<<<<<<<
 *             costheta = math.cos(theta_i)
 *             sintheta = math.sin(theta_i)
 */
      __pyx_v_r_i = (__pyx_v_r0 - __pyx_v_dr_i);

      /* "yt/utilities/lib/pixelization_routines.pyx":591
 *         while theta_i < theta0 + dtheta_i:
 *             r_i = r0 - dr_i
 *             costheta = math.cos(theta_i)             # <<<<<<<<<<<<<<
 *             sintheta = math.sin(theta_i)
 *             while r_i < r0 + dr_i:
 */
      __pyx_v_costheta = cos(__pyx_v_theta_i);

      /* "yt/utilities/lib/pixelization_routines.pyx":592
 *             r_i = r0 - dr_i
 *             costheta = math.cos(theta_i)
 *             sintheta = math.sin(theta_i)             # <<<<<<<<<<<<<<
 *             while r_i < r0 + dr_i:
 *                 if rmax <= r_i:
 */
      __pyx_v_sintheta = sin(__pyx_v_theta_i);

      /* "yt/utilities/lib/pixelization_routines.pyx":593
 *             costheta = math.cos(theta_i)
 *             sintheta = math.sin(theta_i)
 *             while r_i < r0 + dr_i:             # <<<<<<<<<<<<<<
 *                 if rmax <= r_i:
 *                     r_i += r_inc
 */
      while (1) {
        __pyx_t_14 = ((__pyx_v_r_i < (__pyx_v_r0 + __pyx_v_dr_i)) != 0);
        if (!__pyx_t_14) break;

        /* "yt/utilities/lib/pixelization_routines.pyx":594
 *             sintheta = math.sin(theta_i)
 *             while r_i < r0 + dr_i:
 *                 if rmax <= r_i:             # <<<<<<<<<<<<<<
 *                     r_i += r_inc
 *                     continue
 */
        __pyx_t_14 = ((__pyx_v_rmax <= __pyx_v_r_i) != 0);
        if (__pyx_t_14) {

          /* "yt/utilities/lib/pixelization_routines.pyx":595
 *             while r_i < r0 + dr_i:
 *                 if rmax <= r_i:
 *                     r_i += r_inc             # <<<<<<<<<<<<<<
 *                     continue
 *                 y = r_i * costheta
 */
          __pyx_v_r_i = (__pyx_v_r_i + __pyx_v_r_inc);

          /* "yt/utilities/lib/pixelization_routines.pyx":596
 *                 if rmax <= r_i:
 *                     r_i += r_inc
 *                     continue             # <<<<<<<<<<<<<<
 *                 y = r_i * costheta
 *                 x = r_i * sintheta
 */
          goto __pyx_L20_continue;

          /* "yt/utilities/lib/pixelization_routines.pyx":594
 *             sintheta = math.sin(theta_i)
 *             while r_i < r0 + dr_i:
 *                 if rmax <= r_i:             # <<<<<<<<<<<<<<
 *                     r_i += r_inc
 *                     continue
 */
        }

        /* "yt/utilities/lib/pixelization_routines.pyx":597
 *                     r_i += r_inc
 *                     continue
 *                 y = r_i * costheta             # <<<<<<<<<<<<<<
 *                 x = r_i * sintheta
 *                 pi = <int>((x - x0)/dx)
 */
        __pyx_v_y = (__pyx_v_r_i * __pyx_v_costheta);

        /* "yt/utilities/lib/pixelization_routines.pyx":598
 *                     continue
 *                 y = r_i * costheta
 *                 x = r_i * sintheta             # <<<<<<<<<<<<<<
 *                 pi = <int>((x - x0)/dx)
 *                 pj = <int>((y - y0)/dy)
 */
        __pyx_v_x = (__pyx_v_r_i * __pyx_v_sintheta);

        /* "yt/utilities/lib/pixelization_routines.pyx":599
 *                 y = r_i * costheta
 *                 x = r_i * sintheta
 *                 pi = <int>((x - x0)/dx)             # <<<<<<<<<<<<<<
 *                 pj = <int>((y - y0)/dy)
 *                 if pi >= 0 and pi < buff.shape[0] and \
 */
        __pyx_v_pi = ((int)((__pyx_v_x - __pyx_v_x0) / __pyx_v_dx));

        /* "yt/utilities/lib/pixelization_routines.pyx":600
 *                 x = r_i * sintheta
 *                 pi = <int>((x - x0)/dx)
 *                 pj = <int>((y - y0)/dy)             # <<<<<<<<<<<<<<
 *                 if pi >= 0 and pi < buff.shape[0] and \
 *                    pj >= 0 and pj < buff.shape[1]:
 */
        __pyx_v_pj = ((int)((__pyx_v_y - __pyx_v_y0) / __pyx_v_dy));

        /* "yt/utilities/lib/pixelization_routines.pyx":601
 *                 pi = <int>((x - x0)/dx)
 *                 pj = <int>((y - y0)/dy)
 *                 if pi >= 0 and pi < buff.shape[0] and \             # <<<<<<<<<<<<<<
 *                    pj >= 0 and pj < buff.shape[1]:
 *                     # we got a pixel that intersects the grid cell
 */
        __pyx_t_15 = ((__pyx_v_pi >= 0) != 0);
        if (__pyx_t_15) {
        } else {
          __pyx_t_14 = __pyx_t_15;
          goto __pyx_L24_bool_binop_done;
        }
        __pyx_t_15 = ((__pyx_v_pi < (__pyx_v_buff.shape[0])) != 0);
        if (__pyx_t_15) {
        } else {
          __pyx_t_14 = __pyx_t_15;
          goto __pyx_L24_bool_binop_done;
        }

        /* "yt/utilities/lib/pixelization_routines.pyx":602
 *                 pj = <int>((y - y0)/dy)
 *                 if pi >= 0 and pi < buff.shape[0] and \
 *                    pj >= 0 and pj < buff.shape[1]:             # <<<<<<<<<<<<<<
 *                     # we got a pixel that intersects the grid cell
 *                     # now check that this pixel doesn't go beyond the data domain
 */
        __pyx_t_15 = ((__pyx_v_pj >= 0) != 0);
        if (__pyx_t_15) {
        } else {
          __pyx_t_14 = __pyx_t_15;
          goto __pyx_L24_bool_binop_done;
        }
        __pyx_t_15 = ((__pyx_v_pj < (__pyx_v_buff.shape[1])) != 0);
        __pyx_t_14 = __pyx_t_15;
        __pyx_L24_bool_binop_done:;

        /* "yt/utilities/lib/pixelization_routines.pyx":601
 *                 pi = <int>((x - x0)/dx)
 *                 pj = <int>((y - y0)/dy)
 *                 if pi >= 0 and pi < buff.shape[0] and \             # <<<<<<<<<<<<<<
 *                    pj >= 0 and pj < buff.shape[1]:
 *                     # we got a pixel that intersects the grid cell
 */
        if (__pyx_t_14) {

          /* "yt/utilities/lib/pixelization_routines.pyx":605
 *                     # we got a pixel that intersects the grid cell
 *                     # now check that this pixel doesn't go beyond the data domain
 *                     xp = x0 + pi*dx             # <<<<<<<<<<<<<<
 *                     yp = y0 + pj*dy
 *                     corners[0] = xp*xp + yp*yp
 */
          __pyx_v_xp = (__pyx_v_x0 + (__pyx_v_pi * __pyx_v_dx));

          /* "yt/utilities/lib/pixelization_routines.pyx":606
 *                     # now check that this pixel doesn't go beyond the data domain
 *                     xp = x0 + pi*dx
 *                     yp = y0 + pj*dy             # <<<<<<<<<<<<<<
 *                     corners[0] = xp*xp + yp*yp
 *                     corners[1] = xp*xp + (yp+dy)**2
 */
          __pyx_v_yp = (__pyx_v_y0 + (__pyx_v_pj * __pyx_v_dy));

          /* "yt/utilities/lib/pixelization_routines.pyx":607
 *                     xp = x0 + pi*dx
 *                     yp = y0 + pj*dy
 *                     corners[0] = xp*xp + yp*yp             # <<<<<<<<<<<<<<
 *                     corners[1] = xp*xp + (yp+dy)**2
 *                     corners[2] = (xp+dx)**2 + yp*yp
 */
          (__pyx_v_corners[0]) = ((__pyx_v_xp * __pyx_v_xp) + (__pyx_v_yp * __pyx_v_yp));

          /* "yt/utilities/lib/pixelization_routines.pyx":608
 *                     yp = y0 + pj*dy
 *                     corners[0] = xp*xp + yp*yp
 *                     corners[1] = xp*xp + (yp+dy)**2             # <<<<<<<<<<<<<<
 *                     corners[2] = (xp+dx)**2 + yp*yp
 *                     corners[3] = (xp+dx)**2 + (yp+dy)**2
 */
          (__pyx_v_corners[1]) = ((__pyx_v_xp * __pyx_v_xp) + pow((__pyx_v_yp + __pyx_v_dy), 2.0));

          /* "yt/utilities/lib/pixelization_routines.pyx":609
 *                     corners[0] = xp*xp + yp*yp
 *                     corners[1] = xp*xp + (yp+dy)**2
 *                     corners[2] = (xp+dx)**2 + yp*yp             # <<<<<<<<<<<<<<
 *                     corners[3] = (xp+dx)**2 + (yp+dy)**2
 *                     prbounds[0] = prbounds[1] = corners[3]
 */
          (__pyx_v_corners[2]) = (pow((__pyx_v_xp + __pyx_v_dx), 2.0) + (__pyx_v_yp * __pyx_v_yp));

          /* "yt/utilities/lib/pixelization_routines.pyx":610
 *                     corners[1] = xp*xp + (yp+dy)**2
 *                     corners[2] = (xp+dx)**2 + yp*yp
 *                     corners[3] = (xp+dx)**2 + (yp+dy)**2             # <<<<<<<<<<<<<<
 *                     prbounds[0] = prbounds[1] = corners[3]
 *                     for i1 in range(3):
 */
          (__pyx_v_corners[3]) = (pow((__pyx_v_xp + __pyx_v_dx), 2.0) + pow((__pyx_v_yp + __pyx_v_dy), 2.0));

          /* "yt/utilities/lib/pixelization_routines.pyx":611
 *                     corners[2] = (xp+dx)**2 + yp*yp
 *                     corners[3] = (xp+dx)**2 + (yp+dy)**2
 *                     prbounds[0] = prbounds[1] = corners[3]             # <<<<<<<<<<<<<<
 *                     for i1 in range(3):
 *                         prbounds[0] = fmin(prbounds[0], corners[i1])
 */
          (__pyx_v_prbounds[0]) = (__pyx_v_corners[3]);
          (__pyx_v_prbounds[1]) = (__pyx_v_corners[3]);

          /* "yt/utilities/lib/pixelization_routines.pyx":612
 *                     corners[3] = (xp+dx)**2 + (yp+dy)**2
 *                     prbounds[0] = prbounds[1] = corners[3]
 *                     for i1 in range(3):             # <<<<<<<<<<<<<<
 *                         prbounds[0] = fmin(prbounds[0], corners[i1])
 *                         prbounds[1] = fmax(prbounds[1], corners[i1])
 */
          for (__pyx_t_18 = 0; __pyx_t_18 < 3; __pyx_t_18+=1) {
            __pyx_v_i1 = __pyx_t_18;

            /* "yt/utilities/lib/pixelization_routines.pyx":613
 *                     prbounds[0] = prbounds[1] = corners[3]
 *                     for i1 in range(3):
 *                         prbounds[0] = fmin(prbounds[0], corners[i1])             # <<<<<<<<<<<<<<
 *                         prbounds[1] = fmax(prbounds[1], corners[i1])
 *                     prbounds[0] = math.sqrt(prbounds[0])
 */
            (__pyx_v_prbounds[0]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin((__pyx_v_prbounds[0]), (__pyx_v_corners[__pyx_v_i1]));

            /* "yt/utilities/lib/pixelization_routines.pyx":614
 *                     for i1 in range(3):
 *                         prbounds[0] = fmin(prbounds[0], corners[i1])
 *                         prbounds[1] = fmax(prbounds[1], corners[i1])             # <<<<<<<<<<<<<<
 *                     prbounds[0] = math.sqrt(prbounds[0])
 *                     prbounds[1] = math.sqrt(prbounds[1])
 */
            (__pyx_v_prbounds[1]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax((__pyx_v_prbounds[1]), (__pyx_v_corners[__pyx_v_i1]));
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":615
 *                         prbounds[0] = fmin(prbounds[0], corners[i1])
 *                         prbounds[1] = fmax(prbounds[1], corners[i1])
 *                     prbounds[0] = math.sqrt(prbounds[0])             # <<<<<<<<<<<<<<
 *                     prbounds[1] = math.sqrt(prbounds[1])
 * 
 */
          (__pyx_v_prbounds[0]) = sqrt((__pyx_v_prbounds[0]));

          /* "yt/utilities/lib/pixelization_routines.pyx":616
 *                         prbounds[1] = fmax(prbounds[1], corners[i1])
 *                     prbounds[0] = math.sqrt(prbounds[0])
 *                     prbounds[1] = math.sqrt(prbounds[1])             # <<<<<<<<<<<<<<
 * 
 *                     corners[0] = math.atan2(xp, yp)
 */
          (__pyx_v_prbounds[1]) = sqrt((__pyx_v_prbounds[1]));

          /* "yt/utilities/lib/pixelization_routines.pyx":618
 *                     prbounds[1] = math.sqrt(prbounds[1])
 * 
 *                     corners[0] = math.atan2(xp, yp)             # <<<<<<<<<<<<<<
 *                     corners[1] = math.atan2(xp, yp+dy)
 *                     corners[2] = math.atan2(xp+dx, yp)
 */
          (__pyx_v_corners[0]) = atan2(__pyx_v_xp, __pyx_v_yp);

          /* "yt/utilities/lib/pixelization_routines.pyx":619
 * 
 *                     corners[0] = math.atan2(xp, yp)
 *                     corners[1] = math.atan2(xp, yp+dy)             # <<<<<<<<<<<<<<
 *                     corners[2] = math.atan2(xp+dx, yp)
 *                     corners[3] = math.atan2(xp+dx, yp+dy)
 */
          (__pyx_v_corners[1]) = atan2(__pyx_v_xp, (__pyx_v_yp + __pyx_v_dy));

          /* "yt/utilities/lib/pixelization_routines.pyx":620
 *                     corners[0] = math.atan2(xp, yp)
 *                     corners[1] = math.atan2(xp, yp+dy)
 *                     corners[2] = math.atan2(xp+dx, yp)             # <<<<<<<<<<<<<<
 *                     corners[3] = math.atan2(xp+dx, yp+dy)
 *                     ptbounds[0] = ptbounds[1] = corners[3]
 */
          (__pyx_v_corners[2]) = atan2((__pyx_v_xp + __pyx_v_dx), __pyx_v_yp);

          /* "yt/utilities/lib/pixelization_routines.pyx":621
 *                     corners[1] = math.atan2(xp, yp+dy)
 *                     corners[2] = math.atan2(xp+dx, yp)
 *                     corners[3] = math.atan2(xp+dx, yp+dy)             # <<<<<<<<<<<<<<
 *                     ptbounds[0] = ptbounds[1] = corners[3]
 *                     for i1 in range(3):
 */
          (__pyx_v_corners[3]) = atan2((__pyx_v_xp + __pyx_v_dx), (__pyx_v_yp + __pyx_v_dy));

          /* "yt/utilities/lib/pixelization_routines.pyx":622
 *                     corners[2] = math.atan2(xp+dx, yp)
 *                     corners[3] = math.atan2(xp+dx, yp+dy)
 *                     ptbounds[0] = ptbounds[1] = corners[3]             # <<<<<<<<<<<<<<
 *                     for i1 in range(3):
 *                         ptbounds[0] = fmin(ptbounds[0], corners[i1])
 */
          (__pyx_v_ptbounds[0]) = (__pyx_v_corners[3]);
          (__pyx_v_ptbounds[1]) = (__pyx_v_corners[3]);

          /* "yt/utilities/lib/pixelization_routines.pyx":623
 *                     corners[3] = math.atan2(xp+dx, yp+dy)
 *                     ptbounds[0] = ptbounds[1] = corners[3]
 *                     for i1 in range(3):             # <<<<<<<<<<<<<<
 *                         ptbounds[0] = fmin(ptbounds[0], corners[i1])
 *                         ptbounds[1] = fmax(ptbounds[1], corners[i1])
 */
          for (__pyx_t_18 = 0; __pyx_t_18 < 3; __pyx_t_18+=1) {
            __pyx_v_i1 = __pyx_t_18;

            /* "yt/utilities/lib/pixelization_routines.pyx":624
 *                     ptbounds[0] = ptbounds[1] = corners[3]
 *                     for i1 in range(3):
 *                         ptbounds[0] = fmin(ptbounds[0], corners[i1])             # <<<<<<<<<<<<<<
 *                         ptbounds[1] = fmax(ptbounds[1], corners[i1])
 * 
 */
            (__pyx_v_ptbounds[0]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin((__pyx_v_ptbounds[0]), (__pyx_v_corners[__pyx_v_i1]));

            /* "yt/utilities/lib/pixelization_routines.pyx":625
 *                     for i1 in range(3):
 *                         ptbounds[0] = fmin(ptbounds[0], corners[i1])
 *                         ptbounds[1] = fmax(ptbounds[1], corners[i1])             # <<<<<<<<<<<<<<
 * 
 *                     # shift to a [0, PI] interval
 */
            (__pyx_v_ptbounds[1]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax((__pyx_v_ptbounds[1]), (__pyx_v_corners[__pyx_v_i1]));
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":628
 * 
 *                     # shift to a [0, PI] interval
 *                     ptbounds[0] = ptbounds[0] % (2*np.pi)             # <<<<<<<<<<<<<<
 *                     ptbounds[1] = ptbounds[1] % (2*np.pi)
 * 
 */
          __pyx_t_3 = PyFloat_FromDouble((__pyx_v_ptbounds[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 628, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_pi); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 628, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 628, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyNumber_Remainder(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 628, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_13 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 628, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          (__pyx_v_ptbounds[0]) = __pyx_t_13;

          /* "yt/utilities/lib/pixelization_routines.pyx":629
 *                     # shift to a [0, PI] interval
 *                     ptbounds[0] = ptbounds[0] % (2*np.pi)
 *                     ptbounds[1] = ptbounds[1] % (2*np.pi)             # <<<<<<<<<<<<<<
 * 
 *                     if prbounds[0] >= rmin and prbounds[1] <= rmax and \
 */
          __pyx_t_4 = PyFloat_FromDouble((__pyx_v_ptbounds[1])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 629, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 629, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_pi); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 629, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 629, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyNumber_Remainder(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 629, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_13 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 629, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          (__pyx_v_ptbounds[1]) = __pyx_t_13;

          /* "yt/utilities/lib/pixelization_routines.pyx":631
 *                     ptbounds[1] = ptbounds[1] % (2*np.pi)
 * 
 *                     if prbounds[0] >= rmin and prbounds[1] <= rmax and \             # <<<<<<<<<<<<<<
 *                        ptbounds[0] >= tmin and ptbounds[1] <= tmax:
 *                         buff[pi, pj] = field[i]
 */
          __pyx_t_15 = (((__pyx_v_prbounds[0]) >= __pyx_v_rmin) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L33_bool_binop_done;
          }
          __pyx_t_15 = (((__pyx_v_prbounds[1]) <= __pyx_v_rmax) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L33_bool_binop_done;
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":632
 * 
 *                     if prbounds[0] >= rmin and prbounds[1] <= rmax and \
 *                        ptbounds[0] >= tmin and ptbounds[1] <= tmax:             # <<<<<<<<<<<<<<
 *                         buff[pi, pj] = field[i]
 *                 r_i += r_inc
 */
          __pyx_t_15 = (((__pyx_v_ptbounds[0]) >= __pyx_v_tmin) != 0);
          if (__pyx_t_15) {
          } else {
            __pyx_t_14 = __pyx_t_15;
            goto __pyx_L33_bool_binop_done;
          }
          __pyx_t_15 = (((__pyx_v_ptbounds[1]) <= __pyx_v_tmax) != 0);
          __pyx_t_14 = __pyx_t_15;
          __pyx_L33_bool_binop_done:;

          /* "yt/utilities/lib/pixelization_routines.pyx":631
 *                     ptbounds[1] = ptbounds[1] % (2*np.pi)
 * 
 *                     if prbounds[0] >= rmin and prbounds[1] <= rmax and \             # <<<<<<<<<<<<<<
 *                        ptbounds[0] >= tmin and ptbounds[1] <= tmax:
 *                         buff[pi, pj] = field[i]
 */
          if (__pyx_t_14) {

            /* "yt/utilities/lib/pixelization_routines.pyx":633
 *                     if prbounds[0] >= rmin and prbounds[1] <= rmax and \
 *                        ptbounds[0] >= tmin and ptbounds[1] <= tmax:
 *                         buff[pi, pj] = field[i]             # <<<<<<<<<<<<<<
 *                 r_i += r_inc
 *             theta_i += theta_inc
 */
            __pyx_t_7 = __pyx_v_i;
            __pyx_t_8 = __pyx_v_pi;
            __pyx_t_19 = __pyx_v_pj;
            *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_8 * __pyx_v_buff.strides[0]) ) + __pyx_t_19 * __pyx_v_buff.strides[1]) )) = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_field.data + __pyx_t_7 * __pyx_v_field.strides[0]) )));

            /* "yt/utilities/lib/pixelization_routines.pyx":631
 *                     ptbounds[1] = ptbounds[1] % (2*np.pi)
 * 
 *                     if prbounds[0] >= rmin and prbounds[1] <= rmax and \             # <<<<<<<<<<<<<<
 *                        ptbounds[0] >= tmin and ptbounds[1] <= tmax:
 *                         buff[pi, pj] = field[i]
 */
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":601
 *                 pi = <int>((x - x0)/dx)
 *                 pj = <int>((y - y0)/dy)
 *                 if pi >= 0 and pi < buff.shape[0] and \             # <<<<<<<<<<<<<<
 *                    pj >= 0 and pj < buff.shape[1]:
 *                     # we got a pixel that intersects the grid cell
 */
        }

        /* "yt/utilities/lib/pixelization_routines.pyx":634
 *                        ptbounds[0] >= tmin and ptbounds[1] <= tmax:
 *                         buff[pi, pj] = field[i]
 *                 r_i += r_inc             # <<<<<<<<<<<<<<
 *             theta_i += theta_inc
 * 
 */
        __pyx_v_r_i = (__pyx_v_r_i + __pyx_v_r_inc);
        __pyx_L20_continue:;
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":635
 *                         buff[pi, pj] = field[i]
 *                 r_i += r_inc
 *             theta_i += theta_inc             # <<<<<<<<<<<<<<
 * 
 * cdef int aitoff_Lambda_btheta_to_xy(np.float64_t Lambda, np.float64_t btheta,
 */
      __pyx_v_theta_i = (__pyx_v_theta_i + __pyx_v_theta_inc);
    }
    __pyx_L13_continue:;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":522
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cylinder(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                       np.float64_t[:] radius,
 *                       np.float64_t[:] dradius,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_cylinder", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_buff, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_radius, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_dradius, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_theta, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_dtheta, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_field, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":637
 *             theta_i += theta_inc
 * 
 * cdef int aitoff_Lambda_btheta_to_xy(np.float64_t Lambda, np.float64_t btheta,             # <<<<<<<<<<<<<<
 *                                np.float64_t *x, np.float64_t *y) except -1:
 *     cdef np.float64_t z = math.sqrt(1 + math.cos(btheta) * math.cos(Lambda / 2.0))
 */

static int __pyx_f_2yt_9utilities_3lib_21pixelization_routines_aitoff_Lambda_btheta_to_xy(__pyx_t_5numpy_float64_t __pyx_v_Lambda, __pyx_t_5numpy_float64_t __pyx_v_btheta, __pyx_t_5numpy_float64_t *__pyx_v_x, __pyx_t_5numpy_float64_t *__pyx_v_y) {
  __pyx_t_5numpy_float64_t __pyx_v_z;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("aitoff_Lambda_btheta_to_xy", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":639
 * cdef int aitoff_Lambda_btheta_to_xy(np.float64_t Lambda, np.float64_t btheta,
 *                                np.float64_t *x, np.float64_t *y) except -1:
 *     cdef np.float64_t z = math.sqrt(1 + math.cos(btheta) * math.cos(Lambda / 2.0))             # <<<<<<<<<<<<<<
 *     x[0] = 2.0 * math.cos(btheta) * math.sin(Lambda / 2.0) / z
 *     y[0] = math.sin(btheta) / z
 */
  __pyx_v_z = sqrt((1.0 + (cos(__pyx_v_btheta) * cos((__pyx_v_Lambda / ((__pyx_t_5numpy_float64_t)2.0))))));

  /* "yt/utilities/lib/pixelization_routines.pyx":640
 *                                np.float64_t *x, np.float64_t *y) except -1:
 *     cdef np.float64_t z = math.sqrt(1 + math.cos(btheta) * math.cos(Lambda / 2.0))
 *     x[0] = 2.0 * math.cos(btheta) * math.sin(Lambda / 2.0) / z             # <<<<<<<<<<<<<<
 *     y[0] = math.sin(btheta) / z
 *     return 0
 */
  __pyx_t_1 = ((2.0 * cos(__pyx_v_btheta)) * sin((__pyx_v_Lambda / ((__pyx_t_5numpy_float64_t)2.0))));
  if (unlikely(__pyx_v_z == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 640, __pyx_L1_error)
  }
  (__pyx_v_x[0]) = (((__pyx_t_5numpy_float64_t)__pyx_t_1) / __pyx_v_z);

  /* "yt/utilities/lib/pixelization_routines.pyx":641
 *     cdef np.float64_t z = math.sqrt(1 + math.cos(btheta) * math.cos(Lambda / 2.0))
 *     x[0] = 2.0 * math.cos(btheta) * math.sin(Lambda / 2.0) / z
 *     y[0] = math.sin(btheta) / z             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  __pyx_t_1 = sin(__pyx_v_btheta);
  if (unlikely(__pyx_v_z == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 641, __pyx_L1_error)
  }
  (__pyx_v_y[0]) = (((__pyx_t_5numpy_float64_t)__pyx_t_1) / __pyx_v_z);

  /* "yt/utilities/lib/pixelization_routines.pyx":642
 *     x[0] = 2.0 * math.cos(btheta) * math.sin(Lambda / 2.0) / z
 *     y[0] = math.sin(btheta) / z
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "yt/utilities/lib/pixelization_routines.pyx":637
 *             theta_i += theta_inc
 * 
 * cdef int aitoff_Lambda_btheta_to_xy(np.float64_t Lambda, np.float64_t btheta,             # <<<<<<<<<<<<<<
 *                                np.float64_t *x, np.float64_t *y) except -1:
 *     cdef np.float64_t z = math.sqrt(1 + math.cos(btheta) * math.cos(Lambda / 2.0))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.aitoff_Lambda_btheta_to_xy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":647
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_aitoff(np.float64_t[:] azimuth,             # <<<<<<<<<<<<<<
 *                     np.float64_t[:] dazimuth,
 *                     np.float64_t[:] colatitude,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_9pixelize_aitoff(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_9pixelize_aitoff = {"pixelize_aitoff", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_9pixelize_aitoff, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_9pixelize_aitoff(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_azimuth = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_dazimuth = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_colatitude = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_dcolatitude = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_buff_size = 0;
  __Pyx_memviewslice __pyx_v_field = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_bounds = 0;
  PyObject *__pyx_v_input_img = 0;
  __pyx_t_5numpy_float64_t __pyx_v_azimuth_offset;
  __pyx_t_5numpy_float64_t __pyx_v_colatitude_offset;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pixelize_aitoff (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_azimuth,&__pyx_n_s_dazimuth,&__pyx_n_s_colatitude,&__pyx_n_s_dcolatitude,&__pyx_n_s_buff_size,&__pyx_n_s_field,&__pyx_n_s_bounds,&__pyx_n_s_input_img,&__pyx_n_s_azimuth_offset,&__pyx_n_s_colatitude_offset,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};

    /* "yt/utilities/lib/pixelization_routines.pyx":654
 *                     np.float64_t[:] field,
 *                     bounds, # this is a 4-tuple
 *                     input_img = None,             # <<<<<<<<<<<<<<
 *                     np.float64_t azimuth_offset = 0.0,
 *                     np.float64_t colatitude_offset = 0.0):
 */
    values[7] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_azimuth)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dazimuth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_aitoff", 0, 7, 10, 1); __PYX_ERR(0, 647, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_colatitude)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_aitoff", 0, 7, 10, 2); __PYX_ERR(0, 647, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dcolatitude)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_aitoff", 0, 7, 10, 3); __PYX_ERR(0, 647, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_aitoff", 0, 7, 10, 4); __PYX_ERR(0, 647, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_aitoff", 0, 7, 10, 5); __PYX_ERR(0, 647, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_aitoff", 0, 7, 10, 6); __PYX_ERR(0, 647, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_input_img);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_azimuth_offset);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_colatitude_offset);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pixelize_aitoff") < 0)) __PYX_ERR(0, 647, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_azimuth = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_azimuth.memview)) __PYX_ERR(0, 647, __pyx_L3_error)
    __pyx_v_dazimuth = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_dazimuth.memview)) __PYX_ERR(0, 648, __pyx_L3_error)
    __pyx_v_colatitude = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_colatitude.memview)) __PYX_ERR(0, 649, __pyx_L3_error)
    __pyx_v_dcolatitude = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_dcolatitude.memview)) __PYX_ERR(0, 650, __pyx_L3_error)
    __pyx_v_buff_size = values[4];
    __pyx_v_field = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_field.memview)) __PYX_ERR(0, 652, __pyx_L3_error)
    __pyx_v_bounds = values[6];
    __pyx_v_input_img = values[7];
    if (values[8]) {
      __pyx_v_azimuth_offset = __pyx_PyFloat_AsDouble(values[8]); if (unlikely((__pyx_v_azimuth_offset == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 655, __pyx_L3_error)
    } else {
      __pyx_v_azimuth_offset = ((__pyx_t_5numpy_float64_t)0.0);
    }
    if (values[9]) {
      __pyx_v_colatitude_offset = __pyx_PyFloat_AsDouble(values[9]); if (unlikely((__pyx_v_colatitude_offset == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 656, __pyx_L3_error)
    } else {
      __pyx_v_colatitude_offset = ((__pyx_t_5numpy_float64_t)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pixelize_aitoff", 0, 7, 10, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 647, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_aitoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_8pixelize_aitoff(__pyx_self, __pyx_v_azimuth, __pyx_v_dazimuth, __pyx_v_colatitude, __pyx_v_dcolatitude, __pyx_v_buff_size, __pyx_v_field, __pyx_v_bounds, __pyx_v_input_img, __pyx_v_azimuth_offset, __pyx_v_colatitude_offset);

  /* "yt/utilities/lib/pixelization_routines.pyx":647
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_aitoff(np.float64_t[:] azimuth,             # <<<<<<<<<<<<<<
 *                     np.float64_t[:] dazimuth,
 *                     np.float64_t[:] colatitude,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_8pixelize_aitoff(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_azimuth, __Pyx_memviewslice __pyx_v_dazimuth, __Pyx_memviewslice __pyx_v_colatitude, __Pyx_memviewslice __pyx_v_dcolatitude, PyObject *__pyx_v_buff_size, __Pyx_memviewslice __pyx_v_field, PyObject *__pyx_v_bounds, PyObject *__pyx_v_input_img, __pyx_t_5numpy_float64_t __pyx_v_azimuth_offset, __pyx_t_5numpy_float64_t __pyx_v_colatitude_offset) {
  PyArrayObject *__pyx_v_img = 0;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_nf;
  int __pyx_v_fi;
  __pyx_t_5numpy_float64_t __pyx_v_x;
  __pyx_t_5numpy_float64_t __pyx_v_y;
  __pyx_t_5numpy_float64_t __pyx_v_z;
  __pyx_t_5numpy_float64_t __pyx_v_zb;
  __pyx_t_5numpy_float64_t __pyx_v_dx;
  __pyx_t_5numpy_float64_t __pyx_v_dy;
  __pyx_t_5numpy_float64_t __pyx_v_xw;
  __pyx_t_5numpy_float64_t __pyx_v_yw;
  __pyx_t_5numpy_float64_t __pyx_v_Lambda0;
  __pyx_t_5numpy_float64_t __pyx_v_btheta0;
  __pyx_t_5numpy_float64_t __pyx_v_Lambda_p;
  __pyx_t_5numpy_float64_t __pyx_v_dLambda_p;
  __pyx_t_5numpy_float64_t __pyx_v_btheta_p;
  __pyx_t_5numpy_float64_t __pyx_v_dbtheta_p;
  __pyx_t_5numpy_float64_t __pyx_v_PI;
  __pyx_t_5numpy_float64_t __pyx_v_s2;
  __pyx_t_5numpy_float64_t __pyx_v_xmax;
  __pyx_t_5numpy_float64_t __pyx_v_ymax;
  __pyx_t_5numpy_float64_t __pyx_v_xmin;
  __pyx_t_5numpy_float64_t __pyx_v_ymin;
  int __pyx_v_x0;
  long __pyx_v_x1;
  int __pyx_v_y0;
  long __pyx_v_y1;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_img;
  __Pyx_Buffer __pyx_pybuffer_img;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __pyx_t_5numpy_float64_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  long __pyx_t_20;
  long __pyx_t_21;
  int __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pixelize_aitoff", 0);
  __pyx_pybuffer_img.pybuffer.buf = NULL;
  __pyx_pybuffer_img.refcount = 0;
  __pyx_pybuffernd_img.data = NULL;
  __pyx_pybuffernd_img.rcbuffer = &__pyx_pybuffer_img;

  /* "yt/utilities/lib/pixelization_routines.pyx":669
 *     cdef np.float64_t dx, dy, xw, yw
 *     cdef np.float64_t Lambda0, btheta0, Lambda_p, dLambda_p, btheta_p, dbtheta_p
 *     cdef np.float64_t PI = np.pi             # <<<<<<<<<<<<<<
 *     cdef np.float64_t s2 = math.sqrt(2.0)
 *     cdef np.float64_t xmax, ymax, xmin, ymin
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_pi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_PI = __pyx_t_3;

  /* "yt/utilities/lib/pixelization_routines.pyx":670
 *     cdef np.float64_t Lambda0, btheta0, Lambda_p, dLambda_p, btheta_p, dbtheta_p
 *     cdef np.float64_t PI = np.pi
 *     cdef np.float64_t s2 = math.sqrt(2.0)             # <<<<<<<<<<<<<<
 *     cdef np.float64_t xmax, ymax, xmin, ymin
 *     nf = field.shape[0]
 */
  __pyx_v_s2 = sqrt(2.0);

  /* "yt/utilities/lib/pixelization_routines.pyx":672
 *     cdef np.float64_t s2 = math.sqrt(2.0)
 *     cdef np.float64_t xmax, ymax, xmin, ymin
 *     nf = field.shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if input_img is None:
 */
  __pyx_v_nf = (__pyx_v_field.shape[0]);

  /* "yt/utilities/lib/pixelization_routines.pyx":674
 *     nf = field.shape[0]
 * 
 *     if input_img is None:             # <<<<<<<<<<<<<<
 *         img = np.zeros((buff_size[0], buff_size[1]))
 *         img[:] = np.nan
 */
  __pyx_t_4 = (__pyx_v_input_img == Py_None);
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (__pyx_t_5) {

    /* "yt/utilities/lib/pixelization_routines.pyx":675
 * 
 *     if input_img is None:
 *         img = np.zeros((buff_size[0], buff_size[1]))             # <<<<<<<<<<<<<<
 *         img[:] = np.nan
 *     else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_buff_size, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_buff_size, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
    __pyx_t_1 = 0;
    __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_2 = (__pyx_t_7) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_7, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 675, __pyx_L1_error)
    __pyx_t_9 = ((PyArrayObject *)__pyx_t_2);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_img.rcbuffer->pybuffer);
      __pyx_t_10 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_img.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_10 < 0)) {
        PyErr_Fetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_img.rcbuffer->pybuffer, (PyObject*)__pyx_v_img, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
        }
        __pyx_t_11 = __pyx_t_12 = __pyx_t_13 = 0;
      }
      __pyx_pybuffernd_img.diminfo[0].strides = __pyx_pybuffernd_img.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_img.diminfo[0].shape = __pyx_pybuffernd_img.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_img.diminfo[1].strides = __pyx_pybuffernd_img.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_img.diminfo[1].shape = __pyx_pybuffernd_img.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 675, __pyx_L1_error)
    }
    __pyx_t_9 = 0;
    __pyx_v_img = ((PyArrayObject *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":676
 *     if input_img is None:
 *         img = np.zeros((buff_size[0], buff_size[1]))
 *         img[:] = np.nan             # <<<<<<<<<<<<<<
 *     else:
 *         img = input_img
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_nan); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_img), __pyx_slice__5, __pyx_t_6) < 0)) __PYX_ERR(0, 676, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":674
 *     nf = field.shape[0]
 * 
 *     if input_img is None:             # <<<<<<<<<<<<<<
 *         img = np.zeros((buff_size[0], buff_size[1]))
 *         img[:] = np.nan
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":678
 *         img[:] = np.nan
 *     else:
 *         img = input_img             # <<<<<<<<<<<<<<
 *     # Okay, here's our strategy.  We compute the bounds in x and y, which will
 *     # be a rectangle, and then for each x, y position we check to see if it's
 */
  /*else*/ {
    if (!(likely(((__pyx_v_input_img) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_input_img, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 678, __pyx_L1_error)
    __pyx_t_6 = __pyx_v_input_img;
    __Pyx_INCREF(__pyx_t_6);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_img.rcbuffer->pybuffer);
      __pyx_t_10 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_img.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_6), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_10 < 0)) {
        PyErr_Fetch(&__pyx_t_13, &__pyx_t_12, &__pyx_t_11);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_img.rcbuffer->pybuffer, (PyObject*)__pyx_v_img, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_13, __pyx_t_12, __pyx_t_11);
        }
        __pyx_t_13 = __pyx_t_12 = __pyx_t_11 = 0;
      }
      __pyx_pybuffernd_img.diminfo[0].strides = __pyx_pybuffernd_img.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_img.diminfo[0].shape = __pyx_pybuffernd_img.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_img.diminfo[1].strides = __pyx_pybuffernd_img.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_img.diminfo[1].shape = __pyx_pybuffernd_img.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 678, __pyx_L1_error)
    }
    __pyx_v_img = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "yt/utilities/lib/pixelization_routines.pyx":684
 *     # (x,y)->(Lambda,btheta) calculation, but because we no longer have to search
 *     # through the Lambda, btheta arrays, it should be faster.
 *     xw = bounds[1] - bounds[0]             # <<<<<<<<<<<<<<
 *     yw = bounds[3] - bounds[2]
 *     dx = xw / (img.shape[0] - 1)
 */
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_bounds, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = PyNumber_Subtract(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_xw = __pyx_t_3;

  /* "yt/utilities/lib/pixelization_routines.pyx":685
 *     # through the Lambda, btheta arrays, it should be faster.
 *     xw = bounds[1] - bounds[0]
 *     yw = bounds[3] - bounds[2]             # <<<<<<<<<<<<<<
 *     dx = xw / (img.shape[0] - 1)
 *     dy = yw / (img.shape[1] - 1)
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_bounds, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_bounds, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = PyNumber_Subtract(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_yw = __pyx_t_3;

  /* "yt/utilities/lib/pixelization_routines.pyx":686
 *     xw = bounds[1] - bounds[0]
 *     yw = bounds[3] - bounds[2]
 *     dx = xw / (img.shape[0] - 1)             # <<<<<<<<<<<<<<
 *     dy = yw / (img.shape[1] - 1)
 *     x = y = 0
 */
  __pyx_v_dx = (__pyx_v_xw / ((__pyx_t_5numpy_float64_t)((__pyx_v_img->dimensions[0]) - 1)));

  /* "yt/utilities/lib/pixelization_routines.pyx":687
 *     yw = bounds[3] - bounds[2]
 *     dx = xw / (img.shape[0] - 1)
 *     dy = yw / (img.shape[1] - 1)             # <<<<<<<<<<<<<<
 *     x = y = 0
 *     for fi in range(nf):
 */
  __pyx_v_dy = (__pyx_v_yw / ((__pyx_t_5numpy_float64_t)((__pyx_v_img->dimensions[1]) - 1)));

  /* "yt/utilities/lib/pixelization_routines.pyx":688
 *     dx = xw / (img.shape[0] - 1)
 *     dy = yw / (img.shape[1] - 1)
 *     x = y = 0             # <<<<<<<<<<<<<<
 *     for fi in range(nf):
 *         Lambda_p = (azimuth[fi] + azimuth_offset) - PI
 */
  __pyx_v_x = 0.0;
  __pyx_v_y = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":689
 *     dy = yw / (img.shape[1] - 1)
 *     x = y = 0
 *     for fi in range(nf):             # <<<<<<<<<<<<<<
 *         Lambda_p = (azimuth[fi] + azimuth_offset) - PI
 *         dLambda_p = dazimuth[fi]
 */
  __pyx_t_10 = __pyx_v_nf;
  __pyx_t_14 = __pyx_t_10;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
    __pyx_v_fi = __pyx_t_15;

    /* "yt/utilities/lib/pixelization_routines.pyx":690
 *     x = y = 0
 *     for fi in range(nf):
 *         Lambda_p = (azimuth[fi] + azimuth_offset) - PI             # <<<<<<<<<<<<<<
 *         dLambda_p = dazimuth[fi]
 *         btheta_p = PI/2.0 - (colatitude[fi] + colatitude_offset)
 */
    __pyx_t_16 = __pyx_v_fi;
    __pyx_v_Lambda_p = (((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_azimuth.data + __pyx_t_16 * __pyx_v_azimuth.strides[0]) ))) + __pyx_v_azimuth_offset) - __pyx_v_PI);

    /* "yt/utilities/lib/pixelization_routines.pyx":691
 *     for fi in range(nf):
 *         Lambda_p = (azimuth[fi] + azimuth_offset) - PI
 *         dLambda_p = dazimuth[fi]             # <<<<<<<<<<<<<<
 *         btheta_p = PI/2.0 - (colatitude[fi] + colatitude_offset)
 *         dbtheta_p = dcolatitude[fi]
 */
    __pyx_t_16 = __pyx_v_fi;
    __pyx_v_dLambda_p = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_dazimuth.data + __pyx_t_16 * __pyx_v_dazimuth.strides[0]) )));

    /* "yt/utilities/lib/pixelization_routines.pyx":692
 *         Lambda_p = (azimuth[fi] + azimuth_offset) - PI
 *         dLambda_p = dazimuth[fi]
 *         btheta_p = PI/2.0 - (colatitude[fi] + colatitude_offset)             # <<<<<<<<<<<<<<
 *         dbtheta_p = dcolatitude[fi]
 *         # Four transformations
 */
    __pyx_t_16 = __pyx_v_fi;
    __pyx_v_btheta_p = ((__pyx_v_PI / ((__pyx_t_5numpy_float64_t)2.0)) - ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_colatitude.data + __pyx_t_16 * __pyx_v_colatitude.strides[0]) ))) + __pyx_v_colatitude_offset));

    /* "yt/utilities/lib/pixelization_routines.pyx":693
 *         dLambda_p = dazimuth[fi]
 *         btheta_p = PI/2.0 - (colatitude[fi] + colatitude_offset)
 *         dbtheta_p = dcolatitude[fi]             # <<<<<<<<<<<<<<
 *         # Four transformations
 *         aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, btheta_p - dbtheta_p, &x, &y)
 */
    __pyx_t_16 = __pyx_v_fi;
    __pyx_v_dbtheta_p = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_dcolatitude.data + __pyx_t_16 * __pyx_v_dcolatitude.strides[0]) )));

    /* "yt/utilities/lib/pixelization_routines.pyx":695
 *         dbtheta_p = dcolatitude[fi]
 *         # Four transformations
 *         aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, btheta_p - dbtheta_p, &x, &y)             # <<<<<<<<<<<<<<
 *         xmin = x
 *         xmax = x
 */
    __pyx_t_17 = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_aitoff_Lambda_btheta_to_xy((__pyx_v_Lambda_p - __pyx_v_dLambda_p), (__pyx_v_btheta_p - __pyx_v_dbtheta_p), (&__pyx_v_x), (&__pyx_v_y)); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 695, __pyx_L1_error)

    /* "yt/utilities/lib/pixelization_routines.pyx":696
 *         # Four transformations
 *         aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, btheta_p - dbtheta_p, &x, &y)
 *         xmin = x             # <<<<<<<<<<<<<<
 *         xmax = x
 *         ymin = y
 */
    __pyx_v_xmin = __pyx_v_x;

    /* "yt/utilities/lib/pixelization_routines.pyx":697
 *         aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, btheta_p - dbtheta_p, &x, &y)
 *         xmin = x
 *         xmax = x             # <<<<<<<<<<<<<<
 *         ymin = y
 *         ymax = y
 */
    __pyx_v_xmax = __pyx_v_x;

    /* "yt/utilities/lib/pixelization_routines.pyx":698
 *         xmin = x
 *         xmax = x
 *         ymin = y             # <<<<<<<<<<<<<<
 *         ymax = y
 *         aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, btheta_p + dbtheta_p, &x, &y)
 */
    __pyx_v_ymin = __pyx_v_y;

    /* "yt/utilities/lib/pixelization_routines.pyx":699
 *         xmax = x
 *         ymin = y
 *         ymax = y             # <<<<<<<<<<<<<<
 *         aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, btheta_p + dbtheta_p, &x, &y)
 *         xmin = fmin(xmin, x)
 */
    __pyx_v_ymax = __pyx_v_y;

    /* "yt/utilities/lib/pixelization_routines.pyx":700
 *         ymin = y
 *         ymax = y
 *         aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, btheta_p + dbtheta_p, &x, &y)             # <<<<<<<<<<<<<<
 *         xmin = fmin(xmin, x)
 *         xmax = fmax(xmax, x)
 */
    __pyx_t_17 = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_aitoff_Lambda_btheta_to_xy((__pyx_v_Lambda_p - __pyx_v_dLambda_p), (__pyx_v_btheta_p + __pyx_v_dbtheta_p), (&__pyx_v_x), (&__pyx_v_y)); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 700, __pyx_L1_error)

    /* "yt/utilities/lib/pixelization_routines.pyx":701
 *         ymax = y
 *         aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, btheta_p + dbtheta_p, &x, &y)
 *         xmin = fmin(xmin, x)             # <<<<<<<<<<<<<<
 *         xmax = fmax(xmax, x)
 *         ymin = fmin(ymin, y)
 */
    __pyx_v_xmin = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_xmin, __pyx_v_x);

    /* "yt/utilities/lib/pixelization_routines.pyx":702
 *         aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, btheta_p + dbtheta_p, &x, &y)
 *         xmin = fmin(xmin, x)
 *         xmax = fmax(xmax, x)             # <<<<<<<<<<<<<<
 *         ymin = fmin(ymin, y)
 *         ymax = fmax(ymax, y)
 */
    __pyx_v_xmax = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_xmax, __pyx_v_x);

    /* "yt/utilities/lib/pixelization_routines.pyx":703
 *         xmin = fmin(xmin, x)
 *         xmax = fmax(xmax, x)
 *         ymin = fmin(ymin, y)             # <<<<<<<<<<<<<<
 *         ymax = fmax(ymax, y)
 *         aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, btheta_p - dbtheta_p, &x, &y)
 */
    __pyx_v_ymin = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_ymin, __pyx_v_y);

    /* "yt/utilities/lib/pixelization_routines.pyx":704
 *         xmax = fmax(xmax, x)
 *         ymin = fmin(ymin, y)
 *         ymax = fmax(ymax, y)             # <<<<<<<<<<<<<<
 *         aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, btheta_p - dbtheta_p, &x, &y)
 *         xmin = fmin(xmin, x)
 */
    __pyx_v_ymax = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_ymax, __pyx_v_y);

    /* "yt/utilities/lib/pixelization_routines.pyx":705
 *         ymin = fmin(ymin, y)
 *         ymax = fmax(ymax, y)
 *         aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, btheta_p - dbtheta_p, &x, &y)             # <<<<<<<<<<<<<<
 *         xmin = fmin(xmin, x)
 *         xmax = fmax(xmax, x)
 */
    __pyx_t_17 = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_aitoff_Lambda_btheta_to_xy((__pyx_v_Lambda_p + __pyx_v_dLambda_p), (__pyx_v_btheta_p - __pyx_v_dbtheta_p), (&__pyx_v_x), (&__pyx_v_y)); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 705, __pyx_L1_error)

    /* "yt/utilities/lib/pixelization_routines.pyx":706
 *         ymax = fmax(ymax, y)
 *         aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, btheta_p - dbtheta_p, &x, &y)
 *         xmin = fmin(xmin, x)             # <<<<<<<<<<<<<<
 *         xmax = fmax(xmax, x)
 *         ymin = fmin(ymin, y)
 */
    __pyx_v_xmin = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_xmin, __pyx_v_x);

    /* "yt/utilities/lib/pixelization_routines.pyx":707
 *         aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, btheta_p - dbtheta_p, &x, &y)
 *         xmin = fmin(xmin, x)
 *         xmax = fmax(xmax, x)             # <<<<<<<<<<<<<<
 *         ymin = fmin(ymin, y)
 *         ymax = fmax(ymax, y)
 */
    __pyx_v_xmax = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_xmax, __pyx_v_x);

    /* "yt/utilities/lib/pixelization_routines.pyx":708
 *         xmin = fmin(xmin, x)
 *         xmax = fmax(xmax, x)
 *         ymin = fmin(ymin, y)             # <<<<<<<<<<<<<<
 *         ymax = fmax(ymax, y)
 *         aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, btheta_p + dbtheta_p, &x, &y)
 */
    __pyx_v_ymin = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_ymin, __pyx_v_y);

    /* "yt/utilities/lib/pixelization_routines.pyx":709
 *         xmax = fmax(xmax, x)
 *         ymin = fmin(ymin, y)
 *         ymax = fmax(ymax, y)             # <<<<<<<<<<<<<<
 *         aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, btheta_p + dbtheta_p, &x, &y)
 *         xmin = fmin(xmin, x)
 */
    __pyx_v_ymax = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_ymax, __pyx_v_y);

    /* "yt/utilities/lib/pixelization_routines.pyx":710
 *         ymin = fmin(ymin, y)
 *         ymax = fmax(ymax, y)
 *         aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, btheta_p + dbtheta_p, &x, &y)             # <<<<<<<<<<<<<<
 *         xmin = fmin(xmin, x)
 *         xmax = fmax(xmax, x)
 */
    __pyx_t_17 = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_aitoff_Lambda_btheta_to_xy((__pyx_v_Lambda_p + __pyx_v_dLambda_p), (__pyx_v_btheta_p + __pyx_v_dbtheta_p), (&__pyx_v_x), (&__pyx_v_y)); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 710, __pyx_L1_error)

    /* "yt/utilities/lib/pixelization_routines.pyx":711
 *         ymax = fmax(ymax, y)
 *         aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, btheta_p + dbtheta_p, &x, &y)
 *         xmin = fmin(xmin, x)             # <<<<<<<<<<<<<<
 *         xmax = fmax(xmax, x)
 *         ymin = fmin(ymin, y)
 */
    __pyx_v_xmin = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_xmin, __pyx_v_x);

    /* "yt/utilities/lib/pixelization_routines.pyx":712
 *         aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, btheta_p + dbtheta_p, &x, &y)
 *         xmin = fmin(xmin, x)
 *         xmax = fmax(xmax, x)             # <<<<<<<<<<<<<<
 *         ymin = fmin(ymin, y)
 *         ymax = fmax(ymax, y)
 */
    __pyx_v_xmax = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_xmax, __pyx_v_x);

    /* "yt/utilities/lib/pixelization_routines.pyx":713
 *         xmin = fmin(xmin, x)
 *         xmax = fmax(xmax, x)
 *         ymin = fmin(ymin, y)             # <<<<<<<<<<<<<<
 *         ymax = fmax(ymax, y)
 *         # special cases where the projection of the cell isn't
 */
    __pyx_v_ymin = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_ymin, __pyx_v_y);

    /* "yt/utilities/lib/pixelization_routines.pyx":714
 *         xmax = fmax(xmax, x)
 *         ymin = fmin(ymin, y)
 *         ymax = fmax(ymax, y)             # <<<<<<<<<<<<<<
 *         # special cases where the projection of the cell isn't
 *         # bounded by the rectangle (in image space) that bounds its corners.
 */
    __pyx_v_ymax = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_ymax, __pyx_v_y);

    /* "yt/utilities/lib/pixelization_routines.pyx":719
 *         # Note that performance may take a serious hit here. The overarching algorithm
 *         # is optimized for cells with small angular width.
 *         if xmin * xmax < 0.0:             # <<<<<<<<<<<<<<
 *             # on the central meridian
 *             aitoff_Lambda_btheta_to_xy(0.0, btheta_p - dbtheta_p, &x, &y)
 */
    __pyx_t_5 = (((__pyx_v_xmin * __pyx_v_xmax) < 0.0) != 0);
    if (__pyx_t_5) {

      /* "yt/utilities/lib/pixelization_routines.pyx":721
 *         if xmin * xmax < 0.0:
 *             # on the central meridian
 *             aitoff_Lambda_btheta_to_xy(0.0, btheta_p - dbtheta_p, &x, &y)             # <<<<<<<<<<<<<<
 *             ymin = fmin(ymin, y)
 *             ymax = fmax(ymax, y)
 */
      __pyx_t_17 = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_aitoff_Lambda_btheta_to_xy(0.0, (__pyx_v_btheta_p - __pyx_v_dbtheta_p), (&__pyx_v_x), (&__pyx_v_y)); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 721, __pyx_L1_error)

      /* "yt/utilities/lib/pixelization_routines.pyx":722
 *             # on the central meridian
 *             aitoff_Lambda_btheta_to_xy(0.0, btheta_p - dbtheta_p, &x, &y)
 *             ymin = fmin(ymin, y)             # <<<<<<<<<<<<<<
 *             ymax = fmax(ymax, y)
 *             aitoff_Lambda_btheta_to_xy(0.0, btheta_p + dbtheta_p, &x, &y)
 */
      __pyx_v_ymin = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_ymin, __pyx_v_y);

      /* "yt/utilities/lib/pixelization_routines.pyx":723
 *             aitoff_Lambda_btheta_to_xy(0.0, btheta_p - dbtheta_p, &x, &y)
 *             ymin = fmin(ymin, y)
 *             ymax = fmax(ymax, y)             # <<<<<<<<<<<<<<
 *             aitoff_Lambda_btheta_to_xy(0.0, btheta_p + dbtheta_p, &x, &y)
 *             ymin = fmin(ymin, y)
 */
      __pyx_v_ymax = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_ymax, __pyx_v_y);

      /* "yt/utilities/lib/pixelization_routines.pyx":724
 *             ymin = fmin(ymin, y)
 *             ymax = fmax(ymax, y)
 *             aitoff_Lambda_btheta_to_xy(0.0, btheta_p + dbtheta_p, &x, &y)             # <<<<<<<<<<<<<<
 *             ymin = fmin(ymin, y)
 *             ymax = fmax(ymax, y)
 */
      __pyx_t_17 = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_aitoff_Lambda_btheta_to_xy(0.0, (__pyx_v_btheta_p + __pyx_v_dbtheta_p), (&__pyx_v_x), (&__pyx_v_y)); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 724, __pyx_L1_error)

      /* "yt/utilities/lib/pixelization_routines.pyx":725
 *             ymax = fmax(ymax, y)
 *             aitoff_Lambda_btheta_to_xy(0.0, btheta_p + dbtheta_p, &x, &y)
 *             ymin = fmin(ymin, y)             # <<<<<<<<<<<<<<
 *             ymax = fmax(ymax, y)
 *         if ymin * ymax < 0.0:
 */
      __pyx_v_ymin = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_ymin, __pyx_v_y);

      /* "yt/utilities/lib/pixelization_routines.pyx":726
 *             aitoff_Lambda_btheta_to_xy(0.0, btheta_p + dbtheta_p, &x, &y)
 *             ymin = fmin(ymin, y)
 *             ymax = fmax(ymax, y)             # <<<<<<<<<<<<<<
 *         if ymin * ymax < 0.0:
 *             # on the equator
 */
      __pyx_v_ymax = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_ymax, __pyx_v_y);

      /* "yt/utilities/lib/pixelization_routines.pyx":719
 *         # Note that performance may take a serious hit here. The overarching algorithm
 *         # is optimized for cells with small angular width.
 *         if xmin * xmax < 0.0:             # <<<<<<<<<<<<<<
 *             # on the central meridian
 *             aitoff_Lambda_btheta_to_xy(0.0, btheta_p - dbtheta_p, &x, &y)
 */
    }

    /* "yt/utilities/lib/pixelization_routines.pyx":727
 *             ymin = fmin(ymin, y)
 *             ymax = fmax(ymax, y)
 *         if ymin * ymax < 0.0:             # <<<<<<<<<<<<<<
 *             # on the equator
 *             aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, 0.0, &x, &y)
 */
    __pyx_t_5 = (((__pyx_v_ymin * __pyx_v_ymax) < 0.0) != 0);
    if (__pyx_t_5) {

      /* "yt/utilities/lib/pixelization_routines.pyx":729
 *         if ymin * ymax < 0.0:
 *             # on the equator
 *             aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, 0.0, &x, &y)             # <<<<<<<<<<<<<<
 *             xmin = fmin(xmin, x)
 *             xmax = fmax(xmax, x)
 */
      __pyx_t_17 = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_aitoff_Lambda_btheta_to_xy((__pyx_v_Lambda_p - __pyx_v_dLambda_p), 0.0, (&__pyx_v_x), (&__pyx_v_y)); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 729, __pyx_L1_error)

      /* "yt/utilities/lib/pixelization_routines.pyx":730
 *             # on the equator
 *             aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, 0.0, &x, &y)
 *             xmin = fmin(xmin, x)             # <<<<<<<<<<<<<<
 *             xmax = fmax(xmax, x)
 *             aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, 0.0, &x, &y)
 */
      __pyx_v_xmin = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_xmin, __pyx_v_x);

      /* "yt/utilities/lib/pixelization_routines.pyx":731
 *             aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, 0.0, &x, &y)
 *             xmin = fmin(xmin, x)
 *             xmax = fmax(xmax, x)             # <<<<<<<<<<<<<<
 *             aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, 0.0, &x, &y)
 *             xmin = fmin(xmin, x)
 */
      __pyx_v_xmax = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_xmax, __pyx_v_x);

      /* "yt/utilities/lib/pixelization_routines.pyx":732
 *             xmin = fmin(xmin, x)
 *             xmax = fmax(xmax, x)
 *             aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, 0.0, &x, &y)             # <<<<<<<<<<<<<<
 *             xmin = fmin(xmin, x)
 *             xmax = fmax(xmax, x)
 */
      __pyx_t_17 = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_aitoff_Lambda_btheta_to_xy((__pyx_v_Lambda_p + __pyx_v_dLambda_p), 0.0, (&__pyx_v_x), (&__pyx_v_y)); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 732, __pyx_L1_error)

      /* "yt/utilities/lib/pixelization_routines.pyx":733
 *             xmax = fmax(xmax, x)
 *             aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, 0.0, &x, &y)
 *             xmin = fmin(xmin, x)             # <<<<<<<<<<<<<<
 *             xmax = fmax(xmax, x)
 *         # Now we have the (projected rectangular) bounds.
 */
      __pyx_v_xmin = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_v_xmin, __pyx_v_x);

      /* "yt/utilities/lib/pixelization_routines.pyx":734
 *             aitoff_Lambda_btheta_to_xy(Lambda_p + dLambda_p, 0.0, &x, &y)
 *             xmin = fmin(xmin, x)
 *             xmax = fmax(xmax, x)             # <<<<<<<<<<<<<<
 *         # Now we have the (projected rectangular) bounds.
 * 
 */
      __pyx_v_xmax = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_xmax, __pyx_v_x);

      /* "yt/utilities/lib/pixelization_routines.pyx":727
 *             ymin = fmin(ymin, y)
 *             ymax = fmax(ymax, y)
 *         if ymin * ymax < 0.0:             # <<<<<<<<<<<<<<
 *             # on the equator
 *             aitoff_Lambda_btheta_to_xy(Lambda_p - dLambda_p, 0.0, &x, &y)
 */
    }

    /* "yt/utilities/lib/pixelization_routines.pyx":738
 * 
 *         # Shift into normalized image coords
 *         xmin = (xmin - bounds[0])             # <<<<<<<<<<<<<<
 *         xmax = (xmax - bounds[0])
 *         ymin = (ymin - bounds[2])
 */
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_xmin); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyNumber_Subtract(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 738, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 738, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_xmin = __pyx_t_3;

    /* "yt/utilities/lib/pixelization_routines.pyx":739
 *         # Shift into normalized image coords
 *         xmin = (xmin - bounds[0])
 *         xmax = (xmax - bounds[0])             # <<<<<<<<<<<<<<
 *         ymin = (ymin - bounds[2])
 *         ymax = (ymax - bounds[2])
 */
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_xmax); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_xmax = __pyx_t_3;

    /* "yt/utilities/lib/pixelization_routines.pyx":740
 *         xmin = (xmin - bounds[0])
 *         xmax = (xmax - bounds[0])
 *         ymin = (ymin - bounds[2])             # <<<<<<<<<<<<<<
 *         ymax = (ymax - bounds[2])
 * 
 */
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_ymin); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_bounds, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyNumber_Subtract(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_ymin = __pyx_t_3;

    /* "yt/utilities/lib/pixelization_routines.pyx":741
 *         xmax = (xmax - bounds[0])
 *         ymin = (ymin - bounds[2])
 *         ymax = (ymax - bounds[2])             # <<<<<<<<<<<<<<
 * 
 *         # Finally, select a rectangular region in image space
 */
    __pyx_t_8 = PyFloat_FromDouble(__pyx_v_ymax); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_bounds, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyNumber_Subtract(__pyx_t_8, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_ymax = __pyx_t_3;

    /* "yt/utilities/lib/pixelization_routines.pyx":747
 *         # We'll reject image pixels in that rectangle that are
 *         # not actually intersecting the data point as we go.
 *         x0 = <int> (xmin / dx)             # <<<<<<<<<<<<<<
 *         x1 = <int> (xmax / dx) + 1
 *         y0 = <int> (ymin / dy)
 */
    __pyx_v_x0 = ((int)(__pyx_v_xmin / __pyx_v_dx));

    /* "yt/utilities/lib/pixelization_routines.pyx":748
 *         # not actually intersecting the data point as we go.
 *         x0 = <int> (xmin / dx)
 *         x1 = <int> (xmax / dx) + 1             # <<<<<<<<<<<<<<
 *         y0 = <int> (ymin / dy)
 *         y1 = <int> (ymax / dy) + 1
 */
    __pyx_v_x1 = (((int)(__pyx_v_xmax / __pyx_v_dx)) + 1);

    /* "yt/utilities/lib/pixelization_routines.pyx":749
 *         x0 = <int> (xmin / dx)
 *         x1 = <int> (xmax / dx) + 1
 *         y0 = <int> (ymin / dy)             # <<<<<<<<<<<<<<
 *         y1 = <int> (ymax / dy) + 1
 *         for i in range(x0, x1):
 */
    __pyx_v_y0 = ((int)(__pyx_v_ymin / __pyx_v_dy));

    /* "yt/utilities/lib/pixelization_routines.pyx":750
 *         x1 = <int> (xmax / dx) + 1
 *         y0 = <int> (ymin / dy)
 *         y1 = <int> (ymax / dy) + 1             # <<<<<<<<<<<<<<
 *         for i in range(x0, x1):
 *             x = (bounds[0] + i * dx) / 2.0
 */
    __pyx_v_y1 = (((int)(__pyx_v_ymax / __pyx_v_dy)) + 1);

    /* "yt/utilities/lib/pixelization_routines.pyx":751
 *         y0 = <int> (ymin / dy)
 *         y1 = <int> (ymax / dy) + 1
 *         for i in range(x0, x1):             # <<<<<<<<<<<<<<
 *             x = (bounds[0] + i * dx) / 2.0
 *             for j in range(y0, y1):
 */
    __pyx_t_18 = __pyx_v_x1;
    __pyx_t_19 = __pyx_t_18;
    for (__pyx_t_17 = __pyx_v_x0; __pyx_t_17 < __pyx_t_19; __pyx_t_17+=1) {
      __pyx_v_i = __pyx_t_17;

      /* "yt/utilities/lib/pixelization_routines.pyx":752
 *         y1 = <int> (ymax / dy) + 1
 *         for i in range(x0, x1):
 *             x = (bounds[0] + i * dx) / 2.0             # <<<<<<<<<<<<<<
 *             for j in range(y0, y1):
 *                 y = (bounds[2] + j * dy)
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = PyFloat_FromDouble((__pyx_v_i * __pyx_v_dx)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = PyNumber_Add(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyFloat_TrueDivideObjC(__pyx_t_8, __pyx_float_2_0, 2.0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 752, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_x = __pyx_t_3;

      /* "yt/utilities/lib/pixelization_routines.pyx":753
 *         for i in range(x0, x1):
 *             x = (bounds[0] + i * dx) / 2.0
 *             for j in range(y0, y1):             # <<<<<<<<<<<<<<
 *                 y = (bounds[2] + j * dy)
 *                 zb = (x*x + y*y - 1.0)
 */
      __pyx_t_20 = __pyx_v_y1;
      __pyx_t_21 = __pyx_t_20;
      for (__pyx_t_22 = __pyx_v_y0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {
        __pyx_v_j = __pyx_t_22;

        /* "yt/utilities/lib/pixelization_routines.pyx":754
 *             x = (bounds[0] + i * dx) / 2.0
 *             for j in range(y0, y1):
 *                 y = (bounds[2] + j * dy)             # <<<<<<<<<<<<<<
 *                 zb = (x*x + y*y - 1.0)
 *                 if zb > 0: continue
 */
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_bounds, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 754, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = PyFloat_FromDouble((__pyx_v_j * __pyx_v_dy)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 754, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyNumber_Add(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 754, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_3 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 754, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_v_y = __pyx_t_3;

        /* "yt/utilities/lib/pixelization_routines.pyx":755
 *             for j in range(y0, y1):
 *                 y = (bounds[2] + j * dy)
 *                 zb = (x*x + y*y - 1.0)             # <<<<<<<<<<<<<<
 *                 if zb > 0: continue
 *                 z = (1.0 - 0.5*x*x - 0.5*y*y)
 */
        __pyx_v_zb = (((__pyx_v_x * __pyx_v_x) + (__pyx_v_y * __pyx_v_y)) - 1.0);

        /* "yt/utilities/lib/pixelization_routines.pyx":756
 *                 y = (bounds[2] + j * dy)
 *                 zb = (x*x + y*y - 1.0)
 *                 if zb > 0: continue             # <<<<<<<<<<<<<<
 *                 z = (1.0 - 0.5*x*x - 0.5*y*y)
 *                 z = math.sqrt(z)
 */
        __pyx_t_5 = ((__pyx_v_zb > 0.0) != 0);
        if (__pyx_t_5) {
          goto __pyx_L10_continue;
        }

        /* "yt/utilities/lib/pixelization_routines.pyx":757
 *                 zb = (x*x + y*y - 1.0)
 *                 if zb > 0: continue
 *                 z = (1.0 - 0.5*x*x - 0.5*y*y)             # <<<<<<<<<<<<<<
 *                 z = math.sqrt(z)
 *                 # Longitude
 */
        __pyx_v_z = ((1.0 - ((0.5 * __pyx_v_x) * __pyx_v_x)) - ((0.5 * __pyx_v_y) * __pyx_v_y));

        /* "yt/utilities/lib/pixelization_routines.pyx":758
 *                 if zb > 0: continue
 *                 z = (1.0 - 0.5*x*x - 0.5*y*y)
 *                 z = math.sqrt(z)             # <<<<<<<<<<<<<<
 *                 # Longitude
 *                 Lambda0 = 2.0*math.atan(z*x*s2/(2.0*z*z-1.0))
 */
        __pyx_v_z = sqrt(__pyx_v_z);

        /* "yt/utilities/lib/pixelization_routines.pyx":760
 *                 z = math.sqrt(z)
 *                 # Longitude
 *                 Lambda0 = 2.0*math.atan(z*x*s2/(2.0*z*z-1.0))             # <<<<<<<<<<<<<<
 *                 # Latitude
 *                 # We shift it into co-latitude
 */
        __pyx_v_Lambda0 = (2.0 * atan((((__pyx_v_z * __pyx_v_x) * __pyx_v_s2) / (((2.0 * __pyx_v_z) * __pyx_v_z) - 1.0))));

        /* "yt/utilities/lib/pixelization_routines.pyx":763
 *                 # Latitude
 *                 # We shift it into co-latitude
 *                 btheta0 = math.asin(z*y*s2)             # <<<<<<<<<<<<<<
 *                 # Now we just need to figure out which pixel contributes.
 *                 # We do not have a fast search.
 */
        __pyx_v_btheta0 = asin(((__pyx_v_z * __pyx_v_y) * __pyx_v_s2));

        /* "yt/utilities/lib/pixelization_routines.pyx":766
 *                 # Now we just need to figure out which pixel contributes.
 *                 # We do not have a fast search.
 *                 if not (Lambda_p - dLambda_p <= Lambda0 <= Lambda_p + dLambda_p):             # <<<<<<<<<<<<<<
 *                     continue
 *                 if not (btheta_p - dbtheta_p <= btheta0 <= btheta_p + dbtheta_p):
 */
        __pyx_t_5 = ((__pyx_v_Lambda_p - __pyx_v_dLambda_p) <= __pyx_v_Lambda0);
        if (__pyx_t_5) {
          __pyx_t_5 = (__pyx_v_Lambda0 <= (__pyx_v_Lambda_p + __pyx_v_dLambda_p));
        }
        __pyx_t_4 = ((!(__pyx_t_5 != 0)) != 0);
        if (__pyx_t_4) {

          /* "yt/utilities/lib/pixelization_routines.pyx":767
 *                 # We do not have a fast search.
 *                 if not (Lambda_p - dLambda_p <= Lambda0 <= Lambda_p + dLambda_p):
 *                     continue             # <<<<<<<<<<<<<<
 *                 if not (btheta_p - dbtheta_p <= btheta0 <= btheta_p + dbtheta_p):
 *                     continue
 */
          goto __pyx_L10_continue;

          /* "yt/utilities/lib/pixelization_routines.pyx":766
 *                 # Now we just need to figure out which pixel contributes.
 *                 # We do not have a fast search.
 *                 if not (Lambda_p - dLambda_p <= Lambda0 <= Lambda_p + dLambda_p):             # <<<<<<<<<<<<<<
 *                     continue
 *                 if not (btheta_p - dbtheta_p <= btheta0 <= btheta_p + dbtheta_p):
 */
        }

        /* "yt/utilities/lib/pixelization_routines.pyx":768
 *                 if not (Lambda_p - dLambda_p <= Lambda0 <= Lambda_p + dLambda_p):
 *                     continue
 *                 if not (btheta_p - dbtheta_p <= btheta0 <= btheta_p + dbtheta_p):             # <<<<<<<<<<<<<<
 *                     continue
 *                 img[i, j] = field[fi]
 */
        __pyx_t_4 = ((__pyx_v_btheta_p - __pyx_v_dbtheta_p) <= __pyx_v_btheta0);
        if (__pyx_t_4) {
          __pyx_t_4 = (__pyx_v_btheta0 <= (__pyx_v_btheta_p + __pyx_v_dbtheta_p));
        }
        __pyx_t_5 = ((!(__pyx_t_4 != 0)) != 0);
        if (__pyx_t_5) {

          /* "yt/utilities/lib/pixelization_routines.pyx":769
 *                     continue
 *                 if not (btheta_p - dbtheta_p <= btheta0 <= btheta_p + dbtheta_p):
 *                     continue             # <<<<<<<<<<<<<<
 *                 img[i, j] = field[fi]
 *     return img
 */
          goto __pyx_L10_continue;

          /* "yt/utilities/lib/pixelization_routines.pyx":768
 *                 if not (Lambda_p - dLambda_p <= Lambda0 <= Lambda_p + dLambda_p):
 *                     continue
 *                 if not (btheta_p - dbtheta_p <= btheta0 <= btheta_p + dbtheta_p):             # <<<<<<<<<<<<<<
 *                     continue
 *                 img[i, j] = field[fi]
 */
        }

        /* "yt/utilities/lib/pixelization_routines.pyx":770
 *                 if not (btheta_p - dbtheta_p <= btheta0 <= btheta_p + dbtheta_p):
 *                     continue
 *                 img[i, j] = field[fi]             # <<<<<<<<<<<<<<
 *     return img
 * 
 */
        __pyx_t_16 = __pyx_v_fi;
        __pyx_t_23 = __pyx_v_i;
        __pyx_t_24 = __pyx_v_j;
        *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_img.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_img.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_img.diminfo[1].strides) = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_field.data + __pyx_t_16 * __pyx_v_field.strides[0]) )));
        __pyx_L10_continue:;
      }
    }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":771
 *                     continue
 *                 img[i, j] = field[fi]
 *     return img             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_img));
  __pyx_r = ((PyObject *)__pyx_v_img);
  goto __pyx_L0;

  /* "yt/utilities/lib/pixelization_routines.pyx":647
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_aitoff(np.float64_t[:] azimuth,             # <<<<<<<<<<<<<<
 *                     np.float64_t[:] dazimuth,
 *                     np.float64_t[:] colatitude,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_img.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_aitoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_img.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_img);
  __PYX_XDEC_MEMVIEW(&__pyx_v_azimuth, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_dazimuth, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_colatitude, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_dcolatitude, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_field, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":781
 * # results match.  Otherwise, it will fill the signs with -1's and 1's to show
 * # the sign of the dot product of the point with the cross product of the face.
 * cdef int check_face_dot(int nvertices,             # <<<<<<<<<<<<<<
 *                         np.float64_t point[3],
 *                         np.float64_t **vertices,
 */

static int __pyx_f_2yt_9utilities_3lib_21pixelization_routines_check_face_dot(int __pyx_v_nvertices, __pyx_t_5numpy_float64_t *__pyx_v_point, __pyx_t_5numpy_float64_t **__pyx_v_vertices, __pyx_t_5numpy_int8_t *__pyx_v_signs, int __pyx_v_match) {
  __pyx_t_5numpy_float64_t __pyx_v_vec1[3];
  __pyx_t_5numpy_float64_t __pyx_v_vec2[3];
  __pyx_t_5numpy_float64_t __pyx_v_cp_vec[3];
  __pyx_t_5numpy_float64_t __pyx_v_npoint[3];
  __pyx_t_5numpy_float64_t __pyx_v_dp;
  __pyx_t_5numpy_uint8_t __pyx_v_faces[MAX_NUM_FACES][2][2];
  __pyx_t_5numpy_uint8_t __pyx_v_nf;
  int __pyx_v_n;
  int __pyx_v_vi1a;
  int __pyx_v_vi1b;
  int __pyx_v_vi2a;
  int __pyx_v_vi2b;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_uint8_t __pyx_t_1;
  __pyx_t_5numpy_uint8_t __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_face_dot", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":798
 *     cdef np.uint8_t faces[MAX_NUM_FACES][2][2]
 *     cdef np.uint8_t nf
 *     if nvertices == 4:             # <<<<<<<<<<<<<<
 *         faces = tetra_face_defs
 *         nf = TETRA_NF
 */
  switch (__pyx_v_nvertices) {
    case 4:

    /* "yt/utilities/lib/pixelization_routines.pyx":799
 *     cdef np.uint8_t nf
 *     if nvertices == 4:
 *         faces = tetra_face_defs             # <<<<<<<<<<<<<<
 *         nf = TETRA_NF
 *     elif nvertices == 6:
 */
    if (unlikely((MAX_NUM_FACES) != (MAX_NUM_FACES))) {
      PyErr_Format(PyExc_ValueError, "Assignment to slice of wrong length, expected %" CYTHON_FORMAT_SSIZE_T "d, got %" CYTHON_FORMAT_SSIZE_T "d", (Py_ssize_t)(MAX_NUM_FACES), (Py_ssize_t)(MAX_NUM_FACES));
      __PYX_ERR(0, 799, __pyx_L1_error)
    }
    memcpy(&(__pyx_v_faces[0]), tetra_face_defs, sizeof(__pyx_v_faces[0]) * (MAX_NUM_FACES));

    /* "yt/utilities/lib/pixelization_routines.pyx":800
 *     if nvertices == 4:
 *         faces = tetra_face_defs
 *         nf = TETRA_NF             # <<<<<<<<<<<<<<
 *     elif nvertices == 6:
 *         faces = wedge_face_defs
 */
    __pyx_v_nf = TETRA_NF;

    /* "yt/utilities/lib/pixelization_routines.pyx":798
 *     cdef np.uint8_t faces[MAX_NUM_FACES][2][2]
 *     cdef np.uint8_t nf
 *     if nvertices == 4:             # <<<<<<<<<<<<<<
 *         faces = tetra_face_defs
 *         nf = TETRA_NF
 */
    break;
    case 6:

    /* "yt/utilities/lib/pixelization_routines.pyx":802
 *         nf = TETRA_NF
 *     elif nvertices == 6:
 *         faces = wedge_face_defs             # <<<<<<<<<<<<<<
 *         nf = WEDGE_NF
 *     elif nvertices == 8:
 */
    if (unlikely((MAX_NUM_FACES) != (MAX_NUM_FACES))) {
      PyErr_Format(PyExc_ValueError, "Assignment to slice of wrong length, expected %" CYTHON_FORMAT_SSIZE_T "d, got %" CYTHON_FORMAT_SSIZE_T "d", (Py_ssize_t)(MAX_NUM_FACES), (Py_ssize_t)(MAX_NUM_FACES));
      __PYX_ERR(0, 802, __pyx_L1_error)
    }
    memcpy(&(__pyx_v_faces[0]), wedge_face_defs, sizeof(__pyx_v_faces[0]) * (MAX_NUM_FACES));

    /* "yt/utilities/lib/pixelization_routines.pyx":803
 *     elif nvertices == 6:
 *         faces = wedge_face_defs
 *         nf = WEDGE_NF             # <<<<<<<<<<<<<<
 *     elif nvertices == 8:
 *         faces = hex_face_defs
 */
    __pyx_v_nf = WEDGE_NF;

    /* "yt/utilities/lib/pixelization_routines.pyx":801
 *         faces = tetra_face_defs
 *         nf = TETRA_NF
 *     elif nvertices == 6:             # <<<<<<<<<<<<<<
 *         faces = wedge_face_defs
 *         nf = WEDGE_NF
 */
    break;
    case 8:

    /* "yt/utilities/lib/pixelization_routines.pyx":805
 *         nf = WEDGE_NF
 *     elif nvertices == 8:
 *         faces = hex_face_defs             # <<<<<<<<<<<<<<
 *         nf = HEX_NF
 *     else:
 */
    if (unlikely((MAX_NUM_FACES) != (MAX_NUM_FACES))) {
      PyErr_Format(PyExc_ValueError, "Assignment to slice of wrong length, expected %" CYTHON_FORMAT_SSIZE_T "d, got %" CYTHON_FORMAT_SSIZE_T "d", (Py_ssize_t)(MAX_NUM_FACES), (Py_ssize_t)(MAX_NUM_FACES));
      __PYX_ERR(0, 805, __pyx_L1_error)
    }
    memcpy(&(__pyx_v_faces[0]), hex_face_defs, sizeof(__pyx_v_faces[0]) * (MAX_NUM_FACES));

    /* "yt/utilities/lib/pixelization_routines.pyx":806
 *     elif nvertices == 8:
 *         faces = hex_face_defs
 *         nf = HEX_NF             # <<<<<<<<<<<<<<
 *     else:
 *         return -1
 */
    __pyx_v_nf = HEX_NF;

    /* "yt/utilities/lib/pixelization_routines.pyx":804
 *         faces = wedge_face_defs
 *         nf = WEDGE_NF
 *     elif nvertices == 8:             # <<<<<<<<<<<<<<
 *         faces = hex_face_defs
 *         nf = HEX_NF
 */
    break;
    default:

    /* "yt/utilities/lib/pixelization_routines.pyx":808
 *         nf = HEX_NF
 *     else:
 *         return -1             # <<<<<<<<<<<<<<
 *     cdef int n, vi1a, vi1b, vi2a, vi2b
 * 
 */
    __pyx_r = -1;
    goto __pyx_L0;
    break;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":811
 *     cdef int n, vi1a, vi1b, vi2a, vi2b
 * 
 *     for n in range(nf):             # <<<<<<<<<<<<<<
 *         vi1a = faces[n][0][0]
 *         vi1b = faces[n][0][1]
 */
  __pyx_t_1 = __pyx_v_nf;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_n = __pyx_t_3;

    /* "yt/utilities/lib/pixelization_routines.pyx":812
 * 
 *     for n in range(nf):
 *         vi1a = faces[n][0][0]             # <<<<<<<<<<<<<<
 *         vi1b = faces[n][0][1]
 *         vi2a = faces[n][1][0]
 */
    __pyx_v_vi1a = (((__pyx_v_faces[__pyx_v_n])[0])[0]);

    /* "yt/utilities/lib/pixelization_routines.pyx":813
 *     for n in range(nf):
 *         vi1a = faces[n][0][0]
 *         vi1b = faces[n][0][1]             # <<<<<<<<<<<<<<
 *         vi2a = faces[n][1][0]
 *         vi2b = faces[n][1][1]
 */
    __pyx_v_vi1b = (((__pyx_v_faces[__pyx_v_n])[0])[1]);

    /* "yt/utilities/lib/pixelization_routines.pyx":814
 *         vi1a = faces[n][0][0]
 *         vi1b = faces[n][0][1]
 *         vi2a = faces[n][1][0]             # <<<<<<<<<<<<<<
 *         vi2b = faces[n][1][1]
 *         # Shared vertex is vi1a and vi2a
 */
    __pyx_v_vi2a = (((__pyx_v_faces[__pyx_v_n])[1])[0]);

    /* "yt/utilities/lib/pixelization_routines.pyx":815
 *         vi1b = faces[n][0][1]
 *         vi2a = faces[n][1][0]
 *         vi2b = faces[n][1][1]             # <<<<<<<<<<<<<<
 *         # Shared vertex is vi1a and vi2a
 *         subtract(vertices[vi1b], vertices[vi1a], vec1)
 */
    __pyx_v_vi2b = (((__pyx_v_faces[__pyx_v_n])[1])[1]);

    /* "yt/utilities/lib/pixelization_routines.pyx":817
 *         vi2b = faces[n][1][1]
 *         # Shared vertex is vi1a and vi2a
 *         subtract(vertices[vi1b], vertices[vi1a], vec1)             # <<<<<<<<<<<<<<
 *         subtract(vertices[vi2b], vertices[vi2a], vec2)
 *         subtract(point, vertices[vi1b], npoint)
 */
    __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_subtract((__pyx_v_vertices[__pyx_v_vi1b]), (__pyx_v_vertices[__pyx_v_vi1a]), __pyx_v_vec1);

    /* "yt/utilities/lib/pixelization_routines.pyx":818
 *         # Shared vertex is vi1a and vi2a
 *         subtract(vertices[vi1b], vertices[vi1a], vec1)
 *         subtract(vertices[vi2b], vertices[vi2a], vec2)             # <<<<<<<<<<<<<<
 *         subtract(point, vertices[vi1b], npoint)
 *         cross(vec1, vec2, cp_vec)
 */
    __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_subtract((__pyx_v_vertices[__pyx_v_vi2b]), (__pyx_v_vertices[__pyx_v_vi2a]), __pyx_v_vec2);

    /* "yt/utilities/lib/pixelization_routines.pyx":819
 *         subtract(vertices[vi1b], vertices[vi1a], vec1)
 *         subtract(vertices[vi2b], vertices[vi2a], vec2)
 *         subtract(point, vertices[vi1b], npoint)             # <<<<<<<<<<<<<<
 *         cross(vec1, vec2, cp_vec)
 *         dp = dot(cp_vec, npoint)
 */
    __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_subtract(__pyx_v_point, (__pyx_v_vertices[__pyx_v_vi1b]), __pyx_v_npoint);

    /* "yt/utilities/lib/pixelization_routines.pyx":820
 *         subtract(vertices[vi2b], vertices[vi2a], vec2)
 *         subtract(point, vertices[vi1b], npoint)
 *         cross(vec1, vec2, cp_vec)             # <<<<<<<<<<<<<<
 *         dp = dot(cp_vec, npoint)
 *         if match == 0:
 */
    __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_cross(__pyx_v_vec1, __pyx_v_vec2, __pyx_v_cp_vec);

    /* "yt/utilities/lib/pixelization_routines.pyx":821
 *         subtract(point, vertices[vi1b], npoint)
 *         cross(vec1, vec2, cp_vec)
 *         dp = dot(cp_vec, npoint)             # <<<<<<<<<<<<<<
 *         if match == 0:
 *             if dp < 0:
 */
    __pyx_v_dp = __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_dot(__pyx_v_cp_vec, __pyx_v_npoint);

    /* "yt/utilities/lib/pixelization_routines.pyx":822
 *         cross(vec1, vec2, cp_vec)
 *         dp = dot(cp_vec, npoint)
 *         if match == 0:             # <<<<<<<<<<<<<<
 *             if dp < 0:
 *                 signs[n] = -1
 */
    __pyx_t_4 = ((__pyx_v_match == 0) != 0);
    if (__pyx_t_4) {

      /* "yt/utilities/lib/pixelization_routines.pyx":823
 *         dp = dot(cp_vec, npoint)
 *         if match == 0:
 *             if dp < 0:             # <<<<<<<<<<<<<<
 *                 signs[n] = -1
 *             else:
 */
      __pyx_t_4 = ((__pyx_v_dp < 0.0) != 0);
      if (__pyx_t_4) {

        /* "yt/utilities/lib/pixelization_routines.pyx":824
 *         if match == 0:
 *             if dp < 0:
 *                 signs[n] = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 signs[n] = 1
 */
        (__pyx_v_signs[__pyx_v_n]) = -1;

        /* "yt/utilities/lib/pixelization_routines.pyx":823
 *         dp = dot(cp_vec, npoint)
 *         if match == 0:
 *             if dp < 0:             # <<<<<<<<<<<<<<
 *                 signs[n] = -1
 *             else:
 */
        goto __pyx_L6;
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":826
 *                 signs[n] = -1
 *             else:
 *                 signs[n] = 1             # <<<<<<<<<<<<<<
 *         else:
 *             if dp <= 0 and signs[n] < 0:
 */
      /*else*/ {
        (__pyx_v_signs[__pyx_v_n]) = 1;
      }
      __pyx_L6:;

      /* "yt/utilities/lib/pixelization_routines.pyx":822
 *         cross(vec1, vec2, cp_vec)
 *         dp = dot(cp_vec, npoint)
 *         if match == 0:             # <<<<<<<<<<<<<<
 *             if dp < 0:
 *                 signs[n] = -1
 */
      goto __pyx_L5;
    }

    /* "yt/utilities/lib/pixelization_routines.pyx":828
 *                 signs[n] = 1
 *         else:
 *             if dp <= 0 and signs[n] < 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             elif dp >= 0 and signs[n] > 0:
 */
    /*else*/ {
      __pyx_t_5 = ((__pyx_v_dp <= 0.0) != 0);
      if (__pyx_t_5) {
      } else {
        __pyx_t_4 = __pyx_t_5;
        goto __pyx_L8_bool_binop_done;
      }
      __pyx_t_5 = (((__pyx_v_signs[__pyx_v_n]) < 0) != 0);
      __pyx_t_4 = __pyx_t_5;
      __pyx_L8_bool_binop_done:;
      if (__pyx_t_4) {

        /* "yt/utilities/lib/pixelization_routines.pyx":829
 *         else:
 *             if dp <= 0 and signs[n] < 0:
 *                 continue             # <<<<<<<<<<<<<<
 *             elif dp >= 0 and signs[n] > 0:
 *                 continue
 */
        goto __pyx_L3_continue;

        /* "yt/utilities/lib/pixelization_routines.pyx":828
 *                 signs[n] = 1
 *         else:
 *             if dp <= 0 and signs[n] < 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             elif dp >= 0 and signs[n] > 0:
 */
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":830
 *             if dp <= 0 and signs[n] < 0:
 *                 continue
 *             elif dp >= 0 and signs[n] > 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             else: # mismatch!
 */
      __pyx_t_5 = ((__pyx_v_dp >= 0.0) != 0);
      if (__pyx_t_5) {
      } else {
        __pyx_t_4 = __pyx_t_5;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_5 = (((__pyx_v_signs[__pyx_v_n]) > 0) != 0);
      __pyx_t_4 = __pyx_t_5;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_4) {

        /* "yt/utilities/lib/pixelization_routines.pyx":831
 *                 continue
 *             elif dp >= 0 and signs[n] > 0:
 *                 continue             # <<<<<<<<<<<<<<
 *             else: # mismatch!
 *                 return 0
 */
        goto __pyx_L3_continue;

        /* "yt/utilities/lib/pixelization_routines.pyx":830
 *             if dp <= 0 and signs[n] < 0:
 *                 continue
 *             elif dp >= 0 and signs[n] > 0:             # <<<<<<<<<<<<<<
 *                 continue
 *             else: # mismatch!
 */
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":833
 *                 continue
 *             else: # mismatch!
 *                 return 0             # <<<<<<<<<<<<<<
 *     return 1
 * 
 */
      /*else*/ {
        __pyx_r = 0;
        goto __pyx_L0;
      }
    }
    __pyx_L5:;
    __pyx_L3_continue:;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":834
 *             else: # mismatch!
 *                 return 0
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "yt/utilities/lib/pixelization_routines.pyx":781
 * # results match.  Otherwise, it will fill the signs with -1's and 1's to show
 * # the sign of the dot product of the point with the cross product of the face.
 * cdef int check_face_dot(int nvertices,             # <<<<<<<<<<<<<<
 *                         np.float64_t point[3],
 *                         np.float64_t **vertices,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("yt.utilities.lib.pixelization_routines.check_face_dot", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":837
 * 
 * 
 * def pixelize_element_mesh(np.ndarray[np.float64_t, ndim=2] coords,             # <<<<<<<<<<<<<<
 *                           np.ndarray[np.int64_t, ndim=2] conn,
 *                           buff_size,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_11pixelize_element_mesh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_11pixelize_element_mesh = {"pixelize_element_mesh", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_11pixelize_element_mesh, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_11pixelize_element_mesh(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_coords = 0;
  PyArrayObject *__pyx_v_conn = 0;
  PyObject *__pyx_v_buff_size = 0;
  PyArrayObject *__pyx_v_field = 0;
  PyObject *__pyx_v_extents = 0;
  int __pyx_v_index_offset;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pixelize_element_mesh (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coords,&__pyx_n_s_conn,&__pyx_n_s_buff_size,&__pyx_n_s_field,&__pyx_n_s_extents,&__pyx_n_s_index_offset,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coords)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_element_mesh", 0, 5, 6, 1); __PYX_ERR(0, 837, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_element_mesh", 0, 5, 6, 2); __PYX_ERR(0, 837, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_element_mesh", 0, 5, 6, 3); __PYX_ERR(0, 837, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_extents)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_element_mesh", 0, 5, 6, 4); __PYX_ERR(0, 837, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index_offset);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pixelize_element_mesh") < 0)) __PYX_ERR(0, 837, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_coords = ((PyArrayObject *)values[0]);
    __pyx_v_conn = ((PyArrayObject *)values[1]);
    __pyx_v_buff_size = values[2];
    __pyx_v_field = ((PyArrayObject *)values[3]);
    __pyx_v_extents = values[4];
    if (values[5]) {
      __pyx_v_index_offset = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_index_offset == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 842, __pyx_L3_error)
    } else {
      __pyx_v_index_offset = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pixelize_element_mesh", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 837, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_element_mesh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_coords), __pyx_ptype_5numpy_ndarray, 1, "coords", 0))) __PYX_ERR(0, 837, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_conn), __pyx_ptype_5numpy_ndarray, 1, "conn", 0))) __PYX_ERR(0, 838, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_field), __pyx_ptype_5numpy_ndarray, 1, "field", 0))) __PYX_ERR(0, 840, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_10pixelize_element_mesh(__pyx_self, __pyx_v_coords, __pyx_v_conn, __pyx_v_buff_size, __pyx_v_field, __pyx_v_extents, __pyx_v_index_offset);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_10pixelize_element_mesh(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_coords, PyArrayObject *__pyx_v_conn, PyObject *__pyx_v_buff_size, PyArrayObject *__pyx_v_field, PyObject *__pyx_v_extents, int __pyx_v_index_offset) {
  PyArrayObject *__pyx_v_img = 0;
  __pyx_t_5numpy_float64_t __pyx_v_pLE[3];
  __pyx_t_5numpy_float64_t __pyx_v_pRE[3];
  __pyx_t_5numpy_float64_t __pyx_v_LE[3];
  __pyx_t_5numpy_float64_t __pyx_v_RE[3];
  int __pyx_v_use;
  __pyx_t_5numpy_int64_t __pyx_v_n;
  __pyx_t_5numpy_int64_t __pyx_v_i;
  __pyx_t_5numpy_int64_t __pyx_v_pi;
  __pyx_t_5numpy_int64_t __pyx_v_pj;
  __pyx_t_5numpy_int64_t __pyx_v_pk;
  __pyx_t_5numpy_int64_t __pyx_v_ci;
  __pyx_t_5numpy_int64_t __pyx_v_cj;
  __pyx_t_5numpy_int64_t __pyx_v_pstart[3];
  __pyx_t_5numpy_int64_t __pyx_v_pend[3];
  __pyx_t_5numpy_float64_t __pyx_v_ppoint[3];
  __pyx_t_5numpy_float64_t __pyx_v_idds[3];
  __pyx_t_5numpy_float64_t __pyx_v_dds[3];
  __pyx_t_5numpy_float64_t *__pyx_v_vertices;
  __pyx_t_5numpy_float64_t *__pyx_v_field_vals;
  int __pyx_v_nvertices;
  int __pyx_v_ndim;
  int __pyx_v_num_field_vals;
  double __pyx_v_mapped_coord[4];
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *__pyx_v_sampler = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_conn;
  __Pyx_Buffer __pyx_pybuffer_conn;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_coords;
  __Pyx_Buffer __pyx_pybuffer_coords;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_field;
  __Pyx_Buffer __pyx_pybuffer_field;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_img;
  __Pyx_Buffer __pyx_pybuffer_img;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyArrayObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_float64_t __pyx_t_16;
  npy_intp __pyx_t_17;
  npy_intp __pyx_t_18;
  __pyx_t_5numpy_int64_t __pyx_t_19;
  __pyx_t_5numpy_int64_t __pyx_t_20;
  __pyx_t_5numpy_int64_t __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  __pyx_t_5numpy_int64_t __pyx_t_24;
  __pyx_t_5numpy_int64_t __pyx_t_25;
  __pyx_t_5numpy_int64_t __pyx_t_26;
  __pyx_t_5numpy_int64_t __pyx_t_27;
  __pyx_t_5numpy_int64_t __pyx_t_28;
  __pyx_t_5numpy_int64_t __pyx_t_29;
  __pyx_t_5numpy_int64_t __pyx_t_30;
  __pyx_t_5numpy_int64_t __pyx_t_31;
  __pyx_t_5numpy_int64_t __pyx_t_32;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pixelize_element_mesh", 0);
  __pyx_pybuffer_img.pybuffer.buf = NULL;
  __pyx_pybuffer_img.refcount = 0;
  __pyx_pybuffernd_img.data = NULL;
  __pyx_pybuffernd_img.rcbuffer = &__pyx_pybuffer_img;
  __pyx_pybuffer_coords.pybuffer.buf = NULL;
  __pyx_pybuffer_coords.refcount = 0;
  __pyx_pybuffernd_coords.data = NULL;
  __pyx_pybuffernd_coords.rcbuffer = &__pyx_pybuffer_coords;
  __pyx_pybuffer_conn.pybuffer.buf = NULL;
  __pyx_pybuffer_conn.refcount = 0;
  __pyx_pybuffernd_conn.data = NULL;
  __pyx_pybuffernd_conn.rcbuffer = &__pyx_pybuffer_conn;
  __pyx_pybuffer_field.pybuffer.buf = NULL;
  __pyx_pybuffer_field.refcount = 0;
  __pyx_pybuffernd_field.data = NULL;
  __pyx_pybuffernd_field.rcbuffer = &__pyx_pybuffer_field;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coords.rcbuffer->pybuffer, (PyObject*)__pyx_v_coords, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 837, __pyx_L1_error)
  }
  __pyx_pybuffernd_coords.diminfo[0].strides = __pyx_pybuffernd_coords.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coords.diminfo[0].shape = __pyx_pybuffernd_coords.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_coords.diminfo[1].strides = __pyx_pybuffernd_coords.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_coords.diminfo[1].shape = __pyx_pybuffernd_coords.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_conn.rcbuffer->pybuffer, (PyObject*)__pyx_v_conn, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 837, __pyx_L1_error)
  }
  __pyx_pybuffernd_conn.diminfo[0].strides = __pyx_pybuffernd_conn.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_conn.diminfo[0].shape = __pyx_pybuffernd_conn.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_conn.diminfo[1].strides = __pyx_pybuffernd_conn.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_conn.diminfo[1].shape = __pyx_pybuffernd_conn.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_field.rcbuffer->pybuffer, (PyObject*)__pyx_v_field, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 837, __pyx_L1_error)
  }
  __pyx_pybuffernd_field.diminfo[0].strides = __pyx_pybuffernd_field.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_field.diminfo[0].shape = __pyx_pybuffernd_field.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_field.diminfo[1].strides = __pyx_pybuffernd_field.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_field.diminfo[1].shape = __pyx_pybuffernd_field.rcbuffer->pybuffer.shape[1];

  /* "yt/utilities/lib/pixelization_routines.pyx":844
 *                           int index_offset = 0):
 *     cdef np.ndarray[np.float64_t, ndim=3] img
 *     img = np.zeros(buff_size, dtype="float64")             # <<<<<<<<<<<<<<
 *     img[:] = np.nan
 *     # Two steps:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_buff_size);
  __Pyx_GIVEREF(__pyx_v_buff_size);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_buff_size);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_float64) < 0) __PYX_ERR(0, 844, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 844, __pyx_L1_error)
  __pyx_t_5 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_img.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_img.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 3, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_img.rcbuffer->pybuffer, (PyObject*)__pyx_v_img, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 3, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_img.diminfo[0].strides = __pyx_pybuffernd_img.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_img.diminfo[0].shape = __pyx_pybuffernd_img.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_img.diminfo[1].strides = __pyx_pybuffernd_img.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_img.diminfo[1].shape = __pyx_pybuffernd_img.rcbuffer->pybuffer.shape[1]; __pyx_pybuffernd_img.diminfo[2].strides = __pyx_pybuffernd_img.rcbuffer->pybuffer.strides[2]; __pyx_pybuffernd_img.diminfo[2].shape = __pyx_pybuffernd_img.rcbuffer->pybuffer.shape[2];
    if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 844, __pyx_L1_error)
  }
  __pyx_t_5 = 0;
  __pyx_v_img = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":845
 *     cdef np.ndarray[np.float64_t, ndim=3] img
 *     img = np.zeros(buff_size, dtype="float64")
 *     img[:] = np.nan             # <<<<<<<<<<<<<<
 *     # Two steps:
 *     #  1. Is image point within the mesh bounding box?
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_nan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_img), __pyx_slice__5, __pyx_t_3) < 0)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":866
 *     cdef np.float64_t *vertices
 *     cdef np.float64_t *field_vals
 *     cdef int nvertices = conn.shape[1]             # <<<<<<<<<<<<<<
 *     cdef int ndim = coords.shape[1]
 *     cdef int num_field_vals = field.shape[1]
 */
  __pyx_v_nvertices = (__pyx_v_conn->dimensions[1]);

  /* "yt/utilities/lib/pixelization_routines.pyx":867
 *     cdef np.float64_t *field_vals
 *     cdef int nvertices = conn.shape[1]
 *     cdef int ndim = coords.shape[1]             # <<<<<<<<<<<<<<
 *     cdef int num_field_vals = field.shape[1]
 *     cdef double[4] mapped_coord
 */
  __pyx_v_ndim = (__pyx_v_coords->dimensions[1]);

  /* "yt/utilities/lib/pixelization_routines.pyx":868
 *     cdef int nvertices = conn.shape[1]
 *     cdef int ndim = coords.shape[1]
 *     cdef int num_field_vals = field.shape[1]             # <<<<<<<<<<<<<<
 *     cdef double[4] mapped_coord
 *     cdef ElementSampler sampler
 */
  __pyx_v_num_field_vals = (__pyx_v_field->dimensions[1]);

  /* "yt/utilities/lib/pixelization_routines.pyx":873
 * 
 *     # Pick the right sampler and allocate storage for the mapped coordinate
 *     if ndim == 3 and nvertices == 4:             # <<<<<<<<<<<<<<
 *         sampler = P1Sampler3D()
 *     elif ndim == 3 and nvertices == 6:
 */
  __pyx_t_11 = ((__pyx_v_ndim == 3) != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_10 = __pyx_t_11;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_11 = ((__pyx_v_nvertices == 4) != 0);
  __pyx_t_10 = __pyx_t_11;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_10) {

    /* "yt/utilities/lib/pixelization_routines.pyx":874
 *     # Pick the right sampler and allocate storage for the mapped coordinate
 *     if ndim == 3 and nvertices == 4:
 *         sampler = P1Sampler3D()             # <<<<<<<<<<<<<<
 *     elif ndim == 3 and nvertices == 6:
 *         sampler = W1Sampler3D()
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler3D)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 874, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":873
 * 
 *     # Pick the right sampler and allocate storage for the mapped coordinate
 *     if ndim == 3 and nvertices == 4:             # <<<<<<<<<<<<<<
 *         sampler = P1Sampler3D()
 *     elif ndim == 3 and nvertices == 6:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":875
 *     if ndim == 3 and nvertices == 4:
 *         sampler = P1Sampler3D()
 *     elif ndim == 3 and nvertices == 6:             # <<<<<<<<<<<<<<
 *         sampler = W1Sampler3D()
 *     elif ndim == 3 and nvertices == 8:
 */
  __pyx_t_11 = ((__pyx_v_ndim == 3) != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_10 = __pyx_t_11;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_11 = ((__pyx_v_nvertices == 6) != 0);
  __pyx_t_10 = __pyx_t_11;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_10) {

    /* "yt/utilities/lib/pixelization_routines.pyx":876
 *         sampler = P1Sampler3D()
 *     elif ndim == 3 and nvertices == 6:
 *         sampler = W1Sampler3D()             # <<<<<<<<<<<<<<
 *     elif ndim == 3 and nvertices == 8:
 *         sampler = Q1Sampler3D()
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_W1Sampler3D)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":875
 *     if ndim == 3 and nvertices == 4:
 *         sampler = P1Sampler3D()
 *     elif ndim == 3 and nvertices == 6:             # <<<<<<<<<<<<<<
 *         sampler = W1Sampler3D()
 *     elif ndim == 3 and nvertices == 8:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":877
 *     elif ndim == 3 and nvertices == 6:
 *         sampler = W1Sampler3D()
 *     elif ndim == 3 and nvertices == 8:             # <<<<<<<<<<<<<<
 *         sampler = Q1Sampler3D()
 *     elif ndim == 3 and nvertices == 20:
 */
  __pyx_t_11 = ((__pyx_v_ndim == 3) != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_10 = __pyx_t_11;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_11 = ((__pyx_v_nvertices == 8) != 0);
  __pyx_t_10 = __pyx_t_11;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_10) {

    /* "yt/utilities/lib/pixelization_routines.pyx":878
 *         sampler = W1Sampler3D()
 *     elif ndim == 3 and nvertices == 8:
 *         sampler = Q1Sampler3D()             # <<<<<<<<<<<<<<
 *     elif ndim == 3 and nvertices == 20:
 *         sampler = S2Sampler3D()
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":877
 *     elif ndim == 3 and nvertices == 6:
 *         sampler = W1Sampler3D()
 *     elif ndim == 3 and nvertices == 8:             # <<<<<<<<<<<<<<
 *         sampler = Q1Sampler3D()
 *     elif ndim == 3 and nvertices == 20:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":879
 *     elif ndim == 3 and nvertices == 8:
 *         sampler = Q1Sampler3D()
 *     elif ndim == 3 and nvertices == 20:             # <<<<<<<<<<<<<<
 *         sampler = S2Sampler3D()
 *     elif ndim == 2 and nvertices == 3:
 */
  __pyx_t_11 = ((__pyx_v_ndim == 3) != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_10 = __pyx_t_11;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_11 = ((__pyx_v_nvertices == 20) != 0);
  __pyx_t_10 = __pyx_t_11;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_10) {

    /* "yt/utilities/lib/pixelization_routines.pyx":880
 *         sampler = Q1Sampler3D()
 *     elif ndim == 3 and nvertices == 20:
 *         sampler = S2Sampler3D()             # <<<<<<<<<<<<<<
 *     elif ndim == 2 and nvertices == 3:
 *         sampler = P1Sampler2D()
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_S2Sampler3D)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":879
 *     elif ndim == 3 and nvertices == 8:
 *         sampler = Q1Sampler3D()
 *     elif ndim == 3 and nvertices == 20:             # <<<<<<<<<<<<<<
 *         sampler = S2Sampler3D()
 *     elif ndim == 2 and nvertices == 3:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":881
 *     elif ndim == 3 and nvertices == 20:
 *         sampler = S2Sampler3D()
 *     elif ndim == 2 and nvertices == 3:             # <<<<<<<<<<<<<<
 *         sampler = P1Sampler2D()
 *     elif ndim == 1 and nvertices == 2:
 */
  __pyx_t_11 = ((__pyx_v_ndim == 2) != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_10 = __pyx_t_11;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_11 = ((__pyx_v_nvertices == 3) != 0);
  __pyx_t_10 = __pyx_t_11;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_10) {

    /* "yt/utilities/lib/pixelization_routines.pyx":882
 *         sampler = S2Sampler3D()
 *     elif ndim == 2 and nvertices == 3:
 *         sampler = P1Sampler2D()             # <<<<<<<<<<<<<<
 *     elif ndim == 1 and nvertices == 2:
 *         sampler = P1Sampler1D()
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler2D)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 882, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":881
 *     elif ndim == 3 and nvertices == 20:
 *         sampler = S2Sampler3D()
 *     elif ndim == 2 and nvertices == 3:             # <<<<<<<<<<<<<<
 *         sampler = P1Sampler2D()
 *     elif ndim == 1 and nvertices == 2:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":883
 *     elif ndim == 2 and nvertices == 3:
 *         sampler = P1Sampler2D()
 *     elif ndim == 1 and nvertices == 2:             # <<<<<<<<<<<<<<
 *         sampler = P1Sampler1D()
 *     elif ndim == 2 and nvertices == 4:
 */
  __pyx_t_11 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_10 = __pyx_t_11;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_11 = ((__pyx_v_nvertices == 2) != 0);
  __pyx_t_10 = __pyx_t_11;
  __pyx_L14_bool_binop_done:;
  if (__pyx_t_10) {

    /* "yt/utilities/lib/pixelization_routines.pyx":884
 *         sampler = P1Sampler2D()
 *     elif ndim == 1 and nvertices == 2:
 *         sampler = P1Sampler1D()             # <<<<<<<<<<<<<<
 *     elif ndim == 2 and nvertices == 4:
 *         sampler = Q1Sampler2D()
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler1D)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 884, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":883
 *     elif ndim == 2 and nvertices == 3:
 *         sampler = P1Sampler2D()
 *     elif ndim == 1 and nvertices == 2:             # <<<<<<<<<<<<<<
 *         sampler = P1Sampler1D()
 *     elif ndim == 2 and nvertices == 4:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":885
 *     elif ndim == 1 and nvertices == 2:
 *         sampler = P1Sampler1D()
 *     elif ndim == 2 and nvertices == 4:             # <<<<<<<<<<<<<<
 *         sampler = Q1Sampler2D()
 *     elif ndim == 2 and nvertices == 9:
 */
  __pyx_t_11 = ((__pyx_v_ndim == 2) != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_10 = __pyx_t_11;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_11 = ((__pyx_v_nvertices == 4) != 0);
  __pyx_t_10 = __pyx_t_11;
  __pyx_L16_bool_binop_done:;
  if (__pyx_t_10) {

    /* "yt/utilities/lib/pixelization_routines.pyx":886
 *         sampler = P1Sampler1D()
 *     elif ndim == 2 and nvertices == 4:
 *         sampler = Q1Sampler2D()             # <<<<<<<<<<<<<<
 *     elif ndim == 2 and nvertices == 9:
 *         sampler = Q2Sampler2D()
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":885
 *     elif ndim == 1 and nvertices == 2:
 *         sampler = P1Sampler1D()
 *     elif ndim == 2 and nvertices == 4:             # <<<<<<<<<<<<<<
 *         sampler = Q1Sampler2D()
 *     elif ndim == 2 and nvertices == 9:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":887
 *     elif ndim == 2 and nvertices == 4:
 *         sampler = Q1Sampler2D()
 *     elif ndim == 2 and nvertices == 9:             # <<<<<<<<<<<<<<
 *         sampler = Q2Sampler2D()
 *     elif ndim == 2 and nvertices == 6:
 */
  __pyx_t_11 = ((__pyx_v_ndim == 2) != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_10 = __pyx_t_11;
    goto __pyx_L18_bool_binop_done;
  }
  __pyx_t_11 = ((__pyx_v_nvertices == 9) != 0);
  __pyx_t_10 = __pyx_t_11;
  __pyx_L18_bool_binop_done:;
  if (__pyx_t_10) {

    /* "yt/utilities/lib/pixelization_routines.pyx":888
 *         sampler = Q1Sampler2D()
 *     elif ndim == 2 and nvertices == 9:
 *         sampler = Q2Sampler2D()             # <<<<<<<<<<<<<<
 *     elif ndim == 2 and nvertices == 6:
 *         sampler = T2Sampler2D()
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":887
 *     elif ndim == 2 and nvertices == 4:
 *         sampler = Q1Sampler2D()
 *     elif ndim == 2 and nvertices == 9:             # <<<<<<<<<<<<<<
 *         sampler = Q2Sampler2D()
 *     elif ndim == 2 and nvertices == 6:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":889
 *     elif ndim == 2 and nvertices == 9:
 *         sampler = Q2Sampler2D()
 *     elif ndim == 2 and nvertices == 6:             # <<<<<<<<<<<<<<
 *         sampler = T2Sampler2D()
 *     elif ndim == 3 and nvertices == 10:
 */
  __pyx_t_11 = ((__pyx_v_ndim == 2) != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_10 = __pyx_t_11;
    goto __pyx_L20_bool_binop_done;
  }
  __pyx_t_11 = ((__pyx_v_nvertices == 6) != 0);
  __pyx_t_10 = __pyx_t_11;
  __pyx_L20_bool_binop_done:;
  if (__pyx_t_10) {

    /* "yt/utilities/lib/pixelization_routines.pyx":890
 *         sampler = Q2Sampler2D()
 *     elif ndim == 2 and nvertices == 6:
 *         sampler = T2Sampler2D()             # <<<<<<<<<<<<<<
 *     elif ndim == 3 and nvertices == 10:
 *         sampler = Tet2Sampler3D()
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_T2Sampler2D)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 890, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":889
 *     elif ndim == 2 and nvertices == 9:
 *         sampler = Q2Sampler2D()
 *     elif ndim == 2 and nvertices == 6:             # <<<<<<<<<<<<<<
 *         sampler = T2Sampler2D()
 *     elif ndim == 3 and nvertices == 10:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":891
 *     elif ndim == 2 and nvertices == 6:
 *         sampler = T2Sampler2D()
 *     elif ndim == 3 and nvertices == 10:             # <<<<<<<<<<<<<<
 *         sampler = Tet2Sampler3D()
 *     else:
 */
  __pyx_t_11 = ((__pyx_v_ndim == 3) != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_10 = __pyx_t_11;
    goto __pyx_L22_bool_binop_done;
  }
  __pyx_t_11 = ((__pyx_v_nvertices == 10) != 0);
  __pyx_t_10 = __pyx_t_11;
  __pyx_L22_bool_binop_done:;
  if (likely(__pyx_t_10)) {

    /* "yt/utilities/lib/pixelization_routines.pyx":892
 *         sampler = T2Sampler2D()
 *     elif ndim == 3 and nvertices == 10:
 *         sampler = Tet2Sampler3D()             # <<<<<<<<<<<<<<
 *     else:
 *         raise YTElementTypeNotRecognized(ndim, nvertices)
 */
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 892, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":891
 *     elif ndim == 2 and nvertices == 6:
 *         sampler = T2Sampler2D()
 *     elif ndim == 3 and nvertices == 10:             # <<<<<<<<<<<<<<
 *         sampler = Tet2Sampler3D()
 *     else:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":894
 *         sampler = Tet2Sampler3D()
 *     else:
 *         raise YTElementTypeNotRecognized(ndim, nvertices)             # <<<<<<<<<<<<<<
 * 
 *     # if we are in 2D land, the 1 cell thick dimension had better be 'z'
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_YTElementTypeNotRecognized); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_nvertices); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 894, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_12 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_t_1, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 894, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_12, __pyx_t_1, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 894, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_13 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      if (__pyx_t_12) {
        __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12); __pyx_t_12 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_13, 0+__pyx_t_6, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_13, 1+__pyx_t_6, __pyx_t_2);
      __pyx_t_1 = 0;
      __pyx_t_2 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 894, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "yt/utilities/lib/pixelization_routines.pyx":897
 * 
 *     # if we are in 2D land, the 1 cell thick dimension had better be 'z'
 *     if ndim == 2:             # <<<<<<<<<<<<<<
 *         if buff_size[2] != 1:
 *             raise RuntimeError("Slices of 2D datasets must be "
 */
  __pyx_t_10 = ((__pyx_v_ndim == 2) != 0);
  if (__pyx_t_10) {

    /* "yt/utilities/lib/pixelization_routines.pyx":898
 *     # if we are in 2D land, the 1 cell thick dimension had better be 'z'
 *     if ndim == 2:
 *         if buff_size[2] != 1:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Slices of 2D datasets must be "
 *                                "perpendicular to the 'z' direction.")
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_buff_size, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_NeObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 898, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(__pyx_t_10)) {

      /* "yt/utilities/lib/pixelization_routines.pyx":899
 *     if ndim == 2:
 *         if buff_size[2] != 1:
 *             raise RuntimeError("Slices of 2D datasets must be "             # <<<<<<<<<<<<<<
 *                                "perpendicular to the 'z' direction.")
 * 
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 899, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 899, __pyx_L1_error)

      /* "yt/utilities/lib/pixelization_routines.pyx":898
 *     # if we are in 2D land, the 1 cell thick dimension had better be 'z'
 *     if ndim == 2:
 *         if buff_size[2] != 1:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Slices of 2D datasets must be "
 *                                "perpendicular to the 'z' direction.")
 */
    }

    /* "yt/utilities/lib/pixelization_routines.pyx":897
 * 
 *     # if we are in 2D land, the 1 cell thick dimension had better be 'z'
 *     if ndim == 2:             # <<<<<<<<<<<<<<
 *         if buff_size[2] != 1:
 *             raise RuntimeError("Slices of 2D datasets must be "
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":903
 * 
 *     # allocate temporary storage
 *     vertices = <np.float64_t *> malloc(ndim * sizeof(np.float64_t) * nvertices)             # <<<<<<<<<<<<<<
 *     field_vals = <np.float64_t *> malloc(sizeof(np.float64_t) * num_field_vals)
 * 
 */
  __pyx_v_vertices = ((__pyx_t_5numpy_float64_t *)malloc(((__pyx_v_ndim * (sizeof(__pyx_t_5numpy_float64_t))) * __pyx_v_nvertices)));

  /* "yt/utilities/lib/pixelization_routines.pyx":904
 *     # allocate temporary storage
 *     vertices = <np.float64_t *> malloc(ndim * sizeof(np.float64_t) * nvertices)
 *     field_vals = <np.float64_t *> malloc(sizeof(np.float64_t) * num_field_vals)             # <<<<<<<<<<<<<<
 * 
 *     # fill the image bounds and pixel size information here
 */
  __pyx_v_field_vals = ((__pyx_t_5numpy_float64_t *)malloc(((sizeof(__pyx_t_5numpy_float64_t)) * __pyx_v_num_field_vals)));

  /* "yt/utilities/lib/pixelization_routines.pyx":907
 * 
 *     # fill the image bounds and pixel size information here
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         pLE[i] = extents[i][0]
 *         pRE[i] = extents[i][1]
 */
  __pyx_t_6 = __pyx_v_ndim;
  __pyx_t_14 = __pyx_t_6;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
    __pyx_v_i = __pyx_t_15;

    /* "yt/utilities/lib/pixelization_routines.pyx":908
 *     # fill the image bounds and pixel size information here
 *     for i in range(ndim):
 *         pLE[i] = extents[i][0]             # <<<<<<<<<<<<<<
 *         pRE[i] = extents[i][1]
 *         dds[i] = (pRE[i] - pLE[i])/buff_size[i]
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_extents, __pyx_v_i, __pyx_t_5numpy_int64_t, 1, __Pyx_PyInt_From_npy_int64, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_16 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 908, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_pLE[__pyx_v_i]) = __pyx_t_16;

    /* "yt/utilities/lib/pixelization_routines.pyx":909
 *     for i in range(ndim):
 *         pLE[i] = extents[i][0]
 *         pRE[i] = extents[i][1]             # <<<<<<<<<<<<<<
 *         dds[i] = (pRE[i] - pLE[i])/buff_size[i]
 *         if dds[i] == 0.0:
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_extents, __pyx_v_i, __pyx_t_5numpy_int64_t, 1, __Pyx_PyInt_From_npy_int64, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 909, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_16 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 909, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_pRE[__pyx_v_i]) = __pyx_t_16;

    /* "yt/utilities/lib/pixelization_routines.pyx":910
 *         pLE[i] = extents[i][0]
 *         pRE[i] = extents[i][1]
 *         dds[i] = (pRE[i] - pLE[i])/buff_size[i]             # <<<<<<<<<<<<<<
 *         if dds[i] == 0.0:
 *             idds[i] = 0.0
 */
    __pyx_t_4 = PyFloat_FromDouble(((__pyx_v_pRE[__pyx_v_i]) - (__pyx_v_pLE[__pyx_v_i]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_buff_size, __pyx_v_i, __pyx_t_5numpy_int64_t, 1, __Pyx_PyInt_From_npy_int64, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_13 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_16 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 910, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    (__pyx_v_dds[__pyx_v_i]) = __pyx_t_16;

    /* "yt/utilities/lib/pixelization_routines.pyx":911
 *         pRE[i] = extents[i][1]
 *         dds[i] = (pRE[i] - pLE[i])/buff_size[i]
 *         if dds[i] == 0.0:             # <<<<<<<<<<<<<<
 *             idds[i] = 0.0
 *         else:
 */
    __pyx_t_10 = (((__pyx_v_dds[__pyx_v_i]) == 0.0) != 0);
    if (__pyx_t_10) {

      /* "yt/utilities/lib/pixelization_routines.pyx":912
 *         dds[i] = (pRE[i] - pLE[i])/buff_size[i]
 *         if dds[i] == 0.0:
 *             idds[i] = 0.0             # <<<<<<<<<<<<<<
 *         else:
 *             idds[i] = 1.0 / dds[i]
 */
      (__pyx_v_idds[__pyx_v_i]) = 0.0;

      /* "yt/utilities/lib/pixelization_routines.pyx":911
 *         pRE[i] = extents[i][1]
 *         dds[i] = (pRE[i] - pLE[i])/buff_size[i]
 *         if dds[i] == 0.0:             # <<<<<<<<<<<<<<
 *             idds[i] = 0.0
 *         else:
 */
      goto __pyx_L28;
    }

    /* "yt/utilities/lib/pixelization_routines.pyx":914
 *             idds[i] = 0.0
 *         else:
 *             idds[i] = 1.0 / dds[i]             # <<<<<<<<<<<<<<
 * 
 *     with cython.boundscheck(False):
 */
    /*else*/ {
      if (unlikely((__pyx_v_dds[__pyx_v_i]) == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 914, __pyx_L1_error)
      }
      (__pyx_v_idds[__pyx_v_i]) = (((__pyx_t_5numpy_float64_t)1.0) / (__pyx_v_dds[__pyx_v_i]));
    }
    __pyx_L28:;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":917
 * 
 *     with cython.boundscheck(False):
 *         for ci in range(conn.shape[0]):             # <<<<<<<<<<<<<<
 * 
 *             # Fill the vertices
 */
  __pyx_t_17 = (__pyx_v_conn->dimensions[0]);
  __pyx_t_18 = __pyx_t_17;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_18; __pyx_t_15+=1) {
    __pyx_v_ci = __pyx_t_15;

    /* "yt/utilities/lib/pixelization_routines.pyx":920
 * 
 *             # Fill the vertices
 *             LE[0] = LE[1] = LE[2] = 1e60             # <<<<<<<<<<<<<<
 *             RE[0] = RE[1] = RE[2] = -1e60
 * 
 */
    (__pyx_v_LE[0]) = 1e60;
    (__pyx_v_LE[1]) = 1e60;
    (__pyx_v_LE[2]) = 1e60;

    /* "yt/utilities/lib/pixelization_routines.pyx":921
 *             # Fill the vertices
 *             LE[0] = LE[1] = LE[2] = 1e60
 *             RE[0] = RE[1] = RE[2] = -1e60             # <<<<<<<<<<<<<<
 * 
 *             for n in range(num_field_vals):
 */
    (__pyx_v_RE[0]) = -1e60;
    (__pyx_v_RE[1]) = -1e60;
    (__pyx_v_RE[2]) = -1e60;

    /* "yt/utilities/lib/pixelization_routines.pyx":923
 *             RE[0] = RE[1] = RE[2] = -1e60
 * 
 *             for n in range(num_field_vals):             # <<<<<<<<<<<<<<
 *                 field_vals[n] = field[ci, n]
 * 
 */
    __pyx_t_6 = __pyx_v_num_field_vals;
    __pyx_t_14 = __pyx_t_6;
    for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_14; __pyx_t_19+=1) {
      __pyx_v_n = __pyx_t_19;

      /* "yt/utilities/lib/pixelization_routines.pyx":924
 * 
 *             for n in range(num_field_vals):
 *                 field_vals[n] = field[ci, n]             # <<<<<<<<<<<<<<
 * 
 *             for n in range(nvertices):
 */
      __pyx_t_20 = __pyx_v_ci;
      __pyx_t_21 = __pyx_v_n;
      if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_pybuffernd_field.diminfo[0].shape;
      if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_pybuffernd_field.diminfo[1].shape;
      (__pyx_v_field_vals[__pyx_v_n]) = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_field.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_field.diminfo[0].strides, __pyx_t_21, __pyx_pybuffernd_field.diminfo[1].strides));
    }

    /* "yt/utilities/lib/pixelization_routines.pyx":926
 *                 field_vals[n] = field[ci, n]
 * 
 *             for n in range(nvertices):             # <<<<<<<<<<<<<<
 *                 cj = conn[ci, n] - index_offset
 *                 for i in range(ndim):
 */
    __pyx_t_6 = __pyx_v_nvertices;
    __pyx_t_14 = __pyx_t_6;
    for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_14; __pyx_t_19+=1) {
      __pyx_v_n = __pyx_t_19;

      /* "yt/utilities/lib/pixelization_routines.pyx":927
 * 
 *             for n in range(nvertices):
 *                 cj = conn[ci, n] - index_offset             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     vertices[ndim*n + i] = coords[cj, i]
 */
      __pyx_t_21 = __pyx_v_ci;
      __pyx_t_20 = __pyx_v_n;
      if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_pybuffernd_conn.diminfo[0].shape;
      if (__pyx_t_20 < 0) __pyx_t_20 += __pyx_pybuffernd_conn.diminfo[1].shape;
      __pyx_v_cj = ((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_conn.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_conn.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_conn.diminfo[1].strides)) - __pyx_v_index_offset);

      /* "yt/utilities/lib/pixelization_routines.pyx":928
 *             for n in range(nvertices):
 *                 cj = conn[ci, n] - index_offset
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     vertices[ndim*n + i] = coords[cj, i]
 *                     LE[i] = fmin(LE[i], vertices[ndim*n+i])
 */
      __pyx_t_22 = __pyx_v_ndim;
      __pyx_t_23 = __pyx_t_22;
      for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_23; __pyx_t_20+=1) {
        __pyx_v_i = __pyx_t_20;

        /* "yt/utilities/lib/pixelization_routines.pyx":929
 *                 cj = conn[ci, n] - index_offset
 *                 for i in range(ndim):
 *                     vertices[ndim*n + i] = coords[cj, i]             # <<<<<<<<<<<<<<
 *                     LE[i] = fmin(LE[i], vertices[ndim*n+i])
 *                     RE[i] = fmax(RE[i], vertices[ndim*n+i])
 */
        __pyx_t_21 = __pyx_v_cj;
        __pyx_t_24 = __pyx_v_i;
        if (__pyx_t_21 < 0) __pyx_t_21 += __pyx_pybuffernd_coords.diminfo[0].shape;
        if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_pybuffernd_coords.diminfo[1].shape;
        (__pyx_v_vertices[((__pyx_v_ndim * __pyx_v_n) + __pyx_v_i)]) = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_coords.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_coords.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_coords.diminfo[1].strides));

        /* "yt/utilities/lib/pixelization_routines.pyx":930
 *                 for i in range(ndim):
 *                     vertices[ndim*n + i] = coords[cj, i]
 *                     LE[i] = fmin(LE[i], vertices[ndim*n+i])             # <<<<<<<<<<<<<<
 *                     RE[i] = fmax(RE[i], vertices[ndim*n+i])
 * 
 */
        (__pyx_v_LE[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin((__pyx_v_LE[__pyx_v_i]), (__pyx_v_vertices[((__pyx_v_ndim * __pyx_v_n) + __pyx_v_i)]));

        /* "yt/utilities/lib/pixelization_routines.pyx":931
 *                     vertices[ndim*n + i] = coords[cj, i]
 *                     LE[i] = fmin(LE[i], vertices[ndim*n+i])
 *                     RE[i] = fmax(RE[i], vertices[ndim*n+i])             # <<<<<<<<<<<<<<
 * 
 *             use = 1
 */
        (__pyx_v_RE[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax((__pyx_v_RE[__pyx_v_i]), (__pyx_v_vertices[((__pyx_v_ndim * __pyx_v_n) + __pyx_v_i)]));
      }
    }

    /* "yt/utilities/lib/pixelization_routines.pyx":933
 *                     RE[i] = fmax(RE[i], vertices[ndim*n+i])
 * 
 *             use = 1             # <<<<<<<<<<<<<<
 *             for i in range(ndim):
 *                 if RE[i] < pLE[i] or LE[i] >= pRE[i]:
 */
    __pyx_v_use = 1;

    /* "yt/utilities/lib/pixelization_routines.pyx":934
 * 
 *             use = 1
 *             for i in range(ndim):             # <<<<<<<<<<<<<<
 *                 if RE[i] < pLE[i] or LE[i] >= pRE[i]:
 *                     use = 0
 */
    __pyx_t_6 = __pyx_v_ndim;
    __pyx_t_14 = __pyx_t_6;
    for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_14; __pyx_t_19+=1) {
      __pyx_v_i = __pyx_t_19;

      /* "yt/utilities/lib/pixelization_routines.pyx":935
 *             use = 1
 *             for i in range(ndim):
 *                 if RE[i] < pLE[i] or LE[i] >= pRE[i]:             # <<<<<<<<<<<<<<
 *                     use = 0
 *                     break
 */
      __pyx_t_11 = (((__pyx_v_RE[__pyx_v_i]) < (__pyx_v_pLE[__pyx_v_i])) != 0);
      if (!__pyx_t_11) {
      } else {
        __pyx_t_10 = __pyx_t_11;
        goto __pyx_L40_bool_binop_done;
      }
      __pyx_t_11 = (((__pyx_v_LE[__pyx_v_i]) >= (__pyx_v_pRE[__pyx_v_i])) != 0);
      __pyx_t_10 = __pyx_t_11;
      __pyx_L40_bool_binop_done:;
      if (__pyx_t_10) {

        /* "yt/utilities/lib/pixelization_routines.pyx":936
 *             for i in range(ndim):
 *                 if RE[i] < pLE[i] or LE[i] >= pRE[i]:
 *                     use = 0             # <<<<<<<<<<<<<<
 *                     break
 *                 pstart[i] = i64max(<np.int64_t> ((LE[i] - pLE[i])*idds[i]) - 1, 0)
 */
        __pyx_v_use = 0;

        /* "yt/utilities/lib/pixelization_routines.pyx":937
 *                 if RE[i] < pLE[i] or LE[i] >= pRE[i]:
 *                     use = 0
 *                     break             # <<<<<<<<<<<<<<
 *                 pstart[i] = i64max(<np.int64_t> ((LE[i] - pLE[i])*idds[i]) - 1, 0)
 *                 pend[i] = i64min(<np.int64_t> ((RE[i] - pLE[i])*idds[i]) + 1, img.shape[i]-1)
 */
        goto __pyx_L38_break;

        /* "yt/utilities/lib/pixelization_routines.pyx":935
 *             use = 1
 *             for i in range(ndim):
 *                 if RE[i] < pLE[i] or LE[i] >= pRE[i]:             # <<<<<<<<<<<<<<
 *                     use = 0
 *                     break
 */
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":938
 *                     use = 0
 *                     break
 *                 pstart[i] = i64max(<np.int64_t> ((LE[i] - pLE[i])*idds[i]) - 1, 0)             # <<<<<<<<<<<<<<
 *                 pend[i] = i64min(<np.int64_t> ((RE[i] - pLE[i])*idds[i]) + 1, img.shape[i]-1)
 * 
 */
      (__pyx_v_pstart[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_i64max((((__pyx_t_5numpy_int64_t)(((__pyx_v_LE[__pyx_v_i]) - (__pyx_v_pLE[__pyx_v_i])) * (__pyx_v_idds[__pyx_v_i]))) - 1), 0);

      /* "yt/utilities/lib/pixelization_routines.pyx":939
 *                     break
 *                 pstart[i] = i64max(<np.int64_t> ((LE[i] - pLE[i])*idds[i]) - 1, 0)
 *                 pend[i] = i64min(<np.int64_t> ((RE[i] - pLE[i])*idds[i]) + 1, img.shape[i]-1)             # <<<<<<<<<<<<<<
 * 
 *             # override for the low-dimensional case
 */
      (__pyx_v_pend[__pyx_v_i]) = __pyx_f_2yt_9utilities_3lib_8fp_utils_i64min((((__pyx_t_5numpy_int64_t)(((__pyx_v_RE[__pyx_v_i]) - (__pyx_v_pLE[__pyx_v_i])) * (__pyx_v_idds[__pyx_v_i]))) + 1), ((__pyx_v_img->dimensions[__pyx_v_i]) - 1));
    }
    __pyx_L38_break:;

    /* "yt/utilities/lib/pixelization_routines.pyx":942
 * 
 *             # override for the low-dimensional case
 *             if ndim < 3:             # <<<<<<<<<<<<<<
 *                 pstart[2] = 0
 *                 pend[2] = 0
 */
    __pyx_t_10 = ((__pyx_v_ndim < 3) != 0);
    if (__pyx_t_10) {

      /* "yt/utilities/lib/pixelization_routines.pyx":943
 *             # override for the low-dimensional case
 *             if ndim < 3:
 *                 pstart[2] = 0             # <<<<<<<<<<<<<<
 *                 pend[2] = 0
 *             if ndim < 2:
 */
      (__pyx_v_pstart[2]) = 0;

      /* "yt/utilities/lib/pixelization_routines.pyx":944
 *             if ndim < 3:
 *                 pstart[2] = 0
 *                 pend[2] = 0             # <<<<<<<<<<<<<<
 *             if ndim < 2:
 *                 pstart[1] = 0
 */
      (__pyx_v_pend[2]) = 0;

      /* "yt/utilities/lib/pixelization_routines.pyx":942
 * 
 *             # override for the low-dimensional case
 *             if ndim < 3:             # <<<<<<<<<<<<<<
 *                 pstart[2] = 0
 *                 pend[2] = 0
 */
    }

    /* "yt/utilities/lib/pixelization_routines.pyx":945
 *                 pstart[2] = 0
 *                 pend[2] = 0
 *             if ndim < 2:             # <<<<<<<<<<<<<<
 *                 pstart[1] = 0
 *                 pend[1] = 0
 */
    __pyx_t_10 = ((__pyx_v_ndim < 2) != 0);
    if (__pyx_t_10) {

      /* "yt/utilities/lib/pixelization_routines.pyx":946
 *                 pend[2] = 0
 *             if ndim < 2:
 *                 pstart[1] = 0             # <<<<<<<<<<<<<<
 *                 pend[1] = 0
 * 
 */
      (__pyx_v_pstart[1]) = 0;

      /* "yt/utilities/lib/pixelization_routines.pyx":947
 *             if ndim < 2:
 *                 pstart[1] = 0
 *                 pend[1] = 0             # <<<<<<<<<<<<<<
 * 
 *             if use == 0:
 */
      (__pyx_v_pend[1]) = 0;

      /* "yt/utilities/lib/pixelization_routines.pyx":945
 *                 pstart[2] = 0
 *                 pend[2] = 0
 *             if ndim < 2:             # <<<<<<<<<<<<<<
 *                 pstart[1] = 0
 *                 pend[1] = 0
 */
    }

    /* "yt/utilities/lib/pixelization_routines.pyx":949
 *                 pend[1] = 0
 * 
 *             if use == 0:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    __pyx_t_10 = ((__pyx_v_use == 0) != 0);
    if (__pyx_t_10) {

      /* "yt/utilities/lib/pixelization_routines.pyx":950
 * 
 *             if use == 0:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             # Now our bounding box intersects, so we get the extents of our pixel
 */
      goto __pyx_L29_continue;

      /* "yt/utilities/lib/pixelization_routines.pyx":949
 *                 pend[1] = 0
 * 
 *             if use == 0:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
    }

    /* "yt/utilities/lib/pixelization_routines.pyx":955
 *             # region which overlaps with the bounding box, and we'll check each
 *             # pixel in there.
 *             for pi in range(pstart[0], pend[0] + 1):             # <<<<<<<<<<<<<<
 *                 ppoint[0] = (pi + 0.5) * dds[0] + pLE[0]
 *                 for pj in range(pstart[1], pend[1] + 1):
 */
    __pyx_t_19 = ((__pyx_v_pend[0]) + 1);
    __pyx_t_20 = __pyx_t_19;
    for (__pyx_t_24 = (__pyx_v_pstart[0]); __pyx_t_24 < __pyx_t_20; __pyx_t_24+=1) {
      __pyx_v_pi = __pyx_t_24;

      /* "yt/utilities/lib/pixelization_routines.pyx":956
 *             # pixel in there.
 *             for pi in range(pstart[0], pend[0] + 1):
 *                 ppoint[0] = (pi + 0.5) * dds[0] + pLE[0]             # <<<<<<<<<<<<<<
 *                 for pj in range(pstart[1], pend[1] + 1):
 *                     ppoint[1] = (pj + 0.5) * dds[1] + pLE[1]
 */
      (__pyx_v_ppoint[0]) = (((__pyx_v_pi + 0.5) * (__pyx_v_dds[0])) + (__pyx_v_pLE[0]));

      /* "yt/utilities/lib/pixelization_routines.pyx":957
 *             for pi in range(pstart[0], pend[0] + 1):
 *                 ppoint[0] = (pi + 0.5) * dds[0] + pLE[0]
 *                 for pj in range(pstart[1], pend[1] + 1):             # <<<<<<<<<<<<<<
 *                     ppoint[1] = (pj + 0.5) * dds[1] + pLE[1]
 *                     for pk in range(pstart[2], pend[2] + 1):
 */
      __pyx_t_21 = ((__pyx_v_pend[1]) + 1);
      __pyx_t_25 = __pyx_t_21;
      for (__pyx_t_26 = (__pyx_v_pstart[1]); __pyx_t_26 < __pyx_t_25; __pyx_t_26+=1) {
        __pyx_v_pj = __pyx_t_26;

        /* "yt/utilities/lib/pixelization_routines.pyx":958
 *                 ppoint[0] = (pi + 0.5) * dds[0] + pLE[0]
 *                 for pj in range(pstart[1], pend[1] + 1):
 *                     ppoint[1] = (pj + 0.5) * dds[1] + pLE[1]             # <<<<<<<<<<<<<<
 *                     for pk in range(pstart[2], pend[2] + 1):
 *                         ppoint[2] = (pk + 0.5) * dds[2] + pLE[2]
 */
        (__pyx_v_ppoint[1]) = (((__pyx_v_pj + 0.5) * (__pyx_v_dds[1])) + (__pyx_v_pLE[1]));

        /* "yt/utilities/lib/pixelization_routines.pyx":959
 *                 for pj in range(pstart[1], pend[1] + 1):
 *                     ppoint[1] = (pj + 0.5) * dds[1] + pLE[1]
 *                     for pk in range(pstart[2], pend[2] + 1):             # <<<<<<<<<<<<<<
 *                         ppoint[2] = (pk + 0.5) * dds[2] + pLE[2]
 *                         # Now we just need to figure out if our ppoint is within
 */
        __pyx_t_27 = ((__pyx_v_pend[2]) + 1);
        __pyx_t_28 = __pyx_t_27;
        for (__pyx_t_29 = (__pyx_v_pstart[2]); __pyx_t_29 < __pyx_t_28; __pyx_t_29+=1) {
          __pyx_v_pk = __pyx_t_29;

          /* "yt/utilities/lib/pixelization_routines.pyx":960
 *                     ppoint[1] = (pj + 0.5) * dds[1] + pLE[1]
 *                     for pk in range(pstart[2], pend[2] + 1):
 *                         ppoint[2] = (pk + 0.5) * dds[2] + pLE[2]             # <<<<<<<<<<<<<<
 *                         # Now we just need to figure out if our ppoint is within
 *                         # our set of vertices.
 */
          (__pyx_v_ppoint[2]) = (((__pyx_v_pk + 0.5) * (__pyx_v_dds[2])) + (__pyx_v_pLE[2]));

          /* "yt/utilities/lib/pixelization_routines.pyx":963
 *                         # Now we just need to figure out if our ppoint is within
 *                         # our set of vertices.
 *                         sampler.map_real_to_unit(mapped_coord, vertices, ppoint)             # <<<<<<<<<<<<<<
 *                         if not sampler.check_inside(mapped_coord):
 *                             continue
 */
          ((struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_v_sampler->__pyx_vtab)->map_real_to_unit(__pyx_v_sampler, __pyx_v_mapped_coord, __pyx_v_vertices, __pyx_v_ppoint);

          /* "yt/utilities/lib/pixelization_routines.pyx":964
 *                         # our set of vertices.
 *                         sampler.map_real_to_unit(mapped_coord, vertices, ppoint)
 *                         if not sampler.check_inside(mapped_coord):             # <<<<<<<<<<<<<<
 *                             continue
 *                         if (num_field_vals == 1):
 */
          __pyx_t_10 = ((!(((struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_v_sampler->__pyx_vtab)->check_inside(__pyx_v_sampler, __pyx_v_mapped_coord) != 0)) != 0);
          if (__pyx_t_10) {

            /* "yt/utilities/lib/pixelization_routines.pyx":965
 *                         sampler.map_real_to_unit(mapped_coord, vertices, ppoint)
 *                         if not sampler.check_inside(mapped_coord):
 *                             continue             # <<<<<<<<<<<<<<
 *                         if (num_field_vals == 1):
 *                             img[pi, pj, pk] = field_vals[0]
 */
            goto __pyx_L49_continue;

            /* "yt/utilities/lib/pixelization_routines.pyx":964
 *                         # our set of vertices.
 *                         sampler.map_real_to_unit(mapped_coord, vertices, ppoint)
 *                         if not sampler.check_inside(mapped_coord):             # <<<<<<<<<<<<<<
 *                             continue
 *                         if (num_field_vals == 1):
 */
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":966
 *                         if not sampler.check_inside(mapped_coord):
 *                             continue
 *                         if (num_field_vals == 1):             # <<<<<<<<<<<<<<
 *                             img[pi, pj, pk] = field_vals[0]
 *                         else:
 */
          __pyx_t_10 = ((__pyx_v_num_field_vals == 1) != 0);
          if (__pyx_t_10) {

            /* "yt/utilities/lib/pixelization_routines.pyx":967
 *                             continue
 *                         if (num_field_vals == 1):
 *                             img[pi, pj, pk] = field_vals[0]             # <<<<<<<<<<<<<<
 *                         else:
 *                             img[pi, pj, pk] = sampler.sample_at_unit_point(mapped_coord,
 */
            __pyx_t_30 = __pyx_v_pi;
            __pyx_t_31 = __pyx_v_pj;
            __pyx_t_32 = __pyx_v_pk;
            if (__pyx_t_30 < 0) __pyx_t_30 += __pyx_pybuffernd_img.diminfo[0].shape;
            if (__pyx_t_31 < 0) __pyx_t_31 += __pyx_pybuffernd_img.diminfo[1].shape;
            if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_pybuffernd_img.diminfo[2].shape;
            *__Pyx_BufPtrStrided3d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_img.rcbuffer->pybuffer.buf, __pyx_t_30, __pyx_pybuffernd_img.diminfo[0].strides, __pyx_t_31, __pyx_pybuffernd_img.diminfo[1].strides, __pyx_t_32, __pyx_pybuffernd_img.diminfo[2].strides) = (__pyx_v_field_vals[0]);

            /* "yt/utilities/lib/pixelization_routines.pyx":966
 *                         if not sampler.check_inside(mapped_coord):
 *                             continue
 *                         if (num_field_vals == 1):             # <<<<<<<<<<<<<<
 *                             img[pi, pj, pk] = field_vals[0]
 *                         else:
 */
            goto __pyx_L52;
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":969
 *                             img[pi, pj, pk] = field_vals[0]
 *                         else:
 *                             img[pi, pj, pk] = sampler.sample_at_unit_point(mapped_coord,             # <<<<<<<<<<<<<<
 *                                                                            field_vals)
 *     free(vertices)
 */
          /*else*/ {

            /* "yt/utilities/lib/pixelization_routines.pyx":970
 *                         else:
 *                             img[pi, pj, pk] = sampler.sample_at_unit_point(mapped_coord,
 *                                                                            field_vals)             # <<<<<<<<<<<<<<
 *     free(vertices)
 *     free(field_vals)
 */
            __pyx_t_32 = __pyx_v_pi;
            __pyx_t_31 = __pyx_v_pj;
            __pyx_t_30 = __pyx_v_pk;
            if (__pyx_t_32 < 0) __pyx_t_32 += __pyx_pybuffernd_img.diminfo[0].shape;
            if (__pyx_t_31 < 0) __pyx_t_31 += __pyx_pybuffernd_img.diminfo[1].shape;
            if (__pyx_t_30 < 0) __pyx_t_30 += __pyx_pybuffernd_img.diminfo[2].shape;
            *__Pyx_BufPtrStrided3d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_img.rcbuffer->pybuffer.buf, __pyx_t_32, __pyx_pybuffernd_img.diminfo[0].strides, __pyx_t_31, __pyx_pybuffernd_img.diminfo[1].strides, __pyx_t_30, __pyx_pybuffernd_img.diminfo[2].strides) = ((struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_v_sampler->__pyx_vtab)->sample_at_unit_point(__pyx_v_sampler, __pyx_v_mapped_coord, __pyx_v_field_vals);
          }
          __pyx_L52:;
          __pyx_L49_continue:;
        }
      }
    }
    __pyx_L29_continue:;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":971
 *                             img[pi, pj, pk] = sampler.sample_at_unit_point(mapped_coord,
 *                                                                            field_vals)
 *     free(vertices)             # <<<<<<<<<<<<<<
 *     free(field_vals)
 *     return img
 */
  free(__pyx_v_vertices);

  /* "yt/utilities/lib/pixelization_routines.pyx":972
 *                                                                            field_vals)
 *     free(vertices)
 *     free(field_vals)             # <<<<<<<<<<<<<<
 *     return img
 * 
 */
  free(__pyx_v_field_vals);

  /* "yt/utilities/lib/pixelization_routines.pyx":973
 *     free(vertices)
 *     free(field_vals)
 *     return img             # <<<<<<<<<<<<<<
 * 
 * # used as a cache to avoid repeatedly creating
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_img));
  __pyx_r = ((PyObject *)__pyx_v_img);
  goto __pyx_L0;

  /* "yt/utilities/lib/pixelization_routines.pyx":837
 * 
 * 
 * def pixelize_element_mesh(np.ndarray[np.float64_t, ndim=2] coords,             # <<<<<<<<<<<<<<
 *                           np.ndarray[np.int64_t, ndim=2] conn,
 *                           buff_size,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_conn.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coords.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_field.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_img.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_element_mesh", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_conn.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coords.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_field.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_img.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_img);
  __Pyx_XDECREF((PyObject *)__pyx_v_sampler);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":986
 *     cdef np.float64_t q2_range, iq2_range
 * 
 *     def __init__(self, kernel_name):             # <<<<<<<<<<<<<<
 *         self.kernel_name = kernel_name
 *         self.kernel = get_kernel_func(kernel_name)
 */

/* Python wrapper */
static int __pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kernel_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_kernel_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kernel_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 986, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_kernel_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 986, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.SPHKernelInterpolationTable.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable___init__(((struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)__pyx_v_self), __pyx_v_kernel_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable___init__(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self, PyObject *__pyx_v_kernel_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":987
 * 
 *     def __init__(self, kernel_name):
 *         self.kernel_name = kernel_name             # <<<<<<<<<<<<<<
 *         self.kernel = get_kernel_func(kernel_name)
 *         self.populate_table()
 */
  __Pyx_INCREF(__pyx_v_kernel_name);
  __Pyx_GIVEREF(__pyx_v_kernel_name);
  __Pyx_GOTREF(__pyx_v_self->kernel_name);
  __Pyx_DECREF(__pyx_v_self->kernel_name);
  __pyx_v_self->kernel_name = __pyx_v_kernel_name;

  /* "yt/utilities/lib/pixelization_routines.pyx":988
 *     def __init__(self, kernel_name):
 *         self.kernel_name = kernel_name
 *         self.kernel = get_kernel_func(kernel_name)             # <<<<<<<<<<<<<<
 *         self.populate_table()
 * 
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_kernel_name))||((__pyx_v_kernel_name) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_kernel_name)->tp_name), 0))) __PYX_ERR(0, 988, __pyx_L1_error)
  __pyx_v_self->kernel = __pyx_f_2yt_8geometry_16particle_deposit_get_kernel_func(((PyObject*)__pyx_v_kernel_name));

  /* "yt/utilities/lib/pixelization_routines.pyx":989
 *         self.kernel_name = kernel_name
 *         self.kernel = get_kernel_func(kernel_name)
 *         self.populate_table()             # <<<<<<<<<<<<<<
 * 
 *     @cython.initializedcheck(False)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_populate_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":986
 *     cdef np.float64_t q2_range, iq2_range
 * 
 *     def __init__(self, kernel_name):             # <<<<<<<<<<<<<<
 *         self.kernel_name = kernel_name
 *         self.kernel = get_kernel_func(kernel_name)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.SPHKernelInterpolationTable.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":995
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
 *     cdef np.float64_t integrate_q2(self, np.float64_t q2) nogil:             # <<<<<<<<<<<<<<
 *         # See equation 30 of the SPLASH paper
 *         cdef int i
 */

static __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_integrate_q2(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self, __pyx_t_5numpy_float64_t __pyx_v_q2) {
  int __pyx_v_i;
  int __pyx_v_N;
  __pyx_t_5numpy_float64_t __pyx_v_qz;
  __pyx_t_5numpy_float64_t __pyx_v_R;
  __pyx_t_5numpy_float64_t __pyx_v_R0;
  __pyx_t_5numpy_float64_t __pyx_v_R1;
  __pyx_t_5numpy_float64_t __pyx_v_dR;
  __pyx_t_5numpy_float64_t __pyx_v_integral;
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "yt/utilities/lib/pixelization_routines.pyx":1001
 *         # And our R is always 1; note that our smoothing kernel functions
 *         # expect it to run from 0 .. 1, so we multiply the integrand by 2
 *         cdef int N = 200             # <<<<<<<<<<<<<<
 *         cdef np.float64_t qz
 *         cdef np.float64_t R = 1
 */
  __pyx_v_N = 0xC8;

  /* "yt/utilities/lib/pixelization_routines.pyx":1003
 *         cdef int N = 200
 *         cdef np.float64_t qz
 *         cdef np.float64_t R = 1             # <<<<<<<<<<<<<<
 *         cdef np.float64_t R0 = -math.sqrt(R*R-q2)
 *         cdef np.float64_t R1 = math.sqrt(R*R-q2)
 */
  __pyx_v_R = 1.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1004
 *         cdef np.float64_t qz
 *         cdef np.float64_t R = 1
 *         cdef np.float64_t R0 = -math.sqrt(R*R-q2)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t R1 = math.sqrt(R*R-q2)
 *         cdef np.float64_t dR = (R1-R0)/N
 */
  __pyx_v_R0 = (-sqrt(((__pyx_v_R * __pyx_v_R) - __pyx_v_q2)));

  /* "yt/utilities/lib/pixelization_routines.pyx":1005
 *         cdef np.float64_t R = 1
 *         cdef np.float64_t R0 = -math.sqrt(R*R-q2)
 *         cdef np.float64_t R1 = math.sqrt(R*R-q2)             # <<<<<<<<<<<<<<
 *         cdef np.float64_t dR = (R1-R0)/N
 *         # Set to our bounds
 */
  __pyx_v_R1 = sqrt(((__pyx_v_R * __pyx_v_R) - __pyx_v_q2));

  /* "yt/utilities/lib/pixelization_routines.pyx":1006
 *         cdef np.float64_t R0 = -math.sqrt(R*R-q2)
 *         cdef np.float64_t R1 = math.sqrt(R*R-q2)
 *         cdef np.float64_t dR = (R1-R0)/N             # <<<<<<<<<<<<<<
 *         # Set to our bounds
 *         cdef np.float64_t integral = 0.0
 */
  __pyx_v_dR = ((__pyx_v_R1 - __pyx_v_R0) / ((__pyx_t_5numpy_float64_t)__pyx_v_N));

  /* "yt/utilities/lib/pixelization_routines.pyx":1008
 *         cdef np.float64_t dR = (R1-R0)/N
 *         # Set to our bounds
 *         cdef np.float64_t integral = 0.0             # <<<<<<<<<<<<<<
 *         integral += self.kernel(math.sqrt(R0*R0 + q2))
 *         integral += self.kernel(math.sqrt(R1*R1 + q2))
 */
  __pyx_v_integral = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1009
 *         # Set to our bounds
 *         cdef np.float64_t integral = 0.0
 *         integral += self.kernel(math.sqrt(R0*R0 + q2))             # <<<<<<<<<<<<<<
 *         integral += self.kernel(math.sqrt(R1*R1 + q2))
 *         # We're going to manually conduct a trapezoidal integration
 */
  __pyx_v_integral = (__pyx_v_integral + __pyx_v_self->kernel(sqrt(((__pyx_v_R0 * __pyx_v_R0) + __pyx_v_q2))));

  /* "yt/utilities/lib/pixelization_routines.pyx":1010
 *         cdef np.float64_t integral = 0.0
 *         integral += self.kernel(math.sqrt(R0*R0 + q2))
 *         integral += self.kernel(math.sqrt(R1*R1 + q2))             # <<<<<<<<<<<<<<
 *         # We're going to manually conduct a trapezoidal integration
 *         for i in range(1, N):
 */
  __pyx_v_integral = (__pyx_v_integral + __pyx_v_self->kernel(sqrt(((__pyx_v_R1 * __pyx_v_R1) + __pyx_v_q2))));

  /* "yt/utilities/lib/pixelization_routines.pyx":1012
 *         integral += self.kernel(math.sqrt(R1*R1 + q2))
 *         # We're going to manually conduct a trapezoidal integration
 *         for i in range(1, N):             # <<<<<<<<<<<<<<
 *             qz = R0 + i * dR
 *             integral += 2.0*self.kernel(math.sqrt(qz*qz + q2))
 */
  __pyx_t_1 = __pyx_v_N;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 1; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/utilities/lib/pixelization_routines.pyx":1013
 *         # We're going to manually conduct a trapezoidal integration
 *         for i in range(1, N):
 *             qz = R0 + i * dR             # <<<<<<<<<<<<<<
 *             integral += 2.0*self.kernel(math.sqrt(qz*qz + q2))
 *         integral *= (R1-R0)/(2*N)
 */
    __pyx_v_qz = (__pyx_v_R0 + (__pyx_v_i * __pyx_v_dR));

    /* "yt/utilities/lib/pixelization_routines.pyx":1014
 *         for i in range(1, N):
 *             qz = R0 + i * dR
 *             integral += 2.0*self.kernel(math.sqrt(qz*qz + q2))             # <<<<<<<<<<<<<<
 *         integral *= (R1-R0)/(2*N)
 *         return integral
 */
    __pyx_v_integral = (__pyx_v_integral + (2.0 * __pyx_v_self->kernel(sqrt(((__pyx_v_qz * __pyx_v_qz) + __pyx_v_q2)))));
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1015
 *             qz = R0 + i * dR
 *             integral += 2.0*self.kernel(math.sqrt(qz*qz + q2))
 *         integral *= (R1-R0)/(2*N)             # <<<<<<<<<<<<<<
 *         return integral
 * 
 */
  __pyx_v_integral = (__pyx_v_integral * ((__pyx_v_R1 - __pyx_v_R0) / ((__pyx_t_5numpy_float64_t)(2 * __pyx_v_N))));

  /* "yt/utilities/lib/pixelization_routines.pyx":1016
 *             integral += 2.0*self.kernel(math.sqrt(qz*qz + q2))
 *         integral *= (R1-R0)/(2*N)
 *         return integral             # <<<<<<<<<<<<<<
 * 
 *     def populate_table(self):
 */
  __pyx_r = __pyx_v_integral;
  goto __pyx_L0;

  /* "yt/utilities/lib/pixelization_routines.pyx":995
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
 *     cdef np.float64_t integrate_q2(self, np.float64_t q2) nogil:             # <<<<<<<<<<<<<<
 *         # See equation 30 of the SPLASH paper
 *         cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1018
 *         return integral
 * 
 *     def populate_table(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         self.table = cvarray(format="d", shape=(TABLE_NVALS,),
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_3populate_table(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_3populate_table(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("populate_table (wrapper)", 0);
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_2populate_table(((struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_2populate_table(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self) {
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  long __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("populate_table", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1020
 *     def populate_table(self):
 *         cdef int i
 *         self.table = cvarray(format="d", shape=(TABLE_NVALS,),             # <<<<<<<<<<<<<<
 *                              itemsize=sizeof(np.float64_t))
 *         self.q2_vals = cvarray(format="d", shape=(TABLE_NVALS,),
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_format, __pyx_n_u_d) < 0) __PYX_ERR(0, 1020, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_2yt_9utilities_3lib_21pixelization_routines_TABLE_NVALS); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_shape, __pyx_t_3) < 0) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1021
 *         cdef int i
 *         self.table = cvarray(format="d", shape=(TABLE_NVALS,),
 *                              itemsize=sizeof(np.float64_t))             # <<<<<<<<<<<<<<
 *         self.q2_vals = cvarray(format="d", shape=(TABLE_NVALS,),
 *                              itemsize=sizeof(np.float64_t))
 */
  __pyx_t_3 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_5numpy_float64_t))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_itemsize, __pyx_t_3) < 0) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1020
 *     def populate_table(self):
 *         cdef int i
 *         self.table = cvarray(format="d", shape=(TABLE_NVALS,),             # <<<<<<<<<<<<<<
 *                              itemsize=sizeof(np.float64_t))
 *         self.q2_vals = cvarray(format="d", shape=(TABLE_NVALS,),
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_dc_nn___pyx_t_5numpy_float64_t(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->table, 0);
  __pyx_v_self->table = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1022
 *         self.table = cvarray(format="d", shape=(TABLE_NVALS,),
 *                              itemsize=sizeof(np.float64_t))
 *         self.q2_vals = cvarray(format="d", shape=(TABLE_NVALS,),             # <<<<<<<<<<<<<<
 *                              itemsize=sizeof(np.float64_t))
 *         # We run from 0 to 1 here over R
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_format, __pyx_n_u_d) < 0) __PYX_ERR(0, 1022, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_2yt_9utilities_3lib_21pixelization_routines_TABLE_NVALS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_shape, __pyx_t_2) < 0) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1023
 *                              itemsize=sizeof(np.float64_t))
 *         self.q2_vals = cvarray(format="d", shape=(TABLE_NVALS,),
 *                              itemsize=sizeof(np.float64_t))             # <<<<<<<<<<<<<<
 *         # We run from 0 to 1 here over R
 *         for i in range(TABLE_NVALS):
 */
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((sizeof(__pyx_t_5numpy_float64_t))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_itemsize, __pyx_t_2) < 0) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1022
 *         self.table = cvarray(format="d", shape=(TABLE_NVALS,),
 *                              itemsize=sizeof(np.float64_t))
 *         self.q2_vals = cvarray(format="d", shape=(TABLE_NVALS,),             # <<<<<<<<<<<<<<
 *                              itemsize=sizeof(np.float64_t))
 *         # We run from 0 to 1 here over R
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_dc_nn___pyx_t_5numpy_float64_t(__pyx_t_2, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 1022, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_XDEC_MEMVIEW(&__pyx_v_self->q2_vals, 0);
  __pyx_v_self->q2_vals = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1025
 *                              itemsize=sizeof(np.float64_t))
 *         # We run from 0 to 1 here over R
 *         for i in range(TABLE_NVALS):             # <<<<<<<<<<<<<<
 *             self.q2_vals[i] = i * 1.0/(TABLE_NVALS-1)
 *             self.table[i] = self.integrate_q2(self.q2_vals[i])
 */
  __pyx_t_5 = __pyx_v_2yt_9utilities_3lib_21pixelization_routines_TABLE_NVALS;
  __pyx_t_6 = __pyx_t_5;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "yt/utilities/lib/pixelization_routines.pyx":1026
 *         # We run from 0 to 1 here over R
 *         for i in range(TABLE_NVALS):
 *             self.q2_vals[i] = i * 1.0/(TABLE_NVALS-1)             # <<<<<<<<<<<<<<
 *             self.table[i] = self.integrate_q2(self.q2_vals[i])
 * 
 */
    __pyx_t_8 = (__pyx_v_i * 1.0);
    __pyx_t_9 = (__pyx_v_2yt_9utilities_3lib_21pixelization_routines_TABLE_NVALS - 1);
    if (unlikely(__pyx_t_9 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1026, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->q2_vals.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1026, __pyx_L1_error)}
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->q2_vals.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->q2_vals.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 1026, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_self->q2_vals.data) + __pyx_t_10)) )) = (__pyx_t_8 / ((double)__pyx_t_9));

    /* "yt/utilities/lib/pixelization_routines.pyx":1027
 *         for i in range(TABLE_NVALS):
 *             self.q2_vals[i] = i * 1.0/(TABLE_NVALS-1)
 *             self.table[i] = self.integrate_q2(self.q2_vals[i])             # <<<<<<<<<<<<<<
 * 
 *         self.q2_range = self.q2_vals[TABLE_NVALS-1] - self.q2_vals[0]
 */
    if (unlikely(!__pyx_v_self->q2_vals.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1027, __pyx_L1_error)}
    __pyx_t_10 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_10 < 0) {
      __pyx_t_10 += __pyx_v_self->q2_vals.shape[0];
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_10 >= __pyx_v_self->q2_vals.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 1027, __pyx_L1_error)
    }
    if (unlikely(!__pyx_v_self->table.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1027, __pyx_L1_error)}
    __pyx_t_12 = __pyx_v_i;
    __pyx_t_11 = -1;
    if (__pyx_t_12 < 0) {
      __pyx_t_12 += __pyx_v_self->table.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_11 = 0;
    } else if (unlikely(__pyx_t_12 >= __pyx_v_self->table.shape[0])) __pyx_t_11 = 0;
    if (unlikely(__pyx_t_11 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_11);
      __PYX_ERR(0, 1027, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_self->table.data) + __pyx_t_12)) )) = ((struct __pyx_vtabstruct_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)__pyx_v_self->__pyx_vtab)->integrate_q2(__pyx_v_self, (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_self->q2_vals.data) + __pyx_t_10)) ))));
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1029
 *             self.table[i] = self.integrate_q2(self.q2_vals[i])
 * 
 *         self.q2_range = self.q2_vals[TABLE_NVALS-1] - self.q2_vals[0]             # <<<<<<<<<<<<<<
 *         self.iq2_range = (TABLE_NVALS-1)/self.q2_range
 * 
 */
  if (unlikely(!__pyx_v_self->q2_vals.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1029, __pyx_L1_error)}
  __pyx_t_10 = (__pyx_v_2yt_9utilities_3lib_21pixelization_routines_TABLE_NVALS - 1);
  __pyx_t_5 = -1;
  if (__pyx_t_10 < 0) {
    __pyx_t_10 += __pyx_v_self->q2_vals.shape[0];
    if (unlikely(__pyx_t_10 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_10 >= __pyx_v_self->q2_vals.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1029, __pyx_L1_error)
  }
  if (unlikely(!__pyx_v_self->q2_vals.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1029, __pyx_L1_error)}
  __pyx_t_12 = 0;
  __pyx_t_5 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_v_self->q2_vals.shape[0];
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_5 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_v_self->q2_vals.shape[0])) __pyx_t_5 = 0;
  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    __PYX_ERR(0, 1029, __pyx_L1_error)
  }
  __pyx_v_self->q2_range = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_self->q2_vals.data) + __pyx_t_10)) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_self->q2_vals.data) + __pyx_t_12)) ))));

  /* "yt/utilities/lib/pixelization_routines.pyx":1030
 * 
 *         self.q2_range = self.q2_vals[TABLE_NVALS-1] - self.q2_vals[0]
 *         self.iq2_range = (TABLE_NVALS-1)/self.q2_range             # <<<<<<<<<<<<<<
 * 
 *     @cython.initializedcheck(False)
 */
  __pyx_t_9 = (__pyx_v_2yt_9utilities_3lib_21pixelization_routines_TABLE_NVALS - 1);
  if (unlikely(__pyx_v_self->q2_range == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1030, __pyx_L1_error)
  }
  __pyx_v_self->iq2_range = (((__pyx_t_5numpy_float64_t)__pyx_t_9) / __pyx_v_self->q2_range);

  /* "yt/utilities/lib/pixelization_routines.pyx":1018
 *         return integral
 * 
 *     def populate_table(self):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         self.table = cvarray(format="d", shape=(TABLE_NVALS,),
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.SPHKernelInterpolationTable.populate_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1036
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
 *     cdef inline np.float64_t interpolate(self, np.float64_t q2) nogil:             # <<<<<<<<<<<<<<
 *         cdef int index
 *         cdef np.float64_t F_interpolate
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_interpolate(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self, __pyx_t_5numpy_float64_t __pyx_v_q2) {
  int __pyx_v_index;
  __pyx_t_5numpy_float64_t __pyx_v_F_interpolate;
  __pyx_t_5numpy_float64_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;

  /* "yt/utilities/lib/pixelization_routines.pyx":1039
 *         cdef int index
 *         cdef np.float64_t F_interpolate
 *         index = <int>((q2 - self.q2_vals[0])*(self.iq2_range))             # <<<<<<<<<<<<<<
 *         if index >= TABLE_NVALS:
 *             return 0.0
 */
  __pyx_t_1 = 0;
  __pyx_v_index = ((int)((__pyx_v_q2 - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_self->q2_vals.data) + __pyx_t_1)) )))) * __pyx_v_self->iq2_range));

  /* "yt/utilities/lib/pixelization_routines.pyx":1040
 *         cdef np.float64_t F_interpolate
 *         index = <int>((q2 - self.q2_vals[0])*(self.iq2_range))
 *         if index >= TABLE_NVALS:             # <<<<<<<<<<<<<<
 *             return 0.0
 *         F_interpolate = self.table[index] + (
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_2yt_9utilities_3lib_21pixelization_routines_TABLE_NVALS) != 0);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1041
 *         index = <int>((q2 - self.q2_vals[0])*(self.iq2_range))
 *         if index >= TABLE_NVALS:
 *             return 0.0             # <<<<<<<<<<<<<<
 *         F_interpolate = self.table[index] + (
 *                 (self.table[index+1] - self.table[index])
 */
    __pyx_r = 0.0;
    goto __pyx_L0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1040
 *         cdef np.float64_t F_interpolate
 *         index = <int>((q2 - self.q2_vals[0])*(self.iq2_range))
 *         if index >= TABLE_NVALS:             # <<<<<<<<<<<<<<
 *             return 0.0
 *         F_interpolate = self.table[index] + (
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1042
 *         if index >= TABLE_NVALS:
 *             return 0.0
 *         F_interpolate = self.table[index] + (             # <<<<<<<<<<<<<<
 *                 (self.table[index+1] - self.table[index])
 *                *(q2 - self.q2_vals[index])*self.iq2_range)
 */
  __pyx_t_1 = __pyx_v_index;

  /* "yt/utilities/lib/pixelization_routines.pyx":1043
 *             return 0.0
 *         F_interpolate = self.table[index] + (
 *                 (self.table[index+1] - self.table[index])             # <<<<<<<<<<<<<<
 *                *(q2 - self.q2_vals[index])*self.iq2_range)
 *         return F_interpolate
 */
  __pyx_t_3 = (__pyx_v_index + 1);
  __pyx_t_4 = __pyx_v_index;

  /* "yt/utilities/lib/pixelization_routines.pyx":1044
 *         F_interpolate = self.table[index] + (
 *                 (self.table[index+1] - self.table[index])
 *                *(q2 - self.q2_vals[index])*self.iq2_range)             # <<<<<<<<<<<<<<
 *         return F_interpolate
 * 
 */
  __pyx_t_5 = __pyx_v_index;

  /* "yt/utilities/lib/pixelization_routines.pyx":1042
 *         if index >= TABLE_NVALS:
 *             return 0.0
 *         F_interpolate = self.table[index] + (             # <<<<<<<<<<<<<<
 *                 (self.table[index+1] - self.table[index])
 *                *(q2 - self.q2_vals[index])*self.iq2_range)
 */
  __pyx_v_F_interpolate = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_self->table.data) + __pyx_t_1)) ))) + ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_self->table.data) + __pyx_t_3)) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_self->table.data) + __pyx_t_4)) )))) * (__pyx_v_q2 - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_self->q2_vals.data) + __pyx_t_5)) ))))) * __pyx_v_self->iq2_range));

  /* "yt/utilities/lib/pixelization_routines.pyx":1045
 *                 (self.table[index+1] - self.table[index])
 *                *(q2 - self.q2_vals[index])*self.iq2_range)
 *         return F_interpolate             # <<<<<<<<<<<<<<
 * 
 *     def interpolate_array(self, np.float64_t[:] q2_vals):
 */
  __pyx_r = __pyx_v_F_interpolate;
  goto __pyx_L0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1036
 *     @cython.wraparound(False)
 *     @cython.cdivision(True)
 *     cdef inline np.float64_t interpolate(self, np.float64_t q2) nogil:             # <<<<<<<<<<<<<<
 *         cdef int index
 *         cdef np.float64_t F_interpolate
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1047
 *         return F_interpolate
 * 
 *     def interpolate_array(self, np.float64_t[:] q2_vals):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] ret = np.empty(q2_vals.shape[0])
 *         cdef int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_5interpolate_array(PyObject *__pyx_v_self, PyObject *__pyx_arg_q2_vals); /*proto*/
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_5interpolate_array(PyObject *__pyx_v_self, PyObject *__pyx_arg_q2_vals) {
  __Pyx_memviewslice __pyx_v_q2_vals = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("interpolate_array (wrapper)", 0);
  assert(__pyx_arg_q2_vals); {
    __pyx_v_q2_vals = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_arg_q2_vals, PyBUF_WRITABLE); if (unlikely(!__pyx_v_q2_vals.memview)) __PYX_ERR(0, 1047, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.SPHKernelInterpolationTable.interpolate_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_4interpolate_array(((struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)__pyx_v_self), __pyx_v_q2_vals);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_4interpolate_array(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self, __Pyx_memviewslice __pyx_v_q2_vals) {
  __Pyx_memviewslice __pyx_v_ret = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_memviewslice __pyx_t_5 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("interpolate_array", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1048
 * 
 *     def interpolate_array(self, np.float64_t[:] q2_vals):
 *         cdef np.float64_t[:] ret = np.empty(q2_vals.shape[0])             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(q2_vals.shape[0]):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t((__pyx_v_q2_vals.shape[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_5.memview)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ret = __pyx_t_5;
  __pyx_t_5.memview = NULL;
  __pyx_t_5.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1050
 *         cdef np.float64_t[:] ret = np.empty(q2_vals.shape[0])
 *         cdef int i
 *         for i in range(q2_vals.shape[0]):             # <<<<<<<<<<<<<<
 *             ret[i] = self.interpolate(q2_vals[i])
 *         return np.array(ret)
 */
  __pyx_t_6 = (__pyx_v_q2_vals.shape[0]);
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "yt/utilities/lib/pixelization_routines.pyx":1051
 *         cdef int i
 *         for i in range(q2_vals.shape[0]):
 *             ret[i] = self.interpolate(q2_vals[i])             # <<<<<<<<<<<<<<
 *         return np.array(ret)
 * 
 */
    __pyx_t_9 = __pyx_v_i;
    __pyx_t_10 = -1;
    if (__pyx_t_9 < 0) {
      __pyx_t_9 += __pyx_v_q2_vals.shape[0];
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_9 >= __pyx_v_q2_vals.shape[0])) __pyx_t_10 = 0;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 1051, __pyx_L1_error)
    }
    __pyx_t_11 = __pyx_v_i;
    __pyx_t_10 = -1;
    if (__pyx_t_11 < 0) {
      __pyx_t_11 += __pyx_v_ret.shape[0];
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 0;
    } else if (unlikely(__pyx_t_11 >= __pyx_v_ret.shape[0])) __pyx_t_10 = 0;
    if (unlikely(__pyx_t_10 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_10);
      __PYX_ERR(0, 1051, __pyx_L1_error)
    }
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_ret.data + __pyx_t_11 * __pyx_v_ret.strides[0]) )) = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_interpolate(__pyx_v_self, (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_q2_vals.data + __pyx_t_9 * __pyx_v_q2_vals.strides[0]) ))));
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1052
 *         for i in range(q2_vals.shape[0]):
 *             ret[i] = self.interpolate(q2_vals[i])
 *         return np.array(ret)             # <<<<<<<<<<<<<<
 * 
 * @cython.initializedcheck(False)
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_ret, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1047
 *         return F_interpolate
 * 
 *     def interpolate_array(self, np.float64_t[:] q2_vals):             # <<<<<<<<<<<<<<
 *         cdef np.float64_t[:] ret = np.empty(q2_vals.shape[0])
 *         cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_5, 1);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.SPHKernelInterpolationTable.interpolate_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_q2_vals, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_ret, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":980
 * 
 * cdef class SPHKernelInterpolationTable:
 *     cdef public object kernel_name             # <<<<<<<<<<<<<<
 *     cdef kernel_func kernel
 *     cdef np.float64_t[::1] table
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name___get__(((struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name___get__(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->kernel_name);
  __pyx_r = __pyx_v_self->kernel_name;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_2__set__(((struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_2__set__(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->kernel_name);
  __Pyx_DECREF(__pyx_v_self->kernel_name);
  __pyx_v_self->kernel_name = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_5__del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_4__del__(((struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_4__del__(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->kernel_name);
  __Pyx_DECREF(__pyx_v_self->kernel_name);
  __pyx_v_self->kernel_name = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_6__reduce_cython__(((struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.SPHKernelInterpolationTable.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_8__setstate_cython__(((struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.SPHKernelInterpolationTable.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1058
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_projection(             # <<<<<<<<<<<<<<
 *         np.float64_t[:, :] buff,
 *         any_float[:] posx,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_13pixelize_sph_kernel_projection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_13pixelize_sph_kernel_projection = {"pixelize_sph_kernel_projection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_13pixelize_sph_kernel_projection, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_13pixelize_sph_kernel_projection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_signatures = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED PyObject *__pyx_v_defaults = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_fused_cpdef (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_signatures,&__pyx_n_s_args,&__pyx_n_s_kwargs,&__pyx_n_s_defaults,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_signatures)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 1, 4, 4, 1); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kwargs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 1, 4, 4, 2); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_defaults)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 1, 4, 4, 3); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_fused_cpdef") < 0)) __PYX_ERR(0, 1058, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_signatures = values[0];
    __pyx_v_args = values[1];
    __pyx_v_kwargs = values[2];
    __pyx_v_defaults = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_fused_cpdef", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1058, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_12pixelize_sph_kernel_projection(__pyx_self, __pyx_v_signatures, __pyx_v_args, __pyx_v_kwargs, __pyx_v_defaults);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_12pixelize_sph_kernel_projection(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_signatures, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs, CYTHON_UNUSED PyObject *__pyx_v_defaults) {
  PyObject *__pyx_v_dest_sig = NULL;
  Py_ssize_t __pyx_v_i;
  PyTypeObject *__pyx_v_ndarray = 0;
  __Pyx_memviewslice __pyx_v_memslice;
  Py_ssize_t __pyx_v_itemsize;
  CYTHON_UNUSED int __pyx_v_dtype_signed;
  char __pyx_v_kind;
  PyObject *__pyx_v_arg = NULL;
  PyObject *__pyx_v_dtype = NULL;
  PyObject *__pyx_v_arg_base = NULL;
  PyObject *__pyx_v_candidates = NULL;
  PyObject *__pyx_v_sig = NULL;
  int __pyx_v_match_found;
  PyObject *__pyx_v_src_sig = NULL;
  PyObject *__pyx_v_dst_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  long __pyx_t_7;
  __Pyx_memviewslice __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  int __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pixelize_sph_kernel_projection", 0);
  __Pyx_INCREF(__pyx_v_kwargs);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyList_SET_ITEM(__pyx_t_1, 0, Py_None);
  __pyx_v_dest_sig = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_4) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {
    __Pyx_INCREF(Py_None);
    __Pyx_DECREF_SET(__pyx_v_kwargs, Py_None);
  }
  __pyx_t_1 = ((PyObject *)__Pyx_ImportNumPyArrayTypeIfAvailable()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ndarray = ((PyTypeObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_v_itemsize = -1L;
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1058, __pyx_L1_error)
  }
  __pyx_t_5 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1058, __pyx_L1_error)
  __pyx_t_2 = ((1 < __pyx_t_5) != 0);
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1058, __pyx_L1_error)
    }
    __pyx_t_1 = PyTuple_GET_ITEM(((PyObject*)__pyx_v_args), 1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  __pyx_t_3 = (__pyx_v_kwargs != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L7_bool_binop_done;
  }
  if (unlikely(__pyx_v_kwargs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1058, __pyx_L1_error)
  }
  __pyx_t_4 = (__Pyx_PyDict_ContainsTF(__pyx_n_s_posx, ((PyObject*)__pyx_v_kwargs), Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L7_bool_binop_done:;
  if (__pyx_t_2) {
    if (unlikely(__pyx_v_kwargs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1058, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_kwargs), __pyx_n_s_posx); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_arg = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  /*else*/ {
    if (unlikely(__pyx_v_args == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1058, __pyx_L1_error)
    }
    __pyx_t_5 = PyTuple_GET_SIZE(((PyObject*)__pyx_v_args)); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1058, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_int_8);
    __Pyx_GIVEREF(__pyx_int_8);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_int_8);
    __Pyx_INCREF(__pyx_n_s_s);
    __Pyx_GIVEREF(__pyx_n_s_s);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_n_s_s);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Expected_at_least_d_argument_s_g, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1058, __pyx_L1_error)
  }
  __pyx_L6:;
  while (1) {
    __pyx_t_2 = (__pyx_v_ndarray != ((PyTypeObject*)Py_None));
    __pyx_t_3 = (__pyx_t_2 != 0);
    if (__pyx_t_3) {
      __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_arg, __pyx_v_ndarray); 
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_v_dtype = __pyx_t_6;
        __pyx_t_6 = 0;
        goto __pyx_L12;
      }
      __pyx_t_2 = __pyx_memoryview_check(__pyx_v_arg); 
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_base); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_v_arg_base = __pyx_t_6;
        __pyx_t_6 = 0;
        __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_arg_base, __pyx_v_ndarray); 
        __pyx_t_2 = (__pyx_t_3 != 0);
        if (__pyx_t_2) {
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg_base, __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_v_dtype = __pyx_t_6;
          __pyx_t_6 = 0;
          goto __pyx_L13;
        }
        /*else*/ {
          __Pyx_INCREF(Py_None);
          __pyx_v_dtype = Py_None;
        }
        __pyx_L13:;
        goto __pyx_L12;
      }
      /*else*/ {
        __Pyx_INCREF(Py_None);
        __pyx_v_dtype = Py_None;
      }
      __pyx_L12:;
      __pyx_v_itemsize = -1L;
      __pyx_t_2 = (__pyx_v_dtype != Py_None);
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (__pyx_t_3) {
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_6); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_v_itemsize = __pyx_t_5;
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_dtype, __pyx_n_s_kind); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_PyObject_Ord(__pyx_t_6); if (unlikely(__pyx_t_7 == ((long)(long)(Py_UCS4)-1))) __PYX_ERR(0, 1058, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_v_kind = __pyx_t_7;
        __pyx_v_dtype_signed = (__pyx_v_kind == 'i');
        switch (__pyx_v_kind) {
          case 'i':
          case 'u':
          break;
          case 'f':
          __pyx_t_2 = (((sizeof(__pyx_t_5numpy_float32_t)) == __pyx_v_itemsize) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_3 = __pyx_t_2;
            goto __pyx_L16_bool_binop_done;
          }
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_ndim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_6); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_2 = ((((Py_ssize_t)__pyx_t_5) == 1) != 0);
          __pyx_t_3 = __pyx_t_2;
          __pyx_L16_bool_binop_done:;
          if (__pyx_t_3) {
            if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_float32_t, long, 1, __Pyx_PyInt_From_long, 1, 0, 0) < 0)) __PYX_ERR(0, 1058, __pyx_L1_error)
            goto __pyx_L10_break;
          }
          __pyx_t_2 = (((sizeof(__pyx_t_5numpy_float64_t)) == __pyx_v_itemsize) != 0);
          if (__pyx_t_2) {
          } else {
            __pyx_t_3 = __pyx_t_2;
            goto __pyx_L19_bool_binop_done;
          }
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_arg, __pyx_n_s_ndim); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_6); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_2 = ((((Py_ssize_t)__pyx_t_5) == 1) != 0);
          __pyx_t_3 = __pyx_t_2;
          __pyx_L19_bool_binop_done:;
          if (__pyx_t_3) {
            if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_float64_t, long, 1, __Pyx_PyInt_From_long, 1, 0, 0) < 0)) __PYX_ERR(0, 1058, __pyx_L1_error)
            goto __pyx_L10_break;
          }
          break;
          case 'c':
          break;
          case 'O':
          break;
          default: break;
        }
      }
    }
    __pyx_t_2 = ((__pyx_v_itemsize == -1L) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L22_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_itemsize == (sizeof(__pyx_t_5numpy_float32_t))) != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L22_bool_binop_done:;
    if (__pyx_t_3) {
      __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(__pyx_v_arg, 0); 
      __pyx_v_memslice = __pyx_t_8;
      __pyx_t_3 = (__pyx_v_memslice.memview != 0);
      if (__pyx_t_3) {
        __PYX_XDEC_MEMVIEW((&__pyx_v_memslice), 1); 
        if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_float32_t, long, 1, __Pyx_PyInt_From_long, 1, 0, 0) < 0)) __PYX_ERR(0, 1058, __pyx_L1_error)
        goto __pyx_L10_break;
      }
      /*else*/ {
        PyErr_Clear(); 
      }
    }
    __pyx_t_2 = ((__pyx_v_itemsize == -1L) != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_3 = __pyx_t_2;
      goto __pyx_L26_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_itemsize == (sizeof(__pyx_t_5numpy_float64_t))) != 0);
    __pyx_t_3 = __pyx_t_2;
    __pyx_L26_bool_binop_done:;
    if (__pyx_t_3) {
      __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_v_arg, 0); 
      __pyx_v_memslice = __pyx_t_8;
      __pyx_t_3 = (__pyx_v_memslice.memview != 0);
      if (__pyx_t_3) {
        __PYX_XDEC_MEMVIEW((&__pyx_v_memslice), 1); 
        if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, __pyx_n_s_float64_t, long, 1, __Pyx_PyInt_From_long, 1, 0, 0) < 0)) __PYX_ERR(0, 1058, __pyx_L1_error)
        goto __pyx_L10_break;
      }
      /*else*/ {
        PyErr_Clear(); 
      }
    }
    if (unlikely(__Pyx_SetItemInt(__pyx_v_dest_sig, 0, Py_None, long, 1, __Pyx_PyInt_From_long, 1, 0, 0) < 0)) __PYX_ERR(0, 1058, __pyx_L1_error)
    goto __pyx_L10_break;
  }
  __pyx_L10_break:;
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_candidates = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_signatures == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1058, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_dict_iterator(((PyObject*)__pyx_v_signatures), 1, ((PyObject *)NULL), (&__pyx_t_9), (&__pyx_t_10)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __pyx_t_6 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_11 = __Pyx_dict_iter_next(__pyx_t_6, __pyx_t_9, &__pyx_t_5, &__pyx_t_1, NULL, NULL, __pyx_t_10);
    if (unlikely(__pyx_t_11 == 0)) break;
    if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_sig, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_v_match_found = 0;
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_sig, __pyx_n_s_strip); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_14 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
      }
    }
    __pyx_t_12 = (__pyx_t_14) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_14, __pyx_kp_s_) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_kp_s_);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_split); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_13);
      if (likely(__pyx_t_12)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
        __Pyx_INCREF(__pyx_t_12);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_13, function);
      }
    }
    __pyx_t_1 = (__pyx_t_12) ? __Pyx_PyObject_Call2Args(__pyx_t_13, __pyx_t_12, __pyx_kp_s__2) : __Pyx_PyObject_CallOneArg(__pyx_t_13, __pyx_kp_s__2);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF_SET(__pyx_v_src_sig, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_15 = PyList_GET_SIZE(__pyx_v_dest_sig); if (unlikely(__pyx_t_15 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1058, __pyx_L1_error)
    __pyx_t_16 = __pyx_t_15;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_i = __pyx_t_17;
      __pyx_t_1 = PyList_GET_ITEM(__pyx_v_dest_sig, __pyx_v_i);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_dst_type, __pyx_t_1);
      __pyx_t_1 = 0;
      __pyx_t_3 = (__pyx_v_dst_type != Py_None);
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (__pyx_t_2) {
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_src_sig, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_13 = PyObject_RichCompare(__pyx_t_1, __pyx_v_dst_type, Py_EQ); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1058, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1058, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        if (__pyx_t_2) {
          __pyx_v_match_found = 1;
          goto __pyx_L34;
        }
        /*else*/ {
          __pyx_v_match_found = 0;
          goto __pyx_L32_break;
        }
        __pyx_L34:;
      }
    }
    __pyx_L32_break:;
    __pyx_t_2 = (__pyx_v_match_found != 0);
    if (__pyx_t_2) {
      __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_candidates, __pyx_v_sig); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(0, 1058, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = (PyList_GET_SIZE(__pyx_v_candidates) != 0);
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1058, __pyx_L1_error)
  }
  __pyx_t_9 = PyList_GET_SIZE(__pyx_v_candidates); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1058, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_9 > 1) != 0);
  if (__pyx_t_3) {
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(0, 1058, __pyx_L1_error)
  }
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    if (unlikely(__pyx_v_signatures == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1058, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_PyDict_GetItem(((PyObject*)__pyx_v_signatures), PyList_GET_ITEM(__pyx_v_candidates, 0)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1058, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.__pyx_fused_cpdef", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dest_sig);
  __Pyx_XDECREF(__pyx_v_ndarray);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XDECREF(__pyx_v_dtype);
  __Pyx_XDECREF(__pyx_v_arg_base);
  __Pyx_XDECREF(__pyx_v_candidates);
  __Pyx_XDECREF(__pyx_v_sig);
  __Pyx_XDECREF(__pyx_v_src_sig);
  __Pyx_XDECREF(__pyx_v_dst_type);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_60__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_self)->__pyx_arg_check_period); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_self)->__pyx_arg_kernel_name);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_self)->__pyx_arg_kernel_name);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_self)->__pyx_arg_kernel_name);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_self)->__pyx_arg_weight_field);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_self)->__pyx_arg_weight_field);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_self)->__pyx_arg_weight_field);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_self)->__pyx_arg_period);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_self)->__pyx_arg_period);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_self)->__pyx_arg_period);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_1, 1, Py_None);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_0__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_43pixelize_sph_kernel_projection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_0__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_43pixelize_sph_kernel_projection = {"__pyx_fuse_0pixelize_sph_kernel_projection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_0__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_43pixelize_sph_kernel_projection, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_fuse_0__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_43pixelize_sph_kernel_projection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_buff = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_posx = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_posy = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_hsml = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pmass = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdens = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_quantity_to_smooth = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_bounds = 0;
  PyObject *__pyx_v_kernel_name = 0;
  PyObject *__pyx_v_weight_field = 0;
  int __pyx_v_check_period;
  PyObject *__pyx_v_period = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pixelize_sph_kernel_projection (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buff,&__pyx_n_s_posx,&__pyx_n_s_posy,&__pyx_n_s_hsml,&__pyx_n_s_pmass,&__pyx_n_s_pdens,&__pyx_n_s_quantity_to_smooth,&__pyx_n_s_bounds,&__pyx_n_s_kernel_name,&__pyx_n_s_weight_field,&__pyx_n_s_check_period,&__pyx_n_s_period,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    __pyx_defaults6 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_self);
    values[8] = __pyx_dynamic_args->__pyx_arg_kernel_name;
    values[9] = __pyx_dynamic_args->__pyx_arg_weight_field;
    values[11] = __pyx_dynamic_args->__pyx_arg_period;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_posx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 1); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_posy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 2); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hsml)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 3); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pmass)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 4); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 5); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quantity_to_smooth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 6); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 7); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kernel_name);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weight_field);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_check_period);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_period);
          if (value) { values[11] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pixelize_sph_kernel_projection") < 0)) __PYX_ERR(0, 1058, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buff = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_buff.memview)) __PYX_ERR(0, 1059, __pyx_L3_error)
    __pyx_v_posx = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_posx.memview)) __PYX_ERR(0, 1060, __pyx_L3_error)
    __pyx_v_posy = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_posy.memview)) __PYX_ERR(0, 1061, __pyx_L3_error)
    __pyx_v_hsml = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_hsml.memview)) __PYX_ERR(0, 1062, __pyx_L3_error)
    __pyx_v_pmass = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pmass.memview)) __PYX_ERR(0, 1063, __pyx_L3_error)
    __pyx_v_pdens = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdens.memview)) __PYX_ERR(0, 1064, __pyx_L3_error)
    __pyx_v_quantity_to_smooth = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_quantity_to_smooth.memview)) __PYX_ERR(0, 1065, __pyx_L3_error)
    __pyx_v_bounds = values[7];
    __pyx_v_kernel_name = values[8];
    __pyx_v_weight_field = values[9];
    if (values[10]) {
      __pyx_v_check_period = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_check_period == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1069, __pyx_L3_error)
    } else {
      __pyx_v_check_period = __pyx_dynamic_args->__pyx_arg_check_period;
    }
    __pyx_v_period = values[11];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1058, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_sph_kernel_projection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_42pixelize_sph_kernel_projection(__pyx_self, __pyx_v_buff, __pyx_v_posx, __pyx_v_posy, __pyx_v_hsml, __pyx_v_pmass, __pyx_v_pdens, __pyx_v_quantity_to_smooth, __pyx_v_bounds, __pyx_v_kernel_name, __pyx_v_weight_field, __pyx_v_check_period, __pyx_v_period);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_42pixelize_sph_kernel_projection(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_posx, __Pyx_memviewslice __pyx_v_posy, __Pyx_memviewslice __pyx_v_hsml, __Pyx_memviewslice __pyx_v_pmass, __Pyx_memviewslice __pyx_v_pdens, __Pyx_memviewslice __pyx_v_quantity_to_smooth, PyObject *__pyx_v_bounds, PyObject *__pyx_v_kernel_name, PyObject *__pyx_v_weight_field, int __pyx_v_check_period, PyObject *__pyx_v_period) {
  __pyx_t_5numpy_intp_t __pyx_v_xsize;
  __pyx_t_5numpy_intp_t __pyx_v_ysize;
  __pyx_t_5numpy_float64_t __pyx_v_x_min;
  __pyx_t_5numpy_float64_t __pyx_v_x_max;
  __pyx_t_5numpy_float64_t __pyx_v_y_min;
  __pyx_t_5numpy_float64_t __pyx_v_y_max;
  __pyx_t_5numpy_float64_t __pyx_v_prefactor_j;
  __pyx_t_5numpy_int64_t __pyx_v_xi;
  __pyx_t_5numpy_int64_t __pyx_v_yi;
  __pyx_t_5numpy_int64_t __pyx_v_x0;
  __pyx_t_5numpy_int64_t __pyx_v_x1;
  __pyx_t_5numpy_int64_t __pyx_v_y0;
  __pyx_t_5numpy_int64_t __pyx_v_y1;
  __pyx_t_5numpy_int64_t __pyx_v_xxi;
  __pyx_t_5numpy_int64_t __pyx_v_yyi;
  __pyx_t_5numpy_float64_t __pyx_v_q_ij2;
  __pyx_t_5numpy_float64_t __pyx_v_posx_diff;
  __pyx_t_5numpy_float64_t __pyx_v_posy_diff;
  __pyx_t_5numpy_float64_t __pyx_v_ih_j2;
  __pyx_t_5numpy_float64_t __pyx_v_x;
  __pyx_t_5numpy_float64_t __pyx_v_y;
  __pyx_t_5numpy_float64_t __pyx_v_dx;
  __pyx_t_5numpy_float64_t __pyx_v_dy;
  __pyx_t_5numpy_float64_t __pyx_v_idx;
  __pyx_t_5numpy_float64_t __pyx_v_idy;
  __pyx_t_5numpy_float64_t __pyx_v_h_j2;
  __pyx_t_5numpy_float64_t __pyx_v_px;
  __pyx_t_5numpy_float64_t __pyx_v_py;
  __pyx_t_5numpy_float64_t __pyx_v_period_x;
  __pyx_t_5numpy_float64_t __pyx_v_period_y;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_ii;
  int __pyx_v_jj;
  __Pyx_memviewslice __pyx_v__weight_field = { 0, 0, { 0 }, { 0 }, { 0 } };
  int *__pyx_v_xiter;
  int *__pyx_v_yiter;
  __pyx_t_5numpy_float64_t *__pyx_v_xiterv;
  __pyx_t_5numpy_float64_t *__pyx_v_yiterv;
  struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_itab = 0;
  __pyx_t_5numpy_float64_t *__pyx_v_local_buff;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_memviewslice __pyx_t_3 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_5numpy_float64_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __pyx_t_5numpy_intp_t __pyx_t_9;
  __pyx_t_5numpy_intp_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  __pyx_t_5numpy_int64_t __pyx_t_19;
  __pyx_t_5numpy_int64_t __pyx_t_20;
  __pyx_t_5numpy_int64_t __pyx_t_21;
  __pyx_t_5numpy_int64_t __pyx_t_22;
  __pyx_t_5numpy_int64_t __pyx_t_23;
  __pyx_t_5numpy_int64_t __pyx_t_24;
  __pyx_t_5numpy_intp_t __pyx_t_25;
  __pyx_t_5numpy_intp_t __pyx_t_26;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0pixelize_sph_kernel_projection", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1077
 *     cdef np.float64_t q_ij2, posx_diff, posy_diff, ih_j2
 *     cdef np.float64_t x, y, dx, dy, idx, idy, h_j2, px, py
 *     cdef np.float64_t period_x = 0, period_y = 0             # <<<<<<<<<<<<<<
 *     cdef int i, j, ii, jj
 *     cdef np.float64_t[:] _weight_field
 */
  __pyx_v_period_x = 0.0;
  __pyx_v_period_y = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1085
 *     cdef np.float64_t * yiterv
 * 
 *     if weight_field is not None:             # <<<<<<<<<<<<<<
 *         _weight_field = weight_field
 * 
 */
  __pyx_t_1 = (__pyx_v_weight_field != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1086
 * 
 *     if weight_field is not None:
 *         _weight_field = weight_field             # <<<<<<<<<<<<<<
 * 
 *     if period is not None:
 */
    __pyx_t_3 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_v_weight_field, PyBUF_WRITABLE); if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(0, 1086, __pyx_L1_error)
    __pyx_v__weight_field = __pyx_t_3;
    __pyx_t_3.memview = NULL;
    __pyx_t_3.data = NULL;

    /* "yt/utilities/lib/pixelization_routines.pyx":1085
 *     cdef np.float64_t * yiterv
 * 
 *     if weight_field is not None:             # <<<<<<<<<<<<<<
 *         _weight_field = weight_field
 * 
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1088
 *         _weight_field = weight_field
 * 
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  __pyx_t_2 = (__pyx_v_period != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1089
 * 
 *     if period is not None:
 *         period_x = period[0]             # <<<<<<<<<<<<<<
 *         period_y = period[1]
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_period, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1089, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1089, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_period_x = __pyx_t_5;

    /* "yt/utilities/lib/pixelization_routines.pyx":1090
 *     if period is not None:
 *         period_x = period[0]
 *         period_y = period[1]             # <<<<<<<<<<<<<<
 * 
 *     # we find the x and y range over which we have pixels and we find how many
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_period, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1090, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_period_y = __pyx_t_5;

    /* "yt/utilities/lib/pixelization_routines.pyx":1088
 *         _weight_field = weight_field
 * 
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1094
 *     # we find the x and y range over which we have pixels and we find how many
 *     # pixels we have in each dimension
 *     xsize, ysize = buff.shape[0], buff.shape[1]             # <<<<<<<<<<<<<<
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 */
  __pyx_t_6 = (__pyx_v_buff.shape[0]);
  __pyx_t_7 = (__pyx_v_buff.shape[1]);
  __pyx_v_xsize = __pyx_t_6;
  __pyx_v_ysize = __pyx_t_7;

  /* "yt/utilities/lib/pixelization_routines.pyx":1095
 *     # pixels we have in each dimension
 *     xsize, ysize = buff.shape[0], buff.shape[1]
 *     x_min = bounds[0]             # <<<<<<<<<<<<<<
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_x_min = __pyx_t_5;

  /* "yt/utilities/lib/pixelization_routines.pyx":1096
 *     xsize, ysize = buff.shape[0], buff.shape[1]
 *     x_min = bounds[0]
 *     x_max = bounds[1]             # <<<<<<<<<<<<<<
 *     y_min = bounds[2]
 *     y_max = bounds[3]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_bounds, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_x_max = __pyx_t_5;

  /* "yt/utilities/lib/pixelization_routines.pyx":1097
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 *     y_min = bounds[2]             # <<<<<<<<<<<<<<
 *     y_max = bounds[3]
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_bounds, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_y_min = __pyx_t_5;

  /* "yt/utilities/lib/pixelization_routines.pyx":1098
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 *     y_max = bounds[3]             # <<<<<<<<<<<<<<
 * 
 *     dx = (x_max - x_min) / xsize
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_bounds, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_y_max = __pyx_t_5;

  /* "yt/utilities/lib/pixelization_routines.pyx":1100
 *     y_max = bounds[3]
 * 
 *     dx = (x_max - x_min) / xsize             # <<<<<<<<<<<<<<
 *     dy = (y_max - y_min) / ysize
 * 
 */
  __pyx_v_dx = ((__pyx_v_x_max - __pyx_v_x_min) / ((__pyx_t_5numpy_float64_t)__pyx_v_xsize));

  /* "yt/utilities/lib/pixelization_routines.pyx":1101
 * 
 *     dx = (x_max - x_min) / xsize
 *     dy = (y_max - y_min) / ysize             # <<<<<<<<<<<<<<
 * 
 *     idx = 1.0/dx
 */
  __pyx_v_dy = ((__pyx_v_y_max - __pyx_v_y_min) / ((__pyx_t_5numpy_float64_t)__pyx_v_ysize));

  /* "yt/utilities/lib/pixelization_routines.pyx":1103
 *     dy = (y_max - y_min) / ysize
 * 
 *     idx = 1.0/dx             # <<<<<<<<<<<<<<
 *     idy = 1.0/dy
 * 
 */
  __pyx_v_idx = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_dx);

  /* "yt/utilities/lib/pixelization_routines.pyx":1104
 * 
 *     idx = 1.0/dx
 *     idy = 1.0/dy             # <<<<<<<<<<<<<<
 * 
 *     if kernel_name not in kernel_tables:
 */
  __pyx_v_idy = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_dy);

  /* "yt/utilities/lib/pixelization_routines.pyx":1106
 *     idy = 1.0/dy
 * 
 *     if kernel_name not in kernel_tables:             # <<<<<<<<<<<<<<
 *         kernel_tables[kernel_name] = SPHKernelInterpolationTable(kernel_name)
 *     cdef SPHKernelInterpolationTable itab = kernel_tables[kernel_name]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_kernel_tables); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_kernel_name, __pyx_t_4, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1107
 * 
 *     if kernel_name not in kernel_tables:
 *         kernel_tables[kernel_name] = SPHKernelInterpolationTable(kernel_name)             # <<<<<<<<<<<<<<
 *     cdef SPHKernelInterpolationTable itab = kernel_tables[kernel_name]
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable), __pyx_v_kernel_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_kernel_tables); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(PyObject_SetItem(__pyx_t_8, __pyx_v_kernel_name, __pyx_t_4) < 0)) __PYX_ERR(0, 1107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1106
 *     idy = 1.0/dy
 * 
 *     if kernel_name not in kernel_tables:             # <<<<<<<<<<<<<<
 *         kernel_tables[kernel_name] = SPHKernelInterpolationTable(kernel_name)
 *     cdef SPHKernelInterpolationTable itab = kernel_tables[kernel_name]
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1108
 *     if kernel_name not in kernel_tables:
 *         kernel_tables[kernel_name] = SPHKernelInterpolationTable(kernel_name)
 *     cdef SPHKernelInterpolationTable itab = kernel_tables[kernel_name]             # <<<<<<<<<<<<<<
 * 
 *     with nogil, parallel():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_kernel_tables); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_kernel_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable))))) __PYX_ERR(0, 1108, __pyx_L1_error)
  __pyx_v_itab = ((struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1110
 *     cdef SPHKernelInterpolationTable itab = kernel_tables[kernel_name]
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         # loop through every particle
 *         # NOTE: this loop can be quite time consuming. However it is easily
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
            PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
            int __pyx_parallel_why;
            __pyx_parallel_why = 0;
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel private(__pyx_v_i, __pyx_v_local_buff, __pyx_v_xiter, __pyx_v_xiterv, __pyx_v_xxi, __pyx_v_yiter, __pyx_v_yiterv, __pyx_v_yyi) reduction(*:__pyx_v_prefactor_j) private(__pyx_t_1, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_2, __pyx_t_20, __pyx_t_21, __pyx_t_22, __pyx_t_23, __pyx_t_24, __pyx_t_25, __pyx_t_26, __pyx_t_6, __pyx_t_7, __pyx_t_9) private(__pyx_filename, __pyx_lineno, __pyx_clineno) shared(__pyx_parallel_why, __pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb)
            #endif /* _OPENMP */
            {
                #ifdef _OPENMP
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                Py_BEGIN_ALLOW_THREADS
                #endif /* _OPENMP */
                /* Initialize private variables to invalid values */
                __pyx_v_i = ((int)0xbad0bad0);
                __pyx_v_local_buff = ((__pyx_t_5numpy_float64_t *)1);
                __pyx_v_xiter = ((int *)1);
                __pyx_v_xiterv = ((__pyx_t_5numpy_float64_t *)1);
                __pyx_v_xxi = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                __pyx_v_yiter = ((int *)1);
                __pyx_v_yiterv = ((__pyx_t_5numpy_float64_t *)1);
                __pyx_v_yyi = ((__pyx_t_5numpy_int64_t)0xbad0bad0);

                /* "yt/utilities/lib/pixelization_routines.pyx":1126
 *         # intermediate results.
 * 
 *         local_buff = <np.float64_t *> malloc(sizeof(np.float64_t) * xsize * ysize)             # <<<<<<<<<<<<<<
 *         xiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 */
                __pyx_v_local_buff = ((__pyx_t_5numpy_float64_t *)malloc((((sizeof(__pyx_t_5numpy_float64_t)) * __pyx_v_xsize) * __pyx_v_ysize)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1127
 * 
 *         local_buff = <np.float64_t *> malloc(sizeof(np.float64_t) * xsize * ysize)
 *         xiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)             # <<<<<<<<<<<<<<
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         xiter = <int *> malloc(sizeof(int) * 2)
 */
                __pyx_v_xiterv = ((__pyx_t_5numpy_float64_t *)malloc(((sizeof(__pyx_t_5numpy_float64_t)) * 2)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1128
 *         local_buff = <np.float64_t *> malloc(sizeof(np.float64_t) * xsize * ysize)
 *         xiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)             # <<<<<<<<<<<<<<
 *         xiter = <int *> malloc(sizeof(int) * 2)
 *         yiter = <int *> malloc(sizeof(int) * 2)
 */
                __pyx_v_yiterv = ((__pyx_t_5numpy_float64_t *)malloc(((sizeof(__pyx_t_5numpy_float64_t)) * 2)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1129
 *         xiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         xiter = <int *> malloc(sizeof(int) * 2)             # <<<<<<<<<<<<<<
 *         yiter = <int *> malloc(sizeof(int) * 2)
 *         xiter[0] = yiter[0] = 0
 */
                __pyx_v_xiter = ((int *)malloc(((sizeof(int)) * 2)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1130
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         xiter = <int *> malloc(sizeof(int) * 2)
 *         yiter = <int *> malloc(sizeof(int) * 2)             # <<<<<<<<<<<<<<
 *         xiter[0] = yiter[0] = 0
 *         xiterv[0] = yiterv[0] = 0.0
 */
                __pyx_v_yiter = ((int *)malloc(((sizeof(int)) * 2)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1131
 *         xiter = <int *> malloc(sizeof(int) * 2)
 *         yiter = <int *> malloc(sizeof(int) * 2)
 *         xiter[0] = yiter[0] = 0             # <<<<<<<<<<<<<<
 *         xiterv[0] = yiterv[0] = 0.0
 *         for i in range(xsize * ysize):
 */
                (__pyx_v_xiter[0]) = 0;
                (__pyx_v_yiter[0]) = 0;

                /* "yt/utilities/lib/pixelization_routines.pyx":1132
 *         yiter = <int *> malloc(sizeof(int) * 2)
 *         xiter[0] = yiter[0] = 0
 *         xiterv[0] = yiterv[0] = 0.0             # <<<<<<<<<<<<<<
 *         for i in range(xsize * ysize):
 *             local_buff[i] = 0.0
 */
                (__pyx_v_xiterv[0]) = 0.0;
                (__pyx_v_yiterv[0]) = 0.0;

                /* "yt/utilities/lib/pixelization_routines.pyx":1133
 *         xiter[0] = yiter[0] = 0
 *         xiterv[0] = yiterv[0] = 0.0
 *         for i in range(xsize * ysize):             # <<<<<<<<<<<<<<
 *             local_buff[i] = 0.0
 * 
 */
                __pyx_t_9 = (__pyx_v_xsize * __pyx_v_ysize);
                __pyx_t_10 = __pyx_t_9;
                for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
                  __pyx_v_i = __pyx_t_11;

                  /* "yt/utilities/lib/pixelization_routines.pyx":1134
 *         xiterv[0] = yiterv[0] = 0.0
 *         for i in range(xsize * ysize):
 *             local_buff[i] = 0.0             # <<<<<<<<<<<<<<
 * 
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 */
                  (__pyx_v_local_buff[__pyx_v_i]) = 0.0;
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":1136
 *             local_buff[i] = 0.0
 * 
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):             # <<<<<<<<<<<<<<
 *             if j % 100000 == 0:
 *                 with gil:
 */
                __pyx_t_7 = (__pyx_v_posx.shape[0]);
                if ((1 == 0)) abort();
                {
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp0 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp1 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    int __pyx_parallel_temp2 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp3 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp4 = ((int)0xbad0bad0);
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp5 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp6 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp7 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp8 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp9 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp10 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp11 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp12 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp13 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp14 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp15 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp16 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp17 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp18 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
                    PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
                    int __pyx_parallel_why;
                    __pyx_parallel_why = 0;
                    __pyx_t_12 = (__pyx_t_7 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_12 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for lastprivate(__pyx_v_h_j2) lastprivate(__pyx_v_ih_j2) lastprivate(__pyx_v_ii) firstprivate(__pyx_v_j) lastprivate(__pyx_v_j) lastprivate(__pyx_v_jj) lastprivate(__pyx_v_posx_diff) lastprivate(__pyx_v_posy_diff) lastprivate(__pyx_v_px) lastprivate(__pyx_v_py) lastprivate(__pyx_v_q_ij2) lastprivate(__pyx_v_x) lastprivate(__pyx_v_x0) lastprivate(__pyx_v_x1) lastprivate(__pyx_v_xi) lastprivate(__pyx_v_y) lastprivate(__pyx_v_y0) lastprivate(__pyx_v_y1) lastprivate(__pyx_v_yi) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_12; __pyx_t_6++){
                            if (__pyx_parallel_why < 2)
                            {
                                __pyx_v_j = (int)(0 + 1 * __pyx_t_6);
                                /* Initialize private variables to invalid values */
                                __pyx_v_h_j2 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_ih_j2 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_ii = ((int)0xbad0bad0);
                                __pyx_v_jj = ((int)0xbad0bad0);
                                __pyx_v_posx_diff = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_posy_diff = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_px = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_py = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_q_ij2 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_x = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_x0 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_x1 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_xi = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_y = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_y0 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_y1 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_yi = ((__pyx_t_5numpy_int64_t)0xbad0bad0);

                                /* "yt/utilities/lib/pixelization_routines.pyx":1137
 * 
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 *             if j % 100000 == 0:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     PyErr_CheckSignals()
 */
                                __pyx_t_2 = (((__pyx_v_j % 0x186A0) == 0) != 0);
                                if (__pyx_t_2) {

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1138
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 *             if j % 100000 == 0:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     PyErr_CheckSignals()
 * 
 */
                                  {
                                      #ifdef WITH_THREAD
                                      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                      #endif
                                      /*try:*/ {

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1139
 *             if j % 100000 == 0:
 *                 with gil:
 *                     PyErr_CheckSignals()             # <<<<<<<<<<<<<<
 * 
 *             xiter[1] = yiter[1] = 999
 */
                                        __pyx_t_11 = PyErr_CheckSignals(); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 1139, __pyx_L23_error)
                                      }

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1138
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 *             if j % 100000 == 0:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     PyErr_CheckSignals()
 * 
 */
                                      /*finally:*/ {
                                        /*normal exit:*/{
                                          #ifdef WITH_THREAD
                                          __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                          #endif
                                          goto __pyx_L24;
                                        }
                                        __pyx_L23_error: {
                                          #ifdef WITH_THREAD
                                          __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                          #endif
                                          goto __pyx_L17_error;
                                        }
                                        __pyx_L24:;
                                      }
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1137
 * 
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 *             if j % 100000 == 0:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     PyErr_CheckSignals()
 */
                                }

                                /* "yt/utilities/lib/pixelization_routines.pyx":1141
 *                     PyErr_CheckSignals()
 * 
 *             xiter[1] = yiter[1] = 999             # <<<<<<<<<<<<<<
 * 
 *             if check_period == 1:
 */
                                (__pyx_v_xiter[1]) = 0x3E7;
                                (__pyx_v_yiter[1]) = 0x3E7;

                                /* "yt/utilities/lib/pixelization_routines.pyx":1143
 *             xiter[1] = yiter[1] = 999
 * 
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1
 */
                                __pyx_t_2 = ((__pyx_v_check_period == 1) != 0);
                                if (__pyx_t_2) {

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1144
 * 
 *             if check_period == 1:
 *                 if posx[j] - hsml[j] < x_min:             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
                                  __pyx_t_13 = __pyx_v_j;
                                  __pyx_t_14 = __pyx_v_j;
                                  __pyx_t_2 = ((((*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_posx.data + __pyx_t_13 * __pyx_v_posx.strides[0]) ))) - (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_14 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_x_min) != 0);
                                  if (__pyx_t_2) {

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1145
 *             if check_period == 1:
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:
 */
                                    (__pyx_v_xiter[1]) = 1;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1146
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x             # <<<<<<<<<<<<<<
 *                 elif posx[j] + hsml[j] > x_max:
 *                     xiter[1] = -1
 */
                                    (__pyx_v_xiterv[1]) = __pyx_v_period_x;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1144
 * 
 *             if check_period == 1:
 *                 if posx[j] - hsml[j] < x_min:             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
                                    goto __pyx_L26;
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1147
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
                                  __pyx_t_14 = __pyx_v_j;
                                  __pyx_t_13 = __pyx_v_j;
                                  __pyx_t_2 = ((((*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_posx.data + __pyx_t_14 * __pyx_v_posx.strides[0]) ))) + (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_x_max) != 0);
                                  if (__pyx_t_2) {

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1148
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:
 *                     xiter[1] = -1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:
 */
                                    (__pyx_v_xiter[1]) = -1;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1149
 *                 elif posx[j] + hsml[j] > x_max:
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x             # <<<<<<<<<<<<<<
 *                 if posy[j] - hsml[j] < y_min:
 *                     yiter[1] = +1
 */
                                    (__pyx_v_xiterv[1]) = (-__pyx_v_period_x);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1147
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
                                  }
                                  __pyx_L26:;

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1150
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
                                  __pyx_t_13 = __pyx_v_j;
                                  __pyx_t_14 = __pyx_v_j;
                                  __pyx_t_2 = ((((*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_posy.data + __pyx_t_13 * __pyx_v_posy.strides[0]) ))) - (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_14 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_y_min) != 0);
                                  if (__pyx_t_2) {

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1151
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:
 *                     yiter[1] = +1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:
 */
                                    (__pyx_v_yiter[1]) = 1;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1152
 *                 if posy[j] - hsml[j] < y_min:
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y             # <<<<<<<<<<<<<<
 *                 elif posy[j] + hsml[j] > y_max:
 *                     yiter[1] = -1
 */
                                    (__pyx_v_yiterv[1]) = __pyx_v_period_y;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1150
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
                                    goto __pyx_L27;
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1153
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
                                  __pyx_t_14 = __pyx_v_j;
                                  __pyx_t_13 = __pyx_v_j;
                                  __pyx_t_2 = ((((*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_posy.data + __pyx_t_14 * __pyx_v_posy.strides[0]) ))) + (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_y_max) != 0);
                                  if (__pyx_t_2) {

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1154
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:
 *                     yiter[1] = -1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = -period_y
 * 
 */
                                    (__pyx_v_yiter[1]) = -1;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1155
 *                 elif posy[j] + hsml[j] > y_max:
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y             # <<<<<<<<<<<<<<
 * 
 *             # we set the smoothing length squared with lower limit of the pixel
 */
                                    (__pyx_v_yiterv[1]) = (-__pyx_v_period_y);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1153
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
                                  }
                                  __pyx_L27:;

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1143
 *             xiter[1] = yiter[1] = 999
 * 
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1
 */
                                }

                                /* "yt/utilities/lib/pixelization_routines.pyx":1158
 * 
 *             # we set the smoothing length squared with lower limit of the pixel
 *             h_j2 = fmax(hsml[j]*hsml[j], dx*dy)             # <<<<<<<<<<<<<<
 *             ih_j2 = 1.0/h_j2
 * 
 */
                                __pyx_t_13 = __pyx_v_j;
                                __pyx_t_14 = __pyx_v_j;
                                __pyx_v_h_j2 = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(((*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) ))) * (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_14 * __pyx_v_hsml.strides[0]) )))), (__pyx_v_dx * __pyx_v_dy));

                                /* "yt/utilities/lib/pixelization_routines.pyx":1159
 *             # we set the smoothing length squared with lower limit of the pixel
 *             h_j2 = fmax(hsml[j]*hsml[j], dx*dy)
 *             ih_j2 = 1.0/h_j2             # <<<<<<<<<<<<<<
 * 
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**2 * quantity_to_smooth[j]
 */
                                __pyx_v_ih_j2 = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_h_j2);

                                /* "yt/utilities/lib/pixelization_routines.pyx":1161
 *             ih_j2 = 1.0/h_j2
 * 
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**2 * quantity_to_smooth[j]             # <<<<<<<<<<<<<<
 *             if weight_field is not None:
 *                 prefactor_j *= _weight_field[j]
 */
                                __pyx_t_14 = __pyx_v_j;
                                __pyx_t_13 = __pyx_v_j;
                                __pyx_t_15 = __pyx_v_j;
                                __pyx_t_16 = __pyx_v_j;
                                __pyx_v_prefactor_j = ((((*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_pmass.data + __pyx_t_14 * __pyx_v_pmass.strides[0]) ))) / (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_pdens.data + __pyx_t_13 * __pyx_v_pdens.strides[0]) )))) / powf((*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) ))), 2.0)) * (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_quantity_to_smooth.data + __pyx_t_16 * __pyx_v_quantity_to_smooth.strides[0]) ))));

                                /* "yt/utilities/lib/pixelization_routines.pyx":1162
 * 
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**2 * quantity_to_smooth[j]
 *             if weight_field is not None:             # <<<<<<<<<<<<<<
 *                 prefactor_j *= _weight_field[j]
 * 
 */
                                __pyx_t_2 = (__pyx_v_weight_field != Py_None);
                                __pyx_t_1 = (__pyx_t_2 != 0);
                                if (__pyx_t_1) {

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1163
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**2 * quantity_to_smooth[j]
 *             if weight_field is not None:
 *                 prefactor_j *= _weight_field[j]             # <<<<<<<<<<<<<<
 * 
 *             for ii in range(2):
 */
                                  __pyx_t_16 = __pyx_v_j;
                                  __pyx_v_prefactor_j = (__pyx_v_prefactor_j * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v__weight_field.data + __pyx_t_16 * __pyx_v__weight_field.strides[0]) ))));

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1162
 * 
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**2 * quantity_to_smooth[j]
 *             if weight_field is not None:             # <<<<<<<<<<<<<<
 *                 prefactor_j *= _weight_field[j]
 * 
 */
                                }

                                /* "yt/utilities/lib/pixelization_routines.pyx":1165
 *                 prefactor_j *= _weight_field[j]
 * 
 *             for ii in range(2):             # <<<<<<<<<<<<<<
 *                 if xiter[ii] == 999: continue
 *                 px = posx[j] + xiterv[ii]
 */
                                for (__pyx_t_11 = 0; __pyx_t_11 < 2; __pyx_t_11+=1) {
                                  __pyx_v_ii = __pyx_t_11;

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1166
 * 
 *             for ii in range(2):
 *                 if xiter[ii] == 999: continue             # <<<<<<<<<<<<<<
 *                 px = posx[j] + xiterv[ii]
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 */
                                  __pyx_t_1 = (((__pyx_v_xiter[__pyx_v_ii]) == 0x3E7) != 0);
                                  if (__pyx_t_1) {
                                    goto __pyx_L29_continue;
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1167
 *             for ii in range(2):
 *                 if xiter[ii] == 999: continue
 *                 px = posx[j] + xiterv[ii]             # <<<<<<<<<<<<<<
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 *                 for jj in range(2):
 */
                                  __pyx_t_16 = __pyx_v_j;
                                  __pyx_v_px = ((*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_posx.data + __pyx_t_16 * __pyx_v_posx.strides[0]) ))) + (__pyx_v_xiterv[__pyx_v_ii]));

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1168
 *                 if xiter[ii] == 999: continue
 *                 px = posx[j] + xiterv[ii]
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue             # <<<<<<<<<<<<<<
 *                 for jj in range(2):
 *                     if yiter[jj] == 999: continue
 */
                                  __pyx_t_16 = __pyx_v_j;
                                  __pyx_t_2 = (((__pyx_v_px + (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_x_min) != 0);
                                  if (!__pyx_t_2) {
                                  } else {
                                    __pyx_t_1 = __pyx_t_2;
                                    goto __pyx_L33_bool_binop_done;
                                  }
                                  __pyx_t_16 = __pyx_v_j;
                                  __pyx_t_2 = (((__pyx_v_px - (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_x_max) != 0);
                                  __pyx_t_1 = __pyx_t_2;
                                  __pyx_L33_bool_binop_done:;
                                  if (__pyx_t_1) {
                                    goto __pyx_L29_continue;
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1169
 *                 px = posx[j] + xiterv[ii]
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 *                 for jj in range(2):             # <<<<<<<<<<<<<<
 *                     if yiter[jj] == 999: continue
 *                     py = posy[j] + yiterv[jj]
 */
                                  for (__pyx_t_17 = 0; __pyx_t_17 < 2; __pyx_t_17+=1) {
                                    __pyx_v_jj = __pyx_t_17;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1170
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 *                 for jj in range(2):
 *                     if yiter[jj] == 999: continue             # <<<<<<<<<<<<<<
 *                     py = posy[j] + yiterv[jj]
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue
 */
                                    __pyx_t_1 = (((__pyx_v_yiter[__pyx_v_jj]) == 0x3E7) != 0);
                                    if (__pyx_t_1) {
                                      goto __pyx_L35_continue;
                                    }

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1171
 *                 for jj in range(2):
 *                     if yiter[jj] == 999: continue
 *                     py = posy[j] + yiterv[jj]             # <<<<<<<<<<<<<<
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue
 * 
 */
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_v_py = ((*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_posy.data + __pyx_t_16 * __pyx_v_posy.strides[0]) ))) + (__pyx_v_yiterv[__pyx_v_jj]));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1172
 *                     if yiter[jj] == 999: continue
 *                     py = posy[j] + yiterv[jj]
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue             # <<<<<<<<<<<<<<
 * 
 *                     # here we find the pixels which this particle contributes to
 */
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_t_2 = (((__pyx_v_py + (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_y_min) != 0);
                                    if (!__pyx_t_2) {
                                    } else {
                                      __pyx_t_1 = __pyx_t_2;
                                      goto __pyx_L39_bool_binop_done;
                                    }
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_t_2 = (((__pyx_v_py - (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_y_max) != 0);
                                    __pyx_t_1 = __pyx_t_2;
                                    __pyx_L39_bool_binop_done:;
                                    if (__pyx_t_1) {
                                      goto __pyx_L35_continue;
                                    }

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1175
 * 
 *                     # here we find the pixels which this particle contributes to
 *                     x0 = <np.int64_t> ((px - hsml[j] - x_min)*idx)             # <<<<<<<<<<<<<<
 *                     x1 = <np.int64_t> ((px + hsml[j] - x_min)*idx)
 *                     x0 = iclip(x0-1, 0, xsize)
 */
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_v_x0 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_px - (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_x_min) * __pyx_v_idx));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1176
 *                     # here we find the pixels which this particle contributes to
 *                     x0 = <np.int64_t> ((px - hsml[j] - x_min)*idx)
 *                     x1 = <np.int64_t> ((px + hsml[j] - x_min)*idx)             # <<<<<<<<<<<<<<
 *                     x0 = iclip(x0-1, 0, xsize)
 *                     x1 = iclip(x1+1, 0, xsize)
 */
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_v_x1 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_px + (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_x_min) * __pyx_v_idx));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1177
 *                     x0 = <np.int64_t> ((px - hsml[j] - x_min)*idx)
 *                     x1 = <np.int64_t> ((px + hsml[j] - x_min)*idx)
 *                     x0 = iclip(x0-1, 0, xsize)             # <<<<<<<<<<<<<<
 *                     x1 = iclip(x1+1, 0, xsize)
 * 
 */
                                    __pyx_v_x0 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_x0 - 1), 0, __pyx_v_xsize);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1178
 *                     x1 = <np.int64_t> ((px + hsml[j] - x_min)*idx)
 *                     x0 = iclip(x0-1, 0, xsize)
 *                     x1 = iclip(x1+1, 0, xsize)             # <<<<<<<<<<<<<<
 * 
 *                     y0 = <np.int64_t> ((py - hsml[j] - y_min)*idy)
 */
                                    __pyx_v_x1 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_x1 + 1), 0, __pyx_v_xsize);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1180
 *                     x1 = iclip(x1+1, 0, xsize)
 * 
 *                     y0 = <np.int64_t> ((py - hsml[j] - y_min)*idy)             # <<<<<<<<<<<<<<
 *                     y1 = <np.int64_t> ((py + hsml[j] - y_min)*idy)
 *                     y0 = iclip(y0-1, 0, ysize)
 */
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_v_y0 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_py - (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_y_min) * __pyx_v_idy));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1181
 * 
 *                     y0 = <np.int64_t> ((py - hsml[j] - y_min)*idy)
 *                     y1 = <np.int64_t> ((py + hsml[j] - y_min)*idy)             # <<<<<<<<<<<<<<
 *                     y0 = iclip(y0-1, 0, ysize)
 *                     y1 = iclip(y1+1, 0, ysize)
 */
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_v_y1 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_py + (*((__pyx_t_5numpy_float32_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_y_min) * __pyx_v_idy));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1182
 *                     y0 = <np.int64_t> ((py - hsml[j] - y_min)*idy)
 *                     y1 = <np.int64_t> ((py + hsml[j] - y_min)*idy)
 *                     y0 = iclip(y0-1, 0, ysize)             # <<<<<<<<<<<<<<
 *                     y1 = iclip(y1+1, 0, ysize)
 * 
 */
                                    __pyx_v_y0 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_y0 - 1), 0, __pyx_v_ysize);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1183
 *                     y1 = <np.int64_t> ((py + hsml[j] - y_min)*idy)
 *                     y0 = iclip(y0-1, 0, ysize)
 *                     y1 = iclip(y1+1, 0, ysize)             # <<<<<<<<<<<<<<
 * 
 *                     # found pixels we deposit on, loop through those pixels
 */
                                    __pyx_v_y1 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_y1 + 1), 0, __pyx_v_ysize);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1186
 * 
 *                     # found pixels we deposit on, loop through those pixels
 *                     for xi in range(x0, x1):             # <<<<<<<<<<<<<<
 *                         # we use the centre of the pixel to calculate contribution
 *                         x = (xi + 0.5) * dx + x_min
 */
                                    __pyx_t_18 = __pyx_v_x1;
                                    __pyx_t_19 = __pyx_t_18;
                                    for (__pyx_t_20 = __pyx_v_x0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
                                      __pyx_v_xi = __pyx_t_20;

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1188
 *                     for xi in range(x0, x1):
 *                         # we use the centre of the pixel to calculate contribution
 *                         x = (xi + 0.5) * dx + x_min             # <<<<<<<<<<<<<<
 * 
 *                         posx_diff = px - x
 */
                                      __pyx_v_x = (((__pyx_v_xi + 0.5) * __pyx_v_dx) + __pyx_v_x_min);

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1190
 *                         x = (xi + 0.5) * dx + x_min
 * 
 *                         posx_diff = px - x             # <<<<<<<<<<<<<<
 *                         posx_diff = posx_diff * posx_diff
 * 
 */
                                      __pyx_v_posx_diff = (__pyx_v_px - __pyx_v_x);

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1191
 * 
 *                         posx_diff = px - x
 *                         posx_diff = posx_diff * posx_diff             # <<<<<<<<<<<<<<
 * 
 *                         if posx_diff > h_j2: continue
 */
                                      __pyx_v_posx_diff = (__pyx_v_posx_diff * __pyx_v_posx_diff);

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1193
 *                         posx_diff = posx_diff * posx_diff
 * 
 *                         if posx_diff > h_j2: continue             # <<<<<<<<<<<<<<
 * 
 *                         for yi in range(y0, y1):
 */
                                      __pyx_t_1 = ((__pyx_v_posx_diff > __pyx_v_h_j2) != 0);
                                      if (__pyx_t_1) {
                                        goto __pyx_L41_continue;
                                      }

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1195
 *                         if posx_diff > h_j2: continue
 * 
 *                         for yi in range(y0, y1):             # <<<<<<<<<<<<<<
 *                             y = (yi + 0.5) * dy + y_min
 * 
 */
                                      __pyx_t_21 = __pyx_v_y1;
                                      __pyx_t_22 = __pyx_t_21;
                                      for (__pyx_t_23 = __pyx_v_y0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
                                        __pyx_v_yi = __pyx_t_23;

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1196
 * 
 *                         for yi in range(y0, y1):
 *                             y = (yi + 0.5) * dy + y_min             # <<<<<<<<<<<<<<
 * 
 *                             posy_diff = py - y
 */
                                        __pyx_v_y = (((__pyx_v_yi + 0.5) * __pyx_v_dy) + __pyx_v_y_min);

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1198
 *                             y = (yi + 0.5) * dy + y_min
 * 
 *                             posy_diff = py - y             # <<<<<<<<<<<<<<
 *                             posy_diff = posy_diff * posy_diff
 *                             if posy_diff > h_j2: continue
 */
                                        __pyx_v_posy_diff = (__pyx_v_py - __pyx_v_y);

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1199
 * 
 *                             posy_diff = py - y
 *                             posy_diff = posy_diff * posy_diff             # <<<<<<<<<<<<<<
 *                             if posy_diff > h_j2: continue
 * 
 */
                                        __pyx_v_posy_diff = (__pyx_v_posy_diff * __pyx_v_posy_diff);

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1200
 *                             posy_diff = py - y
 *                             posy_diff = posy_diff * posy_diff
 *                             if posy_diff > h_j2: continue             # <<<<<<<<<<<<<<
 * 
 *                             q_ij2 = (posx_diff + posy_diff) * ih_j2
 */
                                        __pyx_t_1 = ((__pyx_v_posy_diff > __pyx_v_h_j2) != 0);
                                        if (__pyx_t_1) {
                                          goto __pyx_L44_continue;
                                        }

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1202
 *                             if posy_diff > h_j2: continue
 * 
 *                             q_ij2 = (posx_diff + posy_diff) * ih_j2             # <<<<<<<<<<<<<<
 *                             if q_ij2 >= 1:
 *                                 continue
 */
                                        __pyx_v_q_ij2 = ((__pyx_v_posx_diff + __pyx_v_posy_diff) * __pyx_v_ih_j2);

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1203
 * 
 *                             q_ij2 = (posx_diff + posy_diff) * ih_j2
 *                             if q_ij2 >= 1:             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
                                        __pyx_t_1 = ((__pyx_v_q_ij2 >= 1.0) != 0);
                                        if (__pyx_t_1) {

                                          /* "yt/utilities/lib/pixelization_routines.pyx":1204
 *                             q_ij2 = (posx_diff + posy_diff) * ih_j2
 *                             if q_ij2 >= 1:
 *                                 continue             # <<<<<<<<<<<<<<
 * 
 *                             # see equation 32 of the SPLASH paper
 */
                                          goto __pyx_L44_continue;

                                          /* "yt/utilities/lib/pixelization_routines.pyx":1203
 * 
 *                             q_ij2 = (posx_diff + posy_diff) * ih_j2
 *                             if q_ij2 >= 1:             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
                                        }

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1208
 *                             # see equation 32 of the SPLASH paper
 *                             # now we just use the kernel projection
 *                             local_buff[xi + yi*xsize] +=  prefactor_j * itab.interpolate(q_ij2)             # <<<<<<<<<<<<<<
 * 
 *         with gil:
 */
                                        __pyx_t_24 = (__pyx_v_xi + (__pyx_v_yi * __pyx_v_xsize));
                                        (__pyx_v_local_buff[__pyx_t_24]) = ((__pyx_v_local_buff[__pyx_t_24]) + (__pyx_v_prefactor_j * __pyx_f_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_interpolate(__pyx_v_itab, __pyx_v_q_ij2)));
                                        __pyx_L44_continue:;
                                      }
                                      __pyx_L41_continue:;
                                    }
                                    __pyx_L35_continue:;
                                  }
                                  __pyx_L29_continue:;
                                }
                                goto __pyx_L49;
                                __pyx_L17_error:;
                                {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    #ifdef _OPENMP
                                    #pragma omp flush(__pyx_parallel_exc_type)
                                    #endif /* _OPENMP */
                                    if (!__pyx_parallel_exc_type) {
                                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                                    }
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                }
                                __pyx_parallel_why = 4;
                                goto __pyx_L48;
                                __pyx_L48:;
                                #ifdef _OPENMP
                                #pragma omp critical(__pyx_parallel_lastprivates1)
                                #endif /* _OPENMP */
                                {
                                    __pyx_parallel_temp0 = __pyx_v_h_j2;
                                    __pyx_parallel_temp1 = __pyx_v_ih_j2;
                                    __pyx_parallel_temp2 = __pyx_v_ii;
                                    __pyx_parallel_temp3 = __pyx_v_j;
                                    __pyx_parallel_temp4 = __pyx_v_jj;
                                    __pyx_parallel_temp5 = __pyx_v_posx_diff;
                                    __pyx_parallel_temp6 = __pyx_v_posy_diff;
                                    __pyx_parallel_temp7 = __pyx_v_prefactor_j;
                                    __pyx_parallel_temp8 = __pyx_v_px;
                                    __pyx_parallel_temp9 = __pyx_v_py;
                                    __pyx_parallel_temp10 = __pyx_v_q_ij2;
                                    __pyx_parallel_temp11 = __pyx_v_x;
                                    __pyx_parallel_temp12 = __pyx_v_x0;
                                    __pyx_parallel_temp13 = __pyx_v_x1;
                                    __pyx_parallel_temp14 = __pyx_v_xi;
                                    __pyx_parallel_temp15 = __pyx_v_y;
                                    __pyx_parallel_temp16 = __pyx_v_y0;
                                    __pyx_parallel_temp17 = __pyx_v_y1;
                                    __pyx_parallel_temp18 = __pyx_v_yi;
                                }
                                __pyx_L49:;
                                #ifdef _OPENMP
                                #pragma omp flush(__pyx_parallel_why)
                                #endif /* _OPENMP */
                            }
                        }
                    }
                    if (__pyx_parallel_exc_type) {
                      /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
                      __pyx_parallel_why = 4;
                    }
                    if (__pyx_parallel_why) {
                      __pyx_v_h_j2 = __pyx_parallel_temp0;
                      __pyx_v_ih_j2 = __pyx_parallel_temp1;
                      __pyx_v_ii = __pyx_parallel_temp2;
                      __pyx_v_j = __pyx_parallel_temp3;
                      __pyx_v_jj = __pyx_parallel_temp4;
                      __pyx_v_posx_diff = __pyx_parallel_temp5;
                      __pyx_v_posy_diff = __pyx_parallel_temp6;
                      __pyx_v_prefactor_j = __pyx_parallel_temp7;
                      __pyx_v_px = __pyx_parallel_temp8;
                      __pyx_v_py = __pyx_parallel_temp9;
                      __pyx_v_q_ij2 = __pyx_parallel_temp10;
                      __pyx_v_x = __pyx_parallel_temp11;
                      __pyx_v_x0 = __pyx_parallel_temp12;
                      __pyx_v_x1 = __pyx_parallel_temp13;
                      __pyx_v_xi = __pyx_parallel_temp14;
                      __pyx_v_y = __pyx_parallel_temp15;
                      __pyx_v_y0 = __pyx_parallel_temp16;
                      __pyx_v_y1 = __pyx_parallel_temp17;
                      __pyx_v_yi = __pyx_parallel_temp18;
                      switch (__pyx_parallel_why) {
                            case 4:
                        {
                            #ifdef WITH_THREAD
                            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                            #endif
                            __Pyx_GIVEREF(__pyx_parallel_exc_type);
                            __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                            __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                            #ifdef WITH_THREAD
                            __Pyx_PyGILState_Release(__pyx_gilstate_save);
                            #endif
                        }
                        goto __pyx_L11_error;
                      }
                    }
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":1210
 *                             local_buff[xi + yi*xsize] +=  prefactor_j * itab.interpolate(q_ij2)
 * 
 *         with gil:             # <<<<<<<<<<<<<<
 *             for xxi in range(xsize):
 *                 for yyi in range(ysize):
 */
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    /*try:*/ {

                      /* "yt/utilities/lib/pixelization_routines.pyx":1211
 * 
 *         with gil:
 *             for xxi in range(xsize):             # <<<<<<<<<<<<<<
 *                 for yyi in range(ysize):
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]
 */
                      __pyx_t_9 = __pyx_v_xsize;
                      __pyx_t_10 = __pyx_t_9;
                      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_10; __pyx_t_18+=1) {
                        __pyx_v_xxi = __pyx_t_18;

                        /* "yt/utilities/lib/pixelization_routines.pyx":1212
 *         with gil:
 *             for xxi in range(xsize):
 *                 for yyi in range(ysize):             # <<<<<<<<<<<<<<
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]
 *         free(local_buff)
 */
                        __pyx_t_25 = __pyx_v_ysize;
                        __pyx_t_26 = __pyx_t_25;
                        for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_26; __pyx_t_19+=1) {
                          __pyx_v_yyi = __pyx_t_19;

                          /* "yt/utilities/lib/pixelization_routines.pyx":1213
 *             for xxi in range(xsize):
 *                 for yyi in range(ysize):
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]             # <<<<<<<<<<<<<<
 *         free(local_buff)
 *         free(xiterv)
 */
                          __pyx_t_20 = __pyx_v_xxi;
                          __pyx_t_21 = __pyx_v_yyi;
                          *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_20 * __pyx_v_buff.strides[0]) ) + __pyx_t_21 * __pyx_v_buff.strides[1]) )) += (__pyx_v_local_buff[(__pyx_v_xxi + (__pyx_v_yyi * __pyx_v_xsize))]);
                        }
                      }
                    }

                    /* "yt/utilities/lib/pixelization_routines.pyx":1210
 *                             local_buff[xi + yi*xsize] +=  prefactor_j * itab.interpolate(q_ij2)
 * 
 *         with gil:             # <<<<<<<<<<<<<<
 *             for xxi in range(xsize):
 *                 for yyi in range(ysize):
 */
                    /*finally:*/ {
                      /*normal exit:*/{
                        #ifdef WITH_THREAD
                        __Pyx_PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        goto __pyx_L54;
                      }
                      __pyx_L54:;
                    }
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":1214
 *                 for yyi in range(ysize):
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]
 *         free(local_buff)             # <<<<<<<<<<<<<<
 *         free(xiterv)
 *         free(yiterv)
 */
                free(__pyx_v_local_buff);

                /* "yt/utilities/lib/pixelization_routines.pyx":1215
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]
 *         free(local_buff)
 *         free(xiterv)             # <<<<<<<<<<<<<<
 *         free(yiterv)
 *         free(xiter)
 */
                free(__pyx_v_xiterv);

                /* "yt/utilities/lib/pixelization_routines.pyx":1216
 *         free(local_buff)
 *         free(xiterv)
 *         free(yiterv)             # <<<<<<<<<<<<<<
 *         free(xiter)
 *         free(yiter)
 */
                free(__pyx_v_yiterv);

                /* "yt/utilities/lib/pixelization_routines.pyx":1217
 *         free(xiterv)
 *         free(yiterv)
 *         free(xiter)             # <<<<<<<<<<<<<<
 *         free(yiter)
 * 
 */
                free(__pyx_v_xiter);

                /* "yt/utilities/lib/pixelization_routines.pyx":1218
 *         free(yiterv)
 *         free(xiter)
 *         free(yiter)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
                free(__pyx_v_yiter);
                goto __pyx_L60;
                __pyx_L11_error:;
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    #ifdef _OPENMP
                    #pragma omp flush(__pyx_parallel_exc_type)
                    #endif /* _OPENMP */
                    if (!__pyx_parallel_exc_type) {
                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                    }
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                __pyx_parallel_why = 4;
                goto __pyx_L60;
                __pyx_L60:;
                #ifdef _OPENMP
                Py_END_ALLOW_THREADS
                #else
{
#ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                #endif /* _OPENMP */
                /* Clean up any temporaries */
                #ifdef WITH_THREAD
                __Pyx_PyGILState_Release(__pyx_gilstate_save);
                #endif
                #ifndef _OPENMP
}
#endif /* _OPENMP */
            }
            if (__pyx_parallel_exc_type) {
              /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
              __pyx_parallel_why = 4;
            }
            if (__pyx_parallel_why) {
              switch (__pyx_parallel_why) {
                    case 4:
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    __Pyx_GIVEREF(__pyx_parallel_exc_type);
                    __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                    __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                goto __pyx_L7_error;
              }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":1110
 *     cdef SPHKernelInterpolationTable itab = kernel_tables[kernel_name]
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         # loop through every particle
 *         # NOTE: this loop can be quite time consuming. However it is easily
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L7_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L8:;
      }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1058
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_projection(             # <<<<<<<<<<<<<<
 *         np.float64_t[:, :] buff,
 *         any_float[:] posx,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_3, 1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_sph_kernel_projection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v__weight_field, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_itab);
  __PYX_XDEC_MEMVIEW(&__pyx_v_buff, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_posx, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_posy, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_hsml, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pmass, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdens, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_quantity_to_smooth, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_62__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_self)->__pyx_arg_check_period); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_self)->__pyx_arg_kernel_name);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_self)->__pyx_arg_kernel_name);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_self)->__pyx_arg_kernel_name);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_self)->__pyx_arg_weight_field);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_self)->__pyx_arg_weight_field);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_self)->__pyx_arg_weight_field);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_self)->__pyx_arg_period);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_self)->__pyx_arg_period);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_self)->__pyx_arg_period);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_1, 1, Py_None);
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_fuse_1__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_45pixelize_sph_kernel_projection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_fuse_1__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_45pixelize_sph_kernel_projection = {"__pyx_fuse_1pixelize_sph_kernel_projection", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_fuse_1__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_45pixelize_sph_kernel_projection, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_fuse_1__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_45pixelize_sph_kernel_projection(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_buff = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_posx = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_posy = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_hsml = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pmass = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdens = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_quantity_to_smooth = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_bounds = 0;
  PyObject *__pyx_v_kernel_name = 0;
  PyObject *__pyx_v_weight_field = 0;
  int __pyx_v_check_period;
  PyObject *__pyx_v_period = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pixelize_sph_kernel_projection (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buff,&__pyx_n_s_posx,&__pyx_n_s_posy,&__pyx_n_s_hsml,&__pyx_n_s_pmass,&__pyx_n_s_pdens,&__pyx_n_s_quantity_to_smooth,&__pyx_n_s_bounds,&__pyx_n_s_kernel_name,&__pyx_n_s_weight_field,&__pyx_n_s_check_period,&__pyx_n_s_period,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    __pyx_defaults7 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_self);
    values[8] = __pyx_dynamic_args->__pyx_arg_kernel_name;
    values[9] = __pyx_dynamic_args->__pyx_arg_weight_field;
    values[11] = __pyx_dynamic_args->__pyx_arg_period;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_posx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 1); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_posy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 2); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hsml)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 3); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pmass)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 4); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 5); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quantity_to_smooth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 6); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, 7); __PYX_ERR(0, 1058, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kernel_name);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weight_field);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_check_period);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_period);
          if (value) { values[11] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pixelize_sph_kernel_projection") < 0)) __PYX_ERR(0, 1058, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buff = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_buff.memview)) __PYX_ERR(0, 1059, __pyx_L3_error)
    __pyx_v_posx = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_posx.memview)) __PYX_ERR(0, 1060, __pyx_L3_error)
    __pyx_v_posy = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_posy.memview)) __PYX_ERR(0, 1061, __pyx_L3_error)
    __pyx_v_hsml = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_hsml.memview)) __PYX_ERR(0, 1062, __pyx_L3_error)
    __pyx_v_pmass = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pmass.memview)) __PYX_ERR(0, 1063, __pyx_L3_error)
    __pyx_v_pdens = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdens.memview)) __PYX_ERR(0, 1064, __pyx_L3_error)
    __pyx_v_quantity_to_smooth = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_quantity_to_smooth.memview)) __PYX_ERR(0, 1065, __pyx_L3_error)
    __pyx_v_bounds = values[7];
    __pyx_v_kernel_name = values[8];
    __pyx_v_weight_field = values[9];
    if (values[10]) {
      __pyx_v_check_period = __Pyx_PyInt_As_int(values[10]); if (unlikely((__pyx_v_check_period == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1069, __pyx_L3_error)
    } else {
      __pyx_v_check_period = __pyx_dynamic_args->__pyx_arg_check_period;
    }
    __pyx_v_period = values[11];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_projection", 0, 8, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1058, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_sph_kernel_projection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_44pixelize_sph_kernel_projection(__pyx_self, __pyx_v_buff, __pyx_v_posx, __pyx_v_posy, __pyx_v_hsml, __pyx_v_pmass, __pyx_v_pdens, __pyx_v_quantity_to_smooth, __pyx_v_bounds, __pyx_v_kernel_name, __pyx_v_weight_field, __pyx_v_check_period, __pyx_v_period);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_44pixelize_sph_kernel_projection(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_posx, __Pyx_memviewslice __pyx_v_posy, __Pyx_memviewslice __pyx_v_hsml, __Pyx_memviewslice __pyx_v_pmass, __Pyx_memviewslice __pyx_v_pdens, __Pyx_memviewslice __pyx_v_quantity_to_smooth, PyObject *__pyx_v_bounds, PyObject *__pyx_v_kernel_name, PyObject *__pyx_v_weight_field, int __pyx_v_check_period, PyObject *__pyx_v_period) {
  __pyx_t_5numpy_intp_t __pyx_v_xsize;
  __pyx_t_5numpy_intp_t __pyx_v_ysize;
  __pyx_t_5numpy_float64_t __pyx_v_x_min;
  __pyx_t_5numpy_float64_t __pyx_v_x_max;
  __pyx_t_5numpy_float64_t __pyx_v_y_min;
  __pyx_t_5numpy_float64_t __pyx_v_y_max;
  __pyx_t_5numpy_float64_t __pyx_v_prefactor_j;
  __pyx_t_5numpy_int64_t __pyx_v_xi;
  __pyx_t_5numpy_int64_t __pyx_v_yi;
  __pyx_t_5numpy_int64_t __pyx_v_x0;
  __pyx_t_5numpy_int64_t __pyx_v_x1;
  __pyx_t_5numpy_int64_t __pyx_v_y0;
  __pyx_t_5numpy_int64_t __pyx_v_y1;
  __pyx_t_5numpy_int64_t __pyx_v_xxi;
  __pyx_t_5numpy_int64_t __pyx_v_yyi;
  __pyx_t_5numpy_float64_t __pyx_v_q_ij2;
  __pyx_t_5numpy_float64_t __pyx_v_posx_diff;
  __pyx_t_5numpy_float64_t __pyx_v_posy_diff;
  __pyx_t_5numpy_float64_t __pyx_v_ih_j2;
  __pyx_t_5numpy_float64_t __pyx_v_x;
  __pyx_t_5numpy_float64_t __pyx_v_y;
  __pyx_t_5numpy_float64_t __pyx_v_dx;
  __pyx_t_5numpy_float64_t __pyx_v_dy;
  __pyx_t_5numpy_float64_t __pyx_v_idx;
  __pyx_t_5numpy_float64_t __pyx_v_idy;
  __pyx_t_5numpy_float64_t __pyx_v_h_j2;
  __pyx_t_5numpy_float64_t __pyx_v_px;
  __pyx_t_5numpy_float64_t __pyx_v_py;
  __pyx_t_5numpy_float64_t __pyx_v_period_x;
  __pyx_t_5numpy_float64_t __pyx_v_period_y;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_ii;
  int __pyx_v_jj;
  __Pyx_memviewslice __pyx_v__weight_field = { 0, 0, { 0 }, { 0 }, { 0 } };
  int *__pyx_v_xiter;
  int *__pyx_v_yiter;
  __pyx_t_5numpy_float64_t *__pyx_v_xiterv;
  __pyx_t_5numpy_float64_t *__pyx_v_yiterv;
  struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *__pyx_v_itab = 0;
  __pyx_t_5numpy_float64_t *__pyx_v_local_buff;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_memviewslice __pyx_t_3 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_5numpy_float64_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __pyx_t_5numpy_intp_t __pyx_t_9;
  __pyx_t_5numpy_intp_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  int __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  __pyx_t_5numpy_int64_t __pyx_t_19;
  __pyx_t_5numpy_int64_t __pyx_t_20;
  __pyx_t_5numpy_int64_t __pyx_t_21;
  __pyx_t_5numpy_int64_t __pyx_t_22;
  __pyx_t_5numpy_int64_t __pyx_t_23;
  __pyx_t_5numpy_int64_t __pyx_t_24;
  __pyx_t_5numpy_intp_t __pyx_t_25;
  __pyx_t_5numpy_intp_t __pyx_t_26;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1pixelize_sph_kernel_projection", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1077
 *     cdef np.float64_t q_ij2, posx_diff, posy_diff, ih_j2
 *     cdef np.float64_t x, y, dx, dy, idx, idy, h_j2, px, py
 *     cdef np.float64_t period_x = 0, period_y = 0             # <<<<<<<<<<<<<<
 *     cdef int i, j, ii, jj
 *     cdef np.float64_t[:] _weight_field
 */
  __pyx_v_period_x = 0.0;
  __pyx_v_period_y = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1085
 *     cdef np.float64_t * yiterv
 * 
 *     if weight_field is not None:             # <<<<<<<<<<<<<<
 *         _weight_field = weight_field
 * 
 */
  __pyx_t_1 = (__pyx_v_weight_field != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1086
 * 
 *     if weight_field is not None:
 *         _weight_field = weight_field             # <<<<<<<<<<<<<<
 * 
 *     if period is not None:
 */
    __pyx_t_3 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_v_weight_field, PyBUF_WRITABLE); if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(0, 1086, __pyx_L1_error)
    __pyx_v__weight_field = __pyx_t_3;
    __pyx_t_3.memview = NULL;
    __pyx_t_3.data = NULL;

    /* "yt/utilities/lib/pixelization_routines.pyx":1085
 *     cdef np.float64_t * yiterv
 * 
 *     if weight_field is not None:             # <<<<<<<<<<<<<<
 *         _weight_field = weight_field
 * 
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1088
 *         _weight_field = weight_field
 * 
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  __pyx_t_2 = (__pyx_v_period != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1089
 * 
 *     if period is not None:
 *         period_x = period[0]             # <<<<<<<<<<<<<<
 *         period_y = period[1]
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_period, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1089, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1089, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_period_x = __pyx_t_5;

    /* "yt/utilities/lib/pixelization_routines.pyx":1090
 *     if period is not None:
 *         period_x = period[0]
 *         period_y = period[1]             # <<<<<<<<<<<<<<
 * 
 *     # we find the x and y range over which we have pixels and we find how many
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_period, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1090, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_period_y = __pyx_t_5;

    /* "yt/utilities/lib/pixelization_routines.pyx":1088
 *         _weight_field = weight_field
 * 
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1094
 *     # we find the x and y range over which we have pixels and we find how many
 *     # pixels we have in each dimension
 *     xsize, ysize = buff.shape[0], buff.shape[1]             # <<<<<<<<<<<<<<
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 */
  __pyx_t_6 = (__pyx_v_buff.shape[0]);
  __pyx_t_7 = (__pyx_v_buff.shape[1]);
  __pyx_v_xsize = __pyx_t_6;
  __pyx_v_ysize = __pyx_t_7;

  /* "yt/utilities/lib/pixelization_routines.pyx":1095
 *     # pixels we have in each dimension
 *     xsize, ysize = buff.shape[0], buff.shape[1]
 *     x_min = bounds[0]             # <<<<<<<<<<<<<<
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_x_min = __pyx_t_5;

  /* "yt/utilities/lib/pixelization_routines.pyx":1096
 *     xsize, ysize = buff.shape[0], buff.shape[1]
 *     x_min = bounds[0]
 *     x_max = bounds[1]             # <<<<<<<<<<<<<<
 *     y_min = bounds[2]
 *     y_max = bounds[3]
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_bounds, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1096, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_x_max = __pyx_t_5;

  /* "yt/utilities/lib/pixelization_routines.pyx":1097
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 *     y_min = bounds[2]             # <<<<<<<<<<<<<<
 *     y_max = bounds[3]
 * 
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_bounds, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_y_min = __pyx_t_5;

  /* "yt/utilities/lib/pixelization_routines.pyx":1098
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 *     y_max = bounds[3]             # <<<<<<<<<<<<<<
 * 
 *     dx = (x_max - x_min) / xsize
 */
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_bounds, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_5 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_y_max = __pyx_t_5;

  /* "yt/utilities/lib/pixelization_routines.pyx":1100
 *     y_max = bounds[3]
 * 
 *     dx = (x_max - x_min) / xsize             # <<<<<<<<<<<<<<
 *     dy = (y_max - y_min) / ysize
 * 
 */
  __pyx_v_dx = ((__pyx_v_x_max - __pyx_v_x_min) / ((__pyx_t_5numpy_float64_t)__pyx_v_xsize));

  /* "yt/utilities/lib/pixelization_routines.pyx":1101
 * 
 *     dx = (x_max - x_min) / xsize
 *     dy = (y_max - y_min) / ysize             # <<<<<<<<<<<<<<
 * 
 *     idx = 1.0/dx
 */
  __pyx_v_dy = ((__pyx_v_y_max - __pyx_v_y_min) / ((__pyx_t_5numpy_float64_t)__pyx_v_ysize));

  /* "yt/utilities/lib/pixelization_routines.pyx":1103
 *     dy = (y_max - y_min) / ysize
 * 
 *     idx = 1.0/dx             # <<<<<<<<<<<<<<
 *     idy = 1.0/dy
 * 
 */
  __pyx_v_idx = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_dx);

  /* "yt/utilities/lib/pixelization_routines.pyx":1104
 * 
 *     idx = 1.0/dx
 *     idy = 1.0/dy             # <<<<<<<<<<<<<<
 * 
 *     if kernel_name not in kernel_tables:
 */
  __pyx_v_idy = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_dy);

  /* "yt/utilities/lib/pixelization_routines.pyx":1106
 *     idy = 1.0/dy
 * 
 *     if kernel_name not in kernel_tables:             # <<<<<<<<<<<<<<
 *         kernel_tables[kernel_name] = SPHKernelInterpolationTable(kernel_name)
 *     cdef SPHKernelInterpolationTable itab = kernel_tables[kernel_name]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_kernel_tables); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_kernel_name, __pyx_t_4, Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1107
 * 
 *     if kernel_name not in kernel_tables:
 *         kernel_tables[kernel_name] = SPHKernelInterpolationTable(kernel_name)             # <<<<<<<<<<<<<<
 *     cdef SPHKernelInterpolationTable itab = kernel_tables[kernel_name]
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable), __pyx_v_kernel_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_kernel_tables); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(PyObject_SetItem(__pyx_t_8, __pyx_v_kernel_name, __pyx_t_4) < 0)) __PYX_ERR(0, 1107, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1106
 *     idy = 1.0/dy
 * 
 *     if kernel_name not in kernel_tables:             # <<<<<<<<<<<<<<
 *         kernel_tables[kernel_name] = SPHKernelInterpolationTable(kernel_name)
 *     cdef SPHKernelInterpolationTable itab = kernel_tables[kernel_name]
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1108
 *     if kernel_name not in kernel_tables:
 *         kernel_tables[kernel_name] = SPHKernelInterpolationTable(kernel_name)
 *     cdef SPHKernelInterpolationTable itab = kernel_tables[kernel_name]             # <<<<<<<<<<<<<<
 * 
 *     with nogil, parallel():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_kernel_tables); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_v_kernel_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable))))) __PYX_ERR(0, 1108, __pyx_L1_error)
  __pyx_v_itab = ((struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1110
 *     cdef SPHKernelInterpolationTable itab = kernel_tables[kernel_name]
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         # loop through every particle
 *         # NOTE: this loop can be quite time consuming. However it is easily
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
            PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
            int __pyx_parallel_why;
            __pyx_parallel_why = 0;
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel private(__pyx_v_i, __pyx_v_local_buff, __pyx_v_xiter, __pyx_v_xiterv, __pyx_v_xxi, __pyx_v_yiter, __pyx_v_yiterv, __pyx_v_yyi) reduction(*:__pyx_v_prefactor_j) private(__pyx_t_1, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_2, __pyx_t_20, __pyx_t_21, __pyx_t_22, __pyx_t_23, __pyx_t_24, __pyx_t_25, __pyx_t_26, __pyx_t_6, __pyx_t_7, __pyx_t_9) private(__pyx_filename, __pyx_lineno, __pyx_clineno) shared(__pyx_parallel_why, __pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb)
            #endif /* _OPENMP */
            {
                #ifdef _OPENMP
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                Py_BEGIN_ALLOW_THREADS
                #endif /* _OPENMP */
                /* Initialize private variables to invalid values */
                __pyx_v_i = ((int)0xbad0bad0);
                __pyx_v_local_buff = ((__pyx_t_5numpy_float64_t *)1);
                __pyx_v_xiter = ((int *)1);
                __pyx_v_xiterv = ((__pyx_t_5numpy_float64_t *)1);
                __pyx_v_xxi = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                __pyx_v_yiter = ((int *)1);
                __pyx_v_yiterv = ((__pyx_t_5numpy_float64_t *)1);
                __pyx_v_yyi = ((__pyx_t_5numpy_int64_t)0xbad0bad0);

                /* "yt/utilities/lib/pixelization_routines.pyx":1126
 *         # intermediate results.
 * 
 *         local_buff = <np.float64_t *> malloc(sizeof(np.float64_t) * xsize * ysize)             # <<<<<<<<<<<<<<
 *         xiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 */
                __pyx_v_local_buff = ((__pyx_t_5numpy_float64_t *)malloc((((sizeof(__pyx_t_5numpy_float64_t)) * __pyx_v_xsize) * __pyx_v_ysize)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1127
 * 
 *         local_buff = <np.float64_t *> malloc(sizeof(np.float64_t) * xsize * ysize)
 *         xiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)             # <<<<<<<<<<<<<<
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         xiter = <int *> malloc(sizeof(int) * 2)
 */
                __pyx_v_xiterv = ((__pyx_t_5numpy_float64_t *)malloc(((sizeof(__pyx_t_5numpy_float64_t)) * 2)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1128
 *         local_buff = <np.float64_t *> malloc(sizeof(np.float64_t) * xsize * ysize)
 *         xiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)             # <<<<<<<<<<<<<<
 *         xiter = <int *> malloc(sizeof(int) * 2)
 *         yiter = <int *> malloc(sizeof(int) * 2)
 */
                __pyx_v_yiterv = ((__pyx_t_5numpy_float64_t *)malloc(((sizeof(__pyx_t_5numpy_float64_t)) * 2)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1129
 *         xiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         xiter = <int *> malloc(sizeof(int) * 2)             # <<<<<<<<<<<<<<
 *         yiter = <int *> malloc(sizeof(int) * 2)
 *         xiter[0] = yiter[0] = 0
 */
                __pyx_v_xiter = ((int *)malloc(((sizeof(int)) * 2)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1130
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         xiter = <int *> malloc(sizeof(int) * 2)
 *         yiter = <int *> malloc(sizeof(int) * 2)             # <<<<<<<<<<<<<<
 *         xiter[0] = yiter[0] = 0
 *         xiterv[0] = yiterv[0] = 0.0
 */
                __pyx_v_yiter = ((int *)malloc(((sizeof(int)) * 2)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1131
 *         xiter = <int *> malloc(sizeof(int) * 2)
 *         yiter = <int *> malloc(sizeof(int) * 2)
 *         xiter[0] = yiter[0] = 0             # <<<<<<<<<<<<<<
 *         xiterv[0] = yiterv[0] = 0.0
 *         for i in range(xsize * ysize):
 */
                (__pyx_v_xiter[0]) = 0;
                (__pyx_v_yiter[0]) = 0;

                /* "yt/utilities/lib/pixelization_routines.pyx":1132
 *         yiter = <int *> malloc(sizeof(int) * 2)
 *         xiter[0] = yiter[0] = 0
 *         xiterv[0] = yiterv[0] = 0.0             # <<<<<<<<<<<<<<
 *         for i in range(xsize * ysize):
 *             local_buff[i] = 0.0
 */
                (__pyx_v_xiterv[0]) = 0.0;
                (__pyx_v_yiterv[0]) = 0.0;

                /* "yt/utilities/lib/pixelization_routines.pyx":1133
 *         xiter[0] = yiter[0] = 0
 *         xiterv[0] = yiterv[0] = 0.0
 *         for i in range(xsize * ysize):             # <<<<<<<<<<<<<<
 *             local_buff[i] = 0.0
 * 
 */
                __pyx_t_9 = (__pyx_v_xsize * __pyx_v_ysize);
                __pyx_t_10 = __pyx_t_9;
                for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
                  __pyx_v_i = __pyx_t_11;

                  /* "yt/utilities/lib/pixelization_routines.pyx":1134
 *         xiterv[0] = yiterv[0] = 0.0
 *         for i in range(xsize * ysize):
 *             local_buff[i] = 0.0             # <<<<<<<<<<<<<<
 * 
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 */
                  (__pyx_v_local_buff[__pyx_v_i]) = 0.0;
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":1136
 *             local_buff[i] = 0.0
 * 
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):             # <<<<<<<<<<<<<<
 *             if j % 100000 == 0:
 *                 with gil:
 */
                __pyx_t_7 = (__pyx_v_posx.shape[0]);
                if ((1 == 0)) abort();
                {
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp0 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp1 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    int __pyx_parallel_temp2 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp3 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp4 = ((int)0xbad0bad0);
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp5 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp6 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp7 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp8 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp9 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp10 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp11 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp12 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp13 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp14 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp15 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp16 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp17 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp18 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
                    PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
                    int __pyx_parallel_why;
                    __pyx_parallel_why = 0;
                    __pyx_t_12 = (__pyx_t_7 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_12 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for lastprivate(__pyx_v_h_j2) lastprivate(__pyx_v_ih_j2) lastprivate(__pyx_v_ii) firstprivate(__pyx_v_j) lastprivate(__pyx_v_j) lastprivate(__pyx_v_jj) lastprivate(__pyx_v_posx_diff) lastprivate(__pyx_v_posy_diff) lastprivate(__pyx_v_px) lastprivate(__pyx_v_py) lastprivate(__pyx_v_q_ij2) lastprivate(__pyx_v_x) lastprivate(__pyx_v_x0) lastprivate(__pyx_v_x1) lastprivate(__pyx_v_xi) lastprivate(__pyx_v_y) lastprivate(__pyx_v_y0) lastprivate(__pyx_v_y1) lastprivate(__pyx_v_yi) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_12; __pyx_t_6++){
                            if (__pyx_parallel_why < 2)
                            {
                                __pyx_v_j = (int)(0 + 1 * __pyx_t_6);
                                /* Initialize private variables to invalid values */
                                __pyx_v_h_j2 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_ih_j2 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_ii = ((int)0xbad0bad0);
                                __pyx_v_jj = ((int)0xbad0bad0);
                                __pyx_v_posx_diff = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_posy_diff = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_px = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_py = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_q_ij2 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_x = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_x0 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_x1 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_xi = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_y = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_y0 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_y1 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_yi = ((__pyx_t_5numpy_int64_t)0xbad0bad0);

                                /* "yt/utilities/lib/pixelization_routines.pyx":1137
 * 
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 *             if j % 100000 == 0:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     PyErr_CheckSignals()
 */
                                __pyx_t_2 = (((__pyx_v_j % 0x186A0) == 0) != 0);
                                if (__pyx_t_2) {

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1138
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 *             if j % 100000 == 0:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     PyErr_CheckSignals()
 * 
 */
                                  {
                                      #ifdef WITH_THREAD
                                      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                      #endif
                                      /*try:*/ {

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1139
 *             if j % 100000 == 0:
 *                 with gil:
 *                     PyErr_CheckSignals()             # <<<<<<<<<<<<<<
 * 
 *             xiter[1] = yiter[1] = 999
 */
                                        __pyx_t_11 = PyErr_CheckSignals(); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 1139, __pyx_L23_error)
                                      }

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1138
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 *             if j % 100000 == 0:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     PyErr_CheckSignals()
 * 
 */
                                      /*finally:*/ {
                                        /*normal exit:*/{
                                          #ifdef WITH_THREAD
                                          __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                          #endif
                                          goto __pyx_L24;
                                        }
                                        __pyx_L23_error: {
                                          #ifdef WITH_THREAD
                                          __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                          #endif
                                          goto __pyx_L17_error;
                                        }
                                        __pyx_L24:;
                                      }
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1137
 * 
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 *             if j % 100000 == 0:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     PyErr_CheckSignals()
 */
                                }

                                /* "yt/utilities/lib/pixelization_routines.pyx":1141
 *                     PyErr_CheckSignals()
 * 
 *             xiter[1] = yiter[1] = 999             # <<<<<<<<<<<<<<
 * 
 *             if check_period == 1:
 */
                                (__pyx_v_xiter[1]) = 0x3E7;
                                (__pyx_v_yiter[1]) = 0x3E7;

                                /* "yt/utilities/lib/pixelization_routines.pyx":1143
 *             xiter[1] = yiter[1] = 999
 * 
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1
 */
                                __pyx_t_2 = ((__pyx_v_check_period == 1) != 0);
                                if (__pyx_t_2) {

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1144
 * 
 *             if check_period == 1:
 *                 if posx[j] - hsml[j] < x_min:             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
                                  __pyx_t_13 = __pyx_v_j;
                                  __pyx_t_14 = __pyx_v_j;
                                  __pyx_t_2 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posx.data + __pyx_t_13 * __pyx_v_posx.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_14 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_x_min) != 0);
                                  if (__pyx_t_2) {

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1145
 *             if check_period == 1:
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:
 */
                                    (__pyx_v_xiter[1]) = 1;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1146
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x             # <<<<<<<<<<<<<<
 *                 elif posx[j] + hsml[j] > x_max:
 *                     xiter[1] = -1
 */
                                    (__pyx_v_xiterv[1]) = __pyx_v_period_x;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1144
 * 
 *             if check_period == 1:
 *                 if posx[j] - hsml[j] < x_min:             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
                                    goto __pyx_L26;
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1147
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
                                  __pyx_t_14 = __pyx_v_j;
                                  __pyx_t_13 = __pyx_v_j;
                                  __pyx_t_2 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posx.data + __pyx_t_14 * __pyx_v_posx.strides[0]) ))) + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_x_max) != 0);
                                  if (__pyx_t_2) {

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1148
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:
 *                     xiter[1] = -1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:
 */
                                    (__pyx_v_xiter[1]) = -1;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1149
 *                 elif posx[j] + hsml[j] > x_max:
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x             # <<<<<<<<<<<<<<
 *                 if posy[j] - hsml[j] < y_min:
 *                     yiter[1] = +1
 */
                                    (__pyx_v_xiterv[1]) = (-__pyx_v_period_x);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1147
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
                                  }
                                  __pyx_L26:;

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1150
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
                                  __pyx_t_13 = __pyx_v_j;
                                  __pyx_t_14 = __pyx_v_j;
                                  __pyx_t_2 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posy.data + __pyx_t_13 * __pyx_v_posy.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_14 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_y_min) != 0);
                                  if (__pyx_t_2) {

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1151
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:
 *                     yiter[1] = +1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:
 */
                                    (__pyx_v_yiter[1]) = 1;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1152
 *                 if posy[j] - hsml[j] < y_min:
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y             # <<<<<<<<<<<<<<
 *                 elif posy[j] + hsml[j] > y_max:
 *                     yiter[1] = -1
 */
                                    (__pyx_v_yiterv[1]) = __pyx_v_period_y;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1150
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
                                    goto __pyx_L27;
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1153
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
                                  __pyx_t_14 = __pyx_v_j;
                                  __pyx_t_13 = __pyx_v_j;
                                  __pyx_t_2 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posy.data + __pyx_t_14 * __pyx_v_posy.strides[0]) ))) + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_y_max) != 0);
                                  if (__pyx_t_2) {

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1154
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:
 *                     yiter[1] = -1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = -period_y
 * 
 */
                                    (__pyx_v_yiter[1]) = -1;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1155
 *                 elif posy[j] + hsml[j] > y_max:
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y             # <<<<<<<<<<<<<<
 * 
 *             # we set the smoothing length squared with lower limit of the pixel
 */
                                    (__pyx_v_yiterv[1]) = (-__pyx_v_period_y);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1153
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
                                  }
                                  __pyx_L27:;

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1143
 *             xiter[1] = yiter[1] = 999
 * 
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1
 */
                                }

                                /* "yt/utilities/lib/pixelization_routines.pyx":1158
 * 
 *             # we set the smoothing length squared with lower limit of the pixel
 *             h_j2 = fmax(hsml[j]*hsml[j], dx*dy)             # <<<<<<<<<<<<<<
 *             ih_j2 = 1.0/h_j2
 * 
 */
                                __pyx_t_13 = __pyx_v_j;
                                __pyx_t_14 = __pyx_v_j;
                                __pyx_v_h_j2 = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) ))) * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_14 * __pyx_v_hsml.strides[0]) )))), (__pyx_v_dx * __pyx_v_dy));

                                /* "yt/utilities/lib/pixelization_routines.pyx":1159
 *             # we set the smoothing length squared with lower limit of the pixel
 *             h_j2 = fmax(hsml[j]*hsml[j], dx*dy)
 *             ih_j2 = 1.0/h_j2             # <<<<<<<<<<<<<<
 * 
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**2 * quantity_to_smooth[j]
 */
                                __pyx_v_ih_j2 = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_h_j2);

                                /* "yt/utilities/lib/pixelization_routines.pyx":1161
 *             ih_j2 = 1.0/h_j2
 * 
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**2 * quantity_to_smooth[j]             # <<<<<<<<<<<<<<
 *             if weight_field is not None:
 *                 prefactor_j *= _weight_field[j]
 */
                                __pyx_t_14 = __pyx_v_j;
                                __pyx_t_13 = __pyx_v_j;
                                __pyx_t_15 = __pyx_v_j;
                                __pyx_t_16 = __pyx_v_j;
                                __pyx_v_prefactor_j = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pmass.data + __pyx_t_14 * __pyx_v_pmass.strides[0]) ))) / (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pdens.data + __pyx_t_13 * __pyx_v_pdens.strides[0]) )))) / pow((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) ))), 2.0)) * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_quantity_to_smooth.data + __pyx_t_16 * __pyx_v_quantity_to_smooth.strides[0]) ))));

                                /* "yt/utilities/lib/pixelization_routines.pyx":1162
 * 
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**2 * quantity_to_smooth[j]
 *             if weight_field is not None:             # <<<<<<<<<<<<<<
 *                 prefactor_j *= _weight_field[j]
 * 
 */
                                __pyx_t_2 = (__pyx_v_weight_field != Py_None);
                                __pyx_t_1 = (__pyx_t_2 != 0);
                                if (__pyx_t_1) {

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1163
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**2 * quantity_to_smooth[j]
 *             if weight_field is not None:
 *                 prefactor_j *= _weight_field[j]             # <<<<<<<<<<<<<<
 * 
 *             for ii in range(2):
 */
                                  __pyx_t_16 = __pyx_v_j;
                                  __pyx_v_prefactor_j = (__pyx_v_prefactor_j * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v__weight_field.data + __pyx_t_16 * __pyx_v__weight_field.strides[0]) ))));

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1162
 * 
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**2 * quantity_to_smooth[j]
 *             if weight_field is not None:             # <<<<<<<<<<<<<<
 *                 prefactor_j *= _weight_field[j]
 * 
 */
                                }

                                /* "yt/utilities/lib/pixelization_routines.pyx":1165
 *                 prefactor_j *= _weight_field[j]
 * 
 *             for ii in range(2):             # <<<<<<<<<<<<<<
 *                 if xiter[ii] == 999: continue
 *                 px = posx[j] + xiterv[ii]
 */
                                for (__pyx_t_11 = 0; __pyx_t_11 < 2; __pyx_t_11+=1) {
                                  __pyx_v_ii = __pyx_t_11;

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1166
 * 
 *             for ii in range(2):
 *                 if xiter[ii] == 999: continue             # <<<<<<<<<<<<<<
 *                 px = posx[j] + xiterv[ii]
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 */
                                  __pyx_t_1 = (((__pyx_v_xiter[__pyx_v_ii]) == 0x3E7) != 0);
                                  if (__pyx_t_1) {
                                    goto __pyx_L29_continue;
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1167
 *             for ii in range(2):
 *                 if xiter[ii] == 999: continue
 *                 px = posx[j] + xiterv[ii]             # <<<<<<<<<<<<<<
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 *                 for jj in range(2):
 */
                                  __pyx_t_16 = __pyx_v_j;
                                  __pyx_v_px = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posx.data + __pyx_t_16 * __pyx_v_posx.strides[0]) ))) + (__pyx_v_xiterv[__pyx_v_ii]));

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1168
 *                 if xiter[ii] == 999: continue
 *                 px = posx[j] + xiterv[ii]
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue             # <<<<<<<<<<<<<<
 *                 for jj in range(2):
 *                     if yiter[jj] == 999: continue
 */
                                  __pyx_t_16 = __pyx_v_j;
                                  __pyx_t_2 = (((__pyx_v_px + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_x_min) != 0);
                                  if (!__pyx_t_2) {
                                  } else {
                                    __pyx_t_1 = __pyx_t_2;
                                    goto __pyx_L33_bool_binop_done;
                                  }
                                  __pyx_t_16 = __pyx_v_j;
                                  __pyx_t_2 = (((__pyx_v_px - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_x_max) != 0);
                                  __pyx_t_1 = __pyx_t_2;
                                  __pyx_L33_bool_binop_done:;
                                  if (__pyx_t_1) {
                                    goto __pyx_L29_continue;
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1169
 *                 px = posx[j] + xiterv[ii]
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 *                 for jj in range(2):             # <<<<<<<<<<<<<<
 *                     if yiter[jj] == 999: continue
 *                     py = posy[j] + yiterv[jj]
 */
                                  for (__pyx_t_17 = 0; __pyx_t_17 < 2; __pyx_t_17+=1) {
                                    __pyx_v_jj = __pyx_t_17;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1170
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 *                 for jj in range(2):
 *                     if yiter[jj] == 999: continue             # <<<<<<<<<<<<<<
 *                     py = posy[j] + yiterv[jj]
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue
 */
                                    __pyx_t_1 = (((__pyx_v_yiter[__pyx_v_jj]) == 0x3E7) != 0);
                                    if (__pyx_t_1) {
                                      goto __pyx_L35_continue;
                                    }

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1171
 *                 for jj in range(2):
 *                     if yiter[jj] == 999: continue
 *                     py = posy[j] + yiterv[jj]             # <<<<<<<<<<<<<<
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue
 * 
 */
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_v_py = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posy.data + __pyx_t_16 * __pyx_v_posy.strides[0]) ))) + (__pyx_v_yiterv[__pyx_v_jj]));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1172
 *                     if yiter[jj] == 999: continue
 *                     py = posy[j] + yiterv[jj]
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue             # <<<<<<<<<<<<<<
 * 
 *                     # here we find the pixels which this particle contributes to
 */
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_t_2 = (((__pyx_v_py + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_y_min) != 0);
                                    if (!__pyx_t_2) {
                                    } else {
                                      __pyx_t_1 = __pyx_t_2;
                                      goto __pyx_L39_bool_binop_done;
                                    }
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_t_2 = (((__pyx_v_py - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_y_max) != 0);
                                    __pyx_t_1 = __pyx_t_2;
                                    __pyx_L39_bool_binop_done:;
                                    if (__pyx_t_1) {
                                      goto __pyx_L35_continue;
                                    }

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1175
 * 
 *                     # here we find the pixels which this particle contributes to
 *                     x0 = <np.int64_t> ((px - hsml[j] - x_min)*idx)             # <<<<<<<<<<<<<<
 *                     x1 = <np.int64_t> ((px + hsml[j] - x_min)*idx)
 *                     x0 = iclip(x0-1, 0, xsize)
 */
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_v_x0 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_px - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_x_min) * __pyx_v_idx));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1176
 *                     # here we find the pixels which this particle contributes to
 *                     x0 = <np.int64_t> ((px - hsml[j] - x_min)*idx)
 *                     x1 = <np.int64_t> ((px + hsml[j] - x_min)*idx)             # <<<<<<<<<<<<<<
 *                     x0 = iclip(x0-1, 0, xsize)
 *                     x1 = iclip(x1+1, 0, xsize)
 */
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_v_x1 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_px + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_x_min) * __pyx_v_idx));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1177
 *                     x0 = <np.int64_t> ((px - hsml[j] - x_min)*idx)
 *                     x1 = <np.int64_t> ((px + hsml[j] - x_min)*idx)
 *                     x0 = iclip(x0-1, 0, xsize)             # <<<<<<<<<<<<<<
 *                     x1 = iclip(x1+1, 0, xsize)
 * 
 */
                                    __pyx_v_x0 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_x0 - 1), 0, __pyx_v_xsize);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1178
 *                     x1 = <np.int64_t> ((px + hsml[j] - x_min)*idx)
 *                     x0 = iclip(x0-1, 0, xsize)
 *                     x1 = iclip(x1+1, 0, xsize)             # <<<<<<<<<<<<<<
 * 
 *                     y0 = <np.int64_t> ((py - hsml[j] - y_min)*idy)
 */
                                    __pyx_v_x1 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_x1 + 1), 0, __pyx_v_xsize);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1180
 *                     x1 = iclip(x1+1, 0, xsize)
 * 
 *                     y0 = <np.int64_t> ((py - hsml[j] - y_min)*idy)             # <<<<<<<<<<<<<<
 *                     y1 = <np.int64_t> ((py + hsml[j] - y_min)*idy)
 *                     y0 = iclip(y0-1, 0, ysize)
 */
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_v_y0 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_py - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_y_min) * __pyx_v_idy));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1181
 * 
 *                     y0 = <np.int64_t> ((py - hsml[j] - y_min)*idy)
 *                     y1 = <np.int64_t> ((py + hsml[j] - y_min)*idy)             # <<<<<<<<<<<<<<
 *                     y0 = iclip(y0-1, 0, ysize)
 *                     y1 = iclip(y1+1, 0, ysize)
 */
                                    __pyx_t_16 = __pyx_v_j;
                                    __pyx_v_y1 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_py + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_16 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_y_min) * __pyx_v_idy));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1182
 *                     y0 = <np.int64_t> ((py - hsml[j] - y_min)*idy)
 *                     y1 = <np.int64_t> ((py + hsml[j] - y_min)*idy)
 *                     y0 = iclip(y0-1, 0, ysize)             # <<<<<<<<<<<<<<
 *                     y1 = iclip(y1+1, 0, ysize)
 * 
 */
                                    __pyx_v_y0 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_y0 - 1), 0, __pyx_v_ysize);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1183
 *                     y1 = <np.int64_t> ((py + hsml[j] - y_min)*idy)
 *                     y0 = iclip(y0-1, 0, ysize)
 *                     y1 = iclip(y1+1, 0, ysize)             # <<<<<<<<<<<<<<
 * 
 *                     # found pixels we deposit on, loop through those pixels
 */
                                    __pyx_v_y1 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_y1 + 1), 0, __pyx_v_ysize);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1186
 * 
 *                     # found pixels we deposit on, loop through those pixels
 *                     for xi in range(x0, x1):             # <<<<<<<<<<<<<<
 *                         # we use the centre of the pixel to calculate contribution
 *                         x = (xi + 0.5) * dx + x_min
 */
                                    __pyx_t_18 = __pyx_v_x1;
                                    __pyx_t_19 = __pyx_t_18;
                                    for (__pyx_t_20 = __pyx_v_x0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
                                      __pyx_v_xi = __pyx_t_20;

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1188
 *                     for xi in range(x0, x1):
 *                         # we use the centre of the pixel to calculate contribution
 *                         x = (xi + 0.5) * dx + x_min             # <<<<<<<<<<<<<<
 * 
 *                         posx_diff = px - x
 */
                                      __pyx_v_x = (((__pyx_v_xi + 0.5) * __pyx_v_dx) + __pyx_v_x_min);

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1190
 *                         x = (xi + 0.5) * dx + x_min
 * 
 *                         posx_diff = px - x             # <<<<<<<<<<<<<<
 *                         posx_diff = posx_diff * posx_diff
 * 
 */
                                      __pyx_v_posx_diff = (__pyx_v_px - __pyx_v_x);

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1191
 * 
 *                         posx_diff = px - x
 *                         posx_diff = posx_diff * posx_diff             # <<<<<<<<<<<<<<
 * 
 *                         if posx_diff > h_j2: continue
 */
                                      __pyx_v_posx_diff = (__pyx_v_posx_diff * __pyx_v_posx_diff);

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1193
 *                         posx_diff = posx_diff * posx_diff
 * 
 *                         if posx_diff > h_j2: continue             # <<<<<<<<<<<<<<
 * 
 *                         for yi in range(y0, y1):
 */
                                      __pyx_t_1 = ((__pyx_v_posx_diff > __pyx_v_h_j2) != 0);
                                      if (__pyx_t_1) {
                                        goto __pyx_L41_continue;
                                      }

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1195
 *                         if posx_diff > h_j2: continue
 * 
 *                         for yi in range(y0, y1):             # <<<<<<<<<<<<<<
 *                             y = (yi + 0.5) * dy + y_min
 * 
 */
                                      __pyx_t_21 = __pyx_v_y1;
                                      __pyx_t_22 = __pyx_t_21;
                                      for (__pyx_t_23 = __pyx_v_y0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
                                        __pyx_v_yi = __pyx_t_23;

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1196
 * 
 *                         for yi in range(y0, y1):
 *                             y = (yi + 0.5) * dy + y_min             # <<<<<<<<<<<<<<
 * 
 *                             posy_diff = py - y
 */
                                        __pyx_v_y = (((__pyx_v_yi + 0.5) * __pyx_v_dy) + __pyx_v_y_min);

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1198
 *                             y = (yi + 0.5) * dy + y_min
 * 
 *                             posy_diff = py - y             # <<<<<<<<<<<<<<
 *                             posy_diff = posy_diff * posy_diff
 *                             if posy_diff > h_j2: continue
 */
                                        __pyx_v_posy_diff = (__pyx_v_py - __pyx_v_y);

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1199
 * 
 *                             posy_diff = py - y
 *                             posy_diff = posy_diff * posy_diff             # <<<<<<<<<<<<<<
 *                             if posy_diff > h_j2: continue
 * 
 */
                                        __pyx_v_posy_diff = (__pyx_v_posy_diff * __pyx_v_posy_diff);

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1200
 *                             posy_diff = py - y
 *                             posy_diff = posy_diff * posy_diff
 *                             if posy_diff > h_j2: continue             # <<<<<<<<<<<<<<
 * 
 *                             q_ij2 = (posx_diff + posy_diff) * ih_j2
 */
                                        __pyx_t_1 = ((__pyx_v_posy_diff > __pyx_v_h_j2) != 0);
                                        if (__pyx_t_1) {
                                          goto __pyx_L44_continue;
                                        }

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1202
 *                             if posy_diff > h_j2: continue
 * 
 *                             q_ij2 = (posx_diff + posy_diff) * ih_j2             # <<<<<<<<<<<<<<
 *                             if q_ij2 >= 1:
 *                                 continue
 */
                                        __pyx_v_q_ij2 = ((__pyx_v_posx_diff + __pyx_v_posy_diff) * __pyx_v_ih_j2);

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1203
 * 
 *                             q_ij2 = (posx_diff + posy_diff) * ih_j2
 *                             if q_ij2 >= 1:             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
                                        __pyx_t_1 = ((__pyx_v_q_ij2 >= 1.0) != 0);
                                        if (__pyx_t_1) {

                                          /* "yt/utilities/lib/pixelization_routines.pyx":1204
 *                             q_ij2 = (posx_diff + posy_diff) * ih_j2
 *                             if q_ij2 >= 1:
 *                                 continue             # <<<<<<<<<<<<<<
 * 
 *                             # see equation 32 of the SPLASH paper
 */
                                          goto __pyx_L44_continue;

                                          /* "yt/utilities/lib/pixelization_routines.pyx":1203
 * 
 *                             q_ij2 = (posx_diff + posy_diff) * ih_j2
 *                             if q_ij2 >= 1:             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
                                        }

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1208
 *                             # see equation 32 of the SPLASH paper
 *                             # now we just use the kernel projection
 *                             local_buff[xi + yi*xsize] +=  prefactor_j * itab.interpolate(q_ij2)             # <<<<<<<<<<<<<<
 * 
 *         with gil:
 */
                                        __pyx_t_24 = (__pyx_v_xi + (__pyx_v_yi * __pyx_v_xsize));
                                        (__pyx_v_local_buff[__pyx_t_24]) = ((__pyx_v_local_buff[__pyx_t_24]) + (__pyx_v_prefactor_j * __pyx_f_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_interpolate(__pyx_v_itab, __pyx_v_q_ij2)));
                                        __pyx_L44_continue:;
                                      }
                                      __pyx_L41_continue:;
                                    }
                                    __pyx_L35_continue:;
                                  }
                                  __pyx_L29_continue:;
                                }
                                goto __pyx_L49;
                                __pyx_L17_error:;
                                {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    #ifdef _OPENMP
                                    #pragma omp flush(__pyx_parallel_exc_type)
                                    #endif /* _OPENMP */
                                    if (!__pyx_parallel_exc_type) {
                                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                                    }
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                }
                                __pyx_parallel_why = 4;
                                goto __pyx_L48;
                                __pyx_L48:;
                                #ifdef _OPENMP
                                #pragma omp critical(__pyx_parallel_lastprivates2)
                                #endif /* _OPENMP */
                                {
                                    __pyx_parallel_temp0 = __pyx_v_h_j2;
                                    __pyx_parallel_temp1 = __pyx_v_ih_j2;
                                    __pyx_parallel_temp2 = __pyx_v_ii;
                                    __pyx_parallel_temp3 = __pyx_v_j;
                                    __pyx_parallel_temp4 = __pyx_v_jj;
                                    __pyx_parallel_temp5 = __pyx_v_posx_diff;
                                    __pyx_parallel_temp6 = __pyx_v_posy_diff;
                                    __pyx_parallel_temp7 = __pyx_v_prefactor_j;
                                    __pyx_parallel_temp8 = __pyx_v_px;
                                    __pyx_parallel_temp9 = __pyx_v_py;
                                    __pyx_parallel_temp10 = __pyx_v_q_ij2;
                                    __pyx_parallel_temp11 = __pyx_v_x;
                                    __pyx_parallel_temp12 = __pyx_v_x0;
                                    __pyx_parallel_temp13 = __pyx_v_x1;
                                    __pyx_parallel_temp14 = __pyx_v_xi;
                                    __pyx_parallel_temp15 = __pyx_v_y;
                                    __pyx_parallel_temp16 = __pyx_v_y0;
                                    __pyx_parallel_temp17 = __pyx_v_y1;
                                    __pyx_parallel_temp18 = __pyx_v_yi;
                                }
                                __pyx_L49:;
                                #ifdef _OPENMP
                                #pragma omp flush(__pyx_parallel_why)
                                #endif /* _OPENMP */
                            }
                        }
                    }
                    if (__pyx_parallel_exc_type) {
                      /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
                      __pyx_parallel_why = 4;
                    }
                    if (__pyx_parallel_why) {
                      __pyx_v_h_j2 = __pyx_parallel_temp0;
                      __pyx_v_ih_j2 = __pyx_parallel_temp1;
                      __pyx_v_ii = __pyx_parallel_temp2;
                      __pyx_v_j = __pyx_parallel_temp3;
                      __pyx_v_jj = __pyx_parallel_temp4;
                      __pyx_v_posx_diff = __pyx_parallel_temp5;
                      __pyx_v_posy_diff = __pyx_parallel_temp6;
                      __pyx_v_prefactor_j = __pyx_parallel_temp7;
                      __pyx_v_px = __pyx_parallel_temp8;
                      __pyx_v_py = __pyx_parallel_temp9;
                      __pyx_v_q_ij2 = __pyx_parallel_temp10;
                      __pyx_v_x = __pyx_parallel_temp11;
                      __pyx_v_x0 = __pyx_parallel_temp12;
                      __pyx_v_x1 = __pyx_parallel_temp13;
                      __pyx_v_xi = __pyx_parallel_temp14;
                      __pyx_v_y = __pyx_parallel_temp15;
                      __pyx_v_y0 = __pyx_parallel_temp16;
                      __pyx_v_y1 = __pyx_parallel_temp17;
                      __pyx_v_yi = __pyx_parallel_temp18;
                      switch (__pyx_parallel_why) {
                            case 4:
                        {
                            #ifdef WITH_THREAD
                            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                            #endif
                            __Pyx_GIVEREF(__pyx_parallel_exc_type);
                            __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                            __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                            #ifdef WITH_THREAD
                            __Pyx_PyGILState_Release(__pyx_gilstate_save);
                            #endif
                        }
                        goto __pyx_L11_error;
                      }
                    }
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":1210
 *                             local_buff[xi + yi*xsize] +=  prefactor_j * itab.interpolate(q_ij2)
 * 
 *         with gil:             # <<<<<<<<<<<<<<
 *             for xxi in range(xsize):
 *                 for yyi in range(ysize):
 */
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    /*try:*/ {

                      /* "yt/utilities/lib/pixelization_routines.pyx":1211
 * 
 *         with gil:
 *             for xxi in range(xsize):             # <<<<<<<<<<<<<<
 *                 for yyi in range(ysize):
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]
 */
                      __pyx_t_9 = __pyx_v_xsize;
                      __pyx_t_10 = __pyx_t_9;
                      for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_10; __pyx_t_18+=1) {
                        __pyx_v_xxi = __pyx_t_18;

                        /* "yt/utilities/lib/pixelization_routines.pyx":1212
 *         with gil:
 *             for xxi in range(xsize):
 *                 for yyi in range(ysize):             # <<<<<<<<<<<<<<
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]
 *         free(local_buff)
 */
                        __pyx_t_25 = __pyx_v_ysize;
                        __pyx_t_26 = __pyx_t_25;
                        for (__pyx_t_19 = 0; __pyx_t_19 < __pyx_t_26; __pyx_t_19+=1) {
                          __pyx_v_yyi = __pyx_t_19;

                          /* "yt/utilities/lib/pixelization_routines.pyx":1213
 *             for xxi in range(xsize):
 *                 for yyi in range(ysize):
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]             # <<<<<<<<<<<<<<
 *         free(local_buff)
 *         free(xiterv)
 */
                          __pyx_t_20 = __pyx_v_xxi;
                          __pyx_t_21 = __pyx_v_yyi;
                          *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_20 * __pyx_v_buff.strides[0]) ) + __pyx_t_21 * __pyx_v_buff.strides[1]) )) += (__pyx_v_local_buff[(__pyx_v_xxi + (__pyx_v_yyi * __pyx_v_xsize))]);
                        }
                      }
                    }

                    /* "yt/utilities/lib/pixelization_routines.pyx":1210
 *                             local_buff[xi + yi*xsize] +=  prefactor_j * itab.interpolate(q_ij2)
 * 
 *         with gil:             # <<<<<<<<<<<<<<
 *             for xxi in range(xsize):
 *                 for yyi in range(ysize):
 */
                    /*finally:*/ {
                      /*normal exit:*/{
                        #ifdef WITH_THREAD
                        __Pyx_PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        goto __pyx_L54;
                      }
                      __pyx_L54:;
                    }
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":1214
 *                 for yyi in range(ysize):
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]
 *         free(local_buff)             # <<<<<<<<<<<<<<
 *         free(xiterv)
 *         free(yiterv)
 */
                free(__pyx_v_local_buff);

                /* "yt/utilities/lib/pixelization_routines.pyx":1215
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]
 *         free(local_buff)
 *         free(xiterv)             # <<<<<<<<<<<<<<
 *         free(yiterv)
 *         free(xiter)
 */
                free(__pyx_v_xiterv);

                /* "yt/utilities/lib/pixelization_routines.pyx":1216
 *         free(local_buff)
 *         free(xiterv)
 *         free(yiterv)             # <<<<<<<<<<<<<<
 *         free(xiter)
 *         free(yiter)
 */
                free(__pyx_v_yiterv);

                /* "yt/utilities/lib/pixelization_routines.pyx":1217
 *         free(xiterv)
 *         free(yiterv)
 *         free(xiter)             # <<<<<<<<<<<<<<
 *         free(yiter)
 * 
 */
                free(__pyx_v_xiter);

                /* "yt/utilities/lib/pixelization_routines.pyx":1218
 *         free(yiterv)
 *         free(xiter)
 *         free(yiter)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
                free(__pyx_v_yiter);
                goto __pyx_L60;
                __pyx_L11_error:;
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    #ifdef _OPENMP
                    #pragma omp flush(__pyx_parallel_exc_type)
                    #endif /* _OPENMP */
                    if (!__pyx_parallel_exc_type) {
                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                    }
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                __pyx_parallel_why = 4;
                goto __pyx_L60;
                __pyx_L60:;
                #ifdef _OPENMP
                Py_END_ALLOW_THREADS
                #else
{
#ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                #endif /* _OPENMP */
                /* Clean up any temporaries */
                #ifdef WITH_THREAD
                __Pyx_PyGILState_Release(__pyx_gilstate_save);
                #endif
                #ifndef _OPENMP
}
#endif /* _OPENMP */
            }
            if (__pyx_parallel_exc_type) {
              /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
              __pyx_parallel_why = 4;
            }
            if (__pyx_parallel_why) {
              switch (__pyx_parallel_why) {
                    case 4:
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    __Pyx_GIVEREF(__pyx_parallel_exc_type);
                    __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                    __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                goto __pyx_L7_error;
              }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":1110
 *     cdef SPHKernelInterpolationTable itab = kernel_tables[kernel_name]
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         # loop through every particle
 *         # NOTE: this loop can be quite time consuming. However it is easily
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L8;
        }
        __pyx_L7_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L8:;
      }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1058
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_projection(             # <<<<<<<<<<<<<<
 *         np.float64_t[:, :] buff,
 *         any_float[:] posx,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_3, 1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_sph_kernel_projection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v__weight_field, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_itab);
  __PYX_XDEC_MEMVIEW(&__pyx_v_buff, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_posx, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_posy, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_hsml, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pmass, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdens, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_quantity_to_smooth, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1222
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def interpolate_sph_positions_gather(np.float64_t[:] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:, ::1] tree_positions, np.float64_t[:, ::1] field_positions,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass, np.float64_t[:] pdens,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_15interpolate_sph_positions_gather(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_2yt_9utilities_3lib_21pixelization_routines_14interpolate_sph_positions_gather[] = "\n    This function takes in arbitrary positions, field_positions, at which to\n    perform a nearest neighbor search and perform SPH interpolation.\n\n    The results are stored in the buffer, buff, which is in the same order as\n    the field_positions are put in.\n    ";
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_15interpolate_sph_positions_gather = {"interpolate_sph_positions_gather", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_15interpolate_sph_positions_gather, METH_VARARGS|METH_KEYWORDS, __pyx_doc_2yt_9utilities_3lib_21pixelization_routines_14interpolate_sph_positions_gather};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_15interpolate_sph_positions_gather(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_buff = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_tree_positions = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_field_positions = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_hsml = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pmass = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdens = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_quantity_to_smooth = { 0, 0, { 0 }, { 0 }, { 0 } };
  struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *__pyx_v_kdtree = 0;
  int __pyx_v_use_normalization;
  PyObject *__pyx_v_kernel_name = 0;
  CYTHON_UNUSED PyObject *__pyx_v_pbar = 0;
  int __pyx_v_num_neigh;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("interpolate_sph_positions_gather (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buff,&__pyx_n_s_tree_positions,&__pyx_n_s_field_positions,&__pyx_n_s_hsml,&__pyx_n_s_pmass,&__pyx_n_s_pdens,&__pyx_n_s_quantity_to_smooth,&__pyx_n_s_kdtree,&__pyx_n_s_use_normalization,&__pyx_n_s_kernel_name,&__pyx_n_s_pbar,&__pyx_n_s_num_neigh,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    values[9] = ((PyObject *)__pyx_n_u_cubic);

    /* "yt/utilities/lib/pixelization_routines.pyx":1226
 *         np.float64_t[:] hsml, np.float64_t[:] pmass, np.float64_t[:] pdens,
 *         np.float64_t[:] quantity_to_smooth, PyKDTree kdtree,
 *         int use_normalization=1, kernel_name="cubic", pbar=None,             # <<<<<<<<<<<<<<
 *         int num_neigh=32):
 * 
 */
    values[10] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tree_positions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_positions_gather", 0, 8, 12, 1); __PYX_ERR(0, 1222, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_field_positions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_positions_gather", 0, 8, 12, 2); __PYX_ERR(0, 1222, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hsml)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_positions_gather", 0, 8, 12, 3); __PYX_ERR(0, 1222, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pmass)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_positions_gather", 0, 8, 12, 4); __PYX_ERR(0, 1222, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_positions_gather", 0, 8, 12, 5); __PYX_ERR(0, 1222, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quantity_to_smooth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_positions_gather", 0, 8, 12, 6); __PYX_ERR(0, 1222, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kdtree)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_positions_gather", 0, 8, 12, 7); __PYX_ERR(0, 1222, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_use_normalization);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kernel_name);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pbar);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_neigh);
          if (value) { values[11] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "interpolate_sph_positions_gather") < 0)) __PYX_ERR(0, 1222, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buff = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_buff.memview)) __PYX_ERR(0, 1222, __pyx_L3_error)
    __pyx_v_tree_positions = __Pyx_PyObject_to_MemoryviewSlice_d_dc_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_tree_positions.memview)) __PYX_ERR(0, 1223, __pyx_L3_error)
    __pyx_v_field_positions = __Pyx_PyObject_to_MemoryviewSlice_d_dc_nn___pyx_t_5numpy_float64_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_field_positions.memview)) __PYX_ERR(0, 1223, __pyx_L3_error)
    __pyx_v_hsml = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_hsml.memview)) __PYX_ERR(0, 1224, __pyx_L3_error)
    __pyx_v_pmass = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pmass.memview)) __PYX_ERR(0, 1224, __pyx_L3_error)
    __pyx_v_pdens = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdens.memview)) __PYX_ERR(0, 1224, __pyx_L3_error)
    __pyx_v_quantity_to_smooth = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_quantity_to_smooth.memview)) __PYX_ERR(0, 1225, __pyx_L3_error)
    __pyx_v_kdtree = ((struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *)values[7]);
    if (values[8]) {
      __pyx_v_use_normalization = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_use_normalization == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1226, __pyx_L3_error)
    } else {
      __pyx_v_use_normalization = ((int)1);
    }
    __pyx_v_kernel_name = values[9];
    __pyx_v_pbar = values[10];
    if (values[11]) {
      __pyx_v_num_neigh = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_num_neigh == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1227, __pyx_L3_error)
    } else {
      __pyx_v_num_neigh = ((int)32);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("interpolate_sph_positions_gather", 0, 8, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1222, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.interpolate_sph_positions_gather", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kdtree), __pyx_ptype_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree, 1, "kdtree", 0))) __PYX_ERR(0, 1225, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_14interpolate_sph_positions_gather(__pyx_self, __pyx_v_buff, __pyx_v_tree_positions, __pyx_v_field_positions, __pyx_v_hsml, __pyx_v_pmass, __pyx_v_pdens, __pyx_v_quantity_to_smooth, __pyx_v_kdtree, __pyx_v_use_normalization, __pyx_v_kernel_name, __pyx_v_pbar, __pyx_v_num_neigh);

  /* "yt/utilities/lib/pixelization_routines.pyx":1222
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def interpolate_sph_positions_gather(np.float64_t[:] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:, ::1] tree_positions, np.float64_t[:, ::1] field_positions,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass, np.float64_t[:] pdens,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_14interpolate_sph_positions_gather(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_tree_positions, __Pyx_memviewslice __pyx_v_field_positions, __Pyx_memviewslice __pyx_v_hsml, __Pyx_memviewslice __pyx_v_pmass, __Pyx_memviewslice __pyx_v_pdens, __Pyx_memviewslice __pyx_v_quantity_to_smooth, struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *__pyx_v_kdtree, int __pyx_v_use_normalization, PyObject *__pyx_v_kernel_name, CYTHON_UNUSED PyObject *__pyx_v_pbar, int __pyx_v_num_neigh) {
  __pyx_t_5numpy_float64_t __pyx_v_q_ij;
  __pyx_t_5numpy_float64_t __pyx_v_h_j2;
  __pyx_t_5numpy_float64_t __pyx_v_ih_j2;
  __pyx_t_5numpy_float64_t __pyx_v_prefactor_j;
  __pyx_t_5numpy_float64_t __pyx_v_smoothed_quantity_j;
  __pyx_t_5numpy_float64_t *__pyx_v_pos_ptr;
  int __pyx_v_i;
  int __pyx_v_particle;
  int __pyx_v_index;
  struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *__pyx_v_queue = 0;
  __Pyx_memviewslice __pyx_v_buff_den = { 0, 0, { 0 }, { 0 }, { 0 } };
  KDTree *__pyx_v_ctree;
  struct __pyx_t_2yt_9utilities_3lib_21particle_kdtree_tools_axes_range __pyx_v_axes;
  __pyx_t_2yt_8geometry_16particle_deposit_kernel_func __pyx_v_kernel;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  KDTree *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  __pyx_t_5numpy_intp_t __pyx_t_14;
  __pyx_t_5numpy_intp_t __pyx_t_15;
  __pyx_t_5numpy_float64_t __pyx_t_16;
  __pyx_t_5numpy_float64_t __pyx_t_17;
  __pyx_t_5numpy_float64_t __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("interpolate_sph_positions_gather", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1240
 *     cdef np.float64_t * pos_ptr
 *     cdef int i, particle, index
 *     cdef BoundedPriorityQueue queue = BoundedPriorityQueue(num_neigh, True)             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:] buff_den
 *     cdef KDTree * ctree = kdtree._tree
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_num_neigh); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_True);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_queue = ((struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1242
 *     cdef BoundedPriorityQueue queue = BoundedPriorityQueue(num_neigh, True)
 *     cdef np.float64_t[:] buff_den
 *     cdef KDTree * ctree = kdtree._tree             # <<<<<<<<<<<<<<
 * 
 *     # Which dimensions shall we use for spatial distances?
 */
  __pyx_t_3 = __pyx_v_kdtree->_tree;
  __pyx_v_ctree = __pyx_t_3;

  /* "yt/utilities/lib/pixelization_routines.pyx":1246
 *     # Which dimensions shall we use for spatial distances?
 *     cdef axes_range axes
 *     set_axes_range(&axes, -1)             # <<<<<<<<<<<<<<
 * 
 *     # Only allocate memory if we are using normalization
 */
  (void)(__pyx_f_2yt_9utilities_3lib_21particle_kdtree_tools_set_axes_range((&__pyx_v_axes), -1));

  /* "yt/utilities/lib/pixelization_routines.pyx":1249
 * 
 *     # Only allocate memory if we are using normalization
 *     if use_normalization:             # <<<<<<<<<<<<<<
 *         buff_den = np.zeros(buff.shape[0], dtype="float64")
 * 
 */
  __pyx_t_4 = (__pyx_v_use_normalization != 0);
  if (__pyx_t_4) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1250
 *     # Only allocate memory if we are using normalization
 *     if use_normalization:
 *         buff_den = np.zeros(buff.shape[0], dtype="float64")             # <<<<<<<<<<<<<<
 * 
 *     kernel = get_kernel_func(kernel_name)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyInt_FromSsize_t((__pyx_v_buff.shape[0])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_n_u_float64) < 0) __PYX_ERR(0, 1250, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_6, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1250, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_buff_den = __pyx_t_7;
    __pyx_t_7.memview = NULL;
    __pyx_t_7.data = NULL;

    /* "yt/utilities/lib/pixelization_routines.pyx":1249
 * 
 *     # Only allocate memory if we are using normalization
 *     if use_normalization:             # <<<<<<<<<<<<<<
 *         buff_den = np.zeros(buff.shape[0], dtype="float64")
 * 
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1252
 *         buff_den = np.zeros(buff.shape[0], dtype="float64")
 * 
 *     kernel = get_kernel_func(kernel_name)             # <<<<<<<<<<<<<<
 * 
 *     # Loop through all the positions we want to interpolate the SPH field onto
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_kernel_name))||((__pyx_v_kernel_name) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_kernel_name)->tp_name), 0))) __PYX_ERR(0, 1252, __pyx_L1_error)
  __pyx_v_kernel = __pyx_f_2yt_8geometry_16particle_deposit_get_kernel_func(((PyObject*)__pyx_v_kernel_name));

  /* "yt/utilities/lib/pixelization_routines.pyx":1255
 * 
 *     # Loop through all the positions we want to interpolate the SPH field onto
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for i in range(0, buff.shape[0]):
 *             queue.size = 0
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "yt/utilities/lib/pixelization_routines.pyx":1256
 *     # Loop through all the positions we want to interpolate the SPH field onto
 *     with nogil:
 *         for i in range(0, buff.shape[0]):             # <<<<<<<<<<<<<<
 *             queue.size = 0
 * 
 */
        __pyx_t_8 = (__pyx_v_buff.shape[0]);
        __pyx_t_9 = __pyx_t_8;
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
          __pyx_v_i = __pyx_t_10;

          /* "yt/utilities/lib/pixelization_routines.pyx":1257
 *     with nogil:
 *         for i in range(0, buff.shape[0]):
 *             queue.size = 0             # <<<<<<<<<<<<<<
 * 
 *             # Update the current position
 */
          __pyx_v_queue->size = 0;

          /* "yt/utilities/lib/pixelization_routines.pyx":1260
 * 
 *             # Update the current position
 *             pos_ptr = &field_positions[i, 0]             # <<<<<<<<<<<<<<
 * 
 *             # Use the KDTree to find the nearest neighbors
 */
          __pyx_t_11 = __pyx_v_i;
          __pyx_t_12 = 0;
          __pyx_v_pos_ptr = (&(*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ ((char *) (((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_field_positions.data + __pyx_t_11 * __pyx_v_field_positions.strides[0]) )) + __pyx_t_12)) ))));

          /* "yt/utilities/lib/pixelization_routines.pyx":1263
 * 
 *             # Use the KDTree to find the nearest neighbors
 *             find_neighbors(pos_ptr, tree_positions, queue, ctree, -1, &axes)             # <<<<<<<<<<<<<<
 * 
 *             # Set the smoothing length squared to the square of the distance
 */
          __pyx_t_13 = __pyx_f_2yt_9utilities_3lib_21particle_kdtree_tools_find_neighbors(__pyx_v_pos_ptr, __pyx_v_tree_positions, __pyx_v_queue, __pyx_v_ctree, -1LL, (&__pyx_v_axes)); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 1263, __pyx_L5_error)

          /* "yt/utilities/lib/pixelization_routines.pyx":1267
 *             # Set the smoothing length squared to the square of the distance
 *             # of the furthest nearest neighbor
 *             h_j2 = queue.heap[0]             # <<<<<<<<<<<<<<
 *             ih_j2 = 1.0/h_j2
 * 
 */
          if (unlikely(!__pyx_v_queue->heap.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1267, __pyx_L5_error)}
          __pyx_t_12 = 0;
          __pyx_v_h_j2 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_queue->heap.data + __pyx_t_12 * __pyx_v_queue->heap.strides[0]) )));

          /* "yt/utilities/lib/pixelization_routines.pyx":1268
 *             # of the furthest nearest neighbor
 *             h_j2 = queue.heap[0]
 *             ih_j2 = 1.0/h_j2             # <<<<<<<<<<<<<<
 * 
 *             # Loop through each nearest neighbor and add contribution to the
 */
          if (unlikely(__pyx_v_h_j2 == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            __PYX_ERR(0, 1268, __pyx_L5_error)
          }
          __pyx_v_ih_j2 = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_h_j2);

          /* "yt/utilities/lib/pixelization_routines.pyx":1272
 *             # Loop through each nearest neighbor and add contribution to the
 *             # buffer
 *             for index in range(queue.max_elements):             # <<<<<<<<<<<<<<
 *                 particle = queue.pids[index]
 * 
 */
          __pyx_t_14 = __pyx_v_queue->max_elements;
          __pyx_t_15 = __pyx_t_14;
          for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_15; __pyx_t_13+=1) {
            __pyx_v_index = __pyx_t_13;

            /* "yt/utilities/lib/pixelization_routines.pyx":1273
 *             # buffer
 *             for index in range(queue.max_elements):
 *                 particle = queue.pids[index]             # <<<<<<<<<<<<<<
 * 
 *                 # Calculate contribution of this particle
 */
            if (unlikely(!__pyx_v_queue->pids.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1273, __pyx_L5_error)}
            __pyx_t_12 = __pyx_v_index;
            __pyx_v_particle = (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_queue->pids.data + __pyx_t_12 * __pyx_v_queue->pids.strides[0]) )));

            /* "yt/utilities/lib/pixelization_routines.pyx":1276
 * 
 *                 # Calculate contribution of this particle
 *                 prefactor_j = (pmass[particle] / pdens[particle] /             # <<<<<<<<<<<<<<
 *                                hsml[particle]**3)
 *                 q_ij = math.sqrt(queue.heap[index]*ih_j2)
 */
            __pyx_t_12 = __pyx_v_particle;
            __pyx_t_16 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pmass.data + __pyx_t_12 * __pyx_v_pmass.strides[0]) )));
            __pyx_t_12 = __pyx_v_particle;
            __pyx_t_17 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pdens.data + __pyx_t_12 * __pyx_v_pdens.strides[0]) )));
            if (unlikely(__pyx_t_17 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              __Pyx_PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 1276, __pyx_L5_error)
            }
            __pyx_t_18 = (__pyx_t_16 / __pyx_t_17);

            /* "yt/utilities/lib/pixelization_routines.pyx":1277
 *                 # Calculate contribution of this particle
 *                 prefactor_j = (pmass[particle] / pdens[particle] /
 *                                hsml[particle]**3)             # <<<<<<<<<<<<<<
 *                 q_ij = math.sqrt(queue.heap[index]*ih_j2)
 *                 smoothed_quantity_j = (prefactor_j *
 */
            __pyx_t_12 = __pyx_v_particle;
            __pyx_t_17 = pow((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_12 * __pyx_v_hsml.strides[0]) ))), 3.0);

            /* "yt/utilities/lib/pixelization_routines.pyx":1276
 * 
 *                 # Calculate contribution of this particle
 *                 prefactor_j = (pmass[particle] / pdens[particle] /             # <<<<<<<<<<<<<<
 *                                hsml[particle]**3)
 *                 q_ij = math.sqrt(queue.heap[index]*ih_j2)
 */
            if (unlikely(__pyx_t_17 == 0)) {
              #ifdef WITH_THREAD
              PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
              #endif
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              #ifdef WITH_THREAD
              __Pyx_PyGILState_Release(__pyx_gilstate_save);
              #endif
              __PYX_ERR(0, 1276, __pyx_L5_error)
            }
            __pyx_v_prefactor_j = (__pyx_t_18 / __pyx_t_17);

            /* "yt/utilities/lib/pixelization_routines.pyx":1278
 *                 prefactor_j = (pmass[particle] / pdens[particle] /
 *                                hsml[particle]**3)
 *                 q_ij = math.sqrt(queue.heap[index]*ih_j2)             # <<<<<<<<<<<<<<
 *                 smoothed_quantity_j = (prefactor_j *
 *                                        quantity_to_smooth[particle] *
 */
            if (unlikely(!__pyx_v_queue->heap.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1278, __pyx_L5_error)}
            __pyx_t_12 = __pyx_v_index;
            __pyx_v_q_ij = sqrt(((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_queue->heap.data + __pyx_t_12 * __pyx_v_queue->heap.strides[0]) ))) * __pyx_v_ih_j2));

            /* "yt/utilities/lib/pixelization_routines.pyx":1280
 *                 q_ij = math.sqrt(queue.heap[index]*ih_j2)
 *                 smoothed_quantity_j = (prefactor_j *
 *                                        quantity_to_smooth[particle] *             # <<<<<<<<<<<<<<
 *                                        kernel(q_ij))
 * 
 */
            __pyx_t_12 = __pyx_v_particle;

            /* "yt/utilities/lib/pixelization_routines.pyx":1281
 *                 smoothed_quantity_j = (prefactor_j *
 *                                        quantity_to_smooth[particle] *
 *                                        kernel(q_ij))             # <<<<<<<<<<<<<<
 * 
 *                 # See equations 6, 9, and 11 of the SPLASH paper
 */
            __pyx_v_smoothed_quantity_j = ((__pyx_v_prefactor_j * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_quantity_to_smooth.data + __pyx_t_12 * __pyx_v_quantity_to_smooth.strides[0]) )))) * __pyx_v_kernel(__pyx_v_q_ij));

            /* "yt/utilities/lib/pixelization_routines.pyx":1284
 * 
 *                 # See equations 6, 9, and 11 of the SPLASH paper
 *                 buff[i] += smoothed_quantity_j             # <<<<<<<<<<<<<<
 * 
 *                 if use_normalization:
 */
            __pyx_t_12 = __pyx_v_i;
            *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_12 * __pyx_v_buff.strides[0]) )) += __pyx_v_smoothed_quantity_j;

            /* "yt/utilities/lib/pixelization_routines.pyx":1286
 *                 buff[i] += smoothed_quantity_j
 * 
 *                 if use_normalization:             # <<<<<<<<<<<<<<
 *                     buff_den[i] += prefactor_j * kernel(q_ij)
 * 
 */
            __pyx_t_4 = (__pyx_v_use_normalization != 0);
            if (__pyx_t_4) {

              /* "yt/utilities/lib/pixelization_routines.pyx":1287
 * 
 *                 if use_normalization:
 *                     buff_den[i] += prefactor_j * kernel(q_ij)             # <<<<<<<<<<<<<<
 * 
 *     if use_normalization:
 */
              if (unlikely(!__pyx_v_buff_den.memview)) { __Pyx_RaiseUnboundMemoryviewSliceNogil("buff_den"); __PYX_ERR(0, 1287, __pyx_L5_error) }
              __pyx_t_12 = __pyx_v_i;
              *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_buff_den.data + __pyx_t_12 * __pyx_v_buff_den.strides[0]) )) += (__pyx_v_prefactor_j * __pyx_v_kernel(__pyx_v_q_ij));

              /* "yt/utilities/lib/pixelization_routines.pyx":1286
 *                 buff[i] += smoothed_quantity_j
 * 
 *                 if use_normalization:             # <<<<<<<<<<<<<<
 *                     buff_den[i] += prefactor_j * kernel(q_ij)
 * 
 */
            }
          }
        }
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":1255
 * 
 *     # Loop through all the positions we want to interpolate the SPH field onto
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for i in range(0, buff.shape[0]):
 *             queue.size = 0
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1289
 *                     buff_den[i] += prefactor_j * kernel(q_ij)
 * 
 *     if use_normalization:             # <<<<<<<<<<<<<<
 *         normalization_1d_utility(buff, buff_den)
 * 
 */
  __pyx_t_4 = (__pyx_v_use_normalization != 0);
  if (__pyx_t_4) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1290
 * 
 *     if use_normalization:
 *         normalization_1d_utility(buff, buff_den)             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_normalization_1d_utility); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_buff, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(!__pyx_v_buff_den.memview)) { __Pyx_RaiseUnboundLocalError("buff_den"); __PYX_ERR(0, 1290, __pyx_L1_error) }
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_buff_den, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_19 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_19)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_19);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_10 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_t_5, __pyx_t_2};
      __pyx_t_6 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1290, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_19, __pyx_t_5, __pyx_t_2};
      __pyx_t_6 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1290, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_20 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 1290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_20);
      if (__pyx_t_19) {
        __Pyx_GIVEREF(__pyx_t_19); PyTuple_SET_ITEM(__pyx_t_20, 0, __pyx_t_19); __pyx_t_19 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_20, 0+__pyx_t_10, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_20, 1+__pyx_t_10, __pyx_t_2);
      __pyx_t_5 = 0;
      __pyx_t_2 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_20, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1290, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1289
 *                     buff_den[i] += prefactor_j * kernel(q_ij)
 * 
 *     if use_normalization:             # <<<<<<<<<<<<<<
 *         normalization_1d_utility(buff, buff_den)
 * 
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1222
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def interpolate_sph_positions_gather(np.float64_t[:] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:, ::1] tree_positions, np.float64_t[:, ::1] field_positions,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass, np.float64_t[:] pdens,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.interpolate_sph_positions_gather", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_queue);
  __PYX_XDEC_MEMVIEW(&__pyx_v_buff_den, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_buff, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_tree_positions, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_field_positions, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_hsml, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pmass, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdens, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_quantity_to_smooth, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1294
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def interpolate_sph_grid_gather(np.float64_t[:, :, :] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:, ::1] tree_positions, np.float64_t[:] bounds,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass, np.float64_t[:] pdens,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_17interpolate_sph_grid_gather(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_2yt_9utilities_3lib_21pixelization_routines_16interpolate_sph_grid_gather[] = "\n    This function takes in the bounds and number of cells in a grid (well,\n    actually we implicitly calculate this from the size of buff). Then we can\n    perform nearest neighbor search and SPH interpolation at the centre of each\n    cell in the grid.\n    ";
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_17interpolate_sph_grid_gather = {"interpolate_sph_grid_gather", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_17interpolate_sph_grid_gather, METH_VARARGS|METH_KEYWORDS, __pyx_doc_2yt_9utilities_3lib_21pixelization_routines_16interpolate_sph_grid_gather};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_17interpolate_sph_grid_gather(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_buff = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_tree_positions = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_bounds = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_hsml = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pmass = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdens = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_quantity_to_smooth = { 0, 0, { 0 }, { 0 }, { 0 } };
  struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *__pyx_v_kdtree = 0;
  int __pyx_v_use_normalization;
  PyObject *__pyx_v_kernel_name = 0;
  PyObject *__pyx_v_pbar = 0;
  int __pyx_v_num_neigh;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("interpolate_sph_grid_gather (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buff,&__pyx_n_s_tree_positions,&__pyx_n_s_bounds,&__pyx_n_s_hsml,&__pyx_n_s_pmass,&__pyx_n_s_pdens,&__pyx_n_s_quantity_to_smooth,&__pyx_n_s_kdtree,&__pyx_n_s_use_normalization,&__pyx_n_s_kernel_name,&__pyx_n_s_pbar,&__pyx_n_s_num_neigh,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    values[9] = ((PyObject *)__pyx_n_u_cubic);

    /* "yt/utilities/lib/pixelization_routines.pyx":1298
 *         np.float64_t[:] hsml, np.float64_t[:] pmass, np.float64_t[:] pdens,
 *         np.float64_t[:] quantity_to_smooth, PyKDTree kdtree,
 *         int use_normalization=1, kernel_name="cubic", pbar=None,             # <<<<<<<<<<<<<<
 *         int num_neigh=32):
 *     """
 */
    values[10] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tree_positions)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_grid_gather", 0, 8, 12, 1); __PYX_ERR(0, 1294, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_grid_gather", 0, 8, 12, 2); __PYX_ERR(0, 1294, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hsml)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_grid_gather", 0, 8, 12, 3); __PYX_ERR(0, 1294, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pmass)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_grid_gather", 0, 8, 12, 4); __PYX_ERR(0, 1294, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_grid_gather", 0, 8, 12, 5); __PYX_ERR(0, 1294, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quantity_to_smooth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_grid_gather", 0, 8, 12, 6); __PYX_ERR(0, 1294, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kdtree)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interpolate_sph_grid_gather", 0, 8, 12, 7); __PYX_ERR(0, 1294, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_use_normalization);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kernel_name);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pbar);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_neigh);
          if (value) { values[11] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "interpolate_sph_grid_gather") < 0)) __PYX_ERR(0, 1294, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buff = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_buff.memview)) __PYX_ERR(0, 1294, __pyx_L3_error)
    __pyx_v_tree_positions = __Pyx_PyObject_to_MemoryviewSlice_d_dc_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_tree_positions.memview)) __PYX_ERR(0, 1295, __pyx_L3_error)
    __pyx_v_bounds = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_bounds.memview)) __PYX_ERR(0, 1295, __pyx_L3_error)
    __pyx_v_hsml = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_hsml.memview)) __PYX_ERR(0, 1296, __pyx_L3_error)
    __pyx_v_pmass = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pmass.memview)) __PYX_ERR(0, 1296, __pyx_L3_error)
    __pyx_v_pdens = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdens.memview)) __PYX_ERR(0, 1296, __pyx_L3_error)
    __pyx_v_quantity_to_smooth = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_quantity_to_smooth.memview)) __PYX_ERR(0, 1297, __pyx_L3_error)
    __pyx_v_kdtree = ((struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *)values[7]);
    if (values[8]) {
      __pyx_v_use_normalization = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_use_normalization == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1298, __pyx_L3_error)
    } else {
      __pyx_v_use_normalization = ((int)1);
    }
    __pyx_v_kernel_name = values[9];
    __pyx_v_pbar = values[10];
    if (values[11]) {
      __pyx_v_num_neigh = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_num_neigh == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1299, __pyx_L3_error)
    } else {
      __pyx_v_num_neigh = ((int)32);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("interpolate_sph_grid_gather", 0, 8, 12, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1294, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.interpolate_sph_grid_gather", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_kdtree), __pyx_ptype_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree, 1, "kdtree", 0))) __PYX_ERR(0, 1297, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_16interpolate_sph_grid_gather(__pyx_self, __pyx_v_buff, __pyx_v_tree_positions, __pyx_v_bounds, __pyx_v_hsml, __pyx_v_pmass, __pyx_v_pdens, __pyx_v_quantity_to_smooth, __pyx_v_kdtree, __pyx_v_use_normalization, __pyx_v_kernel_name, __pyx_v_pbar, __pyx_v_num_neigh);

  /* "yt/utilities/lib/pixelization_routines.pyx":1294
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def interpolate_sph_grid_gather(np.float64_t[:, :, :] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:, ::1] tree_positions, np.float64_t[:] bounds,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass, np.float64_t[:] pdens,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_16interpolate_sph_grid_gather(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_tree_positions, __Pyx_memviewslice __pyx_v_bounds, __Pyx_memviewslice __pyx_v_hsml, __Pyx_memviewslice __pyx_v_pmass, __Pyx_memviewslice __pyx_v_pdens, __Pyx_memviewslice __pyx_v_quantity_to_smooth, struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree *__pyx_v_kdtree, int __pyx_v_use_normalization, PyObject *__pyx_v_kernel_name, PyObject *__pyx_v_pbar, int __pyx_v_num_neigh) {
  __pyx_t_5numpy_float64_t __pyx_v_q_ij;
  __pyx_t_5numpy_float64_t __pyx_v_h_j2;
  __pyx_t_5numpy_float64_t __pyx_v_ih_j2;
  __pyx_t_5numpy_float64_t __pyx_v_prefactor_j;
  __pyx_t_5numpy_float64_t __pyx_v_smoothed_quantity_j;
  __pyx_t_5numpy_float64_t __pyx_v_dx;
  __pyx_t_5numpy_float64_t __pyx_v_dy;
  __pyx_t_5numpy_float64_t __pyx_v_dz;
  __Pyx_memviewslice __pyx_v_pos = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_float64_t *__pyx_v_pos_ptr;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_particle;
  int __pyx_v_index;
  struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *__pyx_v_queue = 0;
  __Pyx_memviewslice __pyx_v_buff_den = { 0, 0, { 0 }, { 0 }, { 0 } };
  KDTree *__pyx_v_ctree;
  int __pyx_v_prog;
  struct __pyx_t_2yt_9utilities_3lib_21particle_kdtree_tools_axes_range __pyx_v_axes;
  __pyx_t_2yt_8geometry_16particle_deposit_kernel_func __pyx_v_kernel;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_5;
  KDTree *__pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_memviewslice __pyx_t_10 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_11;
  __pyx_t_5numpy_float64_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  int __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  int __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  __pyx_t_5numpy_intp_t __pyx_t_23;
  __pyx_t_5numpy_intp_t __pyx_t_24;
  __pyx_t_5numpy_float64_t __pyx_t_25;
  __pyx_t_5numpy_float64_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  PyObject *__pyx_t_28 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("interpolate_sph_grid_gather", 0);
  __Pyx_INCREF(__pyx_v_pbar);

  /* "yt/utilities/lib/pixelization_routines.pyx":1309
 *     cdef np.float64_t q_ij, h_j2, ih_j2, prefactor_j, smoothed_quantity_j
 *     cdef np.float64_t dx, dy, dz
 *     cdef np.float64_t[::1] pos = np.zeros(3, dtype="float64")             # <<<<<<<<<<<<<<
 *     cdef np.float64_t * pos_ptr = &pos[0]
 *     cdef int i, j, k, particle, index
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_n_u_float64) < 0) __PYX_ERR(0, 1309, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__9, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_dc_nn___pyx_t_5numpy_float64_t(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_pos = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1310
 *     cdef np.float64_t dx, dy, dz
 *     cdef np.float64_t[::1] pos = np.zeros(3, dtype="float64")
 *     cdef np.float64_t * pos_ptr = &pos[0]             # <<<<<<<<<<<<<<
 *     cdef int i, j, k, particle, index
 *     cdef BoundedPriorityQueue queue = BoundedPriorityQueue(num_neigh, True)
 */
  __pyx_t_5 = 0;
  __pyx_v_pos_ptr = (&(*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_pos.data) + __pyx_t_5)) ))));

  /* "yt/utilities/lib/pixelization_routines.pyx":1312
 *     cdef np.float64_t * pos_ptr = &pos[0]
 *     cdef int i, j, k, particle, index
 *     cdef BoundedPriorityQueue queue = BoundedPriorityQueue(num_neigh, True)             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:, :, :] buff_den
 *     cdef KDTree * ctree = kdtree._tree
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_num_neigh); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 1, Py_True);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_queue = ((struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1314
 *     cdef BoundedPriorityQueue queue = BoundedPriorityQueue(num_neigh, True)
 *     cdef np.float64_t[:, :, :] buff_den
 *     cdef KDTree * ctree = kdtree._tree             # <<<<<<<<<<<<<<
 *     cdef int prog
 * 
 */
  __pyx_t_6 = __pyx_v_kdtree->_tree;
  __pyx_v_ctree = __pyx_t_6;

  /* "yt/utilities/lib/pixelization_routines.pyx":1319
 *     # Which dimensions shall we use for spatial distances?
 *     cdef axes_range axes
 *     set_axes_range(&axes, -1)             # <<<<<<<<<<<<<<
 * 
 *     # Only allocate memory if we are using normalization
 */
  (void)(__pyx_f_2yt_9utilities_3lib_21particle_kdtree_tools_set_axes_range((&__pyx_v_axes), -1));

  /* "yt/utilities/lib/pixelization_routines.pyx":1322
 * 
 *     # Only allocate memory if we are using normalization
 *     if use_normalization:             # <<<<<<<<<<<<<<
 *         buff_den = np.zeros([buff.shape[0], buff.shape[1],
 *                              buff.shape[2]], dtype="float64")
 */
  __pyx_t_7 = (__pyx_v_use_normalization != 0);
  if (__pyx_t_7) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1323
 *     # Only allocate memory if we are using normalization
 *     if use_normalization:
 *         buff_den = np.zeros([buff.shape[0], buff.shape[1],             # <<<<<<<<<<<<<<
 *                              buff.shape[2]], dtype="float64")
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyInt_FromSsize_t((__pyx_v_buff.shape[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_v_buff.shape[1])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "yt/utilities/lib/pixelization_routines.pyx":1324
 *     if use_normalization:
 *         buff_den = np.zeros([buff.shape[0], buff.shape[1],
 *                              buff.shape[2]], dtype="float64")             # <<<<<<<<<<<<<<
 * 
 *     kernel = get_kernel_func(kernel_name)
 */
    __pyx_t_8 = PyInt_FromSsize_t((__pyx_v_buff.shape[2])); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);

    /* "yt/utilities/lib/pixelization_routines.pyx":1323
 *     # Only allocate memory if we are using normalization
 *     if use_normalization:
 *         buff_den = np.zeros([buff.shape[0], buff.shape[1],             # <<<<<<<<<<<<<<
 *                              buff.shape[2]], dtype="float64")
 * 
 */
    __pyx_t_9 = PyList_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyList_SET_ITEM(__pyx_t_9, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1324
 *     if use_normalization:
 *         buff_den = np.zeros([buff.shape[0], buff.shape[1],
 *                              buff.shape[2]], dtype="float64")             # <<<<<<<<<<<<<<
 * 
 *     kernel = get_kernel_func(kernel_name)
 */
    __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_n_u_float64) < 0) __PYX_ERR(0, 1324, __pyx_L1_error)

    /* "yt/utilities/lib/pixelization_routines.pyx":1323
 *     # Only allocate memory if we are using normalization
 *     if use_normalization:
 *         buff_den = np.zeros([buff.shape[0], buff.shape[1],             # <<<<<<<<<<<<<<
 *                              buff.shape[2]], dtype="float64")
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_nn___pyx_t_5numpy_float64_t(__pyx_t_2, PyBUF_WRITABLE); if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(0, 1323, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_buff_den = __pyx_t_10;
    __pyx_t_10.memview = NULL;
    __pyx_t_10.data = NULL;

    /* "yt/utilities/lib/pixelization_routines.pyx":1322
 * 
 *     # Only allocate memory if we are using normalization
 *     if use_normalization:             # <<<<<<<<<<<<<<
 *         buff_den = np.zeros([buff.shape[0], buff.shape[1],
 *                              buff.shape[2]], dtype="float64")
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1326
 *                              buff.shape[2]], dtype="float64")
 * 
 *     kernel = get_kernel_func(kernel_name)             # <<<<<<<<<<<<<<
 *     dx = (bounds[1] - bounds[0]) / buff.shape[0]
 *     dy = (bounds[3] - bounds[2]) / buff.shape[1]
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_kernel_name))||((__pyx_v_kernel_name) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_kernel_name)->tp_name), 0))) __PYX_ERR(0, 1326, __pyx_L1_error)
  __pyx_v_kernel = __pyx_f_2yt_8geometry_16particle_deposit_get_kernel_func(((PyObject*)__pyx_v_kernel_name));

  /* "yt/utilities/lib/pixelization_routines.pyx":1327
 * 
 *     kernel = get_kernel_func(kernel_name)
 *     dx = (bounds[1] - bounds[0]) / buff.shape[0]             # <<<<<<<<<<<<<<
 *     dy = (bounds[3] - bounds[2]) / buff.shape[1]
 *     dz = (bounds[5] - bounds[4]) / buff.shape[2]
 */
  __pyx_t_5 = 1;
  __pyx_t_11 = 0;
  __pyx_t_12 = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_bounds.data + __pyx_t_5 * __pyx_v_bounds.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_bounds.data + __pyx_t_11 * __pyx_v_bounds.strides[0]) ))));
  if (unlikely((__pyx_v_buff.shape[0]) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1327, __pyx_L1_error)
  }
  __pyx_v_dx = (__pyx_t_12 / ((__pyx_t_5numpy_float64_t)(__pyx_v_buff.shape[0])));

  /* "yt/utilities/lib/pixelization_routines.pyx":1328
 *     kernel = get_kernel_func(kernel_name)
 *     dx = (bounds[1] - bounds[0]) / buff.shape[0]
 *     dy = (bounds[3] - bounds[2]) / buff.shape[1]             # <<<<<<<<<<<<<<
 *     dz = (bounds[5] - bounds[4]) / buff.shape[2]
 * 
 */
  __pyx_t_11 = 3;
  __pyx_t_5 = 2;
  __pyx_t_12 = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_bounds.data + __pyx_t_11 * __pyx_v_bounds.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_bounds.data + __pyx_t_5 * __pyx_v_bounds.strides[0]) ))));
  if (unlikely((__pyx_v_buff.shape[1]) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1328, __pyx_L1_error)
  }
  __pyx_v_dy = (__pyx_t_12 / ((__pyx_t_5numpy_float64_t)(__pyx_v_buff.shape[1])));

  /* "yt/utilities/lib/pixelization_routines.pyx":1329
 *     dx = (bounds[1] - bounds[0]) / buff.shape[0]
 *     dy = (bounds[3] - bounds[2]) / buff.shape[1]
 *     dz = (bounds[5] - bounds[4]) / buff.shape[2]             # <<<<<<<<<<<<<<
 * 
 *     # Loop through all the positions we want to interpolate the SPH field onto
 */
  __pyx_t_5 = 5;
  __pyx_t_11 = 4;
  __pyx_t_12 = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_bounds.data + __pyx_t_5 * __pyx_v_bounds.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_bounds.data + __pyx_t_11 * __pyx_v_bounds.strides[0]) ))));
  if (unlikely((__pyx_v_buff.shape[2]) == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1329, __pyx_L1_error)
  }
  __pyx_v_dz = (__pyx_t_12 / ((__pyx_t_5numpy_float64_t)(__pyx_v_buff.shape[2])));

  /* "yt/utilities/lib/pixelization_routines.pyx":1332
 * 
 *     # Loop through all the positions we want to interpolate the SPH field onto
 *     pbar = get_pbar(title="Interpolating (gather) SPH field",             # <<<<<<<<<<<<<<
 *                     maxval=(buff.shape[0]*buff.shape[1]*buff.shape[2] //
 *                             10000)*10000)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_pbar); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_9 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_title, __pyx_kp_u_Interpolating_gather_SPH_field) < 0) __PYX_ERR(0, 1332, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1334
 *     pbar = get_pbar(title="Interpolating (gather) SPH field",
 *                     maxval=(buff.shape[0]*buff.shape[1]*buff.shape[2] //
 *                             10000)*10000)             # <<<<<<<<<<<<<<
 * 
 *     prog = 0
 */
  __pyx_t_8 = PyInt_FromSsize_t((__Pyx_div_Py_ssize_t((((__pyx_v_buff.shape[0]) * (__pyx_v_buff.shape[1])) * (__pyx_v_buff.shape[2])), 0x2710) * 0x2710)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_maxval, __pyx_t_8) < 0) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1332
 * 
 *     # Loop through all the positions we want to interpolate the SPH field onto
 *     pbar = get_pbar(title="Interpolating (gather) SPH field",             # <<<<<<<<<<<<<<
 *                     maxval=(buff.shape[0]*buff.shape[1]*buff.shape[2] //
 *                             10000)*10000)
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF_SET(__pyx_v_pbar, __pyx_t_8);
  __pyx_t_8 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1336
 *                             10000)*10000)
 * 
 *     prog = 0             # <<<<<<<<<<<<<<
 *     with nogil:
 *         for i in range(0, buff.shape[0]):
 */
  __pyx_v_prog = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1337
 * 
 *     prog = 0
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for i in range(0, buff.shape[0]):
 *             for j in range(0, buff.shape[1]):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "yt/utilities/lib/pixelization_routines.pyx":1338
 *     prog = 0
 *     with nogil:
 *         for i in range(0, buff.shape[0]):             # <<<<<<<<<<<<<<
 *             for j in range(0, buff.shape[1]):
 *                 for k in range(0, buff.shape[2]):
 */
        __pyx_t_13 = (__pyx_v_buff.shape[0]);
        __pyx_t_14 = __pyx_t_13;
        for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
          __pyx_v_i = __pyx_t_15;

          /* "yt/utilities/lib/pixelization_routines.pyx":1339
 *     with nogil:
 *         for i in range(0, buff.shape[0]):
 *             for j in range(0, buff.shape[1]):             # <<<<<<<<<<<<<<
 *                 for k in range(0, buff.shape[2]):
 *                     prog += 1
 */
          __pyx_t_16 = (__pyx_v_buff.shape[1]);
          __pyx_t_17 = __pyx_t_16;
          for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
            __pyx_v_j = __pyx_t_18;

            /* "yt/utilities/lib/pixelization_routines.pyx":1340
 *         for i in range(0, buff.shape[0]):
 *             for j in range(0, buff.shape[1]):
 *                 for k in range(0, buff.shape[2]):             # <<<<<<<<<<<<<<
 *                     prog += 1
 *                     if prog % 10000 == 0:
 */
            __pyx_t_19 = (__pyx_v_buff.shape[2]);
            __pyx_t_20 = __pyx_t_19;
            for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_20; __pyx_t_21+=1) {
              __pyx_v_k = __pyx_t_21;

              /* "yt/utilities/lib/pixelization_routines.pyx":1341
 *             for j in range(0, buff.shape[1]):
 *                 for k in range(0, buff.shape[2]):
 *                     prog += 1             # <<<<<<<<<<<<<<
 *                     if prog % 10000 == 0:
 *                         with gil:
 */
              __pyx_v_prog = (__pyx_v_prog + 1);

              /* "yt/utilities/lib/pixelization_routines.pyx":1342
 *                 for k in range(0, buff.shape[2]):
 *                     prog += 1
 *                     if prog % 10000 == 0:             # <<<<<<<<<<<<<<
 *                         with gil:
 *                             PyErr_CheckSignals()
 */
              __pyx_t_7 = ((__Pyx_mod_long(__pyx_v_prog, 0x2710) == 0) != 0);
              if (__pyx_t_7) {

                /* "yt/utilities/lib/pixelization_routines.pyx":1343
 *                     prog += 1
 *                     if prog % 10000 == 0:
 *                         with gil:             # <<<<<<<<<<<<<<
 *                             PyErr_CheckSignals()
 *                             pbar.update(prog)
 */
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    /*try:*/ {

                      /* "yt/utilities/lib/pixelization_routines.pyx":1344
 *                     if prog % 10000 == 0:
 *                         with gil:
 *                             PyErr_CheckSignals()             # <<<<<<<<<<<<<<
 *                             pbar.update(prog)
 * 
 */
                      __pyx_t_22 = PyErr_CheckSignals(); if (unlikely(__pyx_t_22 == ((int)-1))) __PYX_ERR(0, 1344, __pyx_L17_error)

                      /* "yt/utilities/lib/pixelization_routines.pyx":1345
 *                         with gil:
 *                             PyErr_CheckSignals()
 *                             pbar.update(prog)             # <<<<<<<<<<<<<<
 * 
 *                     queue.size = 0
 */
                      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1345, __pyx_L17_error)
                      __Pyx_GOTREF(__pyx_t_9);
                      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_prog); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1345, __pyx_L17_error)
                      __Pyx_GOTREF(__pyx_t_2);
                      __pyx_t_1 = NULL;
                      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
                        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_9);
                        if (likely(__pyx_t_1)) {
                          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                          __Pyx_INCREF(__pyx_t_1);
                          __Pyx_INCREF(function);
                          __Pyx_DECREF_SET(__pyx_t_9, function);
                        }
                      }
                      __pyx_t_8 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_t_2);
                      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
                      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1345, __pyx_L17_error)
                      __Pyx_GOTREF(__pyx_t_8);
                      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                    }

                    /* "yt/utilities/lib/pixelization_routines.pyx":1343
 *                     prog += 1
 *                     if prog % 10000 == 0:
 *                         with gil:             # <<<<<<<<<<<<<<
 *                             PyErr_CheckSignals()
 *                             pbar.update(prog)
 */
                    /*finally:*/ {
                      /*normal exit:*/{
                        #ifdef WITH_THREAD
                        __Pyx_PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        goto __pyx_L18;
                      }
                      __pyx_L17_error: {
                        #ifdef WITH_THREAD
                        __Pyx_PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        goto __pyx_L5_error;
                      }
                      __pyx_L18:;
                    }
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":1342
 *                 for k in range(0, buff.shape[2]):
 *                     prog += 1
 *                     if prog % 10000 == 0:             # <<<<<<<<<<<<<<
 *                         with gil:
 *                             PyErr_CheckSignals()
 */
              }

              /* "yt/utilities/lib/pixelization_routines.pyx":1347
 *                             pbar.update(prog)
 * 
 *                     queue.size = 0             # <<<<<<<<<<<<<<
 * 
 *                     # Update the current position
 */
              __pyx_v_queue->size = 0;

              /* "yt/utilities/lib/pixelization_routines.pyx":1350
 * 
 *                     # Update the current position
 *                     pos[0] = bounds[0] + (i + 0.5) * dx             # <<<<<<<<<<<<<<
 *                     pos[1] = bounds[2] + (j + 0.5) * dy
 *                     pos[2] = bounds[4] + (k + 0.5) * dz
 */
              __pyx_t_11 = 0;
              __pyx_t_5 = 0;
              *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_pos.data) + __pyx_t_5)) )) = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_bounds.data + __pyx_t_11 * __pyx_v_bounds.strides[0]) ))) + ((__pyx_v_i + 0.5) * __pyx_v_dx));

              /* "yt/utilities/lib/pixelization_routines.pyx":1351
 *                     # Update the current position
 *                     pos[0] = bounds[0] + (i + 0.5) * dx
 *                     pos[1] = bounds[2] + (j + 0.5) * dy             # <<<<<<<<<<<<<<
 *                     pos[2] = bounds[4] + (k + 0.5) * dz
 * 
 */
              __pyx_t_11 = 2;
              __pyx_t_5 = 1;
              *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_pos.data) + __pyx_t_5)) )) = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_bounds.data + __pyx_t_11 * __pyx_v_bounds.strides[0]) ))) + ((__pyx_v_j + 0.5) * __pyx_v_dy));

              /* "yt/utilities/lib/pixelization_routines.pyx":1352
 *                     pos[0] = bounds[0] + (i + 0.5) * dx
 *                     pos[1] = bounds[2] + (j + 0.5) * dy
 *                     pos[2] = bounds[4] + (k + 0.5) * dz             # <<<<<<<<<<<<<<
 * 
 *                     # Use the KDTree to find the nearest neighbors
 */
              __pyx_t_11 = 4;
              __pyx_t_5 = 2;
              *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ ((char *) (((__pyx_t_5numpy_float64_t *) __pyx_v_pos.data) + __pyx_t_5)) )) = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_bounds.data + __pyx_t_11 * __pyx_v_bounds.strides[0]) ))) + ((__pyx_v_k + 0.5) * __pyx_v_dz));

              /* "yt/utilities/lib/pixelization_routines.pyx":1355
 * 
 *                     # Use the KDTree to find the nearest neighbors
 *                     find_neighbors(pos_ptr, tree_positions, queue, ctree, -1, &axes)             # <<<<<<<<<<<<<<
 * 
 *                     # Set the smoothing length squared to the square of the distance
 */
              __pyx_t_22 = __pyx_f_2yt_9utilities_3lib_21particle_kdtree_tools_find_neighbors(__pyx_v_pos_ptr, __pyx_v_tree_positions, __pyx_v_queue, __pyx_v_ctree, -1LL, (&__pyx_v_axes)); if (unlikely(__pyx_t_22 == ((int)-1))) __PYX_ERR(0, 1355, __pyx_L5_error)

              /* "yt/utilities/lib/pixelization_routines.pyx":1359
 *                     # Set the smoothing length squared to the square of the distance
 *                     # of the furthest nearest neighbor
 *                     h_j2 = queue.heap[0]             # <<<<<<<<<<<<<<
 *                     ih_j2 = 1.0/h_j2
 * 
 */
              if (unlikely(!__pyx_v_queue->heap.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1359, __pyx_L5_error)}
              __pyx_t_11 = 0;
              __pyx_v_h_j2 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_queue->heap.data + __pyx_t_11 * __pyx_v_queue->heap.strides[0]) )));

              /* "yt/utilities/lib/pixelization_routines.pyx":1360
 *                     # of the furthest nearest neighbor
 *                     h_j2 = queue.heap[0]
 *                     ih_j2 = 1.0/h_j2             # <<<<<<<<<<<<<<
 * 
 *                     # Loop through each nearest neighbor and add contribution to the
 */
              if (unlikely(__pyx_v_h_j2 == 0)) {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                #ifdef WITH_THREAD
                __Pyx_PyGILState_Release(__pyx_gilstate_save);
                #endif
                __PYX_ERR(0, 1360, __pyx_L5_error)
              }
              __pyx_v_ih_j2 = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_h_j2);

              /* "yt/utilities/lib/pixelization_routines.pyx":1364
 *                     # Loop through each nearest neighbor and add contribution to the
 *                     # buffer
 *                     for index in range(queue.max_elements):             # <<<<<<<<<<<<<<
 *                         particle = queue.pids[index]
 * 
 */
              __pyx_t_23 = __pyx_v_queue->max_elements;
              __pyx_t_24 = __pyx_t_23;
              for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_24; __pyx_t_22+=1) {
                __pyx_v_index = __pyx_t_22;

                /* "yt/utilities/lib/pixelization_routines.pyx":1365
 *                     # buffer
 *                     for index in range(queue.max_elements):
 *                         particle = queue.pids[index]             # <<<<<<<<<<<<<<
 * 
 *                         # Calculate contribution of this particle
 */
                if (unlikely(!__pyx_v_queue->pids.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1365, __pyx_L5_error)}
                __pyx_t_11 = __pyx_v_index;
                __pyx_v_particle = (*((__pyx_t_5numpy_int64_t *) ( /* dim=0 */ (__pyx_v_queue->pids.data + __pyx_t_11 * __pyx_v_queue->pids.strides[0]) )));

                /* "yt/utilities/lib/pixelization_routines.pyx":1368
 * 
 *                         # Calculate contribution of this particle
 *                         prefactor_j = (pmass[particle] / pdens[particle] /             # <<<<<<<<<<<<<<
 *                                        hsml[particle]**3)
 *                         q_ij = math.sqrt(queue.heap[index]*ih_j2)
 */
                __pyx_t_11 = __pyx_v_particle;
                __pyx_t_12 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pmass.data + __pyx_t_11 * __pyx_v_pmass.strides[0]) )));
                __pyx_t_11 = __pyx_v_particle;
                __pyx_t_25 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pdens.data + __pyx_t_11 * __pyx_v_pdens.strides[0]) )));
                if (unlikely(__pyx_t_25 == 0)) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                  #endif
                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                  #ifdef WITH_THREAD
                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  __PYX_ERR(0, 1368, __pyx_L5_error)
                }
                __pyx_t_26 = (__pyx_t_12 / __pyx_t_25);

                /* "yt/utilities/lib/pixelization_routines.pyx":1369
 *                         # Calculate contribution of this particle
 *                         prefactor_j = (pmass[particle] / pdens[particle] /
 *                                        hsml[particle]**3)             # <<<<<<<<<<<<<<
 *                         q_ij = math.sqrt(queue.heap[index]*ih_j2)
 *                         smoothed_quantity_j = (prefactor_j *
 */
                __pyx_t_11 = __pyx_v_particle;
                __pyx_t_25 = pow((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_11 * __pyx_v_hsml.strides[0]) ))), 3.0);

                /* "yt/utilities/lib/pixelization_routines.pyx":1368
 * 
 *                         # Calculate contribution of this particle
 *                         prefactor_j = (pmass[particle] / pdens[particle] /             # <<<<<<<<<<<<<<
 *                                        hsml[particle]**3)
 *                         q_ij = math.sqrt(queue.heap[index]*ih_j2)
 */
                if (unlikely(__pyx_t_25 == 0)) {
                  #ifdef WITH_THREAD
                  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                  #endif
                  PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                  #ifdef WITH_THREAD
                  __Pyx_PyGILState_Release(__pyx_gilstate_save);
                  #endif
                  __PYX_ERR(0, 1368, __pyx_L5_error)
                }
                __pyx_v_prefactor_j = (__pyx_t_26 / __pyx_t_25);

                /* "yt/utilities/lib/pixelization_routines.pyx":1370
 *                         prefactor_j = (pmass[particle] / pdens[particle] /
 *                                        hsml[particle]**3)
 *                         q_ij = math.sqrt(queue.heap[index]*ih_j2)             # <<<<<<<<<<<<<<
 *                         smoothed_quantity_j = (prefactor_j *
 *                                                quantity_to_smooth[particle] *
 */
                if (unlikely(!__pyx_v_queue->heap.memview)) {PyErr_SetString(PyExc_AttributeError,"Memoryview is not initialized");__PYX_ERR(0, 1370, __pyx_L5_error)}
                __pyx_t_11 = __pyx_v_index;
                __pyx_v_q_ij = sqrt(((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_queue->heap.data + __pyx_t_11 * __pyx_v_queue->heap.strides[0]) ))) * __pyx_v_ih_j2));

                /* "yt/utilities/lib/pixelization_routines.pyx":1372
 *                         q_ij = math.sqrt(queue.heap[index]*ih_j2)
 *                         smoothed_quantity_j = (prefactor_j *
 *                                                quantity_to_smooth[particle] *             # <<<<<<<<<<<<<<
 *                                                kernel(q_ij))
 * 
 */
                __pyx_t_11 = __pyx_v_particle;

                /* "yt/utilities/lib/pixelization_routines.pyx":1373
 *                         smoothed_quantity_j = (prefactor_j *
 *                                                quantity_to_smooth[particle] *
 *                                                kernel(q_ij))             # <<<<<<<<<<<<<<
 * 
 *                         # See equations 6, 9, and 11 of the SPLASH paper
 */
                __pyx_v_smoothed_quantity_j = ((__pyx_v_prefactor_j * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_quantity_to_smooth.data + __pyx_t_11 * __pyx_v_quantity_to_smooth.strides[0]) )))) * __pyx_v_kernel(__pyx_v_q_ij));

                /* "yt/utilities/lib/pixelization_routines.pyx":1376
 * 
 *                         # See equations 6, 9, and 11 of the SPLASH paper
 *                         buff[i, j, k] += smoothed_quantity_j             # <<<<<<<<<<<<<<
 * 
 *                         if use_normalization:
 */
                __pyx_t_11 = __pyx_v_i;
                __pyx_t_5 = __pyx_v_j;
                __pyx_t_27 = __pyx_v_k;
                *((__pyx_t_5numpy_float64_t *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_11 * __pyx_v_buff.strides[0]) ) + __pyx_t_5 * __pyx_v_buff.strides[1]) ) + __pyx_t_27 * __pyx_v_buff.strides[2]) )) += __pyx_v_smoothed_quantity_j;

                /* "yt/utilities/lib/pixelization_routines.pyx":1378
 *                         buff[i, j, k] += smoothed_quantity_j
 * 
 *                         if use_normalization:             # <<<<<<<<<<<<<<
 *                             buff_den[i, j, k] += prefactor_j * kernel(q_ij)
 * 
 */
                __pyx_t_7 = (__pyx_v_use_normalization != 0);
                if (__pyx_t_7) {

                  /* "yt/utilities/lib/pixelization_routines.pyx":1379
 * 
 *                         if use_normalization:
 *                             buff_den[i, j, k] += prefactor_j * kernel(q_ij)             # <<<<<<<<<<<<<<
 * 
 *     if use_normalization:
 */
                  if (unlikely(!__pyx_v_buff_den.memview)) { __Pyx_RaiseUnboundMemoryviewSliceNogil("buff_den"); __PYX_ERR(0, 1379, __pyx_L5_error) }
                  __pyx_t_27 = __pyx_v_i;
                  __pyx_t_5 = __pyx_v_j;
                  __pyx_t_11 = __pyx_v_k;
                  *((__pyx_t_5numpy_float64_t *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff_den.data + __pyx_t_27 * __pyx_v_buff_den.strides[0]) ) + __pyx_t_5 * __pyx_v_buff_den.strides[1]) ) + __pyx_t_11 * __pyx_v_buff_den.strides[2]) )) += (__pyx_v_prefactor_j * __pyx_v_kernel(__pyx_v_q_ij));

                  /* "yt/utilities/lib/pixelization_routines.pyx":1378
 *                         buff[i, j, k] += smoothed_quantity_j
 * 
 *                         if use_normalization:             # <<<<<<<<<<<<<<
 *                             buff_den[i, j, k] += prefactor_j * kernel(q_ij)
 * 
 */
                }
              }
            }
          }
        }
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":1337
 * 
 *     prog = 0
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for i in range(0, buff.shape[0]):
 *             for j in range(0, buff.shape[1]):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1381
 *                             buff_den[i, j, k] += prefactor_j * kernel(q_ij)
 * 
 *     if use_normalization:             # <<<<<<<<<<<<<<
 *         normalization_3d_utility(buff, buff_den)
 * 
 */
  __pyx_t_7 = (__pyx_v_use_normalization != 0);
  if (__pyx_t_7) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1382
 * 
 *     if use_normalization:
 *         normalization_3d_utility(buff, buff_den)             # <<<<<<<<<<<<<<
 * 
 * @cython.initializedcheck(False)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_normalization_3d_utility); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_buff, 3, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(!__pyx_v_buff_den.memview)) { __Pyx_RaiseUnboundLocalError("buff_den"); __PYX_ERR(0, 1382, __pyx_L1_error) }
    __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_buff_den, 3, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1382, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_15 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_15 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_t_1};
      __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1382, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_9)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_t_1};
      __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_9, __pyx_temp+1-__pyx_t_15, 2+__pyx_t_15); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1382, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_28 = PyTuple_New(2+__pyx_t_15); if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_28);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_28, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_28, 0+__pyx_t_15, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_28, 1+__pyx_t_15, __pyx_t_1);
      __pyx_t_2 = 0;
      __pyx_t_1 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_28, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1382, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_28); __pyx_t_28 = 0;
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1381
 *                             buff_den[i, j, k] += prefactor_j * kernel(q_ij)
 * 
 *     if use_normalization:             # <<<<<<<<<<<<<<
 *         normalization_3d_utility(buff, buff_den)
 * 
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1294
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def interpolate_sph_grid_gather(np.float64_t[:, :, :] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:, ::1] tree_positions, np.float64_t[:] bounds,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass, np.float64_t[:] pdens,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __PYX_XDEC_MEMVIEW(&__pyx_t_10, 1);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.interpolate_sph_grid_gather", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_pos, 1);
  __Pyx_XDECREF((PyObject *)__pyx_v_queue);
  __PYX_XDEC_MEMVIEW(&__pyx_v_buff_den, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_buff, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_tree_positions, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_bounds, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_hsml, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pmass, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdens, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_quantity_to_smooth, 1);
  __Pyx_XDECREF(__pyx_v_pbar);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1388
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_slice(             # <<<<<<<<<<<<<<
 *         np.float64_t[:, :] buff,
 *         np.float64_t[:] posx, np.float64_t[:] posy,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_19pixelize_sph_kernel_slice(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_19pixelize_sph_kernel_slice = {"pixelize_sph_kernel_slice", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_19pixelize_sph_kernel_slice, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_19pixelize_sph_kernel_slice(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_buff = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_posx = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_posy = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_hsml = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pmass = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdens = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_quantity_to_smooth = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_bounds = 0;
  PyObject *__pyx_v_kernel_name = 0;
  int __pyx_v_check_period;
  PyObject *__pyx_v_period = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pixelize_sph_kernel_slice (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buff,&__pyx_n_s_posx,&__pyx_n_s_posy,&__pyx_n_s_hsml,&__pyx_n_s_pmass,&__pyx_n_s_pdens,&__pyx_n_s_quantity_to_smooth,&__pyx_n_s_bounds,&__pyx_n_s_kernel_name,&__pyx_n_s_check_period,&__pyx_n_s_period,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    values[8] = ((PyObject *)__pyx_n_u_cubic);

    /* "yt/utilities/lib/pixelization_routines.pyx":1396
 *         bounds, kernel_name="cubic",
 *         int check_period=1,
 *         period=None):             # <<<<<<<<<<<<<<
 * 
 *     # similar method to pixelize_sph_kernel_projection
 */
    values[10] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_posx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_slice", 0, 8, 11, 1); __PYX_ERR(0, 1388, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_posy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_slice", 0, 8, 11, 2); __PYX_ERR(0, 1388, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hsml)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_slice", 0, 8, 11, 3); __PYX_ERR(0, 1388, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pmass)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_slice", 0, 8, 11, 4); __PYX_ERR(0, 1388, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_slice", 0, 8, 11, 5); __PYX_ERR(0, 1388, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quantity_to_smooth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_slice", 0, 8, 11, 6); __PYX_ERR(0, 1388, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_slice", 0, 8, 11, 7); __PYX_ERR(0, 1388, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kernel_name);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_check_period);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_period);
          if (value) { values[10] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pixelize_sph_kernel_slice") < 0)) __PYX_ERR(0, 1388, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buff = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_buff.memview)) __PYX_ERR(0, 1389, __pyx_L3_error)
    __pyx_v_posx = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_posx.memview)) __PYX_ERR(0, 1390, __pyx_L3_error)
    __pyx_v_posy = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_posy.memview)) __PYX_ERR(0, 1390, __pyx_L3_error)
    __pyx_v_hsml = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_hsml.memview)) __PYX_ERR(0, 1391, __pyx_L3_error)
    __pyx_v_pmass = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pmass.memview)) __PYX_ERR(0, 1391, __pyx_L3_error)
    __pyx_v_pdens = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdens.memview)) __PYX_ERR(0, 1392, __pyx_L3_error)
    __pyx_v_quantity_to_smooth = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_quantity_to_smooth.memview)) __PYX_ERR(0, 1393, __pyx_L3_error)
    __pyx_v_bounds = values[7];
    __pyx_v_kernel_name = values[8];
    if (values[9]) {
      __pyx_v_check_period = __Pyx_PyInt_As_int(values[9]); if (unlikely((__pyx_v_check_period == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1395, __pyx_L3_error)
    } else {
      __pyx_v_check_period = ((int)1);
    }
    __pyx_v_period = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_slice", 0, 8, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1388, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_sph_kernel_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_18pixelize_sph_kernel_slice(__pyx_self, __pyx_v_buff, __pyx_v_posx, __pyx_v_posy, __pyx_v_hsml, __pyx_v_pmass, __pyx_v_pdens, __pyx_v_quantity_to_smooth, __pyx_v_bounds, __pyx_v_kernel_name, __pyx_v_check_period, __pyx_v_period);

  /* "yt/utilities/lib/pixelization_routines.pyx":1388
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_slice(             # <<<<<<<<<<<<<<
 *         np.float64_t[:, :] buff,
 *         np.float64_t[:] posx, np.float64_t[:] posy,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_18pixelize_sph_kernel_slice(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_posx, __Pyx_memviewslice __pyx_v_posy, __Pyx_memviewslice __pyx_v_hsml, __Pyx_memviewslice __pyx_v_pmass, __Pyx_memviewslice __pyx_v_pdens, __Pyx_memviewslice __pyx_v_quantity_to_smooth, PyObject *__pyx_v_bounds, PyObject *__pyx_v_kernel_name, int __pyx_v_check_period, PyObject *__pyx_v_period) {
  __pyx_t_5numpy_intp_t __pyx_v_xsize;
  __pyx_t_5numpy_intp_t __pyx_v_ysize;
  __pyx_t_5numpy_float64_t __pyx_v_x_min;
  __pyx_t_5numpy_float64_t __pyx_v_x_max;
  __pyx_t_5numpy_float64_t __pyx_v_y_min;
  __pyx_t_5numpy_float64_t __pyx_v_y_max;
  __pyx_t_5numpy_float64_t __pyx_v_prefactor_j;
  __pyx_t_5numpy_int64_t __pyx_v_xi;
  __pyx_t_5numpy_int64_t __pyx_v_yi;
  __pyx_t_5numpy_int64_t __pyx_v_x0;
  __pyx_t_5numpy_int64_t __pyx_v_x1;
  __pyx_t_5numpy_int64_t __pyx_v_y0;
  __pyx_t_5numpy_int64_t __pyx_v_y1;
  __pyx_t_5numpy_int64_t __pyx_v_xxi;
  __pyx_t_5numpy_int64_t __pyx_v_yyi;
  __pyx_t_5numpy_float64_t __pyx_v_q_ij;
  __pyx_t_5numpy_float64_t __pyx_v_posx_diff;
  __pyx_t_5numpy_float64_t __pyx_v_posy_diff;
  __pyx_t_5numpy_float64_t __pyx_v_ih_j;
  __pyx_t_5numpy_float64_t __pyx_v_x;
  __pyx_t_5numpy_float64_t __pyx_v_y;
  __pyx_t_5numpy_float64_t __pyx_v_dx;
  __pyx_t_5numpy_float64_t __pyx_v_dy;
  __pyx_t_5numpy_float64_t __pyx_v_idx;
  __pyx_t_5numpy_float64_t __pyx_v_idy;
  __pyx_t_5numpy_float64_t __pyx_v_h_j2;
  __pyx_t_5numpy_float64_t __pyx_v_h_j;
  __pyx_t_5numpy_float64_t __pyx_v_px;
  __pyx_t_5numpy_float64_t __pyx_v_py;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_ii;
  int __pyx_v_jj;
  __pyx_t_5numpy_float64_t __pyx_v_period_x;
  __pyx_t_5numpy_float64_t __pyx_v_period_y;
  int *__pyx_v_xiter;
  int *__pyx_v_yiter;
  __pyx_t_5numpy_float64_t *__pyx_v_xiterv;
  __pyx_t_5numpy_float64_t *__pyx_v_yiterv;
  __pyx_t_2yt_8geometry_16particle_deposit_kernel_func __pyx_v_kernel;
  __pyx_t_5numpy_float64_t *__pyx_v_local_buff;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_5numpy_float64_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  __pyx_t_5numpy_intp_t __pyx_t_7;
  __pyx_t_5numpy_intp_t __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  int __pyx_t_14;
  __pyx_t_5numpy_int64_t __pyx_t_15;
  __pyx_t_5numpy_int64_t __pyx_t_16;
  __pyx_t_5numpy_int64_t __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  __pyx_t_5numpy_int64_t __pyx_t_19;
  __pyx_t_5numpy_int64_t __pyx_t_20;
  __pyx_t_5numpy_int64_t __pyx_t_21;
  __pyx_t_5numpy_intp_t __pyx_t_22;
  __pyx_t_5numpy_intp_t __pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pixelize_sph_kernel_slice", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1405
 *     cdef np.float64_t x, y, dx, dy, idx, idy, h_j2, h_j, px, py
 *     cdef int i, j, ii, jj
 *     cdef np.float64_t period_x = 0, period_y = 0             # <<<<<<<<<<<<<<
 *     cdef int * xiter
 *     cdef int * yiter
 */
  __pyx_v_period_x = 0.0;
  __pyx_v_period_y = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1411
 *     cdef np.float64_t * yiterv
 * 
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  __pyx_t_1 = (__pyx_v_period != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1412
 * 
 *     if period is not None:
 *         period_x = period[0]             # <<<<<<<<<<<<<<
 *         period_y = period[1]
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_period, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1412, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_period_x = __pyx_t_4;

    /* "yt/utilities/lib/pixelization_routines.pyx":1413
 *     if period is not None:
 *         period_x = period[0]
 *         period_y = period[1]             # <<<<<<<<<<<<<<
 * 
 *     xsize, ysize = buff.shape[0], buff.shape[1]
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_period, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1413, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_period_y = __pyx_t_4;

    /* "yt/utilities/lib/pixelization_routines.pyx":1411
 *     cdef np.float64_t * yiterv
 * 
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1415
 *         period_y = period[1]
 * 
 *     xsize, ysize = buff.shape[0], buff.shape[1]             # <<<<<<<<<<<<<<
 * 
 *     x_min = bounds[0]
 */
  __pyx_t_5 = (__pyx_v_buff.shape[0]);
  __pyx_t_6 = (__pyx_v_buff.shape[1]);
  __pyx_v_xsize = __pyx_t_5;
  __pyx_v_ysize = __pyx_t_6;

  /* "yt/utilities/lib/pixelization_routines.pyx":1417
 *     xsize, ysize = buff.shape[0], buff.shape[1]
 * 
 *     x_min = bounds[0]             # <<<<<<<<<<<<<<
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x_min = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":1418
 * 
 *     x_min = bounds[0]
 *     x_max = bounds[1]             # <<<<<<<<<<<<<<
 *     y_min = bounds[2]
 *     y_max = bounds[3]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x_max = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":1419
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 *     y_min = bounds[2]             # <<<<<<<<<<<<<<
 *     y_max = bounds[3]
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_y_min = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":1420
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 *     y_max = bounds[3]             # <<<<<<<<<<<<<<
 * 
 *     dx = (x_max - x_min) / xsize
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1420, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_y_max = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":1422
 *     y_max = bounds[3]
 * 
 *     dx = (x_max - x_min) / xsize             # <<<<<<<<<<<<<<
 *     dy = (y_max - y_min) / ysize
 *     idx = 1.0/dx
 */
  __pyx_v_dx = ((__pyx_v_x_max - __pyx_v_x_min) / ((__pyx_t_5numpy_float64_t)__pyx_v_xsize));

  /* "yt/utilities/lib/pixelization_routines.pyx":1423
 * 
 *     dx = (x_max - x_min) / xsize
 *     dy = (y_max - y_min) / ysize             # <<<<<<<<<<<<<<
 *     idx = 1.0/dx
 *     idy = 1.0/dy
 */
  __pyx_v_dy = ((__pyx_v_y_max - __pyx_v_y_min) / ((__pyx_t_5numpy_float64_t)__pyx_v_ysize));

  /* "yt/utilities/lib/pixelization_routines.pyx":1424
 *     dx = (x_max - x_min) / xsize
 *     dy = (y_max - y_min) / ysize
 *     idx = 1.0/dx             # <<<<<<<<<<<<<<
 *     idy = 1.0/dy
 * 
 */
  __pyx_v_idx = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_dx);

  /* "yt/utilities/lib/pixelization_routines.pyx":1425
 *     dy = (y_max - y_min) / ysize
 *     idx = 1.0/dx
 *     idy = 1.0/dy             # <<<<<<<<<<<<<<
 * 
 *     kernel = get_kernel_func(kernel_name)
 */
  __pyx_v_idy = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_dy);

  /* "yt/utilities/lib/pixelization_routines.pyx":1427
 *     idy = 1.0/dy
 * 
 *     kernel = get_kernel_func(kernel_name)             # <<<<<<<<<<<<<<
 * 
 *     with nogil, parallel():
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_kernel_name))||((__pyx_v_kernel_name) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_kernel_name)->tp_name), 0))) __PYX_ERR(0, 1427, __pyx_L1_error)
  __pyx_v_kernel = __pyx_f_2yt_8geometry_16particle_deposit_get_kernel_func(((PyObject*)__pyx_v_kernel_name));

  /* "yt/utilities/lib/pixelization_routines.pyx":1429
 *     kernel = get_kernel_func(kernel_name)
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         # NOTE see note in pixelize_sph_kernel_projection
 *         local_buff = <np.float64_t *> malloc(sizeof(np.float64_t) * xsize * ysize)
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {
        {
            const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
            PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
            int __pyx_parallel_why;
            __pyx_parallel_why = 0;
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            #ifdef _OPENMP
            #pragma omp parallel private(__pyx_v_i, __pyx_v_local_buff, __pyx_v_xiter, __pyx_v_xiterv, __pyx_v_xxi, __pyx_v_yiter, __pyx_v_yiterv, __pyx_v_yyi) reduction(*:__pyx_v_prefactor_j) private(__pyx_t_1, __pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_2, __pyx_t_20, __pyx_t_21, __pyx_t_22, __pyx_t_23, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9) private(__pyx_filename, __pyx_lineno, __pyx_clineno) shared(__pyx_parallel_why, __pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb)
            #endif /* _OPENMP */
            {
                #ifdef _OPENMP
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                Py_BEGIN_ALLOW_THREADS
                #endif /* _OPENMP */
                /* Initialize private variables to invalid values */
                __pyx_v_i = ((int)0xbad0bad0);
                __pyx_v_local_buff = ((__pyx_t_5numpy_float64_t *)1);
                __pyx_v_xiter = ((int *)1);
                __pyx_v_xiterv = ((__pyx_t_5numpy_float64_t *)1);
                __pyx_v_xxi = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                __pyx_v_yiter = ((int *)1);
                __pyx_v_yiterv = ((__pyx_t_5numpy_float64_t *)1);
                __pyx_v_yyi = ((__pyx_t_5numpy_int64_t)0xbad0bad0);

                /* "yt/utilities/lib/pixelization_routines.pyx":1431
 *     with nogil, parallel():
 *         # NOTE see note in pixelize_sph_kernel_projection
 *         local_buff = <np.float64_t *> malloc(sizeof(np.float64_t) * xsize * ysize)             # <<<<<<<<<<<<<<
 *         xiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 */
                __pyx_v_local_buff = ((__pyx_t_5numpy_float64_t *)malloc((((sizeof(__pyx_t_5numpy_float64_t)) * __pyx_v_xsize) * __pyx_v_ysize)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1432
 *         # NOTE see note in pixelize_sph_kernel_projection
 *         local_buff = <np.float64_t *> malloc(sizeof(np.float64_t) * xsize * ysize)
 *         xiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)             # <<<<<<<<<<<<<<
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         xiter = <int *> malloc(sizeof(int) * 2)
 */
                __pyx_v_xiterv = ((__pyx_t_5numpy_float64_t *)malloc(((sizeof(__pyx_t_5numpy_float64_t)) * 2)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1433
 *         local_buff = <np.float64_t *> malloc(sizeof(np.float64_t) * xsize * ysize)
 *         xiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)             # <<<<<<<<<<<<<<
 *         xiter = <int *> malloc(sizeof(int) * 2)
 *         yiter = <int *> malloc(sizeof(int) * 2)
 */
                __pyx_v_yiterv = ((__pyx_t_5numpy_float64_t *)malloc(((sizeof(__pyx_t_5numpy_float64_t)) * 2)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1434
 *         xiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         xiter = <int *> malloc(sizeof(int) * 2)             # <<<<<<<<<<<<<<
 *         yiter = <int *> malloc(sizeof(int) * 2)
 *         xiter[0] = yiter[0] = 0
 */
                __pyx_v_xiter = ((int *)malloc(((sizeof(int)) * 2)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1435
 *         yiterv = <np.float64_t *> malloc(sizeof(np.float64_t) * 2)
 *         xiter = <int *> malloc(sizeof(int) * 2)
 *         yiter = <int *> malloc(sizeof(int) * 2)             # <<<<<<<<<<<<<<
 *         xiter[0] = yiter[0] = 0
 *         xiterv[0] = yiterv[0] = 0.0
 */
                __pyx_v_yiter = ((int *)malloc(((sizeof(int)) * 2)));

                /* "yt/utilities/lib/pixelization_routines.pyx":1436
 *         xiter = <int *> malloc(sizeof(int) * 2)
 *         yiter = <int *> malloc(sizeof(int) * 2)
 *         xiter[0] = yiter[0] = 0             # <<<<<<<<<<<<<<
 *         xiterv[0] = yiterv[0] = 0.0
 *         for i in range(xsize * ysize):
 */
                (__pyx_v_xiter[0]) = 0;
                (__pyx_v_yiter[0]) = 0;

                /* "yt/utilities/lib/pixelization_routines.pyx":1437
 *         yiter = <int *> malloc(sizeof(int) * 2)
 *         xiter[0] = yiter[0] = 0
 *         xiterv[0] = yiterv[0] = 0.0             # <<<<<<<<<<<<<<
 *         for i in range(xsize * ysize):
 *             local_buff[i] = 0.0
 */
                (__pyx_v_xiterv[0]) = 0.0;
                (__pyx_v_yiterv[0]) = 0.0;

                /* "yt/utilities/lib/pixelization_routines.pyx":1438
 *         xiter[0] = yiter[0] = 0
 *         xiterv[0] = yiterv[0] = 0.0
 *         for i in range(xsize * ysize):             # <<<<<<<<<<<<<<
 *             local_buff[i] = 0.0
 * 
 */
                __pyx_t_7 = (__pyx_v_xsize * __pyx_v_ysize);
                __pyx_t_8 = __pyx_t_7;
                for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
                  __pyx_v_i = __pyx_t_9;

                  /* "yt/utilities/lib/pixelization_routines.pyx":1439
 *         xiterv[0] = yiterv[0] = 0.0
 *         for i in range(xsize * ysize):
 *             local_buff[i] = 0.0             # <<<<<<<<<<<<<<
 * 
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 */
                  (__pyx_v_local_buff[__pyx_v_i]) = 0.0;
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":1441
 *             local_buff[i] = 0.0
 * 
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):             # <<<<<<<<<<<<<<
 *             if j % 100000 == 0:
 *                 with gil:
 */
                __pyx_t_6 = (__pyx_v_posx.shape[0]);
                if ((1 == 0)) abort();
                {
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp0 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp1 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp2 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    int __pyx_parallel_temp3 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp4 = ((int)0xbad0bad0);
                    int __pyx_parallel_temp5 = ((int)0xbad0bad0);
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp6 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp7 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp8 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp9 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp10 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp11 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp12 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp13 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp14 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp15 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_float64_t __pyx_parallel_temp16 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp17 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp18 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    __pyx_t_5numpy_int64_t __pyx_parallel_temp19 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                    const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
                    PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
                    int __pyx_parallel_why;
                    __pyx_parallel_why = 0;
                    __pyx_t_10 = (__pyx_t_6 - 0 + 1 - 1/abs(1)) / 1;
                    if (__pyx_t_10 > 0)
                    {
                        #ifdef _OPENMP
                        #pragma omp for lastprivate(__pyx_v_h_j) lastprivate(__pyx_v_h_j2) lastprivate(__pyx_v_ih_j) lastprivate(__pyx_v_ii) firstprivate(__pyx_v_j) lastprivate(__pyx_v_j) lastprivate(__pyx_v_jj) lastprivate(__pyx_v_posx_diff) lastprivate(__pyx_v_posy_diff) lastprivate(__pyx_v_px) lastprivate(__pyx_v_py) lastprivate(__pyx_v_q_ij) lastprivate(__pyx_v_x) lastprivate(__pyx_v_x0) lastprivate(__pyx_v_x1) lastprivate(__pyx_v_xi) lastprivate(__pyx_v_y) lastprivate(__pyx_v_y0) lastprivate(__pyx_v_y1) lastprivate(__pyx_v_yi) schedule(dynamic)
                        #endif /* _OPENMP */
                        for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_10; __pyx_t_5++){
                            if (__pyx_parallel_why < 2)
                            {
                                __pyx_v_j = (int)(0 + 1 * __pyx_t_5);
                                /* Initialize private variables to invalid values */
                                __pyx_v_h_j = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_h_j2 = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_ih_j = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_ii = ((int)0xbad0bad0);
                                __pyx_v_jj = ((int)0xbad0bad0);
                                __pyx_v_posx_diff = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_posy_diff = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_px = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_py = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_q_ij = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_x = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_x0 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_x1 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_xi = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_y = ((__pyx_t_5numpy_float64_t)__PYX_NAN());
                                __pyx_v_y0 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_y1 = ((__pyx_t_5numpy_int64_t)0xbad0bad0);
                                __pyx_v_yi = ((__pyx_t_5numpy_int64_t)0xbad0bad0);

                                /* "yt/utilities/lib/pixelization_routines.pyx":1442
 * 
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 *             if j % 100000 == 0:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     PyErr_CheckSignals()
 */
                                __pyx_t_2 = (((__pyx_v_j % 0x186A0) == 0) != 0);
                                if (__pyx_t_2) {

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1443
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 *             if j % 100000 == 0:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     PyErr_CheckSignals()
 * 
 */
                                  {
                                      #ifdef WITH_THREAD
                                      PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                      #endif
                                      /*try:*/ {

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1444
 *             if j % 100000 == 0:
 *                 with gil:
 *                     PyErr_CheckSignals()             # <<<<<<<<<<<<<<
 * 
 *             xiter[1] = yiter[1] = 999
 */
                                        __pyx_t_9 = PyErr_CheckSignals(); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 1444, __pyx_L21_error)
                                      }

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1443
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 *             if j % 100000 == 0:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     PyErr_CheckSignals()
 * 
 */
                                      /*finally:*/ {
                                        /*normal exit:*/{
                                          #ifdef WITH_THREAD
                                          __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                          #endif
                                          goto __pyx_L22;
                                        }
                                        __pyx_L21_error: {
                                          #ifdef WITH_THREAD
                                          __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                          #endif
                                          goto __pyx_L15_error;
                                        }
                                        __pyx_L22:;
                                      }
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1442
 * 
 *         for j in prange(0, posx.shape[0], schedule="dynamic"):
 *             if j % 100000 == 0:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     PyErr_CheckSignals()
 */
                                }

                                /* "yt/utilities/lib/pixelization_routines.pyx":1446
 *                     PyErr_CheckSignals()
 * 
 *             xiter[1] = yiter[1] = 999             # <<<<<<<<<<<<<<
 * 
 *             if check_period == 1:
 */
                                (__pyx_v_xiter[1]) = 0x3E7;
                                (__pyx_v_yiter[1]) = 0x3E7;

                                /* "yt/utilities/lib/pixelization_routines.pyx":1448
 *             xiter[1] = yiter[1] = 999
 * 
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1
 */
                                __pyx_t_2 = ((__pyx_v_check_period == 1) != 0);
                                if (__pyx_t_2) {

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1449
 * 
 *             if check_period == 1:
 *                 if posx[j] - hsml[j] < x_min:             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
                                  __pyx_t_11 = __pyx_v_j;
                                  __pyx_t_12 = __pyx_v_j;
                                  __pyx_t_2 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posx.data + __pyx_t_11 * __pyx_v_posx.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_12 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_x_min) != 0);
                                  if (__pyx_t_2) {

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1450
 *             if check_period == 1:
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:
 */
                                    (__pyx_v_xiter[1]) = 1;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1451
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x             # <<<<<<<<<<<<<<
 *                 elif posx[j] + hsml[j] > x_max:
 *                     xiter[1] = -1
 */
                                    (__pyx_v_xiterv[1]) = __pyx_v_period_x;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1449
 * 
 *             if check_period == 1:
 *                 if posx[j] - hsml[j] < x_min:             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
                                    goto __pyx_L24;
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1452
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
                                  __pyx_t_12 = __pyx_v_j;
                                  __pyx_t_11 = __pyx_v_j;
                                  __pyx_t_2 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posx.data + __pyx_t_12 * __pyx_v_posx.strides[0]) ))) + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_11 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_x_max) != 0);
                                  if (__pyx_t_2) {

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1453
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:
 *                     xiter[1] = -1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:
 */
                                    (__pyx_v_xiter[1]) = -1;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1454
 *                 elif posx[j] + hsml[j] > x_max:
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x             # <<<<<<<<<<<<<<
 *                 if posy[j] - hsml[j] < y_min:
 *                     yiter[1] = +1
 */
                                    (__pyx_v_xiterv[1]) = (-__pyx_v_period_x);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1452
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
                                  }
                                  __pyx_L24:;

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1455
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
                                  __pyx_t_11 = __pyx_v_j;
                                  __pyx_t_12 = __pyx_v_j;
                                  __pyx_t_2 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posy.data + __pyx_t_11 * __pyx_v_posy.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_12 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_y_min) != 0);
                                  if (__pyx_t_2) {

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1456
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:
 *                     yiter[1] = +1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:
 */
                                    (__pyx_v_yiter[1]) = 1;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1457
 *                 if posy[j] - hsml[j] < y_min:
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y             # <<<<<<<<<<<<<<
 *                 elif posy[j] + hsml[j] > y_max:
 *                     yiter[1] = -1
 */
                                    (__pyx_v_yiterv[1]) = __pyx_v_period_y;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1455
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
                                    goto __pyx_L25;
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1458
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
                                  __pyx_t_12 = __pyx_v_j;
                                  __pyx_t_11 = __pyx_v_j;
                                  __pyx_t_2 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posy.data + __pyx_t_12 * __pyx_v_posy.strides[0]) ))) + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_11 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_y_max) != 0);
                                  if (__pyx_t_2) {

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1459
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:
 *                     yiter[1] = -1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = -period_y
 * 
 */
                                    (__pyx_v_yiter[1]) = -1;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1460
 *                 elif posy[j] + hsml[j] > y_max:
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y             # <<<<<<<<<<<<<<
 * 
 *             h_j2 = fmax(hsml[j]*hsml[j], dx*dy)
 */
                                    (__pyx_v_yiterv[1]) = (-__pyx_v_period_y);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1458
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
                                  }
                                  __pyx_L25:;

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1448
 *             xiter[1] = yiter[1] = 999
 * 
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1
 */
                                }

                                /* "yt/utilities/lib/pixelization_routines.pyx":1462
 *                     yiterv[1] = -period_y
 * 
 *             h_j2 = fmax(hsml[j]*hsml[j], dx*dy)             # <<<<<<<<<<<<<<
 *             h_j = math.sqrt(h_j2)
 *             ih_j = 1.0/h_j
 */
                                __pyx_t_11 = __pyx_v_j;
                                __pyx_t_12 = __pyx_v_j;
                                __pyx_v_h_j2 = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_11 * __pyx_v_hsml.strides[0]) ))) * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_12 * __pyx_v_hsml.strides[0]) )))), (__pyx_v_dx * __pyx_v_dy));

                                /* "yt/utilities/lib/pixelization_routines.pyx":1463
 * 
 *             h_j2 = fmax(hsml[j]*hsml[j], dx*dy)
 *             h_j = math.sqrt(h_j2)             # <<<<<<<<<<<<<<
 *             ih_j = 1.0/h_j
 * 
 */
                                __pyx_v_h_j = sqrt(__pyx_v_h_j2);

                                /* "yt/utilities/lib/pixelization_routines.pyx":1464
 *             h_j2 = fmax(hsml[j]*hsml[j], dx*dy)
 *             h_j = math.sqrt(h_j2)
 *             ih_j = 1.0/h_j             # <<<<<<<<<<<<<<
 * 
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**3
 */
                                __pyx_v_ih_j = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_h_j);

                                /* "yt/utilities/lib/pixelization_routines.pyx":1466
 *             ih_j = 1.0/h_j
 * 
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**3             # <<<<<<<<<<<<<<
 *             prefactor_j *= quantity_to_smooth[j]
 * 
 */
                                __pyx_t_12 = __pyx_v_j;
                                __pyx_t_11 = __pyx_v_j;
                                __pyx_t_13 = __pyx_v_j;
                                __pyx_v_prefactor_j = (((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pmass.data + __pyx_t_12 * __pyx_v_pmass.strides[0]) ))) / (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pdens.data + __pyx_t_11 * __pyx_v_pdens.strides[0]) )))) / pow((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) ))), 3.0));

                                /* "yt/utilities/lib/pixelization_routines.pyx":1467
 * 
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**3
 *             prefactor_j *= quantity_to_smooth[j]             # <<<<<<<<<<<<<<
 * 
 *             for ii in range(2):
 */
                                __pyx_t_13 = __pyx_v_j;
                                __pyx_v_prefactor_j = (__pyx_v_prefactor_j * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_quantity_to_smooth.data + __pyx_t_13 * __pyx_v_quantity_to_smooth.strides[0]) ))));

                                /* "yt/utilities/lib/pixelization_routines.pyx":1469
 *             prefactor_j *= quantity_to_smooth[j]
 * 
 *             for ii in range(2):             # <<<<<<<<<<<<<<
 *                 if xiter[ii] == 999: continue
 *                 px = posx[j] + xiterv[ii]
 */
                                for (__pyx_t_9 = 0; __pyx_t_9 < 2; __pyx_t_9+=1) {
                                  __pyx_v_ii = __pyx_t_9;

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1470
 * 
 *             for ii in range(2):
 *                 if xiter[ii] == 999: continue             # <<<<<<<<<<<<<<
 *                 px = posx[j] + xiterv[ii]
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 */
                                  __pyx_t_2 = (((__pyx_v_xiter[__pyx_v_ii]) == 0x3E7) != 0);
                                  if (__pyx_t_2) {
                                    goto __pyx_L26_continue;
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1471
 *             for ii in range(2):
 *                 if xiter[ii] == 999: continue
 *                 px = posx[j] + xiterv[ii]             # <<<<<<<<<<<<<<
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 *                 for jj in range(2):
 */
                                  __pyx_t_13 = __pyx_v_j;
                                  __pyx_v_px = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posx.data + __pyx_t_13 * __pyx_v_posx.strides[0]) ))) + (__pyx_v_xiterv[__pyx_v_ii]));

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1472
 *                 if xiter[ii] == 999: continue
 *                 px = posx[j] + xiterv[ii]
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue             # <<<<<<<<<<<<<<
 *                 for jj in range(2):
 *                     if yiter[jj] == 999: continue
 */
                                  __pyx_t_13 = __pyx_v_j;
                                  __pyx_t_1 = (((__pyx_v_px + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_x_min) != 0);
                                  if (!__pyx_t_1) {
                                  } else {
                                    __pyx_t_2 = __pyx_t_1;
                                    goto __pyx_L30_bool_binop_done;
                                  }
                                  __pyx_t_13 = __pyx_v_j;
                                  __pyx_t_1 = (((__pyx_v_px - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_x_max) != 0);
                                  __pyx_t_2 = __pyx_t_1;
                                  __pyx_L30_bool_binop_done:;
                                  if (__pyx_t_2) {
                                    goto __pyx_L26_continue;
                                  }

                                  /* "yt/utilities/lib/pixelization_routines.pyx":1473
 *                 px = posx[j] + xiterv[ii]
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 *                 for jj in range(2):             # <<<<<<<<<<<<<<
 *                     if yiter[jj] == 999: continue
 *                     py = posy[j] + yiterv[jj]
 */
                                  for (__pyx_t_14 = 0; __pyx_t_14 < 2; __pyx_t_14+=1) {
                                    __pyx_v_jj = __pyx_t_14;

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1474
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 *                 for jj in range(2):
 *                     if yiter[jj] == 999: continue             # <<<<<<<<<<<<<<
 *                     py = posy[j] + yiterv[jj]
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue
 */
                                    __pyx_t_2 = (((__pyx_v_yiter[__pyx_v_jj]) == 0x3E7) != 0);
                                    if (__pyx_t_2) {
                                      goto __pyx_L32_continue;
                                    }

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1475
 *                 for jj in range(2):
 *                     if yiter[jj] == 999: continue
 *                     py = posy[j] + yiterv[jj]             # <<<<<<<<<<<<<<
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue
 * 
 */
                                    __pyx_t_13 = __pyx_v_j;
                                    __pyx_v_py = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posy.data + __pyx_t_13 * __pyx_v_posy.strides[0]) ))) + (__pyx_v_yiterv[__pyx_v_jj]));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1476
 *                     if yiter[jj] == 999: continue
 *                     py = posy[j] + yiterv[jj]
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue             # <<<<<<<<<<<<<<
 * 
 *                     x0 = <np.int64_t> ( (px - hsml[j] - x_min) * idx)
 */
                                    __pyx_t_13 = __pyx_v_j;
                                    __pyx_t_1 = (((__pyx_v_py + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_y_min) != 0);
                                    if (!__pyx_t_1) {
                                    } else {
                                      __pyx_t_2 = __pyx_t_1;
                                      goto __pyx_L36_bool_binop_done;
                                    }
                                    __pyx_t_13 = __pyx_v_j;
                                    __pyx_t_1 = (((__pyx_v_py - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_y_max) != 0);
                                    __pyx_t_2 = __pyx_t_1;
                                    __pyx_L36_bool_binop_done:;
                                    if (__pyx_t_2) {
                                      goto __pyx_L32_continue;
                                    }

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1478
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue
 * 
 *                     x0 = <np.int64_t> ( (px - hsml[j] - x_min) * idx)             # <<<<<<<<<<<<<<
 *                     x1 = <np.int64_t> ( (px + hsml[j] - x_min) * idx)
 *                     x0 = iclip(x0-1, 0, xsize)
 */
                                    __pyx_t_13 = __pyx_v_j;
                                    __pyx_v_x0 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_px - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_x_min) * __pyx_v_idx));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1479
 * 
 *                     x0 = <np.int64_t> ( (px - hsml[j] - x_min) * idx)
 *                     x1 = <np.int64_t> ( (px + hsml[j] - x_min) * idx)             # <<<<<<<<<<<<<<
 *                     x0 = iclip(x0-1, 0, xsize)
 *                     x1 = iclip(x1+1, 0, xsize)
 */
                                    __pyx_t_13 = __pyx_v_j;
                                    __pyx_v_x1 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_px + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_x_min) * __pyx_v_idx));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1480
 *                     x0 = <np.int64_t> ( (px - hsml[j] - x_min) * idx)
 *                     x1 = <np.int64_t> ( (px + hsml[j] - x_min) * idx)
 *                     x0 = iclip(x0-1, 0, xsize)             # <<<<<<<<<<<<<<
 *                     x1 = iclip(x1+1, 0, xsize)
 * 
 */
                                    __pyx_v_x0 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_x0 - 1), 0, __pyx_v_xsize);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1481
 *                     x1 = <np.int64_t> ( (px + hsml[j] - x_min) * idx)
 *                     x0 = iclip(x0-1, 0, xsize)
 *                     x1 = iclip(x1+1, 0, xsize)             # <<<<<<<<<<<<<<
 * 
 *                     y0 = <np.int64_t> ( (py - hsml[j] - y_min) * idy)
 */
                                    __pyx_v_x1 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_x1 + 1), 0, __pyx_v_xsize);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1483
 *                     x1 = iclip(x1+1, 0, xsize)
 * 
 *                     y0 = <np.int64_t> ( (py - hsml[j] - y_min) * idy)             # <<<<<<<<<<<<<<
 *                     y1 = <np.int64_t> ( (py + hsml[j] - y_min) * idy)
 *                     y0 = iclip(y0-1, 0, ysize)
 */
                                    __pyx_t_13 = __pyx_v_j;
                                    __pyx_v_y0 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_py - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_y_min) * __pyx_v_idy));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1484
 * 
 *                     y0 = <np.int64_t> ( (py - hsml[j] - y_min) * idy)
 *                     y1 = <np.int64_t> ( (py + hsml[j] - y_min) * idy)             # <<<<<<<<<<<<<<
 *                     y0 = iclip(y0-1, 0, ysize)
 *                     y1 = iclip(y1+1, 0, ysize)
 */
                                    __pyx_t_13 = __pyx_v_j;
                                    __pyx_v_y1 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_py + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_y_min) * __pyx_v_idy));

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1485
 *                     y0 = <np.int64_t> ( (py - hsml[j] - y_min) * idy)
 *                     y1 = <np.int64_t> ( (py + hsml[j] - y_min) * idy)
 *                     y0 = iclip(y0-1, 0, ysize)             # <<<<<<<<<<<<<<
 *                     y1 = iclip(y1+1, 0, ysize)
 * 
 */
                                    __pyx_v_y0 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_y0 - 1), 0, __pyx_v_ysize);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1486
 *                     y1 = <np.int64_t> ( (py + hsml[j] - y_min) * idy)
 *                     y0 = iclip(y0-1, 0, ysize)
 *                     y1 = iclip(y1+1, 0, ysize)             # <<<<<<<<<<<<<<
 * 
 *                     # Now we know which pixels to deposit onto for this particle,
 */
                                    __pyx_v_y1 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_y1 + 1), 0, __pyx_v_ysize);

                                    /* "yt/utilities/lib/pixelization_routines.pyx":1490
 *                     # Now we know which pixels to deposit onto for this particle,
 *                     # so loop over them and add this particle's contribution
 *                     for xi in range(x0, x1):             # <<<<<<<<<<<<<<
 *                         x = (xi + 0.5) * dx + x_min
 * 
 */
                                    __pyx_t_15 = __pyx_v_x1;
                                    __pyx_t_16 = __pyx_t_15;
                                    for (__pyx_t_17 = __pyx_v_x0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
                                      __pyx_v_xi = __pyx_t_17;

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1491
 *                     # so loop over them and add this particle's contribution
 *                     for xi in range(x0, x1):
 *                         x = (xi + 0.5) * dx + x_min             # <<<<<<<<<<<<<<
 * 
 *                         posx_diff = px - x
 */
                                      __pyx_v_x = (((__pyx_v_xi + 0.5) * __pyx_v_dx) + __pyx_v_x_min);

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1493
 *                         x = (xi + 0.5) * dx + x_min
 * 
 *                         posx_diff = px - x             # <<<<<<<<<<<<<<
 *                         posx_diff = posx_diff * posx_diff
 *                         if posx_diff > h_j2:
 */
                                      __pyx_v_posx_diff = (__pyx_v_px - __pyx_v_x);

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1494
 * 
 *                         posx_diff = px - x
 *                         posx_diff = posx_diff * posx_diff             # <<<<<<<<<<<<<<
 *                         if posx_diff > h_j2:
 *                             continue
 */
                                      __pyx_v_posx_diff = (__pyx_v_posx_diff * __pyx_v_posx_diff);

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1495
 *                         posx_diff = px - x
 *                         posx_diff = posx_diff * posx_diff
 *                         if posx_diff > h_j2:             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
                                      __pyx_t_2 = ((__pyx_v_posx_diff > __pyx_v_h_j2) != 0);
                                      if (__pyx_t_2) {

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1496
 *                         posx_diff = posx_diff * posx_diff
 *                         if posx_diff > h_j2:
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         for yi in range(y0, y1):
 */
                                        goto __pyx_L38_continue;

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1495
 *                         posx_diff = px - x
 *                         posx_diff = posx_diff * posx_diff
 *                         if posx_diff > h_j2:             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
                                      }

                                      /* "yt/utilities/lib/pixelization_routines.pyx":1498
 *                             continue
 * 
 *                         for yi in range(y0, y1):             # <<<<<<<<<<<<<<
 *                             y = (yi + 0.5) * dy + y_min
 * 
 */
                                      __pyx_t_18 = __pyx_v_y1;
                                      __pyx_t_19 = __pyx_t_18;
                                      for (__pyx_t_20 = __pyx_v_y0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
                                        __pyx_v_yi = __pyx_t_20;

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1499
 * 
 *                         for yi in range(y0, y1):
 *                             y = (yi + 0.5) * dy + y_min             # <<<<<<<<<<<<<<
 * 
 *                             posy_diff = py - y
 */
                                        __pyx_v_y = (((__pyx_v_yi + 0.5) * __pyx_v_dy) + __pyx_v_y_min);

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1501
 *                             y = (yi + 0.5) * dy + y_min
 * 
 *                             posy_diff = py - y             # <<<<<<<<<<<<<<
 *                             posy_diff = posy_diff * posy_diff
 *                             if posy_diff > h_j2:
 */
                                        __pyx_v_posy_diff = (__pyx_v_py - __pyx_v_y);

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1502
 * 
 *                             posy_diff = py - y
 *                             posy_diff = posy_diff * posy_diff             # <<<<<<<<<<<<<<
 *                             if posy_diff > h_j2:
 *                                 continue
 */
                                        __pyx_v_posy_diff = (__pyx_v_posy_diff * __pyx_v_posy_diff);

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1503
 *                             posy_diff = py - y
 *                             posy_diff = posy_diff * posy_diff
 *                             if posy_diff > h_j2:             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
                                        __pyx_t_2 = ((__pyx_v_posy_diff > __pyx_v_h_j2) != 0);
                                        if (__pyx_t_2) {

                                          /* "yt/utilities/lib/pixelization_routines.pyx":1504
 *                             posy_diff = posy_diff * posy_diff
 *                             if posy_diff > h_j2:
 *                                 continue             # <<<<<<<<<<<<<<
 * 
 *                             # see equation 4 of the SPLASH paper
 */
                                          goto __pyx_L41_continue;

                                          /* "yt/utilities/lib/pixelization_routines.pyx":1503
 *                             posy_diff = py - y
 *                             posy_diff = posy_diff * posy_diff
 *                             if posy_diff > h_j2:             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
                                        }

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1507
 * 
 *                             # see equation 4 of the SPLASH paper
 *                             q_ij = math.sqrt(posx_diff + posy_diff) * ih_j             # <<<<<<<<<<<<<<
 *                             if q_ij >= 1:
 *                                 continue
 */
                                        __pyx_v_q_ij = (sqrt((__pyx_v_posx_diff + __pyx_v_posy_diff)) * __pyx_v_ih_j);

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1508
 *                             # see equation 4 of the SPLASH paper
 *                             q_ij = math.sqrt(posx_diff + posy_diff) * ih_j
 *                             if q_ij >= 1:             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
                                        __pyx_t_2 = ((__pyx_v_q_ij >= 1.0) != 0);
                                        if (__pyx_t_2) {

                                          /* "yt/utilities/lib/pixelization_routines.pyx":1509
 *                             q_ij = math.sqrt(posx_diff + posy_diff) * ih_j
 *                             if q_ij >= 1:
 *                                 continue             # <<<<<<<<<<<<<<
 * 
 *                             # see equations 6, 9, and 11 of the SPLASH paper
 */
                                          goto __pyx_L41_continue;

                                          /* "yt/utilities/lib/pixelization_routines.pyx":1508
 *                             # see equation 4 of the SPLASH paper
 *                             q_ij = math.sqrt(posx_diff + posy_diff) * ih_j
 *                             if q_ij >= 1:             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
                                        }

                                        /* "yt/utilities/lib/pixelization_routines.pyx":1512
 * 
 *                             # see equations 6, 9, and 11 of the SPLASH paper
 *                             local_buff[xi + yi*xsize] += prefactor_j * kernel(q_ij)             # <<<<<<<<<<<<<<
 * 
 *         with gil:
 */
                                        __pyx_t_21 = (__pyx_v_xi + (__pyx_v_yi * __pyx_v_xsize));
                                        (__pyx_v_local_buff[__pyx_t_21]) = ((__pyx_v_local_buff[__pyx_t_21]) + (__pyx_v_prefactor_j * __pyx_v_kernel(__pyx_v_q_ij)));
                                        __pyx_L41_continue:;
                                      }
                                      __pyx_L38_continue:;
                                    }
                                    __pyx_L32_continue:;
                                  }
                                  __pyx_L26_continue:;
                                }
                                goto __pyx_L46;
                                __pyx_L15_error:;
                                {
                                    #ifdef WITH_THREAD
                                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                    #endif
                                    #ifdef _OPENMP
                                    #pragma omp flush(__pyx_parallel_exc_type)
                                    #endif /* _OPENMP */
                                    if (!__pyx_parallel_exc_type) {
                                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                                    }
                                    #ifdef WITH_THREAD
                                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                    #endif
                                }
                                __pyx_parallel_why = 4;
                                goto __pyx_L45;
                                __pyx_L45:;
                                #ifdef _OPENMP
                                #pragma omp critical(__pyx_parallel_lastprivates3)
                                #endif /* _OPENMP */
                                {
                                    __pyx_parallel_temp0 = __pyx_v_h_j;
                                    __pyx_parallel_temp1 = __pyx_v_h_j2;
                                    __pyx_parallel_temp2 = __pyx_v_ih_j;
                                    __pyx_parallel_temp3 = __pyx_v_ii;
                                    __pyx_parallel_temp4 = __pyx_v_j;
                                    __pyx_parallel_temp5 = __pyx_v_jj;
                                    __pyx_parallel_temp6 = __pyx_v_posx_diff;
                                    __pyx_parallel_temp7 = __pyx_v_posy_diff;
                                    __pyx_parallel_temp8 = __pyx_v_prefactor_j;
                                    __pyx_parallel_temp9 = __pyx_v_px;
                                    __pyx_parallel_temp10 = __pyx_v_py;
                                    __pyx_parallel_temp11 = __pyx_v_q_ij;
                                    __pyx_parallel_temp12 = __pyx_v_x;
                                    __pyx_parallel_temp13 = __pyx_v_x0;
                                    __pyx_parallel_temp14 = __pyx_v_x1;
                                    __pyx_parallel_temp15 = __pyx_v_xi;
                                    __pyx_parallel_temp16 = __pyx_v_y;
                                    __pyx_parallel_temp17 = __pyx_v_y0;
                                    __pyx_parallel_temp18 = __pyx_v_y1;
                                    __pyx_parallel_temp19 = __pyx_v_yi;
                                }
                                __pyx_L46:;
                                #ifdef _OPENMP
                                #pragma omp flush(__pyx_parallel_why)
                                #endif /* _OPENMP */
                            }
                        }
                    }
                    if (__pyx_parallel_exc_type) {
                      /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
                      __pyx_parallel_why = 4;
                    }
                    if (__pyx_parallel_why) {
                      __pyx_v_h_j = __pyx_parallel_temp0;
                      __pyx_v_h_j2 = __pyx_parallel_temp1;
                      __pyx_v_ih_j = __pyx_parallel_temp2;
                      __pyx_v_ii = __pyx_parallel_temp3;
                      __pyx_v_j = __pyx_parallel_temp4;
                      __pyx_v_jj = __pyx_parallel_temp5;
                      __pyx_v_posx_diff = __pyx_parallel_temp6;
                      __pyx_v_posy_diff = __pyx_parallel_temp7;
                      __pyx_v_prefactor_j = __pyx_parallel_temp8;
                      __pyx_v_px = __pyx_parallel_temp9;
                      __pyx_v_py = __pyx_parallel_temp10;
                      __pyx_v_q_ij = __pyx_parallel_temp11;
                      __pyx_v_x = __pyx_parallel_temp12;
                      __pyx_v_x0 = __pyx_parallel_temp13;
                      __pyx_v_x1 = __pyx_parallel_temp14;
                      __pyx_v_xi = __pyx_parallel_temp15;
                      __pyx_v_y = __pyx_parallel_temp16;
                      __pyx_v_y0 = __pyx_parallel_temp17;
                      __pyx_v_y1 = __pyx_parallel_temp18;
                      __pyx_v_yi = __pyx_parallel_temp19;
                      switch (__pyx_parallel_why) {
                            case 4:
                        {
                            #ifdef WITH_THREAD
                            PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                            #endif
                            __Pyx_GIVEREF(__pyx_parallel_exc_type);
                            __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                            __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                            #ifdef WITH_THREAD
                            __Pyx_PyGILState_Release(__pyx_gilstate_save);
                            #endif
                        }
                        goto __pyx_L9_error;
                      }
                    }
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":1514
 *                             local_buff[xi + yi*xsize] += prefactor_j * kernel(q_ij)
 * 
 *         with gil:             # <<<<<<<<<<<<<<
 *             for xxi in range(xsize):
 *                 for yyi in range(ysize):
 */
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    /*try:*/ {

                      /* "yt/utilities/lib/pixelization_routines.pyx":1515
 * 
 *         with gil:
 *             for xxi in range(xsize):             # <<<<<<<<<<<<<<
 *                 for yyi in range(ysize):
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]
 */
                      __pyx_t_7 = __pyx_v_xsize;
                      __pyx_t_8 = __pyx_t_7;
                      for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_8; __pyx_t_15+=1) {
                        __pyx_v_xxi = __pyx_t_15;

                        /* "yt/utilities/lib/pixelization_routines.pyx":1516
 *         with gil:
 *             for xxi in range(xsize):
 *                 for yyi in range(ysize):             # <<<<<<<<<<<<<<
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]
 *         free(local_buff)
 */
                        __pyx_t_22 = __pyx_v_ysize;
                        __pyx_t_23 = __pyx_t_22;
                        for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_23; __pyx_t_16+=1) {
                          __pyx_v_yyi = __pyx_t_16;

                          /* "yt/utilities/lib/pixelization_routines.pyx":1517
 *             for xxi in range(xsize):
 *                 for yyi in range(ysize):
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]             # <<<<<<<<<<<<<<
 *         free(local_buff)
 *         free(xiterv)
 */
                          __pyx_t_17 = __pyx_v_xxi;
                          __pyx_t_18 = __pyx_v_yyi;
                          *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_17 * __pyx_v_buff.strides[0]) ) + __pyx_t_18 * __pyx_v_buff.strides[1]) )) += (__pyx_v_local_buff[(__pyx_v_xxi + (__pyx_v_yyi * __pyx_v_xsize))]);
                        }
                      }
                    }

                    /* "yt/utilities/lib/pixelization_routines.pyx":1514
 *                             local_buff[xi + yi*xsize] += prefactor_j * kernel(q_ij)
 * 
 *         with gil:             # <<<<<<<<<<<<<<
 *             for xxi in range(xsize):
 *                 for yyi in range(ysize):
 */
                    /*finally:*/ {
                      /*normal exit:*/{
                        #ifdef WITH_THREAD
                        __Pyx_PyGILState_Release(__pyx_gilstate_save);
                        #endif
                        goto __pyx_L51;
                      }
                      __pyx_L51:;
                    }
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":1518
 *                 for yyi in range(ysize):
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]
 *         free(local_buff)             # <<<<<<<<<<<<<<
 *         free(xiterv)
 *         free(yiterv)
 */
                free(__pyx_v_local_buff);

                /* "yt/utilities/lib/pixelization_routines.pyx":1519
 *                     buff[xxi, yyi] += local_buff[xxi + yyi*xsize]
 *         free(local_buff)
 *         free(xiterv)             # <<<<<<<<<<<<<<
 *         free(yiterv)
 *         free(xiter)
 */
                free(__pyx_v_xiterv);

                /* "yt/utilities/lib/pixelization_routines.pyx":1520
 *         free(local_buff)
 *         free(xiterv)
 *         free(yiterv)             # <<<<<<<<<<<<<<
 *         free(xiter)
 *         free(yiter)
 */
                free(__pyx_v_yiterv);

                /* "yt/utilities/lib/pixelization_routines.pyx":1521
 *         free(xiterv)
 *         free(yiterv)
 *         free(xiter)             # <<<<<<<<<<<<<<
 *         free(yiter)
 * 
 */
                free(__pyx_v_xiter);

                /* "yt/utilities/lib/pixelization_routines.pyx":1522
 *         free(yiterv)
 *         free(xiter)
 *         free(yiter)             # <<<<<<<<<<<<<<
 * 
 * @cython.initializedcheck(False)
 */
                free(__pyx_v_yiter);
                goto __pyx_L57;
                __pyx_L9_error:;
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    #ifdef _OPENMP
                    #pragma omp flush(__pyx_parallel_exc_type)
                    #endif /* _OPENMP */
                    if (!__pyx_parallel_exc_type) {
                      __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                      __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                      __Pyx_GOTREF(__pyx_parallel_exc_type);
                    }
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                __pyx_parallel_why = 4;
                goto __pyx_L57;
                __pyx_L57:;
                #ifdef _OPENMP
                Py_END_ALLOW_THREADS
                #else
{
#ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                #endif /* _OPENMP */
                /* Clean up any temporaries */
                #ifdef WITH_THREAD
                __Pyx_PyGILState_Release(__pyx_gilstate_save);
                #endif
                #ifndef _OPENMP
}
#endif /* _OPENMP */
            }
            if (__pyx_parallel_exc_type) {
              /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
              __pyx_parallel_why = 4;
            }
            if (__pyx_parallel_why) {
              switch (__pyx_parallel_why) {
                    case 4:
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    __Pyx_GIVEREF(__pyx_parallel_exc_type);
                    __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                    __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                goto __pyx_L5_error;
              }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":1429
 *     kernel = get_kernel_func(kernel_name)
 * 
 *     with nogil, parallel():             # <<<<<<<<<<<<<<
 *         # NOTE see note in pixelize_sph_kernel_projection
 *         local_buff = <np.float64_t *> malloc(sizeof(np.float64_t) * xsize * ysize)
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1388
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_slice(             # <<<<<<<<<<<<<<
 *         np.float64_t[:, :] buff,
 *         np.float64_t[:] posx, np.float64_t[:] posy,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_sph_kernel_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_buff, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_posx, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_posy, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_hsml, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pmass, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdens, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_quantity_to_smooth, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1528
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_arbitrary_grid(np.float64_t[:, :, :] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:] posx, np.float64_t[:] posy, np.float64_t[:] posz,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_21pixelize_sph_kernel_arbitrary_grid(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_21pixelize_sph_kernel_arbitrary_grid = {"pixelize_sph_kernel_arbitrary_grid", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_21pixelize_sph_kernel_arbitrary_grid, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_21pixelize_sph_kernel_arbitrary_grid(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_buff = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_posx = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_posy = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_posz = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_hsml = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pmass = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pdens = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_quantity_to_smooth = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_bounds = 0;
  PyObject *__pyx_v_pbar = 0;
  PyObject *__pyx_v_kernel_name = 0;
  int __pyx_v_check_period;
  PyObject *__pyx_v_period = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pixelize_sph_kernel_arbitrary_grid (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buff,&__pyx_n_s_posx,&__pyx_n_s_posy,&__pyx_n_s_posz,&__pyx_n_s_hsml,&__pyx_n_s_pmass,&__pyx_n_s_pdens,&__pyx_n_s_quantity_to_smooth,&__pyx_n_s_bounds,&__pyx_n_s_pbar,&__pyx_n_s_kernel_name,&__pyx_n_s_check_period,&__pyx_n_s_period,0};
    PyObject* values[13] = {0,0,0,0,0,0,0,0,0,0,0,0,0};

    /* "yt/utilities/lib/pixelization_routines.pyx":1533
 *         np.float64_t[:] pdens,
 *         np.float64_t[:] quantity_to_smooth,
 *         bounds, pbar=None, kernel_name="cubic",             # <<<<<<<<<<<<<<
 *         int check_period=1, period=None):
 * 
 */
    values[9] = ((PyObject *)Py_None);
    values[10] = ((PyObject *)__pyx_n_u_cubic);

    /* "yt/utilities/lib/pixelization_routines.pyx":1534
 *         np.float64_t[:] quantity_to_smooth,
 *         bounds, pbar=None, kernel_name="cubic",
 *         int check_period=1, period=None):             # <<<<<<<<<<<<<<
 * 
 *     cdef np.intp_t xsize, ysize, zsize
 */
    values[12] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buff)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_posx)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_arbitrary_grid", 0, 9, 13, 1); __PYX_ERR(0, 1528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_posy)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_arbitrary_grid", 0, 9, 13, 2); __PYX_ERR(0, 1528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_posz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_arbitrary_grid", 0, 9, 13, 3); __PYX_ERR(0, 1528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_hsml)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_arbitrary_grid", 0, 9, 13, 4); __PYX_ERR(0, 1528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pmass)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_arbitrary_grid", 0, 9, 13, 5); __PYX_ERR(0, 1528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pdens)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_arbitrary_grid", 0, 9, 13, 6); __PYX_ERR(0, 1528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quantity_to_smooth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_arbitrary_grid", 0, 9, 13, 7); __PYX_ERR(0, 1528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_arbitrary_grid", 0, 9, 13, 8); __PYX_ERR(0, 1528, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pbar);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_kernel_name);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_check_period);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_period);
          if (value) { values[12] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pixelize_sph_kernel_arbitrary_grid") < 0)) __PYX_ERR(0, 1528, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_buff = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_buff.memview)) __PYX_ERR(0, 1528, __pyx_L3_error)
    __pyx_v_posx = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_posx.memview)) __PYX_ERR(0, 1529, __pyx_L3_error)
    __pyx_v_posy = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_posy.memview)) __PYX_ERR(0, 1529, __pyx_L3_error)
    __pyx_v_posz = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_posz.memview)) __PYX_ERR(0, 1529, __pyx_L3_error)
    __pyx_v_hsml = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_hsml.memview)) __PYX_ERR(0, 1530, __pyx_L3_error)
    __pyx_v_pmass = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pmass.memview)) __PYX_ERR(0, 1530, __pyx_L3_error)
    __pyx_v_pdens = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[6], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pdens.memview)) __PYX_ERR(0, 1531, __pyx_L3_error)
    __pyx_v_quantity_to_smooth = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[7], PyBUF_WRITABLE); if (unlikely(!__pyx_v_quantity_to_smooth.memview)) __PYX_ERR(0, 1532, __pyx_L3_error)
    __pyx_v_bounds = values[8];
    __pyx_v_pbar = values[9];
    __pyx_v_kernel_name = values[10];
    if (values[11]) {
      __pyx_v_check_period = __Pyx_PyInt_As_int(values[11]); if (unlikely((__pyx_v_check_period == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1534, __pyx_L3_error)
    } else {
      __pyx_v_check_period = ((int)1);
    }
    __pyx_v_period = values[12];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pixelize_sph_kernel_arbitrary_grid", 0, 9, 13, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1528, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_sph_kernel_arbitrary_grid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_20pixelize_sph_kernel_arbitrary_grid(__pyx_self, __pyx_v_buff, __pyx_v_posx, __pyx_v_posy, __pyx_v_posz, __pyx_v_hsml, __pyx_v_pmass, __pyx_v_pdens, __pyx_v_quantity_to_smooth, __pyx_v_bounds, __pyx_v_pbar, __pyx_v_kernel_name, __pyx_v_check_period, __pyx_v_period);

  /* "yt/utilities/lib/pixelization_routines.pyx":1528
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_arbitrary_grid(np.float64_t[:, :, :] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:] posx, np.float64_t[:] posy, np.float64_t[:] posz,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_20pixelize_sph_kernel_arbitrary_grid(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_buff, __Pyx_memviewslice __pyx_v_posx, __Pyx_memviewslice __pyx_v_posy, __Pyx_memviewslice __pyx_v_posz, __Pyx_memviewslice __pyx_v_hsml, __Pyx_memviewslice __pyx_v_pmass, __Pyx_memviewslice __pyx_v_pdens, __Pyx_memviewslice __pyx_v_quantity_to_smooth, PyObject *__pyx_v_bounds, PyObject *__pyx_v_pbar, PyObject *__pyx_v_kernel_name, int __pyx_v_check_period, PyObject *__pyx_v_period) {
  __pyx_t_5numpy_intp_t __pyx_v_xsize;
  __pyx_t_5numpy_intp_t __pyx_v_ysize;
  __pyx_t_5numpy_intp_t __pyx_v_zsize;
  __pyx_t_5numpy_float64_t __pyx_v_x_min;
  __pyx_t_5numpy_float64_t __pyx_v_x_max;
  __pyx_t_5numpy_float64_t __pyx_v_y_min;
  __pyx_t_5numpy_float64_t __pyx_v_y_max;
  __pyx_t_5numpy_float64_t __pyx_v_z_min;
  __pyx_t_5numpy_float64_t __pyx_v_z_max;
  __pyx_t_5numpy_float64_t __pyx_v_prefactor_j;
  __pyx_t_5numpy_int64_t __pyx_v_xi;
  __pyx_t_5numpy_int64_t __pyx_v_yi;
  __pyx_t_5numpy_int64_t __pyx_v_zi;
  __pyx_t_5numpy_int64_t __pyx_v_x0;
  __pyx_t_5numpy_int64_t __pyx_v_x1;
  __pyx_t_5numpy_int64_t __pyx_v_y0;
  __pyx_t_5numpy_int64_t __pyx_v_y1;
  __pyx_t_5numpy_int64_t __pyx_v_z0;
  __pyx_t_5numpy_int64_t __pyx_v_z1;
  __pyx_t_5numpy_float64_t __pyx_v_q_ij;
  __pyx_t_5numpy_float64_t __pyx_v_posx_diff;
  __pyx_t_5numpy_float64_t __pyx_v_posy_diff;
  __pyx_t_5numpy_float64_t __pyx_v_posz_diff;
  __pyx_t_5numpy_float64_t __pyx_v_px;
  __pyx_t_5numpy_float64_t __pyx_v_py;
  __pyx_t_5numpy_float64_t __pyx_v_pz;
  __pyx_t_5numpy_float64_t __pyx_v_x;
  __pyx_t_5numpy_float64_t __pyx_v_y;
  __pyx_t_5numpy_float64_t __pyx_v_z;
  __pyx_t_5numpy_float64_t __pyx_v_dx;
  __pyx_t_5numpy_float64_t __pyx_v_dy;
  __pyx_t_5numpy_float64_t __pyx_v_dz;
  __pyx_t_5numpy_float64_t __pyx_v_idx;
  __pyx_t_5numpy_float64_t __pyx_v_idy;
  __pyx_t_5numpy_float64_t __pyx_v_idz;
  __pyx_t_5numpy_float64_t __pyx_v_h_j3;
  __pyx_t_5numpy_float64_t __pyx_v_h_j2;
  __pyx_t_5numpy_float64_t __pyx_v_h_j;
  __pyx_t_5numpy_float64_t __pyx_v_ih_j;
  int __pyx_v_j;
  int __pyx_v_ii;
  int __pyx_v_jj;
  int __pyx_v_kk;
  __pyx_t_5numpy_float64_t __pyx_v_period_x;
  __pyx_t_5numpy_float64_t __pyx_v_period_y;
  __pyx_t_5numpy_float64_t __pyx_v_period_z;
  int __pyx_v_xiter[2];
  int __pyx_v_yiter[2];
  int __pyx_v_ziter[2];
  __pyx_t_5numpy_float64_t __pyx_v_xiterv[2];
  __pyx_t_5numpy_float64_t __pyx_v_yiterv[2];
  __pyx_t_5numpy_float64_t __pyx_v_ziterv[2];
  __pyx_t_2yt_8geometry_16particle_deposit_kernel_func __pyx_v_kernel;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __pyx_t_5numpy_float64_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  __pyx_t_5numpy_int64_t __pyx_t_18;
  __pyx_t_5numpy_int64_t __pyx_t_19;
  __pyx_t_5numpy_int64_t __pyx_t_20;
  __pyx_t_5numpy_int64_t __pyx_t_21;
  __pyx_t_5numpy_int64_t __pyx_t_22;
  __pyx_t_5numpy_int64_t __pyx_t_23;
  __pyx_t_5numpy_int64_t __pyx_t_24;
  __pyx_t_5numpy_int64_t __pyx_t_25;
  __pyx_t_5numpy_int64_t __pyx_t_26;
  __pyx_t_5numpy_int64_t __pyx_t_27;
  __pyx_t_5numpy_int64_t __pyx_t_28;
  __pyx_t_5numpy_int64_t __pyx_t_29;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pixelize_sph_kernel_arbitrary_grid", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1542
 *     cdef np.float64_t x, y, z, dx, dy, dz, idx, idy, idz, h_j3, h_j2, h_j, ih_j
 *     cdef int j, ii, jj, kk
 *     cdef np.float64_t period_x = 0, period_y = 0, period_z = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef int xiter[2]
 */
  __pyx_v_period_x = 0.0;
  __pyx_v_period_y = 0.0;
  __pyx_v_period_z = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1551
 *     cdef np.float64_t ziterv[2]
 * 
 *     xiter[0] = yiter[0] = ziter[0] = 0             # <<<<<<<<<<<<<<
 *     xiterv[0] = yiterv[0] = ziterv[0] = 0.0
 * 
 */
  (__pyx_v_xiter[0]) = 0;
  (__pyx_v_yiter[0]) = 0;
  (__pyx_v_ziter[0]) = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1552
 * 
 *     xiter[0] = yiter[0] = ziter[0] = 0
 *     xiterv[0] = yiterv[0] = ziterv[0] = 0.0             # <<<<<<<<<<<<<<
 * 
 *     if period is not None:
 */
  (__pyx_v_xiterv[0]) = 0.0;
  (__pyx_v_yiterv[0]) = 0.0;
  (__pyx_v_ziterv[0]) = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1554
 *     xiterv[0] = yiterv[0] = ziterv[0] = 0.0
 * 
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  __pyx_t_1 = (__pyx_v_period != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1555
 * 
 *     if period is not None:
 *         period_x = period[0]             # <<<<<<<<<<<<<<
 *         period_y = period[1]
 *         period_z = period[2]
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_period, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1555, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_period_x = __pyx_t_4;

    /* "yt/utilities/lib/pixelization_routines.pyx":1556
 *     if period is not None:
 *         period_x = period[0]
 *         period_y = period[1]             # <<<<<<<<<<<<<<
 *         period_z = period[2]
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_period, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1556, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_period_y = __pyx_t_4;

    /* "yt/utilities/lib/pixelization_routines.pyx":1557
 *         period_x = period[0]
 *         period_y = period[1]
 *         period_z = period[2]             # <<<<<<<<<<<<<<
 * 
 *     xsize, ysize, zsize = buff.shape[0], buff.shape[1], buff.shape[2]
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_period, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1557, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_period_z = __pyx_t_4;

    /* "yt/utilities/lib/pixelization_routines.pyx":1554
 *     xiterv[0] = yiterv[0] = ziterv[0] = 0.0
 * 
 *     if period is not None:             # <<<<<<<<<<<<<<
 *         period_x = period[0]
 *         period_y = period[1]
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1559
 *         period_z = period[2]
 * 
 *     xsize, ysize, zsize = buff.shape[0], buff.shape[1], buff.shape[2]             # <<<<<<<<<<<<<<
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 */
  __pyx_t_5 = (__pyx_v_buff.shape[0]);
  __pyx_t_6 = (__pyx_v_buff.shape[1]);
  __pyx_t_7 = (__pyx_v_buff.shape[2]);
  __pyx_v_xsize = __pyx_t_5;
  __pyx_v_ysize = __pyx_t_6;
  __pyx_v_zsize = __pyx_t_7;

  /* "yt/utilities/lib/pixelization_routines.pyx":1560
 * 
 *     xsize, ysize, zsize = buff.shape[0], buff.shape[1], buff.shape[2]
 *     x_min = bounds[0]             # <<<<<<<<<<<<<<
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x_min = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":1561
 *     xsize, ysize, zsize = buff.shape[0], buff.shape[1], buff.shape[2]
 *     x_min = bounds[0]
 *     x_max = bounds[1]             # <<<<<<<<<<<<<<
 *     y_min = bounds[2]
 *     y_max = bounds[3]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_x_max = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":1562
 *     x_min = bounds[0]
 *     x_max = bounds[1]
 *     y_min = bounds[2]             # <<<<<<<<<<<<<<
 *     y_max = bounds[3]
 *     z_min = bounds[4]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_y_min = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":1563
 *     x_max = bounds[1]
 *     y_min = bounds[2]
 *     y_max = bounds[3]             # <<<<<<<<<<<<<<
 *     z_min = bounds[4]
 *     z_max = bounds[5]
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_y_max = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":1564
 *     y_min = bounds[2]
 *     y_max = bounds[3]
 *     z_min = bounds[4]             # <<<<<<<<<<<<<<
 *     z_max = bounds[5]
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_z_min = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":1565
 *     y_max = bounds[3]
 *     z_min = bounds[4]
 *     z_max = bounds[5]             # <<<<<<<<<<<<<<
 * 
 *     dx = (x_max - x_min) / xsize
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_bounds, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_z_max = __pyx_t_4;

  /* "yt/utilities/lib/pixelization_routines.pyx":1567
 *     z_max = bounds[5]
 * 
 *     dx = (x_max - x_min) / xsize             # <<<<<<<<<<<<<<
 *     dy = (y_max - y_min) / ysize
 *     dz = (z_max - z_min) / zsize
 */
  __pyx_v_dx = ((__pyx_v_x_max - __pyx_v_x_min) / ((__pyx_t_5numpy_float64_t)__pyx_v_xsize));

  /* "yt/utilities/lib/pixelization_routines.pyx":1568
 * 
 *     dx = (x_max - x_min) / xsize
 *     dy = (y_max - y_min) / ysize             # <<<<<<<<<<<<<<
 *     dz = (z_max - z_min) / zsize
 *     idx = 1.0/dx
 */
  __pyx_v_dy = ((__pyx_v_y_max - __pyx_v_y_min) / ((__pyx_t_5numpy_float64_t)__pyx_v_ysize));

  /* "yt/utilities/lib/pixelization_routines.pyx":1569
 *     dx = (x_max - x_min) / xsize
 *     dy = (y_max - y_min) / ysize
 *     dz = (z_max - z_min) / zsize             # <<<<<<<<<<<<<<
 *     idx = 1.0/dx
 *     idy = 1.0/dy
 */
  __pyx_v_dz = ((__pyx_v_z_max - __pyx_v_z_min) / ((__pyx_t_5numpy_float64_t)__pyx_v_zsize));

  /* "yt/utilities/lib/pixelization_routines.pyx":1570
 *     dy = (y_max - y_min) / ysize
 *     dz = (z_max - z_min) / zsize
 *     idx = 1.0/dx             # <<<<<<<<<<<<<<
 *     idy = 1.0/dy
 *     idz = 1.0/dz
 */
  __pyx_v_idx = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_dx);

  /* "yt/utilities/lib/pixelization_routines.pyx":1571
 *     dz = (z_max - z_min) / zsize
 *     idx = 1.0/dx
 *     idy = 1.0/dy             # <<<<<<<<<<<<<<
 *     idz = 1.0/dz
 * 
 */
  __pyx_v_idy = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_dy);

  /* "yt/utilities/lib/pixelization_routines.pyx":1572
 *     idx = 1.0/dx
 *     idy = 1.0/dy
 *     idz = 1.0/dz             # <<<<<<<<<<<<<<
 * 
 *     kernel = get_kernel_func(kernel_name)
 */
  __pyx_v_idz = (((__pyx_t_5numpy_float64_t)1.0) / __pyx_v_dz);

  /* "yt/utilities/lib/pixelization_routines.pyx":1574
 *     idz = 1.0/dz
 * 
 *     kernel = get_kernel_func(kernel_name)             # <<<<<<<<<<<<<<
 * 
 *     with nogil:
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_kernel_name))||((__pyx_v_kernel_name) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v_kernel_name)->tp_name), 0))) __PYX_ERR(0, 1574, __pyx_L1_error)
  __pyx_v_kernel = __pyx_f_2yt_8geometry_16particle_deposit_get_kernel_func(((PyObject*)__pyx_v_kernel_name));

  /* "yt/utilities/lib/pixelization_routines.pyx":1576
 *     kernel = get_kernel_func(kernel_name)
 * 
 *     with nogil:             # <<<<<<<<<<<<<<
 *         # TODO make this parallel without using too much memory
 *         for j in range(0, posx.shape[0]):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "yt/utilities/lib/pixelization_routines.pyx":1578
 *     with nogil:
 *         # TODO make this parallel without using too much memory
 *         for j in range(0, posx.shape[0]):             # <<<<<<<<<<<<<<
 *             if j % 50000 == 0:
 *                 with gil:
 */
        __pyx_t_7 = (__pyx_v_posx.shape[0]);
        __pyx_t_6 = __pyx_t_7;
        for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_6; __pyx_t_8+=1) {
          __pyx_v_j = __pyx_t_8;

          /* "yt/utilities/lib/pixelization_routines.pyx":1579
 *         # TODO make this parallel without using too much memory
 *         for j in range(0, posx.shape[0]):
 *             if j % 50000 == 0:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     if(pbar is not None):
 */
          __pyx_t_2 = (((__pyx_v_j % 0xC350) == 0) != 0);
          if (__pyx_t_2) {

            /* "yt/utilities/lib/pixelization_routines.pyx":1580
 *         for j in range(0, posx.shape[0]):
 *             if j % 50000 == 0:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     if(pbar is not None):
 *                         pbar.update(50000)
 */
            {
                #ifdef WITH_THREAD
                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                #endif
                /*try:*/ {

                  /* "yt/utilities/lib/pixelization_routines.pyx":1581
 *             if j % 50000 == 0:
 *                 with gil:
 *                     if(pbar is not None):             # <<<<<<<<<<<<<<
 *                         pbar.update(50000)
 *                     PyErr_CheckSignals()
 */
                  __pyx_t_2 = (__pyx_v_pbar != Py_None);
                  __pyx_t_1 = (__pyx_t_2 != 0);
                  if (__pyx_t_1) {

                    /* "yt/utilities/lib/pixelization_routines.pyx":1582
 *                 with gil:
 *                     if(pbar is not None):
 *                         pbar.update(50000)             # <<<<<<<<<<<<<<
 *                     PyErr_CheckSignals()
 * 
 */
                    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_pbar, __pyx_n_s_update); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1582, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_9);
                    __pyx_t_10 = NULL;
                    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
                      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
                      if (likely(__pyx_t_10)) {
                        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
                        __Pyx_INCREF(__pyx_t_10);
                        __Pyx_INCREF(function);
                        __Pyx_DECREF_SET(__pyx_t_9, function);
                      }
                    }
                    __pyx_t_3 = (__pyx_t_10) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_10, __pyx_int_50000) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_int_50000);
                    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
                    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1582, __pyx_L13_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                    /* "yt/utilities/lib/pixelization_routines.pyx":1581
 *             if j % 50000 == 0:
 *                 with gil:
 *                     if(pbar is not None):             # <<<<<<<<<<<<<<
 *                         pbar.update(50000)
 *                     PyErr_CheckSignals()
 */
                  }

                  /* "yt/utilities/lib/pixelization_routines.pyx":1583
 *                     if(pbar is not None):
 *                         pbar.update(50000)
 *                     PyErr_CheckSignals()             # <<<<<<<<<<<<<<
 * 
 *             xiter[1] = yiter[1] = ziter[1] = 999
 */
                  __pyx_t_11 = PyErr_CheckSignals(); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 1583, __pyx_L13_error)
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":1580
 *         for j in range(0, posx.shape[0]):
 *             if j % 50000 == 0:
 *                 with gil:             # <<<<<<<<<<<<<<
 *                     if(pbar is not None):
 *                         pbar.update(50000)
 */
                /*finally:*/ {
                  /*normal exit:*/{
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    goto __pyx_L14;
                  }
                  __pyx_L13_error: {
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    goto __pyx_L5_error;
                  }
                  __pyx_L14:;
                }
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":1579
 *         # TODO make this parallel without using too much memory
 *         for j in range(0, posx.shape[0]):
 *             if j % 50000 == 0:             # <<<<<<<<<<<<<<
 *                 with gil:
 *                     if(pbar is not None):
 */
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":1585
 *                     PyErr_CheckSignals()
 * 
 *             xiter[1] = yiter[1] = ziter[1] = 999             # <<<<<<<<<<<<<<
 *             xiterv[1] = yiterv[1] = ziterv[1] = 0.0
 * 
 */
          (__pyx_v_xiter[1]) = 0x3E7;
          (__pyx_v_yiter[1]) = 0x3E7;
          (__pyx_v_ziter[1]) = 0x3E7;

          /* "yt/utilities/lib/pixelization_routines.pyx":1586
 * 
 *             xiter[1] = yiter[1] = ziter[1] = 999
 *             xiterv[1] = yiterv[1] = ziterv[1] = 0.0             # <<<<<<<<<<<<<<
 * 
 *             if check_period == 1:
 */
          (__pyx_v_xiterv[1]) = 0.0;
          (__pyx_v_yiterv[1]) = 0.0;
          (__pyx_v_ziterv[1]) = 0.0;

          /* "yt/utilities/lib/pixelization_routines.pyx":1588
 *             xiterv[1] = yiterv[1] = ziterv[1] = 0.0
 * 
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1
 */
          __pyx_t_1 = ((__pyx_v_check_period == 1) != 0);
          if (__pyx_t_1) {

            /* "yt/utilities/lib/pixelization_routines.pyx":1589
 * 
 *             if check_period == 1:
 *                 if posx[j] - hsml[j] < x_min:             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
            __pyx_t_12 = __pyx_v_j;
            __pyx_t_13 = __pyx_v_j;
            __pyx_t_1 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posx.data + __pyx_t_12 * __pyx_v_posx.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_x_min) != 0);
            if (__pyx_t_1) {

              /* "yt/utilities/lib/pixelization_routines.pyx":1590
 *             if check_period == 1:
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:
 */
              (__pyx_v_xiter[1]) = 1;

              /* "yt/utilities/lib/pixelization_routines.pyx":1591
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x             # <<<<<<<<<<<<<<
 *                 elif posx[j] + hsml[j] > x_max:
 *                     xiter[1] = -1
 */
              (__pyx_v_xiterv[1]) = __pyx_v_period_x;

              /* "yt/utilities/lib/pixelization_routines.pyx":1589
 * 
 *             if check_period == 1:
 *                 if posx[j] - hsml[j] < x_min:             # <<<<<<<<<<<<<<
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 */
              goto __pyx_L17;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":1592
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
            __pyx_t_13 = __pyx_v_j;
            __pyx_t_12 = __pyx_v_j;
            __pyx_t_1 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posx.data + __pyx_t_13 * __pyx_v_posx.strides[0]) ))) + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_12 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_x_max) != 0);
            if (__pyx_t_1) {

              /* "yt/utilities/lib/pixelization_routines.pyx":1593
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:
 *                     xiter[1] = -1             # <<<<<<<<<<<<<<
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:
 */
              (__pyx_v_xiter[1]) = -1;

              /* "yt/utilities/lib/pixelization_routines.pyx":1594
 *                 elif posx[j] + hsml[j] > x_max:
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x             # <<<<<<<<<<<<<<
 *                 if posy[j] - hsml[j] < y_min:
 *                     yiter[1] = +1
 */
              (__pyx_v_xiterv[1]) = (-__pyx_v_period_x);

              /* "yt/utilities/lib/pixelization_routines.pyx":1592
 *                     xiter[1] = +1
 *                     xiterv[1] = period_x
 *                 elif posx[j] + hsml[j] > x_max:             # <<<<<<<<<<<<<<
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 */
            }
            __pyx_L17:;

            /* "yt/utilities/lib/pixelization_routines.pyx":1595
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
            __pyx_t_12 = __pyx_v_j;
            __pyx_t_13 = __pyx_v_j;
            __pyx_t_1 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posy.data + __pyx_t_12 * __pyx_v_posy.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_y_min) != 0);
            if (__pyx_t_1) {

              /* "yt/utilities/lib/pixelization_routines.pyx":1596
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:
 *                     yiter[1] = +1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:
 */
              (__pyx_v_yiter[1]) = 1;

              /* "yt/utilities/lib/pixelization_routines.pyx":1597
 *                 if posy[j] - hsml[j] < y_min:
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y             # <<<<<<<<<<<<<<
 *                 elif posy[j] + hsml[j] > y_max:
 *                     yiter[1] = -1
 */
              (__pyx_v_yiterv[1]) = __pyx_v_period_y;

              /* "yt/utilities/lib/pixelization_routines.pyx":1595
 *                     xiter[1] = -1
 *                     xiterv[1] = -period_x
 *                 if posy[j] - hsml[j] < y_min:             # <<<<<<<<<<<<<<
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 */
              goto __pyx_L18;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":1598
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
            __pyx_t_13 = __pyx_v_j;
            __pyx_t_12 = __pyx_v_j;
            __pyx_t_1 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posy.data + __pyx_t_13 * __pyx_v_posy.strides[0]) ))) + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_12 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_y_max) != 0);
            if (__pyx_t_1) {

              /* "yt/utilities/lib/pixelization_routines.pyx":1599
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:
 *                     yiter[1] = -1             # <<<<<<<<<<<<<<
 *                     yiterv[1] = -period_y
 *                 if posz[j] - hsml[j] < z_min:
 */
              (__pyx_v_yiter[1]) = -1;

              /* "yt/utilities/lib/pixelization_routines.pyx":1600
 *                 elif posy[j] + hsml[j] > y_max:
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y             # <<<<<<<<<<<<<<
 *                 if posz[j] - hsml[j] < z_min:
 *                     ziter[1] = +1
 */
              (__pyx_v_yiterv[1]) = (-__pyx_v_period_y);

              /* "yt/utilities/lib/pixelization_routines.pyx":1598
 *                     yiter[1] = +1
 *                     yiterv[1] = period_y
 *                 elif posy[j] + hsml[j] > y_max:             # <<<<<<<<<<<<<<
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 */
            }
            __pyx_L18:;

            /* "yt/utilities/lib/pixelization_routines.pyx":1601
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 *                 if posz[j] - hsml[j] < z_min:             # <<<<<<<<<<<<<<
 *                     ziter[1] = +1
 *                     ziterv[1] = period_z
 */
            __pyx_t_12 = __pyx_v_j;
            __pyx_t_13 = __pyx_v_j;
            __pyx_t_1 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posz.data + __pyx_t_12 * __pyx_v_posz.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_z_min) != 0);
            if (__pyx_t_1) {

              /* "yt/utilities/lib/pixelization_routines.pyx":1602
 *                     yiterv[1] = -period_y
 *                 if posz[j] - hsml[j] < z_min:
 *                     ziter[1] = +1             # <<<<<<<<<<<<<<
 *                     ziterv[1] = period_z
 *                 elif posz[j] + hsml[j] > z_max:
 */
              (__pyx_v_ziter[1]) = 1;

              /* "yt/utilities/lib/pixelization_routines.pyx":1603
 *                 if posz[j] - hsml[j] < z_min:
 *                     ziter[1] = +1
 *                     ziterv[1] = period_z             # <<<<<<<<<<<<<<
 *                 elif posz[j] + hsml[j] > z_max:
 *                     ziter[1] = -1
 */
              (__pyx_v_ziterv[1]) = __pyx_v_period_z;

              /* "yt/utilities/lib/pixelization_routines.pyx":1601
 *                     yiter[1] = -1
 *                     yiterv[1] = -period_y
 *                 if posz[j] - hsml[j] < z_min:             # <<<<<<<<<<<<<<
 *                     ziter[1] = +1
 *                     ziterv[1] = period_z
 */
              goto __pyx_L19;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":1604
 *                     ziter[1] = +1
 *                     ziterv[1] = period_z
 *                 elif posz[j] + hsml[j] > z_max:             # <<<<<<<<<<<<<<
 *                     ziter[1] = -1
 *                     ziterv[1] = -period_z
 */
            __pyx_t_13 = __pyx_v_j;
            __pyx_t_12 = __pyx_v_j;
            __pyx_t_1 = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posz.data + __pyx_t_13 * __pyx_v_posz.strides[0]) ))) + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_12 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_z_max) != 0);
            if (__pyx_t_1) {

              /* "yt/utilities/lib/pixelization_routines.pyx":1605
 *                     ziterv[1] = period_z
 *                 elif posz[j] + hsml[j] > z_max:
 *                     ziter[1] = -1             # <<<<<<<<<<<<<<
 *                     ziterv[1] = -period_z
 * 
 */
              (__pyx_v_ziter[1]) = -1;

              /* "yt/utilities/lib/pixelization_routines.pyx":1606
 *                 elif posz[j] + hsml[j] > z_max:
 *                     ziter[1] = -1
 *                     ziterv[1] = -period_z             # <<<<<<<<<<<<<<
 * 
 *             h_j3 = fmax(hsml[j]*hsml[j]*hsml[j], dx*dy*dz)
 */
              (__pyx_v_ziterv[1]) = (-__pyx_v_period_z);

              /* "yt/utilities/lib/pixelization_routines.pyx":1604
 *                     ziter[1] = +1
 *                     ziterv[1] = period_z
 *                 elif posz[j] + hsml[j] > z_max:             # <<<<<<<<<<<<<<
 *                     ziter[1] = -1
 *                     ziterv[1] = -period_z
 */
            }
            __pyx_L19:;

            /* "yt/utilities/lib/pixelization_routines.pyx":1588
 *             xiterv[1] = yiterv[1] = ziterv[1] = 0.0
 * 
 *             if check_period == 1:             # <<<<<<<<<<<<<<
 *                 if posx[j] - hsml[j] < x_min:
 *                     xiter[1] = +1
 */
          }

          /* "yt/utilities/lib/pixelization_routines.pyx":1608
 *                     ziterv[1] = -period_z
 * 
 *             h_j3 = fmax(hsml[j]*hsml[j]*hsml[j], dx*dy*dz)             # <<<<<<<<<<<<<<
 *             h_j = math.cbrt(h_j3)
 *             h_j2 = h_j*h_j
 */
          __pyx_t_12 = __pyx_v_j;
          __pyx_t_13 = __pyx_v_j;
          __pyx_t_14 = __pyx_v_j;
          __pyx_v_h_j3 = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_12 * __pyx_v_hsml.strides[0]) ))) * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_13 * __pyx_v_hsml.strides[0]) )))) * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_14 * __pyx_v_hsml.strides[0]) )))), ((__pyx_v_dx * __pyx_v_dy) * __pyx_v_dz));

          /* "yt/utilities/lib/pixelization_routines.pyx":1609
 * 
 *             h_j3 = fmax(hsml[j]*hsml[j]*hsml[j], dx*dy*dz)
 *             h_j = math.cbrt(h_j3)             # <<<<<<<<<<<<<<
 *             h_j2 = h_j*h_j
 *             ih_j = 1/h_j
 */
          __pyx_v_h_j = cbrt(__pyx_v_h_j3);

          /* "yt/utilities/lib/pixelization_routines.pyx":1610
 *             h_j3 = fmax(hsml[j]*hsml[j]*hsml[j], dx*dy*dz)
 *             h_j = math.cbrt(h_j3)
 *             h_j2 = h_j*h_j             # <<<<<<<<<<<<<<
 *             ih_j = 1/h_j
 * 
 */
          __pyx_v_h_j2 = (__pyx_v_h_j * __pyx_v_h_j);

          /* "yt/utilities/lib/pixelization_routines.pyx":1611
 *             h_j = math.cbrt(h_j3)
 *             h_j2 = h_j*h_j
 *             ih_j = 1/h_j             # <<<<<<<<<<<<<<
 * 
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**3 * quantity_to_smooth[j]
 */
          __pyx_v_ih_j = (1.0 / __pyx_v_h_j);

          /* "yt/utilities/lib/pixelization_routines.pyx":1613
 *             ih_j = 1/h_j
 * 
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**3 * quantity_to_smooth[j]             # <<<<<<<<<<<<<<
 * 
 *             for ii in range(2):
 */
          __pyx_t_14 = __pyx_v_j;
          __pyx_t_13 = __pyx_v_j;
          __pyx_t_12 = __pyx_v_j;
          __pyx_t_15 = __pyx_v_j;
          __pyx_v_prefactor_j = ((((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pmass.data + __pyx_t_14 * __pyx_v_pmass.strides[0]) ))) / (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pdens.data + __pyx_t_13 * __pyx_v_pdens.strides[0]) )))) / pow((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_12 * __pyx_v_hsml.strides[0]) ))), 3.0)) * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_quantity_to_smooth.data + __pyx_t_15 * __pyx_v_quantity_to_smooth.strides[0]) ))));

          /* "yt/utilities/lib/pixelization_routines.pyx":1615
 *             prefactor_j = pmass[j] / pdens[j] / hsml[j]**3 * quantity_to_smooth[j]
 * 
 *             for ii in range(2):             # <<<<<<<<<<<<<<
 *                 if xiter[ii] == 999: continue
 *                 px = posx[j] + xiterv[ii]
 */
          for (__pyx_t_11 = 0; __pyx_t_11 < 2; __pyx_t_11+=1) {
            __pyx_v_ii = __pyx_t_11;

            /* "yt/utilities/lib/pixelization_routines.pyx":1616
 * 
 *             for ii in range(2):
 *                 if xiter[ii] == 999: continue             # <<<<<<<<<<<<<<
 *                 px = posx[j] + xiterv[ii]
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 */
            __pyx_t_1 = (((__pyx_v_xiter[__pyx_v_ii]) == 0x3E7) != 0);
            if (__pyx_t_1) {
              goto __pyx_L20_continue;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":1617
 *             for ii in range(2):
 *                 if xiter[ii] == 999: continue
 *                 px = posx[j] + xiterv[ii]             # <<<<<<<<<<<<<<
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 *                 for jj in range(2):
 */
            __pyx_t_15 = __pyx_v_j;
            __pyx_v_px = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posx.data + __pyx_t_15 * __pyx_v_posx.strides[0]) ))) + (__pyx_v_xiterv[__pyx_v_ii]));

            /* "yt/utilities/lib/pixelization_routines.pyx":1618
 *                 if xiter[ii] == 999: continue
 *                 px = posx[j] + xiterv[ii]
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue             # <<<<<<<<<<<<<<
 *                 for jj in range(2):
 *                     if yiter[jj] == 999: continue
 */
            __pyx_t_15 = __pyx_v_j;
            __pyx_t_2 = (((__pyx_v_px + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_x_min) != 0);
            if (!__pyx_t_2) {
            } else {
              __pyx_t_1 = __pyx_t_2;
              goto __pyx_L24_bool_binop_done;
            }
            __pyx_t_15 = __pyx_v_j;
            __pyx_t_2 = (((__pyx_v_px - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_x_max) != 0);
            __pyx_t_1 = __pyx_t_2;
            __pyx_L24_bool_binop_done:;
            if (__pyx_t_1) {
              goto __pyx_L20_continue;
            }

            /* "yt/utilities/lib/pixelization_routines.pyx":1619
 *                 px = posx[j] + xiterv[ii]
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 *                 for jj in range(2):             # <<<<<<<<<<<<<<
 *                     if yiter[jj] == 999: continue
 *                     py = posy[j] + yiterv[jj]
 */
            for (__pyx_t_16 = 0; __pyx_t_16 < 2; __pyx_t_16+=1) {
              __pyx_v_jj = __pyx_t_16;

              /* "yt/utilities/lib/pixelization_routines.pyx":1620
 *                 if (px + hsml[j] < x_min) or (px - hsml[j] > x_max): continue
 *                 for jj in range(2):
 *                     if yiter[jj] == 999: continue             # <<<<<<<<<<<<<<
 *                     py = posy[j] + yiterv[jj]
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue
 */
              __pyx_t_1 = (((__pyx_v_yiter[__pyx_v_jj]) == 0x3E7) != 0);
              if (__pyx_t_1) {
                goto __pyx_L26_continue;
              }

              /* "yt/utilities/lib/pixelization_routines.pyx":1621
 *                 for jj in range(2):
 *                     if yiter[jj] == 999: continue
 *                     py = posy[j] + yiterv[jj]             # <<<<<<<<<<<<<<
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue
 *                     for kk in range(2):
 */
              __pyx_t_15 = __pyx_v_j;
              __pyx_v_py = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posy.data + __pyx_t_15 * __pyx_v_posy.strides[0]) ))) + (__pyx_v_yiterv[__pyx_v_jj]));

              /* "yt/utilities/lib/pixelization_routines.pyx":1622
 *                     if yiter[jj] == 999: continue
 *                     py = posy[j] + yiterv[jj]
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue             # <<<<<<<<<<<<<<
 *                     for kk in range(2):
 *                         if ziter[kk] == 999: continue
 */
              __pyx_t_15 = __pyx_v_j;
              __pyx_t_2 = (((__pyx_v_py + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_y_min) != 0);
              if (!__pyx_t_2) {
              } else {
                __pyx_t_1 = __pyx_t_2;
                goto __pyx_L30_bool_binop_done;
              }
              __pyx_t_15 = __pyx_v_j;
              __pyx_t_2 = (((__pyx_v_py - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_y_max) != 0);
              __pyx_t_1 = __pyx_t_2;
              __pyx_L30_bool_binop_done:;
              if (__pyx_t_1) {
                goto __pyx_L26_continue;
              }

              /* "yt/utilities/lib/pixelization_routines.pyx":1623
 *                     py = posy[j] + yiterv[jj]
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue
 *                     for kk in range(2):             # <<<<<<<<<<<<<<
 *                         if ziter[kk] == 999: continue
 *                         pz = posz[j] + ziterv[kk]
 */
              for (__pyx_t_17 = 0; __pyx_t_17 < 2; __pyx_t_17+=1) {
                __pyx_v_kk = __pyx_t_17;

                /* "yt/utilities/lib/pixelization_routines.pyx":1624
 *                     if (py + hsml[j] < y_min) or (py - hsml[j] > y_max): continue
 *                     for kk in range(2):
 *                         if ziter[kk] == 999: continue             # <<<<<<<<<<<<<<
 *                         pz = posz[j] + ziterv[kk]
 *                         if (pz + hsml[j] < z_min) or (pz - hsml[j] > z_max): continue
 */
                __pyx_t_1 = (((__pyx_v_ziter[__pyx_v_kk]) == 0x3E7) != 0);
                if (__pyx_t_1) {
                  goto __pyx_L32_continue;
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":1625
 *                     for kk in range(2):
 *                         if ziter[kk] == 999: continue
 *                         pz = posz[j] + ziterv[kk]             # <<<<<<<<<<<<<<
 *                         if (pz + hsml[j] < z_min) or (pz - hsml[j] > z_max): continue
 * 
 */
                __pyx_t_15 = __pyx_v_j;
                __pyx_v_pz = ((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_posz.data + __pyx_t_15 * __pyx_v_posz.strides[0]) ))) + (__pyx_v_ziterv[__pyx_v_kk]));

                /* "yt/utilities/lib/pixelization_routines.pyx":1626
 *                         if ziter[kk] == 999: continue
 *                         pz = posz[j] + ziterv[kk]
 *                         if (pz + hsml[j] < z_min) or (pz - hsml[j] > z_max): continue             # <<<<<<<<<<<<<<
 * 
 *                         x0 = <np.int64_t> ( (px - hsml[j] - x_min) * idx)
 */
                __pyx_t_15 = __pyx_v_j;
                __pyx_t_2 = (((__pyx_v_pz + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) )))) < __pyx_v_z_min) != 0);
                if (!__pyx_t_2) {
                } else {
                  __pyx_t_1 = __pyx_t_2;
                  goto __pyx_L36_bool_binop_done;
                }
                __pyx_t_15 = __pyx_v_j;
                __pyx_t_2 = (((__pyx_v_pz - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) )))) > __pyx_v_z_max) != 0);
                __pyx_t_1 = __pyx_t_2;
                __pyx_L36_bool_binop_done:;
                if (__pyx_t_1) {
                  goto __pyx_L32_continue;
                }

                /* "yt/utilities/lib/pixelization_routines.pyx":1628
 *                         if (pz + hsml[j] < z_min) or (pz - hsml[j] > z_max): continue
 * 
 *                         x0 = <np.int64_t> ( (px - hsml[j] - x_min) * idx)             # <<<<<<<<<<<<<<
 *                         x1 = <np.int64_t> ( (px + hsml[j] - x_min) * idx)
 *                         x0 = iclip(x0-1, 0, xsize)
 */
                __pyx_t_15 = __pyx_v_j;
                __pyx_v_x0 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_px - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_x_min) * __pyx_v_idx));

                /* "yt/utilities/lib/pixelization_routines.pyx":1629
 * 
 *                         x0 = <np.int64_t> ( (px - hsml[j] - x_min) * idx)
 *                         x1 = <np.int64_t> ( (px + hsml[j] - x_min) * idx)             # <<<<<<<<<<<<<<
 *                         x0 = iclip(x0-1, 0, xsize)
 *                         x1 = iclip(x1+1, 0, xsize)
 */
                __pyx_t_15 = __pyx_v_j;
                __pyx_v_x1 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_px + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_x_min) * __pyx_v_idx));

                /* "yt/utilities/lib/pixelization_routines.pyx":1630
 *                         x0 = <np.int64_t> ( (px - hsml[j] - x_min) * idx)
 *                         x1 = <np.int64_t> ( (px + hsml[j] - x_min) * idx)
 *                         x0 = iclip(x0-1, 0, xsize)             # <<<<<<<<<<<<<<
 *                         x1 = iclip(x1+1, 0, xsize)
 * 
 */
                __pyx_v_x0 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_x0 - 1), 0, __pyx_v_xsize);

                /* "yt/utilities/lib/pixelization_routines.pyx":1631
 *                         x1 = <np.int64_t> ( (px + hsml[j] - x_min) * idx)
 *                         x0 = iclip(x0-1, 0, xsize)
 *                         x1 = iclip(x1+1, 0, xsize)             # <<<<<<<<<<<<<<
 * 
 *                         y0 = <np.int64_t> ( (py - hsml[j] - y_min) * idy)
 */
                __pyx_v_x1 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_x1 + 1), 0, __pyx_v_xsize);

                /* "yt/utilities/lib/pixelization_routines.pyx":1633
 *                         x1 = iclip(x1+1, 0, xsize)
 * 
 *                         y0 = <np.int64_t> ( (py - hsml[j] - y_min) * idy)             # <<<<<<<<<<<<<<
 *                         y1 = <np.int64_t> ( (py + hsml[j] - y_min) * idy)
 *                         y0 = iclip(y0-1, 0, ysize)
 */
                __pyx_t_15 = __pyx_v_j;
                __pyx_v_y0 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_py - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_y_min) * __pyx_v_idy));

                /* "yt/utilities/lib/pixelization_routines.pyx":1634
 * 
 *                         y0 = <np.int64_t> ( (py - hsml[j] - y_min) * idy)
 *                         y1 = <np.int64_t> ( (py + hsml[j] - y_min) * idy)             # <<<<<<<<<<<<<<
 *                         y0 = iclip(y0-1, 0, ysize)
 *                         y1 = iclip(y1+1, 0, ysize)
 */
                __pyx_t_15 = __pyx_v_j;
                __pyx_v_y1 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_py + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_y_min) * __pyx_v_idy));

                /* "yt/utilities/lib/pixelization_routines.pyx":1635
 *                         y0 = <np.int64_t> ( (py - hsml[j] - y_min) * idy)
 *                         y1 = <np.int64_t> ( (py + hsml[j] - y_min) * idy)
 *                         y0 = iclip(y0-1, 0, ysize)             # <<<<<<<<<<<<<<
 *                         y1 = iclip(y1+1, 0, ysize)
 * 
 */
                __pyx_v_y0 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_y0 - 1), 0, __pyx_v_ysize);

                /* "yt/utilities/lib/pixelization_routines.pyx":1636
 *                         y1 = <np.int64_t> ( (py + hsml[j] - y_min) * idy)
 *                         y0 = iclip(y0-1, 0, ysize)
 *                         y1 = iclip(y1+1, 0, ysize)             # <<<<<<<<<<<<<<
 * 
 *                         z0 = <np.int64_t> ( (pz - hsml[j] - z_min) * idz)
 */
                __pyx_v_y1 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_y1 + 1), 0, __pyx_v_ysize);

                /* "yt/utilities/lib/pixelization_routines.pyx":1638
 *                         y1 = iclip(y1+1, 0, ysize)
 * 
 *                         z0 = <np.int64_t> ( (pz - hsml[j] - z_min) * idz)             # <<<<<<<<<<<<<<
 *                         z1 = <np.int64_t> ( (pz + hsml[j] - z_min) * idz)
 *                         z0 = iclip(z0-1, 0, zsize)
 */
                __pyx_t_15 = __pyx_v_j;
                __pyx_v_z0 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_pz - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_z_min) * __pyx_v_idz));

                /* "yt/utilities/lib/pixelization_routines.pyx":1639
 * 
 *                         z0 = <np.int64_t> ( (pz - hsml[j] - z_min) * idz)
 *                         z1 = <np.int64_t> ( (pz + hsml[j] - z_min) * idz)             # <<<<<<<<<<<<<<
 *                         z0 = iclip(z0-1, 0, zsize)
 *                         z1 = iclip(z1+1, 0, zsize)
 */
                __pyx_t_15 = __pyx_v_j;
                __pyx_v_z1 = ((__pyx_t_5numpy_int64_t)(((__pyx_v_pz + (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_hsml.data + __pyx_t_15 * __pyx_v_hsml.strides[0]) )))) - __pyx_v_z_min) * __pyx_v_idz));

                /* "yt/utilities/lib/pixelization_routines.pyx":1640
 *                         z0 = <np.int64_t> ( (pz - hsml[j] - z_min) * idz)
 *                         z1 = <np.int64_t> ( (pz + hsml[j] - z_min) * idz)
 *                         z0 = iclip(z0-1, 0, zsize)             # <<<<<<<<<<<<<<
 *                         z1 = iclip(z1+1, 0, zsize)
 * 
 */
                __pyx_v_z0 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_z0 - 1), 0, __pyx_v_zsize);

                /* "yt/utilities/lib/pixelization_routines.pyx":1641
 *                         z1 = <np.int64_t> ( (pz + hsml[j] - z_min) * idz)
 *                         z0 = iclip(z0-1, 0, zsize)
 *                         z1 = iclip(z1+1, 0, zsize)             # <<<<<<<<<<<<<<
 * 
 *                         # Now we know which voxels to deposit onto for this particle,
 */
                __pyx_v_z1 = __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip((__pyx_v_z1 + 1), 0, __pyx_v_zsize);

                /* "yt/utilities/lib/pixelization_routines.pyx":1645
 *                         # Now we know which voxels to deposit onto for this particle,
 *                         # so loop over them and add this particle's contribution
 *                         for xi in range(x0, x1):             # <<<<<<<<<<<<<<
 *                             x = (xi + 0.5) * dx + x_min
 * 
 */
                __pyx_t_18 = __pyx_v_x1;
                __pyx_t_19 = __pyx_t_18;
                for (__pyx_t_20 = __pyx_v_x0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
                  __pyx_v_xi = __pyx_t_20;

                  /* "yt/utilities/lib/pixelization_routines.pyx":1646
 *                         # so loop over them and add this particle's contribution
 *                         for xi in range(x0, x1):
 *                             x = (xi + 0.5) * dx + x_min             # <<<<<<<<<<<<<<
 * 
 *                             posx_diff = px - x
 */
                  __pyx_v_x = (((__pyx_v_xi + 0.5) * __pyx_v_dx) + __pyx_v_x_min);

                  /* "yt/utilities/lib/pixelization_routines.pyx":1648
 *                             x = (xi + 0.5) * dx + x_min
 * 
 *                             posx_diff = px - x             # <<<<<<<<<<<<<<
 *                             posx_diff = posx_diff * posx_diff
 *                             if posx_diff > h_j2:
 */
                  __pyx_v_posx_diff = (__pyx_v_px - __pyx_v_x);

                  /* "yt/utilities/lib/pixelization_routines.pyx":1649
 * 
 *                             posx_diff = px - x
 *                             posx_diff = posx_diff * posx_diff             # <<<<<<<<<<<<<<
 *                             if posx_diff > h_j2:
 *                                 continue
 */
                  __pyx_v_posx_diff = (__pyx_v_posx_diff * __pyx_v_posx_diff);

                  /* "yt/utilities/lib/pixelization_routines.pyx":1650
 *                             posx_diff = px - x
 *                             posx_diff = posx_diff * posx_diff
 *                             if posx_diff > h_j2:             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
                  __pyx_t_1 = ((__pyx_v_posx_diff > __pyx_v_h_j2) != 0);
                  if (__pyx_t_1) {

                    /* "yt/utilities/lib/pixelization_routines.pyx":1651
 *                             posx_diff = posx_diff * posx_diff
 *                             if posx_diff > h_j2:
 *                                 continue             # <<<<<<<<<<<<<<
 * 
 *                             for yi in range(y0, y1):
 */
                    goto __pyx_L38_continue;

                    /* "yt/utilities/lib/pixelization_routines.pyx":1650
 *                             posx_diff = px - x
 *                             posx_diff = posx_diff * posx_diff
 *                             if posx_diff > h_j2:             # <<<<<<<<<<<<<<
 *                                 continue
 * 
 */
                  }

                  /* "yt/utilities/lib/pixelization_routines.pyx":1653
 *                                 continue
 * 
 *                             for yi in range(y0, y1):             # <<<<<<<<<<<<<<
 *                                 y = (yi + 0.5) * dy + y_min
 * 
 */
                  __pyx_t_21 = __pyx_v_y1;
                  __pyx_t_22 = __pyx_t_21;
                  for (__pyx_t_23 = __pyx_v_y0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
                    __pyx_v_yi = __pyx_t_23;

                    /* "yt/utilities/lib/pixelization_routines.pyx":1654
 * 
 *                             for yi in range(y0, y1):
 *                                 y = (yi + 0.5) * dy + y_min             # <<<<<<<<<<<<<<
 * 
 *                                 posy_diff = py - y
 */
                    __pyx_v_y = (((__pyx_v_yi + 0.5) * __pyx_v_dy) + __pyx_v_y_min);

                    /* "yt/utilities/lib/pixelization_routines.pyx":1656
 *                                 y = (yi + 0.5) * dy + y_min
 * 
 *                                 posy_diff = py - y             # <<<<<<<<<<<<<<
 *                                 posy_diff = posy_diff * posy_diff
 *                                 if posy_diff > h_j2:
 */
                    __pyx_v_posy_diff = (__pyx_v_py - __pyx_v_y);

                    /* "yt/utilities/lib/pixelization_routines.pyx":1657
 * 
 *                                 posy_diff = py - y
 *                                 posy_diff = posy_diff * posy_diff             # <<<<<<<<<<<<<<
 *                                 if posy_diff > h_j2:
 *                                     continue
 */
                    __pyx_v_posy_diff = (__pyx_v_posy_diff * __pyx_v_posy_diff);

                    /* "yt/utilities/lib/pixelization_routines.pyx":1658
 *                                 posy_diff = py - y
 *                                 posy_diff = posy_diff * posy_diff
 *                                 if posy_diff > h_j2:             # <<<<<<<<<<<<<<
 *                                     continue
 * 
 */
                    __pyx_t_1 = ((__pyx_v_posy_diff > __pyx_v_h_j2) != 0);
                    if (__pyx_t_1) {

                      /* "yt/utilities/lib/pixelization_routines.pyx":1659
 *                                 posy_diff = posy_diff * posy_diff
 *                                 if posy_diff > h_j2:
 *                                     continue             # <<<<<<<<<<<<<<
 * 
 *                                 for zi in range(z0, z1):
 */
                      goto __pyx_L41_continue;

                      /* "yt/utilities/lib/pixelization_routines.pyx":1658
 *                                 posy_diff = py - y
 *                                 posy_diff = posy_diff * posy_diff
 *                                 if posy_diff > h_j2:             # <<<<<<<<<<<<<<
 *                                     continue
 * 
 */
                    }

                    /* "yt/utilities/lib/pixelization_routines.pyx":1661
 *                                     continue
 * 
 *                                 for zi in range(z0, z1):             # <<<<<<<<<<<<<<
 *                                     z = (zi + 0.5) * dz + z_min
 * 
 */
                    __pyx_t_24 = __pyx_v_z1;
                    __pyx_t_25 = __pyx_t_24;
                    for (__pyx_t_26 = __pyx_v_z0; __pyx_t_26 < __pyx_t_25; __pyx_t_26+=1) {
                      __pyx_v_zi = __pyx_t_26;

                      /* "yt/utilities/lib/pixelization_routines.pyx":1662
 * 
 *                                 for zi in range(z0, z1):
 *                                     z = (zi + 0.5) * dz + z_min             # <<<<<<<<<<<<<<
 * 
 *                                     posz_diff = pz - z
 */
                      __pyx_v_z = (((__pyx_v_zi + 0.5) * __pyx_v_dz) + __pyx_v_z_min);

                      /* "yt/utilities/lib/pixelization_routines.pyx":1664
 *                                     z = (zi + 0.5) * dz + z_min
 * 
 *                                     posz_diff = pz - z             # <<<<<<<<<<<<<<
 *                                     posz_diff = posz_diff * posz_diff
 *                                     if posz_diff > h_j2:
 */
                      __pyx_v_posz_diff = (__pyx_v_pz - __pyx_v_z);

                      /* "yt/utilities/lib/pixelization_routines.pyx":1665
 * 
 *                                     posz_diff = pz - z
 *                                     posz_diff = posz_diff * posz_diff             # <<<<<<<<<<<<<<
 *                                     if posz_diff > h_j2:
 *                                         continue
 */
                      __pyx_v_posz_diff = (__pyx_v_posz_diff * __pyx_v_posz_diff);

                      /* "yt/utilities/lib/pixelization_routines.pyx":1666
 *                                     posz_diff = pz - z
 *                                     posz_diff = posz_diff * posz_diff
 *                                     if posz_diff > h_j2:             # <<<<<<<<<<<<<<
 *                                         continue
 * 
 */
                      __pyx_t_1 = ((__pyx_v_posz_diff > __pyx_v_h_j2) != 0);
                      if (__pyx_t_1) {

                        /* "yt/utilities/lib/pixelization_routines.pyx":1667
 *                                     posz_diff = posz_diff * posz_diff
 *                                     if posz_diff > h_j2:
 *                                         continue             # <<<<<<<<<<<<<<
 * 
 *                                     # see equation 4 of the SPLASH paper
 */
                        goto __pyx_L44_continue;

                        /* "yt/utilities/lib/pixelization_routines.pyx":1666
 *                                     posz_diff = pz - z
 *                                     posz_diff = posz_diff * posz_diff
 *                                     if posz_diff > h_j2:             # <<<<<<<<<<<<<<
 *                                         continue
 * 
 */
                      }

                      /* "yt/utilities/lib/pixelization_routines.pyx":1670
 * 
 *                                     # see equation 4 of the SPLASH paper
 *                                     q_ij = math.sqrt(posx_diff + posy_diff + posz_diff) * ih_j             # <<<<<<<<<<<<<<
 *                                     if q_ij >= 1:
 *                                         continue
 */
                      __pyx_v_q_ij = (sqrt(((__pyx_v_posx_diff + __pyx_v_posy_diff) + __pyx_v_posz_diff)) * __pyx_v_ih_j);

                      /* "yt/utilities/lib/pixelization_routines.pyx":1671
 *                                     # see equation 4 of the SPLASH paper
 *                                     q_ij = math.sqrt(posx_diff + posy_diff + posz_diff) * ih_j
 *                                     if q_ij >= 1:             # <<<<<<<<<<<<<<
 *                                         continue
 * 
 */
                      __pyx_t_1 = ((__pyx_v_q_ij >= 1.0) != 0);
                      if (__pyx_t_1) {

                        /* "yt/utilities/lib/pixelization_routines.pyx":1672
 *                                     q_ij = math.sqrt(posx_diff + posy_diff + posz_diff) * ih_j
 *                                     if q_ij >= 1:
 *                                         continue             # <<<<<<<<<<<<<<
 * 
 *                                     buff[xi, yi, zi] += prefactor_j * kernel(q_ij)
 */
                        goto __pyx_L44_continue;

                        /* "yt/utilities/lib/pixelization_routines.pyx":1671
 *                                     # see equation 4 of the SPLASH paper
 *                                     q_ij = math.sqrt(posx_diff + posy_diff + posz_diff) * ih_j
 *                                     if q_ij >= 1:             # <<<<<<<<<<<<<<
 *                                         continue
 * 
 */
                      }

                      /* "yt/utilities/lib/pixelization_routines.pyx":1674
 *                                         continue
 * 
 *                                     buff[xi, yi, zi] += prefactor_j * kernel(q_ij)             # <<<<<<<<<<<<<<
 * 
 * 
 */
                      __pyx_t_27 = __pyx_v_xi;
                      __pyx_t_28 = __pyx_v_yi;
                      __pyx_t_29 = __pyx_v_zi;
                      *((__pyx_t_5numpy_float64_t *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_buff.data + __pyx_t_27 * __pyx_v_buff.strides[0]) ) + __pyx_t_28 * __pyx_v_buff.strides[1]) ) + __pyx_t_29 * __pyx_v_buff.strides[2]) )) += (__pyx_v_prefactor_j * __pyx_v_kernel(__pyx_v_q_ij));
                      __pyx_L44_continue:;
                    }
                    __pyx_L41_continue:;
                  }
                  __pyx_L38_continue:;
                }
                __pyx_L32_continue:;
              }
              __pyx_L26_continue:;
            }
            __pyx_L20_continue:;
          }
        }
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":1576
 *     kernel = get_kernel_func(kernel_name)
 * 
 *     with nogil:             # <<<<<<<<<<<<<<
 *         # TODO make this parallel without using too much memory
 *         for j in range(0, posx.shape[0]):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L6;
        }
        __pyx_L5_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L6:;
      }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1528
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_arbitrary_grid(np.float64_t[:, :, :] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:] posx, np.float64_t[:] posy, np.float64_t[:] posz,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_sph_kernel_arbitrary_grid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_buff, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_posx, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_posy, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_posz, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_hsml, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pmass, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pdens, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_quantity_to_smooth, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1677
 * 
 * 
 * def pixelize_element_mesh_line(np.ndarray[np.float64_t, ndim=2] coords,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.int64_t, ndim=2] conn,
 *                                np.ndarray[np.float64_t, ndim=1] start_point,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_23pixelize_element_mesh_line(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_23pixelize_element_mesh_line = {"pixelize_element_mesh_line", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_23pixelize_element_mesh_line, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_23pixelize_element_mesh_line(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_coords = 0;
  PyArrayObject *__pyx_v_conn = 0;
  PyArrayObject *__pyx_v_start_point = 0;
  PyArrayObject *__pyx_v_end_point = 0;
  PyObject *__pyx_v_npoints = 0;
  PyArrayObject *__pyx_v_field = 0;
  int __pyx_v_index_offset;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pixelize_element_mesh_line (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coords,&__pyx_n_s_conn,&__pyx_n_s_start_point,&__pyx_n_s_end_point,&__pyx_n_s_npoints,&__pyx_n_s_field,&__pyx_n_s_index_offset,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coords)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_conn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_element_mesh_line", 0, 6, 7, 1); __PYX_ERR(0, 1677, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_point)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_element_mesh_line", 0, 6, 7, 2); __PYX_ERR(0, 1677, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_end_point)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_element_mesh_line", 0, 6, 7, 3); __PYX_ERR(0, 1677, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_npoints)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_element_mesh_line", 0, 6, 7, 4); __PYX_ERR(0, 1677, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("pixelize_element_mesh_line", 0, 6, 7, 5); __PYX_ERR(0, 1677, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index_offset);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "pixelize_element_mesh_line") < 0)) __PYX_ERR(0, 1677, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_coords = ((PyArrayObject *)values[0]);
    __pyx_v_conn = ((PyArrayObject *)values[1]);
    __pyx_v_start_point = ((PyArrayObject *)values[2]);
    __pyx_v_end_point = ((PyArrayObject *)values[3]);
    __pyx_v_npoints = values[4];
    __pyx_v_field = ((PyArrayObject *)values[5]);
    if (values[6]) {
      __pyx_v_index_offset = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_index_offset == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1683, __pyx_L3_error)
    } else {
      __pyx_v_index_offset = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pixelize_element_mesh_line", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1677, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_element_mesh_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_coords), __pyx_ptype_5numpy_ndarray, 1, "coords", 0))) __PYX_ERR(0, 1677, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_conn), __pyx_ptype_5numpy_ndarray, 1, "conn", 0))) __PYX_ERR(0, 1678, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_start_point), __pyx_ptype_5numpy_ndarray, 1, "start_point", 0))) __PYX_ERR(0, 1679, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_end_point), __pyx_ptype_5numpy_ndarray, 1, "end_point", 0))) __PYX_ERR(0, 1680, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_field), __pyx_ptype_5numpy_ndarray, 1, "field", 0))) __PYX_ERR(0, 1682, __pyx_L1_error)
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_22pixelize_element_mesh_line(__pyx_self, __pyx_v_coords, __pyx_v_conn, __pyx_v_start_point, __pyx_v_end_point, __pyx_v_npoints, __pyx_v_field, __pyx_v_index_offset);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_22pixelize_element_mesh_line(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_coords, PyArrayObject *__pyx_v_conn, PyArrayObject *__pyx_v_start_point, PyArrayObject *__pyx_v_end_point, PyObject *__pyx_v_npoints, PyArrayObject *__pyx_v_field, int __pyx_v_index_offset) {
  __pyx_t_5numpy_float64_t *__pyx_v_vertices;
  __pyx_t_5numpy_float64_t *__pyx_v_field_vals;
  int __pyx_v_nvertices;
  int __pyx_v_ndim;
  int __pyx_v_num_field_vals;
  int __pyx_v_num_plot_nodes;
  int __pyx_v_num_intervals;
  double __pyx_v_mapped_coord[4];
  struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *__pyx_v_sampler = 0;
  PyArrayObject *__pyx_v_lin_vec = 0;
  PyArrayObject *__pyx_v_lin_inc = 0;
  PyArrayObject *__pyx_v_lin_sample_points = 0;
  __pyx_t_5numpy_int64_t __pyx_v_i;
  __pyx_t_5numpy_int64_t __pyx_v_n;
  __pyx_t_5numpy_int64_t __pyx_v_j;
  __pyx_t_5numpy_int64_t __pyx_v_k;
  PyArrayObject *__pyx_v_arc_length = 0;
  __pyx_t_5numpy_float64_t __pyx_v_lin_length;
  __pyx_t_5numpy_float64_t __pyx_v_inc_length;
  PyArrayObject *__pyx_v_plot_values = 0;
  __pyx_t_5numpy_float64_t __pyx_v_sample_point[3];
  npy_intp __pyx_v_ci;
  PyObject *__pyx_v_cj = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arc_length;
  __Pyx_Buffer __pyx_pybuffer_arc_length;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_conn;
  __Pyx_Buffer __pyx_pybuffer_conn;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_coords;
  __Pyx_Buffer __pyx_pybuffer_coords;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_end_point;
  __Pyx_Buffer __pyx_pybuffer_end_point;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_field;
  __Pyx_Buffer __pyx_pybuffer_field;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_lin_inc;
  __Pyx_Buffer __pyx_pybuffer_lin_inc;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_lin_sample_points;
  __Pyx_Buffer __pyx_pybuffer_lin_sample_points;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_lin_vec;
  __Pyx_Buffer __pyx_pybuffer_lin_vec;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_plot_values;
  __Pyx_Buffer __pyx_pybuffer_plot_values;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_start_point;
  __Pyx_Buffer __pyx_pybuffer_start_point;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  PyArrayObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  __pyx_t_5numpy_float64_t __pyx_t_18;
  int __pyx_t_19;
  __pyx_t_5numpy_int64_t __pyx_t_20;
  __pyx_t_5numpy_int64_t __pyx_t_21;
  int __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  __pyx_t_5numpy_int64_t __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  __pyx_t_5numpy_int64_t __pyx_t_27;
  __pyx_t_5numpy_int64_t __pyx_t_28;
  __pyx_t_5numpy_int64_t __pyx_t_29;
  __pyx_t_5numpy_int64_t __pyx_t_30;
  npy_intp __pyx_t_31;
  npy_intp __pyx_t_32;
  npy_intp __pyx_t_33;
  int __pyx_t_34;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pixelize_element_mesh_line", 0);
  __pyx_pybuffer_lin_vec.pybuffer.buf = NULL;
  __pyx_pybuffer_lin_vec.refcount = 0;
  __pyx_pybuffernd_lin_vec.data = NULL;
  __pyx_pybuffernd_lin_vec.rcbuffer = &__pyx_pybuffer_lin_vec;
  __pyx_pybuffer_lin_inc.pybuffer.buf = NULL;
  __pyx_pybuffer_lin_inc.refcount = 0;
  __pyx_pybuffernd_lin_inc.data = NULL;
  __pyx_pybuffernd_lin_inc.rcbuffer = &__pyx_pybuffer_lin_inc;
  __pyx_pybuffer_lin_sample_points.pybuffer.buf = NULL;
  __pyx_pybuffer_lin_sample_points.refcount = 0;
  __pyx_pybuffernd_lin_sample_points.data = NULL;
  __pyx_pybuffernd_lin_sample_points.rcbuffer = &__pyx_pybuffer_lin_sample_points;
  __pyx_pybuffer_arc_length.pybuffer.buf = NULL;
  __pyx_pybuffer_arc_length.refcount = 0;
  __pyx_pybuffernd_arc_length.data = NULL;
  __pyx_pybuffernd_arc_length.rcbuffer = &__pyx_pybuffer_arc_length;
  __pyx_pybuffer_plot_values.pybuffer.buf = NULL;
  __pyx_pybuffer_plot_values.refcount = 0;
  __pyx_pybuffernd_plot_values.data = NULL;
  __pyx_pybuffernd_plot_values.rcbuffer = &__pyx_pybuffer_plot_values;
  __pyx_pybuffer_coords.pybuffer.buf = NULL;
  __pyx_pybuffer_coords.refcount = 0;
  __pyx_pybuffernd_coords.data = NULL;
  __pyx_pybuffernd_coords.rcbuffer = &__pyx_pybuffer_coords;
  __pyx_pybuffer_conn.pybuffer.buf = NULL;
  __pyx_pybuffer_conn.refcount = 0;
  __pyx_pybuffernd_conn.data = NULL;
  __pyx_pybuffernd_conn.rcbuffer = &__pyx_pybuffer_conn;
  __pyx_pybuffer_start_point.pybuffer.buf = NULL;
  __pyx_pybuffer_start_point.refcount = 0;
  __pyx_pybuffernd_start_point.data = NULL;
  __pyx_pybuffernd_start_point.rcbuffer = &__pyx_pybuffer_start_point;
  __pyx_pybuffer_end_point.pybuffer.buf = NULL;
  __pyx_pybuffer_end_point.refcount = 0;
  __pyx_pybuffernd_end_point.data = NULL;
  __pyx_pybuffernd_end_point.rcbuffer = &__pyx_pybuffer_end_point;
  __pyx_pybuffer_field.pybuffer.buf = NULL;
  __pyx_pybuffer_field.refcount = 0;
  __pyx_pybuffernd_field.data = NULL;
  __pyx_pybuffernd_field.rcbuffer = &__pyx_pybuffer_field;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_coords.rcbuffer->pybuffer, (PyObject*)__pyx_v_coords, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1677, __pyx_L1_error)
  }
  __pyx_pybuffernd_coords.diminfo[0].strides = __pyx_pybuffernd_coords.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_coords.diminfo[0].shape = __pyx_pybuffernd_coords.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_coords.diminfo[1].strides = __pyx_pybuffernd_coords.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_coords.diminfo[1].shape = __pyx_pybuffernd_coords.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_conn.rcbuffer->pybuffer, (PyObject*)__pyx_v_conn, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1677, __pyx_L1_error)
  }
  __pyx_pybuffernd_conn.diminfo[0].strides = __pyx_pybuffernd_conn.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_conn.diminfo[0].shape = __pyx_pybuffernd_conn.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_conn.diminfo[1].strides = __pyx_pybuffernd_conn.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_conn.diminfo[1].shape = __pyx_pybuffernd_conn.rcbuffer->pybuffer.shape[1];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_start_point.rcbuffer->pybuffer, (PyObject*)__pyx_v_start_point, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1677, __pyx_L1_error)
  }
  __pyx_pybuffernd_start_point.diminfo[0].strides = __pyx_pybuffernd_start_point.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_start_point.diminfo[0].shape = __pyx_pybuffernd_start_point.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_end_point.rcbuffer->pybuffer, (PyObject*)__pyx_v_end_point, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1677, __pyx_L1_error)
  }
  __pyx_pybuffernd_end_point.diminfo[0].strides = __pyx_pybuffernd_end_point.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_end_point.diminfo[0].shape = __pyx_pybuffernd_end_point.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_field.rcbuffer->pybuffer, (PyObject*)__pyx_v_field, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) __PYX_ERR(0, 1677, __pyx_L1_error)
  }
  __pyx_pybuffernd_field.diminfo[0].strides = __pyx_pybuffernd_field.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_field.diminfo[0].shape = __pyx_pybuffernd_field.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_field.diminfo[1].strides = __pyx_pybuffernd_field.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_field.diminfo[1].shape = __pyx_pybuffernd_field.rcbuffer->pybuffer.shape[1];

  /* "yt/utilities/lib/pixelization_routines.pyx":1689
 *     cdef np.float64_t *vertices
 *     cdef np.float64_t *field_vals
 *     cdef int nvertices = conn.shape[1]             # <<<<<<<<<<<<<<
 *     cdef int ndim = coords.shape[1]
 *     cdef int num_field_vals = field.shape[1]
 */
  __pyx_v_nvertices = (__pyx_v_conn->dimensions[1]);

  /* "yt/utilities/lib/pixelization_routines.pyx":1690
 *     cdef np.float64_t *field_vals
 *     cdef int nvertices = conn.shape[1]
 *     cdef int ndim = coords.shape[1]             # <<<<<<<<<<<<<<
 *     cdef int num_field_vals = field.shape[1]
 *     cdef int num_plot_nodes = npoints
 */
  __pyx_v_ndim = (__pyx_v_coords->dimensions[1]);

  /* "yt/utilities/lib/pixelization_routines.pyx":1691
 *     cdef int nvertices = conn.shape[1]
 *     cdef int ndim = coords.shape[1]
 *     cdef int num_field_vals = field.shape[1]             # <<<<<<<<<<<<<<
 *     cdef int num_plot_nodes = npoints
 *     cdef int num_intervals = npoints - 1
 */
  __pyx_v_num_field_vals = (__pyx_v_field->dimensions[1]);

  /* "yt/utilities/lib/pixelization_routines.pyx":1692
 *     cdef int ndim = coords.shape[1]
 *     cdef int num_field_vals = field.shape[1]
 *     cdef int num_plot_nodes = npoints             # <<<<<<<<<<<<<<
 *     cdef int num_intervals = npoints - 1
 *     cdef double[4] mapped_coord
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_npoints); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1692, __pyx_L1_error)
  __pyx_v_num_plot_nodes = __pyx_t_1;

  /* "yt/utilities/lib/pixelization_routines.pyx":1693
 *     cdef int num_field_vals = field.shape[1]
 *     cdef int num_plot_nodes = npoints
 *     cdef int num_intervals = npoints - 1             # <<<<<<<<<<<<<<
 *     cdef double[4] mapped_coord
 *     cdef ElementSampler sampler
 */
  __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_npoints, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1693, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_num_intervals = __pyx_t_1;

  /* "yt/utilities/lib/pixelization_routines.pyx":1705
 *     cdef np.float64_t sample_point[3]
 * 
 *     lin_vec = np.zeros(ndim, dtype="float64")             # <<<<<<<<<<<<<<
 *     lin_inc = np.zeros(ndim, dtype="float64")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_n_u_float64) < 0) __PYX_ERR(0, 1705, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1705, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_lin_vec.rcbuffer->pybuffer);
    __pyx_t_1 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_lin_vec.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_1 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_lin_vec.rcbuffer->pybuffer, (PyObject*)__pyx_v_lin_vec, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_lin_vec.diminfo[0].strides = __pyx_pybuffernd_lin_vec.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_lin_vec.diminfo[0].shape = __pyx_pybuffernd_lin_vec.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1705, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_lin_vec = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1706
 * 
 *     lin_vec = np.zeros(ndim, dtype="float64")
 *     lin_inc = np.zeros(ndim, dtype="float64")             # <<<<<<<<<<<<<<
 * 
 *     lin_sample_points = np.zeros((num_plot_nodes, ndim), dtype="float64")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_ndim); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_n_u_float64) < 0) __PYX_ERR(0, 1706, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1706, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_lin_inc.rcbuffer->pybuffer);
    __pyx_t_1 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_lin_inc.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_1 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_lin_inc.rcbuffer->pybuffer, (PyObject*)__pyx_v_lin_inc, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_7);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      }
      __pyx_t_9 = __pyx_t_8 = __pyx_t_7 = 0;
    }
    __pyx_pybuffernd_lin_inc.diminfo[0].strides = __pyx_pybuffernd_lin_inc.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_lin_inc.diminfo[0].shape = __pyx_pybuffernd_lin_inc.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1706, __pyx_L1_error)
  }
  __pyx_t_10 = 0;
  __pyx_v_lin_inc = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1708
 *     lin_inc = np.zeros(ndim, dtype="float64")
 * 
 *     lin_sample_points = np.zeros((num_plot_nodes, ndim), dtype="float64")             # <<<<<<<<<<<<<<
 *     arc_length = np.zeros(num_plot_nodes, dtype="float64")
 *     plot_values = np.zeros(num_plot_nodes, dtype="float64")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_num_plot_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_ndim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_n_u_float64) < 0) __PYX_ERR(0, 1708, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1708, __pyx_L1_error)
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_lin_sample_points.rcbuffer->pybuffer);
    __pyx_t_1 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_lin_sample_points.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
    if (unlikely(__pyx_t_1 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_lin_sample_points.rcbuffer->pybuffer, (PyObject*)__pyx_v_lin_sample_points, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_lin_sample_points.diminfo[0].strides = __pyx_pybuffernd_lin_sample_points.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_lin_sample_points.diminfo[0].shape = __pyx_pybuffernd_lin_sample_points.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_lin_sample_points.diminfo[1].strides = __pyx_pybuffernd_lin_sample_points.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_lin_sample_points.diminfo[1].shape = __pyx_pybuffernd_lin_sample_points.rcbuffer->pybuffer.shape[1];
    if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1708, __pyx_L1_error)
  }
  __pyx_t_11 = 0;
  __pyx_v_lin_sample_points = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1709
 * 
 *     lin_sample_points = np.zeros((num_plot_nodes, ndim), dtype="float64")
 *     arc_length = np.zeros(num_plot_nodes, dtype="float64")             # <<<<<<<<<<<<<<
 *     plot_values = np.zeros(num_plot_nodes, dtype="float64")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_num_plot_nodes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_float64) < 0) __PYX_ERR(0, 1709, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1709, __pyx_L1_error)
  __pyx_t_12 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arc_length.rcbuffer->pybuffer);
    __pyx_t_1 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arc_length.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_1 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arc_length.rcbuffer->pybuffer, (PyObject*)__pyx_v_arc_length, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_7);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      }
      __pyx_t_9 = __pyx_t_8 = __pyx_t_7 = 0;
    }
    __pyx_pybuffernd_arc_length.diminfo[0].strides = __pyx_pybuffernd_arc_length.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arc_length.diminfo[0].shape = __pyx_pybuffernd_arc_length.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1709, __pyx_L1_error)
  }
  __pyx_t_12 = 0;
  __pyx_v_arc_length = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1710
 *     lin_sample_points = np.zeros((num_plot_nodes, ndim), dtype="float64")
 *     arc_length = np.zeros(num_plot_nodes, dtype="float64")
 *     plot_values = np.zeros(num_plot_nodes, dtype="float64")             # <<<<<<<<<<<<<<
 * 
 *     # Pick the right sampler and allocate storage for the mapped coordinate
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_num_plot_nodes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_n_u_float64) < 0) __PYX_ERR(0, 1710, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1710, __pyx_L1_error)
  __pyx_t_13 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_plot_values.rcbuffer->pybuffer);
    __pyx_t_1 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_plot_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_1 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_plot_values.rcbuffer->pybuffer, (PyObject*)__pyx_v_plot_values, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_plot_values.diminfo[0].strides = __pyx_pybuffernd_plot_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_plot_values.diminfo[0].shape = __pyx_pybuffernd_plot_values.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1710, __pyx_L1_error)
  }
  __pyx_t_13 = 0;
  __pyx_v_plot_values = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1713
 * 
 *     # Pick the right sampler and allocate storage for the mapped coordinate
 *     if ndim == 3 and nvertices == 4:             # <<<<<<<<<<<<<<
 *         sampler = P1Sampler3D()
 *     elif ndim == 3 and nvertices == 6:
 */
  __pyx_t_15 = ((__pyx_v_ndim == 3) != 0);
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_15 = ((__pyx_v_nvertices == 4) != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_14) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1714
 *     # Pick the right sampler and allocate storage for the mapped coordinate
 *     if ndim == 3 and nvertices == 4:
 *         sampler = P1Sampler3D()             # <<<<<<<<<<<<<<
 *     elif ndim == 3 and nvertices == 6:
 *         sampler = W1Sampler3D()
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler3D)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1713
 * 
 *     # Pick the right sampler and allocate storage for the mapped coordinate
 *     if ndim == 3 and nvertices == 4:             # <<<<<<<<<<<<<<
 *         sampler = P1Sampler3D()
 *     elif ndim == 3 and nvertices == 6:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1715
 *     if ndim == 3 and nvertices == 4:
 *         sampler = P1Sampler3D()
 *     elif ndim == 3 and nvertices == 6:             # <<<<<<<<<<<<<<
 *         sampler = W1Sampler3D()
 *     elif ndim == 3 and nvertices == 8:
 */
  __pyx_t_15 = ((__pyx_v_ndim == 3) != 0);
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_15 = ((__pyx_v_nvertices == 6) != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_14) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1716
 *         sampler = P1Sampler3D()
 *     elif ndim == 3 and nvertices == 6:
 *         sampler = W1Sampler3D()             # <<<<<<<<<<<<<<
 *     elif ndim == 3 and nvertices == 8:
 *         sampler = Q1Sampler3D()
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_W1Sampler3D)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1715
 *     if ndim == 3 and nvertices == 4:
 *         sampler = P1Sampler3D()
 *     elif ndim == 3 and nvertices == 6:             # <<<<<<<<<<<<<<
 *         sampler = W1Sampler3D()
 *     elif ndim == 3 and nvertices == 8:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1717
 *     elif ndim == 3 and nvertices == 6:
 *         sampler = W1Sampler3D()
 *     elif ndim == 3 and nvertices == 8:             # <<<<<<<<<<<<<<
 *         sampler = Q1Sampler3D()
 *     elif ndim == 3 and nvertices == 20:
 */
  __pyx_t_15 = ((__pyx_v_ndim == 3) != 0);
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_15 = ((__pyx_v_nvertices == 8) != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_14) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1718
 *         sampler = W1Sampler3D()
 *     elif ndim == 3 and nvertices == 8:
 *         sampler = Q1Sampler3D()             # <<<<<<<<<<<<<<
 *     elif ndim == 3 and nvertices == 20:
 *         sampler = S2Sampler3D()
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1718, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1717
 *     elif ndim == 3 and nvertices == 6:
 *         sampler = W1Sampler3D()
 *     elif ndim == 3 and nvertices == 8:             # <<<<<<<<<<<<<<
 *         sampler = Q1Sampler3D()
 *     elif ndim == 3 and nvertices == 20:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1719
 *     elif ndim == 3 and nvertices == 8:
 *         sampler = Q1Sampler3D()
 *     elif ndim == 3 and nvertices == 20:             # <<<<<<<<<<<<<<
 *         sampler = S2Sampler3D()
 *     elif ndim == 2 and nvertices == 3:
 */
  __pyx_t_15 = ((__pyx_v_ndim == 3) != 0);
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_15 = ((__pyx_v_nvertices == 20) != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_14) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1720
 *         sampler = Q1Sampler3D()
 *     elif ndim == 3 and nvertices == 20:
 *         sampler = S2Sampler3D()             # <<<<<<<<<<<<<<
 *     elif ndim == 2 and nvertices == 3:
 *         sampler = P1Sampler2D()
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_S2Sampler3D)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1719
 *     elif ndim == 3 and nvertices == 8:
 *         sampler = Q1Sampler3D()
 *     elif ndim == 3 and nvertices == 20:             # <<<<<<<<<<<<<<
 *         sampler = S2Sampler3D()
 *     elif ndim == 2 and nvertices == 3:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1721
 *     elif ndim == 3 and nvertices == 20:
 *         sampler = S2Sampler3D()
 *     elif ndim == 2 and nvertices == 3:             # <<<<<<<<<<<<<<
 *         sampler = P1Sampler2D()
 *     elif ndim == 1 and nvertices == 2:
 */
  __pyx_t_15 = ((__pyx_v_ndim == 2) != 0);
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L12_bool_binop_done;
  }
  __pyx_t_15 = ((__pyx_v_nvertices == 3) != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L12_bool_binop_done:;
  if (__pyx_t_14) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1722
 *         sampler = S2Sampler3D()
 *     elif ndim == 2 and nvertices == 3:
 *         sampler = P1Sampler2D()             # <<<<<<<<<<<<<<
 *     elif ndim == 1 and nvertices == 2:
 *         sampler = P1Sampler1D()
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler2D)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1721
 *     elif ndim == 3 and nvertices == 20:
 *         sampler = S2Sampler3D()
 *     elif ndim == 2 and nvertices == 3:             # <<<<<<<<<<<<<<
 *         sampler = P1Sampler2D()
 *     elif ndim == 1 and nvertices == 2:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1723
 *     elif ndim == 2 and nvertices == 3:
 *         sampler = P1Sampler2D()
 *     elif ndim == 1 and nvertices == 2:             # <<<<<<<<<<<<<<
 *         sampler = P1Sampler1D()
 *     elif ndim == 2 and nvertices == 4:
 */
  __pyx_t_15 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_15 = ((__pyx_v_nvertices == 2) != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L14_bool_binop_done:;
  if (__pyx_t_14) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1724
 *         sampler = P1Sampler2D()
 *     elif ndim == 1 and nvertices == 2:
 *         sampler = P1Sampler1D()             # <<<<<<<<<<<<<<
 *     elif ndim == 2 and nvertices == 4:
 *         sampler = Q1Sampler2D()
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler1D)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1723
 *     elif ndim == 2 and nvertices == 3:
 *         sampler = P1Sampler2D()
 *     elif ndim == 1 and nvertices == 2:             # <<<<<<<<<<<<<<
 *         sampler = P1Sampler1D()
 *     elif ndim == 2 and nvertices == 4:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1725
 *     elif ndim == 1 and nvertices == 2:
 *         sampler = P1Sampler1D()
 *     elif ndim == 2 and nvertices == 4:             # <<<<<<<<<<<<<<
 *         sampler = Q1Sampler2D()
 *     elif ndim == 2 and nvertices == 9:
 */
  __pyx_t_15 = ((__pyx_v_ndim == 2) != 0);
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L16_bool_binop_done;
  }
  __pyx_t_15 = ((__pyx_v_nvertices == 4) != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L16_bool_binop_done:;
  if (__pyx_t_14) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1726
 *         sampler = P1Sampler1D()
 *     elif ndim == 2 and nvertices == 4:
 *         sampler = Q1Sampler2D()             # <<<<<<<<<<<<<<
 *     elif ndim == 2 and nvertices == 9:
 *         sampler = Q2Sampler2D()
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1726, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1725
 *     elif ndim == 1 and nvertices == 2:
 *         sampler = P1Sampler1D()
 *     elif ndim == 2 and nvertices == 4:             # <<<<<<<<<<<<<<
 *         sampler = Q1Sampler2D()
 *     elif ndim == 2 and nvertices == 9:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1727
 *     elif ndim == 2 and nvertices == 4:
 *         sampler = Q1Sampler2D()
 *     elif ndim == 2 and nvertices == 9:             # <<<<<<<<<<<<<<
 *         sampler = Q2Sampler2D()
 *     elif ndim == 2 and nvertices == 6:
 */
  __pyx_t_15 = ((__pyx_v_ndim == 2) != 0);
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L18_bool_binop_done;
  }
  __pyx_t_15 = ((__pyx_v_nvertices == 9) != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L18_bool_binop_done:;
  if (__pyx_t_14) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1728
 *         sampler = Q1Sampler2D()
 *     elif ndim == 2 and nvertices == 9:
 *         sampler = Q2Sampler2D()             # <<<<<<<<<<<<<<
 *     elif ndim == 2 and nvertices == 6:
 *         sampler = T2Sampler2D()
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1727
 *     elif ndim == 2 and nvertices == 4:
 *         sampler = Q1Sampler2D()
 *     elif ndim == 2 and nvertices == 9:             # <<<<<<<<<<<<<<
 *         sampler = Q2Sampler2D()
 *     elif ndim == 2 and nvertices == 6:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1729
 *     elif ndim == 2 and nvertices == 9:
 *         sampler = Q2Sampler2D()
 *     elif ndim == 2 and nvertices == 6:             # <<<<<<<<<<<<<<
 *         sampler = T2Sampler2D()
 *     elif ndim == 3 and nvertices == 10:
 */
  __pyx_t_15 = ((__pyx_v_ndim == 2) != 0);
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L20_bool_binop_done;
  }
  __pyx_t_15 = ((__pyx_v_nvertices == 6) != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L20_bool_binop_done:;
  if (__pyx_t_14) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1730
 *         sampler = Q2Sampler2D()
 *     elif ndim == 2 and nvertices == 6:
 *         sampler = T2Sampler2D()             # <<<<<<<<<<<<<<
 *     elif ndim == 3 and nvertices == 10:
 *         sampler = Tet2Sampler3D()
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_T2Sampler2D)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1729
 *     elif ndim == 2 and nvertices == 9:
 *         sampler = Q2Sampler2D()
 *     elif ndim == 2 and nvertices == 6:             # <<<<<<<<<<<<<<
 *         sampler = T2Sampler2D()
 *     elif ndim == 3 and nvertices == 10:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1731
 *     elif ndim == 2 and nvertices == 6:
 *         sampler = T2Sampler2D()
 *     elif ndim == 3 and nvertices == 10:             # <<<<<<<<<<<<<<
 *         sampler = Tet2Sampler3D()
 *     else:
 */
  __pyx_t_15 = ((__pyx_v_ndim == 3) != 0);
  if (__pyx_t_15) {
  } else {
    __pyx_t_14 = __pyx_t_15;
    goto __pyx_L22_bool_binop_done;
  }
  __pyx_t_15 = ((__pyx_v_nvertices == 10) != 0);
  __pyx_t_14 = __pyx_t_15;
  __pyx_L22_bool_binop_done:;
  if (likely(__pyx_t_14)) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1732
 *         sampler = T2Sampler2D()
 *     elif ndim == 3 and nvertices == 10:
 *         sampler = Tet2Sampler3D()             # <<<<<<<<<<<<<<
 *     else:
 *         raise YTElementTypeNotRecognized(ndim, nvertices)
 */
    __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1732, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_sampler = ((struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1731
 *     elif ndim == 2 and nvertices == 6:
 *         sampler = T2Sampler2D()
 *     elif ndim == 3 and nvertices == 10:             # <<<<<<<<<<<<<<
 *         sampler = Tet2Sampler3D()
 *     else:
 */
    goto __pyx_L3;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1734
 *         sampler = Tet2Sampler3D()
 *     else:
 *         raise YTElementTypeNotRecognized(ndim, nvertices)             # <<<<<<<<<<<<<<
 * 
 *     # allocate temporary storage
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_YTElementTypeNotRecognized); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_ndim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_nvertices); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_16 = NULL;
    __pyx_t_1 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_1 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_16, __pyx_t_4, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
      PyObject *__pyx_temp[3] = {__pyx_t_16, __pyx_t_4, __pyx_t_3};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_1, 2+__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_17 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      if (__pyx_t_16) {
        __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_16); __pyx_t_16 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_17, 0+__pyx_t_1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_17, 1+__pyx_t_1, __pyx_t_3);
      __pyx_t_4 = 0;
      __pyx_t_3 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_17, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1734, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1734, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "yt/utilities/lib/pixelization_routines.pyx":1737
 * 
 *     # allocate temporary storage
 *     vertices = <np.float64_t *> malloc(ndim * sizeof(np.float64_t) * nvertices)             # <<<<<<<<<<<<<<
 *     field_vals = <np.float64_t *> malloc(sizeof(np.float64_t) * num_field_vals)
 * 
 */
  __pyx_v_vertices = ((__pyx_t_5numpy_float64_t *)malloc(((__pyx_v_ndim * (sizeof(__pyx_t_5numpy_float64_t))) * __pyx_v_nvertices)));

  /* "yt/utilities/lib/pixelization_routines.pyx":1738
 *     # allocate temporary storage
 *     vertices = <np.float64_t *> malloc(ndim * sizeof(np.float64_t) * nvertices)
 *     field_vals = <np.float64_t *> malloc(sizeof(np.float64_t) * num_field_vals)             # <<<<<<<<<<<<<<
 * 
 *     lin_vec = end_point - start_point
 */
  __pyx_v_field_vals = ((__pyx_t_5numpy_float64_t *)malloc(((sizeof(__pyx_t_5numpy_float64_t)) * __pyx_v_num_field_vals)));

  /* "yt/utilities/lib/pixelization_routines.pyx":1740
 *     field_vals = <np.float64_t *> malloc(sizeof(np.float64_t) * num_field_vals)
 * 
 *     lin_vec = end_point - start_point             # <<<<<<<<<<<<<<
 *     lin_length = np.linalg.norm(lin_vec)
 *     lin_inc = lin_vec / num_intervals
 */
  __pyx_t_2 = PyNumber_Subtract(((PyObject *)__pyx_v_end_point), ((PyObject *)__pyx_v_start_point)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1740, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_2);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_lin_vec.rcbuffer->pybuffer);
    __pyx_t_1 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_lin_vec.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_1 < 0)) {
      PyErr_Fetch(&__pyx_t_9, &__pyx_t_8, &__pyx_t_7);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_lin_vec.rcbuffer->pybuffer, (PyObject*)__pyx_v_lin_vec, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_7);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_9, __pyx_t_8, __pyx_t_7);
      }
      __pyx_t_9 = __pyx_t_8 = __pyx_t_7 = 0;
    }
    __pyx_pybuffernd_lin_vec.diminfo[0].strides = __pyx_pybuffernd_lin_vec.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_lin_vec.diminfo[0].shape = __pyx_pybuffernd_lin_vec.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1740, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __Pyx_DECREF_SET(__pyx_v_lin_vec, ((PyArrayObject *)__pyx_t_2));
  __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1741
 * 
 *     lin_vec = end_point - start_point
 *     lin_length = np.linalg.norm(lin_vec)             # <<<<<<<<<<<<<<
 *     lin_inc = lin_vec / num_intervals
 *     inc_length = lin_length / num_intervals
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_linalg); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_norm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __pyx_t_17 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_2 = (__pyx_t_17) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_17, ((PyObject *)__pyx_v_lin_vec)) : __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_lin_vec));
  __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_18 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1741, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_lin_length = __pyx_t_18;

  /* "yt/utilities/lib/pixelization_routines.pyx":1742
 *     lin_vec = end_point - start_point
 *     lin_length = np.linalg.norm(lin_vec)
 *     lin_inc = lin_vec / num_intervals             # <<<<<<<<<<<<<<
 *     inc_length = lin_length / num_intervals
 *     for j in range(ndim):
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_num_intervals); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyNumber_Divide(((PyObject *)__pyx_v_lin_vec), __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1742, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_lin_inc.rcbuffer->pybuffer);
    __pyx_t_1 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_lin_inc.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_1 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_lin_inc.rcbuffer->pybuffer, (PyObject*)__pyx_v_lin_inc, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
      __pyx_t_7 = __pyx_t_8 = __pyx_t_9 = 0;
    }
    __pyx_pybuffernd_lin_inc.diminfo[0].strides = __pyx_pybuffernd_lin_inc.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_lin_inc.diminfo[0].shape = __pyx_pybuffernd_lin_inc.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1742, __pyx_L1_error)
  }
  __pyx_t_10 = 0;
  __Pyx_DECREF_SET(__pyx_v_lin_inc, ((PyArrayObject *)__pyx_t_5));
  __pyx_t_5 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1743
 *     lin_length = np.linalg.norm(lin_vec)
 *     lin_inc = lin_vec / num_intervals
 *     inc_length = lin_length / num_intervals             # <<<<<<<<<<<<<<
 *     for j in range(ndim):
 *         lin_sample_points[0, j] = start_point[j]
 */
  if (unlikely(__pyx_v_num_intervals == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1743, __pyx_L1_error)
  }
  __pyx_v_inc_length = (__pyx_v_lin_length / ((__pyx_t_5numpy_float64_t)__pyx_v_num_intervals));

  /* "yt/utilities/lib/pixelization_routines.pyx":1744
 *     lin_inc = lin_vec / num_intervals
 *     inc_length = lin_length / num_intervals
 *     for j in range(ndim):             # <<<<<<<<<<<<<<
 *         lin_sample_points[0, j] = start_point[j]
 *     arc_length[0] = 0
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_19 = __pyx_t_1;
  for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
    __pyx_v_j = __pyx_t_20;

    /* "yt/utilities/lib/pixelization_routines.pyx":1745
 *     inc_length = lin_length / num_intervals
 *     for j in range(ndim):
 *         lin_sample_points[0, j] = start_point[j]             # <<<<<<<<<<<<<<
 *     arc_length[0] = 0
 *     for i in range(1, num_intervals + 1):
 */
    __pyx_t_21 = __pyx_v_j;
    __pyx_t_22 = -1;
    if (__pyx_t_21 < 0) {
      __pyx_t_21 += __pyx_pybuffernd_start_point.diminfo[0].shape;
      if (unlikely(__pyx_t_21 < 0)) __pyx_t_22 = 0;
    } else if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_start_point.diminfo[0].shape)) __pyx_t_22 = 0;
    if (unlikely(__pyx_t_22 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_22);
      __PYX_ERR(0, 1745, __pyx_L1_error)
    }
    __pyx_t_23 = 0;
    __pyx_t_24 = __pyx_v_j;
    __pyx_t_22 = -1;
    if (__pyx_t_23 < 0) {
      __pyx_t_23 += __pyx_pybuffernd_lin_sample_points.diminfo[0].shape;
      if (unlikely(__pyx_t_23 < 0)) __pyx_t_22 = 0;
    } else if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_lin_sample_points.diminfo[0].shape)) __pyx_t_22 = 0;
    if (__pyx_t_24 < 0) {
      __pyx_t_24 += __pyx_pybuffernd_lin_sample_points.diminfo[1].shape;
      if (unlikely(__pyx_t_24 < 0)) __pyx_t_22 = 1;
    } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_lin_sample_points.diminfo[1].shape)) __pyx_t_22 = 1;
    if (unlikely(__pyx_t_22 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_22);
      __PYX_ERR(0, 1745, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_lin_sample_points.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_lin_sample_points.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_lin_sample_points.diminfo[1].strides) = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_start_point.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_start_point.diminfo[0].strides));
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1746
 *     for j in range(ndim):
 *         lin_sample_points[0, j] = start_point[j]
 *     arc_length[0] = 0             # <<<<<<<<<<<<<<
 *     for i in range(1, num_intervals + 1):
 *         for j in range(ndim):
 */
  __pyx_t_23 = 0;
  __pyx_t_1 = -1;
  if (__pyx_t_23 < 0) {
    __pyx_t_23 += __pyx_pybuffernd_arc_length.diminfo[0].shape;
    if (unlikely(__pyx_t_23 < 0)) __pyx_t_1 = 0;
  } else if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_arc_length.diminfo[0].shape)) __pyx_t_1 = 0;
  if (unlikely(__pyx_t_1 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_1);
    __PYX_ERR(0, 1746, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_arc_length.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_arc_length.diminfo[0].strides) = 0.0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1747
 *         lin_sample_points[0, j] = start_point[j]
 *     arc_length[0] = 0
 *     for i in range(1, num_intervals + 1):             # <<<<<<<<<<<<<<
 *         for j in range(ndim):
 *             lin_sample_points[i, j] = lin_sample_points[i-1, j] + lin_inc[j]
 */
  __pyx_t_25 = (__pyx_v_num_intervals + 1);
  __pyx_t_26 = __pyx_t_25;
  for (__pyx_t_20 = 1; __pyx_t_20 < __pyx_t_26; __pyx_t_20+=1) {
    __pyx_v_i = __pyx_t_20;

    /* "yt/utilities/lib/pixelization_routines.pyx":1748
 *     arc_length[0] = 0
 *     for i in range(1, num_intervals + 1):
 *         for j in range(ndim):             # <<<<<<<<<<<<<<
 *             lin_sample_points[i, j] = lin_sample_points[i-1, j] + lin_inc[j]
 *             arc_length[i] = arc_length[i-1] + inc_length
 */
    __pyx_t_1 = __pyx_v_ndim;
    __pyx_t_19 = __pyx_t_1;
    for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_19; __pyx_t_21+=1) {
      __pyx_v_j = __pyx_t_21;

      /* "yt/utilities/lib/pixelization_routines.pyx":1749
 *     for i in range(1, num_intervals + 1):
 *         for j in range(ndim):
 *             lin_sample_points[i, j] = lin_sample_points[i-1, j] + lin_inc[j]             # <<<<<<<<<<<<<<
 *             arc_length[i] = arc_length[i-1] + inc_length
 * 
 */
      __pyx_t_24 = (__pyx_v_i - 1);
      __pyx_t_27 = __pyx_v_j;
      __pyx_t_22 = -1;
      if (__pyx_t_24 < 0) {
        __pyx_t_24 += __pyx_pybuffernd_lin_sample_points.diminfo[0].shape;
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_22 = 0;
      } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_lin_sample_points.diminfo[0].shape)) __pyx_t_22 = 0;
      if (__pyx_t_27 < 0) {
        __pyx_t_27 += __pyx_pybuffernd_lin_sample_points.diminfo[1].shape;
        if (unlikely(__pyx_t_27 < 0)) __pyx_t_22 = 1;
      } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_lin_sample_points.diminfo[1].shape)) __pyx_t_22 = 1;
      if (unlikely(__pyx_t_22 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_22);
        __PYX_ERR(0, 1749, __pyx_L1_error)
      }
      __pyx_t_28 = __pyx_v_j;
      __pyx_t_22 = -1;
      if (__pyx_t_28 < 0) {
        __pyx_t_28 += __pyx_pybuffernd_lin_inc.diminfo[0].shape;
        if (unlikely(__pyx_t_28 < 0)) __pyx_t_22 = 0;
      } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_lin_inc.diminfo[0].shape)) __pyx_t_22 = 0;
      if (unlikely(__pyx_t_22 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_22);
        __PYX_ERR(0, 1749, __pyx_L1_error)
      }
      __pyx_t_29 = __pyx_v_i;
      __pyx_t_30 = __pyx_v_j;
      __pyx_t_22 = -1;
      if (__pyx_t_29 < 0) {
        __pyx_t_29 += __pyx_pybuffernd_lin_sample_points.diminfo[0].shape;
        if (unlikely(__pyx_t_29 < 0)) __pyx_t_22 = 0;
      } else if (unlikely(__pyx_t_29 >= __pyx_pybuffernd_lin_sample_points.diminfo[0].shape)) __pyx_t_22 = 0;
      if (__pyx_t_30 < 0) {
        __pyx_t_30 += __pyx_pybuffernd_lin_sample_points.diminfo[1].shape;
        if (unlikely(__pyx_t_30 < 0)) __pyx_t_22 = 1;
      } else if (unlikely(__pyx_t_30 >= __pyx_pybuffernd_lin_sample_points.diminfo[1].shape)) __pyx_t_22 = 1;
      if (unlikely(__pyx_t_22 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_22);
        __PYX_ERR(0, 1749, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_lin_sample_points.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_lin_sample_points.diminfo[0].strides, __pyx_t_30, __pyx_pybuffernd_lin_sample_points.diminfo[1].strides) = ((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_lin_sample_points.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_lin_sample_points.diminfo[0].strides, __pyx_t_27, __pyx_pybuffernd_lin_sample_points.diminfo[1].strides)) + (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_lin_inc.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_lin_inc.diminfo[0].strides)));

      /* "yt/utilities/lib/pixelization_routines.pyx":1750
 *         for j in range(ndim):
 *             lin_sample_points[i, j] = lin_sample_points[i-1, j] + lin_inc[j]
 *             arc_length[i] = arc_length[i-1] + inc_length             # <<<<<<<<<<<<<<
 * 
 *     for i in range(num_intervals + 1):
 */
      __pyx_t_28 = (__pyx_v_i - 1);
      __pyx_t_22 = -1;
      if (__pyx_t_28 < 0) {
        __pyx_t_28 += __pyx_pybuffernd_arc_length.diminfo[0].shape;
        if (unlikely(__pyx_t_28 < 0)) __pyx_t_22 = 0;
      } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_arc_length.diminfo[0].shape)) __pyx_t_22 = 0;
      if (unlikely(__pyx_t_22 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_22);
        __PYX_ERR(0, 1750, __pyx_L1_error)
      }
      __pyx_t_27 = __pyx_v_i;
      __pyx_t_22 = -1;
      if (__pyx_t_27 < 0) {
        __pyx_t_27 += __pyx_pybuffernd_arc_length.diminfo[0].shape;
        if (unlikely(__pyx_t_27 < 0)) __pyx_t_22 = 0;
      } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_arc_length.diminfo[0].shape)) __pyx_t_22 = 0;
      if (unlikely(__pyx_t_22 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_22);
        __PYX_ERR(0, 1750, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_arc_length.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_arc_length.diminfo[0].strides) = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_arc_length.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_arc_length.diminfo[0].strides)) + __pyx_v_inc_length);
    }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1752
 *             arc_length[i] = arc_length[i-1] + inc_length
 * 
 *     for i in range(num_intervals + 1):             # <<<<<<<<<<<<<<
 *         for j in range(3):
 *             if j < ndim:
 */
  __pyx_t_25 = (__pyx_v_num_intervals + 1);
  __pyx_t_26 = __pyx_t_25;
  for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_26; __pyx_t_20+=1) {
    __pyx_v_i = __pyx_t_20;

    /* "yt/utilities/lib/pixelization_routines.pyx":1753
 * 
 *     for i in range(num_intervals + 1):
 *         for j in range(3):             # <<<<<<<<<<<<<<
 *             if j < ndim:
 *                 sample_point[j] = lin_sample_points[i][j]
 */
    for (__pyx_t_21 = 0; __pyx_t_21 < 3; __pyx_t_21+=1) {
      __pyx_v_j = __pyx_t_21;

      /* "yt/utilities/lib/pixelization_routines.pyx":1754
 *     for i in range(num_intervals + 1):
 *         for j in range(3):
 *             if j < ndim:             # <<<<<<<<<<<<<<
 *                 sample_point[j] = lin_sample_points[i][j]
 *             else:
 */
      __pyx_t_14 = ((__pyx_v_j < __pyx_v_ndim) != 0);
      if (__pyx_t_14) {

        /* "yt/utilities/lib/pixelization_routines.pyx":1755
 *         for j in range(3):
 *             if j < ndim:
 *                 sample_point[j] = lin_sample_points[i][j]             # <<<<<<<<<<<<<<
 *             else:
 *                 sample_point[j] = 0
 */
        __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_lin_sample_points), __pyx_v_i, __pyx_t_5numpy_int64_t, 1, __Pyx_PyInt_From_npy_int64, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1755, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_5, __pyx_v_j, __pyx_t_5numpy_int64_t, 1, __Pyx_PyInt_From_npy_int64, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1755, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_18 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1755, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        (__pyx_v_sample_point[__pyx_v_j]) = __pyx_t_18;

        /* "yt/utilities/lib/pixelization_routines.pyx":1754
 *     for i in range(num_intervals + 1):
 *         for j in range(3):
 *             if j < ndim:             # <<<<<<<<<<<<<<
 *                 sample_point[j] = lin_sample_points[i][j]
 *             else:
 */
        goto __pyx_L34;
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":1757
 *                 sample_point[j] = lin_sample_points[i][j]
 *             else:
 *                 sample_point[j] = 0             # <<<<<<<<<<<<<<
 *         for ci in range(conn.shape[0]):
 *             for n in range(num_field_vals):
 */
      /*else*/ {
        (__pyx_v_sample_point[__pyx_v_j]) = 0.0;
      }
      __pyx_L34:;
    }

    /* "yt/utilities/lib/pixelization_routines.pyx":1758
 *             else:
 *                 sample_point[j] = 0
 *         for ci in range(conn.shape[0]):             # <<<<<<<<<<<<<<
 *             for n in range(num_field_vals):
 *                 field_vals[n] = field[ci, n]
 */
    __pyx_t_31 = (__pyx_v_conn->dimensions[0]);
    __pyx_t_32 = __pyx_t_31;
    for (__pyx_t_33 = 0; __pyx_t_33 < __pyx_t_32; __pyx_t_33+=1) {
      __pyx_v_ci = __pyx_t_33;

      /* "yt/utilities/lib/pixelization_routines.pyx":1759
 *                 sample_point[j] = 0
 *         for ci in range(conn.shape[0]):
 *             for n in range(num_field_vals):             # <<<<<<<<<<<<<<
 *                 field_vals[n] = field[ci, n]
 * 
 */
      __pyx_t_1 = __pyx_v_num_field_vals;
      __pyx_t_19 = __pyx_t_1;
      for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_19; __pyx_t_21+=1) {
        __pyx_v_n = __pyx_t_21;

        /* "yt/utilities/lib/pixelization_routines.pyx":1760
 *         for ci in range(conn.shape[0]):
 *             for n in range(num_field_vals):
 *                 field_vals[n] = field[ci, n]             # <<<<<<<<<<<<<<
 * 
 *             # Fill the vertices
 */
        __pyx_t_23 = __pyx_v_ci;
        __pyx_t_28 = __pyx_v_n;
        __pyx_t_22 = -1;
        if (__pyx_t_23 < 0) {
          __pyx_t_23 += __pyx_pybuffernd_field.diminfo[0].shape;
          if (unlikely(__pyx_t_23 < 0)) __pyx_t_22 = 0;
        } else if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_field.diminfo[0].shape)) __pyx_t_22 = 0;
        if (__pyx_t_28 < 0) {
          __pyx_t_28 += __pyx_pybuffernd_field.diminfo[1].shape;
          if (unlikely(__pyx_t_28 < 0)) __pyx_t_22 = 1;
        } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_field.diminfo[1].shape)) __pyx_t_22 = 1;
        if (unlikely(__pyx_t_22 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_22);
          __PYX_ERR(0, 1760, __pyx_L1_error)
        }
        (__pyx_v_field_vals[__pyx_v_n]) = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_field.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_field.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_field.diminfo[1].strides));
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":1763
 * 
 *             # Fill the vertices
 *             for n in range(nvertices):             # <<<<<<<<<<<<<<
 *                 cj = conn[ci, n] - index_offset
 *                 for k in range(ndim):
 */
      __pyx_t_1 = __pyx_v_nvertices;
      __pyx_t_19 = __pyx_t_1;
      for (__pyx_t_21 = 0; __pyx_t_21 < __pyx_t_19; __pyx_t_21+=1) {
        __pyx_v_n = __pyx_t_21;

        /* "yt/utilities/lib/pixelization_routines.pyx":1764
 *             # Fill the vertices
 *             for n in range(nvertices):
 *                 cj = conn[ci, n] - index_offset             # <<<<<<<<<<<<<<
 *                 for k in range(ndim):
 *                     vertices[ndim*n + k] = coords[cj, k]
 */
        __pyx_t_23 = __pyx_v_ci;
        __pyx_t_28 = __pyx_v_n;
        __pyx_t_22 = -1;
        if (__pyx_t_23 < 0) {
          __pyx_t_23 += __pyx_pybuffernd_conn.diminfo[0].shape;
          if (unlikely(__pyx_t_23 < 0)) __pyx_t_22 = 0;
        } else if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_conn.diminfo[0].shape)) __pyx_t_22 = 0;
        if (__pyx_t_28 < 0) {
          __pyx_t_28 += __pyx_pybuffernd_conn.diminfo[1].shape;
          if (unlikely(__pyx_t_28 < 0)) __pyx_t_22 = 1;
        } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_conn.diminfo[1].shape)) __pyx_t_22 = 1;
        if (unlikely(__pyx_t_22 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_22);
          __PYX_ERR(0, 1764, __pyx_L1_error)
        }
        __pyx_t_2 = __Pyx_PyInt_From_npy_int64(((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int64_t *, __pyx_pybuffernd_conn.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_conn.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_conn.diminfo[1].strides)) - __pyx_v_index_offset)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1764, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_XDECREF_SET(__pyx_v_cj, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "yt/utilities/lib/pixelization_routines.pyx":1765
 *             for n in range(nvertices):
 *                 cj = conn[ci, n] - index_offset
 *                 for k in range(ndim):             # <<<<<<<<<<<<<<
 *                     vertices[ndim*n + k] = coords[cj, k]
 * 
 */
        __pyx_t_22 = __pyx_v_ndim;
        __pyx_t_34 = __pyx_t_22;
        for (__pyx_t_28 = 0; __pyx_t_28 < __pyx_t_34; __pyx_t_28+=1) {
          __pyx_v_k = __pyx_t_28;

          /* "yt/utilities/lib/pixelization_routines.pyx":1766
 *                 cj = conn[ci, n] - index_offset
 *                 for k in range(ndim):
 *                     vertices[ndim*n + k] = coords[cj, k]             # <<<<<<<<<<<<<<
 * 
 *             sampler.map_real_to_unit(mapped_coord, vertices, sample_point)
 */
          __pyx_t_2 = __Pyx_PyInt_From_npy_int64(__pyx_v_k); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1766, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1766, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_INCREF(__pyx_v_cj);
          __Pyx_GIVEREF(__pyx_v_cj);
          PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_cj);
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
          __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_coords), __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1766, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_18 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1766, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          (__pyx_v_vertices[((__pyx_v_ndim * __pyx_v_n) + __pyx_v_k)]) = __pyx_t_18;
        }
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":1768
 *                     vertices[ndim*n + k] = coords[cj, k]
 * 
 *             sampler.map_real_to_unit(mapped_coord, vertices, sample_point)             # <<<<<<<<<<<<<<
 *             if not sampler.check_inside(mapped_coord) and ci != conn.shape[0] - 1:
 *                 continue
 */
      ((struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_v_sampler->__pyx_vtab)->map_real_to_unit(__pyx_v_sampler, __pyx_v_mapped_coord, __pyx_v_vertices, __pyx_v_sample_point);

      /* "yt/utilities/lib/pixelization_routines.pyx":1769
 * 
 *             sampler.map_real_to_unit(mapped_coord, vertices, sample_point)
 *             if not sampler.check_inside(mapped_coord) and ci != conn.shape[0] - 1:             # <<<<<<<<<<<<<<
 *                 continue
 *             elif not sampler.check_inside(mapped_coord):
 */
      __pyx_t_15 = ((!(((struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_v_sampler->__pyx_vtab)->check_inside(__pyx_v_sampler, __pyx_v_mapped_coord) != 0)) != 0);
      if (__pyx_t_15) {
      } else {
        __pyx_t_14 = __pyx_t_15;
        goto __pyx_L44_bool_binop_done;
      }
      __pyx_t_15 = ((__pyx_v_ci != ((__pyx_v_conn->dimensions[0]) - 1)) != 0);
      __pyx_t_14 = __pyx_t_15;
      __pyx_L44_bool_binop_done:;
      if (__pyx_t_14) {

        /* "yt/utilities/lib/pixelization_routines.pyx":1770
 *             sampler.map_real_to_unit(mapped_coord, vertices, sample_point)
 *             if not sampler.check_inside(mapped_coord) and ci != conn.shape[0] - 1:
 *                 continue             # <<<<<<<<<<<<<<
 *             elif not sampler.check_inside(mapped_coord):
 *                 raise ValueError("Check to see that both starting and ending line points "
 */
        goto __pyx_L35_continue;

        /* "yt/utilities/lib/pixelization_routines.pyx":1769
 * 
 *             sampler.map_real_to_unit(mapped_coord, vertices, sample_point)
 *             if not sampler.check_inside(mapped_coord) and ci != conn.shape[0] - 1:             # <<<<<<<<<<<<<<
 *                 continue
 *             elif not sampler.check_inside(mapped_coord):
 */
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":1771
 *             if not sampler.check_inside(mapped_coord) and ci != conn.shape[0] - 1:
 *                 continue
 *             elif not sampler.check_inside(mapped_coord):             # <<<<<<<<<<<<<<
 *                 raise ValueError("Check to see that both starting and ending line points "
 *                                  "are within the domain of the mesh.")
 */
      __pyx_t_14 = ((!(((struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_v_sampler->__pyx_vtab)->check_inside(__pyx_v_sampler, __pyx_v_mapped_coord) != 0)) != 0);
      if (unlikely(__pyx_t_14)) {

        /* "yt/utilities/lib/pixelization_routines.pyx":1772
 *                 continue
 *             elif not sampler.check_inside(mapped_coord):
 *                 raise ValueError("Check to see that both starting and ending line points "             # <<<<<<<<<<<<<<
 *                                  "are within the domain of the mesh.")
 *             plot_values[i] = sampler.sample_at_unit_point(mapped_coord, field_vals)
 */
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1772, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __PYX_ERR(0, 1772, __pyx_L1_error)

        /* "yt/utilities/lib/pixelization_routines.pyx":1771
 *             if not sampler.check_inside(mapped_coord) and ci != conn.shape[0] - 1:
 *                 continue
 *             elif not sampler.check_inside(mapped_coord):             # <<<<<<<<<<<<<<
 *                 raise ValueError("Check to see that both starting and ending line points "
 *                                  "are within the domain of the mesh.")
 */
      }

      /* "yt/utilities/lib/pixelization_routines.pyx":1774
 *                 raise ValueError("Check to see that both starting and ending line points "
 *                                  "are within the domain of the mesh.")
 *             plot_values[i] = sampler.sample_at_unit_point(mapped_coord, field_vals)             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_t_21 = __pyx_v_i;
      __pyx_t_1 = -1;
      if (__pyx_t_21 < 0) {
        __pyx_t_21 += __pyx_pybuffernd_plot_values.diminfo[0].shape;
        if (unlikely(__pyx_t_21 < 0)) __pyx_t_1 = 0;
      } else if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_plot_values.diminfo[0].shape)) __pyx_t_1 = 0;
      if (unlikely(__pyx_t_1 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_1);
        __PYX_ERR(0, 1774, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float64_t *, __pyx_pybuffernd_plot_values.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_plot_values.diminfo[0].strides) = ((struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler *)__pyx_v_sampler->__pyx_vtab)->sample_at_unit_point(__pyx_v_sampler, __pyx_v_mapped_coord, __pyx_v_field_vals);

      /* "yt/utilities/lib/pixelization_routines.pyx":1775
 *                                  "are within the domain of the mesh.")
 *             plot_values[i] = sampler.sample_at_unit_point(mapped_coord, field_vals)
 *             break             # <<<<<<<<<<<<<<
 * 
 *     free(vertices)
 */
      goto __pyx_L36_break;
      __pyx_L35_continue:;
    }
    __pyx_L36_break:;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1777
 *             break
 * 
 *     free(vertices)             # <<<<<<<<<<<<<<
 *     free(field_vals)
 *     return arc_length, plot_values
 */
  free(__pyx_v_vertices);

  /* "yt/utilities/lib/pixelization_routines.pyx":1778
 * 
 *     free(vertices)
 *     free(field_vals)             # <<<<<<<<<<<<<<
 *     return arc_length, plot_values
 * 
 */
  free(__pyx_v_field_vals);

  /* "yt/utilities/lib/pixelization_routines.pyx":1779
 *     free(vertices)
 *     free(field_vals)
 *     return arc_length, plot_values             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_arc_length));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_arc_length));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_arc_length));
  __Pyx_INCREF(((PyObject *)__pyx_v_plot_values));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_plot_values));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_plot_values));
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1677
 * 
 * 
 * def pixelize_element_mesh_line(np.ndarray[np.float64_t, ndim=2] coords,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.int64_t, ndim=2] conn,
 *                                np.ndarray[np.float64_t, ndim=1] start_point,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arc_length.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_conn.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coords.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_end_point.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_field.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_lin_inc.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_lin_sample_points.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_lin_vec.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_plot_values.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_start_point.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.pixelize_element_mesh_line", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arc_length.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_conn.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_coords.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_end_point.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_field.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_lin_inc.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_lin_sample_points.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_lin_vec.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_plot_values.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_start_point.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_sampler);
  __Pyx_XDECREF((PyObject *)__pyx_v_lin_vec);
  __Pyx_XDECREF((PyObject *)__pyx_v_lin_inc);
  __Pyx_XDECREF((PyObject *)__pyx_v_lin_sample_points);
  __Pyx_XDECREF((PyObject *)__pyx_v_arc_length);
  __Pyx_XDECREF((PyObject *)__pyx_v_plot_values);
  __Pyx_XDECREF(__pyx_v_cj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1784
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def rotate_particle_coord(np.float64_t[:] px,             # <<<<<<<<<<<<<<
 *                           np.float64_t[:] py,
 *                           np.float64_t[:] pz,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_25rotate_particle_coord(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_25rotate_particle_coord = {"rotate_particle_coord", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_25rotate_particle_coord, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_25rotate_particle_coord(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_px = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_py = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pz = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_center = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_normal_vector = 0;
  PyObject *__pyx_v_north_vector = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate_particle_coord (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pz,&__pyx_n_s_center,&__pyx_n_s_width,&__pyx_n_s_normal_vector,&__pyx_n_s_north_vector,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate_particle_coord", 1, 7, 7, 1); __PYX_ERR(0, 1784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate_particle_coord", 1, 7, 7, 2); __PYX_ERR(0, 1784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_center)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate_particle_coord", 1, 7, 7, 3); __PYX_ERR(0, 1784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate_particle_coord", 1, 7, 7, 4); __PYX_ERR(0, 1784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normal_vector)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate_particle_coord", 1, 7, 7, 5); __PYX_ERR(0, 1784, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_north_vector)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("rotate_particle_coord", 1, 7, 7, 6); __PYX_ERR(0, 1784, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "rotate_particle_coord") < 0)) __PYX_ERR(0, 1784, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_px = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_px.memview)) __PYX_ERR(0, 1784, __pyx_L3_error)
    __pyx_v_py = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_py.memview)) __PYX_ERR(0, 1785, __pyx_L3_error)
    __pyx_v_pz = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pz.memview)) __PYX_ERR(0, 1786, __pyx_L3_error)
    __pyx_v_center = values[3];
    __pyx_v_width = values[4];
    __pyx_v_normal_vector = values[5];
    __pyx_v_north_vector = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rotate_particle_coord", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1784, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.rotate_particle_coord", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_24rotate_particle_coord(__pyx_self, __pyx_v_px, __pyx_v_py, __pyx_v_pz, __pyx_v_center, __pyx_v_width, __pyx_v_normal_vector, __pyx_v_north_vector);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_24rotate_particle_coord(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_px, __Pyx_memviewslice __pyx_v_py, __Pyx_memviewslice __pyx_v_pz, PyObject *__pyx_v_center, PyObject *__pyx_v_width, PyObject *__pyx_v_normal_vector, PyObject *__pyx_v_north_vector) {
  int __pyx_v_num_particles;
  __Pyx_memviewslice __pyx_v_z_axis = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_y_axis = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_normal_rotation_matrix = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_transformed_north_vector = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_north_rotation_matrix = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rotation_matrix = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_px_rotated = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_py_rotated = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_coordinate_matrix = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rotated_coordinates = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_rotated_center = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_float64_t __pyx_v_rot_bounds_x0;
  __pyx_t_5numpy_float64_t __pyx_v_rot_bounds_x1;
  __pyx_t_5numpy_float64_t __pyx_v_rot_bounds_y0;
  __pyx_t_5numpy_float64_t __pyx_v_rot_bounds_y1;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_memviewslice __pyx_t_10 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_11;
  __pyx_t_5numpy_float64_t __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotate_particle_coord", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1795
 *     # another rotation to make the north-vector be the y-axis (i.e., north).
 *     # Fortunately, total_rotation_matrix = rotation_matrix_1 x rotation_matrix_2
 *     cdef int num_particles = np.size(px)             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:] z_axis = np.array([0., 0., 1.], dtype='float_')
 *     cdef np.float64_t[:] y_axis = np.array([0., 1., 0.], dtype='float_')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_px, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_num_particles = __pyx_t_5;

  /* "yt/utilities/lib/pixelization_routines.pyx":1796
 *     # Fortunately, total_rotation_matrix = rotation_matrix_1 x rotation_matrix_2
 *     cdef int num_particles = np.size(px)
 *     cdef np.float64_t[:] z_axis = np.array([0., 0., 1.], dtype='float_')             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:] y_axis = np.array([0., 1., 0.], dtype='float_')
 *     cdef np.float64_t[:, :] normal_rotation_matrix
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_float_0_);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_float_0_);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_float_1_);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_n_u_float) < 0) __PYX_ERR(0, 1796, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_4, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_z_axis = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1797
 *     cdef int num_particles = np.size(px)
 *     cdef np.float64_t[:] z_axis = np.array([0., 0., 1.], dtype='float_')
 *     cdef np.float64_t[:] y_axis = np.array([0., 1., 0.], dtype='float_')             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:, :] normal_rotation_matrix
 *     cdef np.float64_t[:] transformed_north_vector
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_0_);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_1_);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_n_u_float) < 0) __PYX_ERR(0, 1797, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1797, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_y_axis = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1803
 *     cdef np.float64_t[:, :] rotation_matrix
 * 
 *     normal_rotation_matrix = get_rotation_matrix(normal_vector, z_axis)             # <<<<<<<<<<<<<<
 *     transformed_north_vector = np.matmul(normal_rotation_matrix, north_vector)
 *     north_rotation_matrix = get_rotation_matrix(transformed_north_vector, y_axis)
 */
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_v_normal_vector, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __pyx_t_7 = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_get_rotation_matrix(__pyx_t_6, __pyx_v_z_axis, 0); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;
  __pyx_v_normal_rotation_matrix = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1804
 * 
 *     normal_rotation_matrix = get_rotation_matrix(normal_vector, z_axis)
 *     transformed_north_vector = np.matmul(normal_rotation_matrix, north_vector)             # <<<<<<<<<<<<<<
 *     north_rotation_matrix = get_rotation_matrix(transformed_north_vector, y_axis)
 *     rotation_matrix = np.matmul(north_rotation_matrix, normal_rotation_matrix)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_matmul); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_normal_rotation_matrix, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_4, __pyx_v_north_vector};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1804, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_4, __pyx_v_north_vector};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1804, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_north_vector);
    __Pyx_GIVEREF(__pyx_v_north_vector);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_5, __pyx_v_north_vector);
    __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1804, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_transformed_north_vector = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1805
 *     normal_rotation_matrix = get_rotation_matrix(normal_vector, z_axis)
 *     transformed_north_vector = np.matmul(normal_rotation_matrix, north_vector)
 *     north_rotation_matrix = get_rotation_matrix(transformed_north_vector, y_axis)             # <<<<<<<<<<<<<<
 *     rotation_matrix = np.matmul(north_rotation_matrix, normal_rotation_matrix)
 * 
 */
  __pyx_t_7 = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_get_rotation_matrix(__pyx_v_transformed_north_vector, __pyx_v_y_axis, 0); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1805, __pyx_L1_error)
  __pyx_v_north_rotation_matrix = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1806
 *     transformed_north_vector = np.matmul(normal_rotation_matrix, north_vector)
 *     north_rotation_matrix = get_rotation_matrix(transformed_north_vector, y_axis)
 *     rotation_matrix = np.matmul(north_rotation_matrix, normal_rotation_matrix)             # <<<<<<<<<<<<<<
 * 
 *     cdef np.float64_t[:] px_rotated = np.empty(num_particles, dtype='float_')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_matmul); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_north_rotation_matrix, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_normal_rotation_matrix, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_2, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1806, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_1, __pyx_t_2, __pyx_t_4};
    __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1806, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_1) {
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1); __pyx_t_1 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_5, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_5, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_rotation_matrix = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1808
 *     rotation_matrix = np.matmul(north_rotation_matrix, normal_rotation_matrix)
 * 
 *     cdef np.float64_t[:] px_rotated = np.empty(num_particles, dtype='float_')             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:] py_rotated = np.empty(num_particles, dtype='float_')
 *     cdef np.float64_t[:] coordinate_matrix = np.empty(3, dtype='float_')
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_num_particles); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_float) < 0) __PYX_ERR(0, 1808, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_4, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_px_rotated = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1809
 * 
 *     cdef np.float64_t[:] px_rotated = np.empty(num_particles, dtype='float_')
 *     cdef np.float64_t[:] py_rotated = np.empty(num_particles, dtype='float_')             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:] coordinate_matrix = np.empty(3, dtype='float_')
 *     cdef np.float64_t[:] rotated_coordinates
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_num_particles); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_n_u_float) < 0) __PYX_ERR(0, 1809, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_8, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1809, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_py_rotated = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1810
 *     cdef np.float64_t[:] px_rotated = np.empty(num_particles, dtype='float_')
 *     cdef np.float64_t[:] py_rotated = np.empty(num_particles, dtype='float_')
 *     cdef np.float64_t[:] coordinate_matrix = np.empty(3, dtype='float_')             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:] rotated_coordinates
 *     cdef np.float64_t[:] rotated_center
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_n_u_float) < 0) __PYX_ERR(0, 1810, __pyx_L1_error)
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__9, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_9, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1810, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_coordinate_matrix = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1814
 *     cdef np.float64_t[:] rotated_center
 *     rotated_center = rotation_matmul(
 *         rotation_matrix, np.array([center[0], center[1], center[2]]))             # <<<<<<<<<<<<<<
 * 
 *     # set up the rotated bounds
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_center, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_center, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_center, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __pyx_t_8 = 0;
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_9 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_9, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1814, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1813
 *     cdef np.float64_t[:] rotated_coordinates
 *     cdef np.float64_t[:] rotated_center
 *     rotated_center = rotation_matmul(             # <<<<<<<<<<<<<<
 *         rotation_matrix, np.array([center[0], center[1], center[2]]))
 * 
 */
  __pyx_t_10 = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_rotation_matmul(__pyx_v_rotation_matrix, __pyx_t_6); if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(0, 1813, __pyx_L1_error)
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;
  __pyx_v_rotated_center = __pyx_t_10;
  __pyx_t_10.memview = NULL;
  __pyx_t_10.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1817
 * 
 *     # set up the rotated bounds
 *     cdef np.float64_t rot_bounds_x0 = rotated_center[0] - width[0] / 2             # <<<<<<<<<<<<<<
 *     cdef np.float64_t rot_bounds_x1 = rotated_center[0] + width[0] / 2
 *     cdef np.float64_t rot_bounds_y0 = rotated_center[1] - width[1] / 2
 */
  __pyx_t_11 = 0;
  __pyx_t_9 = PyFloat_FromDouble((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_rotated_center.data + __pyx_t_11 * __pyx_v_rotated_center.strides[0]) )))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_width, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_4, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_9, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1817, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_12 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1817, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_rot_bounds_x0 = __pyx_t_12;

  /* "yt/utilities/lib/pixelization_routines.pyx":1818
 *     # set up the rotated bounds
 *     cdef np.float64_t rot_bounds_x0 = rotated_center[0] - width[0] / 2
 *     cdef np.float64_t rot_bounds_x1 = rotated_center[0] + width[0] / 2             # <<<<<<<<<<<<<<
 *     cdef np.float64_t rot_bounds_y0 = rotated_center[1] - width[1] / 2
 *     cdef np.float64_t rot_bounds_y1 = rotated_center[1] + width[1] / 2
 */
  __pyx_t_11 = 0;
  __pyx_t_4 = PyFloat_FromDouble((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_rotated_center.data + __pyx_t_11 * __pyx_v_rotated_center.strides[0]) )))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_width, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_1, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_12 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1818, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_rot_bounds_x1 = __pyx_t_12;

  /* "yt/utilities/lib/pixelization_routines.pyx":1819
 *     cdef np.float64_t rot_bounds_x0 = rotated_center[0] - width[0] / 2
 *     cdef np.float64_t rot_bounds_x1 = rotated_center[0] + width[0] / 2
 *     cdef np.float64_t rot_bounds_y0 = rotated_center[1] - width[1] / 2             # <<<<<<<<<<<<<<
 *     cdef np.float64_t rot_bounds_y1 = rotated_center[1] + width[1] / 2
 * 
 */
  __pyx_t_11 = 1;
  __pyx_t_1 = PyFloat_FromDouble((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_rotated_center.data + __pyx_t_11 * __pyx_v_rotated_center.strides[0]) )))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_width, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_4 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_9, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyNumber_Subtract(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_9); if (unlikely((__pyx_t_12 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_v_rot_bounds_y0 = __pyx_t_12;

  /* "yt/utilities/lib/pixelization_routines.pyx":1820
 *     cdef np.float64_t rot_bounds_x1 = rotated_center[0] + width[0] / 2
 *     cdef np.float64_t rot_bounds_y0 = rotated_center[1] - width[1] / 2
 *     cdef np.float64_t rot_bounds_y1 = rotated_center[1] + width[1] / 2             # <<<<<<<<<<<<<<
 * 
 *     for i in range(num_particles):
 */
  __pyx_t_11 = 1;
  __pyx_t_9 = PyFloat_FromDouble((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_rotated_center.data + __pyx_t_11 * __pyx_v_rotated_center.strides[0]) )))); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_width, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_4, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_t_9, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_12 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_rot_bounds_y1 = __pyx_t_12;

  /* "yt/utilities/lib/pixelization_routines.pyx":1822
 *     cdef np.float64_t rot_bounds_y1 = rotated_center[1] + width[1] / 2
 * 
 *     for i in range(num_particles):             # <<<<<<<<<<<<<<
 *         coordinate_matrix[0] = px[i]
 *         coordinate_matrix[1] = py[i]
 */
  __pyx_t_5 = __pyx_v_num_particles;
  __pyx_t_13 = __pyx_t_5;
  for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
    __pyx_v_i = __pyx_t_14;

    /* "yt/utilities/lib/pixelization_routines.pyx":1823
 * 
 *     for i in range(num_particles):
 *         coordinate_matrix[0] = px[i]             # <<<<<<<<<<<<<<
 *         coordinate_matrix[1] = py[i]
 *         coordinate_matrix[2] = pz[i]
 */
    __pyx_t_11 = __pyx_v_i;
    __pyx_t_15 = 0;
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_coordinate_matrix.data + __pyx_t_15 * __pyx_v_coordinate_matrix.strides[0]) )) = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_px.data + __pyx_t_11 * __pyx_v_px.strides[0]) )));

    /* "yt/utilities/lib/pixelization_routines.pyx":1824
 *     for i in range(num_particles):
 *         coordinate_matrix[0] = px[i]
 *         coordinate_matrix[1] = py[i]             # <<<<<<<<<<<<<<
 *         coordinate_matrix[2] = pz[i]
 *         rotated_coordinates = rotation_matmul(
 */
    __pyx_t_11 = __pyx_v_i;
    __pyx_t_15 = 1;
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_coordinate_matrix.data + __pyx_t_15 * __pyx_v_coordinate_matrix.strides[0]) )) = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_py.data + __pyx_t_11 * __pyx_v_py.strides[0]) )));

    /* "yt/utilities/lib/pixelization_routines.pyx":1825
 *         coordinate_matrix[0] = px[i]
 *         coordinate_matrix[1] = py[i]
 *         coordinate_matrix[2] = pz[i]             # <<<<<<<<<<<<<<
 *         rotated_coordinates = rotation_matmul(
 *             rotation_matrix, coordinate_matrix)
 */
    __pyx_t_11 = __pyx_v_i;
    __pyx_t_15 = 2;
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_coordinate_matrix.data + __pyx_t_15 * __pyx_v_coordinate_matrix.strides[0]) )) = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_pz.data + __pyx_t_11 * __pyx_v_pz.strides[0]) )));

    /* "yt/utilities/lib/pixelization_routines.pyx":1826
 *         coordinate_matrix[1] = py[i]
 *         coordinate_matrix[2] = pz[i]
 *         rotated_coordinates = rotation_matmul(             # <<<<<<<<<<<<<<
 *             rotation_matrix, coordinate_matrix)
 *         px_rotated[i] = rotated_coordinates[0]
 */
    __pyx_t_10 = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_rotation_matmul(__pyx_v_rotation_matrix, __pyx_v_coordinate_matrix); if (unlikely(!__pyx_t_10.memview)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __PYX_XDEC_MEMVIEW(&__pyx_v_rotated_coordinates, 1);
    __pyx_v_rotated_coordinates = __pyx_t_10;
    __pyx_t_10.memview = NULL;
    __pyx_t_10.data = NULL;

    /* "yt/utilities/lib/pixelization_routines.pyx":1828
 *         rotated_coordinates = rotation_matmul(
 *             rotation_matrix, coordinate_matrix)
 *         px_rotated[i] = rotated_coordinates[0]             # <<<<<<<<<<<<<<
 *         py_rotated[i] = rotated_coordinates[1]
 * 
 */
    __pyx_t_11 = 0;
    __pyx_t_15 = __pyx_v_i;
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_px_rotated.data + __pyx_t_15 * __pyx_v_px_rotated.strides[0]) )) = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_rotated_coordinates.data + __pyx_t_11 * __pyx_v_rotated_coordinates.strides[0]) )));

    /* "yt/utilities/lib/pixelization_routines.pyx":1829
 *             rotation_matrix, coordinate_matrix)
 *         px_rotated[i] = rotated_coordinates[0]
 *         py_rotated[i] = rotated_coordinates[1]             # <<<<<<<<<<<<<<
 * 
 *     return px_rotated, py_rotated, rot_bounds_x0, rot_bounds_x1, rot_bounds_y0, rot_bounds_y1
 */
    __pyx_t_11 = 1;
    __pyx_t_15 = __pyx_v_i;
    *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_py_rotated.data + __pyx_t_15 * __pyx_v_py_rotated.strides[0]) )) = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_rotated_coordinates.data + __pyx_t_11 * __pyx_v_rotated_coordinates.strides[0]) )));
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1831
 *         py_rotated[i] = rotated_coordinates[1]
 * 
 *     return px_rotated, py_rotated, rot_bounds_x0, rot_bounds_x1, rot_bounds_y0, rot_bounds_y1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_px_rotated, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_py_rotated, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = PyFloat_FromDouble(__pyx_v_rot_bounds_x0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_rot_bounds_x1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_rot_bounds_y0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_rot_bounds_y1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_16 = PyTuple_New(6); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_16, 4, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_16, 5, __pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_9 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_16;
  __pyx_t_16 = 0;
  goto __pyx_L0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1784
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def rotate_particle_coord(np.float64_t[:] px,             # <<<<<<<<<<<<<<
 *                           np.float64_t[:] py,
 *                           np.float64_t[:] pz,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __PYX_XDEC_MEMVIEW(&__pyx_t_10, 1);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.rotate_particle_coord", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_z_axis, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_y_axis, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_normal_rotation_matrix, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_transformed_north_vector, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_north_rotation_matrix, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rotation_matrix, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_px_rotated, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_py_rotated, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_coordinate_matrix, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rotated_coordinates, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_rotated_center, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_px, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_py, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pz, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1836
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def off_axis_projection_SPH(np.float64_t[:] px,             # <<<<<<<<<<<<<<
 *                             np.float64_t[:] py,
 *                             np.float64_t[:] pz,
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27off_axis_projection_SPH(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_27off_axis_projection_SPH = {"off_axis_projection_SPH", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27off_axis_projection_SPH, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27off_axis_projection_SPH(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_px = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_py = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_pz = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_particle_masses = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_particle_densities = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_smoothing_lengths = { 0, 0, { 0 }, { 0 }, { 0 } };
  CYTHON_UNUSED PyObject *__pyx_v_bounds = 0;
  PyObject *__pyx_v_center = 0;
  PyObject *__pyx_v_width = 0;
  __Pyx_memviewslice __pyx_v_quantity_to_smooth = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_projection_array = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_normal_vector = 0;
  PyObject *__pyx_v_north_vector = 0;
  PyObject *__pyx_v_weight_field = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("off_axis_projection_SPH (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_px,&__pyx_n_s_py,&__pyx_n_s_pz,&__pyx_n_s_particle_masses,&__pyx_n_s_particle_densities,&__pyx_n_s_smoothing_lengths,&__pyx_n_s_bounds,&__pyx_n_s_center,&__pyx_n_s_width,&__pyx_n_s_quantity_to_smooth,&__pyx_n_s_projection_array,&__pyx_n_s_normal_vector,&__pyx_n_s_north_vector,&__pyx_n_s_weight_field,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};

    /* "yt/utilities/lib/pixelization_routines.pyx":1849
 *                             normal_vector,
 *                             north_vector,
 *                             weight_field=None):             # <<<<<<<<<<<<<<
 *     # Do nothing in event of a 0 normal vector
 *     if np.allclose(normal_vector, 0.):
 */
    values[13] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_px)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("off_axis_projection_SPH", 0, 13, 14, 1); __PYX_ERR(0, 1836, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pz)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("off_axis_projection_SPH", 0, 13, 14, 2); __PYX_ERR(0, 1836, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particle_masses)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("off_axis_projection_SPH", 0, 13, 14, 3); __PYX_ERR(0, 1836, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_particle_densities)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("off_axis_projection_SPH", 0, 13, 14, 4); __PYX_ERR(0, 1836, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_smoothing_lengths)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("off_axis_projection_SPH", 0, 13, 14, 5); __PYX_ERR(0, 1836, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("off_axis_projection_SPH", 0, 13, 14, 6); __PYX_ERR(0, 1836, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_center)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("off_axis_projection_SPH", 0, 13, 14, 7); __PYX_ERR(0, 1836, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("off_axis_projection_SPH", 0, 13, 14, 8); __PYX_ERR(0, 1836, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quantity_to_smooth)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("off_axis_projection_SPH", 0, 13, 14, 9); __PYX_ERR(0, 1836, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_projection_array)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("off_axis_projection_SPH", 0, 13, 14, 10); __PYX_ERR(0, 1836, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normal_vector)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("off_axis_projection_SPH", 0, 13, 14, 11); __PYX_ERR(0, 1836, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_north_vector)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("off_axis_projection_SPH", 0, 13, 14, 12); __PYX_ERR(0, 1836, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weight_field);
          if (value) { values[13] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "off_axis_projection_SPH") < 0)) __PYX_ERR(0, 1836, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_px = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_px.memview)) __PYX_ERR(0, 1836, __pyx_L3_error)
    __pyx_v_py = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_py.memview)) __PYX_ERR(0, 1837, __pyx_L3_error)
    __pyx_v_pz = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[2], PyBUF_WRITABLE); if (unlikely(!__pyx_v_pz.memview)) __PYX_ERR(0, 1838, __pyx_L3_error)
    __pyx_v_particle_masses = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[3], PyBUF_WRITABLE); if (unlikely(!__pyx_v_particle_masses.memview)) __PYX_ERR(0, 1839, __pyx_L3_error)
    __pyx_v_particle_densities = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[4], PyBUF_WRITABLE); if (unlikely(!__pyx_v_particle_densities.memview)) __PYX_ERR(0, 1840, __pyx_L3_error)
    __pyx_v_smoothing_lengths = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[5], PyBUF_WRITABLE); if (unlikely(!__pyx_v_smoothing_lengths.memview)) __PYX_ERR(0, 1841, __pyx_L3_error)
    __pyx_v_bounds = values[6];
    __pyx_v_center = values[7];
    __pyx_v_width = values[8];
    __pyx_v_quantity_to_smooth = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[9], PyBUF_WRITABLE); if (unlikely(!__pyx_v_quantity_to_smooth.memview)) __PYX_ERR(0, 1845, __pyx_L3_error)
    __pyx_v_projection_array = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(values[10], PyBUF_WRITABLE); if (unlikely(!__pyx_v_projection_array.memview)) __PYX_ERR(0, 1846, __pyx_L3_error)
    __pyx_v_normal_vector = values[11];
    __pyx_v_north_vector = values[12];
    __pyx_v_weight_field = values[13];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("off_axis_projection_SPH", 0, 13, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1836, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.off_axis_projection_SPH", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_26off_axis_projection_SPH(__pyx_self, __pyx_v_px, __pyx_v_py, __pyx_v_pz, __pyx_v_particle_masses, __pyx_v_particle_densities, __pyx_v_smoothing_lengths, __pyx_v_bounds, __pyx_v_center, __pyx_v_width, __pyx_v_quantity_to_smooth, __pyx_v_projection_array, __pyx_v_normal_vector, __pyx_v_north_vector, __pyx_v_weight_field);

  /* "yt/utilities/lib/pixelization_routines.pyx":1836
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def off_axis_projection_SPH(np.float64_t[:] px,             # <<<<<<<<<<<<<<
 *                             np.float64_t[:] py,
 *                             np.float64_t[:] pz,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_26off_axis_projection_SPH(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_px, __Pyx_memviewslice __pyx_v_py, __Pyx_memviewslice __pyx_v_pz, __Pyx_memviewslice __pyx_v_particle_masses, __Pyx_memviewslice __pyx_v_particle_densities, __Pyx_memviewslice __pyx_v_smoothing_lengths, CYTHON_UNUSED PyObject *__pyx_v_bounds, PyObject *__pyx_v_center, PyObject *__pyx_v_width, __Pyx_memviewslice __pyx_v_quantity_to_smooth, __Pyx_memviewslice __pyx_v_projection_array, PyObject *__pyx_v_normal_vector, PyObject *__pyx_v_north_vector, PyObject *__pyx_v_weight_field) {
  PyObject *__pyx_v_px_rotated = NULL;
  PyObject *__pyx_v_py_rotated = NULL;
  PyObject *__pyx_v_rot_bounds_x0 = NULL;
  PyObject *__pyx_v_rot_bounds_x1 = NULL;
  PyObject *__pyx_v_rot_bounds_y0 = NULL;
  PyObject *__pyx_v_rot_bounds_y1 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("off_axis_projection_SPH", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1851
 *                             weight_field=None):
 *     # Do nothing in event of a 0 normal vector
 *     if np.allclose(normal_vector, 0.):             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_allclose); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_normal_vector, __pyx_float_0_};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1851, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_v_normal_vector, __pyx_float_0_};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 2+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1851, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_INCREF(__pyx_v_normal_vector);
    __Pyx_GIVEREF(__pyx_v_normal_vector);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_normal_vector);
    __Pyx_INCREF(__pyx_float_0_);
    __Pyx_GIVEREF(__pyx_float_0_);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_float_0_);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 1851, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1852
 *     # Do nothing in event of a 0 normal vector
 *     if np.allclose(normal_vector, 0.):
 *         return             # <<<<<<<<<<<<<<
 * 
 *     px_rotated, py_rotated, \
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1851
 *                             weight_field=None):
 *     # Do nothing in event of a 0 normal vector
 *     if np.allclose(normal_vector, 0.):             # <<<<<<<<<<<<<<
 *         return
 * 
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1856
 *     px_rotated, py_rotated, \
 *     rot_bounds_x0, rot_bounds_x1, \
 *     rot_bounds_y0, rot_bounds_y1 = rotate_particle_coord(px, py, pz,             # <<<<<<<<<<<<<<
 *                                                          center, width, normal_vector, north_vector)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_rotate_particle_coord); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_px, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_py, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_v_pz, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "yt/utilities/lib/pixelization_routines.pyx":1857
 *     rot_bounds_x0, rot_bounds_x1, \
 *     rot_bounds_y0, rot_bounds_y1 = rotate_particle_coord(px, py, pz,
 *                                                          center, width, normal_vector, north_vector)             # <<<<<<<<<<<<<<
 * 
 *     pixelize_sph_kernel_projection(projection_array,
 */
  __pyx_t_8 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[8] = {__pyx_t_8, __pyx_t_5, __pyx_t_2, __pyx_t_7, __pyx_v_center, __pyx_v_width, __pyx_v_normal_vector, __pyx_v_north_vector};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1856, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[8] = {__pyx_t_8, __pyx_t_5, __pyx_t_2, __pyx_t_7, __pyx_v_center, __pyx_v_width, __pyx_v_normal_vector, __pyx_v_north_vector};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_4, 7+__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1856, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else
  #endif
  {
    __pyx_t_9 = PyTuple_New(7+__pyx_t_4); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1856, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_4, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_4, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_4, __pyx_t_7);
    __Pyx_INCREF(__pyx_v_center);
    __Pyx_GIVEREF(__pyx_v_center);
    PyTuple_SET_ITEM(__pyx_t_9, 3+__pyx_t_4, __pyx_v_center);
    __Pyx_INCREF(__pyx_v_width);
    __Pyx_GIVEREF(__pyx_v_width);
    PyTuple_SET_ITEM(__pyx_t_9, 4+__pyx_t_4, __pyx_v_width);
    __Pyx_INCREF(__pyx_v_normal_vector);
    __Pyx_GIVEREF(__pyx_v_normal_vector);
    PyTuple_SET_ITEM(__pyx_t_9, 5+__pyx_t_4, __pyx_v_normal_vector);
    __Pyx_INCREF(__pyx_v_north_vector);
    __Pyx_GIVEREF(__pyx_v_north_vector);
    PyTuple_SET_ITEM(__pyx_t_9, 6+__pyx_t_4, __pyx_v_north_vector);
    __pyx_t_5 = 0;
    __pyx_t_2 = 0;
    __pyx_t_7 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1856, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1854, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_8);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_3,&__pyx_t_9,&__pyx_t_7,&__pyx_t_2,&__pyx_t_5,&__pyx_t_8};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 1854, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_3,&__pyx_t_9,&__pyx_t_7,&__pyx_t_2,&__pyx_t_5,&__pyx_t_8};
    __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 6) < 0) __PYX_ERR(0, 1854, __pyx_L1_error)
    __pyx_t_11 = NULL;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L5_unpacking_done;
    __pyx_L4_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1854, __pyx_L1_error)
    __pyx_L5_unpacking_done:;
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1854
 *         return
 * 
 *     px_rotated, py_rotated, \             # <<<<<<<<<<<<<<
 *     rot_bounds_x0, rot_bounds_x1, \
 *     rot_bounds_y0, rot_bounds_y1 = rotate_particle_coord(px, py, pz,
 */
  __pyx_v_px_rotated = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_py_rotated = __pyx_t_9;
  __pyx_t_9 = 0;
  __pyx_v_rot_bounds_x0 = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_v_rot_bounds_x1 = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_rot_bounds_y0 = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_rot_bounds_y1 = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1859
 *                                                          center, width, normal_vector, north_vector)
 * 
 *     pixelize_sph_kernel_projection(projection_array,             # <<<<<<<<<<<<<<
 *                                    px_rotated,
 *                                    py_rotated,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pixelize_sph_kernel_projection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __pyx_memoryview_fromslice(__pyx_v_projection_array, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "yt/utilities/lib/pixelization_routines.pyx":1862
 *                                    px_rotated,
 *                                    py_rotated,
 *                                    smoothing_lengths,             # <<<<<<<<<<<<<<
 *                                    particle_masses,
 *                                    particle_densities,
 */
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_smoothing_lengths, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "yt/utilities/lib/pixelization_routines.pyx":1863
 *                                    py_rotated,
 *                                    smoothing_lengths,
 *                                    particle_masses,             # <<<<<<<<<<<<<<
 *                                    particle_densities,
 *                                    quantity_to_smooth,
 */
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_particle_masses, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "yt/utilities/lib/pixelization_routines.pyx":1864
 *                                    smoothing_lengths,
 *                                    particle_masses,
 *                                    particle_densities,             # <<<<<<<<<<<<<<
 *                                    quantity_to_smooth,
 *                                    [rot_bounds_x0, rot_bounds_x1,
 */
  __pyx_t_7 = __pyx_memoryview_fromslice(__pyx_v_particle_densities, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "yt/utilities/lib/pixelization_routines.pyx":1865
 *                                    particle_masses,
 *                                    particle_densities,
 *                                    quantity_to_smooth,             # <<<<<<<<<<<<<<
 *                                    [rot_bounds_x0, rot_bounds_x1,
 *                                     rot_bounds_y0, rot_bounds_y1],
 */
  __pyx_t_9 = __pyx_memoryview_fromslice(__pyx_v_quantity_to_smooth, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "yt/utilities/lib/pixelization_routines.pyx":1866
 *                                    particle_densities,
 *                                    quantity_to_smooth,
 *                                    [rot_bounds_x0, rot_bounds_x1,             # <<<<<<<<<<<<<<
 *                                     rot_bounds_y0, rot_bounds_y1],
 *                                    weight_field=weight_field,
 */
  __pyx_t_3 = PyList_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_rot_bounds_x0);
  __Pyx_GIVEREF(__pyx_v_rot_bounds_x0);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_rot_bounds_x0);
  __Pyx_INCREF(__pyx_v_rot_bounds_x1);
  __Pyx_GIVEREF(__pyx_v_rot_bounds_x1);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_v_rot_bounds_x1);
  __Pyx_INCREF(__pyx_v_rot_bounds_y0);
  __Pyx_GIVEREF(__pyx_v_rot_bounds_y0);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_v_rot_bounds_y0);
  __Pyx_INCREF(__pyx_v_rot_bounds_y1);
  __Pyx_GIVEREF(__pyx_v_rot_bounds_y1);
  PyList_SET_ITEM(__pyx_t_3, 3, __pyx_v_rot_bounds_y1);

  /* "yt/utilities/lib/pixelization_routines.pyx":1859
 *                                                          center, width, normal_vector, north_vector)
 * 
 *     pixelize_sph_kernel_projection(projection_array,             # <<<<<<<<<<<<<<
 *                                    px_rotated,
 *                                    py_rotated,
 */
  __pyx_t_10 = PyTuple_New(8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8);
  __Pyx_INCREF(__pyx_v_px_rotated);
  __Pyx_GIVEREF(__pyx_v_px_rotated);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_px_rotated);
  __Pyx_INCREF(__pyx_v_py_rotated);
  __Pyx_GIVEREF(__pyx_v_py_rotated);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_v_py_rotated);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 5, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 6, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_10, 7, __pyx_t_3);
  __pyx_t_8 = 0;
  __pyx_t_5 = 0;
  __pyx_t_2 = 0;
  __pyx_t_7 = 0;
  __pyx_t_9 = 0;
  __pyx_t_3 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1868
 *                                    [rot_bounds_x0, rot_bounds_x1,
 *                                     rot_bounds_y0, rot_bounds_y1],
 *                                    weight_field=weight_field,             # <<<<<<<<<<<<<<
 *                                    check_period=0)
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_weight_field, __pyx_v_weight_field) < 0) __PYX_ERR(0, 1868, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_check_period, __pyx_int_0) < 0) __PYX_ERR(0, 1868, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1859
 *                                                          center, width, normal_vector, north_vector)
 * 
 *     pixelize_sph_kernel_projection(projection_array,             # <<<<<<<<<<<<<<
 *                                    px_rotated,
 *                                    py_rotated,
 */
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, __pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1836
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def off_axis_projection_SPH(np.float64_t[:] px,             # <<<<<<<<<<<<<<
 *                             np.float64_t[:] py,
 *                             np.float64_t[:] pz,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.off_axis_projection_SPH", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_px_rotated);
  __Pyx_XDECREF(__pyx_v_py_rotated);
  __Pyx_XDECREF(__pyx_v_rot_bounds_x0);
  __Pyx_XDECREF(__pyx_v_rot_bounds_x1);
  __Pyx_XDECREF(__pyx_v_rot_bounds_y0);
  __Pyx_XDECREF(__pyx_v_rot_bounds_y1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_px, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_py, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_pz, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_particle_masses, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_particle_densities, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_smoothing_lengths, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_quantity_to_smooth, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_projection_array, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1874
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef np.float64_t[:] rotation_matmul(np.float64_t[:, :] rotation_matrix,             # <<<<<<<<<<<<<<
 *                                      np.float64_t[:] coordinate_matrix):
 *     cdef np.float64_t[:] out = np.zeros(3)
 */

static __Pyx_memviewslice __pyx_f_2yt_9utilities_3lib_21pixelization_routines_rotation_matmul(__Pyx_memviewslice __pyx_v_rotation_matrix, __Pyx_memviewslice __pyx_v_coordinate_matrix) {
  __Pyx_memviewslice __pyx_v_out = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_v_i;
  long __pyx_v_j;
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_memviewslice __pyx_t_4 = { 0, 0, { 0 }, { 0 }, { 0 } };
  long __pyx_t_5;
  long __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rotation_matmul", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1876
 * cdef np.float64_t[:] rotation_matmul(np.float64_t[:, :] rotation_matrix,
 *                                      np.float64_t[:] coordinate_matrix):
 *     cdef np.float64_t[:] out = np.zeros(3)             # <<<<<<<<<<<<<<
 *     for i in range(3):
 *         for j in range(3):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_int_3) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_int_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_4.memview)) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_out = __pyx_t_4;
  __pyx_t_4.memview = NULL;
  __pyx_t_4.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1877
 *                                      np.float64_t[:] coordinate_matrix):
 *     cdef np.float64_t[:] out = np.zeros(3)
 *     for i in range(3):             # <<<<<<<<<<<<<<
 *         for j in range(3):
 *             out[i] += rotation_matrix[i, j] * coordinate_matrix[j]
 */
  for (__pyx_t_5 = 0; __pyx_t_5 < 3; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "yt/utilities/lib/pixelization_routines.pyx":1878
 *     cdef np.float64_t[:] out = np.zeros(3)
 *     for i in range(3):
 *         for j in range(3):             # <<<<<<<<<<<<<<
 *             out[i] += rotation_matrix[i, j] * coordinate_matrix[j]
 *     return out
 */
    for (__pyx_t_6 = 0; __pyx_t_6 < 3; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "yt/utilities/lib/pixelization_routines.pyx":1879
 *     for i in range(3):
 *         for j in range(3):
 *             out[i] += rotation_matrix[i, j] * coordinate_matrix[j]             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
      __pyx_t_7 = __pyx_v_i;
      __pyx_t_8 = __pyx_v_j;
      __pyx_t_9 = __pyx_v_j;
      __pyx_t_10 = __pyx_v_i;
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_out.data + __pyx_t_10 * __pyx_v_out.strides[0]) )) += ((*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_rotation_matrix.data + __pyx_t_7 * __pyx_v_rotation_matrix.strides[0]) ) + __pyx_t_8 * __pyx_v_rotation_matrix.strides[1]) ))) * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_coordinate_matrix.data + __pyx_t_9 * __pyx_v_coordinate_matrix.strides[0]) ))));
    }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1880
 *         for j in range(3):
 *             out[i] += rotation_matrix[i, j] * coordinate_matrix[j]
 *     return out             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __PYX_INC_MEMVIEW(&__pyx_v_out, 0);
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1874
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef np.float64_t[:] rotation_matmul(np.float64_t[:, :] rotation_matrix,             # <<<<<<<<<<<<<<
 *                                      np.float64_t[:] coordinate_matrix):
 *     cdef np.float64_t[:] out = np.zeros(3)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __PYX_XDEC_MEMVIEW(&__pyx_t_4, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.rotation_matmul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_out, 1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1884
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cpdef np.float64_t[:, :] get_rotation_matrix(np.float64_t[:] normal_vector,             # <<<<<<<<<<<<<<
 *                                              np.float64_t[:] final_vector):
 *     """ Returns a numpy rotation matrix corresponding to the
 */

static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_29get_rotation_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static __Pyx_memviewslice __pyx_f_2yt_9utilities_3lib_21pixelization_routines_get_rotation_matrix(__Pyx_memviewslice __pyx_v_normal_vector, __Pyx_memviewslice __pyx_v_final_vector, CYTHON_UNUSED int __pyx_skip_dispatch) {
  __Pyx_memviewslice __pyx_v_normal_unit_vector = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_final_unit_vector = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_v = { 0, 0, { 0 }, { 0 }, { 0 } };
  __pyx_t_5numpy_float64_t __pyx_v_s;
  __pyx_t_5numpy_float64_t __pyx_v_c;
  __Pyx_memviewslice __pyx_v_cross_product_matrix = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_memviewslice __pyx_t_6 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __pyx_t_5numpy_float64_t __pyx_t_9;
  int __pyx_t_10;
  __Pyx_memviewslice __pyx_t_11 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_rotation_matrix", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1891
 *     inverse of what's specified there.
 *     """
 *     cdef np.float64_t[:] normal_unit_vector = normal_vector / np.linalg.norm(normal_vector)             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:] final_unit_vector = final_vector / np.linalg.norm(final_vector)
 *     cdef np.float64_t[:] v = np.cross(final_unit_vector, normal_unit_vector)
 */
  __pyx_t_1 = __pyx_memoryview_fromslice(__pyx_v_normal_vector, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_linalg); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_norm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_normal_vector, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1891, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_normal_unit_vector = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1892
 *     """
 *     cdef np.float64_t[:] normal_unit_vector = normal_vector / np.linalg.norm(normal_vector)
 *     cdef np.float64_t[:] final_unit_vector = final_vector / np.linalg.norm(final_vector)             # <<<<<<<<<<<<<<
 *     cdef np.float64_t[:] v = np.cross(final_unit_vector, normal_unit_vector)
 *     cdef np.float64_t s = np.linalg.norm(v)
 */
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_final_vector, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_linalg); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_norm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_final_vector, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_final_unit_vector = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1893
 *     cdef np.float64_t[:] normal_unit_vector = normal_vector / np.linalg.norm(normal_vector)
 *     cdef np.float64_t[:] final_unit_vector = final_vector / np.linalg.norm(final_vector)
 *     cdef np.float64_t[:] v = np.cross(final_unit_vector, normal_unit_vector)             # <<<<<<<<<<<<<<
 *     cdef np.float64_t s = np.linalg.norm(v)
 *     cdef np.float64_t c = np.dot(final_unit_vector, normal_unit_vector)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_cross); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_final_unit_vector, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_normal_unit_vector, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1893, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1893, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_6.memview)) __PYX_ERR(0, 1893, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_v = __pyx_t_6;
  __pyx_t_6.memview = NULL;
  __pyx_t_6.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1894
 *     cdef np.float64_t[:] final_unit_vector = final_vector / np.linalg.norm(final_vector)
 *     cdef np.float64_t[:] v = np.cross(final_unit_vector, normal_unit_vector)
 *     cdef np.float64_t s = np.linalg.norm(v)             # <<<<<<<<<<<<<<
 *     cdef np.float64_t c = np.dot(final_unit_vector, normal_unit_vector)
 *     # if the normal vector is identical to the final vector, just return the
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_linalg); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_norm); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __pyx_memoryview_fromslice(__pyx_v_v, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1894, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_s = __pyx_t_9;

  /* "yt/utilities/lib/pixelization_routines.pyx":1895
 *     cdef np.float64_t[:] v = np.cross(final_unit_vector, normal_unit_vector)
 *     cdef np.float64_t s = np.linalg.norm(v)
 *     cdef np.float64_t c = np.dot(final_unit_vector, normal_unit_vector)             # <<<<<<<<<<<<<<
 *     # if the normal vector is identical to the final vector, just return the
 *     # identity matrix
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_dot); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_final_unit_vector, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_v_normal_unit_vector, 1, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1895, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_8)) {
    PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_8, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1895, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_2) {
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == ((npy_float64)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1895, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_c = __pyx_t_9;

  /* "yt/utilities/lib/pixelization_routines.pyx":1898
 *     # if the normal vector is identical to the final vector, just return the
 *     # identity matrix
 *     if np.isclose(c, 1, rtol=1e-09):             # <<<<<<<<<<<<<<
 *         return np.identity(3, dtype='float_')
 *     # if the normal vector is the negative final vector, return the appropriate
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_isclose); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_c); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_rtol, __pyx_float_1eneg_09) < 0) __PYX_ERR(0, 1898, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1898, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_10) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1899
 *     # identity matrix
 *     if np.isclose(c, 1, rtol=1e-09):
 *         return np.identity(3, dtype='float_')             # <<<<<<<<<<<<<<
 *     # if the normal vector is the negative final vector, return the appropriate
 *     # rotation matrix for flipping your coordinate system.
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_identity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_n_u_float) < 0) __PYX_ERR(0, 1899, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__9, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_t_5, PyBUF_WRITABLE); if (unlikely(!__pyx_t_11.memview)) __PYX_ERR(0, 1899, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_11;
    __pyx_t_11.memview = NULL;
    __pyx_t_11.data = NULL;
    goto __pyx_L0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1898
 *     # if the normal vector is identical to the final vector, just return the
 *     # identity matrix
 *     if np.isclose(c, 1, rtol=1e-09):             # <<<<<<<<<<<<<<
 *         return np.identity(3, dtype='float_')
 *     # if the normal vector is the negative final vector, return the appropriate
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1902
 *     # if the normal vector is the negative final vector, return the appropriate
 *     # rotation matrix for flipping your coordinate system.
 *     if np.isclose(s, 0, rtol=1e-09):             # <<<<<<<<<<<<<<
 *         return np.array([[0, -1, 0],[-1, 0, 0],[0, 0, -1]], dtype='float_')
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_isclose); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_s); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_rtol, __pyx_float_1eneg_09) < 0) __PYX_ERR(0, 1902, __pyx_L1_error)
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 1902, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_10) {

    /* "yt/utilities/lib/pixelization_routines.pyx":1903
 *     # rotation matrix for flipping your coordinate system.
 *     if np.isclose(s, 0, rtol=1e-09):
 *         return np.array([[0, -1, 0],[-1, 0, 0],[0, 0, -1]], dtype='float_')             # <<<<<<<<<<<<<<
 * 
 *     cdef np.float64_t[:, :] cross_product_matrix = np.array([[0, -1 * v[2], v[1]],
 */
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_8, 0, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_int_neg_1);
    PyList_SET_ITEM(__pyx_t_8, 1, __pyx_int_neg_1);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_8, 2, __pyx_int_0);
    __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_int_neg_1);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_int_neg_1);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_1, 2, __pyx_int_0);
    __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_4, 1, __pyx_int_0);
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_int_neg_1);
    PyList_SET_ITEM(__pyx_t_4, 2, __pyx_int_neg_1);
    __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
    __pyx_t_8 = 0;
    __pyx_t_1 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_u_float) < 0) __PYX_ERR(0, 1903, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_t_1, PyBUF_WRITABLE); if (unlikely(!__pyx_t_11.memview)) __PYX_ERR(0, 1903, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_11;
    __pyx_t_11.memview = NULL;
    __pyx_t_11.data = NULL;
    goto __pyx_L0;

    /* "yt/utilities/lib/pixelization_routines.pyx":1902
 *     # if the normal vector is the negative final vector, return the appropriate
 *     # rotation matrix for flipping your coordinate system.
 *     if np.isclose(s, 0, rtol=1e-09):             # <<<<<<<<<<<<<<
 *         return np.array([[0, -1, 0],[-1, 0, 0],[0, 0, -1]], dtype='float_')
 * 
 */
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1905
 *         return np.array([[0, -1, 0],[-1, 0, 0],[0, 0, -1]], dtype='float_')
 * 
 *     cdef np.float64_t[:, :] cross_product_matrix = np.array([[0, -1 * v[2], v[1]],             # <<<<<<<<<<<<<<
 *                                                       [v[2], 0, -1 * v[0]],
 *                                                       [-1 * v[1], v[0], 0]],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_12 = 2;
  __pyx_t_1 = PyFloat_FromDouble((-1.0 * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_v.data + __pyx_t_12 * __pyx_v_v.strides[0]) ))))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = 1;
  __pyx_t_4 = PyFloat_FromDouble((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_v.data + __pyx_t_12 * __pyx_v_v.strides[0]) )))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1906
 * 
 *     cdef np.float64_t[:, :] cross_product_matrix = np.array([[0, -1 * v[2], v[1]],
 *                                                       [v[2], 0, -1 * v[0]],             # <<<<<<<<<<<<<<
 *                                                       [-1 * v[1], v[0], 0]],
 *                                                       dtype='float_')
 */
  __pyx_t_12 = 2;
  __pyx_t_4 = PyFloat_FromDouble((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_v.data + __pyx_t_12 * __pyx_v_v.strides[0]) )))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = 0;
  __pyx_t_1 = PyFloat_FromDouble((-1.0 * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_v.data + __pyx_t_12 * __pyx_v_v.strides[0]) ))))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_t_4);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_1);
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1907
 *     cdef np.float64_t[:, :] cross_product_matrix = np.array([[0, -1 * v[2], v[1]],
 *                                                       [v[2], 0, -1 * v[0]],
 *                                                       [-1 * v[1], v[0], 0]],             # <<<<<<<<<<<<<<
 *                                                       dtype='float_')
 *     return np.linalg.inv(np.identity(3, dtype='float_') + cross_product_matrix
 */
  __pyx_t_12 = 1;
  __pyx_t_1 = PyFloat_FromDouble((-1.0 * (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_v.data + __pyx_t_12 * __pyx_v_v.strides[0]) ))))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_12 = 0;
  __pyx_t_4 = PyFloat_FromDouble((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_v.data + __pyx_t_12 * __pyx_v_v.strides[0]) )))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_int_0);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1905
 *         return np.array([[0, -1, 0],[-1, 0, 0],[0, 0, -1]], dtype='float_')
 * 
 *     cdef np.float64_t[:, :] cross_product_matrix = np.array([[0, -1 * v[2], v[1]],             # <<<<<<<<<<<<<<
 *                                                       [v[2], 0, -1 * v[0]],
 *                                                       [-1 * v[1], v[0], 0]],
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_2);
  __pyx_t_5 = 0;
  __pyx_t_8 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1908
 *                                                       [v[2], 0, -1 * v[0]],
 *                                                       [-1 * v[1], v[0], 0]],
 *                                                       dtype='float_')             # <<<<<<<<<<<<<<
 *     return np.linalg.inv(np.identity(3, dtype='float_') + cross_product_matrix
 *                          + np.matmul(cross_product_matrix, cross_product_matrix)
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_n_u_float) < 0) __PYX_ERR(0, 1908, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1905
 *         return np.array([[0, -1, 0],[-1, 0, 0],[0, 0, -1]], dtype='float_')
 * 
 *     cdef np.float64_t[:, :] cross_product_matrix = np.array([[0, -1 * v[2], v[1]],             # <<<<<<<<<<<<<<
 *                                                       [v[2], 0, -1 * v[0]],
 *                                                       [-1 * v[1], v[0], 0]],
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_t_8, PyBUF_WRITABLE); if (unlikely(!__pyx_t_11.memview)) __PYX_ERR(0, 1905, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_cross_product_matrix = __pyx_t_11;
  __pyx_t_11.memview = NULL;
  __pyx_t_11.data = NULL;

  /* "yt/utilities/lib/pixelization_routines.pyx":1909
 *                                                       [-1 * v[1], v[0], 0]],
 *                                                       dtype='float_')
 *     return np.linalg.inv(np.identity(3, dtype='float_') + cross_product_matrix             # <<<<<<<<<<<<<<
 *                          + np.matmul(cross_product_matrix, cross_product_matrix)
 *                          * 1/(1+c))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_linalg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_inv); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_identity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_n_u_float) < 0) __PYX_ERR(0, 1909, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__9, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_cross_product_matrix, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Add(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1910
 *                                                       dtype='float_')
 *     return np.linalg.inv(np.identity(3, dtype='float_') + cross_product_matrix
 *                          + np.matmul(cross_product_matrix, cross_product_matrix)             # <<<<<<<<<<<<<<
 *                          * 1/(1+c))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_matmul); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_cross_product_matrix, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_13 = __pyx_memoryview_fromslice(__pyx_v_cross_product_matrix, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_7 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_t_5, __pyx_t_13};
    __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1910, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
    PyObject *__pyx_temp[3] = {__pyx_t_14, __pyx_t_5, __pyx_t_13};
    __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1910, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  } else
  #endif
  {
    __pyx_t_15 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (__pyx_t_14) {
      __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_14); __pyx_t_14 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_7, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_13);
    PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_7, __pyx_t_13);
    __pyx_t_5 = 0;
    __pyx_t_13 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1910, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1911
 *     return np.linalg.inv(np.identity(3, dtype='float_') + cross_product_matrix
 *                          + np.matmul(cross_product_matrix, cross_product_matrix)
 *                          * 1/(1+c))             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((1.0 + __pyx_v_c)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_15 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1910
 *                                                       dtype='float_')
 *     return np.linalg.inv(np.identity(3, dtype='float_') + cross_product_matrix
 *                          + np.matmul(cross_product_matrix, cross_product_matrix)             # <<<<<<<<<<<<<<
 *                          * 1/(1+c))
 * 
 */
  __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __pyx_t_15 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_8 = (__pyx_t_15) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_15, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1909
 *                                                       [-1 * v[1], v[0], 0]],
 *                                                       dtype='float_')
 *     return np.linalg.inv(np.identity(3, dtype='float_') + cross_product_matrix             # <<<<<<<<<<<<<<
 *                          + np.matmul(cross_product_matrix, cross_product_matrix)
 *                          * 1/(1+c))
 */
  __pyx_t_11 = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(__pyx_t_8, PyBUF_WRITABLE); if (unlikely(!__pyx_t_11.memview)) __PYX_ERR(0, 1909, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_11;
  __pyx_t_11.memview = NULL;
  __pyx_t_11.data = NULL;
  goto __pyx_L0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1884
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cpdef np.float64_t[:, :] get_rotation_matrix(np.float64_t[:] normal_vector,             # <<<<<<<<<<<<<<
 *                                              np.float64_t[:] final_vector):
 *     """ Returns a numpy rotation matrix corresponding to the
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_6, 1);
  __Pyx_XDECREF(__pyx_t_8);
  __PYX_XDEC_MEMVIEW(&__pyx_t_11, 1);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.get_rotation_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_normal_unit_vector, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_final_unit_vector, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_v, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_cross_product_matrix, 1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_29get_rotation_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_2yt_9utilities_3lib_21pixelization_routines_28get_rotation_matrix[] = " Returns a numpy rotation matrix corresponding to the\n    rotation of the given normal vector to the specified final_vector.\n    See https://math.stackexchange.com/a/476311 although note we return the\n    inverse of what's specified there.\n    ";
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_29get_rotation_matrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_normal_vector = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_final_vector = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_rotation_matrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_normal_vector,&__pyx_n_s_final_vector,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normal_vector)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_final_vector)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("get_rotation_matrix", 1, 2, 2, 1); __PYX_ERR(0, 1884, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_rotation_matrix") < 0)) __PYX_ERR(0, 1884, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_normal_vector = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_normal_vector.memview)) __PYX_ERR(0, 1884, __pyx_L3_error)
    __pyx_v_final_vector = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_final_vector.memview)) __PYX_ERR(0, 1885, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_rotation_matrix", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1884, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.get_rotation_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_28get_rotation_matrix(__pyx_self, __pyx_v_normal_vector, __pyx_v_final_vector);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_28get_rotation_matrix(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_normal_vector, __Pyx_memviewslice __pyx_v_final_vector) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_rotation_matrix", 0);
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_v_normal_vector.memview)) { __Pyx_RaiseUnboundLocalError("normal_vector"); __PYX_ERR(0, 1884, __pyx_L1_error) }
  if (unlikely(!__pyx_v_final_vector.memview)) { __Pyx_RaiseUnboundLocalError("final_vector"); __PYX_ERR(0, 1884, __pyx_L1_error) }
  __pyx_t_1 = __pyx_f_2yt_9utilities_3lib_21pixelization_routines_get_rotation_matrix(__pyx_v_normal_vector, __pyx_v_final_vector, 0); if (unlikely(!__pyx_t_1.memview)) __PYX_ERR(0, 1884, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_t_1, 2, (PyObject *(*)(char *)) __pyx_memview_get_nn___pyx_t_5numpy_float64_t, (int (*)(char *, PyObject *)) __pyx_memview_set_nn___pyx_t_5numpy_float64_t, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __pyx_t_1.memview = NULL;
  __pyx_t_1.data = NULL;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __PYX_XDEC_MEMVIEW(&__pyx_t_1, 1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.get_rotation_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_normal_vector, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_final_vector, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1915
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def normalization_3d_utility(np.float64_t[:, :, :] num,             # <<<<<<<<<<<<<<
 *                              np.float64_t[:, :, :] den):
 *     cdef int i, j, k
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_31normalization_3d_utility(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_31normalization_3d_utility = {"normalization_3d_utility", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_31normalization_3d_utility, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_31normalization_3d_utility(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_num = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_den = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalization_3d_utility (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_num,&__pyx_n_s_den,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_den)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("normalization_3d_utility", 1, 2, 2, 1); __PYX_ERR(0, 1915, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "normalization_3d_utility") < 0)) __PYX_ERR(0, 1915, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_num = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_num.memview)) __PYX_ERR(0, 1915, __pyx_L3_error)
    __pyx_v_den = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_den.memview)) __PYX_ERR(0, 1916, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("normalization_3d_utility", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1915, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.normalization_3d_utility", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_30normalization_3d_utility(__pyx_self, __pyx_v_num, __pyx_v_den);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_30normalization_3d_utility(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_num, __Pyx_memviewslice __pyx_v_den) {
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  __pyx_t_5numpy_float64_t __pyx_t_14;
  __pyx_t_5numpy_float64_t __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalization_3d_utility", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1918
 *                              np.float64_t[:, :, :] den):
 *     cdef int i, j, k
 *     for i in range(num.shape[0]):             # <<<<<<<<<<<<<<
 *         for j in range(num.shape[1]):
 *             for k in range(num.shape[2]):
 */
  __pyx_t_1 = (__pyx_v_num.shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/utilities/lib/pixelization_routines.pyx":1919
 *     cdef int i, j, k
 *     for i in range(num.shape[0]):
 *         for j in range(num.shape[1]):             # <<<<<<<<<<<<<<
 *             for k in range(num.shape[2]):
 *                 if den[i, j, k] != 0.0:
 */
    __pyx_t_4 = (__pyx_v_num.shape[1]);
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "yt/utilities/lib/pixelization_routines.pyx":1920
 *     for i in range(num.shape[0]):
 *         for j in range(num.shape[1]):
 *             for k in range(num.shape[2]):             # <<<<<<<<<<<<<<
 *                 if den[i, j, k] != 0.0:
 *                     num[i, j, k] = num[i, j, k] / den[i, j, k]
 */
      __pyx_t_7 = (__pyx_v_num.shape[2]);
      __pyx_t_8 = __pyx_t_7;
      for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
        __pyx_v_k = __pyx_t_9;

        /* "yt/utilities/lib/pixelization_routines.pyx":1921
 *         for j in range(num.shape[1]):
 *             for k in range(num.shape[2]):
 *                 if den[i, j, k] != 0.0:             # <<<<<<<<<<<<<<
 *                     num[i, j, k] = num[i, j, k] / den[i, j, k]
 * 
 */
        __pyx_t_10 = __pyx_v_i;
        __pyx_t_11 = __pyx_v_j;
        __pyx_t_12 = __pyx_v_k;
        __pyx_t_13 = (((*((__pyx_t_5numpy_float64_t *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_den.data + __pyx_t_10 * __pyx_v_den.strides[0]) ) + __pyx_t_11 * __pyx_v_den.strides[1]) ) + __pyx_t_12 * __pyx_v_den.strides[2]) ))) != 0.0) != 0);
        if (__pyx_t_13) {

          /* "yt/utilities/lib/pixelization_routines.pyx":1922
 *             for k in range(num.shape[2]):
 *                 if den[i, j, k] != 0.0:
 *                     num[i, j, k] = num[i, j, k] / den[i, j, k]             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
          __pyx_t_12 = __pyx_v_i;
          __pyx_t_11 = __pyx_v_j;
          __pyx_t_10 = __pyx_v_k;
          __pyx_t_14 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_num.data + __pyx_t_12 * __pyx_v_num.strides[0]) ) + __pyx_t_11 * __pyx_v_num.strides[1]) ) + __pyx_t_10 * __pyx_v_num.strides[2]) )));
          __pyx_t_10 = __pyx_v_i;
          __pyx_t_11 = __pyx_v_j;
          __pyx_t_12 = __pyx_v_k;
          __pyx_t_15 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_den.data + __pyx_t_10 * __pyx_v_den.strides[0]) ) + __pyx_t_11 * __pyx_v_den.strides[1]) ) + __pyx_t_12 * __pyx_v_den.strides[2]) )));
          if (unlikely(__pyx_t_15 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 1922, __pyx_L1_error)
          }
          __pyx_t_12 = __pyx_v_i;
          __pyx_t_11 = __pyx_v_j;
          __pyx_t_10 = __pyx_v_k;
          *((__pyx_t_5numpy_float64_t *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_num.data + __pyx_t_12 * __pyx_v_num.strides[0]) ) + __pyx_t_11 * __pyx_v_num.strides[1]) ) + __pyx_t_10 * __pyx_v_num.strides[2]) )) = (__pyx_t_14 / __pyx_t_15);

          /* "yt/utilities/lib/pixelization_routines.pyx":1921
 *         for j in range(num.shape[1]):
 *             for k in range(num.shape[2]):
 *                 if den[i, j, k] != 0.0:             # <<<<<<<<<<<<<<
 *                     num[i, j, k] = num[i, j, k] / den[i, j, k]
 * 
 */
        }
      }
    }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1915
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def normalization_3d_utility(np.float64_t[:, :, :] num,             # <<<<<<<<<<<<<<
 *                              np.float64_t[:, :, :] den):
 *     cdef int i, j, k
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.normalization_3d_utility", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_num, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_den, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1926
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def normalization_2d_utility(np.float64_t[:, :] num,             # <<<<<<<<<<<<<<
 *                           np.float64_t[:, :] den):
 *     cdef int i, j
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_33normalization_2d_utility(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_33normalization_2d_utility = {"normalization_2d_utility", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_33normalization_2d_utility, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_33normalization_2d_utility(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_num = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_den = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalization_2d_utility (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_num,&__pyx_n_s_den,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_den)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("normalization_2d_utility", 1, 2, 2, 1); __PYX_ERR(0, 1926, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "normalization_2d_utility") < 0)) __PYX_ERR(0, 1926, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_num = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_num.memview)) __PYX_ERR(0, 1926, __pyx_L3_error)
    __pyx_v_den = __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_den.memview)) __PYX_ERR(0, 1927, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("normalization_2d_utility", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1926, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.normalization_2d_utility", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_32normalization_2d_utility(__pyx_self, __pyx_v_num, __pyx_v_den);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_32normalization_2d_utility(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_num, __Pyx_memviewslice __pyx_v_den) {
  int __pyx_v_i;
  int __pyx_v_j;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  __pyx_t_5numpy_float64_t __pyx_t_10;
  __pyx_t_5numpy_float64_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalization_2d_utility", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1929
 *                           np.float64_t[:, :] den):
 *     cdef int i, j
 *     for i in range(num.shape[0]):             # <<<<<<<<<<<<<<
 *         for j in range(num.shape[1]):
 *             if den[i, j] != 0.0:
 */
  __pyx_t_1 = (__pyx_v_num.shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/utilities/lib/pixelization_routines.pyx":1930
 *     cdef int i, j
 *     for i in range(num.shape[0]):
 *         for j in range(num.shape[1]):             # <<<<<<<<<<<<<<
 *             if den[i, j] != 0.0:
 *                 num[i, j] = num[i, j] / den[i, j]
 */
    __pyx_t_4 = (__pyx_v_num.shape[1]);
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_j = __pyx_t_6;

      /* "yt/utilities/lib/pixelization_routines.pyx":1931
 *     for i in range(num.shape[0]):
 *         for j in range(num.shape[1]):
 *             if den[i, j] != 0.0:             # <<<<<<<<<<<<<<
 *                 num[i, j] = num[i, j] / den[i, j]
 * 
 */
      __pyx_t_7 = __pyx_v_i;
      __pyx_t_8 = __pyx_v_j;
      __pyx_t_9 = (((*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_den.data + __pyx_t_7 * __pyx_v_den.strides[0]) ) + __pyx_t_8 * __pyx_v_den.strides[1]) ))) != 0.0) != 0);
      if (__pyx_t_9) {

        /* "yt/utilities/lib/pixelization_routines.pyx":1932
 *         for j in range(num.shape[1]):
 *             if den[i, j] != 0.0:
 *                 num[i, j] = num[i, j] / den[i, j]             # <<<<<<<<<<<<<<
 * 
 * @cython.boundscheck(False)
 */
        __pyx_t_8 = __pyx_v_i;
        __pyx_t_7 = __pyx_v_j;
        __pyx_t_10 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_num.data + __pyx_t_8 * __pyx_v_num.strides[0]) ) + __pyx_t_7 * __pyx_v_num.strides[1]) )));
        __pyx_t_7 = __pyx_v_i;
        __pyx_t_8 = __pyx_v_j;
        __pyx_t_11 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_den.data + __pyx_t_7 * __pyx_v_den.strides[0]) ) + __pyx_t_8 * __pyx_v_den.strides[1]) )));
        if (unlikely(__pyx_t_11 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 1932, __pyx_L1_error)
        }
        __pyx_t_8 = __pyx_v_i;
        __pyx_t_7 = __pyx_v_j;
        *((__pyx_t_5numpy_float64_t *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_num.data + __pyx_t_8 * __pyx_v_num.strides[0]) ) + __pyx_t_7 * __pyx_v_num.strides[1]) )) = (__pyx_t_10 / __pyx_t_11);

        /* "yt/utilities/lib/pixelization_routines.pyx":1931
 *     for i in range(num.shape[0]):
 *         for j in range(num.shape[1]):
 *             if den[i, j] != 0.0:             # <<<<<<<<<<<<<<
 *                 num[i, j] = num[i, j] / den[i, j]
 * 
 */
      }
    }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1926
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def normalization_2d_utility(np.float64_t[:, :] num,             # <<<<<<<<<<<<<<
 *                           np.float64_t[:, :] den):
 *     cdef int i, j
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.normalization_2d_utility", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_num, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_den, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/pixelization_routines.pyx":1936
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def normalization_1d_utility(np.float64_t[:] num,             # <<<<<<<<<<<<<<
 *                              np.float64_t[:] den):
 *     cdef int i
 */

/* Python wrapper */
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_35normalization_1d_utility(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_35normalization_1d_utility = {"normalization_1d_utility", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_35normalization_1d_utility, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_35normalization_1d_utility(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __Pyx_memviewslice __pyx_v_num = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_den = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalization_1d_utility (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_num,&__pyx_n_s_den,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_den)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("normalization_1d_utility", 1, 2, 2, 1); __PYX_ERR(0, 1936, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "normalization_1d_utility") < 0)) __PYX_ERR(0, 1936, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_num = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_num.memview)) __PYX_ERR(0, 1936, __pyx_L3_error)
    __pyx_v_den = __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(values[1], PyBUF_WRITABLE); if (unlikely(!__pyx_v_den.memview)) __PYX_ERR(0, 1937, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("normalization_1d_utility", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1936, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.normalization_1d_utility", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_34normalization_1d_utility(__pyx_self, __pyx_v_num, __pyx_v_den);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_2yt_9utilities_3lib_21pixelization_routines_34normalization_1d_utility(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_num, __Pyx_memviewslice __pyx_v_den) {
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  __pyx_t_5numpy_float64_t __pyx_t_6;
  __pyx_t_5numpy_float64_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("normalization_1d_utility", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":1939
 *                              np.float64_t[:] den):
 *     cdef int i
 *     for i in range(num.shape[0]):             # <<<<<<<<<<<<<<
 *         if den[i] != 0.0:
 *             num[i] = num[i] / den[i]
 */
  __pyx_t_1 = (__pyx_v_num.shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yt/utilities/lib/pixelization_routines.pyx":1940
 *     cdef int i
 *     for i in range(num.shape[0]):
 *         if den[i] != 0.0:             # <<<<<<<<<<<<<<
 *             num[i] = num[i] / den[i]
 */
    __pyx_t_4 = __pyx_v_i;
    __pyx_t_5 = (((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_den.data + __pyx_t_4 * __pyx_v_den.strides[0]) ))) != 0.0) != 0);
    if (__pyx_t_5) {

      /* "yt/utilities/lib/pixelization_routines.pyx":1941
 *     for i in range(num.shape[0]):
 *         if den[i] != 0.0:
 *             num[i] = num[i] / den[i]             # <<<<<<<<<<<<<<
 */
      __pyx_t_4 = __pyx_v_i;
      __pyx_t_6 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_num.data + __pyx_t_4 * __pyx_v_num.strides[0]) )));
      __pyx_t_4 = __pyx_v_i;
      __pyx_t_7 = (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_den.data + __pyx_t_4 * __pyx_v_den.strides[0]) )));
      if (unlikely(__pyx_t_7 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1941, __pyx_L1_error)
      }
      __pyx_t_4 = __pyx_v_i;
      *((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_num.data + __pyx_t_4 * __pyx_v_num.strides[0]) )) = (__pyx_t_6 / __pyx_t_7);

      /* "yt/utilities/lib/pixelization_routines.pyx":1940
 *     cdef int i
 *     for i in range(num.shape[0]):
 *         if den[i] != 0.0:             # <<<<<<<<<<<<<<
 *             num[i] = num[i] / den[i]
 */
    }
  }

  /* "yt/utilities/lib/pixelization_routines.pyx":1936
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def normalization_1d_utility(np.float64_t[:] num,             # <<<<<<<<<<<<<<
 *                              np.float64_t[:] den):
 *     cdef int i
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yt.utilities.lib.pixelization_routines.normalization_1d_utility", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __PYX_XDEC_MEMVIEW(&__pyx_v_num, 1);
  __PYX_XDEC_MEMVIEW(&__pyx_v_den, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyArray_Descr *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":265
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":271
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 272, __pyx_L1_error)

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":275
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 276, __pyx_L1_error)

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":279
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":296
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_7 = PyArray_DESCR(__pyx_v_self);
  __pyx_t_3 = ((PyObject *)__pyx_t_7);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":300
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":303
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":305
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 306, __pyx_L1_error)

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;
      case NPY_UBYTE:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":308
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      __pyx_v_f = ((char *)"B");
      break;
      case NPY_SHORT:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":309
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      __pyx_v_f = ((char *)"h");
      break;
      case NPY_USHORT:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      __pyx_v_f = ((char *)"H");
      break;
      case NPY_INT:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":311
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      __pyx_v_f = ((char *)"i");
      break;
      case NPY_UINT:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":312
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      __pyx_v_f = ((char *)"I");
      break;
      case NPY_LONG:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":313
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      __pyx_v_f = ((char *)"l");
      break;
      case NPY_ULONG:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":314
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      __pyx_v_f = ((char *)"L");
      break;
      case NPY_LONGLONG:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":315
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      __pyx_v_f = ((char *)"q");
      break;
      case NPY_ULONGLONG:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":316
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      __pyx_v_f = ((char *)"Q");
      break;
      case NPY_FLOAT:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":317
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      __pyx_v_f = ((char *)"f");
      break;
      case NPY_DOUBLE:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":318
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      __pyx_v_f = ((char *)"d");
      break;
      case NPY_LONGDOUBLE:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":319
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      __pyx_v_f = ((char *)"g");
      break;
      case NPY_CFLOAT:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":320
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      __pyx_v_f = ((char *)"Zf");
      break;
      case NPY_CDOUBLE:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":321
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      __pyx_v_f = ((char *)"Zd");
      break;
      case NPY_CLONGDOUBLE:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":322
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      __pyx_v_f = ((char *)"Zg");
      break;
      case NPY_OBJECT:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":323
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":325
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 325, __pyx_L1_error)
      break;
    }

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":326
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":327
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":329
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":330
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":331
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":332
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 332, __pyx_L1_error)
    __pyx_v_f = __pyx_t_9;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":335
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":339
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":341
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":820
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":820
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":824
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":827
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":826
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":830
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":833
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":836
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":836
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":846
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":847
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 850, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 850, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":851
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 851, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 851, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":852
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 852, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 852, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 852, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 852, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":854
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 854, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":855
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 855, __pyx_L1_error)

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":854
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":857
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":858
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":857
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":859
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 859, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 859, __pyx_L1_error)

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":857
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":869
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 869, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 869, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":870
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":871
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":872
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":874
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":876
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":877
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 877, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":878
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 879, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 879, __pyx_L1_error)

        /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":878
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":882
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 882, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 882, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 882, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":883
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":884
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":885
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":886
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":887
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":888
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":889
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":890
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":891
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":892
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":893
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":894
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":895
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":896
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":897
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":898
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":900
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 900, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 900, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 900, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":901
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":876
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":905
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 905, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":906
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1021
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1023
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1021
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1025
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1027
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1027
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1029
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1025
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1033
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1035, __pyx_L3_error)

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1036
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1036, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1037
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1037, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1037, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1033
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1039
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1041, __pyx_L3_error)

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1042
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1042, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1043, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1043, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1039
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1045
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1047, __pyx_L3_error)

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1048
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1048, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1049
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1049, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1049, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1045
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":13
 * 
 * 
 * cdef inline np.int64_t imax(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 > i1: return i0
 *     return i1
 */

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_imax(__pyx_t_5numpy_int64_t __pyx_v_i0, __pyx_t_5numpy_int64_t __pyx_v_i1) {
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":14
 * 
 * cdef inline np.int64_t imax(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 > i1: return i0             # <<<<<<<<<<<<<<
 *     return i1
 * 
 */
  __pyx_t_1 = ((__pyx_v_i0 > __pyx_v_i1) != 0);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_i0;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":15
 * cdef inline np.int64_t imax(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 > i1: return i0
 *     return i1             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t fmax(np.float64_t f0, np.float64_t f1) noexcept nogil:
 */
  __pyx_r = __pyx_v_i1;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":13
 * 
 * 
 * cdef inline np.int64_t imax(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 > i1: return i0
 *     return i1
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":17
 *     return i1
 * 
 * cdef inline np.float64_t fmax(np.float64_t f0, np.float64_t f1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if f0 > f1: return f0
 *     return f1
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_t_5numpy_float64_t __pyx_v_f0, __pyx_t_5numpy_float64_t __pyx_v_f1) {
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":18
 * 
 * cdef inline np.float64_t fmax(np.float64_t f0, np.float64_t f1) noexcept nogil:
 *     if f0 > f1: return f0             # <<<<<<<<<<<<<<
 *     return f1
 * 
 */
  __pyx_t_1 = ((__pyx_v_f0 > __pyx_v_f1) != 0);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_f0;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":19
 * cdef inline np.float64_t fmax(np.float64_t f0, np.float64_t f1) noexcept nogil:
 *     if f0 > f1: return f0
 *     return f1             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.int64_t imin(np.int64_t i0, np.int64_t i1) noexcept nogil:
 */
  __pyx_r = __pyx_v_f1;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":17
 *     return i1
 * 
 * cdef inline np.float64_t fmax(np.float64_t f0, np.float64_t f1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if f0 > f1: return f0
 *     return f1
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":21
 *     return f1
 * 
 * cdef inline np.int64_t imin(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 < i1: return i0
 *     return i1
 */

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_imin(__pyx_t_5numpy_int64_t __pyx_v_i0, __pyx_t_5numpy_int64_t __pyx_v_i1) {
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":22
 * 
 * cdef inline np.int64_t imin(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 < i1: return i0             # <<<<<<<<<<<<<<
 *     return i1
 * 
 */
  __pyx_t_1 = ((__pyx_v_i0 < __pyx_v_i1) != 0);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_i0;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":23
 * cdef inline np.int64_t imin(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 < i1: return i0
 *     return i1             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t fmin(np.float64_t f0, np.float64_t f1) noexcept nogil:
 */
  __pyx_r = __pyx_v_i1;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":21
 *     return f1
 * 
 * cdef inline np.int64_t imin(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 < i1: return i0
 *     return i1
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":25
 *     return i1
 * 
 * cdef inline np.float64_t fmin(np.float64_t f0, np.float64_t f1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if f0 < f1: return f0
 *     return f1
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_t_5numpy_float64_t __pyx_v_f0, __pyx_t_5numpy_float64_t __pyx_v_f1) {
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":26
 * 
 * cdef inline np.float64_t fmin(np.float64_t f0, np.float64_t f1) noexcept nogil:
 *     if f0 < f1: return f0             # <<<<<<<<<<<<<<
 *     return f1
 * 
 */
  __pyx_t_1 = ((__pyx_v_f0 < __pyx_v_f1) != 0);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_f0;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":27
 * cdef inline np.float64_t fmin(np.float64_t f0, np.float64_t f1) noexcept nogil:
 *     if f0 < f1: return f0
 *     return f1             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t fabs(np.float64_t f0) noexcept nogil:
 */
  __pyx_r = __pyx_v_f1;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":25
 *     return i1
 * 
 * cdef inline np.float64_t fmin(np.float64_t f0, np.float64_t f1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if f0 < f1: return f0
 *     return f1
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":29
 *     return f1
 * 
 * cdef inline np.float64_t fabs(np.float64_t f0) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if f0 < 0.0: return -f0
 *     return f0
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_fabs(__pyx_t_5numpy_float64_t __pyx_v_f0) {
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":30
 * 
 * cdef inline np.float64_t fabs(np.float64_t f0) noexcept nogil:
 *     if f0 < 0.0: return -f0             # <<<<<<<<<<<<<<
 *     return f0
 * 
 */
  __pyx_t_1 = ((__pyx_v_f0 < 0.0) != 0);
  if (__pyx_t_1) {
    __pyx_r = (-__pyx_v_f0);
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":31
 * cdef inline np.float64_t fabs(np.float64_t f0) noexcept nogil:
 *     if f0 < 0.0: return -f0
 *     return f0             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.int64_t iclip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:
 */
  __pyx_r = __pyx_v_f0;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":29
 *     return f1
 * 
 * cdef inline np.float64_t fabs(np.float64_t f0) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if f0 < 0.0: return -f0
 *     return f0
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":33
 *     return f0
 * 
 * cdef inline np.int64_t iclip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i < a: return a
 *     if i > b: return b
 */

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_iclip(__pyx_t_5numpy_int64_t __pyx_v_i, __pyx_t_5numpy_int64_t __pyx_v_a, __pyx_t_5numpy_int64_t __pyx_v_b) {
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":34
 * 
 * cdef inline np.int64_t iclip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:
 *     if i < a: return a             # <<<<<<<<<<<<<<
 *     if i > b: return b
 *     return i
 */
  __pyx_t_1 = ((__pyx_v_i < __pyx_v_a) != 0);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_a;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":35
 * cdef inline np.int64_t iclip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:
 *     if i < a: return a
 *     if i > b: return b             # <<<<<<<<<<<<<<
 *     return i
 * 
 */
  __pyx_t_1 = ((__pyx_v_i > __pyx_v_b) != 0);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_b;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":36
 *     if i < a: return a
 *     if i > b: return b
 *     return i             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.int64_t i64clip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:
 */
  __pyx_r = __pyx_v_i;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":33
 *     return f0
 * 
 * cdef inline np.int64_t iclip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i < a: return a
 *     if i > b: return b
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":38
 *     return i
 * 
 * cdef inline np.int64_t i64clip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i < a: return a
 *     if i > b: return b
 */

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_i64clip(__pyx_t_5numpy_int64_t __pyx_v_i, __pyx_t_5numpy_int64_t __pyx_v_a, __pyx_t_5numpy_int64_t __pyx_v_b) {
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":39
 * 
 * cdef inline np.int64_t i64clip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:
 *     if i < a: return a             # <<<<<<<<<<<<<<
 *     if i > b: return b
 *     return i
 */
  __pyx_t_1 = ((__pyx_v_i < __pyx_v_a) != 0);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_a;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":40
 * cdef inline np.int64_t i64clip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:
 *     if i < a: return a
 *     if i > b: return b             # <<<<<<<<<<<<<<
 *     return i
 * 
 */
  __pyx_t_1 = ((__pyx_v_i > __pyx_v_b) != 0);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_b;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":41
 *     if i < a: return a
 *     if i > b: return b
 *     return i             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t fclip(np.float64_t f,
 */
  __pyx_r = __pyx_v_i;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":38
 *     return i
 * 
 * cdef inline np.int64_t i64clip(np.int64_t i, np.int64_t a, np.int64_t b) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i < a: return a
 *     if i > b: return b
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":43
 *     return i
 * 
 * cdef inline np.float64_t fclip(np.float64_t f,             # <<<<<<<<<<<<<<
 *                       np.float64_t a, np.float64_t b) noexcept nogil:
 *     return fmin(fmax(f, a), b)
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_fclip(__pyx_t_5numpy_float64_t __pyx_v_f, __pyx_t_5numpy_float64_t __pyx_v_a, __pyx_t_5numpy_float64_t __pyx_v_b) {
  __pyx_t_5numpy_float64_t __pyx_r;

  /* "yt/utilities/lib/fp_utils.pxd":45
 * cdef inline np.float64_t fclip(np.float64_t f,
 *                       np.float64_t a, np.float64_t b) noexcept nogil:
 *     return fmin(fmax(f, a), b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.int64_t i64max(np.int64_t i0, np.int64_t i1) noexcept nogil:
 */
  __pyx_r = __pyx_f_2yt_9utilities_3lib_8fp_utils_fmin(__pyx_f_2yt_9utilities_3lib_8fp_utils_fmax(__pyx_v_f, __pyx_v_a), __pyx_v_b);
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":43
 *     return i
 * 
 * cdef inline np.float64_t fclip(np.float64_t f,             # <<<<<<<<<<<<<<
 *                       np.float64_t a, np.float64_t b) noexcept nogil:
 *     return fmin(fmax(f, a), b)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":47
 *     return fmin(fmax(f, a), b)
 * 
 * cdef inline np.int64_t i64max(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 > i1: return i0
 *     return i1
 */

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_i64max(__pyx_t_5numpy_int64_t __pyx_v_i0, __pyx_t_5numpy_int64_t __pyx_v_i1) {
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":48
 * 
 * cdef inline np.int64_t i64max(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 > i1: return i0             # <<<<<<<<<<<<<<
 *     return i1
 * 
 */
  __pyx_t_1 = ((__pyx_v_i0 > __pyx_v_i1) != 0);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_i0;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":49
 * cdef inline np.int64_t i64max(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 > i1: return i0
 *     return i1             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.int64_t i64min(np.int64_t i0, np.int64_t i1) noexcept nogil:
 */
  __pyx_r = __pyx_v_i1;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":47
 *     return fmin(fmax(f, a), b)
 * 
 * cdef inline np.int64_t i64max(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 > i1: return i0
 *     return i1
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":51
 *     return i1
 * 
 * cdef inline np.int64_t i64min(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 < i1: return i0
 *     return i1
 */

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_8fp_utils_i64min(__pyx_t_5numpy_int64_t __pyx_v_i0, __pyx_t_5numpy_int64_t __pyx_v_i1) {
  __pyx_t_5numpy_int64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/utilities/lib/fp_utils.pxd":52
 * 
 * cdef inline np.int64_t i64min(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 < i1: return i0             # <<<<<<<<<<<<<<
 *     return i1
 * 
 */
  __pyx_t_1 = ((__pyx_v_i0 < __pyx_v_i1) != 0);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_i0;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/fp_utils.pxd":53
 * cdef inline np.int64_t i64min(np.int64_t i0, np.int64_t i1) noexcept nogil:
 *     if i0 < i1: return i0
 *     return i1             # <<<<<<<<<<<<<<
 * 
 * cdef inline _ensure_code(arr):
 */
  __pyx_r = __pyx_v_i1;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":51
 *     return i1
 * 
 * cdef inline np.int64_t i64min(np.int64_t i0, np.int64_t i1) noexcept nogil:             # <<<<<<<<<<<<<<
 *     if i0 < i1: return i0
 *     return i1
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/utilities/lib/fp_utils.pxd":55
 *     return i1
 * 
 * cdef inline _ensure_code(arr):             # <<<<<<<<<<<<<<
 *     if hasattr(arr, "units"):
 *         if "code_length" == str(arr.units):
 */

static CYTHON_INLINE PyObject *__pyx_f_2yt_9utilities_3lib_8fp_utils__ensure_code(PyObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_ensure_code", 0);

  /* "yt/utilities/lib/fp_utils.pxd":56
 * 
 * cdef inline _ensure_code(arr):
 *     if hasattr(arr, "units"):             # <<<<<<<<<<<<<<
 *         if "code_length" == str(arr.units):
 *             return arr
 */
  __pyx_t_1 = __Pyx_HasAttr(__pyx_v_arr, __pyx_n_u_units); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 56, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/fp_utils.pxd":57
 * cdef inline _ensure_code(arr):
 *     if hasattr(arr, "units"):
 *         if "code_length" == str(arr.units):             # <<<<<<<<<<<<<<
 *             return arr
 *         arr.convert_to_units("code_length")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_n_s_units); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_n_u_code_length, __pyx_t_4, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 57, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "yt/utilities/lib/fp_utils.pxd":58
 *     if hasattr(arr, "units"):
 *         if "code_length" == str(arr.units):
 *             return arr             # <<<<<<<<<<<<<<
 *         arr.convert_to_units("code_length")
 *     return arr
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_arr);
      __pyx_r = __pyx_v_arr;
      goto __pyx_L0;

      /* "yt/utilities/lib/fp_utils.pxd":57
 * cdef inline _ensure_code(arr):
 *     if hasattr(arr, "units"):
 *         if "code_length" == str(arr.units):             # <<<<<<<<<<<<<<
 *             return arr
 *         arr.convert_to_units("code_length")
 */
    }

    /* "yt/utilities/lib/fp_utils.pxd":59
 *         if "code_length" == str(arr.units):
 *             return arr
 *         arr.convert_to_units("code_length")             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_arr, __pyx_n_s_convert_to_units); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_n_u_code_length) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_n_u_code_length);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "yt/utilities/lib/fp_utils.pxd":56
 * 
 * cdef inline _ensure_code(arr):
 *     if hasattr(arr, "units"):             # <<<<<<<<<<<<<<
 *         if "code_length" == str(arr.units):
 *             return arr
 */
  }

  /* "yt/utilities/lib/fp_utils.pxd":60
 *             return arr
 *         arr.convert_to_units("code_length")
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * ctypedef fused any_float:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_arr);
  __pyx_r = __pyx_v_arr;
  goto __pyx_L0;

  /* "yt/utilities/lib/fp_utils.pxd":55
 *     return i1
 * 
 * cdef inline _ensure_code(arr):             # <<<<<<<<<<<<<<
 *     if hasattr(arr, "units"):
 *         if "code_length" == str(arr.units):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("yt.utilities.lib.fp_utils._ensure_code", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oct_visitors.pxd":51
 *     cdef void visit(self, Oct*, np.uint8_t selected)
 * 
 *     cdef inline int oind(self):             # <<<<<<<<<<<<<<
 *         cdef int d = self.nz
 *         return (((self.ind[0]*d)+self.ind[1])*d+self.ind[2])
 */

static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_10OctVisitor_oind(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *__pyx_v_self) {
  int __pyx_v_d;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_int8_t __pyx_t_1;
  __Pyx_RefNannySetupContext("oind", 0);

  /* "oct_visitors.pxd":52
 * 
 *     cdef inline int oind(self):
 *         cdef int d = self.nz             # <<<<<<<<<<<<<<
 *         return (((self.ind[0]*d)+self.ind[1])*d+self.ind[2])
 * 
 */
  __pyx_t_1 = __pyx_v_self->nz;
  __pyx_v_d = __pyx_t_1;

  /* "oct_visitors.pxd":53
 *     cdef inline int oind(self):
 *         cdef int d = self.nz
 *         return (((self.ind[0]*d)+self.ind[1])*d+self.ind[2])             # <<<<<<<<<<<<<<
 * 
 *     cdef inline int rind(self):
 */
  __pyx_r = (((((__pyx_v_self->ind[0]) * __pyx_v_d) + (__pyx_v_self->ind[1])) * __pyx_v_d) + (__pyx_v_self->ind[2]));
  goto __pyx_L0;

  /* "oct_visitors.pxd":51
 *     cdef void visit(self, Oct*, np.uint8_t selected)
 * 
 *     cdef inline int oind(self):             # <<<<<<<<<<<<<<
 *         cdef int d = self.nz
 *         return (((self.ind[0]*d)+self.ind[1])*d+self.ind[2])
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oct_visitors.pxd":55
 *         return (((self.ind[0]*d)+self.ind[1])*d+self.ind[2])
 * 
 *     cdef inline int rind(self):             # <<<<<<<<<<<<<<
 *         cdef int d = self.nz
 *         return (((self.ind[2]*d)+self.ind[1])*d+self.ind[0])
 */

static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_10OctVisitor_rind(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor *__pyx_v_self) {
  int __pyx_v_d;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_int8_t __pyx_t_1;
  __Pyx_RefNannySetupContext("rind", 0);

  /* "oct_visitors.pxd":56
 * 
 *     cdef inline int rind(self):
 *         cdef int d = self.nz             # <<<<<<<<<<<<<<
 *         return (((self.ind[2]*d)+self.ind[1])*d+self.ind[0])
 * 
 */
  __pyx_t_1 = __pyx_v_self->nz;
  __pyx_v_d = __pyx_t_1;

  /* "oct_visitors.pxd":57
 *     cdef inline int rind(self):
 *         cdef int d = self.nz
 *         return (((self.ind[2]*d)+self.ind[1])*d+self.ind[0])             # <<<<<<<<<<<<<<
 * 
 * cdef class CountTotalOcts(OctVisitor):
 */
  __pyx_r = (((((__pyx_v_self->ind[2]) * __pyx_v_d) + (__pyx_v_self->ind[1])) * __pyx_v_d) + (__pyx_v_self->ind[0]));
  goto __pyx_L0;

  /* "oct_visitors.pxd":55
 *         return (((self.ind[0]*d)+self.ind[1])*d+self.ind[2])
 * 
 *     cdef inline int rind(self):             # <<<<<<<<<<<<<<
 *         cdef int d = self.nz
 *         return (((self.ind[2]*d)+self.ind[1])*d+self.ind[0])
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oct_visitors.pxd":143
 *     cdef np.uint64_t[:] morton_ind
 * 
 * cdef inline int cind(int i, int j, int k) nogil:             # <<<<<<<<<<<<<<
 *     # THIS ONLY WORKS FOR CHILDREN.  It is not general for zones.
 *     return (((i*2)+j)*2+k)
 */

static CYTHON_INLINE int __pyx_f_2yt_8geometry_12oct_visitors_cind(int __pyx_v_i, int __pyx_v_j, int __pyx_v_k) {
  int __pyx_r;

  /* "oct_visitors.pxd":145
 * cdef inline int cind(int i, int j, int k) nogil:
 *     # THIS ONLY WORKS FOR CHILDREN.  It is not general for zones.
 *     return (((i*2)+j)*2+k)             # <<<<<<<<<<<<<<
 * 
 * from .oct_container cimport OctreeContainer
 */
  __pyx_r = ((((__pyx_v_i * 2) + __pyx_v_j) * 2) + __pyx_v_k);
  goto __pyx_L0;

  /* "oct_visitors.pxd":143
 *     cdef np.uint64_t[:] morton_ind
 * 
 * cdef inline int cind(int i, int j, int k) nogil:             # <<<<<<<<<<<<<<
 *     # THIS ONLY WORKS FOR CHILDREN.  It is not general for zones.
 *     return (((i*2)+j)*2+k)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "oct_visitors.pxd":166
 *     cdef void set_neighbour_info(self, Oct *o, int ishift[3])
 * 
 *     cdef inline np.uint8_t neighbour_rind(self):             # <<<<<<<<<<<<<<
 *         cdef int d = self.nz
 *         return (((self.neigh_ind[2]*d)+self.neigh_ind[1])*d+self.neigh_ind[0])
 */

static CYTHON_INLINE __pyx_t_5numpy_uint8_t __pyx_f_2yt_8geometry_12oct_visitors_20BaseNeighbourVisitor_neighbour_rind(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor *__pyx_v_self) {
  int __pyx_v_d;
  __pyx_t_5numpy_uint8_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5numpy_int8_t __pyx_t_1;
  __Pyx_RefNannySetupContext("neighbour_rind", 0);

  /* "oct_visitors.pxd":167
 * 
 *     cdef inline np.uint8_t neighbour_rind(self):
 *         cdef int d = self.nz             # <<<<<<<<<<<<<<
 *         return (((self.neigh_ind[2]*d)+self.neigh_ind[1])*d+self.neigh_ind[0])
 * 
 */
  __pyx_t_1 = __pyx_v_self->__pyx_base.nz;
  __pyx_v_d = __pyx_t_1;

  /* "oct_visitors.pxd":168
 *     cdef inline np.uint8_t neighbour_rind(self):
 *         cdef int d = self.nz
 *         return (((self.neigh_ind[2]*d)+self.neigh_ind[1])*d+self.neigh_ind[0])             # <<<<<<<<<<<<<<
 * 
 * cdef class NeighbourCellIndexVisitor(BaseNeighbourVisitor):
 */
  __pyx_r = (((((__pyx_v_self->neigh_ind[2]) * __pyx_v_d) + (__pyx_v_self->neigh_ind[1])) * __pyx_v_d) + (__pyx_v_self->neigh_ind[0]));
  goto __pyx_L0;

  /* "oct_visitors.pxd":166
 *     cdef void set_neighbour_info(self, Oct *o, int ishift[3])
 * 
 *     cdef inline np.uint8_t neighbour_rind(self):             # <<<<<<<<<<<<<<
 *         cdef int d = self.nz
 *         return (((self.neigh_ind[2]*d)+self.neigh_ind[1])*d+self.neigh_ind[0])
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":24
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.int64_t ifrexp(np.float64_t x, np.int64_t *e):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t m
 *     cdef int e0 = 0
 */

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_ifrexp(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_int64_t *__pyx_v_e) {
  __pyx_t_5numpy_float64_t __pyx_v_m;
  int __pyx_v_e0;
  __pyx_t_5numpy_int64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ifrexp", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":26
 * cdef inline np.int64_t ifrexp(np.float64_t x, np.int64_t *e):
 *     cdef np.float64_t m
 *     cdef int e0 = 0             # <<<<<<<<<<<<<<
 *     m = frexp(x,&e0)
 *     e[0] = <np.int64_t>e0
 */
  __pyx_v_e0 = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":27
 *     cdef np.float64_t m
 *     cdef int e0 = 0
 *     m = frexp(x,&e0)             # <<<<<<<<<<<<<<
 *     e[0] = <np.int64_t>e0
 *     return <np.int64_t>ldexp(m,<int>DBL_MANT_DIG)
 */
  __pyx_v_m = frexp(__pyx_v_x, (&__pyx_v_e0));

  /* "yt/utilities/lib/geometry_utils.pxd":28
 *     cdef int e0 = 0
 *     m = frexp(x,&e0)
 *     e[0] = <np.int64_t>e0             # <<<<<<<<<<<<<<
 *     return <np.int64_t>ldexp(m,<int>DBL_MANT_DIG)
 * 
 */
  (__pyx_v_e[0]) = ((__pyx_t_5numpy_int64_t)__pyx_v_e0);

  /* "yt/utilities/lib/geometry_utils.pxd":29
 *     m = frexp(x,&e0)
 *     e[0] = <np.int64_t>e0
 *     return <np.int64_t>ldexp(m,<int>DBL_MANT_DIG)             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __pyx_r = ((__pyx_t_5numpy_int64_t)ldexp(__pyx_v_m, ((int)DBL_MANT_DIG)));
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":24
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.int64_t ifrexp(np.float64_t x, np.int64_t *e):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t m
 *     cdef int e0 = 0
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":34
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.int64_t msdb(np.int64_t a, np.int64_t b):             # <<<<<<<<<<<<<<
 *     """Get the most significant differing bit between a and b."""
 *     cdef np.int64_t c, ndx
 */

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_msdb(__pyx_t_5numpy_int64_t __pyx_v_a, __pyx_t_5numpy_int64_t __pyx_v_b) {
  __pyx_t_5numpy_int64_t __pyx_v_c;
  __pyx_t_5numpy_int64_t __pyx_v_ndx;
  __pyx_t_5numpy_int64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("msdb", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":37
 *     """Get the most significant differing bit between a and b."""
 *     cdef np.int64_t c, ndx
 *     c = a ^ b             # <<<<<<<<<<<<<<
 *     ndx = 0
 *     while (0 < c):
 */
  __pyx_v_c = (__pyx_v_a ^ __pyx_v_b);

  /* "yt/utilities/lib/geometry_utils.pxd":38
 *     cdef np.int64_t c, ndx
 *     c = a ^ b
 *     ndx = 0             # <<<<<<<<<<<<<<
 *     while (0 < c):
 *         c = (c >> 1)
 */
  __pyx_v_ndx = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":39
 *     c = a ^ b
 *     ndx = 0
 *     while (0 < c):             # <<<<<<<<<<<<<<
 *         c = (c >> 1)
 *         ndx+=1
 */
  while (1) {
    __pyx_t_1 = ((0 < __pyx_v_c) != 0);
    if (!__pyx_t_1) break;

    /* "yt/utilities/lib/geometry_utils.pxd":40
 *     ndx = 0
 *     while (0 < c):
 *         c = (c >> 1)             # <<<<<<<<<<<<<<
 *         ndx+=1
 *     return ndx
 */
    __pyx_v_c = (__pyx_v_c >> 1);

    /* "yt/utilities/lib/geometry_utils.pxd":41
 *     while (0 < c):
 *         c = (c >> 1)
 *         ndx+=1             # <<<<<<<<<<<<<<
 *     return ndx
 * 
 */
    __pyx_v_ndx = (__pyx_v_ndx + 1);
  }

  /* "yt/utilities/lib/geometry_utils.pxd":42
 *         c = (c >> 1)
 *         ndx+=1
 *     return ndx             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __pyx_r = __pyx_v_ndx;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":34
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.int64_t msdb(np.int64_t a, np.int64_t b):             # <<<<<<<<<<<<<<
 *     """Get the most significant differing bit between a and b."""
 *     cdef np.int64_t c, ndx
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":47
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.int64_t xor_msb(np.float64_t a, np.float64_t b):             # <<<<<<<<<<<<<<
 *     """Get the exponent of the highest differing bit between a and b"""
 *     # Get mantissa and exponents for each number
 */

static CYTHON_INLINE __pyx_t_5numpy_int64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_xor_msb(__pyx_t_5numpy_float64_t __pyx_v_a, __pyx_t_5numpy_float64_t __pyx_v_b) {
  __pyx_t_5numpy_int64_t __pyx_v_a_m;
  __pyx_t_5numpy_int64_t __pyx_v_a_e;
  __pyx_t_5numpy_int64_t __pyx_v_b_m;
  __pyx_t_5numpy_int64_t __pyx_v_b_e;
  __pyx_t_5numpy_int64_t __pyx_v_x;
  __pyx_t_5numpy_int64_t __pyx_v_y;
  __pyx_t_5numpy_int64_t __pyx_v_z;
  __pyx_t_5numpy_int64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("xor_msb", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":51
 *     # Get mantissa and exponents for each number
 *     cdef np.int64_t a_m, a_e, b_m, b_e, x, y, z
 *     b_e = 0             # <<<<<<<<<<<<<<
 *     a_e = 0
 *     a_m = ifrexp(a,&a_e)
 */
  __pyx_v_b_e = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":52
 *     cdef np.int64_t a_m, a_e, b_m, b_e, x, y, z
 *     b_e = 0
 *     a_e = 0             # <<<<<<<<<<<<<<
 *     a_m = ifrexp(a,&a_e)
 *     b_m = ifrexp(b,&b_e)
 */
  __pyx_v_a_e = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":53
 *     b_e = 0
 *     a_e = 0
 *     a_m = ifrexp(a,&a_e)             # <<<<<<<<<<<<<<
 *     b_m = ifrexp(b,&b_e)
 *     x = <np.int64_t> ((a_e+1)*DBL_MANT_DIG)
 */
  __pyx_v_a_m = __pyx_f_2yt_9utilities_3lib_14geometry_utils_ifrexp(__pyx_v_a, (&__pyx_v_a_e));

  /* "yt/utilities/lib/geometry_utils.pxd":54
 *     a_e = 0
 *     a_m = ifrexp(a,&a_e)
 *     b_m = ifrexp(b,&b_e)             # <<<<<<<<<<<<<<
 *     x = <np.int64_t> ((a_e+1)*DBL_MANT_DIG)
 *     y = <np.int64_t> ((b_e+1)*DBL_MANT_DIG)
 */
  __pyx_v_b_m = __pyx_f_2yt_9utilities_3lib_14geometry_utils_ifrexp(__pyx_v_b, (&__pyx_v_b_e));

  /* "yt/utilities/lib/geometry_utils.pxd":55
 *     a_m = ifrexp(a,&a_e)
 *     b_m = ifrexp(b,&b_e)
 *     x = <np.int64_t> ((a_e+1)*DBL_MANT_DIG)             # <<<<<<<<<<<<<<
 *     y = <np.int64_t> ((b_e+1)*DBL_MANT_DIG)
 *     # Compare mantissa if exponents equal
 */
  __pyx_v_x = ((__pyx_t_5numpy_int64_t)((__pyx_v_a_e + 1) * DBL_MANT_DIG));

  /* "yt/utilities/lib/geometry_utils.pxd":56
 *     b_m = ifrexp(b,&b_e)
 *     x = <np.int64_t> ((a_e+1)*DBL_MANT_DIG)
 *     y = <np.int64_t> ((b_e+1)*DBL_MANT_DIG)             # <<<<<<<<<<<<<<
 *     # Compare mantissa if exponents equal
 *     if x == y:
 */
  __pyx_v_y = ((__pyx_t_5numpy_int64_t)((__pyx_v_b_e + 1) * DBL_MANT_DIG));

  /* "yt/utilities/lib/geometry_utils.pxd":58
 *     y = <np.int64_t> ((b_e+1)*DBL_MANT_DIG)
 *     # Compare mantissa if exponents equal
 *     if x == y:             # <<<<<<<<<<<<<<
 *         if a_m == b_m: return 0
 *         z = msdb(a_m,b_m)
 */
  __pyx_t_1 = ((__pyx_v_x == __pyx_v_y) != 0);
  if (__pyx_t_1) {

    /* "yt/utilities/lib/geometry_utils.pxd":59
 *     # Compare mantissa if exponents equal
 *     if x == y:
 *         if a_m == b_m: return 0             # <<<<<<<<<<<<<<
 *         z = msdb(a_m,b_m)
 *         #if 1: return z
 */
    __pyx_t_1 = ((__pyx_v_a_m == __pyx_v_b_m) != 0);
    if (__pyx_t_1) {
      __pyx_r = 0;
      goto __pyx_L0;
    }

    /* "yt/utilities/lib/geometry_utils.pxd":60
 *     if x == y:
 *         if a_m == b_m: return 0
 *         z = msdb(a_m,b_m)             # <<<<<<<<<<<<<<
 *         #if 1: return z
 *         x = x - z
 */
    __pyx_v_z = __pyx_f_2yt_9utilities_3lib_14geometry_utils_msdb(__pyx_v_a_m, __pyx_v_b_m);

    /* "yt/utilities/lib/geometry_utils.pxd":62
 *         z = msdb(a_m,b_m)
 *         #if 1: return z
 *         x = x - z             # <<<<<<<<<<<<<<
 *         return x-1 # required so that xor_msb(0.0,1.0)!=xor_msb(1.0,1.0)
 *     # Otherwise return largest exponent
 */
    __pyx_v_x = (__pyx_v_x - __pyx_v_z);

    /* "yt/utilities/lib/geometry_utils.pxd":63
 *         #if 1: return z
 *         x = x - z
 *         return x-1 # required so that xor_msb(0.0,1.0)!=xor_msb(1.0,1.0)             # <<<<<<<<<<<<<<
 *     # Otherwise return largest exponent
 *     if y < x:
 */
    __pyx_r = (__pyx_v_x - 1);
    goto __pyx_L0;

    /* "yt/utilities/lib/geometry_utils.pxd":58
 *     y = <np.int64_t> ((b_e+1)*DBL_MANT_DIG)
 *     # Compare mantissa if exponents equal
 *     if x == y:             # <<<<<<<<<<<<<<
 *         if a_m == b_m: return 0
 *         z = msdb(a_m,b_m)
 */
  }

  /* "yt/utilities/lib/geometry_utils.pxd":65
 *         return x-1 # required so that xor_msb(0.0,1.0)!=xor_msb(1.0,1.0)
 *     # Otherwise return largest exponent
 *     if y < x:             # <<<<<<<<<<<<<<
 *         return x
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_y < __pyx_v_x) != 0);
  if (__pyx_t_1) {

    /* "yt/utilities/lib/geometry_utils.pxd":66
 *     # Otherwise return largest exponent
 *     if y < x:
 *         return x             # <<<<<<<<<<<<<<
 *     else:
 *         return y
 */
    __pyx_r = __pyx_v_x;
    goto __pyx_L0;

    /* "yt/utilities/lib/geometry_utils.pxd":65
 *         return x-1 # required so that xor_msb(0.0,1.0)!=xor_msb(1.0,1.0)
 *     # Otherwise return largest exponent
 *     if y < x:             # <<<<<<<<<<<<<<
 *         return x
 *     else:
 */
  }

  /* "yt/utilities/lib/geometry_utils.pxd":68
 *         return x
 *     else:
 *         return y             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = __pyx_v_y;
    goto __pyx_L0;
  }

  /* "yt/utilities/lib/geometry_utils.pxd":47
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.int64_t xor_msb(np.float64_t a, np.float64_t b):             # <<<<<<<<<<<<<<
 *     """Get the exponent of the highest differing bit between a and b"""
 *     # Get mantissa and exponents for each number
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":73
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline int compare_floats_morton(np.float64_t p[3], np.float64_t q[3]):             # <<<<<<<<<<<<<<
 *     cdef int j, out, dim
 *     cdef np.int64_t x, y
 */

static CYTHON_INLINE int __pyx_f_2yt_9utilities_3lib_14geometry_utils_compare_floats_morton(__pyx_t_5numpy_float64_t *__pyx_v_p, __pyx_t_5numpy_float64_t *__pyx_v_q) {
  int __pyx_v_j;
  int __pyx_v_out;
  int __pyx_v_dim;
  __pyx_t_5numpy_int64_t __pyx_v_x;
  __pyx_t_5numpy_int64_t __pyx_v_y;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("compare_floats_morton", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":76
 *     cdef int j, out, dim
 *     cdef np.int64_t x, y
 *     x = -9999999999             # <<<<<<<<<<<<<<
 *     y = 0
 *     dim = 0
 */
  __pyx_v_x = -9999999999LL;

  /* "yt/utilities/lib/geometry_utils.pxd":77
 *     cdef np.int64_t x, y
 *     x = -9999999999
 *     y = 0             # <<<<<<<<<<<<<<
 *     dim = 0
 *     for j in range(3):#[::-1]:
 */
  __pyx_v_y = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":78
 *     x = -9999999999
 *     y = 0
 *     dim = 0             # <<<<<<<<<<<<<<
 *     for j in range(3):#[::-1]:
 *         y = xor_msb(p[j],q[j])
 */
  __pyx_v_dim = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":79
 *     y = 0
 *     dim = 0
 *     for j in range(3):#[::-1]:             # <<<<<<<<<<<<<<
 *         y = xor_msb(p[j],q[j])
 *         if x < y:
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_j = __pyx_t_1;

    /* "yt/utilities/lib/geometry_utils.pxd":80
 *     dim = 0
 *     for j in range(3):#[::-1]:
 *         y = xor_msb(p[j],q[j])             # <<<<<<<<<<<<<<
 *         if x < y:
 *            x = y
 */
    __pyx_v_y = __pyx_f_2yt_9utilities_3lib_14geometry_utils_xor_msb((__pyx_v_p[__pyx_v_j]), (__pyx_v_q[__pyx_v_j]));

    /* "yt/utilities/lib/geometry_utils.pxd":81
 *     for j in range(3):#[::-1]:
 *         y = xor_msb(p[j],q[j])
 *         if x < y:             # <<<<<<<<<<<<<<
 *            x = y
 *            dim = j
 */
    __pyx_t_2 = ((__pyx_v_x < __pyx_v_y) != 0);
    if (__pyx_t_2) {

      /* "yt/utilities/lib/geometry_utils.pxd":82
 *         y = xor_msb(p[j],q[j])
 *         if x < y:
 *            x = y             # <<<<<<<<<<<<<<
 *            dim = j
 *     if p[dim] < q[dim]:
 */
      __pyx_v_x = __pyx_v_y;

      /* "yt/utilities/lib/geometry_utils.pxd":83
 *         if x < y:
 *            x = y
 *            dim = j             # <<<<<<<<<<<<<<
 *     if p[dim] < q[dim]:
 *         out = 1
 */
      __pyx_v_dim = __pyx_v_j;

      /* "yt/utilities/lib/geometry_utils.pxd":81
 *     for j in range(3):#[::-1]:
 *         y = xor_msb(p[j],q[j])
 *         if x < y:             # <<<<<<<<<<<<<<
 *            x = y
 *            dim = j
 */
    }
  }

  /* "yt/utilities/lib/geometry_utils.pxd":84
 *            x = y
 *            dim = j
 *     if p[dim] < q[dim]:             # <<<<<<<<<<<<<<
 *         out = 1
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_p[__pyx_v_dim]) < (__pyx_v_q[__pyx_v_dim])) != 0);
  if (__pyx_t_2) {

    /* "yt/utilities/lib/geometry_utils.pxd":85
 *            dim = j
 *     if p[dim] < q[dim]:
 *         out = 1             # <<<<<<<<<<<<<<
 *     else:
 *         out = 0
 */
    __pyx_v_out = 1;

    /* "yt/utilities/lib/geometry_utils.pxd":84
 *            x = y
 *            dim = j
 *     if p[dim] < q[dim]:             # <<<<<<<<<<<<<<
 *         out = 1
 *     else:
 */
    goto __pyx_L6;
  }

  /* "yt/utilities/lib/geometry_utils.pxd":87
 *         out = 1
 *     else:
 *         out = 0             # <<<<<<<<<<<<<<
 *     return out
 * 
 */
  /*else*/ {
    __pyx_v_out = 0;
  }
  __pyx_L6:;

  /* "yt/utilities/lib/geometry_utils.pxd":88
 *     else:
 *         out = 0
 *     return out             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __pyx_r = __pyx_v_out;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":73
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline int compare_floats_morton(np.float64_t p[3], np.float64_t q[3]):             # <<<<<<<<<<<<<<
 *     cdef int j, out, dim
 *     cdef np.int64_t x, y
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":93
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.float64_t euclidean_distance(np.float64_t[:] p, np.float64_t[:] q):             # <<<<<<<<<<<<<<
 *     cdef int j
 *     cdef np.float64_t d
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_euclidean_distance(__Pyx_memviewslice __pyx_v_p, __Pyx_memviewslice __pyx_v_q) {
  int __pyx_v_j;
  __pyx_t_5numpy_float64_t __pyx_v_d;
  __pyx_t_5numpy_float64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("euclidean_distance", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":96
 *     cdef int j
 *     cdef np.float64_t d
 *     d = 0.0             # <<<<<<<<<<<<<<
 *     for j in range(3):
 *         d+=(p[j]-q[j])**2
 */
  __pyx_v_d = 0.0;

  /* "yt/utilities/lib/geometry_utils.pxd":97
 *     cdef np.float64_t d
 *     d = 0.0
 *     for j in range(3):             # <<<<<<<<<<<<<<
 *         d+=(p[j]-q[j])**2
 *     return sqrt(d)
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_j = __pyx_t_1;

    /* "yt/utilities/lib/geometry_utils.pxd":98
 *     d = 0.0
 *     for j in range(3):
 *         d+=(p[j]-q[j])**2             # <<<<<<<<<<<<<<
 *     return sqrt(d)
 * 
 */
    __pyx_t_2 = __pyx_v_j;
    __pyx_t_3 = -1;
    if (__pyx_t_2 < 0) {
      __pyx_t_2 += __pyx_v_p.shape[0];
      if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_2 >= __pyx_v_p.shape[0])) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(4, 98, __pyx_L1_error)
    }
    __pyx_t_4 = __pyx_v_j;
    __pyx_t_3 = -1;
    if (__pyx_t_4 < 0) {
      __pyx_t_4 += __pyx_v_q.shape[0];
      if (unlikely(__pyx_t_4 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_4 >= __pyx_v_q.shape[0])) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(4, 98, __pyx_L1_error)
    }
    __pyx_v_d = (__pyx_v_d + pow(((*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_p.data + __pyx_t_2 * __pyx_v_p.strides[0]) ))) - (*((__pyx_t_5numpy_float64_t *) ( /* dim=0 */ (__pyx_v_q.data + __pyx_t_4 * __pyx_v_q.strides[0]) )))), 2.0));
  }

  /* "yt/utilities/lib/geometry_utils.pxd":99
 *     for j in range(3):
 *         d+=(p[j]-q[j])**2
 *     return sqrt(d)             # <<<<<<<<<<<<<<
 * 
 * # Todo: allow radius reported independently in each dimension for rectangular domain
 */
  __pyx_r = sqrt(__pyx_v_d);
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":93
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.float64_t euclidean_distance(np.float64_t[:] p, np.float64_t[:] q):             # <<<<<<<<<<<<<<
 *     cdef int j
 *     cdef np.float64_t d
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("yt.utilities.lib.geometry_utils.euclidean_distance", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":105
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.float64_t smallest_quadtree_box(np.float64_t p[3], np.float64_t q[3], np.int32_t order,             # <<<<<<<<<<<<<<
 *                                                np.float64_t DLE[3], np.float64_t DRE[3],
 *                                                np.float64_t *cx, np.float64_t *cy, np.float64_t *cz):
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_smallest_quadtree_box(__pyx_t_5numpy_float64_t *__pyx_v_p, __pyx_t_5numpy_float64_t *__pyx_v_q, __pyx_t_5numpy_int32_t __pyx_v_order, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_DRE, __pyx_t_5numpy_float64_t *__pyx_v_cx, __pyx_t_5numpy_float64_t *__pyx_v_cy, __pyx_t_5numpy_float64_t *__pyx_v_cz) {
  int __pyx_v_j;
  __pyx_t_5numpy_float64_t __pyx_v_c[3];
  __pyx_t_5numpy_uint64_t __pyx_v_pidx[3];
  __pyx_t_5numpy_uint64_t __pyx_v_pidx_next[3];
  __pyx_t_5numpy_uint64_t __pyx_v_qidx_next[3];
  __pyx_t_5numpy_float64_t __pyx_v_dds[3];
  __pyx_t_5numpy_float64_t __pyx_v_rad;
  int __pyx_v_lvl;
  int __pyx_v_done;
  __pyx_t_5numpy_float64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("smallest_quadtree_box", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":112
 *     cdef np.uint64_t pidx[3]
 *     # cdef np.uint64_t qidx[3]
 *     for j in range(3):             # <<<<<<<<<<<<<<
 *         pidx[j] = 0
 *         # qidx[j] = 0
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_j = __pyx_t_1;

    /* "yt/utilities/lib/geometry_utils.pxd":113
 *     # cdef np.uint64_t qidx[3]
 *     for j in range(3):
 *         pidx[j] = 0             # <<<<<<<<<<<<<<
 *         # qidx[j] = 0
 *     cdef np.uint64_t pidx_next[3]
 */
    (__pyx_v_pidx[__pyx_v_j]) = 0;
  }

  /* "yt/utilities/lib/geometry_utils.pxd":119
 *     cdef np.float64_t dds[3]
 *     cdef np.float64_t rad
 *     cdef int lvl = 0             # <<<<<<<<<<<<<<
 *     cdef int done = 0
 *     while not done:
 */
  __pyx_v_lvl = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":120
 *     cdef np.float64_t rad
 *     cdef int lvl = 0
 *     cdef int done = 0             # <<<<<<<<<<<<<<
 *     while not done:
 *         if (lvl+1 >= order):
 */
  __pyx_v_done = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":121
 *     cdef int lvl = 0
 *     cdef int done = 0
 *     while not done:             # <<<<<<<<<<<<<<
 *         if (lvl+1 >= order):
 *             done = 1
 */
  while (1) {
    __pyx_t_2 = ((!(__pyx_v_done != 0)) != 0);
    if (!__pyx_t_2) break;

    /* "yt/utilities/lib/geometry_utils.pxd":122
 *     cdef int done = 0
 *     while not done:
 *         if (lvl+1 >= order):             # <<<<<<<<<<<<<<
 *             done = 1
 *         for j in range(3):
 */
    __pyx_t_2 = (((__pyx_v_lvl + 1) >= __pyx_v_order) != 0);
    if (__pyx_t_2) {

      /* "yt/utilities/lib/geometry_utils.pxd":123
 *     while not done:
 *         if (lvl+1 >= order):
 *             done = 1             # <<<<<<<<<<<<<<
 *         for j in range(3):
 *             dds[j] = (DRE[j] - DLE[j])/(1 << (<int> lvl+1))
 */
      __pyx_v_done = 1;

      /* "yt/utilities/lib/geometry_utils.pxd":122
 *     cdef int done = 0
 *     while not done:
 *         if (lvl+1 >= order):             # <<<<<<<<<<<<<<
 *             done = 1
 *         for j in range(3):
 */
    }

    /* "yt/utilities/lib/geometry_utils.pxd":124
 *         if (lvl+1 >= order):
 *             done = 1
 *         for j in range(3):             # <<<<<<<<<<<<<<
 *             dds[j] = (DRE[j] - DLE[j])/(1 << (<int> lvl+1))
 *             pidx_next[j] = <np.uint64_t>((p[j] - DLE[j])/dds[j])
 */
    for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
      __pyx_v_j = __pyx_t_1;

      /* "yt/utilities/lib/geometry_utils.pxd":125
 *             done = 1
 *         for j in range(3):
 *             dds[j] = (DRE[j] - DLE[j])/(1 << (<int> lvl+1))             # <<<<<<<<<<<<<<
 *             pidx_next[j] = <np.uint64_t>((p[j] - DLE[j])/dds[j])
 *             qidx_next[j] = <np.uint64_t>((q[j] - DLE[j])/dds[j])
 */
      (__pyx_v_dds[__pyx_v_j]) = (((__pyx_v_DRE[__pyx_v_j]) - (__pyx_v_DLE[__pyx_v_j])) / ((__pyx_t_5numpy_float64_t)(1 << (((int)__pyx_v_lvl) + 1))));

      /* "yt/utilities/lib/geometry_utils.pxd":126
 *         for j in range(3):
 *             dds[j] = (DRE[j] - DLE[j])/(1 << (<int> lvl+1))
 *             pidx_next[j] = <np.uint64_t>((p[j] - DLE[j])/dds[j])             # <<<<<<<<<<<<<<
 *             qidx_next[j] = <np.uint64_t>((q[j] - DLE[j])/dds[j])
 *         for j in range(3):
 */
      (__pyx_v_pidx_next[__pyx_v_j]) = ((__pyx_t_5numpy_uint64_t)(((__pyx_v_p[__pyx_v_j]) - (__pyx_v_DLE[__pyx_v_j])) / (__pyx_v_dds[__pyx_v_j])));

      /* "yt/utilities/lib/geometry_utils.pxd":127
 *             dds[j] = (DRE[j] - DLE[j])/(1 << (<int> lvl+1))
 *             pidx_next[j] = <np.uint64_t>((p[j] - DLE[j])/dds[j])
 *             qidx_next[j] = <np.uint64_t>((q[j] - DLE[j])/dds[j])             # <<<<<<<<<<<<<<
 *         for j in range(3):
 *             if pidx_next[j]!=qidx_next[j]:
 */
      (__pyx_v_qidx_next[__pyx_v_j]) = ((__pyx_t_5numpy_uint64_t)(((__pyx_v_q[__pyx_v_j]) - (__pyx_v_DLE[__pyx_v_j])) / (__pyx_v_dds[__pyx_v_j])));
    }

    /* "yt/utilities/lib/geometry_utils.pxd":128
 *             pidx_next[j] = <np.uint64_t>((p[j] - DLE[j])/dds[j])
 *             qidx_next[j] = <np.uint64_t>((q[j] - DLE[j])/dds[j])
 *         for j in range(3):             # <<<<<<<<<<<<<<
 *             if pidx_next[j]!=qidx_next[j]:
 *                 done = 1
 */
    for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
      __pyx_v_j = __pyx_t_1;

      /* "yt/utilities/lib/geometry_utils.pxd":129
 *             qidx_next[j] = <np.uint64_t>((q[j] - DLE[j])/dds[j])
 *         for j in range(3):
 *             if pidx_next[j]!=qidx_next[j]:             # <<<<<<<<<<<<<<
 *                 done = 1
 *                 break
 */
      __pyx_t_2 = (((__pyx_v_pidx_next[__pyx_v_j]) != (__pyx_v_qidx_next[__pyx_v_j])) != 0);
      if (__pyx_t_2) {

        /* "yt/utilities/lib/geometry_utils.pxd":130
 *         for j in range(3):
 *             if pidx_next[j]!=qidx_next[j]:
 *                 done = 1             # <<<<<<<<<<<<<<
 *                 break
 *         if not done:
 */
        __pyx_v_done = 1;

        /* "yt/utilities/lib/geometry_utils.pxd":131
 *             if pidx_next[j]!=qidx_next[j]:
 *                 done = 1
 *                 break             # <<<<<<<<<<<<<<
 *         if not done:
 *             for j in range(3):
 */
        goto __pyx_L11_break;

        /* "yt/utilities/lib/geometry_utils.pxd":129
 *             qidx_next[j] = <np.uint64_t>((q[j] - DLE[j])/dds[j])
 *         for j in range(3):
 *             if pidx_next[j]!=qidx_next[j]:             # <<<<<<<<<<<<<<
 *                 done = 1
 *                 break
 */
      }
    }
    __pyx_L11_break:;

    /* "yt/utilities/lib/geometry_utils.pxd":132
 *                 done = 1
 *                 break
 *         if not done:             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 pidx[j] = pidx_next[j]
 */
    __pyx_t_2 = ((!(__pyx_v_done != 0)) != 0);
    if (__pyx_t_2) {

      /* "yt/utilities/lib/geometry_utils.pxd":133
 *                 break
 *         if not done:
 *             for j in range(3):             # <<<<<<<<<<<<<<
 *                 pidx[j] = pidx_next[j]
 *                 # qidx[j] = qidx_next[j]
 */
      for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
        __pyx_v_j = __pyx_t_1;

        /* "yt/utilities/lib/geometry_utils.pxd":134
 *         if not done:
 *             for j in range(3):
 *                 pidx[j] = pidx_next[j]             # <<<<<<<<<<<<<<
 *                 # qidx[j] = qidx_next[j]
 *             lvl+=1
 */
        (__pyx_v_pidx[__pyx_v_j]) = (__pyx_v_pidx_next[__pyx_v_j]);
      }

      /* "yt/utilities/lib/geometry_utils.pxd":136
 *                 pidx[j] = pidx_next[j]
 *                 # qidx[j] = qidx_next[j]
 *             lvl+=1             # <<<<<<<<<<<<<<
 *     rad = 0.0
 *     for j in range(3):
 */
      __pyx_v_lvl = (__pyx_v_lvl + 1);

      /* "yt/utilities/lib/geometry_utils.pxd":132
 *                 done = 1
 *                 break
 *         if not done:             # <<<<<<<<<<<<<<
 *             for j in range(3):
 *                 pidx[j] = pidx_next[j]
 */
    }
  }

  /* "yt/utilities/lib/geometry_utils.pxd":137
 *                 # qidx[j] = qidx_next[j]
 *             lvl+=1
 *     rad = 0.0             # <<<<<<<<<<<<<<
 *     for j in range(3):
 *         dds[j] = (DRE[j] - DLE[j])/(1 << lvl)
 */
  __pyx_v_rad = 0.0;

  /* "yt/utilities/lib/geometry_utils.pxd":138
 *             lvl+=1
 *     rad = 0.0
 *     for j in range(3):             # <<<<<<<<<<<<<<
 *         dds[j] = (DRE[j] - DLE[j])/(1 << lvl)
 *         c[j] = dds[j]*(<np.float64_t>pidx[j]+0.5)
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_j = __pyx_t_1;

    /* "yt/utilities/lib/geometry_utils.pxd":139
 *     rad = 0.0
 *     for j in range(3):
 *         dds[j] = (DRE[j] - DLE[j])/(1 << lvl)             # <<<<<<<<<<<<<<
 *         c[j] = dds[j]*(<np.float64_t>pidx[j]+0.5)
 *         rad+=((dds[j]/2.0)**2)
 */
    (__pyx_v_dds[__pyx_v_j]) = (((__pyx_v_DRE[__pyx_v_j]) - (__pyx_v_DLE[__pyx_v_j])) / ((__pyx_t_5numpy_float64_t)(1 << __pyx_v_lvl)));

    /* "yt/utilities/lib/geometry_utils.pxd":140
 *     for j in range(3):
 *         dds[j] = (DRE[j] - DLE[j])/(1 << lvl)
 *         c[j] = dds[j]*(<np.float64_t>pidx[j]+0.5)             # <<<<<<<<<<<<<<
 *         rad+=((dds[j]/2.0)**2)
 *     cx[0] = c[0]
 */
    (__pyx_v_c[__pyx_v_j]) = ((__pyx_v_dds[__pyx_v_j]) * (((__pyx_t_5numpy_float64_t)(__pyx_v_pidx[__pyx_v_j])) + 0.5));

    /* "yt/utilities/lib/geometry_utils.pxd":141
 *         dds[j] = (DRE[j] - DLE[j])/(1 << lvl)
 *         c[j] = dds[j]*(<np.float64_t>pidx[j]+0.5)
 *         rad+=((dds[j]/2.0)**2)             # <<<<<<<<<<<<<<
 *     cx[0] = c[0]
 *     cy[0] = c[1]
 */
    __pyx_v_rad = (__pyx_v_rad + pow(((__pyx_v_dds[__pyx_v_j]) / ((__pyx_t_5numpy_float64_t)2.0)), 2.0));
  }

  /* "yt/utilities/lib/geometry_utils.pxd":142
 *         c[j] = dds[j]*(<np.float64_t>pidx[j]+0.5)
 *         rad+=((dds[j]/2.0)**2)
 *     cx[0] = c[0]             # <<<<<<<<<<<<<<
 *     cy[0] = c[1]
 *     cz[0] = c[2]
 */
  (__pyx_v_cx[0]) = (__pyx_v_c[0]);

  /* "yt/utilities/lib/geometry_utils.pxd":143
 *         rad+=((dds[j]/2.0)**2)
 *     cx[0] = c[0]
 *     cy[0] = c[1]             # <<<<<<<<<<<<<<
 *     cz[0] = c[2]
 *     return sqrt(rad)
 */
  (__pyx_v_cy[0]) = (__pyx_v_c[1]);

  /* "yt/utilities/lib/geometry_utils.pxd":144
 *     cx[0] = c[0]
 *     cy[0] = c[1]
 *     cz[0] = c[2]             # <<<<<<<<<<<<<<
 *     return sqrt(rad)
 * 
 */
  (__pyx_v_cz[0]) = (__pyx_v_c[2]);

  /* "yt/utilities/lib/geometry_utils.pxd":145
 *     cy[0] = c[1]
 *     cz[0] = c[2]
 *     return sqrt(rad)             # <<<<<<<<<<<<<<
 * 
 * #-----------------------------------------------------------------------------
 */
  __pyx_r = sqrt(__pyx_v_rad);
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":105
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.float64_t smallest_quadtree_box(np.float64_t p[3], np.float64_t q[3], np.int32_t order,             # <<<<<<<<<<<<<<
 *                                                np.float64_t DLE[3], np.float64_t DRE[3],
 *                                                np.float64_t *cx, np.float64_t *cy, np.float64_t *cz):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":152
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.uint64_t spread_64bits_by3(np.uint64_t x):             # <<<<<<<<<<<<<<
 *     x=(x&(<np.uint64_t>0x00000000001FFFFF))
 *     x=(x|(x<<20))*(<np.uint64_t>0x000001FFC00003FF)
 */

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_64bits_by3(__pyx_t_5numpy_uint64_t __pyx_v_x) {
  __pyx_t_5numpy_uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("spread_64bits_by3", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":153
 * @cython.wraparound(False)
 * cdef inline np.uint64_t spread_64bits_by3(np.uint64_t x):
 *     x=(x&(<np.uint64_t>0x00000000001FFFFF))             # <<<<<<<<<<<<<<
 *     x=(x|(x<<20))*(<np.uint64_t>0x000001FFC00003FF)
 * 
 */
  __pyx_v_x = (__pyx_v_x & ((__pyx_t_5numpy_uint64_t)0x00000000001FFFFF));

  /* "yt/utilities/lib/geometry_utils.pxd":154
 * cdef inline np.uint64_t spread_64bits_by3(np.uint64_t x):
 *     x=(x&(<np.uint64_t>0x00000000001FFFFF))
 *     x=(x|(x<<20))*(<np.uint64_t>0x000001FFC00003FF)             # <<<<<<<<<<<<<<
 * 
 * #-----------------------------------------------------------------------------
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 20)) * ((__pyx_t_5numpy_uint64_t)0x000001FFC00003FF));

  /* "yt/utilities/lib/geometry_utils.pxd":152
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.uint64_t spread_64bits_by3(np.uint64_t x):             # <<<<<<<<<<<<<<
 *     x=(x&(<np.uint64_t>0x00000000001FFFFF))
 *     x=(x|(x<<20))*(<np.uint64_t>0x000001FFC00003FF)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":161
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.uint64_t spread_64bits_by2(np.uint64_t x):             # <<<<<<<<<<<<<<
 *     # This magic comes from http://stackoverflow.com/questions/1024754/how-to-compute-a-3d-morton-number-interleave-the-bits-of-3-ints
 *     # Only reversible up to 2097151
 */

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_64bits_by2(__pyx_t_5numpy_uint64_t __pyx_v_x) {
  __pyx_t_5numpy_uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("spread_64bits_by2", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":166
 *     # Select highest 21 bits (Required to be reversible to 21st bit)
 *     # x = ---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ---k jihg fedc ba98 7654 3210
 *     x=(x&(<np.uint64_t>0x00000000001FFFFF))             # <<<<<<<<<<<<<<
 *     # x = ---- ---- ---- ---- ---- ---k jihg fedc ba-- ---- ---- ---- ---- --98 7654 3210
 *     x=(x|(x<<20))&(<np.uint64_t>0x000001FFC00003FF)
 */
  __pyx_v_x = (__pyx_v_x & ((__pyx_t_5numpy_uint64_t)0x00000000001FFFFF));

  /* "yt/utilities/lib/geometry_utils.pxd":168
 *     x=(x&(<np.uint64_t>0x00000000001FFFFF))
 *     # x = ---- ---- ---- ---- ---- ---k jihg fedc ba-- ---- ---- ---- ---- --98 7654 3210
 *     x=(x|(x<<20))&(<np.uint64_t>0x000001FFC00003FF)             # <<<<<<<<<<<<<<
 *     # x = ---- ---- ---- -kji hgf- ---- ---- -edc ba-- ---- ---- 9876 5--- ---- ---4 3210
 *     x=(x|(x<<10))&(<np.uint64_t>0x0007E007C00F801F)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 20)) & ((__pyx_t_5numpy_uint64_t)0x000001FFC00003FF));

  /* "yt/utilities/lib/geometry_utils.pxd":170
 *     x=(x|(x<<20))&(<np.uint64_t>0x000001FFC00003FF)
 *     # x = ---- ---- ---- -kji hgf- ---- ---- -edc ba-- ---- ---- 9876 5--- ---- ---4 3210
 *     x=(x|(x<<10))&(<np.uint64_t>0x0007E007C00F801F)             # <<<<<<<<<<<<<<
 *     # x = ---- ---- -kji h--- -gf- ---- -edc ---- ba-- ---- 987- ---6 5--- ---4 32-- --10
 *     x=(x|(x<<4))&(<np.uint64_t>0x00786070C0E181C3)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 10)) & ((__pyx_t_5numpy_uint64_t)0x0007E007C00F801F));

  /* "yt/utilities/lib/geometry_utils.pxd":172
 *     x=(x|(x<<10))&(<np.uint64_t>0x0007E007C00F801F)
 *     # x = ---- ---- -kji h--- -gf- ---- -edc ---- ba-- ---- 987- ---6 5--- ---4 32-- --10
 *     x=(x|(x<<4))&(<np.uint64_t>0x00786070C0E181C3)             # <<<<<<<<<<<<<<
 *     # x = ---- ---k ji-- h--g --f- ---e d--c --b- -a-- --98 --7- -6-- 5--- -43- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x0199219243248649)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 4)) & ((__pyx_t_5numpy_uint64_t)0x00786070C0E181C3));

  /* "yt/utilities/lib/geometry_utils.pxd":174
 *     x=(x|(x<<4))&(<np.uint64_t>0x00786070C0E181C3)
 *     # x = ---- ---k ji-- h--g --f- ---e d--c --b- -a-- --98 --7- -6-- 5--- -43- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x0199219243248649)             # <<<<<<<<<<<<<<
 *     # x = ---- -kj- -i-- h--g --f- -e-- d--c --b- -a-- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x0649249249249249)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 2)) & ((__pyx_t_5numpy_uint64_t)0x0199219243248649));

  /* "yt/utilities/lib/geometry_utils.pxd":176
 *     x=(x|(x<<2))&(<np.uint64_t>0x0199219243248649)
 *     # x = ---- -kj- -i-- h--g --f- -e-- d--c --b- -a-- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x0649249249249249)             # <<<<<<<<<<<<<<
 *     # x = ---k --j- -i-- h--g --f- -e-- d--c --b- -a-- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x1249249249249249)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 2)) & ((__pyx_t_5numpy_uint64_t)0x0649249249249249));

  /* "yt/utilities/lib/geometry_utils.pxd":178
 *     x=(x|(x<<2))&(<np.uint64_t>0x0649249249249249)
 *     # x = ---k --j- -i-- h--g --f- -e-- d--c --b- -a-- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x1249249249249249)             # <<<<<<<<<<<<<<
 *     return x
 * 
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 2)) & ((__pyx_t_5numpy_uint64_t)0x1249249249249249));

  /* "yt/utilities/lib/geometry_utils.pxd":179
 *     # x = ---k --j- -i-- h--g --f- -e-- d--c --b- -a-- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint64_t>0x1249249249249249)
 *     return x             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __pyx_r = __pyx_v_x;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":161
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.uint64_t spread_64bits_by2(np.uint64_t x):             # <<<<<<<<<<<<<<
 *     # This magic comes from http://stackoverflow.com/questions/1024754/how-to-compute-a-3d-morton-number-interleave-the-bits-of-3-ints
 *     # Only reversible up to 2097151
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":184
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.uint64_t compact_64bits_by2(np.uint64_t x):             # <<<<<<<<<<<<<<
 *     # Reversed magic
 *     x=x&(<np.uint64_t>0x1249249249249249)
 */

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_compact_64bits_by2(__pyx_t_5numpy_uint64_t __pyx_v_x) {
  __pyx_t_5numpy_uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compact_64bits_by2", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":186
 * cdef inline np.uint64_t compact_64bits_by2(np.uint64_t x):
 *     # Reversed magic
 *     x=x&(<np.uint64_t>0x1249249249249249)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>2))&(<np.uint64_t>0x0649249249249249)
 *     x=(x|(x>>2))&(<np.uint64_t>0x0199219243248649)
 */
  __pyx_v_x = (__pyx_v_x & ((__pyx_t_5numpy_uint64_t)0x1249249249249249));

  /* "yt/utilities/lib/geometry_utils.pxd":187
 *     # Reversed magic
 *     x=x&(<np.uint64_t>0x1249249249249249)
 *     x=(x|(x>>2))&(<np.uint64_t>0x0649249249249249)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>2))&(<np.uint64_t>0x0199219243248649)
 *     x=(x|(x>>2))&(<np.uint64_t>0x00786070C0E181C3)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 2)) & ((__pyx_t_5numpy_uint64_t)0x0649249249249249));

  /* "yt/utilities/lib/geometry_utils.pxd":188
 *     x=x&(<np.uint64_t>0x1249249249249249)
 *     x=(x|(x>>2))&(<np.uint64_t>0x0649249249249249)
 *     x=(x|(x>>2))&(<np.uint64_t>0x0199219243248649)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>2))&(<np.uint64_t>0x00786070C0E181C3)
 *     x=(x|(x>>4))&(<np.uint64_t>0x0007E007C00F801F)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 2)) & ((__pyx_t_5numpy_uint64_t)0x0199219243248649));

  /* "yt/utilities/lib/geometry_utils.pxd":189
 *     x=(x|(x>>2))&(<np.uint64_t>0x0649249249249249)
 *     x=(x|(x>>2))&(<np.uint64_t>0x0199219243248649)
 *     x=(x|(x>>2))&(<np.uint64_t>0x00786070C0E181C3)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>4))&(<np.uint64_t>0x0007E007C00F801F)
 *     x=(x|(x>>10))&(<np.uint64_t>0x000001FFC00003FF)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 2)) & ((__pyx_t_5numpy_uint64_t)0x00786070C0E181C3));

  /* "yt/utilities/lib/geometry_utils.pxd":190
 *     x=(x|(x>>2))&(<np.uint64_t>0x0199219243248649)
 *     x=(x|(x>>2))&(<np.uint64_t>0x00786070C0E181C3)
 *     x=(x|(x>>4))&(<np.uint64_t>0x0007E007C00F801F)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>10))&(<np.uint64_t>0x000001FFC00003FF)
 *     x=(x|(x>>20))&(<np.uint64_t>0x00000000001FFFFF)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 4)) & ((__pyx_t_5numpy_uint64_t)0x0007E007C00F801F));

  /* "yt/utilities/lib/geometry_utils.pxd":191
 *     x=(x|(x>>2))&(<np.uint64_t>0x00786070C0E181C3)
 *     x=(x|(x>>4))&(<np.uint64_t>0x0007E007C00F801F)
 *     x=(x|(x>>10))&(<np.uint64_t>0x000001FFC00003FF)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>20))&(<np.uint64_t>0x00000000001FFFFF)
 *     return x
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 10)) & ((__pyx_t_5numpy_uint64_t)0x000001FFC00003FF));

  /* "yt/utilities/lib/geometry_utils.pxd":192
 *     x=(x|(x>>4))&(<np.uint64_t>0x0007E007C00F801F)
 *     x=(x|(x>>10))&(<np.uint64_t>0x000001FFC00003FF)
 *     x=(x|(x>>20))&(<np.uint64_t>0x00000000001FFFFF)             # <<<<<<<<<<<<<<
 *     return x
 * 
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 20)) & ((__pyx_t_5numpy_uint64_t)0x00000000001FFFFF));

  /* "yt/utilities/lib/geometry_utils.pxd":193
 *     x=(x|(x>>10))&(<np.uint64_t>0x000001FFC00003FF)
 *     x=(x|(x>>20))&(<np.uint64_t>0x00000000001FFFFF)
 *     return x             # <<<<<<<<<<<<<<
 * 
 * #-----------------------------------------------------------------------------
 */
  __pyx_r = __pyx_v_x;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":184
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.uint64_t compact_64bits_by2(np.uint64_t x):             # <<<<<<<<<<<<<<
 *     # Reversed magic
 *     x=x&(<np.uint64_t>0x1249249249249249)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":200
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.uint32_t spread_32bits_by2(np.uint32_t x):             # <<<<<<<<<<<<<<
 *     # Only reversible up to 1023
 *     # Select highest 10 bits (Required to be reversible to 10st bit)
 */

static CYTHON_INLINE __pyx_t_5numpy_uint32_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_32bits_by2(__pyx_t_5numpy_uint32_t __pyx_v_x) {
  __pyx_t_5numpy_uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("spread_32bits_by2", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":204
 *     # Select highest 10 bits (Required to be reversible to 10st bit)
 *     # x = ---- ---- ---- ---- ---- --98 7654 3210
 *     x=(x&(<np.uint32_t>0x000003FF))             # <<<<<<<<<<<<<<
 *     # x = ---- --98 ---- ---- ---- ---- 7654 3210
 *     x=(x|(x<<16))&(<np.uint32_t>0xFF0000FF)
 */
  __pyx_v_x = (__pyx_v_x & ((__pyx_t_5numpy_uint32_t)0x000003FF));

  /* "yt/utilities/lib/geometry_utils.pxd":206
 *     x=(x&(<np.uint32_t>0x000003FF))
 *     # x = ---- --98 ---- ---- ---- ---- 7654 3210
 *     x=(x|(x<<16))&(<np.uint32_t>0xFF0000FF)             # <<<<<<<<<<<<<<
 *     # x = ---- --98 ---- ---- 7654 ---- ---- 3210
 *     x=(x|(x<<8))&(<np.uint32_t>0x0300F00F)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 16)) & ((__pyx_t_5numpy_uint32_t)0xFF0000FF));

  /* "yt/utilities/lib/geometry_utils.pxd":208
 *     x=(x|(x<<16))&(<np.uint32_t>0xFF0000FF)
 *     # x = ---- --98 ---- ---- 7654 ---- ---- 3210
 *     x=(x|(x<<8))&(<np.uint32_t>0x0300F00F)             # <<<<<<<<<<<<<<
 *     # x = ---- --98 ---- 76-- --54 ---- 32-- --10
 *     x=(x|(x<<4))&(<np.uint32_t>0x030C30C3)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 8)) & ((__pyx_t_5numpy_uint32_t)0x0300F00F));

  /* "yt/utilities/lib/geometry_utils.pxd":210
 *     x=(x|(x<<8))&(<np.uint32_t>0x0300F00F)
 *     # x = ---- --98 ---- 76-- --54 ---- 32-- --10
 *     x=(x|(x<<4))&(<np.uint32_t>0x030C30C3)             # <<<<<<<<<<<<<<
 *     # x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint32_t>0x09249249)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 4)) & ((__pyx_t_5numpy_uint32_t)0x030C30C3));

  /* "yt/utilities/lib/geometry_utils.pxd":212
 *     x=(x|(x<<4))&(<np.uint32_t>0x030C30C3)
 *     # x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint32_t>0x09249249)             # <<<<<<<<<<<<<<
 *     return x
 * 
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x << 2)) & ((__pyx_t_5numpy_uint32_t)0x09249249));

  /* "yt/utilities/lib/geometry_utils.pxd":213
 *     # x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
 *     x=(x|(x<<2))&(<np.uint32_t>0x09249249)
 *     return x             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __pyx_r = __pyx_v_x;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":200
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.uint32_t spread_32bits_by2(np.uint32_t x):             # <<<<<<<<<<<<<<
 *     # Only reversible up to 1023
 *     # Select highest 10 bits (Required to be reversible to 10st bit)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":218
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.uint32_t compact_32bits_by2(np.uint32_t x):             # <<<<<<<<<<<<<<
 *     # Reversed magic
 *     x=x&(<np.uint32_t>0x09249249)
 */

static CYTHON_INLINE __pyx_t_5numpy_uint32_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_compact_32bits_by2(__pyx_t_5numpy_uint32_t __pyx_v_x) {
  __pyx_t_5numpy_uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compact_32bits_by2", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":220
 * cdef inline np.uint32_t compact_32bits_by2(np.uint32_t x):
 *     # Reversed magic
 *     x=x&(<np.uint32_t>0x09249249)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>2))&(<np.uint32_t>0x030C30C3)
 *     x=(x|(x>>4))&(<np.uint32_t>0x0300F00F)
 */
  __pyx_v_x = (__pyx_v_x & ((__pyx_t_5numpy_uint32_t)0x09249249));

  /* "yt/utilities/lib/geometry_utils.pxd":221
 *     # Reversed magic
 *     x=x&(<np.uint32_t>0x09249249)
 *     x=(x|(x>>2))&(<np.uint32_t>0x030C30C3)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>4))&(<np.uint32_t>0x0300F00F)
 *     x=(x|(x>>8))&(<np.uint32_t>0xFF0000FF)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 2)) & ((__pyx_t_5numpy_uint32_t)0x030C30C3));

  /* "yt/utilities/lib/geometry_utils.pxd":222
 *     x=x&(<np.uint32_t>0x09249249)
 *     x=(x|(x>>2))&(<np.uint32_t>0x030C30C3)
 *     x=(x|(x>>4))&(<np.uint32_t>0x0300F00F)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>8))&(<np.uint32_t>0xFF0000FF)
 *     x=(x|(x>>16))&(<np.uint32_t>0x000003FF)
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 4)) & ((__pyx_t_5numpy_uint32_t)0x0300F00F));

  /* "yt/utilities/lib/geometry_utils.pxd":223
 *     x=(x|(x>>2))&(<np.uint32_t>0x030C30C3)
 *     x=(x|(x>>4))&(<np.uint32_t>0x0300F00F)
 *     x=(x|(x>>8))&(<np.uint32_t>0xFF0000FF)             # <<<<<<<<<<<<<<
 *     x=(x|(x>>16))&(<np.uint32_t>0x000003FF)
 *     return x
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 8)) & ((__pyx_t_5numpy_uint32_t)0xFF0000FF));

  /* "yt/utilities/lib/geometry_utils.pxd":224
 *     x=(x|(x>>4))&(<np.uint32_t>0x0300F00F)
 *     x=(x|(x>>8))&(<np.uint32_t>0xFF0000FF)
 *     x=(x|(x>>16))&(<np.uint32_t>0x000003FF)             # <<<<<<<<<<<<<<
 *     return x
 * 
 */
  __pyx_v_x = ((__pyx_v_x | (__pyx_v_x >> 16)) & ((__pyx_t_5numpy_uint32_t)0x000003FF));

  /* "yt/utilities/lib/geometry_utils.pxd":225
 *     x=(x|(x>>8))&(<np.uint32_t>0xFF0000FF)
 *     x=(x|(x>>16))&(<np.uint32_t>0x000003FF)
 *     return x             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __pyx_r = __pyx_v_x;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":218
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.uint32_t compact_32bits_by2(np.uint32_t x):             # <<<<<<<<<<<<<<
 *     # Reversed magic
 *     x=x&(<np.uint32_t>0x09249249)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":230
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.uint64_t masked_merge_64bit(np.uint64_t a, np.uint64_t b, np.uint64_t mask):             # <<<<<<<<<<<<<<
 *     # https://graphics.stanford.edu/~seander/bithacks.html#MaskedMerge
 *     return a ^ ((a ^ b) & mask)
 */

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_masked_merge_64bit(__pyx_t_5numpy_uint64_t __pyx_v_a, __pyx_t_5numpy_uint64_t __pyx_v_b, __pyx_t_5numpy_uint64_t __pyx_v_mask) {
  __pyx_t_5numpy_uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("masked_merge_64bit", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":232
 * cdef inline np.uint64_t masked_merge_64bit(np.uint64_t a, np.uint64_t b, np.uint64_t mask):
 *     # https://graphics.stanford.edu/~seander/bithacks.html#MaskedMerge
 *     return a ^ ((a ^ b) & mask)             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __pyx_r = (__pyx_v_a ^ ((__pyx_v_a ^ __pyx_v_b) & __pyx_v_mask));
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":230
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * cdef inline np.uint64_t masked_merge_64bit(np.uint64_t a, np.uint64_t b, np.uint64_t mask):             # <<<<<<<<<<<<<<
 *     # https://graphics.stanford.edu/~seander/bithacks.html#MaskedMerge
 *     return a ^ ((a ^ b) & mask)
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":235
 * 
 * @cython.cdivision(True)
 * cdef inline np.uint64_t encode_morton_64bit(np.uint64_t x_ind, np.uint64_t y_ind, np.uint64_t z_ind):             # <<<<<<<<<<<<<<
 *     cdef np.uint64_t mi
 *     mi = 0
 */

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_t_5numpy_uint64_t __pyx_v_x_ind, __pyx_t_5numpy_uint64_t __pyx_v_y_ind, __pyx_t_5numpy_uint64_t __pyx_v_z_ind) {
  __pyx_t_5numpy_uint64_t __pyx_v_mi;
  __pyx_t_5numpy_uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("encode_morton_64bit", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":237
 * cdef inline np.uint64_t encode_morton_64bit(np.uint64_t x_ind, np.uint64_t y_ind, np.uint64_t z_ind):
 *     cdef np.uint64_t mi
 *     mi = 0             # <<<<<<<<<<<<<<
 *     mi |= spread_64bits_by2(z_ind)<<ZSHIFT
 *     mi |= spread_64bits_by2(y_ind)<<YSHIFT
 */
  __pyx_v_mi = 0;

  /* "yt/utilities/lib/geometry_utils.pxd":238
 *     cdef np.uint64_t mi
 *     mi = 0
 *     mi |= spread_64bits_by2(z_ind)<<ZSHIFT             # <<<<<<<<<<<<<<
 *     mi |= spread_64bits_by2(y_ind)<<YSHIFT
 *     mi |= spread_64bits_by2(x_ind)<<XSHIFT
 */
  __pyx_v_mi = (__pyx_v_mi | (__pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_64bits_by2(__pyx_v_z_ind) << 0));

  /* "yt/utilities/lib/geometry_utils.pxd":239
 *     mi = 0
 *     mi |= spread_64bits_by2(z_ind)<<ZSHIFT
 *     mi |= spread_64bits_by2(y_ind)<<YSHIFT             # <<<<<<<<<<<<<<
 *     mi |= spread_64bits_by2(x_ind)<<XSHIFT
 *     return mi
 */
  __pyx_v_mi = (__pyx_v_mi | (__pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_64bits_by2(__pyx_v_y_ind) << 1));

  /* "yt/utilities/lib/geometry_utils.pxd":240
 *     mi |= spread_64bits_by2(z_ind)<<ZSHIFT
 *     mi |= spread_64bits_by2(y_ind)<<YSHIFT
 *     mi |= spread_64bits_by2(x_ind)<<XSHIFT             # <<<<<<<<<<<<<<
 *     return mi
 * 
 */
  __pyx_v_mi = (__pyx_v_mi | (__pyx_f_2yt_9utilities_3lib_14geometry_utils_spread_64bits_by2(__pyx_v_x_ind) << 2));

  /* "yt/utilities/lib/geometry_utils.pxd":241
 *     mi |= spread_64bits_by2(y_ind)<<YSHIFT
 *     mi |= spread_64bits_by2(x_ind)<<XSHIFT
 *     return mi             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __pyx_r = __pyx_v_mi;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":235
 * 
 * @cython.cdivision(True)
 * cdef inline np.uint64_t encode_morton_64bit(np.uint64_t x_ind, np.uint64_t y_ind, np.uint64_t z_ind):             # <<<<<<<<<<<<<<
 *     cdef np.uint64_t mi
 *     mi = 0
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":244
 * 
 * @cython.cdivision(True)
 * cdef inline void decode_morton_64bit(np.uint64_t mi, np.uint64_t *p):             # <<<<<<<<<<<<<<
 *     p[0] = compact_64bits_by2(mi>>XSHIFT)
 *     p[1] = compact_64bits_by2(mi>>YSHIFT)
 */

static CYTHON_INLINE void __pyx_f_2yt_9utilities_3lib_14geometry_utils_decode_morton_64bit(__pyx_t_5numpy_uint64_t __pyx_v_mi, __pyx_t_5numpy_uint64_t *__pyx_v_p) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("decode_morton_64bit", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":245
 * @cython.cdivision(True)
 * cdef inline void decode_morton_64bit(np.uint64_t mi, np.uint64_t *p):
 *     p[0] = compact_64bits_by2(mi>>XSHIFT)             # <<<<<<<<<<<<<<
 *     p[1] = compact_64bits_by2(mi>>YSHIFT)
 *     p[2] = compact_64bits_by2(mi>>ZSHIFT)
 */
  (__pyx_v_p[0]) = __pyx_f_2yt_9utilities_3lib_14geometry_utils_compact_64bits_by2((__pyx_v_mi >> 2));

  /* "yt/utilities/lib/geometry_utils.pxd":246
 * cdef inline void decode_morton_64bit(np.uint64_t mi, np.uint64_t *p):
 *     p[0] = compact_64bits_by2(mi>>XSHIFT)
 *     p[1] = compact_64bits_by2(mi>>YSHIFT)             # <<<<<<<<<<<<<<
 *     p[2] = compact_64bits_by2(mi>>ZSHIFT)
 * 
 */
  (__pyx_v_p[1]) = __pyx_f_2yt_9utilities_3lib_14geometry_utils_compact_64bits_by2((__pyx_v_mi >> 1));

  /* "yt/utilities/lib/geometry_utils.pxd":247
 *     p[0] = compact_64bits_by2(mi>>XSHIFT)
 *     p[1] = compact_64bits_by2(mi>>YSHIFT)
 *     p[2] = compact_64bits_by2(mi>>ZSHIFT)             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  (__pyx_v_p[2]) = __pyx_f_2yt_9utilities_3lib_14geometry_utils_compact_64bits_by2((__pyx_v_mi >> 0));

  /* "yt/utilities/lib/geometry_utils.pxd":244
 * 
 * @cython.cdivision(True)
 * cdef inline void decode_morton_64bit(np.uint64_t mi, np.uint64_t *p):             # <<<<<<<<<<<<<<
 *     p[0] = compact_64bits_by2(mi>>XSHIFT)
 *     p[1] = compact_64bits_by2(mi>>YSHIFT)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "yt/utilities/lib/geometry_utils.pxd":250
 * 
 * @cython.cdivision(True)
 * cdef inline np.uint64_t bounded_morton(np.float64_t x, np.float64_t y, np.float64_t z,             # <<<<<<<<<<<<<<
 *                                np.float64_t *DLE, np.float64_t *DRE, np.int32_t order):
 *     cdef int i
 */

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_y, __pyx_t_5numpy_float64_t __pyx_v_z, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_DRE, __pyx_t_5numpy_int32_t __pyx_v_order) {
  int __pyx_v_i;
  __pyx_t_5numpy_float64_t __pyx_v_dds[3];
  __pyx_t_5numpy_uint64_t __pyx_v_x_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_y_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_z_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_mi;
  __pyx_t_5numpy_uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("bounded_morton", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":256
 *     cdef np.uint64_t x_ind, y_ind, z_ind
 *     cdef np.uint64_t mi
 *     for i in range(3):             # <<<<<<<<<<<<<<
 *         dds[i] = (DRE[i] - DLE[i]) / (1 << order)
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/utilities/lib/geometry_utils.pxd":257
 *     cdef np.uint64_t mi
 *     for i in range(3):
 *         dds[i] = (DRE[i] - DLE[i]) / (1 << order)             # <<<<<<<<<<<<<<
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
 */
    (__pyx_v_dds[__pyx_v_i]) = (((__pyx_v_DRE[__pyx_v_i]) - (__pyx_v_DLE[__pyx_v_i])) / ((__pyx_t_5numpy_float64_t)(1 << __pyx_v_order)));
  }

  /* "yt/utilities/lib/geometry_utils.pxd":258
 *     for i in range(3):
 *         dds[i] = (DRE[i] - DLE[i]) / (1 << order)
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])             # <<<<<<<<<<<<<<
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 */
  __pyx_v_x_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE[0])) / (__pyx_v_dds[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":259
 *         dds[i] = (DRE[i] - DLE[i]) / (1 << order)
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])             # <<<<<<<<<<<<<<
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)
 */
  __pyx_v_y_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE[1])) / (__pyx_v_dds[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":260
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])             # <<<<<<<<<<<<<<
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi
 */
  __pyx_v_z_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE[2])) / (__pyx_v_dds[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":261
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)             # <<<<<<<<<<<<<<
 *     return mi
 * 
 */
  __pyx_v_mi = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_v_x_ind, __pyx_v_y_ind, __pyx_v_z_ind);

  /* "yt/utilities/lib/geometry_utils.pxd":262
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __pyx_r = __pyx_v_mi;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":250
 * 
 * @cython.cdivision(True)
 * cdef inline np.uint64_t bounded_morton(np.float64_t x, np.float64_t y, np.float64_t z,             # <<<<<<<<<<<<<<
 *                                np.float64_t *DLE, np.float64_t *DRE, np.int32_t order):
 *     cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":265
 * 
 * @cython.cdivision(True)
 * cdef inline np.uint64_t bounded_morton_relative(np.float64_t x, np.float64_t y, np.float64_t z,             # <<<<<<<<<<<<<<
 *                                np.float64_t *DLE, np.float64_t *DRE,
 *                                np.int32_t order1, np.int32_t order2):
 */

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_relative(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_y, __pyx_t_5numpy_float64_t __pyx_v_z, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_DRE, __pyx_t_5numpy_int32_t __pyx_v_order1, __pyx_t_5numpy_int32_t __pyx_v_order2) {
  int __pyx_v_i;
  __pyx_t_5numpy_float64_t __pyx_v_dds1[3];
  __pyx_t_5numpy_float64_t __pyx_v_dds2[3];
  __pyx_t_5numpy_float64_t __pyx_v_DLE2[3];
  __pyx_t_5numpy_uint64_t __pyx_v_x_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_y_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_z_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_mi2;
  __pyx_t_5numpy_uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("bounded_morton_relative", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":274
 *     cdef np.uint64_t x_ind, y_ind, z_ind
 *     cdef np.uint64_t mi2
 *     for i in range(3):             # <<<<<<<<<<<<<<
 *         dds1[i] = (DRE[i] - DLE[i]) / (1 << order1)
 *         dds2[i] = dds1[i] / (1 << order2)
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 3; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yt/utilities/lib/geometry_utils.pxd":275
 *     cdef np.uint64_t mi2
 *     for i in range(3):
 *         dds1[i] = (DRE[i] - DLE[i]) / (1 << order1)             # <<<<<<<<<<<<<<
 *         dds2[i] = dds1[i] / (1 << order2)
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 */
    (__pyx_v_dds1[__pyx_v_i]) = (((__pyx_v_DRE[__pyx_v_i]) - (__pyx_v_DLE[__pyx_v_i])) / ((__pyx_t_5numpy_float64_t)(1 << __pyx_v_order1)));

    /* "yt/utilities/lib/geometry_utils.pxd":276
 *     for i in range(3):
 *         dds1[i] = (DRE[i] - DLE[i]) / (1 << order1)
 *         dds2[i] = dds1[i] / (1 << order2)             # <<<<<<<<<<<<<<
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 */
    (__pyx_v_dds2[__pyx_v_i]) = ((__pyx_v_dds1[__pyx_v_i]) / ((__pyx_t_5numpy_float64_t)(1 << __pyx_v_order2)));
  }

  /* "yt/utilities/lib/geometry_utils.pxd":277
 *         dds1[i] = (DRE[i] - DLE[i]) / (1 << order1)
 *         dds2[i] = dds1[i] / (1 << order2)
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]             # <<<<<<<<<<<<<<
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 */
  (__pyx_v_DLE2[0]) = (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE[0])) / (__pyx_v_dds1[0])))) * (__pyx_v_dds1[0]));

  /* "yt/utilities/lib/geometry_utils.pxd":278
 *         dds2[i] = dds1[i] / (1 << order2)
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]             # <<<<<<<<<<<<<<
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 */
  (__pyx_v_DLE2[1]) = (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE[1])) / (__pyx_v_dds1[1])))) * (__pyx_v_dds1[1]));

  /* "yt/utilities/lib/geometry_utils.pxd":279
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]             # <<<<<<<<<<<<<<
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 */
  (__pyx_v_DLE2[2]) = (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE[2])) / (__pyx_v_dds1[2])))) * (__pyx_v_dds1[2]));

  /* "yt/utilities/lib/geometry_utils.pxd":280
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])             # <<<<<<<<<<<<<<
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 */
  __pyx_v_x_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE2[0])) / (__pyx_v_dds2[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":281
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])             # <<<<<<<<<<<<<<
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)
 */
  __pyx_v_y_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE2[1])) / (__pyx_v_dds2[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":282
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])             # <<<<<<<<<<<<<<
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi2
 */
  __pyx_v_z_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE2[2])) / (__pyx_v_dds2[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":283
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)             # <<<<<<<<<<<<<<
 *     return mi2
 * 
 */
  __pyx_v_mi2 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_v_x_ind, __pyx_v_y_ind, __pyx_v_z_ind);

  /* "yt/utilities/lib/geometry_utils.pxd":284
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_mi2;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":265
 * 
 * @cython.cdivision(True)
 * cdef inline np.uint64_t bounded_morton_relative(np.float64_t x, np.float64_t y, np.float64_t z,             # <<<<<<<<<<<<<<
 *                                np.float64_t *DLE, np.float64_t *DRE,
 *                                np.int32_t order1, np.int32_t order2):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":289
 * # This doesn't seem to be much, if at all, faster...
 * @cython.cdivision(True)
 * cdef inline np.uint64_t bounded_morton_dds(np.float64_t x, np.float64_t y, np.float64_t z,             # <<<<<<<<<<<<<<
 *                                np.float64_t *DLE, np.float64_t *dds):
 *     cdef np.uint64_t x_ind, y_ind, z_ind
 */

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_dds(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_y, __pyx_t_5numpy_float64_t __pyx_v_z, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_dds) {
  __pyx_t_5numpy_uint64_t __pyx_v_x_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_y_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_z_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_mi;
  __pyx_t_5numpy_uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bounded_morton_dds", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":293
 *     cdef np.uint64_t x_ind, y_ind, z_ind
 *     cdef np.uint64_t mi
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])             # <<<<<<<<<<<<<<
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 */
  __pyx_v_x_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE[0])) / (__pyx_v_dds[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":294
 *     cdef np.uint64_t mi
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])             # <<<<<<<<<<<<<<
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)
 */
  __pyx_v_y_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE[1])) / (__pyx_v_dds[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":295
 *     x_ind = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])             # <<<<<<<<<<<<<<
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi
 */
  __pyx_v_z_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE[2])) / (__pyx_v_dds[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":296
 *     y_ind = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)             # <<<<<<<<<<<<<<
 *     return mi
 * 
 */
  __pyx_v_mi = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_v_x_ind, __pyx_v_y_ind, __pyx_v_z_ind);

  /* "yt/utilities/lib/geometry_utils.pxd":297
 *     z_ind = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __pyx_r = __pyx_v_mi;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":289
 * # This doesn't seem to be much, if at all, faster...
 * @cython.cdivision(True)
 * cdef inline np.uint64_t bounded_morton_dds(np.float64_t x, np.float64_t y, np.float64_t z,             # <<<<<<<<<<<<<<
 *                                np.float64_t *DLE, np.float64_t *dds):
 *     cdef np.uint64_t x_ind, y_ind, z_ind
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":300
 * 
 * @cython.cdivision(True)
 * cdef inline np.uint64_t bounded_morton_relative_dds(np.float64_t x, np.float64_t y, np.float64_t z,             # <<<<<<<<<<<<<<
 *                                np.float64_t *DLE, np.float64_t *dds1, np.float64_t *dds2):
 *     cdef np.float64_t DLE2[3]
 */

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_relative_dds(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_y, __pyx_t_5numpy_float64_t __pyx_v_z, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_dds1, __pyx_t_5numpy_float64_t *__pyx_v_dds2) {
  __pyx_t_5numpy_float64_t __pyx_v_DLE2[3];
  __pyx_t_5numpy_uint64_t __pyx_v_x_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_y_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_z_ind;
  __pyx_t_5numpy_uint64_t __pyx_v_mi2;
  __pyx_t_5numpy_uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bounded_morton_relative_dds", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":305
 *     cdef np.uint64_t x_ind, y_ind, z_ind
 *     cdef np.uint64_t mi2
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]             # <<<<<<<<<<<<<<
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 */
  (__pyx_v_DLE2[0]) = (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE[0])) / (__pyx_v_dds1[0])))) * (__pyx_v_dds1[0]));

  /* "yt/utilities/lib/geometry_utils.pxd":306
 *     cdef np.uint64_t mi2
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]             # <<<<<<<<<<<<<<
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 */
  (__pyx_v_DLE2[1]) = (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE[1])) / (__pyx_v_dds1[1])))) * (__pyx_v_dds1[1]));

  /* "yt/utilities/lib/geometry_utils.pxd":307
 *     DLE2[0] = <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]             # <<<<<<<<<<<<<<
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 */
  (__pyx_v_DLE2[2]) = (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE[2])) / (__pyx_v_dds1[2])))) * (__pyx_v_dds1[2]));

  /* "yt/utilities/lib/geometry_utils.pxd":308
 *     DLE2[1] = <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])             # <<<<<<<<<<<<<<
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 */
  __pyx_v_x_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE2[0])) / (__pyx_v_dds2[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":309
 *     DLE2[2] = <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])             # <<<<<<<<<<<<<<
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)
 */
  __pyx_v_y_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE2[1])) / (__pyx_v_dds2[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":310
 *     x_ind = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])             # <<<<<<<<<<<<<<
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi2
 */
  __pyx_v_z_ind = ((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE2[2])) / (__pyx_v_dds2[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":311
 *     y_ind = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)             # <<<<<<<<<<<<<<
 *     return mi2
 * 
 */
  __pyx_v_mi2 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit(__pyx_v_x_ind, __pyx_v_y_ind, __pyx_v_z_ind);

  /* "yt/utilities/lib/geometry_utils.pxd":312
 *     z_ind = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(x_ind,y_ind,z_ind)
 *     return mi2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_mi2;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":300
 * 
 * @cython.cdivision(True)
 * cdef inline np.uint64_t bounded_morton_relative_dds(np.float64_t x, np.float64_t y, np.float64_t z,             # <<<<<<<<<<<<<<
 *                                np.float64_t *DLE, np.float64_t *dds1, np.float64_t *dds2):
 *     cdef np.float64_t DLE2[3]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":316
 * 
 * @cython.cdivision(True)
 * cdef inline np.uint64_t bounded_morton_split_dds(np.float64_t x, np.float64_t y, np.float64_t z,             # <<<<<<<<<<<<<<
 *                                np.float64_t *DLE, np.float64_t *dds, np.uint64_t *p):
 *     cdef np.uint64_t mi
 */

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_dds(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_y, __pyx_t_5numpy_float64_t __pyx_v_z, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_dds, __pyx_t_5numpy_uint64_t *__pyx_v_p) {
  __pyx_t_5numpy_uint64_t __pyx_v_mi;
  __pyx_t_5numpy_uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bounded_morton_split_dds", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":319
 *                                np.float64_t *DLE, np.float64_t *dds, np.uint64_t *p):
 *     cdef np.uint64_t mi
 *     p[0] = <np.uint64_t> ((x - DLE[0])/dds[0])             # <<<<<<<<<<<<<<
 *     p[1] = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     p[2] = <np.uint64_t> ((z - DLE[2])/dds[2])
 */
  (__pyx_v_p[0]) = ((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE[0])) / (__pyx_v_dds[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":320
 *     cdef np.uint64_t mi
 *     p[0] = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     p[1] = <np.uint64_t> ((y - DLE[1])/dds[1])             # <<<<<<<<<<<<<<
 *     p[2] = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(p[0], p[1], p[2])
 */
  (__pyx_v_p[1]) = ((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE[1])) / (__pyx_v_dds[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":321
 *     p[0] = <np.uint64_t> ((x - DLE[0])/dds[0])
 *     p[1] = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     p[2] = <np.uint64_t> ((z - DLE[2])/dds[2])             # <<<<<<<<<<<<<<
 *     mi = encode_morton_64bit(p[0], p[1], p[2])
 *     return mi
 */
  (__pyx_v_p[2]) = ((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE[2])) / (__pyx_v_dds[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":322
 *     p[1] = <np.uint64_t> ((y - DLE[1])/dds[1])
 *     p[2] = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(p[0], p[1], p[2])             # <<<<<<<<<<<<<<
 *     return mi
 * 
 */
  __pyx_v_mi = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit((__pyx_v_p[0]), (__pyx_v_p[1]), (__pyx_v_p[2]));

  /* "yt/utilities/lib/geometry_utils.pxd":323
 *     p[2] = <np.uint64_t> ((z - DLE[2])/dds[2])
 *     mi = encode_morton_64bit(p[0], p[1], p[2])
 *     return mi             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  __pyx_r = __pyx_v_mi;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":316
 * 
 * @cython.cdivision(True)
 * cdef inline np.uint64_t bounded_morton_split_dds(np.float64_t x, np.float64_t y, np.float64_t z,             # <<<<<<<<<<<<<<
 *                                np.float64_t *DLE, np.float64_t *dds, np.uint64_t *p):
 *     cdef np.uint64_t mi
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/utilities/lib/geometry_utils.pxd":326
 * 
 * @cython.cdivision(True)
 * cdef inline np.uint64_t bounded_morton_split_relative_dds(np.float64_t x, np.float64_t y, np.float64_t z,             # <<<<<<<<<<<<<<
 *                                np.float64_t *DLE, np.float64_t *dds1, np.float64_t *dds2,
 *                                np.uint64_t *p2):
 */

static CYTHON_INLINE __pyx_t_5numpy_uint64_t __pyx_f_2yt_9utilities_3lib_14geometry_utils_bounded_morton_split_relative_dds(__pyx_t_5numpy_float64_t __pyx_v_x, __pyx_t_5numpy_float64_t __pyx_v_y, __pyx_t_5numpy_float64_t __pyx_v_z, __pyx_t_5numpy_float64_t *__pyx_v_DLE, __pyx_t_5numpy_float64_t *__pyx_v_dds1, __pyx_t_5numpy_float64_t *__pyx_v_dds2, __pyx_t_5numpy_uint64_t *__pyx_v_p2) {
  __pyx_t_5numpy_float64_t __pyx_v_DLE2[3];
  __pyx_t_5numpy_uint64_t __pyx_v_mi2;
  __pyx_t_5numpy_uint64_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bounded_morton_split_relative_dds", 0);

  /* "yt/utilities/lib/geometry_utils.pxd":331
 *     cdef np.float64_t DLE2[3]
 *     cdef np.uint64_t mi2
 *     DLE2[0] = DLE[0] + <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]             # <<<<<<<<<<<<<<
 *     DLE2[1] = DLE[1] + <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = DLE[2] + <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 */
  (__pyx_v_DLE2[0]) = ((__pyx_v_DLE[0]) + (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE[0])) / (__pyx_v_dds1[0])))) * (__pyx_v_dds1[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":332
 *     cdef np.uint64_t mi2
 *     DLE2[0] = DLE[0] + <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = DLE[1] + <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]             # <<<<<<<<<<<<<<
 *     DLE2[2] = DLE[2] + <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     p2[0] = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 */
  (__pyx_v_DLE2[1]) = ((__pyx_v_DLE[1]) + (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE[1])) / (__pyx_v_dds1[1])))) * (__pyx_v_dds1[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":333
 *     DLE2[0] = DLE[0] + <np.float64_t> (<np.uint64_t> ((x - DLE[0])/dds1[0])) * dds1[0]
 *     DLE2[1] = DLE[1] + <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = DLE[2] + <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]             # <<<<<<<<<<<<<<
 *     p2[0] = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     p2[1] = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 */
  (__pyx_v_DLE2[2]) = ((__pyx_v_DLE[2]) + (((__pyx_t_5numpy_float64_t)((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE[2])) / (__pyx_v_dds1[2])))) * (__pyx_v_dds1[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":334
 *     DLE2[1] = DLE[1] + <np.float64_t> (<np.uint64_t> ((y - DLE[1])/dds1[1])) * dds1[1]
 *     DLE2[2] = DLE[2] + <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     p2[0] = <np.uint64_t> ((x - DLE2[0])/dds2[0])             # <<<<<<<<<<<<<<
 *     p2[1] = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     p2[2] = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 */
  (__pyx_v_p2[0]) = ((__pyx_t_5numpy_uint64_t)((__pyx_v_x - (__pyx_v_DLE2[0])) / (__pyx_v_dds2[0])));

  /* "yt/utilities/lib/geometry_utils.pxd":335
 *     DLE2[2] = DLE[2] + <np.float64_t> (<np.uint64_t> ((z - DLE[2])/dds1[2])) * dds1[2]
 *     p2[0] = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     p2[1] = <np.uint64_t> ((y - DLE2[1])/dds2[1])             # <<<<<<<<<<<<<<
 *     p2[2] = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(p2[0], p2[1], p2[2])
 */
  (__pyx_v_p2[1]) = ((__pyx_t_5numpy_uint64_t)((__pyx_v_y - (__pyx_v_DLE2[1])) / (__pyx_v_dds2[1])));

  /* "yt/utilities/lib/geometry_utils.pxd":336
 *     p2[0] = <np.uint64_t> ((x - DLE2[0])/dds2[0])
 *     p2[1] = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     p2[2] = <np.uint64_t> ((z - DLE2[2])/dds2[2])             # <<<<<<<<<<<<<<
 *     mi2 = encode_morton_64bit(p2[0], p2[1], p2[2])
 *     return mi2
 */
  (__pyx_v_p2[2]) = ((__pyx_t_5numpy_uint64_t)((__pyx_v_z - (__pyx_v_DLE2[2])) / (__pyx_v_dds2[2])));

  /* "yt/utilities/lib/geometry_utils.pxd":337
 *     p2[1] = <np.uint64_t> ((y - DLE2[1])/dds2[1])
 *     p2[2] = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(p2[0], p2[1], p2[2])             # <<<<<<<<<<<<<<
 *     return mi2
 * 
 */
  __pyx_v_mi2 = __pyx_f_2yt_9utilities_3lib_14geometry_utils_encode_morton_64bit((__pyx_v_p2[0]), (__pyx_v_p2[1]), (__pyx_v_p2[2]));

  /* "yt/utilities/lib/geometry_utils.pxd":338
 *     p2[2] = <np.uint64_t> ((z - DLE2[2])/dds2[2])
 *     mi2 = encode_morton_64bit(p2[0], p2[1], p2[2])
 *     return mi2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_mi2;
  goto __pyx_L0;

  /* "yt/utilities/lib/geometry_utils.pxd":326
 * 
 * @cython.cdivision(True)
 * cdef inline np.uint64_t bounded_morton_split_relative_dds(np.float64_t x, np.float64_t y, np.float64_t z,             # <<<<<<<<<<<<<<
 *                                np.float64_t *DLE, np.float64_t *dds1, np.float64_t *dds2,
 *                                np.uint64_t *p2):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "selection_routines.pxd":88
 *     cdef public SelectorObject sel2
 * 
 * cdef inline np.float64_t _periodic_dist(np.float64_t x1, np.float64_t x2,             # <<<<<<<<<<<<<<
 *                                         np.float64_t dw, bint periodic) nogil:
 *     cdef np.float64_t rel = x1 - x2
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_18selection_routines__periodic_dist(__pyx_t_5numpy_float64_t __pyx_v_x1, __pyx_t_5numpy_float64_t __pyx_v_x2, __pyx_t_5numpy_float64_t __pyx_v_dw, int __pyx_v_periodic) {
  __pyx_t_5numpy_float64_t __pyx_v_rel;
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;

  /* "selection_routines.pxd":90
 * cdef inline np.float64_t _periodic_dist(np.float64_t x1, np.float64_t x2,
 *                                         np.float64_t dw, bint periodic) nogil:
 *     cdef np.float64_t rel = x1 - x2             # <<<<<<<<<<<<<<
 *     if not periodic: return rel
 *     if rel > dw * 0.5:
 */
  __pyx_v_rel = (__pyx_v_x1 - __pyx_v_x2);

  /* "selection_routines.pxd":91
 *                                         np.float64_t dw, bint periodic) nogil:
 *     cdef np.float64_t rel = x1 - x2
 *     if not periodic: return rel             # <<<<<<<<<<<<<<
 *     if rel > dw * 0.5:
 *         rel -= dw
 */
  __pyx_t_1 = ((!(__pyx_v_periodic != 0)) != 0);
  if (__pyx_t_1) {
    __pyx_r = __pyx_v_rel;
    goto __pyx_L0;
  }

  /* "selection_routines.pxd":92
 *     cdef np.float64_t rel = x1 - x2
 *     if not periodic: return rel
 *     if rel > dw * 0.5:             # <<<<<<<<<<<<<<
 *         rel -= dw
 *     elif rel < -dw * 0.5:
 */
  __pyx_t_1 = ((__pyx_v_rel > (__pyx_v_dw * 0.5)) != 0);
  if (__pyx_t_1) {

    /* "selection_routines.pxd":93
 *     if not periodic: return rel
 *     if rel > dw * 0.5:
 *         rel -= dw             # <<<<<<<<<<<<<<
 *     elif rel < -dw * 0.5:
 *         rel += dw
 */
    __pyx_v_rel = (__pyx_v_rel - __pyx_v_dw);

    /* "selection_routines.pxd":92
 *     cdef np.float64_t rel = x1 - x2
 *     if not periodic: return rel
 *     if rel > dw * 0.5:             # <<<<<<<<<<<<<<
 *         rel -= dw
 *     elif rel < -dw * 0.5:
 */
    goto __pyx_L4;
  }

  /* "selection_routines.pxd":94
 *     if rel > dw * 0.5:
 *         rel -= dw
 *     elif rel < -dw * 0.5:             # <<<<<<<<<<<<<<
 *         rel += dw
 *     return rel
 */
  __pyx_t_1 = ((__pyx_v_rel < ((-__pyx_v_dw) * 0.5)) != 0);
  if (__pyx_t_1) {

    /* "selection_routines.pxd":95
 *         rel -= dw
 *     elif rel < -dw * 0.5:
 *         rel += dw             # <<<<<<<<<<<<<<
 *     return rel
 */
    __pyx_v_rel = (__pyx_v_rel + __pyx_v_dw);

    /* "selection_routines.pxd":94
 *     if rel > dw * 0.5:
 *         rel -= dw
 *     elif rel < -dw * 0.5:             # <<<<<<<<<<<<<<
 *         rel += dw
 *     return rel
 */
  }
  __pyx_L4:;

  /* "selection_routines.pxd":96
 *     elif rel < -dw * 0.5:
 *         rel += dw
 *     return rel             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_v_rel;
  goto __pyx_L0;

  /* "selection_routines.pxd":88
 *     cdef public SelectorObject sel2
 * 
 * cdef inline np.float64_t _periodic_dist(np.float64_t x1, np.float64_t x2,             # <<<<<<<<<<<<<<
 *                                         np.float64_t dw, bint periodic) nogil:
 *     cdef np.float64_t rel = x1 - x2
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "oct_container.pxd":47
 * 
 * cdef class OctObjectPool(ObjectPool):
 *     cdef inline OctAllocationContainer *get_cont(self, int i):             # <<<<<<<<<<<<<<
 *         return <OctAllocationContainer*> (&self.containers[i])
 * 
 */

static CYTHON_INLINE struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer *__pyx_f_2yt_8geometry_13oct_container_13OctObjectPool_get_cont(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool *__pyx_v_self, int __pyx_v_i) {
  struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer *__pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_cont", 0);

  /* "oct_container.pxd":48
 * cdef class OctObjectPool(ObjectPool):
 *     cdef inline OctAllocationContainer *get_cont(self, int i):
 *         return <OctAllocationContainer*> (&self.containers[i])             # <<<<<<<<<<<<<<
 * 
 * cdef OctList *OctList_append(OctList *list, Oct *o)
 */
  __pyx_r = ((struct __pyx_t_2yt_8geometry_13oct_container_OctAllocationContainer *)(&(__pyx_v_self->__pyx_base.containers[__pyx_v_i])));
  goto __pyx_L0;

  /* "oct_container.pxd":47
 * 
 * cdef class OctObjectPool(ObjectPool):
 *     cdef inline OctAllocationContainer *get_cont(self, int i):             # <<<<<<<<<<<<<<
 *         return <OctAllocationContainer*> (&self.containers[i])
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_deposit.pxd":27
 *     void *alloca(int)
 * 
 * cdef inline int gind(int i, int j, int k, int dims[3]):             # <<<<<<<<<<<<<<
 *     # The ordering is such that we want i to vary the slowest in this instance,
 *     # even though in other instances it varies the fastest.  To see this in
 */

static CYTHON_INLINE int __pyx_f_2yt_8geometry_16particle_deposit_gind(int __pyx_v_i, int __pyx_v_j, int __pyx_v_k, int *__pyx_v_dims) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gind", 0);

  /* "yt/geometry/particle_deposit.pxd":32
 *     # action, try looking at the results of an n_ref=256 particle CIC plot,
 *     # which shows it the most clearly.
 *     return ((i*dims[1])+j)*dims[2]+k             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((((__pyx_v_i * (__pyx_v_dims[1])) + __pyx_v_j) * (__pyx_v_dims[2])) + __pyx_v_k);
  goto __pyx_L0;

  /* "yt/geometry/particle_deposit.pxd":27
 *     void *alloca(int)
 * 
 * cdef inline int gind(int i, int j, int k, int dims[3]):             # <<<<<<<<<<<<<<
 *     # The ordering is such that we want i to vary the slowest in this instance,
 *     # even though in other instances it varies the fastest.  To see this in
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yt/geometry/particle_deposit.pxd":39
 * ####################################################
 * 
 * cdef inline np.float64_t sph_kernel_cubic(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t kernel
 *     # C is 8/pi
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_cubic(__pyx_t_5numpy_float64_t __pyx_v_x) {
  __pyx_t_5numpy_float64_t __pyx_v_kernel;
  __pyx_t_5numpy_float64_t __pyx_v_C;
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;

  /* "yt/geometry/particle_deposit.pxd":42
 *     cdef np.float64_t kernel
 *     # C is 8/pi
 *     cdef np.float64_t C = 2.5464790894703255             # <<<<<<<<<<<<<<
 *     if x <= 0.5:
 *         kernel = 1.-6.*x*x*(1.-x)
 */
  __pyx_v_C = 2.5464790894703255;

  /* "yt/geometry/particle_deposit.pxd":43
 *     # C is 8/pi
 *     cdef np.float64_t C = 2.5464790894703255
 *     if x <= 0.5:             # <<<<<<<<<<<<<<
 *         kernel = 1.-6.*x*x*(1.-x)
 *     elif x>0.5 and x<=1.0:
 */
  __pyx_t_1 = ((__pyx_v_x <= 0.5) != 0);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_deposit.pxd":44
 *     cdef np.float64_t C = 2.5464790894703255
 *     if x <= 0.5:
 *         kernel = 1.-6.*x*x*(1.-x)             # <<<<<<<<<<<<<<
 *     elif x>0.5 and x<=1.0:
 *         kernel = 2.*(1.-x)*(1.-x)*(1.-x)
 */
    __pyx_v_kernel = (1. - (((6. * __pyx_v_x) * __pyx_v_x) * (1. - __pyx_v_x)));

    /* "yt/geometry/particle_deposit.pxd":43
 *     # C is 8/pi
 *     cdef np.float64_t C = 2.5464790894703255
 *     if x <= 0.5:             # <<<<<<<<<<<<<<
 *         kernel = 1.-6.*x*x*(1.-x)
 *     elif x>0.5 and x<=1.0:
 */
    goto __pyx_L3;
  }

  /* "yt/geometry/particle_deposit.pxd":45
 *     if x <= 0.5:
 *         kernel = 1.-6.*x*x*(1.-x)
 *     elif x>0.5 and x<=1.0:             # <<<<<<<<<<<<<<
 *         kernel = 2.*(1.-x)*(1.-x)*(1.-x)
 *     else:
 */
  __pyx_t_2 = ((__pyx_v_x > 0.5) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_x <= 1.0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "yt/geometry/particle_deposit.pxd":46
 *         kernel = 1.-6.*x*x*(1.-x)
 *     elif x>0.5 and x<=1.0:
 *         kernel = 2.*(1.-x)*(1.-x)*(1.-x)             # <<<<<<<<<<<<<<
 *     else:
 *         kernel = 0.
 */
    __pyx_v_kernel = (((2. * (1. - __pyx_v_x)) * (1. - __pyx_v_x)) * (1. - __pyx_v_x));

    /* "yt/geometry/particle_deposit.pxd":45
 *     if x <= 0.5:
 *         kernel = 1.-6.*x*x*(1.-x)
 *     elif x>0.5 and x<=1.0:             # <<<<<<<<<<<<<<
 *         kernel = 2.*(1.-x)*(1.-x)*(1.-x)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "yt/geometry/particle_deposit.pxd":48
 *         kernel = 2.*(1.-x)*(1.-x)*(1.-x)
 *     else:
 *         kernel = 0.             # <<<<<<<<<<<<<<
 *     return kernel * C
 * 
 */
  /*else*/ {
    __pyx_v_kernel = 0.;
  }
  __pyx_L3:;

  /* "yt/geometry/particle_deposit.pxd":49
 *     else:
 *         kernel = 0.
 *     return kernel * C             # <<<<<<<<<<<<<<
 * 
 * ########################################################
 */
  __pyx_r = (__pyx_v_kernel * __pyx_v_C);
  goto __pyx_L0;

  /* "yt/geometry/particle_deposit.pxd":39
 * ####################################################
 * 
 * cdef inline np.float64_t sph_kernel_cubic(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t kernel
 *     # C is 8/pi
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_deposit.pxd":56
 * 
 * # quartic spline
 * cdef inline np.float64_t sph_kernel_quartic(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 9.71404681957369  # 5.**6/512/np.pi
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_quartic(__pyx_t_5numpy_float64_t __pyx_v_x) {
  __pyx_t_5numpy_float64_t __pyx_v_kernel;
  __pyx_t_5numpy_float64_t __pyx_v_C;
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/geometry/particle_deposit.pxd":58
 * cdef inline np.float64_t sph_kernel_quartic(np.float64_t x) nogil:
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 9.71404681957369  # 5.**6/512/np.pi             # <<<<<<<<<<<<<<
 *     if x < 1:
 *         kernel = (1.-x)**4
 */
  __pyx_v_C = 9.71404681957369;

  /* "yt/geometry/particle_deposit.pxd":59
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 9.71404681957369  # 5.**6/512/np.pi
 *     if x < 1:             # <<<<<<<<<<<<<<
 *         kernel = (1.-x)**4
 *         if x < 3./5:
 */
  __pyx_t_1 = ((__pyx_v_x < 1.0) != 0);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_deposit.pxd":60
 *     cdef np.float64_t C = 9.71404681957369  # 5.**6/512/np.pi
 *     if x < 1:
 *         kernel = (1.-x)**4             # <<<<<<<<<<<<<<
 *         if x < 3./5:
 *             kernel -= 5*(3./5-x)**4
 */
    __pyx_v_kernel = pow((1. - __pyx_v_x), 4.0);

    /* "yt/geometry/particle_deposit.pxd":61
 *     if x < 1:
 *         kernel = (1.-x)**4
 *         if x < 3./5:             # <<<<<<<<<<<<<<
 *             kernel -= 5*(3./5-x)**4
 *             if x < 1./5:
 */
    __pyx_t_1 = ((__pyx_v_x < (3. / 5.0)) != 0);
    if (__pyx_t_1) {

      /* "yt/geometry/particle_deposit.pxd":62
 *         kernel = (1.-x)**4
 *         if x < 3./5:
 *             kernel -= 5*(3./5-x)**4             # <<<<<<<<<<<<<<
 *             if x < 1./5:
 *                 kernel += 10*(1./5-x)**4
 */
      __pyx_v_kernel = (__pyx_v_kernel - (5.0 * pow(((3. / 5.0) - __pyx_v_x), 4.0)));

      /* "yt/geometry/particle_deposit.pxd":63
 *         if x < 3./5:
 *             kernel -= 5*(3./5-x)**4
 *             if x < 1./5:             # <<<<<<<<<<<<<<
 *                 kernel += 10*(1./5-x)**4
 *     else:
 */
      __pyx_t_1 = ((__pyx_v_x < (1. / 5.0)) != 0);
      if (__pyx_t_1) {

        /* "yt/geometry/particle_deposit.pxd":64
 *             kernel -= 5*(3./5-x)**4
 *             if x < 1./5:
 *                 kernel += 10*(1./5-x)**4             # <<<<<<<<<<<<<<
 *     else:
 *         kernel = 0.
 */
        __pyx_v_kernel = (__pyx_v_kernel + (10.0 * pow(((1. / 5.0) - __pyx_v_x), 4.0)));

        /* "yt/geometry/particle_deposit.pxd":63
 *         if x < 3./5:
 *             kernel -= 5*(3./5-x)**4
 *             if x < 1./5:             # <<<<<<<<<<<<<<
 *                 kernel += 10*(1./5-x)**4
 *     else:
 */
      }

      /* "yt/geometry/particle_deposit.pxd":61
 *     if x < 1:
 *         kernel = (1.-x)**4
 *         if x < 3./5:             # <<<<<<<<<<<<<<
 *             kernel -= 5*(3./5-x)**4
 *             if x < 1./5:
 */
    }

    /* "yt/geometry/particle_deposit.pxd":59
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 9.71404681957369  # 5.**6/512/np.pi
 *     if x < 1:             # <<<<<<<<<<<<<<
 *         kernel = (1.-x)**4
 *         if x < 3./5:
 */
    goto __pyx_L3;
  }

  /* "yt/geometry/particle_deposit.pxd":66
 *                 kernel += 10*(1./5-x)**4
 *     else:
 *         kernel = 0.             # <<<<<<<<<<<<<<
 *     return kernel * C
 * 
 */
  /*else*/ {
    __pyx_v_kernel = 0.;
  }
  __pyx_L3:;

  /* "yt/geometry/particle_deposit.pxd":67
 *     else:
 *         kernel = 0.
 *     return kernel * C             # <<<<<<<<<<<<<<
 * 
 * # quintic spline
 */
  __pyx_r = (__pyx_v_kernel * __pyx_v_C);
  goto __pyx_L0;

  /* "yt/geometry/particle_deposit.pxd":56
 * 
 * # quartic spline
 * cdef inline np.float64_t sph_kernel_quartic(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 9.71404681957369  # 5.**6/512/np.pi
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_deposit.pxd":70
 * 
 * # quintic spline
 * cdef inline np.float64_t sph_kernel_quintic(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 17.403593027098754  # 3.**7/40/np.pi
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_quintic(__pyx_t_5numpy_float64_t __pyx_v_x) {
  __pyx_t_5numpy_float64_t __pyx_v_kernel;
  __pyx_t_5numpy_float64_t __pyx_v_C;
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/geometry/particle_deposit.pxd":72
 * cdef inline np.float64_t sph_kernel_quintic(np.float64_t x) nogil:
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 17.403593027098754  # 3.**7/40/np.pi             # <<<<<<<<<<<<<<
 *     if x < 1:
 *         kernel = (1.-x)**5
 */
  __pyx_v_C = 17.403593027098754;

  /* "yt/geometry/particle_deposit.pxd":73
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 17.403593027098754  # 3.**7/40/np.pi
 *     if x < 1:             # <<<<<<<<<<<<<<
 *         kernel = (1.-x)**5
 *         if x < 2./3:
 */
  __pyx_t_1 = ((__pyx_v_x < 1.0) != 0);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_deposit.pxd":74
 *     cdef np.float64_t C = 17.403593027098754  # 3.**7/40/np.pi
 *     if x < 1:
 *         kernel = (1.-x)**5             # <<<<<<<<<<<<<<
 *         if x < 2./3:
 *             kernel -= 6*(2./3-x)**5
 */
    __pyx_v_kernel = pow((1. - __pyx_v_x), 5.0);

    /* "yt/geometry/particle_deposit.pxd":75
 *     if x < 1:
 *         kernel = (1.-x)**5
 *         if x < 2./3:             # <<<<<<<<<<<<<<
 *             kernel -= 6*(2./3-x)**5
 *             if x < 1./3:
 */
    __pyx_t_1 = ((__pyx_v_x < (2. / 3.0)) != 0);
    if (__pyx_t_1) {

      /* "yt/geometry/particle_deposit.pxd":76
 *         kernel = (1.-x)**5
 *         if x < 2./3:
 *             kernel -= 6*(2./3-x)**5             # <<<<<<<<<<<<<<
 *             if x < 1./3:
 *                 kernel += 15*(1./3-x)**5
 */
      __pyx_v_kernel = (__pyx_v_kernel - (6.0 * pow(((2. / 3.0) - __pyx_v_x), 5.0)));

      /* "yt/geometry/particle_deposit.pxd":77
 *         if x < 2./3:
 *             kernel -= 6*(2./3-x)**5
 *             if x < 1./3:             # <<<<<<<<<<<<<<
 *                 kernel += 15*(1./3-x)**5
 *     else:
 */
      __pyx_t_1 = ((__pyx_v_x < (1. / 3.0)) != 0);
      if (__pyx_t_1) {

        /* "yt/geometry/particle_deposit.pxd":78
 *             kernel -= 6*(2./3-x)**5
 *             if x < 1./3:
 *                 kernel += 15*(1./3-x)**5             # <<<<<<<<<<<<<<
 *     else:
 *         kernel = 0.
 */
        __pyx_v_kernel = (__pyx_v_kernel + (15.0 * pow(((1. / 3.0) - __pyx_v_x), 5.0)));

        /* "yt/geometry/particle_deposit.pxd":77
 *         if x < 2./3:
 *             kernel -= 6*(2./3-x)**5
 *             if x < 1./3:             # <<<<<<<<<<<<<<
 *                 kernel += 15*(1./3-x)**5
 *     else:
 */
      }

      /* "yt/geometry/particle_deposit.pxd":75
 *     if x < 1:
 *         kernel = (1.-x)**5
 *         if x < 2./3:             # <<<<<<<<<<<<<<
 *             kernel -= 6*(2./3-x)**5
 *             if x < 1./3:
 */
    }

    /* "yt/geometry/particle_deposit.pxd":73
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 17.403593027098754  # 3.**7/40/np.pi
 *     if x < 1:             # <<<<<<<<<<<<<<
 *         kernel = (1.-x)**5
 *         if x < 2./3:
 */
    goto __pyx_L3;
  }

  /* "yt/geometry/particle_deposit.pxd":80
 *                 kernel += 15*(1./3-x)**5
 *     else:
 *         kernel = 0.             # <<<<<<<<<<<<<<
 *     return kernel * C
 * 
 */
  /*else*/ {
    __pyx_v_kernel = 0.;
  }
  __pyx_L3:;

  /* "yt/geometry/particle_deposit.pxd":81
 *     else:
 *         kernel = 0.
 *     return kernel * C             # <<<<<<<<<<<<<<
 * 
 * # Wendland C2
 */
  __pyx_r = (__pyx_v_kernel * __pyx_v_C);
  goto __pyx_L0;

  /* "yt/geometry/particle_deposit.pxd":70
 * 
 * # quintic spline
 * cdef inline np.float64_t sph_kernel_quintic(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 17.403593027098754  # 3.**7/40/np.pi
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_deposit.pxd":84
 * 
 * # Wendland C2
 * cdef inline np.float64_t sph_kernel_wendland2(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 3.3422538049298023  # 21./2/np.pi
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_wendland2(__pyx_t_5numpy_float64_t __pyx_v_x) {
  __pyx_t_5numpy_float64_t __pyx_v_kernel;
  __pyx_t_5numpy_float64_t __pyx_v_C;
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/geometry/particle_deposit.pxd":86
 * cdef inline np.float64_t sph_kernel_wendland2(np.float64_t x) nogil:
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 3.3422538049298023  # 21./2/np.pi             # <<<<<<<<<<<<<<
 *     if x < 1:
 *         kernel = (1.-x)**4 * (1+4*x)
 */
  __pyx_v_C = 3.3422538049298023;

  /* "yt/geometry/particle_deposit.pxd":87
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 3.3422538049298023  # 21./2/np.pi
 *     if x < 1:             # <<<<<<<<<<<<<<
 *         kernel = (1.-x)**4 * (1+4*x)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_x < 1.0) != 0);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_deposit.pxd":88
 *     cdef np.float64_t C = 3.3422538049298023  # 21./2/np.pi
 *     if x < 1:
 *         kernel = (1.-x)**4 * (1+4*x)             # <<<<<<<<<<<<<<
 *     else:
 *         kernel = 0.
 */
    __pyx_v_kernel = (pow((1. - __pyx_v_x), 4.0) * (1.0 + (4.0 * __pyx_v_x)));

    /* "yt/geometry/particle_deposit.pxd":87
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 3.3422538049298023  # 21./2/np.pi
 *     if x < 1:             # <<<<<<<<<<<<<<
 *         kernel = (1.-x)**4 * (1+4*x)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "yt/geometry/particle_deposit.pxd":90
 *         kernel = (1.-x)**4 * (1+4*x)
 *     else:
 *         kernel = 0.             # <<<<<<<<<<<<<<
 *     return kernel * C
 * 
 */
  /*else*/ {
    __pyx_v_kernel = 0.;
  }
  __pyx_L3:;

  /* "yt/geometry/particle_deposit.pxd":91
 *     else:
 *         kernel = 0.
 *     return kernel * C             # <<<<<<<<<<<<<<
 * 
 * # Wendland C4
 */
  __pyx_r = (__pyx_v_kernel * __pyx_v_C);
  goto __pyx_L0;

  /* "yt/geometry/particle_deposit.pxd":84
 * 
 * # Wendland C2
 * cdef inline np.float64_t sph_kernel_wendland2(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 3.3422538049298023  # 21./2/np.pi
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_deposit.pxd":94
 * 
 * # Wendland C4
 * cdef inline np.float64_t sph_kernel_wendland4(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 4.923856051905513  # 495./32/np.pi
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_wendland4(__pyx_t_5numpy_float64_t __pyx_v_x) {
  __pyx_t_5numpy_float64_t __pyx_v_kernel;
  __pyx_t_5numpy_float64_t __pyx_v_C;
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/geometry/particle_deposit.pxd":96
 * cdef inline np.float64_t sph_kernel_wendland4(np.float64_t x) nogil:
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 4.923856051905513  # 495./32/np.pi             # <<<<<<<<<<<<<<
 *     if x < 1:
 *         kernel = (1.-x)**6 * (1+6*x+35./3*x**2)
 */
  __pyx_v_C = 4.923856051905513;

  /* "yt/geometry/particle_deposit.pxd":97
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 4.923856051905513  # 495./32/np.pi
 *     if x < 1:             # <<<<<<<<<<<<<<
 *         kernel = (1.-x)**6 * (1+6*x+35./3*x**2)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_x < 1.0) != 0);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_deposit.pxd":98
 *     cdef np.float64_t C = 4.923856051905513  # 495./32/np.pi
 *     if x < 1:
 *         kernel = (1.-x)**6 * (1+6*x+35./3*x**2)             # <<<<<<<<<<<<<<
 *     else:
 *         kernel = 0.
 */
    __pyx_v_kernel = (pow((1. - __pyx_v_x), 6.0) * ((1.0 + (6.0 * __pyx_v_x)) + ((35. / 3.0) * pow(__pyx_v_x, 2.0))));

    /* "yt/geometry/particle_deposit.pxd":97
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 4.923856051905513  # 495./32/np.pi
 *     if x < 1:             # <<<<<<<<<<<<<<
 *         kernel = (1.-x)**6 * (1+6*x+35./3*x**2)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "yt/geometry/particle_deposit.pxd":100
 *         kernel = (1.-x)**6 * (1+6*x+35./3*x**2)
 *     else:
 *         kernel = 0.             # <<<<<<<<<<<<<<
 *     return kernel * C
 * 
 */
  /*else*/ {
    __pyx_v_kernel = 0.;
  }
  __pyx_L3:;

  /* "yt/geometry/particle_deposit.pxd":101
 *     else:
 *         kernel = 0.
 *     return kernel * C             # <<<<<<<<<<<<<<
 * 
 * # Wendland C6
 */
  __pyx_r = (__pyx_v_kernel * __pyx_v_C);
  goto __pyx_L0;

  /* "yt/geometry/particle_deposit.pxd":94
 * 
 * # Wendland C4
 * cdef inline np.float64_t sph_kernel_wendland4(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 4.923856051905513  # 495./32/np.pi
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_deposit.pxd":104
 * 
 * # Wendland C6
 * cdef inline np.float64_t sph_kernel_wendland6(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 6.78895304126366  # 1365./64/np.pi
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_wendland6(__pyx_t_5numpy_float64_t __pyx_v_x) {
  __pyx_t_5numpy_float64_t __pyx_v_kernel;
  __pyx_t_5numpy_float64_t __pyx_v_C;
  __pyx_t_5numpy_float64_t __pyx_r;
  int __pyx_t_1;

  /* "yt/geometry/particle_deposit.pxd":106
 * cdef inline np.float64_t sph_kernel_wendland6(np.float64_t x) nogil:
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 6.78895304126366  # 1365./64/np.pi             # <<<<<<<<<<<<<<
 *     if x < 1:
 *         kernel = (1.-x)**8 * (1+8*x+25*x**2+32*x**3)
 */
  __pyx_v_C = 6.78895304126366;

  /* "yt/geometry/particle_deposit.pxd":107
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 6.78895304126366  # 1365./64/np.pi
 *     if x < 1:             # <<<<<<<<<<<<<<
 *         kernel = (1.-x)**8 * (1+8*x+25*x**2+32*x**3)
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_x < 1.0) != 0);
  if (__pyx_t_1) {

    /* "yt/geometry/particle_deposit.pxd":108
 *     cdef np.float64_t C = 6.78895304126366  # 1365./64/np.pi
 *     if x < 1:
 *         kernel = (1.-x)**8 * (1+8*x+25*x**2+32*x**3)             # <<<<<<<<<<<<<<
 *     else:
 *         kernel = 0.
 */
    __pyx_v_kernel = (pow((1. - __pyx_v_x), 8.0) * (((1.0 + (8.0 * __pyx_v_x)) + (25.0 * pow(__pyx_v_x, 2.0))) + (32.0 * pow(__pyx_v_x, 3.0))));

    /* "yt/geometry/particle_deposit.pxd":107
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 6.78895304126366  # 1365./64/np.pi
 *     if x < 1:             # <<<<<<<<<<<<<<
 *         kernel = (1.-x)**8 * (1+8*x+25*x**2+32*x**3)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "yt/geometry/particle_deposit.pxd":110
 *         kernel = (1.-x)**8 * (1+8*x+25*x**2+32*x**3)
 *     else:
 *         kernel = 0.             # <<<<<<<<<<<<<<
 *     return kernel * C
 * 
 */
  /*else*/ {
    __pyx_v_kernel = 0.;
  }
  __pyx_L3:;

  /* "yt/geometry/particle_deposit.pxd":111
 *     else:
 *         kernel = 0.
 *     return kernel * C             # <<<<<<<<<<<<<<
 * 
 * cdef inline np.float64_t sph_kernel_dummy(np.float64_t x) nogil:
 */
  __pyx_r = (__pyx_v_kernel * __pyx_v_C);
  goto __pyx_L0;

  /* "yt/geometry/particle_deposit.pxd":104
 * 
 * # Wendland C6
 * cdef inline np.float64_t sph_kernel_wendland6(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     cdef np.float64_t kernel
 *     cdef np.float64_t C = 6.78895304126366  # 1365./64/np.pi
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_deposit.pxd":113
 *     return kernel * C
 * 
 * cdef inline np.float64_t sph_kernel_dummy(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */

static CYTHON_INLINE __pyx_t_5numpy_float64_t __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_dummy(CYTHON_UNUSED __pyx_t_5numpy_float64_t __pyx_v_x) {
  __pyx_t_5numpy_float64_t __pyx_r;

  /* "yt/geometry/particle_deposit.pxd":114
 * 
 * cdef inline np.float64_t sph_kernel_dummy(np.float64_t x) nogil:
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * # I don't know the way to use a dict in a cdef class.
 */
  __pyx_r = 0.0;
  goto __pyx_L0;

  /* "yt/geometry/particle_deposit.pxd":113
 *     return kernel * C
 * 
 * cdef inline np.float64_t sph_kernel_dummy(np.float64_t x) nogil:             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "yt/geometry/particle_deposit.pxd":120
 * # I manually created a function to lookup the kernel functions.
 * ctypedef np.float64_t (*kernel_func) (np.float64_t) nogil
 * cdef inline kernel_func get_kernel_func(str kernel_name) nogil:             # <<<<<<<<<<<<<<
 *     with gil:
 *         if kernel_name == 'cubic':
 */

static CYTHON_INLINE __pyx_t_2yt_8geometry_16particle_deposit_kernel_func __pyx_f_2yt_8geometry_16particle_deposit_get_kernel_func(PyObject *__pyx_v_kernel_name) {
  __pyx_t_2yt_8geometry_16particle_deposit_kernel_func __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("get_kernel_func", 0);
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif

  /* "yt/geometry/particle_deposit.pxd":121
 * ctypedef np.float64_t (*kernel_func) (np.float64_t) nogil
 * cdef inline kernel_func get_kernel_func(str kernel_name) nogil:
 *     with gil:             # <<<<<<<<<<<<<<
 *         if kernel_name == 'cubic':
 *             return sph_kernel_cubic
 */
  /*try:*/ {
    {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
        #endif
        /*try:*/ {

          /* "yt/geometry/particle_deposit.pxd":122
 * cdef inline kernel_func get_kernel_func(str kernel_name) nogil:
 *     with gil:
 *         if kernel_name == 'cubic':             # <<<<<<<<<<<<<<
 *             return sph_kernel_cubic
 *         elif kernel_name == 'quartic':
 */
          __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_kernel_name, __pyx_n_u_cubic, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 122, __pyx_L7_error)
          __pyx_t_2 = (__pyx_t_1 != 0);
          if (__pyx_t_2) {

            /* "yt/geometry/particle_deposit.pxd":123
 *     with gil:
 *         if kernel_name == 'cubic':
 *             return sph_kernel_cubic             # <<<<<<<<<<<<<<
 *         elif kernel_name == 'quartic':
 *             return sph_kernel_quartic
 */
            __pyx_r = __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_cubic;
            goto __pyx_L6_return;

            /* "yt/geometry/particle_deposit.pxd":122
 * cdef inline kernel_func get_kernel_func(str kernel_name) nogil:
 *     with gil:
 *         if kernel_name == 'cubic':             # <<<<<<<<<<<<<<
 *             return sph_kernel_cubic
 *         elif kernel_name == 'quartic':
 */
          }

          /* "yt/geometry/particle_deposit.pxd":124
 *         if kernel_name == 'cubic':
 *             return sph_kernel_cubic
 *         elif kernel_name == 'quartic':             # <<<<<<<<<<<<<<
 *             return sph_kernel_quartic
 *         elif kernel_name == 'quintic':
 */
          __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_kernel_name, __pyx_n_u_quartic, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 124, __pyx_L7_error)
          __pyx_t_1 = (__pyx_t_2 != 0);
          if (__pyx_t_1) {

            /* "yt/geometry/particle_deposit.pxd":125
 *             return sph_kernel_cubic
 *         elif kernel_name == 'quartic':
 *             return sph_kernel_quartic             # <<<<<<<<<<<<<<
 *         elif kernel_name == 'quintic':
 *             return sph_kernel_quintic
 */
            __pyx_r = __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_quartic;
            goto __pyx_L6_return;

            /* "yt/geometry/particle_deposit.pxd":124
 *         if kernel_name == 'cubic':
 *             return sph_kernel_cubic
 *         elif kernel_name == 'quartic':             # <<<<<<<<<<<<<<
 *             return sph_kernel_quartic
 *         elif kernel_name == 'quintic':
 */
          }

          /* "yt/geometry/particle_deposit.pxd":126
 *         elif kernel_name == 'quartic':
 *             return sph_kernel_quartic
 *         elif kernel_name == 'quintic':             # <<<<<<<<<<<<<<
 *             return sph_kernel_quintic
 *         elif kernel_name == 'wendland2':
 */
          __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_kernel_name, __pyx_n_u_quintic, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 126, __pyx_L7_error)
          __pyx_t_2 = (__pyx_t_1 != 0);
          if (__pyx_t_2) {

            /* "yt/geometry/particle_deposit.pxd":127
 *             return sph_kernel_quartic
 *         elif kernel_name == 'quintic':
 *             return sph_kernel_quintic             # <<<<<<<<<<<<<<
 *         elif kernel_name == 'wendland2':
 *             return sph_kernel_wendland2
 */
            __pyx_r = __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_quintic;
            goto __pyx_L6_return;

            /* "yt/geometry/particle_deposit.pxd":126
 *         elif kernel_name == 'quartic':
 *             return sph_kernel_quartic
 *         elif kernel_name == 'quintic':             # <<<<<<<<<<<<<<
 *             return sph_kernel_quintic
 *         elif kernel_name == 'wendland2':
 */
          }

          /* "yt/geometry/particle_deposit.pxd":128
 *         elif kernel_name == 'quintic':
 *             return sph_kernel_quintic
 *         elif kernel_name == 'wendland2':             # <<<<<<<<<<<<<<
 *             return sph_kernel_wendland2
 *         elif kernel_name == 'wendland4':
 */
          __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_kernel_name, __pyx_n_u_wendland2, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 128, __pyx_L7_error)
          __pyx_t_1 = (__pyx_t_2 != 0);
          if (__pyx_t_1) {

            /* "yt/geometry/particle_deposit.pxd":129
 *             return sph_kernel_quintic
 *         elif kernel_name == 'wendland2':
 *             return sph_kernel_wendland2             # <<<<<<<<<<<<<<
 *         elif kernel_name == 'wendland4':
 *             return sph_kernel_wendland4
 */
            __pyx_r = __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_wendland2;
            goto __pyx_L6_return;

            /* "yt/geometry/particle_deposit.pxd":128
 *         elif kernel_name == 'quintic':
 *             return sph_kernel_quintic
 *         elif kernel_name == 'wendland2':             # <<<<<<<<<<<<<<
 *             return sph_kernel_wendland2
 *         elif kernel_name == 'wendland4':
 */
          }

          /* "yt/geometry/particle_deposit.pxd":130
 *         elif kernel_name == 'wendland2':
 *             return sph_kernel_wendland2
 *         elif kernel_name == 'wendland4':             # <<<<<<<<<<<<<<
 *             return sph_kernel_wendland4
 *         elif kernel_name == 'wendland6':
 */
          __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_kernel_name, __pyx_n_u_wendland4, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 130, __pyx_L7_error)
          __pyx_t_2 = (__pyx_t_1 != 0);
          if (__pyx_t_2) {

            /* "yt/geometry/particle_deposit.pxd":131
 *             return sph_kernel_wendland2
 *         elif kernel_name == 'wendland4':
 *             return sph_kernel_wendland4             # <<<<<<<<<<<<<<
 *         elif kernel_name == 'wendland6':
 *             return sph_kernel_wendland6
 */
            __pyx_r = __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_wendland4;
            goto __pyx_L6_return;

            /* "yt/geometry/particle_deposit.pxd":130
 *         elif kernel_name == 'wendland2':
 *             return sph_kernel_wendland2
 *         elif kernel_name == 'wendland4':             # <<<<<<<<<<<<<<
 *             return sph_kernel_wendland4
 *         elif kernel_name == 'wendland6':
 */
          }

          /* "yt/geometry/particle_deposit.pxd":132
 *         elif kernel_name == 'wendland4':
 *             return sph_kernel_wendland4
 *         elif kernel_name == 'wendland6':             # <<<<<<<<<<<<<<
 *             return sph_kernel_wendland6
 *         elif kernel_name == 'none':
 */
          __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_kernel_name, __pyx_n_u_wendland6, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 132, __pyx_L7_error)
          __pyx_t_1 = (__pyx_t_2 != 0);
          if (__pyx_t_1) {

            /* "yt/geometry/particle_deposit.pxd":133
 *             return sph_kernel_wendland4
 *         elif kernel_name == 'wendland6':
 *             return sph_kernel_wendland6             # <<<<<<<<<<<<<<
 *         elif kernel_name == 'none':
 *             return sph_kernel_dummy
 */
            __pyx_r = __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_wendland6;
            goto __pyx_L6_return;

            /* "yt/geometry/particle_deposit.pxd":132
 *         elif kernel_name == 'wendland4':
 *             return sph_kernel_wendland4
 *         elif kernel_name == 'wendland6':             # <<<<<<<<<<<<<<
 *             return sph_kernel_wendland6
 *         elif kernel_name == 'none':
 */
          }

          /* "yt/geometry/particle_deposit.pxd":134
 *         elif kernel_name == 'wendland6':
 *             return sph_kernel_wendland6
 *         elif kernel_name == 'none':             # <<<<<<<<<<<<<<
 *             return sph_kernel_dummy
 *         else:
 */
          __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_kernel_name, __pyx_n_u_none, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 134, __pyx_L7_error)
          __pyx_t_2 = (__pyx_t_1 != 0);
          if (likely(__pyx_t_2)) {

            /* "yt/geometry/particle_deposit.pxd":135
 *             return sph_kernel_wendland6
 *         elif kernel_name == 'none':
 *             return sph_kernel_dummy             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError
 */
            __pyx_r = __pyx_f_2yt_8geometry_16particle_deposit_sph_kernel_dummy;
            goto __pyx_L6_return;

            /* "yt/geometry/particle_deposit.pxd":134
 *         elif kernel_name == 'wendland6':
 *             return sph_kernel_wendland6
 *         elif kernel_name == 'none':             # <<<<<<<<<<<<<<
 *             return sph_kernel_dummy
 *         else:
 */
          }

          /* "yt/geometry/particle_deposit.pxd":137
 *             return sph_kernel_dummy
 *         else:
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 * cdef class ParticleDepositOperation:
 */
          /*else*/ {
            __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
            __PYX_ERR(5, 137, __pyx_L7_error)
          }
        }

        /* "yt/geometry/particle_deposit.pxd":121
 * ctypedef np.float64_t (*kernel_func) (np.float64_t) nogil
 * cdef inline kernel_func get_kernel_func(str kernel_name) nogil:
 *     with gil:             # <<<<<<<<<<<<<<
 *         if kernel_name == 'cubic':
 *             return sph_kernel_cubic
 */
        /*finally:*/ {
          __pyx_L6_return: {
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            goto __pyx_L3_return;
          }
          __pyx_L7_error: {
            #ifdef WITH_THREAD
            __Pyx_PyGILState_Release(__pyx_gilstate_save);
            #endif
            goto __pyx_L4_error;
          }
        }
    }
  }
  /*finally:*/ {
    __pyx_L3_return: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      goto __pyx_L0;
    }
    __pyx_L4_error: {
      #ifdef WITH_THREAD
      __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
      #endif
      goto __pyx_L1_error;
    }
  }

  /* "yt/geometry/particle_deposit.pxd":120
 * # I manually created a function to lookup the kernel functions.
 * ctypedef np.float64_t (*kernel_func) (np.float64_t) nogil
 * cdef inline kernel_func get_kernel_func(str kernel_name) nogil:             # <<<<<<<<<<<<<<
 *     with gil:
 *         if kernel_name == 'cubic':
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("yt.geometry.particle_deposit.get_kernel_func", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 1);
  __pyx_r = 0;
  __pyx_L0:;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "vec3_ops.pxd":8
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline cython.floating dot(const cython.floating[3] a,             # <<<<<<<<<<<<<<
 *                                 const cython.floating[3] b) nogil:
 *     return a[0]*b[0] + a[1]*b[1] + a[2]*b[2]
 */

static CYTHON_INLINE float __pyx_fuse_0__pyx_f_2yt_9utilities_3lib_8vec3_ops_dot(float *__pyx_v_a, float *__pyx_v_b) {
  float __pyx_r;

  /* "vec3_ops.pxd":10
 * cdef inline cython.floating dot(const cython.floating[3] a,
 *                                 const cython.floating[3] b) nogil:
 *     return a[0]*b[0] + a[1]*b[1] + a[2]*b[2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((((__pyx_v_a[0]) * (__pyx_v_b[0])) + ((__pyx_v_a[1]) * (__pyx_v_b[1]))) + ((__pyx_v_a[2]) * (__pyx_v_b[2])));
  goto __pyx_L0;

  /* "vec3_ops.pxd":8
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline cython.floating dot(const cython.floating[3] a,             # <<<<<<<<<<<<<<
 *                                 const cython.floating[3] b) nogil:
 *     return a[0]*b[0] + a[1]*b[1] + a[2]*b[2]
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE double __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_dot(double *__pyx_v_a, double *__pyx_v_b) {
  double __pyx_r;

  /* "vec3_ops.pxd":10
 * cdef inline cython.floating dot(const cython.floating[3] a,
 *                                 const cython.floating[3] b) nogil:
 *     return a[0]*b[0] + a[1]*b[1] + a[2]*b[2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((((__pyx_v_a[0]) * (__pyx_v_b[0])) + ((__pyx_v_a[1]) * (__pyx_v_b[1]))) + ((__pyx_v_a[2]) * (__pyx_v_b[2])));
  goto __pyx_L0;

  /* "vec3_ops.pxd":8
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline cython.floating dot(const cython.floating[3] a,             # <<<<<<<<<<<<<<
 *                                 const cython.floating[3] b) nogil:
 *     return a[0]*b[0] + a[1]*b[1] + a[2]*b[2]
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "vec3_ops.pxd":16
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline void cross(const cython.floating[3] a,             # <<<<<<<<<<<<<<
 *                        const cython.floating[3] b,
 *                        cython.floating c[3]) nogil:
 */

static CYTHON_INLINE void __pyx_fuse_0__pyx_f_2yt_9utilities_3lib_8vec3_ops_cross(float *__pyx_v_a, float *__pyx_v_b, float *__pyx_v_c) {

  /* "vec3_ops.pxd":19
 *                        const cython.floating[3] b,
 *                        cython.floating c[3]) nogil:
 *     c[0] = a[1]*b[2] - a[2]*b[1]             # <<<<<<<<<<<<<<
 *     c[1] = a[2]*b[0] - a[0]*b[2]
 *     c[2] = a[0]*b[1] - a[1]*b[0]
 */
  (__pyx_v_c[0]) = (((__pyx_v_a[1]) * (__pyx_v_b[2])) - ((__pyx_v_a[2]) * (__pyx_v_b[1])));

  /* "vec3_ops.pxd":20
 *                        cython.floating c[3]) nogil:
 *     c[0] = a[1]*b[2] - a[2]*b[1]
 *     c[1] = a[2]*b[0] - a[0]*b[2]             # <<<<<<<<<<<<<<
 *     c[2] = a[0]*b[1] - a[1]*b[0]
 * 
 */
  (__pyx_v_c[1]) = (((__pyx_v_a[2]) * (__pyx_v_b[0])) - ((__pyx_v_a[0]) * (__pyx_v_b[2])));

  /* "vec3_ops.pxd":21
 *     c[0] = a[1]*b[2] - a[2]*b[1]
 *     c[1] = a[2]*b[0] - a[0]*b[2]
 *     c[2] = a[0]*b[1] - a[1]*b[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_c[2]) = (((__pyx_v_a[0]) * (__pyx_v_b[1])) - ((__pyx_v_a[1]) * (__pyx_v_b[0])));

  /* "vec3_ops.pxd":16
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline void cross(const cython.floating[3] a,             # <<<<<<<<<<<<<<
 *                        const cython.floating[3] b,
 *                        cython.floating c[3]) nogil:
 */

  /* function exit code */
}

static CYTHON_INLINE void __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_cross(double *__pyx_v_a, double *__pyx_v_b, double *__pyx_v_c) {

  /* "vec3_ops.pxd":19
 *                        const cython.floating[3] b,
 *                        cython.floating c[3]) nogil:
 *     c[0] = a[1]*b[2] - a[2]*b[1]             # <<<<<<<<<<<<<<
 *     c[1] = a[2]*b[0] - a[0]*b[2]
 *     c[2] = a[0]*b[1] - a[1]*b[0]
 */
  (__pyx_v_c[0]) = (((__pyx_v_a[1]) * (__pyx_v_b[2])) - ((__pyx_v_a[2]) * (__pyx_v_b[1])));

  /* "vec3_ops.pxd":20
 *                        cython.floating c[3]) nogil:
 *     c[0] = a[1]*b[2] - a[2]*b[1]
 *     c[1] = a[2]*b[0] - a[0]*b[2]             # <<<<<<<<<<<<<<
 *     c[2] = a[0]*b[1] - a[1]*b[0]
 * 
 */
  (__pyx_v_c[1]) = (((__pyx_v_a[2]) * (__pyx_v_b[0])) - ((__pyx_v_a[0]) * (__pyx_v_b[2])));

  /* "vec3_ops.pxd":21
 *     c[0] = a[1]*b[2] - a[2]*b[1]
 *     c[1] = a[2]*b[0] - a[0]*b[2]
 *     c[2] = a[0]*b[1] - a[1]*b[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_c[2]) = (((__pyx_v_a[0]) * (__pyx_v_b[1])) - ((__pyx_v_a[1]) * (__pyx_v_b[0])));

  /* "vec3_ops.pxd":16
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline void cross(const cython.floating[3] a,             # <<<<<<<<<<<<<<
 *                        const cython.floating[3] b,
 *                        cython.floating c[3]) nogil:
 */

  /* function exit code */
}

/* "vec3_ops.pxd":27
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline void subtract(const cython.floating[3] a,             # <<<<<<<<<<<<<<
 *                           const cython.floating[3] b,
 *                           cython.floating c[3]) nogil:
 */

static CYTHON_INLINE void __pyx_fuse_0__pyx_f_2yt_9utilities_3lib_8vec3_ops_subtract(float *__pyx_v_a, float *__pyx_v_b, float *__pyx_v_c) {

  /* "vec3_ops.pxd":30
 *                           const cython.floating[3] b,
 *                           cython.floating c[3]) nogil:
 *     c[0] = a[0] - b[0]             # <<<<<<<<<<<<<<
 *     c[1] = a[1] - b[1]
 *     c[2] = a[2] - b[2]
 */
  (__pyx_v_c[0]) = ((__pyx_v_a[0]) - (__pyx_v_b[0]));

  /* "vec3_ops.pxd":31
 *                           cython.floating c[3]) nogil:
 *     c[0] = a[0] - b[0]
 *     c[1] = a[1] - b[1]             # <<<<<<<<<<<<<<
 *     c[2] = a[2] - b[2]
 * 
 */
  (__pyx_v_c[1]) = ((__pyx_v_a[1]) - (__pyx_v_b[1]));

  /* "vec3_ops.pxd":32
 *     c[0] = a[0] - b[0]
 *     c[1] = a[1] - b[1]
 *     c[2] = a[2] - b[2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_c[2]) = ((__pyx_v_a[2]) - (__pyx_v_b[2]));

  /* "vec3_ops.pxd":27
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline void subtract(const cython.floating[3] a,             # <<<<<<<<<<<<<<
 *                           const cython.floating[3] b,
 *                           cython.floating c[3]) nogil:
 */

  /* function exit code */
}

static CYTHON_INLINE void __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_subtract(double *__pyx_v_a, double *__pyx_v_b, double *__pyx_v_c) {

  /* "vec3_ops.pxd":30
 *                           const cython.floating[3] b,
 *                           cython.floating c[3]) nogil:
 *     c[0] = a[0] - b[0]             # <<<<<<<<<<<<<<
 *     c[1] = a[1] - b[1]
 *     c[2] = a[2] - b[2]
 */
  (__pyx_v_c[0]) = ((__pyx_v_a[0]) - (__pyx_v_b[0]));

  /* "vec3_ops.pxd":31
 *                           cython.floating c[3]) nogil:
 *     c[0] = a[0] - b[0]
 *     c[1] = a[1] - b[1]             # <<<<<<<<<<<<<<
 *     c[2] = a[2] - b[2]
 * 
 */
  (__pyx_v_c[1]) = ((__pyx_v_a[1]) - (__pyx_v_b[1]));

  /* "vec3_ops.pxd":32
 *     c[0] = a[0] - b[0]
 *     c[1] = a[1] - b[1]
 *     c[2] = a[2] - b[2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_c[2]) = ((__pyx_v_a[2]) - (__pyx_v_b[2]));

  /* "vec3_ops.pxd":27
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline void subtract(const cython.floating[3] a,             # <<<<<<<<<<<<<<
 *                           const cython.floating[3] b,
 *                           cython.floating c[3]) nogil:
 */

  /* function exit code */
}

/* "vec3_ops.pxd":38
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline cython.floating distance(const cython.floating[3] a,             # <<<<<<<<<<<<<<
 *                                      const cython.floating[3] b) nogil:
 *     return sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2 +(a[2] - b[2])**2)
 */

static CYTHON_INLINE float __pyx_fuse_0__pyx_f_2yt_9utilities_3lib_8vec3_ops_distance(float *__pyx_v_a, float *__pyx_v_b) {
  float __pyx_r;

  /* "vec3_ops.pxd":40
 * cdef inline cython.floating distance(const cython.floating[3] a,
 *                                      const cython.floating[3] b) nogil:
 *     return sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2 +(a[2] - b[2])**2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = sqrt(((powf(((__pyx_v_a[0]) - (__pyx_v_b[0])), 2.0) + powf(((__pyx_v_a[1]) - (__pyx_v_b[1])), 2.0)) + powf(((__pyx_v_a[2]) - (__pyx_v_b[2])), 2.0)));
  goto __pyx_L0;

  /* "vec3_ops.pxd":38
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline cython.floating distance(const cython.floating[3] a,             # <<<<<<<<<<<<<<
 *                                      const cython.floating[3] b) nogil:
 *     return sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2 +(a[2] - b[2])**2)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE double __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_distance(double *__pyx_v_a, double *__pyx_v_b) {
  double __pyx_r;

  /* "vec3_ops.pxd":40
 * cdef inline cython.floating distance(const cython.floating[3] a,
 *                                      const cython.floating[3] b) nogil:
 *     return sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2 +(a[2] - b[2])**2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = sqrt(((pow(((__pyx_v_a[0]) - (__pyx_v_b[0])), 2.0) + pow(((__pyx_v_a[1]) - (__pyx_v_b[1])), 2.0)) + pow(((__pyx_v_a[2]) - (__pyx_v_b[2])), 2.0)));
  goto __pyx_L0;

  /* "vec3_ops.pxd":38
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline cython.floating distance(const cython.floating[3] a,             # <<<<<<<<<<<<<<
 *                                      const cython.floating[3] b) nogil:
 *     return sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2 +(a[2] - b[2])**2)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "vec3_ops.pxd":46
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline void fma(const cython.floating f,             # <<<<<<<<<<<<<<
 *                      const cython.floating[3] a,
 *                      const cython.floating[3] b,
 */

static CYTHON_INLINE void __pyx_fuse_0__pyx_f_2yt_9utilities_3lib_8vec3_ops_fma(float const __pyx_v_f, float *__pyx_v_a, float *__pyx_v_b, float *__pyx_v_c) {

  /* "vec3_ops.pxd":50
 *                      const cython.floating[3] b,
 *                      cython.floating[3] c) nogil:
 *     c[0] = f * a[0] + b[0]             # <<<<<<<<<<<<<<
 *     c[1] = f * a[1] + b[1]
 *     c[2] = f * a[2] + b[2]
 */
  (__pyx_v_c[0]) = ((__pyx_v_f * (__pyx_v_a[0])) + (__pyx_v_b[0]));

  /* "vec3_ops.pxd":51
 *                      cython.floating[3] c) nogil:
 *     c[0] = f * a[0] + b[0]
 *     c[1] = f * a[1] + b[1]             # <<<<<<<<<<<<<<
 *     c[2] = f * a[2] + b[2]
 * 
 */
  (__pyx_v_c[1]) = ((__pyx_v_f * (__pyx_v_a[1])) + (__pyx_v_b[1]));

  /* "vec3_ops.pxd":52
 *     c[0] = f * a[0] + b[0]
 *     c[1] = f * a[1] + b[1]
 *     c[2] = f * a[2] + b[2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_c[2]) = ((__pyx_v_f * (__pyx_v_a[2])) + (__pyx_v_b[2]));

  /* "vec3_ops.pxd":46
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline void fma(const cython.floating f,             # <<<<<<<<<<<<<<
 *                      const cython.floating[3] a,
 *                      const cython.floating[3] b,
 */

  /* function exit code */
}

static CYTHON_INLINE void __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_fma(double const __pyx_v_f, double *__pyx_v_a, double *__pyx_v_b, double *__pyx_v_c) {

  /* "vec3_ops.pxd":50
 *                      const cython.floating[3] b,
 *                      cython.floating[3] c) nogil:
 *     c[0] = f * a[0] + b[0]             # <<<<<<<<<<<<<<
 *     c[1] = f * a[1] + b[1]
 *     c[2] = f * a[2] + b[2]
 */
  (__pyx_v_c[0]) = ((__pyx_v_f * (__pyx_v_a[0])) + (__pyx_v_b[0]));

  /* "vec3_ops.pxd":51
 *                      cython.floating[3] c) nogil:
 *     c[0] = f * a[0] + b[0]
 *     c[1] = f * a[1] + b[1]             # <<<<<<<<<<<<<<
 *     c[2] = f * a[2] + b[2]
 * 
 */
  (__pyx_v_c[1]) = ((__pyx_v_f * (__pyx_v_a[1])) + (__pyx_v_b[1]));

  /* "vec3_ops.pxd":52
 *     c[0] = f * a[0] + b[0]
 *     c[1] = f * a[1] + b[1]
 *     c[2] = f * a[2] + b[2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_c[2]) = ((__pyx_v_f * (__pyx_v_a[2])) + (__pyx_v_b[2]));

  /* "vec3_ops.pxd":46
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline void fma(const cython.floating f,             # <<<<<<<<<<<<<<
 *                      const cython.floating[3] a,
 *                      const cython.floating[3] b,
 */

  /* function exit code */
}

/* "vec3_ops.pxd":58
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline cython.floating L2_norm(const cython.floating[3] a) nogil:             # <<<<<<<<<<<<<<
 *     return sqrt(a[0]*a[0] + a[1]*a[1] + a[2]*a[2])
 */

static CYTHON_INLINE float __pyx_fuse_0__pyx_f_2yt_9utilities_3lib_8vec3_ops_L2_norm(float *__pyx_v_a) {
  float __pyx_r;

  /* "vec3_ops.pxd":59
 * @cython.cdivision(True)
 * cdef inline cython.floating L2_norm(const cython.floating[3] a) nogil:
 *     return sqrt(a[0]*a[0] + a[1]*a[1] + a[2]*a[2])             # <<<<<<<<<<<<<<
 */
  __pyx_r = sqrt(((((__pyx_v_a[0]) * (__pyx_v_a[0])) + ((__pyx_v_a[1]) * (__pyx_v_a[1]))) + ((__pyx_v_a[2]) * (__pyx_v_a[2]))));
  goto __pyx_L0;

  /* "vec3_ops.pxd":58
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline cython.floating L2_norm(const cython.floating[3] a) nogil:             # <<<<<<<<<<<<<<
 *     return sqrt(a[0]*a[0] + a[1]*a[1] + a[2]*a[2])
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

static CYTHON_INLINE double __pyx_fuse_1__pyx_f_2yt_9utilities_3lib_8vec3_ops_L2_norm(double *__pyx_v_a) {
  double __pyx_r;

  /* "vec3_ops.pxd":59
 * @cython.cdivision(True)
 * cdef inline cython.floating L2_norm(const cython.floating[3] a) nogil:
 *     return sqrt(a[0]*a[0] + a[1]*a[1] + a[2]*a[2])             # <<<<<<<<<<<<<<
 */
  __pyx_r = sqrt(((((__pyx_v_a[0]) * (__pyx_v_a[0])) + ((__pyx_v_a[1]) * (__pyx_v_a[1]))) + ((__pyx_v_a[2]) * (__pyx_v_a[2]))));
  goto __pyx_L0;

  /* "vec3_ops.pxd":58
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * cdef inline cython.floating L2_norm(const cython.floating[3] a) nogil:             # <<<<<<<<<<<<<<
 *     return sqrt(a[0]*a[0] + a[1]*a[1] + a[2]*a[2])
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(1, 123, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(1, 123, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 123, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 123, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 124, __pyx_L3_error)
    } else {

      /* "View.MemoryView":124
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 123, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(1, 123, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(1, 123, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":130
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 130, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 130, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":131
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":133
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":134
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 134, __pyx_L1_error)

    /* "View.MemoryView":133
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":136
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":137
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 137, __pyx_L1_error)

    /* "View.MemoryView":136
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":139
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":140
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":139
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":141
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(1, 141, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":142
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 142, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 142, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":145
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":146
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":148
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":149
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 149, __pyx_L1_error)

    /* "View.MemoryView":148
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":152
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 152, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 152, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":153
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":154
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 154, __pyx_L1_error)

      /* "View.MemoryView":153
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":155
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":152
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":158
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 158, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":159
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":160
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":158
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":161
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 161, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":162
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":163
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":161
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":165
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(1, 165, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":167
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":170
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":171
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 171, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 171, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":172
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":175
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":176
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":177
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 177, __pyx_L1_error)

      /* "View.MemoryView":176
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":179
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":180
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":181
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 181, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(1, 181, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":182
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":183
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":179
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":172
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":123
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":186
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":187
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":188
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 188, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":189
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":188
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":190
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 190, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":191
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":190
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":192
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":193
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 193, __pyx_L1_error)

    /* "View.MemoryView":192
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":194
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":195
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":196
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":197
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":199
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":200
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":201
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":203
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":204
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":203
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":206
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":208
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":186
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":212
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":213
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":214
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":213
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":215
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":216
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":217
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":216
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":219
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":215
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":220
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":212
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":223
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":224
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":223
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":227
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":228
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":229
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":227
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":231
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":232
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":231
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":234
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":235
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":234
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":237
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":238
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":237
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":240
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":241
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(1, 241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":240
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":245
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":249
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":250
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 250, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":249
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":252
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":253
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(1, 253, __pyx_L1_error)

    /* "View.MemoryView":252
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":254
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":256
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":245
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":282
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 282, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 282, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":283
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":282
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":284
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":285
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":284
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":299
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":301
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":305
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":307
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":308
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":307
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":310
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":299
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":346
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(1, 346, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 346, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 346, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 346, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 346, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":347
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":348
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":349
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":350
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 350, __pyx_L1_error)

    /* "View.MemoryView":351
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":352
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":353
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":351
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":349
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 */
  __pyx_t_1 = ((!(__PYX_CYTHON_ATOMICS_ENABLED() != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":357
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":358
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 */
      __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

      /* "View.MemoryView":359
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 */
      __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

      /* "View.MemoryView":357
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    }

    /* "View.MemoryView":360
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":361
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *                 if self.lock is NULL:
 *                     raise MemoryError
 */
      __pyx_v_self->lock = PyThread_allocate_lock();

      /* "View.MemoryView":362
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":363
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 *                     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
        PyErr_NoMemory(); __PYX_ERR(1, 363, __pyx_L1_error)

        /* "View.MemoryView":362
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      }

      /* "View.MemoryView":360
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    }

    /* "View.MemoryView":355
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 */
  }

  /* "View.MemoryView":365
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":366
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":365
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L11;
  }

  /* "View.MemoryView":368
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L11:;

  /* "View.MemoryView":370
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":372
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":346
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":374
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":375
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":376
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":375
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":377
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":379
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":380
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":377
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":384
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":385
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":386
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":387
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":388
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":390
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":389
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":388
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":391
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":386
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":393
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":384
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":374
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":395
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":397
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":399
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 399, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 399, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 399, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 399, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 399, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":400
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 400, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(1, 400, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":399
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":402
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":395
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":405
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":406
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":407
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":406
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":409
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 409, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 409, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 409, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":412
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 412, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":413
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":412
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":415
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(1, 415, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":416
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":405
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":418
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":419
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":420
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 420, __pyx_L1_error)

    /* "View.MemoryView":419
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":422
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 422, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 422, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":424
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 424, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":425
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":426
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 426, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":427
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":426
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":429
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(1, 429, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":424
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":431
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":418
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":433
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":434
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":436
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 437, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":436
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 436, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":438
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(1, 438, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":439
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":435
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":434
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":441
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":433
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":443
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  __Pyx_memviewslice *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":447
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(1, 447, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 447, __pyx_L1_error)

  /* "View.MemoryView":448
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(1, 448, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_2 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 448, __pyx_L1_error)

  /* "View.MemoryView":449
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":447
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_6 = __pyx_memoryview_copy_contents((__pyx_t_1[0]), (__pyx_t_2[0]), __pyx_t_4, __pyx_t_5, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 447, __pyx_L1_error)

  /* "View.MemoryView":443
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":451
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":453
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":458
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 458, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":460
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":461
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":462
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":463
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 463, __pyx_L1_error)

      /* "View.MemoryView":462
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":464
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":460
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":466
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":468
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":469
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_2 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":470
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":469
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":472
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 472, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":476
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":477
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 477, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":476
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":478
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":481
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":451
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":483
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":484
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(1, 484, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":485
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":483
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":487
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":490
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":493
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":495
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 495, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 495, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 495, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 495, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 495, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 495, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":499
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":500
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 500, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":499
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":501
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":496
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 496, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(1, 496, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":497
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 497, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 497, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":494
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":487
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":503
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":506
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":511
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":512
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 512, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":511
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 514, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 514, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 514, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":516
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(1, 516, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":517
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":516
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":517
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":503
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":520
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":521
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":522
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 522, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 522, __pyx_L1_error)

    /* "View.MemoryView":521
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":524
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":525
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":524
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":527
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":529
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":530
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":529
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":532
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":534
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":535
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":534
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":537
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":539
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":540
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":539
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":542
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":544
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":545
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":546
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":547
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":548
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":549
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":520
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":555
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":556
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(1, 556, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":557
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 557, __pyx_L1_error)

  /* "View.MemoryView":558
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":555
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":561
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":562
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":561
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":565
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":566
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 566, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":565
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":569
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":570
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":572
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 572, __pyx_L1_error)

    /* "View.MemoryView":570
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":574
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 574, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":569
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":577
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":578
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":579
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__29, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":578
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":581
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 581, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":577
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":584
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":585
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":584
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":588
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":589
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":588
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":592
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":593
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":592
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":596
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":597
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":598
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":600
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 600, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":601
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 601, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":603
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":597
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":605
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":596
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":607
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":608
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":609
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":608
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":611
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":607
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":613
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":614
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":615
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":614
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":613
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":617
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":618
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":617
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":621
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":624
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 624, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":625
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":621
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":627
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":630
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(1, 630, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":631
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":627
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":633
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":635
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":637
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":638
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 638, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":643
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":633
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":645
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":647
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":649
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":650
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 650, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":655
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":645
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":659
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":660
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":661
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":662
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":659
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":665
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":666
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":665
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":668
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":673
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":674
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":673
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":676
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":678
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":679
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":680
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":681
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 681, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 681, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 681, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 681, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 681, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 681, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":682
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":683
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":684
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 684, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 684, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__5);
            __Pyx_GIVEREF(__pyx_slice__5);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__5);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 684, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":685
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":683
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":687
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__5); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 687, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":688
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":682
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":691
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 691, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(1, 691, __pyx_L1_error)

        /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":693
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":694
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 694, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":681
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":696
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 696, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":697
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":698
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__5);
        __Pyx_GIVEREF(__pyx_slice__5);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__5);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 698, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":697
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":700
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":668
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":702
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":703
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":704
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":705
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 705, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 705, __pyx_L1_error)

      /* "View.MemoryView":704
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":702
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":712
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":713
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":720
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":724
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 724, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":726
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":727
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 727, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":728
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":726
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":730
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":731
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":737
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":738
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":743
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":744
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":748
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 748, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 748, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 748, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 748, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 748, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":749
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":753
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 753, __pyx_L1_error)

      /* "View.MemoryView":750
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 750, __pyx_L1_error)

      /* "View.MemoryView":749
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":757
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":758
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":759
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":760
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":762
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 762, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":763
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 763, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 763, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":764
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 764, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 764, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":766
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":767
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":770
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 770, __pyx_L1_error)

      /* "View.MemoryView":776
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":748
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":780
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 780, __pyx_L1_error) }

    /* "View.MemoryView":781
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 781, __pyx_L1_error) }

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 779, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":785
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 784, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":712
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":809
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":829
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":831
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":832
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":831
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":833
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":834
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 834, __pyx_L1_error)

      /* "View.MemoryView":833
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":829
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":837
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":839
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":840
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 840, __pyx_L1_error)

      /* "View.MemoryView":839
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":843
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":844
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":845
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":846
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":847
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":846
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":844
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":848
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":849
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":850
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":849
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":852
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":848
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":843
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":854
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":855
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":854
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":857
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":859
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":860
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":861
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":862
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":863
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":862
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":860
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":864
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":865
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":864
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":859
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":867
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":868
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":867
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":870
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":872
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":873
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":872
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":877
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":879
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":880
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":879
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":882
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":883
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":882
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":886
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":887
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":888
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":891
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":892
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":891
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":894
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":896
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":897
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":898
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":899
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":898
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":901
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":902
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 901, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":897
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":904
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":896
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":906
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":809
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":912
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":914
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":915
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":918
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":919
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 919, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(1, 919, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":920
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":918
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":922
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":923
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":924
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":925
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":924
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":927
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":928
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":929
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":930
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 930, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 930, __pyx_L1_error)

      /* "View.MemoryView":929
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":927
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":932
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":933
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 933, __pyx_L1_error)

    /* "View.MemoryView":932
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":935
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":936
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":937
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":936
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":939
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":912
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":945
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":946
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":948
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":949
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":953
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":954
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":955
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":956
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":958
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":959
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 959, __pyx_L1_error)

      /* "View.MemoryView":958
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":961
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":945
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":978
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":979
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":978
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":981
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":982
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":983
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":982
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":985
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":981
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":987
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":988
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":989
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 989, __pyx_L1_error)

    /* "View.MemoryView":988
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":991
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":987
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":994
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":995
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":994
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1001
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1009
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1010
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1009
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1015
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1017
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1018
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1020
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1021
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1023
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1024
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1025
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1026
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1027
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1029
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1030
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1029
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1034
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1035
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1038
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1039
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1040
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1041
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1042
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1040
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1044
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1045
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1045, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1046
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1046, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1048
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1049
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1051
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":1001
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1054
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1057
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1058
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 1058, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1059
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1057
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1061
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1062
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1054
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1065
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1069
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1070
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1071
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1073
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1074
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1076
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1077
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1078
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1079
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1065
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1082
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1085
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1086
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1082
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1089
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1096
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1097
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1098
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1096
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1100
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1101
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1103
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1105
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1089
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1111
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1112
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1113
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1112
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1115
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1111
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1118
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1123
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1124
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1126
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1127
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1128
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1129
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1127
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1131
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1132
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1133
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1134
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1132
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1136
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1137
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1136
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1139
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1118
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1142
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1149
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1151
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1154
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1156
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1157
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1155
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1159
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1160
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1161
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1162
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1154
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1164
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1165
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1169
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1170
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1142
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1172
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1175
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1172
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1179
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1181
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1183
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1184
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1186
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1179
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1189
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1198
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1199
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1200
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1201
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1198
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1203
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1204
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1205
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1207
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1189
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1210
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1221
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1222
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1224
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1225
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1226
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 1226, __pyx_L1_error)

    /* "View.MemoryView":1225
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1229
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1230
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1231
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1232
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1233
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1235
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1239
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1240
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1241
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1240
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1243
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1244
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1243
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1246
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1248
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1210
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1253
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1256
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1255
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(1, 1255, __pyx_L1_error)

  /* "View.MemoryView":1253
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1259
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1260
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 1260, __pyx_L1_error)

  /* "View.MemoryView":1259
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1263
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1264
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1265
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1265, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1265, __pyx_L1_error)

    /* "View.MemoryView":1264
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1267
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(1, 1267, __pyx_L1_error)
  }

  /* "View.MemoryView":1263
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1270
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1278
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1279
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1281
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1282
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1283
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1286
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1287
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1286
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1288
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1289
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1288
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1291
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1293
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1294
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1295
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1296
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1297
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1295
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1299
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1299, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1294
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1301
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1302
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1302, __pyx_L1_error)

      /* "View.MemoryView":1301
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1304
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1306
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1307
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1306
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1309
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(1, 1309, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1310
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1304
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1312
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1315
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1315
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1317
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1317
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1320
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1322
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1323
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1324
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1325
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1326
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1320
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1312
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1328
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1331
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1331, __pyx_L1_error)

    /* "View.MemoryView":1332
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1332, __pyx_L1_error)

    /* "View.MemoryView":1328
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1334
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1335
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1336
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1338
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1339
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1270
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1342
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1346
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1348
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1349
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1350
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1351
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1353
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1354
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1355
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1356
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1342
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1364
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1368
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1369
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1368
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1364
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1373
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1376
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1373
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1379
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1383
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1384
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1385
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1386
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1385
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1388
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1384
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1390
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1391
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1393
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1379
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1399
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1402
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1403
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1405
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1399
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1409
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1413
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1414
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1416
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1417
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1418
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1419
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1416
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1421
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1422
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1424
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1409
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__35, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError);
    __pyx_t_4 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_1 = __pyx_v___pyx_PickleError; __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0xb068931, 0x82a3537, 0x6ae9995):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_4 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_3 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||((void)PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_4 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (0x%x vs (0xb068931, 0x82a3537, 0x6ae9995) = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable __pyx_vtable_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable;

static PyObject *__pyx_tp_new_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)o);
  p->__pyx_vtab = __pyx_vtabptr_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable;
  p->kernel_name = Py_None; Py_INCREF(Py_None);
  p->table.data = NULL;
  p->table.memview = NULL;
  p->q2_vals.data = NULL;
  p->q2_vals.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable(PyObject *o) {
  struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *p = (struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->kernel_name);
  __PYX_XDEC_MEMVIEW(&p->table, 1);
  __PYX_XDEC_MEMVIEW(&p->q2_vals, 1);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *p = (struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)o;
  if (p->kernel_name) {
    e = (*v)(p->kernel_name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *p = (struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *)o;
  tmp = ((PyObject*)p->kernel_name);
  p->kernel_name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_kernel_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_1__get__(o);
}

static int __pyx_setprop_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_kernel_name(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_3__set__(o, v);
  }
  else {
    return __pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_11kernel_name_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable[] = {
  {"populate_table", (PyCFunction)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_3populate_table, METH_NOARGS, 0},
  {"interpolate_array", (PyCFunction)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_5interpolate_array, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable[] = {
  {(char *)"kernel_name", __pyx_getprop_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_kernel_name, __pyx_setprop_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_kernel_name, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.utilities.lib.pixelization_routines.SPHKernelInterpolationTable", /*tp_name*/
  sizeof(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable, /*tp_traverse*/
  __pyx_tp_clear_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.utilities.lib.pixelization_routines.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.utilities.lib.pixelization_routines.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.utilities.lib.pixelization_routines.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "yt.utilities.lib.pixelization_routines._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {"get_rotation_matrix", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_2yt_9utilities_3lib_21pixelization_routines_29get_rotation_matrix, METH_VARARGS|METH_KEYWORDS, __pyx_doc_2yt_9utilities_3lib_21pixelization_routines_28get_rotation_matrix},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_pixelization_routines(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_pixelization_routines},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "pixelization_routines",
    __pyx_k_Pixelization_routines, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_kp_u_Arrays_are_not_of_correct_shape, __pyx_k_Arrays_are_not_of_correct_shape, sizeof(__pyx_k_Arrays_are_not_of_correct_shape), 0, 1, 0, 0},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_kp_u_Check_to_see_that_both_starting, __pyx_k_Check_to_see_that_both_starting, sizeof(__pyx_k_Check_to_see_that_both_starting), 0, 1, 0, 0},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_kp_s_Expected_at_least_d_argument_s_g, __pyx_k_Expected_at_least_d_argument_s_g, sizeof(__pyx_k_Expected_at_least_d_argument_s_g), 0, 0, 1, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_kp_s_Function_call_with_ambiguous_arg, __pyx_k_Function_call_with_ambiguous_arg, sizeof(__pyx_k_Function_call_with_ambiguous_arg), 0, 0, 1, 0},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_u_Interpolating_gather_SPH_field, __pyx_k_Interpolating_gather_SPH_field, sizeof(__pyx_k_Interpolating_gather_SPH_field), 0, 1, 0, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_LE, __pyx_k_LE, sizeof(__pyx_k_LE), 0, 0, 1, 1},
  {&__pyx_n_s_Lambda0, __pyx_k_Lambda0, sizeof(__pyx_k_Lambda0), 0, 0, 1, 1},
  {&__pyx_n_s_Lambda_p, __pyx_k_Lambda_p, sizeof(__pyx_k_Lambda_p), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_kp_s_No_matching_signature_found, __pyx_k_No_matching_signature_found, sizeof(__pyx_k_No_matching_signature_found), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_PI, __pyx_k_PI, sizeof(__pyx_k_PI), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_RE, __pyx_k_RE, sizeof(__pyx_k_RE), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SPHKernelInterpolationTable, __pyx_k_SPHKernelInterpolationTable, sizeof(__pyx_k_SPHKernelInterpolationTable), 0, 0, 1, 1},
  {&__pyx_kp_u_Slices_of_2D_datasets_must_be_pe, __pyx_k_Slices_of_2D_datasets_must_be_pe, sizeof(__pyx_k_Slices_of_2D_datasets_must_be_pe), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_n_s_YTElementTypeNotRecognized, __pyx_k_YTElementTypeNotRecognized, sizeof(__pyx_k_YTElementTypeNotRecognized), 0, 0, 1, 1},
  {&__pyx_n_s_YTPixelizeError, __pyx_k_YTPixelizeError, sizeof(__pyx_k_YTPixelizeError), 0, 0, 1, 1},
  {&__pyx_kp_s__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 0, 1, 0},
  {&__pyx_n_s_allclose, __pyx_k_allclose, sizeof(__pyx_k_allclose), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_antialias, __pyx_k_antialias, sizeof(__pyx_k_antialias), 0, 0, 1, 1},
  {&__pyx_n_s_arc_length, __pyx_k_arc_length, sizeof(__pyx_k_arc_length), 0, 0, 1, 1},
  {&__pyx_n_s_argmax, __pyx_k_argmax, sizeof(__pyx_k_argmax), 0, 0, 1, 1},
  {&__pyx_n_s_argmin, __pyx_k_argmin, sizeof(__pyx_k_argmin), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_axes, __pyx_k_axes, sizeof(__pyx_k_axes), 0, 0, 1, 1},
  {&__pyx_n_s_azimuth, __pyx_k_azimuth, sizeof(__pyx_k_azimuth), 0, 0, 1, 1},
  {&__pyx_n_s_azimuth_offset, __pyx_k_azimuth_offset, sizeof(__pyx_k_azimuth_offset), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_bounds, __pyx_k_bounds, sizeof(__pyx_k_bounds), 0, 0, 1, 1},
  {&__pyx_n_s_btheta0, __pyx_k_btheta0, sizeof(__pyx_k_btheta0), 0, 0, 1, 1},
  {&__pyx_n_s_btheta_p, __pyx_k_btheta_p, sizeof(__pyx_k_btheta_p), 0, 0, 1, 1},
  {&__pyx_n_s_buff, __pyx_k_buff, sizeof(__pyx_k_buff), 0, 0, 1, 1},
  {&__pyx_n_s_buff_den, __pyx_k_buff_den, sizeof(__pyx_k_buff_den), 0, 0, 1, 1},
  {&__pyx_n_s_buff_size, __pyx_k_buff_size, sizeof(__pyx_k_buff_size), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_center, __pyx_k_center, sizeof(__pyx_k_center), 0, 0, 1, 1},
  {&__pyx_n_s_check_period, __pyx_k_check_period, sizeof(__pyx_k_check_period), 0, 0, 1, 1},
  {&__pyx_n_s_ci, __pyx_k_ci, sizeof(__pyx_k_ci), 0, 0, 1, 1},
  {&__pyx_n_s_cj, __pyx_k_cj, sizeof(__pyx_k_cj), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_u_code_length, __pyx_k_code_length, sizeof(__pyx_k_code_length), 0, 1, 0, 1},
  {&__pyx_n_s_colatitude, __pyx_k_colatitude, sizeof(__pyx_k_colatitude), 0, 0, 1, 1},
  {&__pyx_n_s_colatitude_offset, __pyx_k_colatitude_offset, sizeof(__pyx_k_colatitude_offset), 0, 0, 1, 1},
  {&__pyx_n_s_conn, __pyx_k_conn, sizeof(__pyx_k_conn), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_convert_to_units, __pyx_k_convert_to_units, sizeof(__pyx_k_convert_to_units), 0, 0, 1, 1},
  {&__pyx_n_s_coord, __pyx_k_coord, sizeof(__pyx_k_coord), 0, 0, 1, 1},
  {&__pyx_n_s_coordinate_matrix, __pyx_k_coordinate_matrix, sizeof(__pyx_k_coordinate_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_coords, __pyx_k_coords, sizeof(__pyx_k_coords), 0, 0, 1, 1},
  {&__pyx_n_s_corners, __pyx_k_corners, sizeof(__pyx_k_corners), 0, 0, 1, 1},
  {&__pyx_n_s_costheta, __pyx_k_costheta, sizeof(__pyx_k_costheta), 0, 0, 1, 1},
  {&__pyx_n_s_cross, __pyx_k_cross, sizeof(__pyx_k_cross), 0, 0, 1, 1},
  {&__pyx_n_s_ctree, __pyx_k_ctree, sizeof(__pyx_k_ctree), 0, 0, 1, 1},
  {&__pyx_n_u_cubic, __pyx_k_cubic, sizeof(__pyx_k_cubic), 0, 1, 0, 1},
  {&__pyx_n_s_cx, __pyx_k_cx, sizeof(__pyx_k_cx), 0, 0, 1, 1},
  {&__pyx_n_s_cxpx, __pyx_k_cxpx, sizeof(__pyx_k_cxpx), 0, 0, 1, 1},
  {&__pyx_n_s_cy, __pyx_k_cy, sizeof(__pyx_k_cy), 0, 0, 1, 1},
  {&__pyx_n_s_cypx, __pyx_k_cypx, sizeof(__pyx_k_cypx), 0, 0, 1, 1},
  {&__pyx_n_s_cz, __pyx_k_cz, sizeof(__pyx_k_cz), 0, 0, 1, 1},
  {&__pyx_n_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 1},
  {&__pyx_n_s_dLambda_p, __pyx_k_dLambda_p, sizeof(__pyx_k_dLambda_p), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_dazimuth, __pyx_k_dazimuth, sizeof(__pyx_k_dazimuth), 0, 0, 1, 1},
  {&__pyx_n_s_dbtheta_p, __pyx_k_dbtheta_p, sizeof(__pyx_k_dbtheta_p), 0, 0, 1, 1},
  {&__pyx_n_s_dcolatitude, __pyx_k_dcolatitude, sizeof(__pyx_k_dcolatitude), 0, 0, 1, 1},
  {&__pyx_n_s_dds, __pyx_k_dds, sizeof(__pyx_k_dds), 0, 0, 1, 1},
  {&__pyx_n_s_defaults, __pyx_k_defaults, sizeof(__pyx_k_defaults), 0, 0, 1, 1},
  {&__pyx_n_s_den, __pyx_k_den, sizeof(__pyx_k_den), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 0, 0, 1, 1},
  {&__pyx_n_s_dr_i, __pyx_k_dr_i, sizeof(__pyx_k_dr_i), 0, 0, 1, 1},
  {&__pyx_n_s_dradius, __pyx_k_dradius, sizeof(__pyx_k_dradius), 0, 0, 1, 1},
  {&__pyx_n_s_dsp, __pyx_k_dsp, sizeof(__pyx_k_dsp), 0, 0, 1, 1},
  {&__pyx_n_s_dtheta, __pyx_k_dtheta, sizeof(__pyx_k_dtheta), 0, 0, 1, 1},
  {&__pyx_n_s_dtheta_i, __pyx_k_dtheta_i, sizeof(__pyx_k_dtheta_i), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_dx, __pyx_k_dx, sizeof(__pyx_k_dx), 0, 0, 1, 1},
  {&__pyx_n_s_dxsp, __pyx_k_dxsp, sizeof(__pyx_k_dxsp), 0, 0, 1, 1},
  {&__pyx_n_s_dy, __pyx_k_dy, sizeof(__pyx_k_dy), 0, 0, 1, 1},
  {&__pyx_n_s_dysp, __pyx_k_dysp, sizeof(__pyx_k_dysp), 0, 0, 1, 1},
  {&__pyx_n_s_dz, __pyx_k_dz, sizeof(__pyx_k_dz), 0, 0, 1, 1},
  {&__pyx_n_s_dzsp, __pyx_k_dzsp, sizeof(__pyx_k_dzsp), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end_point, __pyx_k_end_point, sizeof(__pyx_k_end_point), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_extents, __pyx_k_extents, sizeof(__pyx_k_extents), 0, 0, 1, 1},
  {&__pyx_n_s_fi, __pyx_k_fi, sizeof(__pyx_k_fi), 0, 0, 1, 1},
  {&__pyx_n_s_field, __pyx_k_field, sizeof(__pyx_k_field), 0, 0, 1, 1},
  {&__pyx_n_s_field_positions, __pyx_k_field_positions, sizeof(__pyx_k_field_positions), 0, 0, 1, 1},
  {&__pyx_n_s_field_vals, __pyx_k_field_vals, sizeof(__pyx_k_field_vals), 0, 0, 1, 1},
  {&__pyx_n_s_final_vector, __pyx_k_final_vector, sizeof(__pyx_k_final_vector), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_u_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 1, 0, 1},
  {&__pyx_n_s_float32_t, __pyx_k_float32_t, sizeof(__pyx_k_float32_t), 0, 0, 1, 1},
  {&__pyx_n_u_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 1, 0, 1},
  {&__pyx_n_s_float64_t, __pyx_k_float64_t, sizeof(__pyx_k_float64_t), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_get_pbar, __pyx_k_get_pbar, sizeof(__pyx_k_get_pbar), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_h_j, __pyx_k_h_j, sizeof(__pyx_k_h_j), 0, 0, 1, 1},
  {&__pyx_n_s_h_j2, __pyx_k_h_j2, sizeof(__pyx_k_h_j2), 0, 0, 1, 1},
  {&__pyx_n_s_h_j3, __pyx_k_h_j3, sizeof(__pyx_k_h_j3), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_s_hsml, __pyx_k_hsml, sizeof(__pyx_k_hsml), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_i1, __pyx_k_i1, sizeof(__pyx_k_i1), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_idds, __pyx_k_idds, sizeof(__pyx_k_idds), 0, 0, 1, 1},
  {&__pyx_n_s_identity, __pyx_k_identity, sizeof(__pyx_k_identity), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_idy, __pyx_k_idy, sizeof(__pyx_k_idy), 0, 0, 1, 1},
  {&__pyx_n_s_idz, __pyx_k_idz, sizeof(__pyx_k_idz), 0, 0, 1, 1},
  {&__pyx_n_s_ih_j, __pyx_k_ih_j, sizeof(__pyx_k_ih_j), 0, 0, 1, 1},
  {&__pyx_n_s_ih_j2, __pyx_k_ih_j2, sizeof(__pyx_k_ih_j2), 0, 0, 1, 1},
  {&__pyx_n_s_ii, __pyx_k_ii, sizeof(__pyx_k_ii), 0, 0, 1, 1},
  {&__pyx_n_s_imax, __pyx_k_imax, sizeof(__pyx_k_imax), 0, 0, 1, 1},
  {&__pyx_n_s_img, __pyx_k_img, sizeof(__pyx_k_img), 0, 0, 1, 1},
  {&__pyx_n_s_imin, __pyx_k_imin, sizeof(__pyx_k_imin), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inc_length, __pyx_k_inc_length, sizeof(__pyx_k_inc_length), 0, 0, 1, 1},
  {&__pyx_n_s_ind, __pyx_k_ind, sizeof(__pyx_k_ind), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_index_offset, __pyx_k_index_offset, sizeof(__pyx_k_index_offset), 0, 0, 1, 1},
  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
  {&__pyx_n_s_input_img, __pyx_k_input_img, sizeof(__pyx_k_input_img), 0, 0, 1, 1},
  {&__pyx_n_u_int64, __pyx_k_int64, sizeof(__pyx_k_int64), 0, 1, 0, 1},
  {&__pyx_n_s_interpolate_sph_grid_gather, __pyx_k_interpolate_sph_grid_gather, sizeof(__pyx_k_interpolate_sph_grid_gather), 0, 0, 1, 1},
  {&__pyx_n_s_interpolate_sph_positions_gather, __pyx_k_interpolate_sph_positions_gather, sizeof(__pyx_k_interpolate_sph_positions_gather), 0, 0, 1, 1},
  {&__pyx_n_s_inv, __pyx_k_inv, sizeof(__pyx_k_inv), 0, 0, 1, 1},
  {&__pyx_n_s_inv_mat, __pyx_k_inv_mat, sizeof(__pyx_k_inv_mat), 0, 0, 1, 1},
  {&__pyx_n_s_ip, __pyx_k_ip, sizeof(__pyx_k_ip), 0, 0, 1, 1},
  {&__pyx_n_s_ipx_dx, __pyx_k_ipx_dx, sizeof(__pyx_k_ipx_dx), 0, 0, 1, 1},
  {&__pyx_n_s_ipx_dy, __pyx_k_ipx_dy, sizeof(__pyx_k_ipx_dy), 0, 0, 1, 1},
  {&__pyx_n_s_isclose, __pyx_k_isclose, sizeof(__pyx_k_isclose), 0, 0, 1, 1},
  {&__pyx_n_s_itab, __pyx_k_itab, sizeof(__pyx_k_itab), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_jj, __pyx_k_jj, sizeof(__pyx_k_jj), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_kdtree, __pyx_k_kdtree, sizeof(__pyx_k_kdtree), 0, 0, 1, 1},
  {&__pyx_n_s_kernel, __pyx_k_kernel, sizeof(__pyx_k_kernel), 0, 0, 1, 1},
  {&__pyx_n_s_kernel_name, __pyx_k_kernel_name, sizeof(__pyx_k_kernel_name), 0, 0, 1, 1},
  {&__pyx_n_s_kernel_tables, __pyx_k_kernel_tables, sizeof(__pyx_k_kernel_tables), 0, 0, 1, 1},
  {&__pyx_n_s_kind, __pyx_k_kind, sizeof(__pyx_k_kind), 0, 0, 1, 1},
  {&__pyx_n_s_kk, __pyx_k_kk, sizeof(__pyx_k_kk), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_lc, __pyx_k_lc, sizeof(__pyx_k_lc), 0, 0, 1, 1},
  {&__pyx_n_s_ld_x, __pyx_k_ld_x, sizeof(__pyx_k_ld_x), 0, 0, 1, 1},
  {&__pyx_n_s_ld_y, __pyx_k_ld_y, sizeof(__pyx_k_ld_y), 0, 0, 1, 1},
  {&__pyx_n_s_lin_inc, __pyx_k_lin_inc, sizeof(__pyx_k_lin_inc), 0, 0, 1, 1},
  {&__pyx_n_s_lin_length, __pyx_k_lin_length, sizeof(__pyx_k_lin_length), 0, 0, 1, 1},
  {&__pyx_n_s_lin_sample_points, __pyx_k_lin_sample_points, sizeof(__pyx_k_lin_sample_points), 0, 0, 1, 1},
  {&__pyx_n_s_lin_vec, __pyx_k_lin_vec, sizeof(__pyx_k_lin_vec), 0, 0, 1, 1},
  {&__pyx_n_s_linalg, __pyx_k_linalg, sizeof(__pyx_k_linalg), 0, 0, 1, 1},
  {&__pyx_n_s_line_width, __pyx_k_line_width, sizeof(__pyx_k_line_width), 0, 0, 1, 1},
  {&__pyx_n_s_local_buff, __pyx_k_local_buff, sizeof(__pyx_k_local_buff), 0, 0, 1, 1},
  {&__pyx_n_s_lr, __pyx_k_lr, sizeof(__pyx_k_lr), 0, 0, 1, 1},
  {&__pyx_n_s_lxpx, __pyx_k_lxpx, sizeof(__pyx_k_lxpx), 0, 0, 1, 1},
  {&__pyx_n_s_lypx, __pyx_k_lypx, sizeof(__pyx_k_lypx), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mapped_coord, __pyx_k_mapped_coord, sizeof(__pyx_k_mapped_coord), 0, 0, 1, 1},
  {&__pyx_n_s_mask, __pyx_k_mask, sizeof(__pyx_k_mask), 0, 0, 1, 1},
  {&__pyx_n_s_matmul, __pyx_k_matmul, sizeof(__pyx_k_matmul), 0, 0, 1, 1},
  {&__pyx_n_s_maxval, __pyx_k_maxval, sizeof(__pyx_k_maxval), 0, 0, 1, 1},
  {&__pyx_n_s_md, __pyx_k_md, sizeof(__pyx_k_md), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_nf, __pyx_k_nf, sizeof(__pyx_k_nf), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_u_none, __pyx_k_none, sizeof(__pyx_k_none), 0, 1, 0, 1},
  {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
  {&__pyx_n_s_normal_rotation_matrix, __pyx_k_normal_rotation_matrix, sizeof(__pyx_k_normal_rotation_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_normal_vector, __pyx_k_normal_vector, sizeof(__pyx_k_normal_vector), 0, 0, 1, 1},
  {&__pyx_n_s_normalization_1d_utility, __pyx_k_normalization_1d_utility, sizeof(__pyx_k_normalization_1d_utility), 0, 0, 1, 1},
  {&__pyx_n_s_normalization_2d_utility, __pyx_k_normalization_2d_utility, sizeof(__pyx_k_normalization_2d_utility), 0, 0, 1, 1},
  {&__pyx_n_s_normalization_3d_utility, __pyx_k_normalization_3d_utility, sizeof(__pyx_k_normalization_3d_utility), 0, 0, 1, 1},
  {&__pyx_n_s_north_rotation_matrix, __pyx_k_north_rotation_matrix, sizeof(__pyx_k_north_rotation_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_north_vector, __pyx_k_north_vector, sizeof(__pyx_k_north_vector), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_npoints, __pyx_k_npoints, sizeof(__pyx_k_npoints), 0, 0, 1, 1},
  {&__pyx_n_s_num, __pyx_k_num, sizeof(__pyx_k_num), 0, 0, 1, 1},
  {&__pyx_n_s_num_field_vals, __pyx_k_num_field_vals, sizeof(__pyx_k_num_field_vals), 0, 0, 1, 1},
  {&__pyx_n_s_num_intervals, __pyx_k_num_intervals, sizeof(__pyx_k_num_intervals), 0, 0, 1, 1},
  {&__pyx_n_s_num_neigh, __pyx_k_num_neigh, sizeof(__pyx_k_num_neigh), 0, 0, 1, 1},
  {&__pyx_n_s_num_particles, __pyx_k_num_particles, sizeof(__pyx_k_num_particles), 0, 0, 1, 1},
  {&__pyx_n_s_num_plot_nodes, __pyx_k_num_plot_nodes, sizeof(__pyx_k_num_plot_nodes), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_nvertices, __pyx_k_nvertices, sizeof(__pyx_k_nvertices), 0, 0, 1, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_off_axis_projection_SPH, __pyx_k_off_axis_projection_SPH, sizeof(__pyx_k_off_axis_projection_SPH), 0, 0, 1, 1},
  {&__pyx_n_s_overlap1, __pyx_k_overlap1, sizeof(__pyx_k_overlap1), 0, 0, 1, 1},
  {&__pyx_n_s_overlap2, __pyx_k_overlap2, sizeof(__pyx_k_overlap2), 0, 0, 1, 1},
  {&__pyx_n_s_oxsp, __pyx_k_oxsp, sizeof(__pyx_k_oxsp), 0, 0, 1, 1},
  {&__pyx_n_s_oysp, __pyx_k_oysp, sizeof(__pyx_k_oysp), 0, 0, 1, 1},
  {&__pyx_n_s_ozsp, __pyx_k_ozsp, sizeof(__pyx_k_ozsp), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_pLE, __pyx_k_pLE, sizeof(__pyx_k_pLE), 0, 0, 1, 1},
  {&__pyx_n_s_pRE, __pyx_k_pRE, sizeof(__pyx_k_pRE), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_particle, __pyx_k_particle, sizeof(__pyx_k_particle), 0, 0, 1, 1},
  {&__pyx_n_s_particle_densities, __pyx_k_particle_densities, sizeof(__pyx_k_particle_densities), 0, 0, 1, 1},
  {&__pyx_n_s_particle_masses, __pyx_k_particle_masses, sizeof(__pyx_k_particle_masses), 0, 0, 1, 1},
  {&__pyx_n_s_pbar, __pyx_k_pbar, sizeof(__pyx_k_pbar), 0, 0, 1, 1},
  {&__pyx_n_s_pdens, __pyx_k_pdens, sizeof(__pyx_k_pdens), 0, 0, 1, 1},
  {&__pyx_n_s_pdx, __pyx_k_pdx, sizeof(__pyx_k_pdx), 0, 0, 1, 1},
  {&__pyx_n_s_pdy, __pyx_k_pdy, sizeof(__pyx_k_pdy), 0, 0, 1, 1},
  {&__pyx_n_s_pdz, __pyx_k_pdz, sizeof(__pyx_k_pdz), 0, 0, 1, 1},
  {&__pyx_n_s_pend, __pyx_k_pend, sizeof(__pyx_k_pend), 0, 0, 1, 1},
  {&__pyx_n_s_period, __pyx_k_period, sizeof(__pyx_k_period), 0, 0, 1, 1},
  {&__pyx_n_s_period_x, __pyx_k_period_x, sizeof(__pyx_k_period_x), 0, 0, 1, 1},
  {&__pyx_n_s_period_y, __pyx_k_period_y, sizeof(__pyx_k_period_y), 0, 0, 1, 1},
  {&__pyx_n_s_period_z, __pyx_k_period_z, sizeof(__pyx_k_period_z), 0, 0, 1, 1},
  {&__pyx_n_s_pi, __pyx_k_pi, sizeof(__pyx_k_pi), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pixelize_aitoff, __pyx_k_pixelize_aitoff, sizeof(__pyx_k_pixelize_aitoff), 0, 0, 1, 1},
  {&__pyx_n_s_pixelize_cartesian, __pyx_k_pixelize_cartesian, sizeof(__pyx_k_pixelize_cartesian), 0, 0, 1, 1},
  {&__pyx_n_s_pixelize_cartesian_nodal, __pyx_k_pixelize_cartesian_nodal, sizeof(__pyx_k_pixelize_cartesian_nodal), 0, 0, 1, 1},
  {&__pyx_n_s_pixelize_cylinder, __pyx_k_pixelize_cylinder, sizeof(__pyx_k_pixelize_cylinder), 0, 0, 1, 1},
  {&__pyx_n_s_pixelize_element_mesh, __pyx_k_pixelize_element_mesh, sizeof(__pyx_k_pixelize_element_mesh), 0, 0, 1, 1},
  {&__pyx_n_s_pixelize_element_mesh_line, __pyx_k_pixelize_element_mesh_line, sizeof(__pyx_k_pixelize_element_mesh_line), 0, 0, 1, 1},
  {&__pyx_n_s_pixelize_off_axis_cartesian, __pyx_k_pixelize_off_axis_cartesian, sizeof(__pyx_k_pixelize_off_axis_cartesian), 0, 0, 1, 1},
  {&__pyx_n_s_pixelize_sph_kernel_arbitrary_gr, __pyx_k_pixelize_sph_kernel_arbitrary_gr, sizeof(__pyx_k_pixelize_sph_kernel_arbitrary_gr), 0, 0, 1, 1},
  {&__pyx_n_s_pixelize_sph_kernel_projection, __pyx_k_pixelize_sph_kernel_projection, sizeof(__pyx_k_pixelize_sph_kernel_projection), 0, 0, 1, 1},
  {&__pyx_n_s_pixelize_sph_kernel_slice, __pyx_k_pixelize_sph_kernel_slice, sizeof(__pyx_k_pixelize_sph_kernel_slice), 0, 0, 1, 1},
  {&__pyx_n_s_pj, __pyx_k_pj, sizeof(__pyx_k_pj), 0, 0, 1, 1},
  {&__pyx_n_s_pk, __pyx_k_pk, sizeof(__pyx_k_pk), 0, 0, 1, 1},
  {&__pyx_n_s_plot_values, __pyx_k_plot_values, sizeof(__pyx_k_plot_values), 0, 0, 1, 1},
  {&__pyx_n_s_pmass, __pyx_k_pmass, sizeof(__pyx_k_pmass), 0, 0, 1, 1},
  {&__pyx_n_s_populate_table, __pyx_k_populate_table, sizeof(__pyx_k_populate_table), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_pos_ptr, __pyx_k_pos_ptr, sizeof(__pyx_k_pos_ptr), 0, 0, 1, 1},
  {&__pyx_n_s_posx, __pyx_k_posx, sizeof(__pyx_k_posx), 0, 0, 1, 1},
  {&__pyx_n_s_posx_diff, __pyx_k_posx_diff, sizeof(__pyx_k_posx_diff), 0, 0, 1, 1},
  {&__pyx_n_s_posy, __pyx_k_posy, sizeof(__pyx_k_posy), 0, 0, 1, 1},
  {&__pyx_n_s_posy_diff, __pyx_k_posy_diff, sizeof(__pyx_k_posy_diff), 0, 0, 1, 1},
  {&__pyx_n_s_posz, __pyx_k_posz, sizeof(__pyx_k_posz), 0, 0, 1, 1},
  {&__pyx_n_s_posz_diff, __pyx_k_posz_diff, sizeof(__pyx_k_posz_diff), 0, 0, 1, 1},
  {&__pyx_n_s_ppoint, __pyx_k_ppoint, sizeof(__pyx_k_ppoint), 0, 0, 1, 1},
  {&__pyx_n_s_prbounds, __pyx_k_prbounds, sizeof(__pyx_k_prbounds), 0, 0, 1, 1},
  {&__pyx_n_s_prefactor_j, __pyx_k_prefactor_j, sizeof(__pyx_k_prefactor_j), 0, 0, 1, 1},
  {&__pyx_n_s_prog, __pyx_k_prog, sizeof(__pyx_k_prog), 0, 0, 1, 1},
  {&__pyx_n_s_projection_array, __pyx_k_projection_array, sizeof(__pyx_k_projection_array), 0, 0, 1, 1},
  {&__pyx_n_s_pstart, __pyx_k_pstart, sizeof(__pyx_k_pstart), 0, 0, 1, 1},
  {&__pyx_n_s_ptbounds, __pyx_k_ptbounds, sizeof(__pyx_k_ptbounds), 0, 0, 1, 1},
  {&__pyx_n_s_px, __pyx_k_px, sizeof(__pyx_k_px), 0, 0, 1, 1},
  {&__pyx_n_s_px_dx, __pyx_k_px_dx, sizeof(__pyx_k_px_dx), 0, 0, 1, 1},
  {&__pyx_n_s_px_dy, __pyx_k_px_dy, sizeof(__pyx_k_px_dy), 0, 0, 1, 1},
  {&__pyx_n_s_px_rotated, __pyx_k_px_rotated, sizeof(__pyx_k_px_rotated), 0, 0, 1, 1},
  {&__pyx_n_s_pxsp, __pyx_k_pxsp, sizeof(__pyx_k_pxsp), 0, 0, 1, 1},
  {&__pyx_n_s_py, __pyx_k_py, sizeof(__pyx_k_py), 0, 0, 1, 1},
  {&__pyx_n_s_py_rotated, __pyx_k_py_rotated, sizeof(__pyx_k_py_rotated), 0, 0, 1, 1},
  {&__pyx_n_s_pysp, __pyx_k_pysp, sizeof(__pyx_k_pysp), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_pz, __pyx_k_pz, sizeof(__pyx_k_pz), 0, 0, 1, 1},
  {&__pyx_n_s_q_ij, __pyx_k_q_ij, sizeof(__pyx_k_q_ij), 0, 0, 1, 1},
  {&__pyx_n_s_q_ij2, __pyx_k_q_ij2, sizeof(__pyx_k_q_ij2), 0, 0, 1, 1},
  {&__pyx_n_s_quantity_to_smooth, __pyx_k_quantity_to_smooth, sizeof(__pyx_k_quantity_to_smooth), 0, 0, 1, 1},
  {&__pyx_n_u_quartic, __pyx_k_quartic, sizeof(__pyx_k_quartic), 0, 1, 0, 1},
  {&__pyx_n_s_queue, __pyx_k_queue, sizeof(__pyx_k_queue), 0, 0, 1, 1},
  {&__pyx_n_u_quintic, __pyx_k_quintic, sizeof(__pyx_k_quintic), 0, 1, 0, 1},
  {&__pyx_n_s_r0, __pyx_k_r0, sizeof(__pyx_k_r0), 0, 0, 1, 1},
  {&__pyx_n_s_r_i, __pyx_k_r_i, sizeof(__pyx_k_r_i), 0, 0, 1, 1},
  {&__pyx_n_s_r_inc, __pyx_k_r_inc, sizeof(__pyx_k_r_inc), 0, 0, 1, 1},
  {&__pyx_n_s_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rbounds, __pyx_k_rbounds, sizeof(__pyx_k_rbounds), 0, 0, 1, 1},
  {&__pyx_n_s_rc, __pyx_k_rc, sizeof(__pyx_k_rc), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_rmax, __pyx_k_rmax, sizeof(__pyx_k_rmax), 0, 0, 1, 1},
  {&__pyx_n_s_rmin, __pyx_k_rmin, sizeof(__pyx_k_rmin), 0, 0, 1, 1},
  {&__pyx_n_s_rot_bounds_x0, __pyx_k_rot_bounds_x0, sizeof(__pyx_k_rot_bounds_x0), 0, 0, 1, 1},
  {&__pyx_n_s_rot_bounds_x1, __pyx_k_rot_bounds_x1, sizeof(__pyx_k_rot_bounds_x1), 0, 0, 1, 1},
  {&__pyx_n_s_rot_bounds_y0, __pyx_k_rot_bounds_y0, sizeof(__pyx_k_rot_bounds_y0), 0, 0, 1, 1},
  {&__pyx_n_s_rot_bounds_y1, __pyx_k_rot_bounds_y1, sizeof(__pyx_k_rot_bounds_y1), 0, 0, 1, 1},
  {&__pyx_n_s_rotate_particle_coord, __pyx_k_rotate_particle_coord, sizeof(__pyx_k_rotate_particle_coord), 0, 0, 1, 1},
  {&__pyx_n_s_rotated_center, __pyx_k_rotated_center, sizeof(__pyx_k_rotated_center), 0, 0, 1, 1},
  {&__pyx_n_s_rotated_coordinates, __pyx_k_rotated_coordinates, sizeof(__pyx_k_rotated_coordinates), 0, 0, 1, 1},
  {&__pyx_n_s_rotation_matrix, __pyx_k_rotation_matrix, sizeof(__pyx_k_rotation_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_rr, __pyx_k_rr, sizeof(__pyx_k_rr), 0, 0, 1, 1},
  {&__pyx_n_s_rtol, __pyx_k_rtol, sizeof(__pyx_k_rtol), 0, 0, 1, 1},
  {&__pyx_n_s_rxpx, __pyx_k_rxpx, sizeof(__pyx_k_rxpx), 0, 0, 1, 1},
  {&__pyx_n_s_rypx, __pyx_k_rypx, sizeof(__pyx_k_rypx), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_s2, __pyx_k_s2, sizeof(__pyx_k_s2), 0, 0, 1, 1},
  {&__pyx_n_s_sample_point, __pyx_k_sample_point, sizeof(__pyx_k_sample_point), 0, 0, 1, 1},
  {&__pyx_n_s_sampler, __pyx_k_sampler, sizeof(__pyx_k_sampler), 0, 0, 1, 1},
  {&__pyx_kp_s_self_kernel_cannot_be_converted, __pyx_k_self_kernel_cannot_be_converted, sizeof(__pyx_k_self_kernel_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_signatures, __pyx_k_signatures, sizeof(__pyx_k_signatures), 0, 0, 1, 1},
  {&__pyx_n_s_sintheta, __pyx_k_sintheta, sizeof(__pyx_k_sintheta), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_smoothed_quantity_j, __pyx_k_smoothed_quantity_j, sizeof(__pyx_k_smoothed_quantity_j), 0, 0, 1, 1},
  {&__pyx_n_s_smoothing_lengths, __pyx_k_smoothing_lengths, sizeof(__pyx_k_smoothing_lengths), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_start_point, __pyx_k_start_point, sizeof(__pyx_k_start_point), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_strip, __pyx_k_strip, sizeof(__pyx_k_strip), 0, 0, 1, 1},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_theta, __pyx_k_theta, sizeof(__pyx_k_theta), 0, 0, 1, 1},
  {&__pyx_n_s_theta0, __pyx_k_theta0, sizeof(__pyx_k_theta0), 0, 0, 1, 1},
  {&__pyx_n_s_theta_i, __pyx_k_theta_i, sizeof(__pyx_k_theta_i), 0, 0, 1, 1},
  {&__pyx_n_s_theta_inc, __pyx_k_theta_inc, sizeof(__pyx_k_theta_inc), 0, 0, 1, 1},
  {&__pyx_n_s_title, __pyx_k_title, sizeof(__pyx_k_title), 0, 0, 1, 1},
  {&__pyx_n_s_tmax, __pyx_k_tmax, sizeof(__pyx_k_tmax), 0, 0, 1, 1},
  {&__pyx_n_s_tmin, __pyx_k_tmin, sizeof(__pyx_k_tmin), 0, 0, 1, 1},
  {&__pyx_n_s_transformed_north_vector, __pyx_k_transformed_north_vector, sizeof(__pyx_k_transformed_north_vector), 0, 0, 1, 1},
  {&__pyx_n_s_tree_positions, __pyx_k_tree_positions, sizeof(__pyx_k_tree_positions), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_units, __pyx_k_units, sizeof(__pyx_k_units), 0, 0, 1, 1},
  {&__pyx_n_u_units, __pyx_k_units, sizeof(__pyx_k_units), 0, 1, 0, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_use, __pyx_k_use, sizeof(__pyx_k_use), 0, 0, 1, 1},
  {&__pyx_n_s_use_normalization, __pyx_k_use_normalization, sizeof(__pyx_k_use_normalization), 0, 0, 1, 1},
  {&__pyx_n_s_vertices, __pyx_k_vertices, sizeof(__pyx_k_vertices), 0, 0, 1, 1},
  {&__pyx_n_s_weight_field, __pyx_k_weight_field, sizeof(__pyx_k_weight_field), 0, 0, 1, 1},
  {&__pyx_n_s_weight_field_2, __pyx_k_weight_field_2, sizeof(__pyx_k_weight_field_2), 0, 0, 1, 1},
  {&__pyx_n_u_wendland2, __pyx_k_wendland2, sizeof(__pyx_k_wendland2), 0, 1, 0, 1},
  {&__pyx_n_u_wendland4, __pyx_k_wendland4, sizeof(__pyx_k_wendland4), 0, 1, 0, 1},
  {&__pyx_n_u_wendland6, __pyx_k_wendland6, sizeof(__pyx_k_wendland6), 0, 1, 0, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x0, __pyx_k_x0, sizeof(__pyx_k_x0), 0, 0, 1, 1},
  {&__pyx_n_s_x1, __pyx_k_x1, sizeof(__pyx_k_x1), 0, 0, 1, 1},
  {&__pyx_n_s_x_max, __pyx_k_x_max, sizeof(__pyx_k_x_max), 0, 0, 1, 1},
  {&__pyx_n_s_x_min, __pyx_k_x_min, sizeof(__pyx_k_x_min), 0, 0, 1, 1},
  {&__pyx_n_s_xi, __pyx_k_xi, sizeof(__pyx_k_xi), 0, 0, 1, 1},
  {&__pyx_n_s_xiter, __pyx_k_xiter, sizeof(__pyx_k_xiter), 0, 0, 1, 1},
  {&__pyx_n_s_xiterv, __pyx_k_xiterv, sizeof(__pyx_k_xiterv), 0, 0, 1, 1},
  {&__pyx_n_s_xmax, __pyx_k_xmax, sizeof(__pyx_k_xmax), 0, 0, 1, 1},
  {&__pyx_n_s_xmin, __pyx_k_xmin, sizeof(__pyx_k_xmin), 0, 0, 1, 1},
  {&__pyx_n_s_xp, __pyx_k_xp, sizeof(__pyx_k_xp), 0, 0, 1, 1},
  {&__pyx_n_s_xsize, __pyx_k_xsize, sizeof(__pyx_k_xsize), 0, 0, 1, 1},
  {&__pyx_n_s_xsp, __pyx_k_xsp, sizeof(__pyx_k_xsp), 0, 0, 1, 1},
  {&__pyx_n_s_xw, __pyx_k_xw, sizeof(__pyx_k_xw), 0, 0, 1, 1},
  {&__pyx_n_s_xxi, __pyx_k_xxi, sizeof(__pyx_k_xxi), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_y0, __pyx_k_y0, sizeof(__pyx_k_y0), 0, 0, 1, 1},
  {&__pyx_n_s_y1, __pyx_k_y1, sizeof(__pyx_k_y1), 0, 0, 1, 1},
  {&__pyx_n_s_y_axis, __pyx_k_y_axis, sizeof(__pyx_k_y_axis), 0, 0, 1, 1},
  {&__pyx_n_s_y_max, __pyx_k_y_max, sizeof(__pyx_k_y_max), 0, 0, 1, 1},
  {&__pyx_n_s_y_min, __pyx_k_y_min, sizeof(__pyx_k_y_min), 0, 0, 1, 1},
  {&__pyx_n_s_yi, __pyx_k_yi, sizeof(__pyx_k_yi), 0, 0, 1, 1},
  {&__pyx_n_s_yiter, __pyx_k_yiter, sizeof(__pyx_k_yiter), 0, 0, 1, 1},
  {&__pyx_n_s_yiterv, __pyx_k_yiterv, sizeof(__pyx_k_yiterv), 0, 0, 1, 1},
  {&__pyx_n_s_ymax, __pyx_k_ymax, sizeof(__pyx_k_ymax), 0, 0, 1, 1},
  {&__pyx_n_s_ymin, __pyx_k_ymin, sizeof(__pyx_k_ymin), 0, 0, 1, 1},
  {&__pyx_n_s_yp, __pyx_k_yp, sizeof(__pyx_k_yp), 0, 0, 1, 1},
  {&__pyx_n_s_ysize, __pyx_k_ysize, sizeof(__pyx_k_ysize), 0, 0, 1, 1},
  {&__pyx_n_s_ysp, __pyx_k_ysp, sizeof(__pyx_k_ysp), 0, 0, 1, 1},
  {&__pyx_n_s_yt_funcs, __pyx_k_yt_funcs, sizeof(__pyx_k_yt_funcs), 0, 0, 1, 1},
  {&__pyx_n_s_yt_utilities_exceptions, __pyx_k_yt_utilities_exceptions, sizeof(__pyx_k_yt_utilities_exceptions), 0, 0, 1, 1},
  {&__pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_k_yt_utilities_lib_pixelization_ro, sizeof(__pyx_k_yt_utilities_lib_pixelization_ro), 0, 0, 1, 0},
  {&__pyx_n_s_yt_utilities_lib_pixelization_ro_2, __pyx_k_yt_utilities_lib_pixelization_ro_2, sizeof(__pyx_k_yt_utilities_lib_pixelization_ro_2), 0, 0, 1, 1},
  {&__pyx_n_s_yw, __pyx_k_yw, sizeof(__pyx_k_yw), 0, 0, 1, 1},
  {&__pyx_n_s_yyi, __pyx_k_yyi, sizeof(__pyx_k_yyi), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {&__pyx_n_s_z0, __pyx_k_z0, sizeof(__pyx_k_z0), 0, 0, 1, 1},
  {&__pyx_n_s_z1, __pyx_k_z1, sizeof(__pyx_k_z1), 0, 0, 1, 1},
  {&__pyx_n_s_z_axis, __pyx_k_z_axis, sizeof(__pyx_k_z_axis), 0, 0, 1, 1},
  {&__pyx_n_s_z_max, __pyx_k_z_max, sizeof(__pyx_k_z_max), 0, 0, 1, 1},
  {&__pyx_n_s_z_min, __pyx_k_z_min, sizeof(__pyx_k_z_min), 0, 0, 1, 1},
  {&__pyx_n_s_zb, __pyx_k_zb, sizeof(__pyx_k_zb), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_zi, __pyx_k_zi, sizeof(__pyx_k_zi), 0, 0, 1, 1},
  {&__pyx_n_s_ziter, __pyx_k_ziter, sizeof(__pyx_k_ziter), 0, 0, 1, 1},
  {&__pyx_n_s_ziterv, __pyx_k_ziterv, sizeof(__pyx_k_ziterv), 0, 0, 1, 1},
  {&__pyx_n_s_zsize, __pyx_k_zsize, sizeof(__pyx_k_zsize), 0, 0, 1, 1},
  {&__pyx_n_s_zsp, __pyx_k_zsp, sizeof(__pyx_k_zsp), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 899, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 1772, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1037, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(5, 137, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 149, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(1, 152, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(1, 406, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(1, 615, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(1, 834, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "yt/utilities/lib/pixelization_routines.pyx":88
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cartesian(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                        any_float[:] px,
 *                        any_float[:] py,
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_No_matching_signature_found); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Function_call_with_ambiguous_arg); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "yt/utilities/lib/pixelization_routines.pyx":676
 *     if input_img is None:
 *         img = np.zeros((buff_size[0], buff_size[1]))
 *         img[:] = np.nan             # <<<<<<<<<<<<<<
 *     else:
 *         img = input_img
 */
  __pyx_slice__5 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__5)) __PYX_ERR(0, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__5);
  __Pyx_GIVEREF(__pyx_slice__5);

  /* "yt/utilities/lib/pixelization_routines.pyx":899
 *     if ndim == 2:
 *         if buff_size[2] != 1:
 *             raise RuntimeError("Slices of 2D datasets must be "             # <<<<<<<<<<<<<<
 *                                "perpendicular to the 'z' direction.")
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Slices_of_2D_datasets_must_be_pe); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self_kernel_cannot_be_converted); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.kernel cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self_kernel_cannot_be_converted); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "yt/utilities/lib/pixelization_routines.pyx":1309
 *     cdef np.float64_t q_ij, h_j2, ih_j2, prefactor_j, smoothed_quantity_j
 *     cdef np.float64_t dx, dy, dz
 *     cdef np.float64_t[::1] pos = np.zeros(3, dtype="float64")             # <<<<<<<<<<<<<<
 *     cdef np.float64_t * pos_ptr = &pos[0]
 *     cdef int i, j, k, particle, index
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 1309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "yt/utilities/lib/pixelization_routines.pyx":1772
 *                 continue
 *             elif not sampler.check_inside(mapped_coord):
 *                 raise ValueError("Check to see that both starting and ending line points "             # <<<<<<<<<<<<<<
 *                                  "are within the domain of the mesh.")
 *             plot_values[i] = sampler.sample_at_unit_point(mapped_coord, field_vals)
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_Check_to_see_that_both_starting); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 1772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(2, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(2, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":855
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1037
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(2, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "../../../../../private/var/folders/24/8k48jl6d249_n_qfxwsl6xvm0000gn/T/pip-build-env-wiwy4_49/overlay/lib/python3.8/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "View.MemoryView":134
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "View.MemoryView":137
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "View.MemoryView":149
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "View.MemoryView":177
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "View.MemoryView":193
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "View.MemoryView":420
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "View.MemoryView":497
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "View.MemoryView":522
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "View.MemoryView":572
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "View.MemoryView":579
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__29 = PyTuple_New(1); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__29, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "View.MemoryView":705
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(1, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_tuple__35 = PyTuple_Pack(3, __pyx_int_184977713, __pyx_int_136983863, __pyx_int_112105877); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "yt/utilities/lib/pixelization_routines.pyx":88
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cartesian(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                        any_float[:] px,
 *                        any_float[:] py,
 */
  __pyx_tuple__36 = PyTuple_Pack(53, __pyx_n_s_buff, __pyx_n_s_px, __pyx_n_s_py, __pyx_n_s_pdx, __pyx_n_s_pdy, __pyx_n_s_data, __pyx_n_s_bounds, __pyx_n_s_antialias, __pyx_n_s_period, __pyx_n_s_check_period, __pyx_n_s_line_width, __pyx_n_s_x_min, __pyx_n_s_x_max, __pyx_n_s_y_min, __pyx_n_s_y_max, __pyx_n_s_period_x, __pyx_n_s_period_y, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_px_dx, __pyx_n_s_px_dy, __pyx_n_s_ipx_dx, __pyx_n_s_ipx_dy, __pyx_n_s_ld_x, __pyx_n_s_ld_y, __pyx_n_s_cx, __pyx_n_s_cy, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_p, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_lc, __pyx_n_s_lr, __pyx_n_s_rc, __pyx_n_s_rr, __pyx_n_s_lypx, __pyx_n_s_rypx, __pyx_n_s_lxpx, __pyx_n_s_rxpx, __pyx_n_s_overlap1, __pyx_n_s_overlap2, __pyx_n_s_oxsp, __pyx_n_s_oysp, __pyx_n_s_xsp, __pyx_n_s_ysp, __pyx_n_s_dxsp, __pyx_n_s_dysp, __pyx_n_s_dsp, __pyx_n_s_xiter, __pyx_n_s_yiter, __pyx_n_s_xiterv, __pyx_n_s_yiterv); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(11, 0, 53, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_pixelize_cartesian, 88, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 88, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":268
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cartesian_nodal(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                              np.float64_t[:] px,
 *                              np.float64_t[:] py,
 */
  __pyx_tuple__38 = PyTuple_Pack(60, __pyx_n_s_buff, __pyx_n_s_px, __pyx_n_s_py, __pyx_n_s_pz, __pyx_n_s_pdx, __pyx_n_s_pdy, __pyx_n_s_pdz, __pyx_n_s_data, __pyx_n_s_coord, __pyx_n_s_bounds, __pyx_n_s_antialias, __pyx_n_s_period, __pyx_n_s_check_period, __pyx_n_s_x_min, __pyx_n_s_x_max, __pyx_n_s_y_min, __pyx_n_s_y_max, __pyx_n_s_period_x, __pyx_n_s_period_y, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_px_dx, __pyx_n_s_px_dy, __pyx_n_s_ipx_dx, __pyx_n_s_ipx_dy, __pyx_n_s_cx, __pyx_n_s_cy, __pyx_n_s_cz, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_p, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_lc, __pyx_n_s_lr, __pyx_n_s_rc, __pyx_n_s_rr, __pyx_n_s_lypx, __pyx_n_s_rypx, __pyx_n_s_lxpx, __pyx_n_s_rxpx, __pyx_n_s_overlap1, __pyx_n_s_overlap2, __pyx_n_s_oxsp, __pyx_n_s_oysp, __pyx_n_s_ozsp, __pyx_n_s_xsp, __pyx_n_s_ysp, __pyx_n_s_zsp, __pyx_n_s_dxsp, __pyx_n_s_dysp, __pyx_n_s_dzsp, __pyx_n_s_xiter, __pyx_n_s_yiter, __pyx_n_s_ii, __pyx_n_s_jj, __pyx_n_s_kk, __pyx_n_s_ind, __pyx_n_s_xiterv, __pyx_n_s_yiterv); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(13, 0, 60, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_pixelize_cartesian_nodal, 268, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 268, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":434
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_off_axis_cartesian(             # <<<<<<<<<<<<<<
 *                        np.float64_t[:,:] buff,
 *                        np.float64_t[:] x,
 */
  __pyx_tuple__40 = PyTuple_Pack(48, __pyx_n_s_buff, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_px, __pyx_n_s_py, __pyx_n_s_pdx, __pyx_n_s_pdy, __pyx_n_s_pdz, __pyx_n_s_center, __pyx_n_s_inv_mat, __pyx_n_s_indices, __pyx_n_s_data, __pyx_n_s_bounds, __pyx_n_s_x_min, __pyx_n_s_x_max, __pyx_n_s_y_min, __pyx_n_s_y_max, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_px_dx, __pyx_n_s_px_dy, __pyx_n_s_ipx_dx, __pyx_n_s_ipx_dy, __pyx_n_s_md, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_p, __pyx_n_s_ip, __pyx_n_s_lc, __pyx_n_s_lr, __pyx_n_s_rc, __pyx_n_s_rr, __pyx_n_s_xsp, __pyx_n_s_ysp, __pyx_n_s_zsp, __pyx_n_s_dxsp, __pyx_n_s_dysp, __pyx_n_s_dzsp, __pyx_n_s_dsp, __pyx_n_s_pxsp, __pyx_n_s_pysp, __pyx_n_s_cxpx, __pyx_n_s_cypx, __pyx_n_s_cx, __pyx_n_s_cy, __pyx_n_s_cz, __pyx_n_s_mask); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(14, 0, 48, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_pixelize_off_axis_cartesian, 434, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 434, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":522
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cylinder(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                       np.float64_t[:] radius,
 *                       np.float64_t[:] dradius,
 */
  __pyx_tuple__42 = PyTuple_Pack(41, __pyx_n_s_buff, __pyx_n_s_radius, __pyx_n_s_dradius, __pyx_n_s_theta, __pyx_n_s_dtheta, __pyx_n_s_field, __pyx_n_s_extents, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_r0, __pyx_n_s_theta0, __pyx_n_s_rmin, __pyx_n_s_rmax, __pyx_n_s_tmin, __pyx_n_s_tmax, __pyx_n_s_x0, __pyx_n_s_y0, __pyx_n_s_x1, __pyx_n_s_y1, __pyx_n_s_xp, __pyx_n_s_yp, __pyx_n_s_r_i, __pyx_n_s_theta_i, __pyx_n_s_dr_i, __pyx_n_s_dtheta_i, __pyx_n_s_r_inc, __pyx_n_s_theta_inc, __pyx_n_s_costheta, __pyx_n_s_sintheta, __pyx_n_s_i, __pyx_n_s_i1, __pyx_n_s_pi, __pyx_n_s_pj, __pyx_n_s_imin, __pyx_n_s_imax, __pyx_n_s_rbounds, __pyx_n_s_prbounds, __pyx_n_s_ptbounds, __pyx_n_s_corners); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(7, 0, 41, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_pixelize_cylinder, 522, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 522, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":647
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_aitoff(np.float64_t[:] azimuth,             # <<<<<<<<<<<<<<
 *                     np.float64_t[:] dazimuth,
 *                     np.float64_t[:] colatitude,
 */
  __pyx_tuple__44 = PyTuple_Pack(39, __pyx_n_s_azimuth, __pyx_n_s_dazimuth, __pyx_n_s_colatitude, __pyx_n_s_dcolatitude, __pyx_n_s_buff_size, __pyx_n_s_field, __pyx_n_s_bounds, __pyx_n_s_input_img, __pyx_n_s_azimuth_offset, __pyx_n_s_colatitude_offset, __pyx_n_s_img, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_nf, __pyx_n_s_fi, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_zb, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_xw, __pyx_n_s_yw, __pyx_n_s_Lambda0, __pyx_n_s_btheta0, __pyx_n_s_Lambda_p, __pyx_n_s_dLambda_p, __pyx_n_s_btheta_p, __pyx_n_s_dbtheta_p, __pyx_n_s_PI, __pyx_n_s_s2, __pyx_n_s_xmax, __pyx_n_s_ymax, __pyx_n_s_xmin, __pyx_n_s_ymin, __pyx_n_s_x0, __pyx_n_s_x1, __pyx_n_s_y0, __pyx_n_s_y1); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(10, 0, 39, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_pixelize_aitoff, 647, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 647, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":837
 * 
 * 
 * def pixelize_element_mesh(np.ndarray[np.float64_t, ndim=2] coords,             # <<<<<<<<<<<<<<
 *                           np.ndarray[np.int64_t, ndim=2] conn,
 *                           buff_size,
 */
  __pyx_tuple__46 = PyTuple_Pack(31, __pyx_n_s_coords, __pyx_n_s_conn, __pyx_n_s_buff_size, __pyx_n_s_field, __pyx_n_s_extents, __pyx_n_s_index_offset, __pyx_n_s_img, __pyx_n_s_pLE, __pyx_n_s_pRE, __pyx_n_s_LE, __pyx_n_s_RE, __pyx_n_s_use, __pyx_n_s_n, __pyx_n_s_i, __pyx_n_s_pi, __pyx_n_s_pj, __pyx_n_s_pk, __pyx_n_s_ci, __pyx_n_s_cj, __pyx_n_s_pstart, __pyx_n_s_pend, __pyx_n_s_ppoint, __pyx_n_s_idds, __pyx_n_s_dds, __pyx_n_s_vertices, __pyx_n_s_field_vals, __pyx_n_s_nvertices, __pyx_n_s_ndim, __pyx_n_s_num_field_vals, __pyx_n_s_mapped_coord, __pyx_n_s_sampler); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(6, 0, 31, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_pixelize_element_mesh, 837, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 837, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1058
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_projection(             # <<<<<<<<<<<<<<
 *         np.float64_t[:, :] buff,
 *         any_float[:] posx,
 */
  __pyx_tuple__48 = PyTuple_Pack(53, __pyx_n_s_buff, __pyx_n_s_posx, __pyx_n_s_posy, __pyx_n_s_hsml, __pyx_n_s_pmass, __pyx_n_s_pdens, __pyx_n_s_quantity_to_smooth, __pyx_n_s_bounds, __pyx_n_s_kernel_name, __pyx_n_s_weight_field, __pyx_n_s_check_period, __pyx_n_s_period, __pyx_n_s_xsize, __pyx_n_s_ysize, __pyx_n_s_x_min, __pyx_n_s_x_max, __pyx_n_s_y_min, __pyx_n_s_y_max, __pyx_n_s_prefactor_j, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_x0, __pyx_n_s_x1, __pyx_n_s_y0, __pyx_n_s_y1, __pyx_n_s_xxi, __pyx_n_s_yyi, __pyx_n_s_q_ij2, __pyx_n_s_posx_diff, __pyx_n_s_posy_diff, __pyx_n_s_ih_j2, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_idx, __pyx_n_s_idy, __pyx_n_s_h_j2, __pyx_n_s_px, __pyx_n_s_py, __pyx_n_s_period_x, __pyx_n_s_period_y, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_ii, __pyx_n_s_jj, __pyx_n_s_weight_field_2, __pyx_n_s_xiter, __pyx_n_s_yiter, __pyx_n_s_xiterv, __pyx_n_s_yiterv, __pyx_n_s_itab, __pyx_n_s_local_buff); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(12, 0, 53, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_pixelize_sph_kernel_projection, 1058, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 1058, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1222
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def interpolate_sph_positions_gather(np.float64_t[:] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:, ::1] tree_positions, np.float64_t[:, ::1] field_positions,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass, np.float64_t[:] pdens,
 */
  __pyx_tuple__50 = PyTuple_Pack(26, __pyx_n_s_buff, __pyx_n_s_tree_positions, __pyx_n_s_field_positions, __pyx_n_s_hsml, __pyx_n_s_pmass, __pyx_n_s_pdens, __pyx_n_s_quantity_to_smooth, __pyx_n_s_kdtree, __pyx_n_s_use_normalization, __pyx_n_s_kernel_name, __pyx_n_s_pbar, __pyx_n_s_num_neigh, __pyx_n_s_q_ij, __pyx_n_s_h_j2, __pyx_n_s_ih_j2, __pyx_n_s_prefactor_j, __pyx_n_s_smoothed_quantity_j, __pyx_n_s_pos_ptr, __pyx_n_s_i, __pyx_n_s_particle, __pyx_n_s_index, __pyx_n_s_queue, __pyx_n_s_buff_den, __pyx_n_s_ctree, __pyx_n_s_axes, __pyx_n_s_kernel); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(12, 0, 26, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_interpolate_sph_positions_gather, 1222, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 1222, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1294
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def interpolate_sph_grid_gather(np.float64_t[:, :, :] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:, ::1] tree_positions, np.float64_t[:] bounds,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass, np.float64_t[:] pdens,
 */
  __pyx_tuple__52 = PyTuple_Pack(33, __pyx_n_s_buff, __pyx_n_s_tree_positions, __pyx_n_s_bounds, __pyx_n_s_hsml, __pyx_n_s_pmass, __pyx_n_s_pdens, __pyx_n_s_quantity_to_smooth, __pyx_n_s_kdtree, __pyx_n_s_use_normalization, __pyx_n_s_kernel_name, __pyx_n_s_pbar, __pyx_n_s_num_neigh, __pyx_n_s_q_ij, __pyx_n_s_h_j2, __pyx_n_s_ih_j2, __pyx_n_s_prefactor_j, __pyx_n_s_smoothed_quantity_j, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_pos, __pyx_n_s_pos_ptr, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_particle, __pyx_n_s_index, __pyx_n_s_queue, __pyx_n_s_buff_den, __pyx_n_s_ctree, __pyx_n_s_prog, __pyx_n_s_axes, __pyx_n_s_kernel); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(12, 0, 33, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_interpolate_sph_grid_gather, 1294, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 1294, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1388
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_slice(             # <<<<<<<<<<<<<<
 *         np.float64_t[:, :] buff,
 *         np.float64_t[:] posx, np.float64_t[:] posy,
 */
  __pyx_tuple__54 = PyTuple_Pack(52, __pyx_n_s_buff, __pyx_n_s_posx, __pyx_n_s_posy, __pyx_n_s_hsml, __pyx_n_s_pmass, __pyx_n_s_pdens, __pyx_n_s_quantity_to_smooth, __pyx_n_s_bounds, __pyx_n_s_kernel_name, __pyx_n_s_check_period, __pyx_n_s_period, __pyx_n_s_xsize, __pyx_n_s_ysize, __pyx_n_s_x_min, __pyx_n_s_x_max, __pyx_n_s_y_min, __pyx_n_s_y_max, __pyx_n_s_prefactor_j, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_x0, __pyx_n_s_x1, __pyx_n_s_y0, __pyx_n_s_y1, __pyx_n_s_xxi, __pyx_n_s_yyi, __pyx_n_s_q_ij, __pyx_n_s_posx_diff, __pyx_n_s_posy_diff, __pyx_n_s_ih_j, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_idx, __pyx_n_s_idy, __pyx_n_s_h_j2, __pyx_n_s_h_j, __pyx_n_s_px, __pyx_n_s_py, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_ii, __pyx_n_s_jj, __pyx_n_s_period_x, __pyx_n_s_period_y, __pyx_n_s_xiter, __pyx_n_s_yiter, __pyx_n_s_xiterv, __pyx_n_s_yiterv, __pyx_n_s_kernel, __pyx_n_s_local_buff); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(11, 0, 52, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_pixelize_sph_kernel_slice, 1388, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 1388, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1528
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_arbitrary_grid(np.float64_t[:, :, :] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:] posx, np.float64_t[:] posy, np.float64_t[:] posz,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass,
 */
  __pyx_tuple__56 = PyTuple_Pack(66, __pyx_n_s_buff, __pyx_n_s_posx, __pyx_n_s_posy, __pyx_n_s_posz, __pyx_n_s_hsml, __pyx_n_s_pmass, __pyx_n_s_pdens, __pyx_n_s_quantity_to_smooth, __pyx_n_s_bounds, __pyx_n_s_pbar, __pyx_n_s_kernel_name, __pyx_n_s_check_period, __pyx_n_s_period, __pyx_n_s_xsize, __pyx_n_s_ysize, __pyx_n_s_zsize, __pyx_n_s_x_min, __pyx_n_s_x_max, __pyx_n_s_y_min, __pyx_n_s_y_max, __pyx_n_s_z_min, __pyx_n_s_z_max, __pyx_n_s_prefactor_j, __pyx_n_s_xi, __pyx_n_s_yi, __pyx_n_s_zi, __pyx_n_s_x0, __pyx_n_s_x1, __pyx_n_s_y0, __pyx_n_s_y1, __pyx_n_s_z0, __pyx_n_s_z1, __pyx_n_s_q_ij, __pyx_n_s_posx_diff, __pyx_n_s_posy_diff, __pyx_n_s_posz_diff, __pyx_n_s_px, __pyx_n_s_py, __pyx_n_s_pz, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_dx, __pyx_n_s_dy, __pyx_n_s_dz, __pyx_n_s_idx, __pyx_n_s_idy, __pyx_n_s_idz, __pyx_n_s_h_j3, __pyx_n_s_h_j2, __pyx_n_s_h_j, __pyx_n_s_ih_j, __pyx_n_s_j, __pyx_n_s_ii, __pyx_n_s_jj, __pyx_n_s_kk, __pyx_n_s_period_x, __pyx_n_s_period_y, __pyx_n_s_period_z, __pyx_n_s_xiter, __pyx_n_s_yiter, __pyx_n_s_ziter, __pyx_n_s_xiterv, __pyx_n_s_yiterv, __pyx_n_s_ziterv, __pyx_n_s_kernel); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(13, 0, 66, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_pixelize_sph_kernel_arbitrary_gr, 1528, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 1528, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1677
 * 
 * 
 * def pixelize_element_mesh_line(np.ndarray[np.float64_t, ndim=2] coords,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.int64_t, ndim=2] conn,
 *                                np.ndarray[np.float64_t, ndim=1] start_point,
 */
  __pyx_tuple__58 = PyTuple_Pack(30, __pyx_n_s_coords, __pyx_n_s_conn, __pyx_n_s_start_point, __pyx_n_s_end_point, __pyx_n_s_npoints, __pyx_n_s_field, __pyx_n_s_index_offset, __pyx_n_s_vertices, __pyx_n_s_field_vals, __pyx_n_s_nvertices, __pyx_n_s_ndim, __pyx_n_s_num_field_vals, __pyx_n_s_num_plot_nodes, __pyx_n_s_num_intervals, __pyx_n_s_mapped_coord, __pyx_n_s_sampler, __pyx_n_s_lin_vec, __pyx_n_s_lin_inc, __pyx_n_s_lin_sample_points, __pyx_n_s_i, __pyx_n_s_n, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_arc_length, __pyx_n_s_lin_length, __pyx_n_s_inc_length, __pyx_n_s_plot_values, __pyx_n_s_sample_point, __pyx_n_s_ci, __pyx_n_s_cj); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 1677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(7, 0, 30, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_pixelize_element_mesh_line, 1677, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 1677, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1784
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def rotate_particle_coord(np.float64_t[:] px,             # <<<<<<<<<<<<<<
 *                           np.float64_t[:] py,
 *                           np.float64_t[:] pz,
 */
  __pyx_tuple__60 = PyTuple_Pack(24, __pyx_n_s_px, __pyx_n_s_py, __pyx_n_s_pz, __pyx_n_s_center, __pyx_n_s_width, __pyx_n_s_normal_vector, __pyx_n_s_north_vector, __pyx_n_s_num_particles, __pyx_n_s_z_axis, __pyx_n_s_y_axis, __pyx_n_s_normal_rotation_matrix, __pyx_n_s_transformed_north_vector, __pyx_n_s_north_rotation_matrix, __pyx_n_s_rotation_matrix, __pyx_n_s_px_rotated, __pyx_n_s_py_rotated, __pyx_n_s_coordinate_matrix, __pyx_n_s_rotated_coordinates, __pyx_n_s_rotated_center, __pyx_n_s_rot_bounds_x0, __pyx_n_s_rot_bounds_x1, __pyx_n_s_rot_bounds_y0, __pyx_n_s_rot_bounds_y1, __pyx_n_s_i); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(7, 0, 24, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_rotate_particle_coord, 1784, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 1784, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1836
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def off_axis_projection_SPH(np.float64_t[:] px,             # <<<<<<<<<<<<<<
 *                             np.float64_t[:] py,
 *                             np.float64_t[:] pz,
 */
  __pyx_tuple__62 = PyTuple_Pack(20, __pyx_n_s_px, __pyx_n_s_py, __pyx_n_s_pz, __pyx_n_s_particle_masses, __pyx_n_s_particle_densities, __pyx_n_s_smoothing_lengths, __pyx_n_s_bounds, __pyx_n_s_center, __pyx_n_s_width, __pyx_n_s_quantity_to_smooth, __pyx_n_s_projection_array, __pyx_n_s_normal_vector, __pyx_n_s_north_vector, __pyx_n_s_weight_field, __pyx_n_s_px_rotated, __pyx_n_s_py_rotated, __pyx_n_s_rot_bounds_x0, __pyx_n_s_rot_bounds_x1, __pyx_n_s_rot_bounds_y0, __pyx_n_s_rot_bounds_y1); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(14, 0, 20, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_off_axis_projection_SPH, 1836, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 1836, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1915
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def normalization_3d_utility(np.float64_t[:, :, :] num,             # <<<<<<<<<<<<<<
 *                              np.float64_t[:, :, :] den):
 *     cdef int i, j, k
 */
  __pyx_tuple__64 = PyTuple_Pack(5, __pyx_n_s_num, __pyx_n_s_den, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 1915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_normalization_3d_utility, 1915, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 1915, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1926
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def normalization_2d_utility(np.float64_t[:, :] num,             # <<<<<<<<<<<<<<
 *                           np.float64_t[:, :] den):
 *     cdef int i, j
 */
  __pyx_tuple__66 = PyTuple_Pack(4, __pyx_n_s_num, __pyx_n_s_den, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 1926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_normalization_2d_utility, 1926, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 1926, __pyx_L1_error)

  /* "yt/utilities/lib/pixelization_routines.pyx":1936
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def normalization_1d_utility(np.float64_t[:] num,             # <<<<<<<<<<<<<<
 *                              np.float64_t[:] den):
 *     cdef int i
 */
  __pyx_tuple__68 = PyTuple_Pack(3, __pyx_n_s_num, __pyx_n_s_den, __pyx_n_s_i); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 1936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_yt_utilities_lib_pixelization_ro, __pyx_n_s_normalization_1d_utility, 1936, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 1936, __pyx_L1_error)

  /* "View.MemoryView":287
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "View.MemoryView":288
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "View.MemoryView":289
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "View.MemoryView":292
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "View.MemoryView":293
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(1, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__75 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* AssertionsEnabled.init */
  __Pyx_init_assertions_enabled();

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  /* InitThreads.init */
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_ = PyFloat_FromDouble(1.); if (unlikely(!__pyx_float_1_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2_0 = PyFloat_FromDouble(2.0); if (unlikely(!__pyx_float_2_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_09 = PyFloat_FromDouble(1e-09); if (unlikely(!__pyx_float_1eneg_09)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50000 = PyInt_FromLong(50000L); if (unlikely(!__pyx_int_50000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_112105877 = PyInt_FromLong(112105877L); if (unlikely(!__pyx_int_112105877)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_136983863 = PyInt_FromLong(136983863L); if (unlikely(!__pyx_int_136983863)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable = &__pyx_vtable_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable;
  __pyx_vtable_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable.integrate_q2 = (__pyx_t_5numpy_float64_t (*)(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *, __pyx_t_5numpy_float64_t))__pyx_f_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_integrate_q2;
  __pyx_vtable_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable.interpolate = (__pyx_t_5numpy_float64_t (*)(struct __pyx_obj_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable *, __pyx_t_5numpy_float64_t))__pyx_f_2yt_9utilities_3lib_21pixelization_routines_27SPHKernelInterpolationTable_interpolate;
  if (PyType_Ready(&__pyx_type_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable) < 0) __PYX_ERR(0, 979, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable.tp_dictoffset && __pyx_type_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable.tp_dict, __pyx_vtabptr_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable) < 0) __PYX_ERR(0, 979, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SPHKernelInterpolationTable, (PyObject *)&__pyx_type_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable) < 0) __PYX_ERR(0, 979, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable) < 0) __PYX_ERR(0, 979, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable = &__pyx_type_2yt_9utilities_3lib_21pixelization_routines_SPHKernelInterpolationTable;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_array.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 280, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 280, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 331, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryview.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(1, 331, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 331, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 967, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(1, 967, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 967, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_0_29_36(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyArray_Descr),__Pyx_ImportType_CheckSize_Ignore_0_29_36); if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 206, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyArrayIterObject),__Pyx_ImportType_CheckSize_Ignore_0_29_36); if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 229, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyArrayMultiIterObject),__Pyx_ImportType_CheckSize_Ignore_0_29_36); if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 233, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyArrayObject),__Pyx_ImportType_CheckSize_Ignore_0_29_36); if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 242, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType_0_29_36(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(PyUFuncObject),__Pyx_ImportType_CheckSize_Ignore_0_29_36); if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 917, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.geometry.oct_visitors"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2yt_8geometry_12oct_visitors_OctVisitor = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "OctVisitor", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_OctVisitor),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_OctVisitor) __PYX_ERR(7, 33, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_OctVisitor = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_OctVisitor*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_OctVisitor->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_OctVisitor)) __PYX_ERR(7, 33, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalOcts = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "CountTotalOcts", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalOcts), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalOcts),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalOcts) __PYX_ERR(7, 59, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_CountTotalOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountTotalOcts*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalOcts->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_CountTotalOcts)) __PYX_ERR(7, 59, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalCells = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "CountTotalCells", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalCells), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountTotalCells),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalCells) __PYX_ERR(7, 62, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_CountTotalCells = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountTotalCells*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_CountTotalCells->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_CountTotalCells)) __PYX_ERR(7, 62, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_MarkOcts = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "MarkOcts", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MarkOcts), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_MarkOcts),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_MarkOcts) __PYX_ERR(7, 65, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_MarkOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MarkOcts*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_MarkOcts->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_MarkOcts)) __PYX_ERR(7, 65, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_MaskOcts = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "MaskOcts", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskOcts), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskOcts),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_MaskOcts) __PYX_ERR(7, 69, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_MaskOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MaskOcts*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_MaskOcts->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_MaskOcts)) __PYX_ERR(7, 69, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_IndexOcts = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "IndexOcts", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexOcts), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexOcts),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_IndexOcts) __PYX_ERR(7, 72, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_IndexOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IndexOcts*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_IndexOcts->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_IndexOcts)) __PYX_ERR(7, 72, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_MaskedIndexOcts = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "MaskedIndexOcts", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_MaskedIndexOcts),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_MaskedIndexOcts) __PYX_ERR(7, 75, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_MaskedIndexOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MaskedIndexOcts*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_MaskedIndexOcts->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_MaskedIndexOcts)) __PYX_ERR(7, 75, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_IndexMaskMapOcts = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "IndexMaskMapOcts", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_IndexMaskMapOcts),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_IndexMaskMapOcts) __PYX_ERR(7, 79, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_IndexMaskMapOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IndexMaskMapOcts*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_IndexMaskMapOcts->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_IndexMaskMapOcts)) __PYX_ERR(7, 79, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_ICoordsOcts = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "ICoordsOcts", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_ICoordsOcts), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_ICoordsOcts),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_ICoordsOcts) __PYX_ERR(7, 85, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_ICoordsOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_ICoordsOcts*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_ICoordsOcts->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_ICoordsOcts)) __PYX_ERR(7, 85, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_IResOcts = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "IResOcts", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IResOcts), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_IResOcts),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_IResOcts) __PYX_ERR(7, 88, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_IResOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IResOcts*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_IResOcts->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_IResOcts)) __PYX_ERR(7, 88, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_FCoordsOcts = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "FCoordsOcts", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FCoordsOcts), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_FCoordsOcts),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_FCoordsOcts) __PYX_ERR(7, 91, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_FCoordsOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FCoordsOcts*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_FCoordsOcts->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_FCoordsOcts)) __PYX_ERR(7, 91, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_FWidthOcts = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "FWidthOcts", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FWidthOcts), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_FWidthOcts),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_FWidthOcts) __PYX_ERR(7, 94, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_FWidthOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FWidthOcts*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_FWidthOcts->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_FWidthOcts)) __PYX_ERR(7, 94, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayI64 = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "CopyArrayI64", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayI64), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayI64),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayI64) __PYX_ERR(7, 97, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyArrayI64 = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyArrayI64*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayI64->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyArrayI64)) __PYX_ERR(7, 97, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayF64 = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "CopyArrayF64", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayF64), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyArrayF64),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayF64) __PYX_ERR(7, 101, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyArrayF64 = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyArrayF64*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_CopyArrayF64->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyArrayF64)) __PYX_ERR(7, 101, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8 = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "CopyFileIndArrayI8", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8) __PYX_ERR(7, 105, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8 = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_CopyFileIndArrayI8)) __PYX_ERR(7, 105, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_IdentifyOcts = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "IdentifyOcts", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_IdentifyOcts), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_IdentifyOcts),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_IdentifyOcts) __PYX_ERR(7, 110, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_IdentifyOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_IdentifyOcts*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_IdentifyOcts->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_IdentifyOcts)) __PYX_ERR(7, 110, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_AssignDomainInd = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "AssignDomainInd", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_AssignDomainInd),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_AssignDomainInd) __PYX_ERR(7, 113, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_AssignDomainInd = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_AssignDomainInd*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_AssignDomainInd->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_AssignDomainInd)) __PYX_ERR(7, 113, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesO = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "FillFileIndicesO", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesO), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesO),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesO) __PYX_ERR(7, 116, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_FillFileIndicesO = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FillFileIndicesO*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesO->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_FillFileIndicesO)) __PYX_ERR(7, 116, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesR = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "FillFileIndicesR", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesR), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_FillFileIndicesR),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesR) __PYX_ERR(7, 121, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_FillFileIndicesR = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_FillFileIndicesR*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_FillFileIndicesR->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_FillFileIndicesR)) __PYX_ERR(7, 121, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_CountByDomain = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "CountByDomain", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountByDomain), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_CountByDomain),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_CountByDomain) __PYX_ERR(7, 126, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_CountByDomain = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_CountByDomain*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_CountByDomain->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_CountByDomain)) __PYX_ERR(7, 126, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_StoreOctree = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "StoreOctree", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreOctree), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreOctree),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_StoreOctree) __PYX_ERR(7, 129, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_StoreOctree = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_StoreOctree*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_StoreOctree->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_StoreOctree)) __PYX_ERR(7, 129, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_LoadOctree = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "LoadOctree", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_LoadOctree), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_LoadOctree),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_LoadOctree) __PYX_ERR(7, 132, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_LoadOctree = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_LoadOctree*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_LoadOctree->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_LoadOctree)) __PYX_ERR(7, 132, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_MortonIndexOcts = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "MortonIndexOcts", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_MortonIndexOcts), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_MortonIndexOcts),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_MortonIndexOcts) __PYX_ERR(7, 139, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_MortonIndexOcts = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_MortonIndexOcts*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_MortonIndexOcts->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_MortonIndexOcts)) __PYX_ERR(7, 139, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_StoreIndex = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "StoreIndex", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreIndex), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_StoreIndex),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_StoreIndex) __PYX_ERR(7, 150, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_StoreIndex = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_StoreIndex*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_StoreIndex->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_StoreIndex)) __PYX_ERR(7, 150, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "BaseNeighbourVisitor", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor) __PYX_ERR(7, 154, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_BaseNeighbourVisitor)) __PYX_ERR(7, 154, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "NeighbourCellIndexVisitor", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor) __PYX_ERR(7, 170, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_NeighbourCellIndexVisitor)) __PYX_ERR(7, 170, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellVisitor = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_visitors", "NeighbourCellVisitor", sizeof(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellVisitor), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_12oct_visitors_NeighbourCellVisitor),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellVisitor) __PYX_ERR(7, 174, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_12oct_visitors_NeighbourCellVisitor = (struct __pyx_vtabstruct_2yt_8geometry_12oct_visitors_NeighbourCellVisitor*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_12oct_visitors_NeighbourCellVisitor->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_12oct_visitors_NeighbourCellVisitor)) __PYX_ERR(7, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.geometry.selection_routines"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.selection_routines", "SelectorObject", sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_18selection_routines_SelectorObject),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject) __PYX_ERR(8, 25, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_18selection_routines_SelectorObject = (struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_SelectorObject*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_18selection_routines_SelectorObject->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_18selection_routines_SelectorObject)) __PYX_ERR(8, 25, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.selection_routines", "AlwaysSelector", sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_AlwaysSelector), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_18selection_routines_AlwaysSelector),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector) __PYX_ERR(8, 77, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_18selection_routines_AlwaysSelector = (struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_AlwaysSelector*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_18selection_routines_AlwaysSelector->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_18selection_routines_AlwaysSelector)) __PYX_ERR(8, 77, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_18selection_routines_OctreeSubsetSelector = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.selection_routines", "OctreeSubsetSelector", sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_OctreeSubsetSelector), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_18selection_routines_OctreeSubsetSelector),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_18selection_routines_OctreeSubsetSelector) __PYX_ERR(8, 80, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_18selection_routines_OctreeSubsetSelector = (struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_OctreeSubsetSelector*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_18selection_routines_OctreeSubsetSelector->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_18selection_routines_OctreeSubsetSelector)) __PYX_ERR(8, 80, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_18selection_routines_BooleanSelector = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.selection_routines", "BooleanSelector", sizeof(struct __pyx_obj_2yt_8geometry_18selection_routines_BooleanSelector), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_18selection_routines_BooleanSelector),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_18selection_routines_BooleanSelector) __PYX_ERR(8, 84, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_18selection_routines_BooleanSelector = (struct __pyx_vtabstruct_2yt_8geometry_18selection_routines_BooleanSelector*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_18selection_routines_BooleanSelector->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_18selection_routines_BooleanSelector)) __PYX_ERR(8, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.utilities.lib.allocation_container"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2yt_9utilities_3lib_20allocation_container_ObjectPool = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.allocation_container", "ObjectPool", sizeof(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_20allocation_container_ObjectPool),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_20allocation_container_ObjectPool) __PYX_ERR(9, 20, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_20allocation_container_ObjectPool = (struct __pyx_vtabstruct_2yt_9utilities_3lib_20allocation_container_ObjectPool*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_20allocation_container_ObjectPool->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_20allocation_container_ObjectPool)) __PYX_ERR(9, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.geometry.oct_container"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2yt_8geometry_13oct_container_OctObjectPool = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_container", "OctObjectPool", sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_13oct_container_OctObjectPool),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_13oct_container_OctObjectPool) __PYX_ERR(10, 46, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_13oct_container_OctObjectPool = (struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctObjectPool*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_13oct_container_OctObjectPool->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_13oct_container_OctObjectPool)) __PYX_ERR(10, 46, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_container", "OctreeContainer", sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_13oct_container_OctreeContainer),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer) __PYX_ERR(10, 54, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_13oct_container_OctreeContainer = (struct __pyx_vtabstruct_2yt_8geometry_13oct_container_OctreeContainer*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_13oct_container_OctreeContainer->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_13oct_container_OctreeContainer)) __PYX_ERR(10, 54, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_container", "SparseOctreeContainer", sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_13oct_container_SparseOctreeContainer),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer) __PYX_ERR(10, 85, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_13oct_container_SparseOctreeContainer = (struct __pyx_vtabstruct_2yt_8geometry_13oct_container_SparseOctreeContainer*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_13oct_container_SparseOctreeContainer->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_13oct_container_SparseOctreeContainer)) __PYX_ERR(10, 85, __pyx_L1_error)
  __pyx_ptype_2yt_8geometry_13oct_container_RAMSESOctreeContainer = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.oct_container", "RAMSESOctreeContainer", sizeof(struct __pyx_obj_2yt_8geometry_13oct_container_RAMSESOctreeContainer), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_13oct_container_RAMSESOctreeContainer),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_13oct_container_RAMSESOctreeContainer) __PYX_ERR(10, 93, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_13oct_container_RAMSESOctreeContainer = (struct __pyx_vtabstruct_2yt_8geometry_13oct_container_RAMSESOctreeContainer*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_13oct_container_RAMSESOctreeContainer->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_13oct_container_RAMSESOctreeContainer)) __PYX_ERR(10, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.geometry.particle_deposit"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2yt_8geometry_16particle_deposit_ParticleDepositOperation = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.geometry.particle_deposit", "ParticleDepositOperation", sizeof(struct __pyx_obj_2yt_8geometry_16particle_deposit_ParticleDepositOperation), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_8geometry_16particle_deposit_ParticleDepositOperation),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_8geometry_16particle_deposit_ParticleDepositOperation) __PYX_ERR(5, 139, __pyx_L1_error)
  __pyx_vtabptr_2yt_8geometry_16particle_deposit_ParticleDepositOperation = (struct __pyx_vtabstruct_2yt_8geometry_16particle_deposit_ParticleDepositOperation*)__Pyx_GetVtable(__pyx_ptype_2yt_8geometry_16particle_deposit_ParticleDepositOperation->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_8geometry_16particle_deposit_ParticleDepositOperation)) __PYX_ERR(5, 139, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.utilities.lib.element_mappings"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2yt_9utilities_3lib_16element_mappings_ElementSampler = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.element_mappings", "ElementSampler", sizeof(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_ElementSampler),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_16element_mappings_ElementSampler) __PYX_ERR(11, 10, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_ElementSampler = (struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_ElementSampler*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_16element_mappings_ElementSampler->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_ElementSampler)) __PYX_ERR(11, 10, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler1D = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.element_mappings", "P1Sampler1D", sizeof(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_P1Sampler1D), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_P1Sampler1D),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler1D) __PYX_ERR(11, 39, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_P1Sampler1D = (struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_P1Sampler1D*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler1D->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_P1Sampler1D)) __PYX_ERR(11, 39, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler2D = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.element_mappings", "P1Sampler2D", sizeof(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_P1Sampler2D), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_P1Sampler2D),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler2D) __PYX_ERR(11, 54, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_P1Sampler2D = (struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_P1Sampler2D*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler2D->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_P1Sampler2D)) __PYX_ERR(11, 54, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler3D = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.element_mappings", "P1Sampler3D", sizeof(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_P1Sampler3D), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_P1Sampler3D),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler3D) __PYX_ERR(11, 69, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_P1Sampler3D = (struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_P1Sampler3D*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_16element_mappings_P1Sampler3D->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_P1Sampler3D)) __PYX_ERR(11, 69, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.element_mappings", "NonlinearSolveSampler3D", sizeof(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D) __PYX_ERR(11, 148, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D = (struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler3D)) __PYX_ERR(11, 148, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.element_mappings", "Q1Sampler3D", sizeof(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D) __PYX_ERR(11, 162, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D = (struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_Q1Sampler3D)) __PYX_ERR(11, 162, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_16element_mappings_W1Sampler3D = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.element_mappings", "W1Sampler3D", sizeof(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_W1Sampler3D), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_W1Sampler3D),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_16element_mappings_W1Sampler3D) __PYX_ERR(11, 179, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_W1Sampler3D = (struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_W1Sampler3D*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_16element_mappings_W1Sampler3D->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_W1Sampler3D)) __PYX_ERR(11, 179, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_16element_mappings_S2Sampler3D = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.element_mappings", "S2Sampler3D", sizeof(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_S2Sampler3D), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_S2Sampler3D),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_16element_mappings_S2Sampler3D) __PYX_ERR(11, 197, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_S2Sampler3D = (struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_S2Sampler3D*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_16element_mappings_S2Sampler3D->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_S2Sampler3D)) __PYX_ERR(11, 197, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.element_mappings", "NonlinearSolveSampler2D", sizeof(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D) __PYX_ERR(11, 215, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D = (struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_NonlinearSolveSampler2D)) __PYX_ERR(11, 215, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.element_mappings", "Q1Sampler2D", sizeof(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D) __PYX_ERR(11, 229, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D = (struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_Q1Sampler2D)) __PYX_ERR(11, 229, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.element_mappings", "Q2Sampler2D", sizeof(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D) __PYX_ERR(11, 244, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D = (struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_Q2Sampler2D)) __PYX_ERR(11, 244, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_16element_mappings_T2Sampler2D = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.element_mappings", "T2Sampler2D", sizeof(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_T2Sampler2D), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_T2Sampler2D),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_16element_mappings_T2Sampler2D) __PYX_ERR(11, 259, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_T2Sampler2D = (struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_T2Sampler2D*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_16element_mappings_T2Sampler2D->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_T2Sampler2D)) __PYX_ERR(11, 259, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.element_mappings", "Tet2Sampler3D", sizeof(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D) __PYX_ERR(11, 273, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D = (struct __pyx_vtabstruct_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_16element_mappings_Tet2Sampler3D)) __PYX_ERR(11, 273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.utilities.lib.bounded_priority_queue"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.bounded_priority_queue", "BoundedPriorityQueue", sizeof(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue) __PYX_ERR(12, 15, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue = (struct __pyx_vtabstruct_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue)) __PYX_ERR(12, 15, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.bounded_priority_queue", "NeighborList", sizeof(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList) __PYX_ERR(12, 33, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList = (struct __pyx_vtabstruct_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_22bounded_priority_queue_NeighborList)) __PYX_ERR(12, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.utilities.lib.cykdtree.kdtree"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.cykdtree.kdtree", "PyNode", sizeof(struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode) __PYX_ERR(13, 88, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode = (struct __pyx_vtabstruct_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_8cykdtree_6kdtree_PyNode)) __PYX_ERR(13, 88, __pyx_L1_error)
  __pyx_ptype_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree = __Pyx_ImportType_0_29_36(__pyx_t_1, "yt.utilities.lib.cykdtree.kdtree", "PyKDTree", sizeof(struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree), __PYX_GET_STRUCT_ALIGNMENT_0_29_36(struct __pyx_obj_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree),__Pyx_ImportType_CheckSize_Warn_0_29_36); if (!__pyx_ptype_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree) __PYX_ERR(13, 101, __pyx_L1_error)
  __pyx_vtabptr_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree = (struct __pyx_vtabstruct_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree*)__Pyx_GetVtable(__pyx_ptype_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree->tp_dict); if (unlikely(!__pyx_vtabptr_2yt_9utilities_3lib_8cykdtree_6kdtree_PyKDTree)) __PYX_ERR(13, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("yt.geometry.oct_container"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr_0_29_36(__pyx_t_1, "ORDER_MAX", (void **)&__pyx_vp_2yt_8geometry_13oct_container_ORDER_MAX, "int") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("yt.geometry.grid_visitors"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_0_29_36(__pyx_t_1, "check_child_masked", (void (**)(void))&__pyx_f_2yt_8geometry_13grid_visitors_check_child_masked, "__pyx_t_5numpy_uint8_t (struct __pyx_t_2yt_8geometry_13grid_visitors_GridVisitorData *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("yt.utilities.lib.particle_kdtree_tools"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_0_29_36(__pyx_t_1, "set_axes_range", (void (**)(void))&__pyx_f_2yt_9utilities_3lib_21particle_kdtree_tools_set_axes_range, "int (struct __pyx_t_2yt_9utilities_3lib_21particle_kdtree_tools_axes_range *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_0_29_36(__pyx_t_1, "find_neighbors", (void (**)(void))&__pyx_f_2yt_9utilities_3lib_21particle_kdtree_tools_find_neighbors, "int (__pyx_t_5numpy_float64_t *, __Pyx_memviewslice, struct __pyx_obj_2yt_9utilities_3lib_22bounded_priority_queue_BoundedPriorityQueue *, KDTree *, uint64_t, struct __pyx_t_2yt_9utilities_3lib_21particle_kdtree_tools_axes_range *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initpixelization_routines(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initpixelization_routines(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_pixelization_routines(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_pixelization_routines(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_pixelization_routines(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  static PyThread_type_lock __pyx_t_5[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'pixelization_routines' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_pixelization_routines(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("pixelization_routines", __pyx_methods, __pyx_k_Pixelization_routines, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_yt__utilities__lib__pixelization_routines) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "yt.utilities.lib.pixelization_routines")) {
      if (unlikely(PyDict_SetItemString(modules, "yt.utilities.lib.pixelization_routines", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_variable_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "yt/utilities/lib/pixelization_routines.pyx":15
 * 
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * 
 * cimport cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":32
 * )
 * 
 * from yt.utilities.exceptions import YTElementTypeNotRecognized, YTPixelizeError             # <<<<<<<<<<<<<<
 * 
 * from cpython.exc cimport PyErr_CheckSignals
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_YTElementTypeNotRecognized);
  __Pyx_GIVEREF(__pyx_n_s_YTElementTypeNotRecognized);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_YTElementTypeNotRecognized);
  __Pyx_INCREF(__pyx_n_s_YTPixelizeError);
  __Pyx_GIVEREF(__pyx_n_s_YTPixelizeError);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_YTPixelizeError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_yt_utilities_exceptions, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_YTElementTypeNotRecognized); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_YTElementTypeNotRecognized, __pyx_t_1) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_YTPixelizeError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_YTPixelizeError, __pyx_t_1) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":55
 * from .vec3_ops cimport cross, dot, subtract
 * 
 * from yt.funcs import get_pbar             # <<<<<<<<<<<<<<
 * 
 * from yt.utilities.lib.bounded_priority_queue cimport BoundedPriorityQueue
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_get_pbar);
  __Pyx_GIVEREF(__pyx_n_s_get_pbar);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_get_pbar);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_yt_funcs, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_get_pbar); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_pbar, __pyx_t_2) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":66
 * 
 * 
 * cdef int TABLE_NVALS=512             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "pixelization_constants.hpp":
 */
  __pyx_v_2yt_9utilities_3lib_21pixelization_routines_TABLE_NVALS = 0x200;

  /* "yt/utilities/lib/pixelization_routines.pyx":95
 *                        any_float[:] data,
 *                        bounds,
 *                        int antialias = 1,             # <<<<<<<<<<<<<<
 *                        period = None,
 *                        int check_period = 1,
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "yt/utilities/lib/pixelization_routines.pyx":97
 *                        int antialias = 1,
 *                        period = None,
 *                        int check_period = 1,             # <<<<<<<<<<<<<<
 *                        np.float64_t line_width = 0.0):
 *     cdef np.float64_t x_min, x_max, y_min, y_max
 */
  __pyx_t_2 = __Pyx_PyInt_From_long(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "yt/utilities/lib/pixelization_routines.pyx":98
 *                        period = None,
 *                        int check_period = 1,
 *                        np.float64_t line_width = 0.0):             # <<<<<<<<<<<<<<
 *     cdef np.float64_t x_min, x_max, y_min, y_max
 *     cdef np.float64_t period_x = 0.0, period_y = 0.0
 */
  __pyx_t_3 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "yt/utilities/lib/pixelization_routines.pyx":88
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cartesian(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                        any_float[:] px,
 *                        any_float[:] py,
 */
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_4, 1, Py_None);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __pyx_FusedFunction_New(&__pyx_fuse_0__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_37pixelize_cartesian, 0, __pyx_n_s_pixelize_cartesian, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_2, sizeof(__pyx_defaults2), 1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_INCREF(Py_None);
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_2)->__pyx_arg_period = Py_None;
  __Pyx_GIVEREF(Py_None);
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_2)->__pyx_arg_antialias = 1;
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_2)->__pyx_arg_check_period = 1;
  __Pyx_CyFunction_Defaults(__pyx_defaults2, __pyx_t_2)->__pyx_arg_line_width = 0.0;
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_4);
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_2, __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_52__defaults__);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_float32_t, __pyx_t_2) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_FusedFunction_New(&__pyx_fuse_1__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_39pixelize_cartesian, 0, __pyx_n_s_pixelize_cartesian, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_2, sizeof(__pyx_defaults3), 1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_INCREF(Py_None);
  __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_t_2)->__pyx_arg_period = Py_None;
  __Pyx_GIVEREF(Py_None);
  __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_t_2)->__pyx_arg_antialias = 1;
  __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_t_2)->__pyx_arg_check_period = 1;
  __Pyx_CyFunction_Defaults(__pyx_defaults3, __pyx_t_2)->__pyx_arg_line_width = 0.0;
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_4);
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_2, __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_54__defaults__);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_float64_t, __pyx_t_2) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_FusedFunction_New(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_1pixelize_cartesian, 0, __pyx_n_s_pixelize_cartesian, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_4);
  ((__pyx_FusedFunctionObject *) __pyx_t_2)->__signatures__ = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pixelize_cartesian, __pyx_t_2) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":268
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cartesian_nodal(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                              np.float64_t[:] px,
 *                              np.float64_t[:] py,
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_3pixelize_cartesian_nodal, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pixelize_cartesian_nodal, __pyx_t_4) < 0) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":434
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_off_axis_cartesian(             # <<<<<<<<<<<<<<
 *                        np.float64_t[:,:] buff,
 *                        np.float64_t[:] x,
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_5pixelize_off_axis_cartesian, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pixelize_off_axis_cartesian, __pyx_t_4) < 0) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":522
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_cylinder(np.float64_t[:,:] buff,             # <<<<<<<<<<<<<<
 *                       np.float64_t[:] radius,
 *                       np.float64_t[:] dradius,
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_7pixelize_cylinder, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pixelize_cylinder, __pyx_t_4) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":647
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def pixelize_aitoff(np.float64_t[:] azimuth,             # <<<<<<<<<<<<<<
 *                     np.float64_t[:] dazimuth,
 *                     np.float64_t[:] colatitude,
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_9pixelize_aitoff, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pixelize_aitoff, __pyx_t_4) < 0) __PYX_ERR(0, 647, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":837
 * 
 * 
 * def pixelize_element_mesh(np.ndarray[np.float64_t, ndim=2] coords,             # <<<<<<<<<<<<<<
 *                           np.ndarray[np.int64_t, ndim=2] conn,
 *                           buff_size,
 */
  __pyx_t_4 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_11pixelize_element_mesh, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pixelize_element_mesh, __pyx_t_4) < 0) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":977
 * # used as a cache to avoid repeatedly creating
 * # instances of SPHKernelInterpolationTable
 * kernel_tables = {}             # <<<<<<<<<<<<<<
 * 
 * cdef class SPHKernelInterpolationTable:
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_kernel_tables, __pyx_t_4) < 0) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1069
 *         kernel_name="cubic",
 *         weight_field=None,
 *         int check_period=1,             # <<<<<<<<<<<<<<
 *         period=None):
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_From_long(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "yt/utilities/lib/pixelization_routines.pyx":1058
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_projection(             # <<<<<<<<<<<<<<
 *         np.float64_t[:, :] buff,
 *         any_float[:] posx,
 */
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_cubic);
  __Pyx_GIVEREF(__pyx_n_u_cubic);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_cubic);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_4);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 3, Py_None);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_FusedFunction_New(&__pyx_fuse_0__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_43pixelize_sph_kernel_projection, 0, __pyx_n_s_pixelize_sph_kernel_projection, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_3, sizeof(__pyx_defaults6), 3)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_INCREF(__pyx_n_u_cubic);
  __Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_t_3)->__pyx_arg_kernel_name = __pyx_n_u_cubic;
  __Pyx_GIVEREF(__pyx_n_u_cubic);
  __Pyx_INCREF(Py_None);
  __Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_t_3)->__pyx_arg_weight_field = Py_None;
  __Pyx_GIVEREF(Py_None);
  __Pyx_INCREF(Py_None);
  __Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_t_3)->__pyx_arg_period = Py_None;
  __Pyx_GIVEREF(Py_None);
  __Pyx_CyFunction_Defaults(__pyx_defaults6, __pyx_t_3)->__pyx_arg_check_period = 1;
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_t_2);
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_3, __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_60__defaults__);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_float32_t, __pyx_t_3) < 0) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_FusedFunction_New(&__pyx_fuse_1__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_45pixelize_sph_kernel_projection, 0, __pyx_n_s_pixelize_sph_kernel_projection, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_3, sizeof(__pyx_defaults7), 3)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_INCREF(__pyx_n_u_cubic);
  __Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_t_3)->__pyx_arg_kernel_name = __pyx_n_u_cubic;
  __Pyx_GIVEREF(__pyx_n_u_cubic);
  __Pyx_INCREF(Py_None);
  __Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_t_3)->__pyx_arg_weight_field = Py_None;
  __Pyx_GIVEREF(Py_None);
  __Pyx_INCREF(Py_None);
  __Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_t_3)->__pyx_arg_period = Py_None;
  __Pyx_GIVEREF(Py_None);
  __Pyx_CyFunction_Defaults(__pyx_defaults7, __pyx_t_3)->__pyx_arg_check_period = 1;
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_t_2);
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_3, __pyx_pf_2yt_9utilities_3lib_21pixelization_routines_62__defaults__);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_float64_t, __pyx_t_3) < 0) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __pyx_FusedFunction_New(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_13pixelize_sph_kernel_projection, 0, __pyx_n_s_pixelize_sph_kernel_projection, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_t_2);
  ((__pyx_FusedFunctionObject *) __pyx_t_3)->__signatures__ = __pyx_t_4;
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pixelize_sph_kernel_projection, __pyx_t_3) < 0) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1222
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def interpolate_sph_positions_gather(np.float64_t[:] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:, ::1] tree_positions, np.float64_t[:, ::1] field_positions,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass, np.float64_t[:] pdens,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_15interpolate_sph_positions_gather, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_interpolate_sph_positions_gather, __pyx_t_2) < 0) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1294
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def interpolate_sph_grid_gather(np.float64_t[:, :, :] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:, ::1] tree_positions, np.float64_t[:] bounds,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass, np.float64_t[:] pdens,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_17interpolate_sph_grid_gather, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_interpolate_sph_grid_gather, __pyx_t_2) < 0) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1388
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_slice(             # <<<<<<<<<<<<<<
 *         np.float64_t[:, :] buff,
 *         np.float64_t[:] posx, np.float64_t[:] posy,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_19pixelize_sph_kernel_slice, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pixelize_sph_kernel_slice, __pyx_t_2) < 0) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1528
 * @cython.wraparound(False)
 * @cython.cdivision(True)
 * def pixelize_sph_kernel_arbitrary_grid(np.float64_t[:, :, :] buff,             # <<<<<<<<<<<<<<
 *         np.float64_t[:] posx, np.float64_t[:] posy, np.float64_t[:] posz,
 *         np.float64_t[:] hsml, np.float64_t[:] pmass,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_21pixelize_sph_kernel_arbitrary_grid, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pixelize_sph_kernel_arbitrary_gr, __pyx_t_2) < 0) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1677
 * 
 * 
 * def pixelize_element_mesh_line(np.ndarray[np.float64_t, ndim=2] coords,             # <<<<<<<<<<<<<<
 *                                np.ndarray[np.int64_t, ndim=2] conn,
 *                                np.ndarray[np.float64_t, ndim=1] start_point,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_23pixelize_element_mesh_line, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pixelize_element_mesh_line, __pyx_t_2) < 0) __PYX_ERR(0, 1677, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1784
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def rotate_particle_coord(np.float64_t[:] px,             # <<<<<<<<<<<<<<
 *                           np.float64_t[:] py,
 *                           np.float64_t[:] pz,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_25rotate_particle_coord, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_rotate_particle_coord, __pyx_t_2) < 0) __PYX_ERR(0, 1784, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1836
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def off_axis_projection_SPH(np.float64_t[:] px,             # <<<<<<<<<<<<<<
 *                             np.float64_t[:] py,
 *                             np.float64_t[:] pz,
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_27off_axis_projection_SPH, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_off_axis_projection_SPH, __pyx_t_2) < 0) __PYX_ERR(0, 1836, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1915
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def normalization_3d_utility(np.float64_t[:, :, :] num,             # <<<<<<<<<<<<<<
 *                              np.float64_t[:, :, :] den):
 *     cdef int i, j, k
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_31normalization_3d_utility, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_normalization_3d_utility, __pyx_t_2) < 0) __PYX_ERR(0, 1915, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1926
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def normalization_2d_utility(np.float64_t[:, :] num,             # <<<<<<<<<<<<<<
 *                           np.float64_t[:, :] den):
 *     cdef int i, j
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_33normalization_2d_utility, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_normalization_2d_utility, __pyx_t_2) < 0) __PYX_ERR(0, 1926, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1936
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def normalization_1d_utility(np.float64_t[:] num,             # <<<<<<<<<<<<<<
 *                              np.float64_t[:] den):
 *     cdef int i
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_2yt_9utilities_3lib_21pixelization_routines_35normalization_1d_utility, NULL, __pyx_n_s_yt_utilities_lib_pixelization_ro_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_normalization_1d_utility, __pyx_t_2) < 0) __PYX_ERR(0, 1936, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yt/utilities/lib/pixelization_routines.pyx":1
 * # distutils: include_dirs = LIB_DIR             # <<<<<<<<<<<<<<
 * # distutils: extra_compile_args = CPP14_FLAG OMP_ARGS
 * # distutils: extra_link_args = CPP14_FLAG OMP_ARGS
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":210
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(1, 210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":287
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":288
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":289
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":292
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":293
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":317
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":318
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_5[0] = PyThread_allocate_lock();
  __pyx_t_5[1] = PyThread_allocate_lock();
  __pyx_t_5[2] = PyThread_allocate_lock();
  __pyx_t_5[3] = PyThread_allocate_lock();
  __pyx_t_5[4] = PyThread_allocate_lock();
  __pyx_t_5[5] = PyThread_allocate_lock();
  __pyx_t_5[6] = PyThread_allocate_lock();
  __pyx_t_5[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_5, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":551
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":997
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(1, 997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init yt.utilities.lib.pixelization_routines", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init yt.utilities.lib.pixelization_routines");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* UnicodeAsUCS4 */
static CYTHON_INLINE Py_UCS4 __Pyx_PyUnicode_AsPy_UCS4(PyObject* x) {
   Py_ssize_t length;
   #if CYTHON_PEP393_ENABLED
   length = PyUnicode_GET_LENGTH(x);
   if (likely(length == 1)) {
       return PyUnicode_READ_CHAR(x, 0);
   }
   #else
   length = PyUnicode_GET_SIZE(x);
   if (likely(length == 1)) {
       return PyUnicode_AS_UNICODE(x)[0];
   }
   #if Py_UNICODE_SIZE == 2
   else if (PyUnicode_GET_SIZE(x) == 2) {
       Py_UCS4 high_val = PyUnicode_AS_UNICODE(x)[0];
       if (high_val >= 0xD800 && high_val <= 0xDBFF) {
           Py_UCS4 low_val = PyUnicode_AS_UNICODE(x)[1];
           if (low_val >= 0xDC00 && low_val <= 0xDFFF) {
               return 0x10000 + (((high_val & ((1<<10)-1)) << 10) | (low_val & ((1<<10)-1)));
           }
       }
   }
   #endif
   #endif
   PyErr_Format(PyExc_ValueError,
                "only single character unicode strings can be converted to Py_UCS4, "
                "got length %" CYTHON_FORMAT_SSIZE_T "d", length);
   return (Py_UCS4)-1;
}

/* object_ord */
static long __Pyx__PyObject_Ord(PyObject* c) {
    Py_ssize_t size;
    if (PyBytes_Check(c)) {
        size = PyBytes_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyBytes_AS_STRING(c)[0];
        }
#if PY_MAJOR_VERSION < 3
    } else if (PyUnicode_Check(c)) {
        return (long)__Pyx_PyUnicode_AsPy_UCS4(c);
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    } else if (PyByteArray_Check(c)) {
        size = PyByteArray_GET_SIZE(c);
        if (likely(size == 1)) {
            return (unsigned char) PyByteArray_AS_STRING(c)[0];
        }
#endif
    } else {
        PyErr_Format(PyExc_TypeError,
            "ord() expected string of length 1, but %.200s found", Py_TYPE(c)->tp_name);
        return (long)(Py_UCS4)-1;
    }
    PyErr_Format(PyExc_TypeError,
        "ord() expected a character, but string of length %zd found", size);
    return (long)(Py_UCS4)-1;
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#if defined(__Pyx_CyFunction_USED) && defined(NDEBUG)
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    }
    return __Pyx_IterFinish();
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* MemviewSliceInit */
static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#if PY_VERSION_HEX >= 0x030A0000 || defined(HAVE_STDARG_PROTOTYPES)
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None))
        return;
    if (unlikely(__pyx_get_slice_count(memview) < 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (unlikely(first_time)) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    if (unlikely(__pyx_get_slice_count(memview) <= 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (unlikely(last_time)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* BufferFallbackError */
  static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* PyFloatBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
    }
        
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* WriteUnraisableException */
    static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
    else state = (PyGILState_STATE)0;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ArgTypeTest */
    static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyIntCompare */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* BufferIndexError */
    static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* ObjectGetItem */
    #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* None */
    static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* None */
    static void __Pyx_RaiseUnboundMemoryviewSliceNogil(const char *varname) {
    #ifdef WITH_THREAD
    PyGILState_STATE gilstate = PyGILState_Ensure();
    #endif
    __Pyx_RaiseUnboundLocalError(varname);
    #ifdef WITH_THREAD
    PyGILState_Release(gilstate);
    #endif
}

/* DivInt[Py_ssize_t] */
    static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* ModInt[long] */
    static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
#if PY_MAJOR_VERSION < 3 || CYTHON_USE_PYLONG_INTERNALS
#define __Pyx_PyInt_TrueDivideObjC_ZeroDivisionError(operand)\
    if (unlikely(zerodivision_check && ((operand) == 0))) {\
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division by zero");\
        return NULL;\
    }
#endif
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
            __Pyx_PyInt_TrueDivideObjC_ZeroDivisionError(b)
            if (8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53))) {
                return PyFloat_FromDouble((double)a / (double)b);
            }
            return PyInt_Type.tp_as_number->nb_true_divide(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            }
        }
                __Pyx_PyInt_TrueDivideObjC_ZeroDivisionError(b)
                if ((8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53)))
                        || __Pyx_sst_abs(size) <= 52 / PyLong_SHIFT) {
                    return PyFloat_FromDouble((double)a / (double)b);
                }
                return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            return PyLong_FromLong(x);
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            if (unlikely(zerodivision_check && b == 0)) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division by zero");
                return NULL;
            }
            PyFPE_START_PROTECT("divide", return NULL)
            result = ((double)a) / (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
}
#endif

/* GetTopmostException */
    #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* GetAttr */
    static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
    static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* BytesEquals */
    static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
    static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* decode_c_string */
    static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* GetAttr3 */
    static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* SwapException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* Import */
    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* FastTypeChecks */
    #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* DivInt[long] */
    static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* ImportFrom */
    static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyObject_GenericGetAttrNoDict */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
    static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
    static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
    static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
    #ifndef __PYX_HAVE_RT_ImportType_0_29_36
#define __PYX_HAVE_RT_ImportType_0_29_36
static PyTypeObject *__Pyx_ImportType_0_29_36(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_0_29_36 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_0_29_36 && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_0_29_36 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
    static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* FetchCommonType */
    static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunctionShared */
    #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, CYTHON_UNUSED void *context) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *context) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
#if PY_MAJOR_VERSION < 3
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
#endif
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
#if PY_MAJOR_VERSION > 2
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
#else
            PyErr_SetString(PyExc_TypeError,
                            "unbound method needs an argument");
#endif
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* FusedFunction */
    static PyObject *
__pyx_FusedFunction_New(PyMethodDef *ml, int flags,
                        PyObject *qualname, PyObject *closure,
                        PyObject *module, PyObject *globals,
                        PyObject *code)
{
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_FusedFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        __pyx_FusedFunctionObject *fusedfunc = (__pyx_FusedFunctionObject *) op;
        fusedfunc->__signatures__ = NULL;
        fusedfunc->type = NULL;
        fusedfunc->self = NULL;
        PyObject_GC_Track(op);
    }
    return op;
}
static void
__pyx_FusedFunction_dealloc(__pyx_FusedFunctionObject *self)
{
    PyObject_GC_UnTrack(self);
    Py_CLEAR(self->self);
    Py_CLEAR(self->type);
    Py_CLEAR(self->__signatures__);
    __Pyx__CyFunction_dealloc((__pyx_CyFunctionObject *) self);
}
static int
__pyx_FusedFunction_traverse(__pyx_FusedFunctionObject *self,
                             visitproc visit,
                             void *arg)
{
    Py_VISIT(self->self);
    Py_VISIT(self->type);
    Py_VISIT(self->__signatures__);
    return __Pyx_CyFunction_traverse((__pyx_CyFunctionObject *) self, visit, arg);
}
static int
__pyx_FusedFunction_clear(__pyx_FusedFunctionObject *self)
{
    Py_CLEAR(self->self);
    Py_CLEAR(self->type);
    Py_CLEAR(self->__signatures__);
    return __Pyx_CyFunction_clear((__pyx_CyFunctionObject *) self);
}
static PyObject *
__pyx_FusedFunction_descr_get(PyObject *self, PyObject *obj, PyObject *type)
{
    __pyx_FusedFunctionObject *func, *meth;
    func = (__pyx_FusedFunctionObject *) self;
    if (func->self || func->func.flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(self);
        return self;
    }
    if (obj == Py_None)
        obj = NULL;
    meth = (__pyx_FusedFunctionObject *) __pyx_FusedFunction_New(
                    ((PyCFunctionObject *) func)->m_ml,
                    ((__pyx_CyFunctionObject *) func)->flags,
                    ((__pyx_CyFunctionObject *) func)->func_qualname,
                    ((__pyx_CyFunctionObject *) func)->func_closure,
                    ((PyCFunctionObject *) func)->m_module,
                    ((__pyx_CyFunctionObject *) func)->func_globals,
                    ((__pyx_CyFunctionObject *) func)->func_code);
    if (!meth)
        return NULL;
    if (func->func.defaults) {
        PyObject **pydefaults;
        int i;
        if (!__Pyx_CyFunction_InitDefaults((PyObject*)meth,
                                      func->func.defaults_size,
                                      func->func.defaults_pyobjects)) {
            Py_XDECREF((PyObject*)meth);
            return NULL;
        }
        memcpy(meth->func.defaults, func->func.defaults, func->func.defaults_size);
        pydefaults = __Pyx_CyFunction_Defaults(PyObject *, meth);
        for (i = 0; i < meth->func.defaults_pyobjects; i++)
            Py_XINCREF(pydefaults[i]);
    }
    Py_XINCREF(func->func.func_classobj);
    meth->func.func_classobj = func->func.func_classobj;
    Py_XINCREF(func->__signatures__);
    meth->__signatures__ = func->__signatures__;
    Py_XINCREF(type);
    meth->type = type;
    Py_XINCREF(func->func.defaults_tuple);
    meth->func.defaults_tuple = func->func.defaults_tuple;
    if (func->func.flags & __Pyx_CYFUNCTION_CLASSMETHOD)
        obj = type;
    Py_XINCREF(obj);
    meth->self = obj;
    return (PyObject *) meth;
}
static PyObject *
_obj_to_str(PyObject *obj)
{
    if (PyType_Check(obj))
        return PyObject_GetAttr(obj, __pyx_n_s_name_2);
    else
        return PyObject_Str(obj);
}
static PyObject *
__pyx_FusedFunction_getitem(__pyx_FusedFunctionObject *self, PyObject *idx)
{
    PyObject *signature = NULL;
    PyObject *unbound_result_func;
    PyObject *result_func = NULL;
    if (self->__signatures__ == NULL) {
        PyErr_SetString(PyExc_TypeError, "Function is not fused");
        return NULL;
    }
    if (PyTuple_Check(idx)) {
        PyObject *list = PyList_New(0);
        Py_ssize_t n = PyTuple_GET_SIZE(idx);
        PyObject *sep = NULL;
        int i;
        if (unlikely(!list))
            return NULL;
        for (i = 0; i < n; i++) {
            int ret;
            PyObject *string;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            PyObject *item = PyTuple_GET_ITEM(idx, i);
#else
            PyObject *item = PySequence_ITEM(idx, i);  if (unlikely(!item)) goto __pyx_err;
#endif
            string = _obj_to_str(item);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
            Py_DECREF(item);
#endif
            if (unlikely(!string)) goto __pyx_err;
            ret = PyList_Append(list, string);
            Py_DECREF(string);
            if (unlikely(ret < 0)) goto __pyx_err;
        }
        sep = PyUnicode_FromString("|");
        if (likely(sep))
            signature = PyUnicode_Join(sep, list);
__pyx_err:
;
        Py_DECREF(list);
        Py_XDECREF(sep);
    } else {
        signature = _obj_to_str(idx);
    }
    if (!signature)
        return NULL;
    unbound_result_func = PyObject_GetItem(self->__signatures__, signature);
    if (unbound_result_func) {
        if (self->self || self->type) {
            __pyx_FusedFunctionObject *unbound = (__pyx_FusedFunctionObject *) unbound_result_func;
            Py_CLEAR(unbound->func.func_classobj);
            Py_XINCREF(self->func.func_classobj);
            unbound->func.func_classobj = self->func.func_classobj;
            result_func = __pyx_FusedFunction_descr_get(unbound_result_func,
                                                        self->self, self->type);
        } else {
            result_func = unbound_result_func;
            Py_INCREF(result_func);
        }
    }
    Py_DECREF(signature);
    Py_XDECREF(unbound_result_func);
    return result_func;
}
static PyObject *
__pyx_FusedFunction_callfunction(PyObject *func, PyObject *args, PyObject *kw)
{
     __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
    int static_specialized = (cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD &&
                              !((__pyx_FusedFunctionObject *) func)->__signatures__);
    if (cyfunc->flags & __Pyx_CYFUNCTION_CCLASS && !static_specialized) {
        return __Pyx_CyFunction_CallAsMethod(func, args, kw);
    } else {
        return __Pyx_CyFunction_Call(func, args, kw);
    }
}
static PyObject *
__pyx_FusedFunction_call(PyObject *func, PyObject *args, PyObject *kw)
{
    __pyx_FusedFunctionObject *binding_func = (__pyx_FusedFunctionObject *) func;
    Py_ssize_t argc = PyTuple_GET_SIZE(args);
    PyObject *new_args = NULL;
    __pyx_FusedFunctionObject *new_func = NULL;
    PyObject *result = NULL;
    PyObject *self = NULL;
    int is_staticmethod = binding_func->func.flags & __Pyx_CYFUNCTION_STATICMETHOD;
    int is_classmethod = binding_func->func.flags & __Pyx_CYFUNCTION_CLASSMETHOD;
    if (binding_func->self) {
        Py_ssize_t i;
        new_args = PyTuple_New(argc + 1);
        if (!new_args)
            return NULL;
        self = binding_func->self;
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_INCREF(self);
#endif
        Py_INCREF(self);
        PyTuple_SET_ITEM(new_args, 0, self);
        for (i = 0; i < argc; i++) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            PyObject *item = PyTuple_GET_ITEM(args, i);
            Py_INCREF(item);
#else
            PyObject *item = PySequence_ITEM(args, i);  if (unlikely(!item)) goto bad;
#endif
            PyTuple_SET_ITEM(new_args, i + 1, item);
        }
        args = new_args;
    } else if (binding_func->type) {
        if (argc < 1) {
            PyErr_SetString(PyExc_TypeError, "Need at least one argument, 0 given.");
            return NULL;
        }
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        self = PyTuple_GET_ITEM(args, 0);
#else
        self = PySequence_ITEM(args, 0);  if (unlikely(!self)) return NULL;
#endif
    }
    if (self && !is_classmethod && !is_staticmethod) {
        int is_instance = PyObject_IsInstance(self, binding_func->type);
        if (unlikely(!is_instance)) {
            PyErr_Format(PyExc_TypeError,
                         "First argument should be of type %.200s, got %.200s.",
                         ((PyTypeObject *) binding_func->type)->tp_name,
                         Py_TYPE(self)->tp_name);
            goto bad;
        } else if (unlikely(is_instance == -1)) {
            goto bad;
        }
    }
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
    Py_XDECREF(self);
    self = NULL;
#endif
    if (binding_func->__signatures__) {
        PyObject *tup;
        if (is_staticmethod && binding_func->func.flags & __Pyx_CYFUNCTION_CCLASS) {
            tup = PyTuple_Pack(3, args,
                               kw == NULL ? Py_None : kw,
                               binding_func->func.defaults_tuple);
            if (unlikely(!tup)) goto bad;
            new_func = (__pyx_FusedFunctionObject *) __Pyx_CyFunction_CallMethod(
                func, binding_func->__signatures__, tup, NULL);
        } else {
            tup = PyTuple_Pack(4, binding_func->__signatures__, args,
                               kw == NULL ? Py_None : kw,
                               binding_func->func.defaults_tuple);
            if (unlikely(!tup)) goto bad;
            new_func = (__pyx_FusedFunctionObject *) __pyx_FusedFunction_callfunction(func, tup, NULL);
        }
        Py_DECREF(tup);
        if (unlikely(!new_func))
            goto bad;
        Py_XINCREF(binding_func->func.func_classobj);
        Py_CLEAR(new_func->func.func_classobj);
        new_func->func.func_classobj = binding_func->func.func_classobj;
        func = (PyObject *) new_func;
    }
    result = __pyx_FusedFunction_callfunction(func, args, kw);
bad:
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
    Py_XDECREF(self);
#endif
    Py_XDECREF(new_args);
    Py_XDECREF((PyObject *) new_func);
    return result;
}
static PyMemberDef __pyx_FusedFunction_members[] = {
    {(char *) "__signatures__",
     T_OBJECT,
     offsetof(__pyx_FusedFunctionObject, __signatures__),
     READONLY,
     0},
    {0, 0, 0, 0, 0},
};
static PyMappingMethods __pyx_FusedFunction_mapping_methods = {
    0,
    (binaryfunc) __pyx_FusedFunction_getitem,
    0,
};
static PyTypeObject __pyx_FusedFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "fused_cython_function",
    sizeof(__pyx_FusedFunctionObject),
    0,
    (destructor) __pyx_FusedFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    0,
    0,
    0,
    &__pyx_FusedFunction_mapping_methods,
    0,
    (ternaryfunc) __pyx_FusedFunction_call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    0,
    (traverseproc) __pyx_FusedFunction_traverse,
    (inquiry) __pyx_FusedFunction_clear,
    0,
    0,
    0,
    0,
    0,
    __pyx_FusedFunction_members,
    __pyx_CyFunction_getsets,
    &__pyx_CyFunctionType_type,
    0,
    __pyx_FusedFunction_descr_get,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if PY_VERSION_HEX >= 0x030C0000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
    0,
#endif
};
static int __pyx_FusedFunction_init(void) {
    __pyx_FusedFunctionType_type.tp_base = __pyx_CyFunctionType;
    __pyx_FusedFunctionType = __Pyx_FetchCommonType(&__pyx_FusedFunctionType_type);
    if (__pyx_FusedFunctionType == NULL) {
        return -1;
    }
    return 0;
}

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


    /* MemviewSliceIsContig */
    static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
    static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
    static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* TypeInfoCompare */
    static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
    static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (unlikely(buf->strides[dim] != sizeof(void *))) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (unlikely(buf->strides[dim] != buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (unlikely(stride < buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (unlikely(spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(spec & (__Pyx_MEMVIEW_PTR))) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(buf->suboffsets)) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (unlikely(buf->suboffsets && buf->suboffsets[dim] >= 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (unlikely(!buf->suboffsets || (buf->suboffsets[dim] < 0))) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (unlikely(buf->ndim != ndim)) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (unlikely(!__Pyx_BufFmt_CheckString(&ctx, buf->format))) goto fail;
    }
    if (unlikely((unsigned) buf->itemsize != dtype->size)) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    if (buf->len > 0) {
        for (i = 0; i < ndim; i++) {
            spec = axes_specs[i];
            if (unlikely(!__pyx_check_strides(buf, i, ndim, spec)))
                goto fail;
            if (unlikely(!__pyx_check_suboffsets(buf, i, ndim, spec)))
                goto fail;
        }
        if (unlikely(buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag)))
            goto fail;
    }
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
    static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float32_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
    static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_float64_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
    static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_nn___pyx_t_5numpy_float64_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* ObjectToMemviewSlice */
    static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_ds_nn___pyx_t_5numpy_int_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
    static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_d_dc_nn___pyx_t_5numpy_float64_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_FOLLOW), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_CONTIG) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, __Pyx_IS_C_CONTIG,
                                                 (PyBUF_C_CONTIGUOUS | PyBUF_FORMAT) | writable_flag, 2,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
    static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_nn___pyx_t_5numpy_float64_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 3,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* MemviewDtypeToObject */
    static CYTHON_INLINE PyObject *__pyx_memview_get_nn___pyx_t_5numpy_float64_t(const char *itemp) {
    return (PyObject *) PyFloat_FromDouble(*(__pyx_t_5numpy_float64_t *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_nn___pyx_t_5numpy_float64_t(const char *itemp, PyObject *obj) {
    __pyx_t_5numpy_float64_t value = __pyx_PyFloat_AsDouble(obj);
    if ((value == ((npy_float64)-1)) && PyErr_Occurred())
        return 0;
    *(__pyx_t_5numpy_float64_t *) itemp = value;
    return 1;
}

/* ObjectToMemviewSlice */
    static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dc_nn___pyx_t_5numpy_float64_t(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_CONTIG) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, __Pyx_IS_C_CONTIG,
                                                 (PyBUF_C_CONTIGUOUS | PyBUF_FORMAT) | writable_flag, 1,
                                                 &__Pyx_TypeInfo_nn___pyx_t_5numpy_float64_t, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* Declarations */
    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* MemviewSliceCopyTemplate */
    static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_uint8(npy_uint8 value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_uint8 neg_one = (npy_uint8) -1, const_zero = (npy_uint8) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_uint8) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_uint8) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_uint8) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_uint8) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_uint8) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(npy_uint8),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE npy_int64 __Pyx_PyInt_As_npy_int64(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_int64 neg_one = (npy_int64) -1, const_zero = (npy_int64) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(npy_int64) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(npy_int64, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (npy_int64) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_int64) 0;
                case  1: __PYX_VERIFY_RETURN_INT(npy_int64, digit, digits[0])
                case 2:
                    if (8 * sizeof(npy_int64) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) >= 2 * PyLong_SHIFT) {
                            return (npy_int64) (((((npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_int64) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) >= 3 * PyLong_SHIFT) {
                            return (npy_int64) (((((((npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_int64) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) >= 4 * PyLong_SHIFT) {
                            return (npy_int64) (((((((((npy_int64)digits[3]) << PyLong_SHIFT) | (npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (npy_int64) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(npy_int64) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int64, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_int64) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int64, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_int64) 0;
                case -1: __PYX_VERIFY_RETURN_INT(npy_int64, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(npy_int64,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(npy_int64) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_int64) (((npy_int64)-1)*(((((npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(npy_int64) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_int64) ((((((npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(npy_int64) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_int64) (((npy_int64)-1)*(((((((npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_int64) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_int64) ((((((((npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(npy_int64) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_int64) (((npy_int64)-1)*(((((((((npy_int64)digits[3]) << PyLong_SHIFT) | (npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_int64) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_int64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_int64) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_int64) ((((((((((npy_int64)digits[3]) << PyLong_SHIFT) | (npy_int64)digits[2]) << PyLong_SHIFT) | (npy_int64)digits[1]) << PyLong_SHIFT) | (npy_int64)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(npy_int64) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int64, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_int64) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_int64, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            npy_int64 val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (npy_int64) -1;
        }
    } else {
        npy_int64 val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (npy_int64) -1;
        val = __Pyx_PyInt_As_npy_int64(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_int64");
    return (npy_int64) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_int64");
    return (npy_int64) -1;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_npy_int64(npy_int64 value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_int64 neg_one = (npy_int64) -1, const_zero = (npy_int64) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(npy_int64) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(npy_int64) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_int64) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(npy_int64) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(npy_int64) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(npy_int64),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_Py_intptr_t(Py_intptr_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(Py_intptr_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(Py_intptr_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE Py_intptr_t __Pyx_PyInt_As_Py_intptr_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_intptr_t neg_one = (Py_intptr_t) -1, const_zero = (Py_intptr_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(Py_intptr_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (Py_intptr_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Py_intptr_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(Py_intptr_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Py_intptr_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Py_intptr_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) >= 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (Py_intptr_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(Py_intptr_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(Py_intptr_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (Py_intptr_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(Py_intptr_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(Py_intptr_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(Py_intptr_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(Py_intptr_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(Py_intptr_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(Py_intptr_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((((Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(Py_intptr_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) (((Py_intptr_t)-1)*(((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(Py_intptr_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(Py_intptr_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(Py_intptr_t) - 1 > 4 * PyLong_SHIFT) {
                            return (Py_intptr_t) ((((((((((Py_intptr_t)digits[3]) << PyLong_SHIFT) | (Py_intptr_t)digits[2]) << PyLong_SHIFT) | (Py_intptr_t)digits[1]) << PyLong_SHIFT) | (Py_intptr_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(Py_intptr_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(Py_intptr_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(Py_intptr_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            Py_intptr_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (Py_intptr_t) -1;
        }
    } else {
        Py_intptr_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (Py_intptr_t) -1;
        val = __Pyx_PyInt_As_Py_intptr_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to Py_intptr_t");
    return (Py_intptr_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to Py_intptr_t");
    return (Py_intptr_t) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE npy_uint64 __Pyx_PyInt_As_npy_uint64(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_uint64 neg_one = (npy_uint64) -1, const_zero = (npy_uint64) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(npy_uint64) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(npy_uint64, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (npy_uint64) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_uint64) 0;
                case  1: __PYX_VERIFY_RETURN_INT(npy_uint64, digit, digits[0])
                case 2:
                    if (8 * sizeof(npy_uint64) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) >= 2 * PyLong_SHIFT) {
                            return (npy_uint64) (((((npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_uint64) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) >= 3 * PyLong_SHIFT) {
                            return (npy_uint64) (((((((npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_uint64) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) >= 4 * PyLong_SHIFT) {
                            return (npy_uint64) (((((((((npy_uint64)digits[3]) << PyLong_SHIFT) | (npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (npy_uint64) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(npy_uint64) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint64, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_uint64) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint64, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_uint64) 0;
                case -1: __PYX_VERIFY_RETURN_INT(npy_uint64, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(npy_uint64,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(npy_uint64) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_uint64) (((npy_uint64)-1)*(((((npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(npy_uint64) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_uint64) ((((((npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(npy_uint64) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_uint64) (((npy_uint64)-1)*(((((((npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_uint64) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_uint64) ((((((((npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(npy_uint64) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_uint64) (((npy_uint64)-1)*(((((((((npy_uint64)digits[3]) << PyLong_SHIFT) | (npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_uint64) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint64, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint64) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_uint64) ((((((((((npy_uint64)digits[3]) << PyLong_SHIFT) | (npy_uint64)digits[2]) << PyLong_SHIFT) | (npy_uint64)digits[1]) << PyLong_SHIFT) | (npy_uint64)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(npy_uint64) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint64, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_uint64) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint64, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            npy_uint64 val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (npy_uint64) -1;
        }
    } else {
        npy_uint64 val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (npy_uint64) -1;
        val = __Pyx_PyInt_As_npy_uint64(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_uint64");
    return (npy_uint64) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_uint64");
    return (npy_uint64) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE npy_uint32 __Pyx_PyInt_As_npy_uint32(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const npy_uint32 neg_one = (npy_uint32) -1, const_zero = (npy_uint32) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(npy_uint32) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(npy_uint32, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (npy_uint32) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_uint32) 0;
                case  1: __PYX_VERIFY_RETURN_INT(npy_uint32, digit, digits[0])
                case 2:
                    if (8 * sizeof(npy_uint32) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) >= 2 * PyLong_SHIFT) {
                            return (npy_uint32) (((((npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_uint32) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) >= 3 * PyLong_SHIFT) {
                            return (npy_uint32) (((((((npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_uint32) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) >= 4 * PyLong_SHIFT) {
                            return (npy_uint32) (((((((((npy_uint32)digits[3]) << PyLong_SHIFT) | (npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (npy_uint32) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(npy_uint32) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_uint32) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (npy_uint32) 0;
                case -1: __PYX_VERIFY_RETURN_INT(npy_uint32, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(npy_uint32,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(npy_uint32) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_uint32) (((npy_uint32)-1)*(((((npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(npy_uint32) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) - 1 > 2 * PyLong_SHIFT) {
                            return (npy_uint32) ((((((npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(npy_uint32) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_uint32) (((npy_uint32)-1)*(((((((npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(npy_uint32) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) - 1 > 3 * PyLong_SHIFT) {
                            return (npy_uint32) ((((((((npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(npy_uint32) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_uint32) (((npy_uint32)-1)*(((((((((npy_uint32)digits[3]) << PyLong_SHIFT) | (npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(npy_uint32) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(npy_uint32, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(npy_uint32) - 1 > 4 * PyLong_SHIFT) {
                            return (npy_uint32) ((((((((((npy_uint32)digits[3]) << PyLong_SHIFT) | (npy_uint32)digits[2]) << PyLong_SHIFT) | (npy_uint32)digits[1]) << PyLong_SHIFT) | (npy_uint32)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(npy_uint32) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(npy_uint32) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(npy_uint32, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            npy_uint32 val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (npy_uint32) -1;
        }
    } else {
        npy_uint32 val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (npy_uint32) -1;
        val = __Pyx_PyInt_As_npy_uint32(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to npy_uint32");
    return (npy_uint32) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to npy_uint32");
    return (npy_uint32) -1;
}

/* BytesContains */
    static CYTHON_INLINE int __Pyx_BytesContains(PyObject* bytes, char character) {
    const Py_ssize_t length = PyBytes_GET_SIZE(bytes);
    char* char_start = PyBytes_AS_STRING(bytes);
    return memchr(char_start, (unsigned char)character, (size_t)length) != NULL;
}

/* ImportNumPyArray */
    static PyObject* __Pyx__ImportNumPyArray(void) {
    PyObject *numpy_module, *ndarray_object = NULL;
    numpy_module = __Pyx_Import(__pyx_n_s_numpy, NULL, 0);
    if (likely(numpy_module)) {
        ndarray_object = PyObject_GetAttrString(numpy_module, "ndarray");
        Py_DECREF(numpy_module);
    }
    if (unlikely(!ndarray_object)) {
        PyErr_Clear();
    }
    if (unlikely(!ndarray_object || !PyObject_TypeCheck(ndarray_object, &PyType_Type))) {
        Py_XDECREF(ndarray_object);
        Py_INCREF(Py_None);
        ndarray_object = Py_None;
    }
    return ndarray_object;
}
static CYTHON_INLINE PyObject* __Pyx_ImportNumPyArrayTypeIfAvailable(void) {
    if (unlikely(!__pyx_numpy_ndarray)) {
        __pyx_numpy_ndarray = __Pyx__ImportNumPyArray();
    }
    Py_INCREF(__pyx_numpy_ndarray);
    return __pyx_numpy_ndarray;
}

/* CIntFromPy */
    static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[5];
    int same=1, i, found_dot;
    const char* rt_from_call = Py_GetVersion();
    PyOS_snprintf(ctversion, 5, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    found_dot = 0;
    for (i = 0; i < 4; i++) {
        if (!ctversion[i]) {
            same = (rt_from_call[i] < '0' || rt_from_call[i] > '9');
            break;
        }
        if (rt_from_call[i] != ctversion[i]) {
            same = 0;
            break;
        }
    }
    if (!same) {
        char rtversion[5] = {'\0'};
        char message[200];
        for (i=0; i<4; ++i) {
            if (rt_from_call[i] == '.') {
                if (found_dot) break;
                found_dot = 1;
            } else if (rt_from_call[i] < '0' || rt_from_call[i] > '9') {
                break;
            }
            rtversion[i] = rt_from_call[i];
        }
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* VoidPtrImport */
    #ifndef __PYX_HAVE_RT_ImportVoidPtr_0_29_36
#define __PYX_HAVE_RT_ImportVoidPtr_0_29_36
static int __Pyx_ImportVoidPtr_0_29_36(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
    #ifndef __PYX_HAVE_RT_ImportFunction_0_29_36
#define __PYX_HAVE_RT_ImportFunction_0_29_36
static int __Pyx_ImportFunction_0_29_36(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
